= Hierarchical menus =

The location bar aids users in navigating the depths of Launchpad.  It is
built from a series of Breadcrumb objects after Zope's object traversal
step.

== A simple object hierarchy ==

First, we need a hierarchy of objects to build upon:

    >>> from zope.component import getMultiAdapter, provideAdapter
    >>> from zope.interface import Interface, implements

    >>> class ICookbook(Interface):
    ...     """A cookbook for holding recipes."""

    >>> class IRecipe(Interface):
    ...     """A recipe in a cookbook."""

    >>> from canonical.launchpad.webapp.interfaces import ICanonicalUrlData

    >>> class BaseContent:
    ...     implements(ICanonicalUrlData)
    ...
    ...     def __init__(self, name, parent):
    ...         self.name = name
    ...         self.path = name
    ...         self.inside = parent
    ...         self.rootsite = None

    >>> class Root(BaseContent):
    ...     """ The site root."""

    >>> class Cookbook(BaseContent):
    ...     implements(ICookbook)

    >>> class Recipe(BaseContent):
    ...     implements(IRecipe)

Today we'll be cooking with Spam!

    >>> root = Root('', None)
    >>> cookbook = Cookbook('joy-of-cooking', root)
    >>> recipe = Recipe('spam', cookbook)


== Building IBreadcrumb objects ==

The construction of breadcrumb objects is handled by a BreadcrumbBuilder
factory.  The factory serves as the adapter between context objects
and the IBreadcrumb interface.

    >>> from canonical.launchpad.webapp.breadcrumb import BreadcrumbBuilder

    >>> builder = BreadcrumbBuilder(cookbook)

The builder holds a temporary copy of a breadcrumb until the breadcrumb is
in a usable state.  This allows us to adapt the breadcrumb context object
in one place, and to defer setting the breadcrumb's URL.  We can ask the
builder for a finished breadcrumb after both the text and the URL have
been specified.

    >>> builder.text = 'Joy of cooking'
    >>> builder.url = 'http://launchpad.dev/joy-of-cooking'

    >>> builder.make_breadcrumb()
    <Breadcrumb
        url='http://launchpad.dev/joy-of-cooking'
        text='Joy of cooking'>

The builder enforces the requirement for breadcrumbs to have valid URL.  The
builder raises an error if a URL is not explicitly given by the developer.

    >>> builder = BreadcrumbBuilder(cookbook)
    >>> builder.text = 'Oops!'

    >>> builder.make_breadcrumb()
    Traceback (most recent call last):
    ...
    IncompleteObjectError: The object being built by must be given a URL.

The breadcrumb's attributes are given as attributes on the builder class.
If the attribute is callable, it is treated as a method of the builder.
Otherwise the attribute's value is used directly.

    >>> from canonical.launchpad.webapp.publisher import canonical_url

    >>> def dynamictext(self):
    ...     return self.context.name.capitalize().replace('-', ' ')
    >>> def crumb_url(self):
    ...     return canonical_url(self.context)

    >>> builder = BreadcrumbBuilder(cookbook)
    >>> builder.text = dynamictext
    >>> builder.url = crumb_url

    >>> builder.make_breadcrumb()
    <Breadcrumb
        url='http://launchpad.dev/joy-of-cooking'
        text='Joy of cooking'>

The build process is easily customized via subclassing.

    >>> class RecipeCrumbBuilder(BreadcrumbBuilder):
    ...     def text(self):
    ...         return self.context.name.capitalize() + '!'
    ...
    ...     url = crumb_url

    >>> builder = RecipeCrumbBuilder(recipe)
    >>> builder.make_breadcrumb()
    <Breadcrumb
        url='http://launchpad.dev/joy-of-cooking/spam'
        text='Spam!'>


== Discovering breadcrumbs ==

The Hierarchy class builds the breadcrumbs by looking at each object in
the request.traversed_objects attribute.  If a traversed object can be
adapted to IBreadcrumb, then it is added to the breadcrumbs list.

We'll add the objects to the request's list of traversed objects, so
the hierarchy will discover them.

    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest
    >>> from canonical.launchpad.webapp import urlsplit

    >>> def make_fake_request(url, traversed_objects=None):
    ...     """Return a fake request object for testing."""
    ...     url_parts = urlsplit(url)
    ...     server_url = '://'.join(url_parts[0:2])
    ...     path_info = url_parts[2]
    ...     request = LaunchpadTestRequest(
    ...         SERVER_URL=server_url,
    ...         PATH_INFO=path_info)
    ...     request._traversed_names = path_info.split('/')[1:]
    ...     request.traversed_objects = traversed_objects
    ...     return request

    >>> request = make_fake_request(
    ...     'http://launchpad.dev/joy-of-cooking/spam',
    ...     [root, cookbook, recipe])

The Hierarchy's list of breadcrumbs is empty since none of the objects
have an IBreadcrumb adapter.

    >>> hierarchy = getMultiAdapter((recipe, request), name='+hierarchy')
    >>> hierarchy.items()
    []

Adding the adapters causes the Cookbook and Recipe objects to show up
in the hierarchy.

    >>> from canonical.launchpad.webapp.breadcrumb import Breadcrumb
    >>> from canonical.launchpad.webapp.interfaces import IBreadcrumb
    >>> from zope.component import queryAdapter

    >>> def object_to_breadcrumb(context):
    ...     return context.name.capitalize().replace('-', ' ')

    >>> provideAdapter(object_to_breadcrumb, [ICookbook], IBreadcrumb)
    >>> provideAdapter(object_to_breadcrumb, [IRecipe], IBreadcrumb)

The IBreadcrumb adapters should return something string-like.  This will
become the breadcrumbs's text.

    >>> queryAdapter(cookbook, IBreadcrumb)
    'Joy of cooking'

The hierarchy's breadcrumbs are ordered, starting with the breadcrumb
closest to the hierarchy root.

    >>> hierarchy.items()
    [<Breadcrumb
        url='http://launchpad.dev/joy-of-cooking'
        text='Joy of cooking'>,
     <Breadcrumb
        url='http://launchpad.dev/joy-of-cooking/spam'
        text='Spam'>]


== Rendering the list ==

The Hierarchy object is responsible for rendering the HTML for the location
bar.

    >>> from BeautifulSoup import BeautifulSoup
    >>> from canonical.launchpad.testing.pages import extract_text

    # Borrowed from launchpad.testing.pages.print_location()
    >>> def print_hierarchy(html):
    ...     soup = BeautifulSoup(html)
    ...     hierarchy = soup.find(attrs={'id': 'lp-hierarchy'}).findAll(
    ...         recursive=False)
    ...     segments = [extract_text(step).encode('us-ascii', 'replace')
    ...                 for step in hierarchy
    ...                 if step.name != 'small']
    ...     print 'Location:', ' > '.join(segments[2:])

    >>> print_hierarchy(hierarchy.render())
    Location: Joy of cooking > Spam

The Launchpad Homepage displays no items in it's location bar.  We are
considered to be on the home page if there are no breadcrumbs.

    # Simulate a visit to the site root
    >>> request = make_fake_request('http://launchpad.dev/', [root])
    >>> homepage_hierarchy = getMultiAdapter(
    ...     (root, request), name='+hierarchy')

    >>> homepage_hierarchy.items()
    []

    >>> print_hierarchy(homepage_hierarchy.render())
    Location:

