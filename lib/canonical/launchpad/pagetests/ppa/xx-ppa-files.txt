= Personal Package Archives Files =

PPA files are proxied via +archive/+files or +builds/+files in a way
we can decide between redirecting to the public librarian URL or
stream the restricted content in inline.

== Setup ==

Creating a complete source and binary publication on No Priv's private
PPA.

    >>> from zope.component import getUtility

    >>> from canonical.launchpad.tests.test_publishing import (
    ...      SoyuzTestPublisher)
    >>> from canonical.launchpad.interfaces.person import IPersonSet
    >>> from canonical.launchpad.interfaces.publishing import (
    ...     PackagePublishingPocket)

Make the PPA private.

    >>> login('foo.bar@canonical.com')
    >>> no_priv = getUtility(IPersonSet).getByName('no-priv')
    >>> no_priv.archive.buildd_secret = 'x'
    >>> no_priv.archive.private = True

Initialise SoyuzTestPublisher.

    >>> test_publisher = SoyuzTestPublisher()
    >>> test_publisher.prepareBreezyAutotest()
    >>> test_publisher.addFakeChroots()

Publish a source.

    >>> test_source = test_publisher.getPubSource(
    ...     archive=no_priv.archive, sourcename='test-pkg',
    ...     version='1.0')
    >>> dsc_file = test_source.sourcepackagerelease.files[0].libraryfile

Include a source tarball.

    >>> tar_gz = test_publisher.addMockFile(
    ...     'test-pkg_1.0.tar.gz', filecontent='TAR', restricted=True)
    >>> unused = test_source.sourcepackagerelease.addFile(tar_gz)


Create a corresponding upload changesfile.

    >>> source_upload = test_source.distroseries.createQueueEntry(
    ...     pocket=PackagePublishingPocket.RELEASE,
    ...     changesfilename='test-pkg_1.0_source.changes',
    ...     changesfilecontent='Bogus source changesfile',
    ...     archive=no_priv.archive)
    >>> unused = source_upload.addSource(test_source.sourcepackagerelease)
    >>> source_upload.setDone()

Create a corresponding binary publication and its changesfile.

    >>> binary_pubs = test_publisher.getPubBinaries(
    ...     binaryname='test-bin', pub_source=test_source)
    >>> deb_file = binary_pubs[0].binarypackagerelease.files[0].libraryfile

    >>> binary_upload = test_source.distroseries.createQueueEntry(
    ...     pocket=PackagePublishingPocket.RELEASE,
    ...     changesfilename='test-pkg_1.0_all.changes',
    ...     changesfilecontent='Bogus binary changesfile',
    ...     archive=no_priv.archive)

    >>> [build] = test_source.getBuilds()
    >>> build.datebuilt = build.datecreated
    >>> unused = binary_upload.addBuild(build)

Create a buildlog and a binary upload_log.

    >>> buildlog_name = (
    ...     'buildlog_ubuntu-breezy-autotest-i386.'
    ...     'test-pkg_1.0_FULLYBUILT.txt.gz')
    >>> buildlog = test_publisher.addMockFile(
    ...     buildlog_name, filecontent='bogus buildlog', restricted=True)
    >>> build.buildlog = buildlog

    >>> upload_log_name = 'upload_%d_log.txt' % build.id
    >>> upload_log = test_publisher.addMockFile(
    ...     upload_log_name, filecontent='bogus build upload_log',
    ...     restricted=True)
    >>> build.upload_log = upload_log

Create a subsequent source publication so a package diff can be provided.

    >>> another_test_source = test_publisher.getPubSource(
    ...     archive=no_priv.archive, sourcename='test-pkg',
    ...     version='1.1')
    >>> package_diff  = test_source.sourcepackagerelease.requestDiffTo(
    ...     no_priv, another_test_source.sourcepackagerelease)
    >>> package_diff.diff_content = test_publisher.addMockFile(
    ...     'test-pkg_1.0_1.1.diff.gz', filecontent='bogus diff',
    ...     restricted=True)
    >>> package_diff.date_fulfilled = package_diff.date_requested

Commit everything.

    >>> from canonical.database.sqlbase import commit
    >>> commit()


== PPA file links ==

Links to files accessible via +files/ proxy in the PPA page.

    >>> ppa_links = [
    ...     ('(changesfile)', source_upload.changesfile),
    ...     ('test-pkg_1.0.dsc', dsc_file),
    ...     ('test-pkg_1.0.tar.gz', tar_gz),
    ...     ('test-bin_1.0_all.deb', deb_file),
    ...     ('1.0 to 1.1', package_diff.diff_content),
    ...     ]

Links to files accessible via +files/ proxy in the Build page.

    >>> builds_links = [
    ...     ('see the log', build.buildlog),
    ...     ]

    >>> build_links = [
    ...     ('test-pkg_1.0_all.changes', binary_upload.changesfile),
    ...     (buildlog_name, build.buildlog),
    ...     (upload_log_name, build.upload_log),
    ...     ]

    >>> logout()

Create a function to check the expected links.

    >>> from mechanize import LinkNotFoundError
    >>> def check_urls(browser, links):
    ...     for link, libraryfile in links:
    ...         try:
    ...             full_url = browser.getLink(link).url
    ...         except LinkNotFoundError:
    ...             print '%s: NOT FOUND' % libraryfile.filename
    ...             continue
    ...         relative_path = '/'.join(full_url.split('/')[-2:])
    ...         expected_path = '+files/%s' % libraryfile.filename
    ...         if relative_path == expected_path:
    ...             print '%s: OK' % libraryfile.filename
    ...         else:
    ...             print '%s: NOT OK (%s)' % (
    ...                 libraryfile.filename, relative_path)


Checking file links on PPA index page.

    >>> no_priv_browser = setupBrowser(
    ...     auth='Basic no-priv@canonical.com:test')
    >>> no_priv_browser.open("http://launchpad.dev/~no-priv/+archive")

    >>> print no_priv_browser.title
    Private PPA for No Privileges Person

    >>> check_urls(no_priv_browser, ppa_links)
    test-pkg_1.0_source.changes: OK
    test-pkg_1.0.dsc:            OK
    test-pkg_1.0.tar.gz:         OK
    test-bin_1.0_all.deb:        OK
    test-pkg_1.0_1.1.diff.gz:    OK


    >>> no_priv_browser.getLink('Copy packages').click()
    >>> check_urls(no_priv_browser, ppa_links)
    test-pkg_1.0_source.changes: OK
    test-pkg_1.0.dsc:            OK
    test-pkg_1.0.tar.gz:         OK
    test-bin_1.0_all.deb:        OK
    test-pkg_1.0_1.1.diff.gz:    OK


    >>> no_priv_browser.getLink('Personal Package Archive').click()
    >>> no_priv_browser.getLink('Delete packages').click()
    >>> check_urls(no_priv_browser, ppa_links)
    test-pkg_1.0_source.changes: OK
    test-pkg_1.0.dsc:            OK
    test-pkg_1.0.tar.gz:         OK
    test-bin_1.0_all.deb:        OK
    test-pkg_1.0_1.1.diff.gz:    OK

    >>> no_priv_browser.getLink('Personal Package Archive').click()
    >>> no_priv_browser.getLink('View build records').click()
    >>> no_priv_browser.getControl(name="build_state").value = ['built']
    >>> no_priv_browser.getControl("Update").click()
    >>> check_urls(no_priv_browser, builds_links)
    buildlog_ubuntu-breezy-autotest-i386.test-pkg_1.0_FULLYBUILT.txt.gz: OK

    >>> no_priv_browser.getLink('Personal Package Archive').click()

Checking file links on Build index page.

    >>> no_priv_browser.getLink('i386').click()
    >>> print no_priv_browser.title
    i386 build of test-pkg 1.0 in ubuntutest breezy-autotest RELEASE

    >>> check_urls(no_priv_browser, build_links)
    test-pkg_1.0_all.changes:    OK
    buildlog_...txt.gz:          OK
    upload_..._log.txt:          OK

Retrieve file information for using the direct HTTP browsing API.

    >>> login('foo.bar@canonical.com')
    >>> file_content = dsc_file.read()
    >>> file_size = str(dsc_file.content.filesize)
    >>> file_mimetype = dsc_file.mimetype
    >>> file_lp_url = str(
    ...     'http://launchpad.dev/~no-priv/+archive/ppa/+files/%s' %
    ...     dsc_file.filename)
    >>> logout()

Sample Person can't access the file.

    >>> browser.open(file_lp_url)
    Traceback (most recent call last):
    ...
    Unauthorized

The 'No Privileges' user, the PPA owner, can download the DSC file.

    >>> no_priv_browser.open(file_lp_url)

And its informations match the library file.

    >>> print file_content
    I do not care about sources.
    >>> print file_size
    28
    >>> print file_mimetype
    application/text

    >>> print no_priv_browser.contents
    I do not care about sources.
    >>> print no_priv_browser.headers['content-length']
    28
    >>> print no_priv_browser.headers['content-type']
    application/text

Gzipped package diffs ('.diff.gz') and buildlogs ('.txt.gz') are
treated differently from the other files. Since we want their contents
to be rendered inline by the browsers we override their 'content-encoding'
and 'content-type' to 'gzip' and 'text/plain', respectively.

    >>> login('foo.bar@canonical.com')

    >>> buildlog_content = buildlog.read()
    >>> buildlog_size = str(buildlog.content.filesize)
    >>> buildlog_lp_url = str(
    ...     'http://launchpad.dev/~no-priv/+archive/ppa/+build/%d/+files/%s' %
    ...     (build.id, buildlog.filename))

    >>> diff_content = package_diff.diff_content.read()
    >>> diff_size = str(package_diff.diff_content.content.filesize)
    >>> diff_lp_url = str(
    ...     'http://launchpad.dev/~no-priv/+archive/ppa/+files/%s' %
    ...     package_diff.diff_content.filename)

    >>> logout()

Restricted buildlogs are served with the pristine content and size,
but 'content-type' and 'content-encoding' are modified.

    >>> no_priv_browser.open(buildlog_lp_url)

    >>> print buildlog_content
    bogus buildlog
    >>> print buildlog_size
    14

    >>> print no_priv_browser.contents
    bogus buildlog
    >>> print no_priv_browser.headers['content-length']
    14

    >>> print no_priv_browser.headers['content-type']
    text/plain
    >>> print no_priv_browser.headers['content-encoding']
    gzip

The same happens for package diffs.

    >>> no_priv_browser.open(diff_lp_url)

    >>> print diff_content
    bogus diff
    >>> print diff_size
    10

    >>> print no_priv_browser.contents
    bogus diff
    >>> print no_priv_browser.headers['content-length']
    10

    >>> print no_priv_browser.headers['content-type']
    text/plain
    >>> print no_priv_browser.headers['content-encoding']
    gzip

When the PPA and the `LibraryFileAlias` become public, the +files/
proxy redirects to the public http url.

    >>> login('foo.bar@canonical.com')

    >>> no_priv = getUtility(IPersonSet).getByName('no-priv')
    >>> no_priv.archive.buildd_secret = ''
    >>> no_priv.archive.private = False

    >>> from zope.security.proxy import removeSecurityProxy
    >>> removeSecurityProxy(dsc_file).restricted = False

    >>> file_librarian_url = dsc_file.http_url

    >>> commit()
    >>> logout()

    >>> print file_librarian_url
    http://localhost:58000/.../test-pkg_1.0.dsc

    >>> print http(r"""
    ... GET %s HTTP/1.1
    ... """ % file_lp_url.replace('http://launchpad.dev', ''))
    HTTP/1.1 303 See Other
    ...
    Location: http://localhost:58000/95/test-pkg_1.0.dsc
    ...
