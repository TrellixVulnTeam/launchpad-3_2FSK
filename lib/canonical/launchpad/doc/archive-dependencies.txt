= Archive dependencies =

`ArchiveDependencies` class models archive dependencies mechanics and
is used to provided the contents of 'sources_list' file used to build
sources in the given IBuildQueue context.


== Testing scenario setup ==

We use `SoyuzTestPublisher` to generate a source publications and
build candidates for ubuntu/hoary.

    >>> from canonical.launchpad.interfaces.distribution import (
    ...     IDistributionSet)
    >>> from canonical.launchpad.tests.test_publishing import (
    ...     SoyuzTestPublisher)
    >>> from canonical.launchpad.ftests import login

    >>> login('foo.bar@canonical.com')

    >>> test_publisher = SoyuzTestPublisher()

    >>> ubuntu = getUtility(IDistributionSet).getByName('ubuntu')
    >>> hoary = ubuntu.getSeries('hoary')

    >>> test_publisher.addFakeChroots(hoary)
    >>> unused = test_publisher.setUpDefaultDistroSeries(hoary)


== Static dependency maps ==

`component_dependencies` contains a static map of the default ubuntu
component dependencies (known as the 'ogre-model').

    >>> from canonical.launchpad.components.archivedependencies import (
    ...     component_dependencies)

    >>> def show_component_deps():
    ...     print "Component  |   Dependencies"
    ...     print "-----------+---------------"
    ...     for key, value in sorted(component_dependencies.items()):
    ...         print "%10s |" % (key,),
    ...         for dep in value:
    ...             print dep,
    ...         print

    >>> show_component_deps()
    Component  |   Dependencies
    -----------+---------------
          main | main
    multiverse | main restricted universe multiverse
       partner | partner
    restricted | main restricted
      universe | main universe

`pocket_dependencies` contains a static map of the default ubuntu
pocket dependencies.

    >>> from canonical.launchpad.components.archivedependencies import (
    ...     pocket_dependencies)

    >>> def show_pocket_deps():
    ...     print "Pocket    |   Dependencies"
    ...     print "----------+---------------"
    ...     for (key, value) in sorted(pocket_dependencies.items()):
    ...         print "%7s |" % (key.name,),
    ...         for pocket in value:
    ...             print pocket.name,
    ...         print

    >>> show_pocket_deps()
    Pocket    |   Dependencies
    ----------+---------------
      RELEASE | RELEASE
     SECURITY | RELEASE SECURITY
      UPDATES | RELEASE SECURITY UPDATES
     PROPOSED | RELEASE SECURITY UPDATES PROPOSED
    BACKPORTS | RELEASE SECURITY UPDATES BACKPORTS


== 'Ogre' components ==

The ubuntu 'ogre-model' ensures that build dependencies are
consistently spread according the source target component, i.e. a
source published in 'main' component is only allowed to depend on
binaries also published in 'main', on the other hand a source
published in 'universe' is allowed to depend on binaries published in
'main' and 'universe' components.

A proper name for this "model" would be 'cross-component-dependency'.

    >>> from canonical.database.sqlbase import flush_database_caches
    >>> from canonical.launchpad.ftests import syncUpdate
    >>> from canonical.launchpad.interfaces.component import IComponentSet

    >>> ubuntu_components = [
    ...     'main', 'restricted', 'universe', 'multiverse', 'partner']

    >>> from canonical.launchpad.components.archivedependencies import (
    ...     get_components_for_building)

    >>> ogre_pub = test_publisher.getPubSource(sourcename='ogre')
    >>> [ogre_build] = ogre_pub.createMissingBuilds()

    >>> def testOgreComponents():
    ...     print " Component | Ogre-Model"
    ...     print "-----------+---------------"
    ...     for component in ubuntu_components:
    ...         component = getUtility(IComponentSet)[component]
    ...         ogre_pub.secure_record.component = component
    ...         syncUpdate(ogre_pub.secure_record)
    ...         flush_database_caches()
    ...         components_term = " ".join(
    ...             get_components_for_building(ogre_build))
    ...         print '%10s | %s' % (ogre_build.current_component.name,
    ...                              components_term)

    >>> testOgreComponents()
     Component | Ogre-Model
    -----------+---------------
          main | main
    restricted | main restricted
      universe | main universe
    multiverse | main restricted universe multiverse
       partner | partner

As fixed for bug #198936, builds for the BACKPORTS pocket are allowed
to use any component available, independently of the component they
are currently published. This special-case is important because it
avoids changes to accommodate the backported source in the already
released series.

    >>> from canonical.launchpad.interfaces.publishing import (
    ...      PackagePublishingPocket)
    >>> from zope.security.proxy import removeSecurityProxy

    >>> naked_build = removeSecurityProxy(ogre_build)
    >>> naked_build.pocket = PackagePublishingPocket.BACKPORTS
    >>> syncUpdate(ogre_build)

Ultimately, it means that a build targeted to the BACKPORTS pocket
will behave as if it were published in the multiverse component,
despite the component it is actually published in.

    >>> testOgreComponents()
     Component | Ogre-Model
    -----------+---------------
          main | main restricted universe multiverse
    restricted | main restricted universe multiverse
      universe | main restricted universe multiverse
    multiverse | main restricted universe multiverse
       partner | main restricted universe multiverse


== Sources.list contents for building ==

We will use Celso's PPA for testing these mechanisms.

    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> cprov = getUtility(IPersonSet).getByName('cprov')
    >>> print cprov.archive.title
    PPA for Celso Providelo

Non-primary archives by default use primary Release, Security and Updates
pockets and all it's available components.

    >>> from canonical.launchpad.components.archivedependencies import (
    ...     default_component_dependency_name,  default_pocket_dependency)

    >>> print default_pocket_dependency
    Updates

    >>> print default_component_dependency_name
    multiverse

The default values get applied to their corresponding dependency maps
and then will expand to distinct values that will be used to produce
the building 'sources_list' contents.

    >>> for pocket in pocket_dependencies[default_pocket_dependency]:
    ...     print pocket
    Release
    Security
    Updates

    >>> for component_name in component_dependencies[
    ...     default_component_dependency_name]:
    ...     print component_name
    main
    restricted
    universe
    multiverse

We will create a testing source publication and probe its build
environment.

    >>> pub_source = test_publisher.getPubSource(
    ...     version='1.1', archive=cprov.archive)
    >>> [a_build] = pub_source.createMissingBuilds()

Now we can verify if get_sources_list_for_building() method returns the
expected content for building the just-created source.

    >>> from canonical.launchpad.components.archivedependencies import (
    ...     get_sources_list_for_building)

    >>> def print_building_sources_list(candidate):
    ...     sources_list = get_sources_list_for_building(candidate)
    ...     for line in sorted(sources_list):
    ...         print line

Note that only the default ubuntu dependencies for a public PPA will be
considered when building the source candidate. That's because there is
no binary published in Celso's PPA hoary/i386, so there is
no need to request the builder to load its archive indexes.

    >>> from canonical.launchpad.interfaces.publishing import (
    ...     PackagePublishingStatus)

    >>> cprov.archive.getAllPublishedBinaries(
    ...      distroarchseries=a_build.distroarchseries,
    ...      status=PackagePublishingStatus.PUBLISHED).count()
    0

    >>> print_building_sources_list(a_build)
    deb http://ftpmaster.internal/ubuntu hoary
    	main restricted universe multiverse
    deb http://ftpmaster.internal/ubuntu hoary-security
    	main restricted universe multiverse
    deb http://ftpmaster.internal/ubuntu hoary-updates
    	main restricted universe multiverse

Once we publish a test binary in Celso's PPA hoary/i386,
this archive becomes relevant for building, and thus listed in the
returned 'sources_list' content.

    >>> pub_binaries = test_publisher.getPubBinaries(
    ...     binaryname='dep-bin', archive=cprov.archive,
    ...     status=PackagePublishingStatus.PUBLISHED)

    >>> print_building_sources_list(a_build)
    deb http://ftpmaster.internal/ubuntu hoary
    	main restricted universe multiverse
    deb http://ftpmaster.internal/ubuntu hoary-security
    	main restricted universe multiverse
    deb http://ftpmaster.internal/ubuntu hoary-updates
    	main restricted universe multiverse
    deb http://ppa.launchpad.dev/cprov/ubuntu hoary main

Similarly, populated PPA dependencies are listed in the building
'sources_list'.

    >>> sabdfl = getUtility(IPersonSet).getByName('sabdfl')
    >>> pub_binaries = test_publisher.getPubBinaries(
    ...     binaryname='dep-bin', archive=sabdfl.archive,
    ...     status=PackagePublishingStatus.PUBLISHED)

    >>> archive_dependency = cprov.archive.addArchiveDependency(
    ...     sabdfl.archive, PackagePublishingPocket.RELEASE,
    ...     getUtility(IComponentSet)['main'])

    >>> print_building_sources_list(a_build)
    deb http://ftpmaster.internal/ubuntu hoary
    	main restricted universe multiverse
    deb http://ftpmaster.internal/ubuntu hoary-security
        main restricted universe multiverse
    deb http://ftpmaster.internal/ubuntu hoary-updates
    	main restricted universe multiverse
    deb http://ppa.launchpad.dev/cprov/ubuntu hoary main
    deb http://ppa.launchpad.dev/sabdfl/ubuntu hoary main

The authentication information gets added for private PPA
dependencies.

    >>> sabdfl.archive.buildd_secret = "not-so-secret"
    >>> sabdfl.archive.private = True

    >>> print_building_sources_list(a_build)
    deb http://buildd:not-so-secret@private-ppa.launchpad.dev/sabdfl/ubuntu
    	hoary main
    deb http://ftpmaster.internal/ubuntu hoary
    	main restricted universe multiverse
    deb http://ftpmaster.internal/ubuntu hoary-security
        main restricted universe multiverse
    deb http://ftpmaster.internal/ubuntu hoary-updates
    	main restricted universe multiverse
    deb http://ppa.launchpad.dev/cprov/ubuntu hoary main

Good enough, let's delete the archive dependency on Mark's PPA.

    >>> cprov.archive.removeArchiveDependency(sabdfl.archive)


== Overriding default primary archive dependencies ==

Despite being private or public, default primary archive dependencies
can be overridden by simply creating a `ArchiveDependency`record
targeted to the primary archive.

The 'pocket' and 'component' dependency attributes can be adjusted to
produce the desired build behaviour.

By default, public PPAs depend on all of the pocket dependencies of
UPDATES, and all of the primary archive's 'multiverse' component
dependencies.

    >>> print_building_sources_list(a_build)
    deb http://ftpmaster.internal/ubuntu hoary
        main restricted universe multiverse
    deb http://ftpmaster.internal/ubuntu hoary-security
        main restricted universe multiverse
    deb http://ftpmaster.internal/ubuntu hoary-updates
        main restricted universe multiverse
    deb http://ppa.launchpad.dev/cprov/ubuntu hoary main

The default build behaviour will remain unchanged when we override the
default primary archive dependencies with exactly the same values.

    >>> default_dependency = cprov.archive.addArchiveDependency(
    ...     ubuntu.main_archive, PackagePublishingPocket.UPDATES,
    ...     getUtility(IComponentSet)['multiverse'])

    >>> print_building_sources_list(a_build)
    deb http://ftpmaster.internal/ubuntu hoary
        main restricted universe multiverse
    deb http://ftpmaster.internal/ubuntu hoary-security
        main restricted universe multiverse
    deb http://ftpmaster.internal/ubuntu hoary-updates
        main restricted universe multiverse
    deb http://ppa.launchpad.dev/cprov/ubuntu hoary main

    >>> cprov.archive.removeArchiveDependency(ubuntu.main_archive)

The dependency can be modified to behave as an embargoed archive that
builds security updates. This is done by setting the SECURITY pocket
dependencies (RELEASE and SECURITY) and following the component
dependencies of the component where the source was last published in
the primary archive.

    >>> security_dependency = cprov.archive.addArchiveDependency(
    ...     ubuntu.main_archive, PackagePublishingPocket.SECURITY)

    >>> from canonical.launchpad.components.archivedependencies import (
    ...     get_primary_current_component)

    >>> print get_primary_current_component(a_build)
    universe

    >>> print_building_sources_list(a_build)
    deb http://ftpmaster.internal/ubuntu hoary
        main universe
    deb http://ftpmaster.internal/ubuntu hoary-security
        main universe
    deb http://ppa.launchpad.dev/cprov/ubuntu hoary main

    >>> cprov.archive.removeArchiveDependency(ubuntu.main_archive)

It's also possible to modify the PPA to act as a super-free and
pristine build environment based only on what was included in the
original ubuntu release.

    >>> release_dependency = cprov.archive.addArchiveDependency(
    ...     ubuntu.main_archive, PackagePublishingPocket.RELEASE,
    ...     getUtility(IComponentSet)['restricted'])

    >>> print_building_sources_list(a_build)
    deb http://ftpmaster.internal/ubuntu hoary main restricted
    deb http://ppa.launchpad.dev/cprov/ubuntu hoary main

    >>> cprov.archive.removeArchiveDependency(ubuntu.main_archive)

The PPA can also be configured to extend the ubuntu PROPOSED build
environment.

    >>> proposed_dependency = cprov.archive.addArchiveDependency(
    ...     ubuntu.main_archive, PackagePublishingPocket.PROPOSED,
    ...     getUtility(IComponentSet)['multiverse'])

    >>> print_building_sources_list(a_build)
    deb http://ftpmaster.internal/ubuntu hoary
        main restricted universe multiverse
    deb http://ftpmaster.internal/ubuntu hoary-proposed
        main restricted universe multiverse
    deb http://ftpmaster.internal/ubuntu hoary-security
        main restricted universe multiverse
    deb http://ftpmaster.internal/ubuntu hoary-updates
        main restricted universe multiverse
    deb http://ppa.launchpad.dev/cprov/ubuntu hoary main

    >>> cprov.archive.removeArchiveDependency(ubuntu.main_archive)

Similarly an extension of the BACKPORTS environment can be set.

    >>> backports_dependency = cprov.archive.addArchiveDependency(
    ...     ubuntu.main_archive, PackagePublishingPocket.BACKPORTS,
    ...     getUtility(IComponentSet)['multiverse'])

    >>> print_building_sources_list(a_build)
    deb http://ftpmaster.internal/ubuntu hoary
        main restricted universe multiverse
    deb http://ftpmaster.internal/ubuntu hoary-backports
        main restricted universe multiverse
    deb http://ftpmaster.internal/ubuntu hoary-security
        main restricted universe multiverse
    deb http://ftpmaster.internal/ubuntu hoary-updates
        main restricted universe multiverse
    deb http://ppa.launchpad.dev/cprov/ubuntu hoary main

    >>> cprov.archive.removeArchiveDependency(ubuntu.main_archive)
