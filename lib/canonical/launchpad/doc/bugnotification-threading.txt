Bug Notification Threading
==========================

In order to make the notifications more usable, all notifications
related to a specific bug have their headers set so that they will be
grouped together by an email client that handles threading correctly.
Comments added by the web UI won't be correctly threaded, though, since
you can't know to which comment the new comment was a reply to.

Let's add add change notification and see how it works:

    >>> from canonical.launchpad.database import MessageSet
    >>> from canonical.database.sqlbase import flush_database_updates

    >>> login('test@canonical.com')

    >>> import pytz
    >>> from datetime import datetime, timedelta
    >>> from canonical.launchpad.interfaces import IBugSet, IMessageSet
    >>> ten_minutes_ago = (
    ...     datetime.now(pytz.timezone('UTC')) - timedelta(minutes=10))
    >>> sample_person = getUtility(ILaunchBag).user
    >>> bug_one = getUtility(IBugSet).get(1)
    >>> bug_one.addChangeNotification(
    ...     '** Some change.', sample_person, when=ten_minutes_ago)

    >>> from canonical.launchpad.interfaces import IBugNotificationSet
    >>> from canonical.launchpad.scripts.bugnotification import (
    ...     get_email_notifications)
    >>> notifications = getUtility(IBugNotificationSet).getNotificationsToSend()

    >>> messages = [emails for dummy, emails in
    ...     get_email_notifications(notifications)]
    >>> len(messages)
    1

There are four recipients for this message, so we get:

    >>> emails = messages[0]
    >>> len(emails)
    4

The three emails have identical headers for our purposes, so:

    >>> notification = emails[0]

The email has the message id of the change notification, and it
references the bug's initial message, so that it will be threaded in
an email client.

    >>> notification['Message-Id'] == notifications[0].message.rfc822msgid
    True
    >>> notification['References'] == bug_one.initial_message.rfc822msgid
    True

If we add a comment, the notification will have the comment's message
id:

    >>> comment = getUtility(IMessageSet).fromText(
    ...     'subject', 'comment', sample_person, datecreated=ten_minutes_ago)
    >>> bug_one.addCommentNotification(comment)
    >>> bug_one.linkMessage(comment)
    <...>
    >>> bug_one.addChangeNotification(
    ...     '** Some other change.', sample_person, when=ten_minutes_ago)
    >>> notifications = getUtility(IBugNotificationSet).getNotificationsToSend()
    >>> messages = [emails for dummy, emails in
    ...     get_email_notifications(notifications)]
    >>> len(messages)
    1
    >>> emails = messages[0]
    >>> len(emails)
    4
    >>> notification = emails[0]

    >>> notification['Message-Id'] == comment.rfc822msgid
    True
    >>> notification['References'] == bug_one.initial_message.rfc822msgid
    True

Refresh the dates, and create a new reply to ensure that the references
are chained together properly:

    >>> for notification in notifications:
    ...     notification.date_emailed = datetime.now(pytz.timezone('UTC'))
    >>> flush_database_updates()

    >>> reply = MessageSet().fromText(
    ...     'Re: subject', 'reply', sample_person, datecreated=ten_minutes_ago)
    >>> reply.parent = comment
    >>> bug_one.addCommentNotification(reply)
    >>> bug_one.linkMessage(reply)
    <...>

Grab the notifications:

    >>> notifications = getUtility(IBugNotificationSet).getNotificationsToSend()
    >>> messages = [emails for dummy, emails in
    ...     get_email_notifications(notifications)]
    >>> len(messages)
    1
    >>> emails = messages[0]
    >>> len(emails)
    4
    >>> notification = emails[0]
    >>> notification['Message-Id'] == reply.rfc822msgid
    True
    >>> references = notification['References'].split()
    >>> bug_one.initial_message.rfc822msgid in references
    True
    >>> comment.rfc822msgid in references
    True

