= Hierarchical menus =

The location bar aids users in navigating the depths of Launchpad.  It
is built from a list of Breadcrumb objects collected during Zope's
object-traversal step.

== A simple object hierarchy ==

First, we need a hierarchy of objects to build upon:

    >>> from zope.component import (getMultiAdapter, provideAdapter,
    ...     queryAdapter)
    >>> from zope.interface import Interface, implements

    >>> class ICookbook(Interface):
    ...     """A cookbook for holding recipes."""

    >>> class IRecipe(Interface):
    ...     """A recipe in a cookbook."""

    >>> class ICooker(Interface):
    ...     """A cooker."""

    >>> from canonical.launchpad.webapp.url import urlappend
    >>> from canonical.launchpad.webapp.interfaces import ICanonicalUrlData

    >>> class BaseContent:
    ...     implements(ICanonicalUrlData)
    ...
    ...     def __init__(self, name, parent, path_prefix=None):
    ...         self.name = name
    ...         if path_prefix is not None:
    ...             self.path = urlappend(path_prefix, name)
    ...         else:
    ...             self.path = name
    ...         self.inside = parent
    ...         self.rootsite = None

    >>> class Root(BaseContent):
    ...     """ The site root."""

    >>> class Cookbook(BaseContent):
    ...     implements(ICookbook)

    >>> class Recipe(BaseContent):
    ...     implements(IRecipe)

    >>> class Cooker(BaseContent):
    ...     implements(ICooker)

Today we'll be cooking with Spam!

    >>> root = Root('', None)
    >>> cooker = Cooker('jamie', root, '+cooker')
    >>> cookbook = Cookbook('joy-of-cooking', root)
    >>> recipe = Recipe('spam', cookbook)


== Discovering breadcrumbs ==

The Hierarchy class builds the breadcrumbs by looking at each object in
the request.traversed_objects attribute.  If a traversed object can be
adapted to IBreadcrumb, then it is added to the breadcrumbs list.

We'll add the objects to the request's list of traversed objects so
the hierarchy will discover them.

    >>> from canonical.lazr.testing.menus import make_fake_request
    >>> request = make_fake_request(
    ...     'http://launchpad.dev/joy-of-cooking/spam',
    ...     [root, cookbook, recipe])

The hierarchy's list of breadcrumbs is empty since none of the objects
have an IBreadcrumb adapter.

    >>> hierarchy = getMultiAdapter((recipe, request), name='+hierarchy')
    >>> hierarchy.items()
    []

The ICookbook and IRecipe breadcrumb objects show up in the hierarchy after
IBreadcrumb adapters are registered for them.  The hierarchy builds a list of
breadcrumbs starting with the breadcrumb closest to the hierarchy root.

    >>> from canonical.launchpad.webapp.breadcrumb import Breadcrumb

    # Note that the Hierarchy assigns the breadcrumb's URL, but we need to
    # give it a valid .text attribute.
    >>> class TextualBreadcrumb(Breadcrumb):
    ...     @property
    ...     def text(self):
    ...         return self.context.name.capitalize().replace('-', ' ')

    >>> from canonical.launchpad.webapp.interfaces import IBreadcrumb

    >>> provideAdapter(TextualBreadcrumb, [ICookbook], IBreadcrumb)
    >>> provideAdapter(TextualBreadcrumb, [IRecipe], IBreadcrumb)

    >>> hierarchy.items()
    [<TextualBreadcrumb
        url='http://launchpad.dev/joy-of-cooking'
        text='Joy of cooking'>,
     <TextualBreadcrumb
        url='http://launchpad.dev/joy-of-cooking/spam'
        text='Spam'>]

The ICooker object contains a path prefix, a segment of the path that
does not correspond to any object, it's only used to split traversal
domains. The `Hierarchy` model copes fine with objects like that.

    >>> cooker_request = make_fake_request(
    ...     'http://launchpad.dev/+cooker/jamie',
    ...     [root, cooker])

    >>> provideAdapter(TextualBreadcrumb, [ICooker], IBreadcrumb)

    >>> cooker_hierarchy = getMultiAdapter(
    ...     (cooker, cooker_request), name='+hierarchy')
    >>> cooker_hierarchy.items()
    [<TextualBreadcrumb url='http://launchpad.dev/+cooker/jamie' text='Jamie'>]


== Building IBreadcrumb objects ==

The construction of breadcrumb objects is handled by an IBreadcrumb adapter,
which adapts a context object and produces an IBreadcrumb object for that
context.  The default adapter provides the url attribute, but the breadcrumb's
text must be overriden in subclasses.

    >>> from canonical.launchpad.webapp.interfaces import IBreadcrumb
    >>> from zope.interface.verify import verifyObject
    >>> breadcrumb = Breadcrumb(cookbook)
    >>> verifyObject(IBreadcrumb, breadcrumb)
    True
    >>> print breadcrumb.text
    None
    >>> breadcrumb
    <Breadcrumb
        url='http://launchpad.dev/joy-of-cooking'
        text='None'>

As said above, the breadcrumb's attributes can be overridden with subclassing
and Python properties.

    >>> from canonical.launchpad.webapp.publisher import canonical_url
    >>> class DynamicBreadcrumb(Breadcrumb):
    ...     @property
    ...     def text(self):
    ...         return self.context.name.capitalize().replace('-', ' ')

    >>> breadcrumb = DynamicBreadcrumb(cookbook)
    >>> breadcrumb
    <DynamicBreadcrumb
        url='http://launchpad.dev/joy-of-cooking'
        text='Joy of cooking'>

Breadcrumbs may have icons.  The icon is only set for a breadcrumb if
the builder's context has an IPathAdapter registration.

    >>> from zope.traversing.interfaces import IPathAdapter
    >>> from canonical.launchpad.webapp.tales import (
    ...     ObjectImageDisplayAPI)

    # We need a custom image display adapter that overrides the
    # the icon() method and returns an <img> tag.
    >>> class RecipeImageDisplayAPI(ObjectImageDisplayAPI):
    ...     def icon(self):
    ...         return '<img src="/@@/recipe"/>'

    >>> provideAdapter(
    ...     RecipeImageDisplayAPI, [IRecipe], IPathAdapter, 'image')

    >>> breadcrumb = DynamicBreadcrumb(recipe)
    >>> breadcrumb
    <DynamicBreadcrumb
        url='http://launchpad.dev/joy-of-cooking/spam'
        text='Spam'
        icon='<img src="/@@/recipe"/>'>

The icon is not set if the default image adapter can not find an
icon for the object.

    # We'll use the default image adapter, which doesn't know about
    # ICookbook objects.
    >>> provideAdapter(
    ...     ObjectImageDisplayAPI, [ICookbook], IPathAdapter, 'image')

    >>> print queryAdapter(cookbook, IPathAdapter, name='image').icon()
    None

    >>> breadcrumb = DynamicBreadcrumb(cookbook)
    >>> breadcrumb
    <DynamicBreadcrumb
        url='http://launchpad.dev/joy-of-cooking'
        text='Joy of cooking'>


== Customizing the hierarchy ==

We can customize the hierarchy itself by changing the list of objects
and URLs that it uses to construct the breadcrumbs list.

The Hierarchy object should *not* construct the Breadcrumb objects
itself.  It should let the IBreadcrumbBuilder handle it: this ensures
consistency across the site.

    >>> from canonical.launchpad.browser.launchpad import Hierarchy
    >>> class CustomHierarchy(Hierarchy):
    ...     @property
    ...     def objects(self):
    ...         return [recipe]

    >>> spammy_hierarchy = CustomHierarchy(root, request)
    >>> spammy_hierarchy.items()
    [<TextualBreadcrumb
        url='http://launchpad.dev/joy-of-cooking/spam'
        text='Spam'
        icon='<img src="/@@/recipe"/>'>]


== Rendering the list ==

The Hierarchy object is responsible for rendering the HTML for the
location bar.

    >>> from BeautifulSoup import BeautifulSoup
    >>> from canonical.launchpad.testing.pages import extract_text

    # Borrowed from launchpad.testing.pages.print_location()
    >>> def print_hierarchy(html):
    ...     soup = BeautifulSoup(html)
    ...     hierarchy = soup.find(attrs={'id': 'lp-hierarchy'}).findAll(
    ...         recursive=False)
    ...     segments = [extract_text(step).encode('us-ascii', 'replace')
    ...                 for step in hierarchy
    ...                 if step.name != 'small']
    ...     print 'Location:', ' > '.join(segments[2:])

    >>> print_hierarchy(hierarchy.render())
    Location: Joy of cooking > Spam

The Launchpad Homepage displays no items in its location bar.  We are
considered to be on the home page if there are no breadcrumbs.

    # Simulate a visit to the site root
    >>> request = make_fake_request('http://launchpad.dev/', [root])
    >>> homepage_hierarchy = getMultiAdapter(
    ...     (root, request), name='+hierarchy')

    >>> homepage_hierarchy.items()
    []

    >>> print_hierarchy(homepage_hierarchy.render())
    Location:

Breadcrumbs in the hierarchy that have icons are rendered with an <img>
tag.  Breadcrumbs without icons are not.

    >>> breadcrumb_no_icon, breadcrumb_with_icon = hierarchy.items()

    >>> breadcrumb_no_icon
    <TextualBreadcrumb
        url='http://launchpad.dev/joy-of-cooking'
        text='Joy of cooking'>

    >>> 'img' in hierarchy.getHtmlForBreadcrumb(breadcrumb_no_icon)
    False

    >>> breadcrumb_with_icon
    <TextualBreadcrumb
        url='http://launchpad.dev/joy-of-cooking/spam'
        text='Spam'
        icon='<img src="/@@/recipe"/>'>

    >>> print hierarchy.getHtmlForBreadcrumb(breadcrumb_with_icon)
    <span ...><a ...><img src="/@@/recipe"/> Spam</a></span>
