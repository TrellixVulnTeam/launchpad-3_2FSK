= Personal Package Archive pages and work-flow =


== Activating Personal Package Archives for Users ==

Personal Package Archives have to be activated before they can be
accessed, in this section we will cover the activation procedure for
an user-PPA by its own user.

A person's Personal Package Archive is accessible from the navigation
menu.

   >>> anon_browser.open("http://launchpad.dev/~cprov")

   >>> print_tag_with_id(anon_browser.contents, 'ppas')
   Personal package archives
   PPA for Celso Providelo

Since Celso's PPA is already activated in sampledata, there is a link
in the body page that takes him to his archive.

    >>> cprov_browser = setupBrowser(
    ...     auth="Basic celso.providelo@canonical.com:cprov")
    >>> cprov_browser.open("http://launchpad.dev/~cprov")

    >>> cprov_browser.getLink("PPA for Celso Providelo").click()

    >>> print cprov_browser.title
    PPA for Celso Providelo

On the other hand Sample Person hasn't activated his PPA yet, so he
can quickly activate one via the link in his PPA section.

    >>> sample_browser = setupBrowser(auth="Basic test@canonical.com:test")
    >>> sample_browser.open("http://launchpad.dev/~name12")

    >>> print_tag_with_id(sample_browser.contents, 'ppas')
    Personal package archives
    Create a new PPA

    >>> sample_browser.getLink("Create a new PPA").click()

    >>> print sample_browser.title
    Activate Personal Package Archive

This page presents the current PPA-ToS (terms of service) with a
mandatory checkbox ('accepted') indicating that the user has read and
accepted the conditions and an optional 'description' text-area.

By submitting the form without checking the checkbox results in a
error with a proper message:

    >>> sample_browser.getControl("Activate").click()
    >>> sample_browser.url
    'http://launchpad.dev/%7Ename12/+activate-ppa'

    >>> for error in get_feedback_messages(sample_browser.contents):
    ...     print error
    There is 1 error.
    PPA Terms of Service must be accepted to activate a PPA.

In order to 'activate' a PPA the user must acknowledge the PPA-ToS.

    >>> sample_browser.getControl(name="field.accepted").value = True
    >>> sample_browser.getControl(name="field.description").value = (
    ...    'Hoohay for PPA.')
    >>> sample_browser.getControl("Activate").click()

A successful activation redirects to the PPA page

    >>> print sample_browser.title
    PPA for Sample Person

Where Sample person user can see the description previously entered.

    >>> print extract_text(
    ...     find_tag_by_id(sample_browser.contents, 'description'))
    Description
    Hoohay for PPA.

He also sees the empty 'whiteboard' section that when filled, includes
administrator messages about operations done in this Personal Package
Archive.

    >>> find_tag_by_id(sample_browser.contents, 'whiteboard') is None
    True

Note that the 'whiteboard' section is presented as an informational
box. Only users with 'launchpad.Edit' permission on the PPA in
question will be able to see it, see below.

The PPA owner is able to edit PPA 'description' and 'whiteboard':

    >>> sample_browser.getLink("Change details").click()

    >>> sample_browser.getControl(name="field.description").value = (
    ...    'Howdy, cowboys !')
    >>> sample_browser.getControl(name="field.whiteboard").value = (
    ...    'Not here, John Wayne !')

    >>> sample_browser.getControl("Save").click()

After confirming the changes Sample Person is sent to the PPA page
where he can see the updated information.

    >>> print sample_browser.title
    PPA for Sample Person

    >>> print extract_text(
    ...     find_tag_by_id(sample_browser.contents, 'description'))
    Description
    Howdy, cowboys !

    >>> print extract_text(
    ...     find_tag_by_id(sample_browser.contents, 'whiteboard'))
    PPA whiteboard:
    Not here, John Wayne !

When 'description' or 'whiteboard' are empty they are omitted in the page.

    >>> sample_browser.getLink("Change details").click()
    >>> sample_browser.getControl(name="field.description").value = ('')
    >>> sample_browser.getControl(name="field.whiteboard").value = ('')
    >>> sample_browser.getControl("Save").click()

    >>> print sample_browser.title
    PPA for Sample Person

    >>> print find_tag_by_id(sample_browser.contents, 'description')
    None

    >>> print find_tag_by_id(sample_browser.contents, 'whiteboard')
    None


== Activating Personal Package Archives for Teams ==

Similarly to the user PPAs activation, team PPAs can be activated by
anyone with 'launchpad.Edit' permission in the team in question:

    >>> cprov_browser.open("http://launchpad.dev/~landscape-developers")

    >>> print_tag_with_id(cprov_browser.contents, 'ppas')
    Personal package archives

Even if we try the URL directly:

    >>> cprov_browser.open(
    ...    "http://launchpad.dev/~landscape-developers/+activate-ppa")
    Traceback (most recent call last):
    ...
    Unauthorized: (..., 'launchpad.Edit')

Let's proceed with the required permissions:

    >>> sample_browser.open("http://launchpad.dev/~landscape-developers")

    >>> print_tag_with_id(sample_browser.contents, 'ppas')
    Personal package archives
    Create a new PPA

    >>> sample_browser.getLink('Create a new PPA').click()

    >>> print sample_browser.title
    Activate Personal Package Archive

    >>> sample_browser.getControl(name="field.accepted").value = True
    >>> sample_browser.getControl(name="field.description").value = (
    ...    'Hoohay for Team PPA.')
    >>> sample_browser.getControl("Activate").click()

    >>> print sample_browser.title
    PPA for Landscape Developers

    >>> print extract_text(
    ...     find_tag_by_id(sample_browser.contents, 'description'))
    Description
    Hoohay for Team PPA.

Any team administrator can 'edit' description & whiteboard contents,
exactly the same as for a user-PPA, see above:

    >>> sample_browser.getLink("Change details").click()

    >>> print sample_browser.title
    Edit PPA for Landscape Developers

    >>> sample_browser.getControl(name="field.description").value = (
    ...    'Yay, I can change it.')
    >>> sample_browser.getControl("Save").click()

    >>> print sample_browser.title
    PPA for Landscape Developers

    >>> print extract_text(
    ...     find_tag_by_id(sample_browser.contents, 'description'))
    Description
    Yay, I can change it.

Cancelling the 'Edit' form will redirect the user to the PPA overview
page and discard the changes.

    >>> sample_browser.getLink("Change details").click()
    >>> sample_browser.getControl(name="field.description").value = (
    ...    'Discarded ...')
    >>> sample_browser.getControl("Cancel").click()

    >>> print sample_browser.title
    PPA for Landscape Developers

    >>> print extract_text(
    ...     find_tag_by_id(sample_browser.contents, 'description'))
    Description
    Yay, I can change it.


== Activating someone else's Personal Package Archives  ==

We also allow LP-admins to create Personal Package Archives in the
name of other users or teams:

    >>> admin_browser.open("http://launchpad.dev/~jblack")
    >>> print_tag_with_id(admin_browser.contents, 'ppas')
    Personal package archives
    Create a new PPA

    >>> admin_browser.getLink("Create a new PPA").click()
    >>> admin_browser.getControl(name="field.accepted").value = True
    >>> admin_browser.getControl(name="field.description").value = (
    ...    'Go for it, you lazy !')
    >>> admin_browser.getControl("Activate").click()

    >>> print admin_browser.title
    PPA for James Blackwell

    >>> print extract_text(
    ...     find_tag_by_id(admin_browser.contents, 'description'))
    Description
    Go for it, you lazy !

    >>> find_tag_by_id(admin_browser.contents, 'whiteboard') is None
    True

LP-admins can also 'edit' PPAs of other people:

    >>> admin_browser.getLink("Change details") is not None
    True

But more importantly, only LP administrators can 'administer' Personal
Package Archives.

    >>> sample_browser.open("http://launchpad.dev/~jblack/+archive")
    >>> print sample_browser.getLink("Administer archive")
    Traceback (most recent call last):
    ...
    LinkNotFoundError

    >>> admin_browser.getLink("Administer archive").click()
    >>> print admin_browser.title
    Administer PPA for James Blackwell

Trying to shortcut the URL as a non-privileged user does not work:

    >>> sample_browser.open(
    ...     "http://launchpad.dev/~jblack/+archive/ppa/+admin")
    Traceback (most recent call last):
    ...
    Unauthorized...

The administration procedure allows administrators to:

 * Enable/Disable: disabled PPA that won't accept uploads (not
   implemented yet)
 * Make the PPA private or public.
 * For private PPAs, set the buildd secret.
 * Set whether the archive should be built on a virtualized machine.
 * Set a maximum disk size: uploads will be rejected if the resulting
   PPA size is exceeding the authorized size. (not implemented yet)
 * Edit the whiteboard: to communicate & record administration
 decisions.

In this case, the administrator may wish to amend the PPA so that it is
set up like the ubuntu security PPA, which is private but does not
build on a virtualized builder.

    >>> admin_browser.getControl(name="field.enabled").value
    True
    >>> admin_browser.getControl(name="field.private").value
    False
    >>> admin_browser.getControl(name="field.require_virtualized").value
    True

    >>> admin_browser.getControl(name="field.enabled").value = False
    >>> admin_browser.getControl(name="field.private").value = True
    >>> admin_browser.getControl(name="field.buildd_secret").value = "secret"
    >>> admin_browser.getControl(
    ...     name="field.require_virtualized").value = False
    >>> admin_browser.getControl(name="field.authorized_size").value = '1'
    >>> admin_browser.getControl(name="field.whiteboard").value = (
    ...    'Here lives a lazy community.')
    >>> admin_browser.getControl("Save").click()

Once confirmed the administrator is sent to the PPA page where he can
see updated information.

    >>> print admin_browser.title
    PPA for James Blackwell

    >>> print extract_text(
    ...     find_tag_by_id(admin_browser.contents, 'whiteboard'))
    PPA whiteboard:
    Here lives a lazy community.

    >>> for msg in get_feedback_messages(admin_browser.contents):
    ...     print msg
    This archive has been disabled.

    >>> print_tag_with_id(admin_browser.contents, 'privacy')
    This archive is private

When the archive is private, the buildd secret must also be set, or an
error is issued:

    >>> admin_browser.getLink("Administer archive").click()
    >>> admin_browser.getControl(name="field.private").value = True
    >>> admin_browser.getControl(name="field.buildd_secret").value = ""
    >>> admin_browser.getControl("Save").click()

    >>> for error in get_feedback_messages(admin_browser.contents):
    ...     print error
    There is 1 error.
    Required for private archives.

Conversely, setting the buildd secret for non-private archives also
generates an error:

    >>> admin_browser.getControl(name="field.private").value = False
    >>> admin_browser.getControl(name="field.buildd_secret").value = "secret"
    >>> admin_browser.getControl("Save").click()

    >>> for error in get_feedback_messages(admin_browser.contents):
    ...     print error
    There is 1 error.
    Do not specify for non-private archives

There is a maximum size allowed for authorized_size is set in
`IArchive`, it is currently 20 * 1024 and the unit used in code is
MiB. Submitting the form with an authorized_size that is too large
will result in an error:

    >>> limit = 20 * 1024
    >>> admin_browser.open("http://launchpad.dev/~jblack/+archive/ppa/+admin")
    >>> admin_browser.getControl(
    ...     name="field.authorized_size").value = str(limit + 1)
    >>> admin_browser.getControl("Save").click()

    >>> for error in get_feedback_messages(admin_browser.contents):
    ...     print error
    There is 1 error.
    Value is too big

The whiteboard section can be viewed by the PPA owner:

    >>> jblack_browser = setupBrowser(
    ...     auth="Basic james.blackwell@ubuntulinux.com:jblack")
    >>> jblack_browser.open("http://launchpad.dev/~jblack/+archive/ppa")

    >>> print extract_text(
    ...     find_tag_by_id(jblack_browser.contents, 'whiteboard'))
    PPA whiteboard:
    Here lives a lazy community.

Cancelled changes in the administration form redirects the user to the
PPA overview page and discards the changes.

    >>> admin_browser.getControl("Cancel").click()

    >>> print admin_browser.title
    PPA for James Blackwell

    >>> admin_browser.getLink("Administer archive").click()
    >>> admin_browser.getControl(name="field.whiteboard").value = (
    ...    'It should be discarded.')
    >>> admin_browser.getControl("Cancel").click()

    >>> print admin_browser.title
    PPA for James Blackwell

    >>> print extract_text(
    ...     find_tag_by_id(admin_browser.contents, 'whiteboard'))
    PPA whiteboard:
    Here lives a lazy community.


== Double submission ==

If two browser windows are open at the same time on the activation page
then when the second activation is clicked after already
activating on the first, then it will just go to the archive page.

Set up two browsers (waiting for bug #68655):

    >>> browser1 = setupBrowser(auth="Basic foo.bar@canonical.com:test")
    >>> browser1.open("http://launchpad.dev/~name16/+activate-ppa")

    >>> browser2 = setupBrowser(auth="Basic foo.bar@canonical.com:test")
    >>> browser2.open("http://launchpad.dev/~name16/+activate-ppa")

Prepare the forms in both browsers to activate the default PPA for the
user 'Foo Bar'.

    >>> browser1.getControl(name="field.accepted").value = True
    >>> browser1.getControl(name="field.description").value = (
    ...    'PPA rocks!')

    >>> browser2.getControl(name="field.accepted").value = True
    >>> browser2.getControl(name="field.description").value = (
    ...    'PPA does not explode!')

Activate the PPA in the first browser:

    >>> browser1.getControl("Activate").click()

    >>> print browser1.title
    PPA for Foo Bar

    >>> print extract_text(
    ...     find_tag_by_id(browser1.contents, 'description'))
    Description
    PPA rocks!

Activating the default PPA in the second browser results in an error
and the rendered form contains the 'name' field.

    >>> browser2.getControl("Activate").click()

    >>> for error in get_feedback_messages(browser2.contents):
    ...     print error
    There is 1 error.
    The default PPA is already activated.
    Please specify a name for the new PPA and resubmit the form.

    >>> browser2.getControl(name="field.name").value
    ''


== Activating a named PPA ==

Users who already have a PPA may as well activate a second one.

That's the case for Celso.

    >>> cprov_browser.open("http://launchpad.dev/~cprov")

    >>> print_tag_with_id(cprov_browser.contents, 'ppas')
    Personal package archives
    PPA for Celso Providelo
    Create a new PPA

Celso can simply click on 'Create a new PPA' and will be presented to
the usual PPA activation form where the checkbox for acknowledge the
PPA-ToS is replaced by a 'name' field and a list of 'Existing PPAs'.
Launchpad requires an user to acknowledge the PPA-ToS only once for
all his PPAs.

    >>> cprov_browser.getLink("Create a new PPA").click()

    >>> print cprov_browser.title
    Activate Personal Package Archive

    >>> print_tag_with_id(cprov_browser.contents, 'ppas')
    Existing PPAs
    PPA for Celso Providelo

    >>> cprov_browser.getControl(name="field.accepted")
    Traceback (most recent call last):
    ...
    LookupError: name 'field.accepted'

    >>> print extract_text(
    ...     first_tag_by_class(cprov_browser.contents, 'form'))
    PPA name:
      A unique name used to identify this PPA.
    PPA contents description: (Optional)
      A short description of this PPA. URLs are allowed and will be
      rendered as links.

If Celso does not fill 'PPA name' an error is raised.

    >>> cprov_browser.getControl("Activate").click()

    >>> for error in get_feedback_messages(cprov_browser.contents):
    ...     print error
    There is 1 error.
    Required input is missing.

If Celso, by mistake, uses the same name of one of his existing PPAs
(the default one is named 'ppa') an error is raised.

    >>> cprov_browser.getControl(name="field.name").value = 'ppa'
    >>> cprov_browser.getControl("Activate").click()

    >>> for error in get_feedback_messages(cprov_browser.contents):
    ...     print error
    There is 1 error.
    You already have a PPA named 'ppa'.

If the PPA is named as the distribution it is targeted for it cannot
be created, mainly because of the way we publish repositories
including the distribution name automatically.

    >>> cprov_browser.getControl(name="field.name").value = 'ubuntu'
    >>> cprov_browser.getControl("Activate").click()

    >>> for error in get_feedback_messages(cprov_browser.contents):
    ...     print error
    There is 1 error.
    Archives cannot have the same name as its distribution.

Providing a new name, 'edge', Celso can create a new PPA and it
immediately sent to it.

    >>> cprov_browser.getControl(name="field.name").value = 'edge'
    >>> cprov_browser.getControl("Activate").click()

    >>> print cprov_browser.title
    PPA named edge for Celso Providelo

Back to his profile page Celso and anyone can his multiple PPAs.

    >>> cprov_browser.getLink("Celso Providelo").click()

    >>> print_tag_with_id(cprov_browser.contents, 'ppas')
    Personal package archives
    PPA named edge for Celso Providelo
    PPA for Celso Providelo
    Create a new PPA
