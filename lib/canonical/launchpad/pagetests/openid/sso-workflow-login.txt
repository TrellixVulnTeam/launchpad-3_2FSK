= Launchpad Single-Signon Workflow: Login =

A user with an existing account may log into a Launchpad-SSO web site
simply by entering their password on the login site.

First we will set up the helper view that lets us test the final
portion of the authentication process:

    >>> from canonical.launchpad.ftests.openid import (
    ...     install_consumer, uninstall_consumer)
    >>> install_consumer()

The authentication process is started by the relying party issuing a
checkid_setup request, sending the user to Launchpad:

    >>> from urllib import urlencode
    >>> args = urlencode({
    ...     'openid.mode': 'checkid_setup',
    ...     'openid.identity':
    ...         'http://specs.openid.net/auth/2.0/identifier_select',
    ...     'openid.return_to': 'http://launchpad.dev/+openid-consumer',
    ...     'openid.trust_root': 'http://launchpad.dev/+openid-consumer',
    ...     })
    >>> setup_url = 'http://openid.launchpad.dev/+openid?%s' % args
    >>> browser.open(setup_url)

At this point, the user is presented with a login form:

    >>> print browser.title
    Launchpad Login Service

As the user already has an account, they can enter their email address
and password.  The user must enter a valid email address, or they will
receive an error:

    >>> browser.getControl('email address?').value = 'not an email address'
    >>> browser.getControl(name='field.password').value = 'test'
    >>> browser.getControl('Continue').click()

    >>> print browser.title
    Launchpad Login Service
    >>> for tag in find_tags_by_class(browser.contents, 'error'):
    ...     print extract_text(tag)
    Please enter a valid email address.

If the user provides a non-ASCII password, they receive an incorrect
passphrase error.

    >>> browser.getControl('email address?').value = 'mark@hbd.com'
    >>> browser.getControl(name='field.password').value = '\xc2\xa0blah'
    >>> browser.getControl('Continue').click()
    >>> print browser.title
    Launchpad Login Service
    >>> for tag in find_tags_by_class(browser.contents, 'error'):
    ...     print extract_text(tag)
    Incorrect passphrase for the provided email address.

If the password does not match the given email address, an error is
shown:

    >>> browser.getControl('email address?').value = 'mark@hbd.com'
    >>> browser.getControl(name='field.password').value = 'not the password'
    >>> browser.getControl('Continue').click()
    >>> print browser.title
    Launchpad Login Service
    >>> for tag in find_tags_by_class(browser.contents, 'error'):
    ...     print extract_text(tag)
    Incorrect passphrase for the provided email address.

Finally, if the email address and password match, the user is logged
in and returned to the relying party, with the user's identity URL:

    >>> browser.getControl(name='field.password').value = 'test'
    >>> browser.getControl('Continue').click()
    >>> print browser.url
    http://launchpad.dev/+openid-consumer?...
    >>> print browser.contents
    Consumer received GET
    ...
    openid.identity:http://openid.launchpad.dev/+id/sabdfl_oid
    openid.mode:id_res
    openid.return_to:http://launchpad.dev/+openid-consumer
    ...

== Cleanup ==

    >>> uninstall_consumer()

