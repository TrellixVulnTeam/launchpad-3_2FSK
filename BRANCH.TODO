# Put your TODOs for this branch here, then make sure it is empty before
# landing. There is a test to ensure it is empty in trunk. If there is
# stuff still here when you are ready to land, the items should probably
# be converted to bugs so they can be scheduled.

== Implementation ==

The plan is to have a text entry on a pillar's +edit page where LP admins can
enter a space-separated list of aliases to that pillar. The IField responsible
for that text entry will then add/remove the aliases to the pillar as needed.

Adding an alias to a pillar means inserting it into the PillarName table,
pointing to the pillar through the alias_for column. And removing one from
the field means deleting a row.

A rough implementation plan:

1. API for adding/retrieving aliases to/from a given pillar
    - IPillar.aliases
    - A single method (IPillar.setAliases()), taking a list of names as
      argument and ensuring those are the only aliases for the pillar. 
    - The PillarName page suggests two methods: addAlias() and removeAlias(),
      but I fail to see why that'd be better than the single method approach,
      as it'd make the field's life easier -- the field would just pass the
      list of aliases to the pillar, after validating them.

2. Text IField which accepts a list of aliases (separated by space) and
   ensures they match the aliases of the pillar in context, either creating
   new ones or removing existing or both.
    - Curtis used TokensTextWidget to manage faq keywords, so that's a good
      candidate for the base class.

3. Use the field on pillar's +edit pages.


== Testing ==

* A story showing a Launchpad Admin can see and use the field
  * Is this about Launchpad Admin? Should any of the Launchpad Registry 
    members be able to do this
  * Is this a CHR task?
* A story showing that the project owner (thus anyone else) cannot see 
  the field
* A doctest for the widget/custom field?
  * illustrate valid and invalid names
  * Does this raise an error if the pillar name is already taken?
* A doctest for the API addition
  * setting, adding, removing
  * Does this raise an error if the pillar name is already taken?
* Do we have an interface doctest that verifies that all implementation 
  of IPillar behave the same? I don't think so, and it is probable out 
  of scope for this...though that does justify the 5 story points.


== QA ==

As an admin or CHR (depending upon the decision taken above)
Add and remove aliases to a product, project, and distribution.
Verify that each alias works.

