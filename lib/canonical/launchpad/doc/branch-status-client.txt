Branch Mirroring Status Update Via The Authserver
=================================================

The branch puller is responsible for mirroring remote bzr branches to
the supermirror.

In the process of mirroring, it needs to update the status of those
branches in the Launchpad database.  As it does not have direct access
to the database, it performs the updates via the authserver.

  >>> import transaction
  >>> from canonical.authserver.client.branchstatus import BranchStatusClient
  >>> from canonical.launchpad.database import Branch
  >>> from canonical.launchpad.ftests.harness import LaunchpadZopelessTestSetup


Create the branch status client:

  >>> client = BranchStatusClient()

We are using Branch here which is a local database class, to cross-check
what the BranchStatusClient is reporting. The BranchStatusClient 'client' is
communicating over XML-RPC to the running authserver to answer these 
queries.

Check the mirror status of branch #1:

  >>> branch = Branch.get(1)
  >>> print branch.last_mirror_attempt
  None
  >>> print branch.last_mirrored
  None
  >>> print branch.mirror_failures
  0

When the branch puller starts, it uses the startMirroring() call to
update the last_mirror_attempt field in the database.  An integer
branch ID is used here, because the branch puller can not make use of
SQLObject instances.

This updates the last_mirror_attempt field:

  >>> client.startMirroring(1)

We can only see the change after we abort our local transaction so
we can get the data the authserver has committed.

  >>> LaunchpadZopelessTestSetup().txn.abort()
  >>> branch = Branch.get(1)
  >>> branch.last_mirror_attempt != None
  True

This does not update the last_mirrored field though, since we don't
know if the pull will be successful til it is completed:

  >>> print branch.last_mirrored
  None


If the mirror process succeeds, the branch puller can tell the
authserver using the mirrorComplete() method:

  >>> client.mirrorComplete(1, 'rev-1')

This sets the last_mirrored date to the time when the mirror started
(recorded by startMirroring()):

  >>> LaunchpadZopelessTestSetup().txn.abort()
  >>> branch = Branch.get(1)
  >>> branch.last_mirrored is not None
  True
  >>> branch.last_mirrored == branch.last_mirror_attempt
  True
  >>> old_last_mirrored = branch.last_mirrored


It also records the last mirrored ID:

  >>> print branch.last_mirrored_id
  rev-1


If an error occurs during the mirror process, the branch puller can
flag this with the mirrorFailed() method:

  >>> client.startMirroring(1)
  >>> client.mirrorFailed(1, 'failure reason')

This increments the failure count and leaves the last_mirrored date as
is:

  >>> LaunchpadZopelessTestSetup().txn.abort()
  >>> branch = Branch.get(1)
  >>> branch.mirror_failures
  1
  >>> branch.last_mirrored == old_last_mirrored
  True
  >>> branch.mirror_status_message
  u'failure reason'

A successful mirror will reset the failure counter though:

  >>> client.startMirroring(1)
  >>> client.mirrorComplete(1, 'rev-2')
  >>> LaunchpadZopelessTestSetup().txn.abort()
  >>> branch = Branch.get(1)
  >>> branch.mirror_failures
  0
  >>> print branch.mirror_status_message
  None

On normal termination, the branch puller calls the recordSuccess method to
record its starting and finishing times in the database.

  >>> import datetime
  >>> import pytz
  >>> UTC = pytz.timezone('UTC')
  >>> started = datetime.datetime(2007, 07, 05, 19, 32, 1, tzinfo=UTC)
  >>> completed = datetime.datetime(2007, 07, 05, 19, 34, 24, tzinfo=UTC)
  >>> client.recordSuccess('test-recordsuccess', 'vostok', started, completed)

That inserts a row into the ScriptActivity table where it can be used by the
standard script monitoring tools.

  >>> LaunchpadZopelessTestSetup().txn.abort()
  >>> from zope.component import getUtility
  >>> from canonical.launchpad.interfaces import IScriptActivitySet
  >>> script_activity_set = getUtility(IScriptActivitySet)
  >>> last_activity = script_activity_set.getLastActivity('test-recordsuccess')
  >>> last_activity.hostname
  u'vostok'
  >>> last_activity.date_started
  datetime.datetime(2007, 7, 5, 19, 32, 1, tzinfo=<UTC>)
  >>> last_activity.date_completed
  datetime.datetime(2007, 7, 5, 19, 34, 24, tzinfo=<UTC>)
