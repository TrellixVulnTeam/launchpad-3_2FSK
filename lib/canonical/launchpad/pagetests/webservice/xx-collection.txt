= Introduction =

All collections published by the Launchpad web service work pretty
much the same way. This document illustrates the general features of
entries, using Launchpad's collection of people and teams as an example.

== Collections and pagination ===

A collection responds to GET by serving one page of the objects in the
collection.

  >>> people_collection = webservice.get("/people").jsonBody()
  >>> people_collection['total_size']
  62
  >>> people_collection['next_collection_link']
  u'http://api.launchpad.dev/people?start=5&batch=5'
  >>> people_collection.get('prev_collection_link') is None
  True

  >>> people_entries = sorted(people_collection['entries'])
  >>> len(people_entries)
  5
  >>> people_entries[0]['name']
  u'spiv'
  >>> people_entries[0]['self_link']
  u'http://api.launchpad.dev/~spiv'
  >>> people_entries[-1]['name']
  u'bug-importer'

You can get other pages of the collection by following links:

  >>> second_batch = webservice.get("/people?start=5&batch=5").jsonBody()
  >>> second_batch['next_collection_link']
  u'http://api.launchpad.dev/people?start=10&batch=5'
  >>> second_batch['prev_collection_link']
  u'http://api.launchpad.dev/people?start=0&batch=5'

  >>> people_entries = sorted(second_batch['entries'])
  >>> people_entries[0]['name']
  u'valyag'

You can also get a larger batch than the default:

  >>> big_batch = webservice.get("/people?batch=50").jsonBody()
  >>> len(big_batch['entries'])
  50
  >>> big_batch.get('next_collection_link')
  u'http://api.launchpad.dev/people?start=50&batch=50'

  >>> bigger_batch = webservice.get("/people?batch=75").jsonBody()
  >>> len(bigger_batch['entries'])
  62
  >>> bigger_batch.get('next_collection_link') is None
  True


== Element lookup ==

The elements of a collection can be looked up by unique identifier:

  >>> admins_team = webservice.get("/~admins").jsonBody()
  >>> sorted(admins_team.items())
  [(u'datecreated', u'2005-06-06T08:59:51.571899+00:00'),
   (u'displayname', u'Launchpad Administrators'),
   (u'member_memberships_collection_link',
    u'http://api.launchpad.dev/~admins/member_memberships'),
   (u'members_collection_link',
      u'http://api.launchpad.dev/~admins/members'),
   (u'name', u'admins'),
   (u'self_link', u'http://api.launchpad.dev/~admins'),
   (u'team_memberships_collection_link',
    u'http://api.launchpad.dev/~admins/team_memberships'),
   (u'teamowner_link', u'http://api.launchpad.dev/~sabdfl')]

A collection may be scoped to an element:

  >>> team_members = webservice.get("/~admins/members").jsonBody()['entries']
  >>> team_members = sorted(team_members)
  >>> len(team_members)
  5
  >>> team_members[0]['name']
  u'spiv'
  >>> team_members[-1]['name']
  u'kinnison'

But not every element may have that collection scoped to it:

  >>> print webservice.get("/~spiv/members").getStatus()
  404


== Custom operations ==

A collection may expose custom named operations in response to GET
requests. A named operation may do anything consistent with the nature
of a GET request, but it's usually used to serve search results. The
custom operation to be invoked is named in the query string's
'ws_op' argument. Here's a custom operation on the collection of
people, called 'people'.

  >>> def search_people(text):
  ...     return sorted(webservice.get(
  ...         "/people?ws_op=people&text=" + text).jsonBody())


  >>> [p['name'] for p in search_people("admins")]
  [u'admins', u'ubuntu-mirror-admins', u'rosetta-admins',
   u'launchpad-buildd-admins', u'shipit-admins']

  >>> [p['name'] for p in search_people("nosuchperson")]
  []

  >>> print webservice.get("/people?ws_op=people&text=")
  HTTP/1.1 400 Bad Request
  ...
  text: Required input is missing.

A collection may also expose named operations in response to POST
requests. These operations are usually factories. Here's a helper
method that creates a new person by invoking a factory operation on
the collection of people.

  >>> def create_person(email_address, comment, name,
  ...                   display_name, password):
  ...     command = ("ws_op=create_person&email_address=%s&"
  ...                "comment=%s&name=%s&display_name=%s&password=%s") % (
  ...                    email_address, comment, name,
  ...                    display_name, password)
  ...     return webservice.post("/people",
  ...                            'application/x-www-form-urlencoded',
  ...                            command)

  >>> print create_person("serviceuser@example.com",
  ...                     "Comment", "serviceuser", "Service User",
  ...                     "password")
  HTTP/1.1 201 Created
  ...
  Location: http://api.launchpad.dev/~serviceuser
  <BLANKLINE>

  >>> print create_person("serviceuser2@example.com",
  ...                     "", "", "displayname", "")
  HTTP/1.1 201 Created
  ...
  Location: http://api.launchpad.dev/~serviceuser2
  <BLANKLINE>

Standard person-creation rules apply. For instance, you can't create a
person with a name that's taken.

  >>> print create_person("serviceuser3@example.com", "", "serviceuser",
  ...                     "Name already taken", "password")
  HTTP/1.1 400 Bad Request
  ...

You also can't create a person with an email address that's taken.

  >>> print create_person("serviceuser@example.com", "", "serviceuser3",
  ...                     "Email address already taken", "password")
  HTTP/1.1 409 Conflict
  ...
  The email addres 'serviceuser@example.com' is already in use.
