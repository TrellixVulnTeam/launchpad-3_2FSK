
Specification Dependencies
==========================

Specifications support the idea of spec dependencies. So, one spec can
require that another spec has been implemented before it's own
implementation can begin. We store those dependencies in Launchpad.

Lets look at the dependencies of the "canvas" spec for Firefox. It depends
on another spec, the "e4x" spec. Also, we should note that no specs depend
on the "canvas" spec itself.

  >>> admin_browser.open('http://blueprints.launchpad.dev/firefox/+spec/canvas')
  >>> print find_main_content(admin_browser.contents)
  <...
  ...Support E4X in EcmaScript...
  >>> 'Blocks' not in (admin_browser.contents)
  True

let's add a new dependency for the "canvas" spec. We'll add the
"extension-manager-upgrades" spec as a dependency. First, we confirm we can
see the page to add a dependency.

  >>> admin_browser.getLink('Add dependency').click()
  >>> admin_browser.url
  'http://blueprints.launchpad.dev/firefox/+spec/canvas/+linkdependency'

Now, lets POST the form, saying we want extension-manager-upgrades as the
dependency.

  >>> admin_browser.getControl(
  ...     'Depends On').value = ['extension-manager-upgrades']
  >>> admin_browser.getControl('Continue').click()
  >>> admin_browser.url
  'http://blueprints.launchpad.dev/firefox/+spec/canvas'

But we don't want to keep that, so we will remove it as a dependency. First
we make sure we can see the link to remove a dependency. We need to be
authenticated.

  >>> admin_browser.getLink('Remove dependency').click()
  >>> admin_browser.url
  'http://blueprints.launchpad.dev/firefox/+spec/canvas/+removedependency'

Now, we make sure we can load the page. It should show two potential
dependencies we could remove. The extension manager one, and "e4x".

  >>> admin_browser.getControl('Dependency').displayOptions
  ['Extension Manager Upgrades', 'Support E4X in EcmaScript']

We'll POST the form selecting "extension-manager-upgrades" for removal. We
expect to be redirected to the spec home page.

  >>> admin_browser.getControl(
  ...     'Dependency').value = ['extension-manager-upgrades']
  >>> admin_browser.getControl('Continue').click()
  >>> admin_browser.url
  'http://blueprints.launchpad.dev/firefox/+spec/canvas'

We know that no specs depend on "canvas", but "canvas" depends on "e4x"
and "e4x" depends on "svg-support". So the big picture is that "canvas"
needs to have both "e4x" and "svg-support" implemented before it can be
implemented, and nothing depends on having "canvas" implemented. The
"dependency tree" page for "canvas" should show exactly that.

  >>> anon_browser.open('http://launchpad.dev/firefox/+spec/canvas/+deptree')
  >>> print '----'; print anon_browser.contents
  ----
  ...Specifications that must be implemented first...
  ...Support Native SVG Objects...
  ...Support E4X in EcmaScript...
  ...This specification...
  ...Support &lt;canvas&gt; Objects...
  ...Specifications that can then be implemented...
  ...No specifications depend on this one...

Also, since we have these specs with their priorities and dependencies
mapped out, we should be able to see a project plan for Mozilla Firefox.

  >>> anon_browser.open('http://launchpad.dev/firefox/+roadmap')

We have some nice tools to display the dependency tree as a client side
image and map.

With some versions of graphviz, the <area> for the current spec (canvas) does
not have a URL.  In other versions, there is no <area> for the current spec at
all.  To accomodate both these cases, that part of the output is elided.
Rendering a imagemap with non-ascii characters also works.

  >>> anon_browser.open('http://launchpad.dev/firefox/+spec/canvas/+deptreeimgtag')
  >>> print anon_browser.contents
  <img src="deptree.png" usemap="#deptree" />
  <map id="deptree" name="deptree"...
  <area shape="rect"
  href="http://blueprints.launchpad.dev/firefox/+spec/e4x" title="Support E4X in EcmaScript" alt="" coords="..." />
  <area shape="rect"
  href="http://blueprints.launchpad.dev/firefox/+spec/svg&#45;support" title="Support Native SVG Objects" alt="" coords="..." />
  </map>


Get the dependency chart, and check that it is a PNG.

  >>> anon_browser.open('http://launchpad.dev/firefox/+spec/canvas/deptree.png')
  >>> anon_browser.contents.startswith('\x89PNG')
  True
  >>> anon_browser.headers['content-type']
  'image/png'


We can also get the DOT output for a spec dependency graph.  This is useful
for experimenting with the dot layout using production data.

  >>> anon_browser.open('http://launchpad.dev/firefox/+spec/canvas/+deptreedotfile')
  >>> anon_browser.headers['content-type']
  'text/plain;charset=utf-8'
  >>> print anon_browser.contents
  digraph "deptree" {
  ...

