= Code Imports =

CodeImport objects model the process surrounding the code import service of
Launchpad. A CodeImport object is created by a user requesting an import, the
import source is then reviewed by privileged users. Then importd, the code
import daemon, performs the initial import that creates the import branch, and
updates it regularly.

We can import code from CVS or Subversion.

== Code import set utility ==

CodeImports are created and found using the ICodeImport interface, which is
registered as a utility.

  >>> from canonical.launchpad.interfaces import ICodeImport, ICodeImportSet
  >>> from zope.interface.verify import verifyObject
  >>> from zope.component import getUtility
  >>> code_import_set = getUtility(ICodeImportSet)
  >>> verifyObject(ICodeImportSet, code_import_set)
  True

We still need to have a ProductSeries around that the imports will be
associated to:

  >>> from canonical.launchpad.interfaces import IProductSeriesSet
  >>> series = getUtility(IProductSeriesSet).get(1)
  >>> product = series.product

== Supported source systems ==

The rcs_type field, which indicates whether the import is from CVS or
Subversion, takes values from the 'RevisionControlSystems' vocabulary.

  >>> from canonical.lp.dbschema import RevisionControlSystems

=== Import from CVS ===

Code imports from CVS specify the CVSROOT value, and the path to import in the
repository, known as the "module".

  >>> cvs = RevisionControlSystems.CVS
  >>> cvs_root = ':pserver:anonymous@cvs.example.com:/cvsroot'
  >>> cvs_module = 'hello'

  >>> cvs_import = code_import_set.new(name='cvs-test',
  ...     product=product, series=series,
  ...     rcs_type=cvs, cvs_root=cvs_root, cvs_module=cvs_module)

  >>> verifyObject(ICodeImport, cvs_import)
  True

=== Import from Subversion ===

Code imports from Subversion specify the URL used with "svn checkout" to
retrieve the tree to import.

  >>> svn = RevisionControlSystems.SVN
  >>> svn_url = 'svn://svn.example.com/trunk'

  >>> svn_import = code_import_set.new(name='svn-test',
  ...     product=product, series=series,
  ...     rcs_type=svn, svn_branch_url=svn_url)

  >>> verifyObject(ICodeImport, svn_import)
  True

Write the new code import to the database, so we can use it to test
CodeImportSet.getByName.

  >>> from canonical.database.sqlbase import flush_database_updates
  >>> flush_database_updates()

== Retrieving by name ==

To retrieve a CodeImport by its unique name, as needed to implement navigation,
use CodeImportSet.getByName.

  >>> found_svn = code_import_set.getByName('svn-test')
  >>> verifyObject(ICodeImport, found_svn)
  True
  >>> found_svn.svn_branch_url
  u'svn://svn.example.com/trunk'
