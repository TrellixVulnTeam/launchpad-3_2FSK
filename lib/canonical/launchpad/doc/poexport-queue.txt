The Translation Export Queue is the functionality that allows us to export translation
resources from the Launchpad portal.

= ExportResult =

ExportResult class is used to control the list of exported files that succeed
and the ones that failed with the error associated.

  >>> import transaction
  >>> from zope.component import getUtility
  >>> from canonical.launchpad.interfaces import IPersonSet
  >>> from canonical.launchpad.mail.stub import test_emails
  >>> from canonical.launchpad.scripts.po_export_queue import ExportResult

  # Function to print mail content without headers.
  >>> def print_mail_body(body):
  ...     lines = body[body.index('\n\n')+2:].split('\n')
  ...     for line in lines:
  ...         print ">", line

  >>> result = ExportResult('testing export')

If we have a succeed, we note it. For this case, we will assume that hr.po and
es.po were exported without problems.

  >>> result.addSuccess('hr.po')
  >>> result.addSuccess('es.po')

And when there is an error, we also notify it.
To note error messages with the failure file, it should happen inside an
exception handling so we can get the exception error:

  >>> try:
  ...     raise AssertionError, "It's just an error for testing purposes"
  ... except AssertionError:
  ...     result.addFailure('cy.po')

Now, we should add the url where the export request could be downloaded.

  >>> result.url = 'http://someplace.com/somefile.tar.gz'

Once we classify all files, there is the option to send notification emails.
The notification should notify the user the list of resources that worked or
failed and the admins the ones that failed with the failure error.

In this example, 'carlos' will be the one that did the request.

  >>> personset = getUtility(IPersonSet)
  >>> carlos = personset.getByName('carlos')
  >>> result.notify(carlos)

  # We need to commit the transaction to get the emails in the queue.
  >>> transaction.commit()

We introduced entries with errors, so there should be two emails:

  >>> len(test_emails) == 2
  True

  >>> while len(test_emails) > 0:
  ...     from_addrs, to_addrs, body = test_emails.pop()
  ...     if 'carlos@canonical.com' in to_addrs:
  ...         carlos_addrs = to_addrs
  ...         carlos_body = body
  ...     else:
  ...         admins_addrs = to_addrs
  ...         admins_body = body

One is for the user. There are erros and success exports so we should note
that to the user:

  >>> print carlos_addrs
  ['carlos@canonical.com']
  >>> print_mail_body(carlos_body)
  > 
  > Hello Carlos Perell=C3=B3 Mar=C3=ADn,
  >
  > Rosetta has finished exporting your requested files.
  > However, problems were encountered exporting the
  > following files:
  >
  >  * cy.po
  >
  > The Rosetta team has been notified of this problem. Please
  > reply to this email for further assistance.
  >
  > Of the 3 files you requested, Rosetta successfully exported
  > 2, which can be downloaded from the following location:
  >
  >     http://someplace.com/somefile.tar.gz

For the errors, it means we have a bug somewhere in Launchpad so the admins
should get also a notification to be able to fix those bugs:

  >>> print admins_addrs
  ['launchpad-error-reports@lists.canonical.com']
  >>> print_mail_body(admins_body)
  > 
  > Hello admins,
  > 
  > Rosetta encountered problems exporting some files requested by
  > Carlos Perell=C3=B3 Mar=C3=ADn. This means we have a bug in
  > Launchpad that needs to be fixed to be able to proceed with
  > this export. You can see the list of failed files with the
  > error we got:
  > 
  > cy.po:
  > Traceback (most recent call last):
  ...
  > AssertionError: It's just an error for testing purposes
  > 
  > 
  > 

The notification changes when all files failed:

  >>> result = ExportResult('testing export')

Notify the error.

  >>> try:
  ...     raise AssertionError, "It's just an error for testing purposes"
  ... except AssertionError:
  ...     result.addFailure('cy.po')

In this case, there are only errors, so there shouldn't be a URL to download
anything, if we set it, the system will fail:

  >>> result.url = 'http://someplace.com/somefile.tar.gz'

Once we are done, we should notify the user that everything failed.

  >>> result.notify(carlos)
  Traceback (most recent call last):
  ...
  AssertionError: Can't have a URL without successes (or vice versa).

In this case, it should be None.

  >>> result.url = None
  >>> result.notify(carlos)

  # We need to commit the transaction to get the emails in the queue.
  >>> transaction.commit()

As usual, when there is an error, two emails should be sent:

  >>> len(test_emails) == 2
  True

  >>> while len(test_emails) > 0:
  ...     from_addrs, to_addrs, body = test_emails.pop()
  ...     if 'carlos@canonical.com' in to_addrs:
  ...         carlos_addrs = to_addrs
  ...         carlos_body = body
  ...     else:
  ...         admins_addrs = to_addrs
  ...         admins_body = body

One is for the user with the error notification.

  >>> print carlos_addrs
  ['carlos@canonical.com']
  >>> print_mail_body(carlos_body)
  > 
  > Hello Carlos Perell=C3=B3 Mar=C3=ADn,
  > 
  > Rosetta encountered problems exporting the files you
  > requested. The Rosetta team has been notified of this
  > problem. Please reply to this email for further assistance.

And the other to the admins.

  >>> print admins_addrs
  ['launchpad-error-reports@lists.canonical.com']
  >>> print_mail_body(admins_body)
  > 
  > Hello admins,
  > 
  > Rosetta encountered problems exporting some files requested by
  > Carlos Perell=C3=B3 Mar=C3=ADn. This means we have a bug in
  > Launchpad that needs to be fixed to be able to proceed with
  > this export. You can see the list of failed files with the
  > error we got:
  > 
  > cy.po:
  > Traceback (most recent call last):
  ...
  > AssertionError: It's just an error for testing purposes
  > 
  > 
  > 

Finally, there is the case when there are no errors at all. This is the usual
case.

  >>> result = ExportResult('testing export')

If we have a succeed, we note it. For this case, we will assume that hr.po and
es.po were exported without problems.

  >>> result.addSuccess('hr.po')
  >>> result.addSuccess('es.po')

As noted before, result.url should be set to the URL where the user can
download the requested files. If we don't set it, the export will fail:

  >>> result.notify(carlos)
  Traceback (most recent call last):
  ...
  AssertionError: An export result must have an URL or failures (or both).

So let's add it:

  >>> result.url = 'http://someplace.com/somefile.tar.gz'

And notify the user.

  >>> result.notify(carlos)

  # We need to commit the transaction to get the email in the queue.
  >>> transaction.commit()

In this case, there are no errors, so we should get just a single email

  >>> len(test_emails) == 1
  True

  >>> from_addrs, to_addrs, body = test_emails.pop()

  >>> print to_addrs
  ['carlos@canonical.com']
  >>> print_mail_body(body)
  > 
  > Hello Carlos Perell=C3=B3 Mar=C3=ADn,
  > 
  > The files you requested from Rosetta are ready for download
  > from the following location:
  > 
  >     http://someplace.com/somefile.tar.gz

= process_queue() =

This method handles entries from the queue of entries to be exported.

    >>> from canonical.launchpad.scripts.po_export_queue import process_queue

First, need to fill the export queue with entries to be exported.

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.database import POTemplate
    >>> from canonical.launchpad.interfaces import IPOExportRequestSet
    >>> from canonical.lp.dbschema import TranslationFileFormat
    >>> potemplate = POTemplate.get(1)
    >>> export_request_set = getUtility(IPOExportRequestSet)

The queue is empty by default.

    >>> export_request_set.number_entries
    0
    >>> export_request_set.addRequest(
    ...     carlos, potemplate=potemplate, format=TranslationFileFormat.PO)

Once added a new entry, the queue has content.

    >>> export_request_set.number_entries
    1

Once the queue is processed, the queue is empty again.

    >>> import logging
    >>> process_queue(transaction, logging.getLogger())

    >>> export_request_set.number_entries
    0

And a confirmation email was sent to carlos, the importer.

    >>> len(test_emails)
    1

    >>> from_addrs, to_addrs, body = test_emails.pop()

The confirmation email shows no errors at all.

    >>> print to_addrs
    ['carlos@canonical.com']
    >>> print_mail_body(body)
    > 
    > Hello Carlos Perell=C3=B3 Mar=C3=ADn,
    > 
    > The files you requested from Rosetta are ready for download
    > from the following location:
    > 
    >     http://localhost:58000/.../po_evolution-2.2.pot
