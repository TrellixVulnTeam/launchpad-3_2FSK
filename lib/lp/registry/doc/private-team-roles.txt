Private team participation
==========================

During the transitional period between having only public and private
membership team visibility until the end goal of having only public
and private team visibilty, there will be a time when teams can have a
visibility set to one of the three: public, private membership, and
private.

Public teams can perform any role in Launchpad.  Private membership
teams are very restricted in the roles they may play.  Private teams
can play more roles.  Private membership teams were originally
implemented in this manner since it was the most expedient way to
provide the required functionality and nothing more.  With the advent
of truly private teams their utility is increased but with more
safeguards to prevent potential data leakage.


Bugs
====

Bug subscriptions
-----------------

    >>> # Create the necessary teams.
    >>> from lp.registry.interfaces.person import PersonVisibility
    >>> team_owner = factory.makePerson(name='team-owner')
    >>> login('foo.bar@canonical.com')
    >>> priv_team = factory.makeTeam(name='private-team',
    ...     owner=team_owner,
    ...     visibility=PersonVisibility.PRIVATE)
    >>> pm_team = factory.makeTeam(name='private-membership-team',
    ...     owner=team_owner,
    ...     visibility=PersonVisibility.PRIVATE_MEMBERSHIP)

A private team can be subscribed to a bug.

    >>> bug = factory.makeBug()
    >>> priv_subscription = bug.subscribe(priv_team, team_owner)

But a private membership team cannot.

    >>> pm_subscription = bug.subscribe(pm_team, team_owner)
    Traceback (most recent call last):
    ...
    PrivatePersonLinkageError: Cannot link person
    (name=private-membership-team, visibility=PRIVATE_MEMBERSHIP) to
    <BugSubscription...

A private team can subscribe others to a bug (the `subscribed_by`
person).

    >>> priv_subscription = bug.subscribe(team_owner, priv_team)

The same team cannot unsubscribe the person, though.

    >>> bug.unsubscribe(team_owner, priv_team)
    Traceback (most recent call last):
    ...
    UserCannotUnsubscribePerson: ...

Only the person can unsubscribe him or her self.

    >>> bug.unsubscribe(team_owner, team_owner)

A private membership team cannot subscribe others to a bug.

    >>> pm_subscription = bug.subscribe(team_owner, pm_team)
    Traceback (most recent call last):
    ...
    PrivatePersonLinkageError: Cannot link person
    (name=private-membership-team, visibility=PRIVATE_MEMBERSHIP) to
    <BugSubscription...


Bug task assignee
-----------------

A private team can be the assignee for a bug task.

    >>> bugtask = bug.default_bugtask
    >>> bugtask.transitionToAssignee(priv_team)
    >>> print bugtask.assignee.name
    private-team

However a private membership team is not allowed to be a bugtask assignee.

    >>> bugtask.transitionToAssignee(pm_team)
    Traceback (most recent call last):
    ...
    PrivatePersonLinkageError: Cannot link person
    (name=private-membership-team, visibility=PRIVATE_MEMBERSHIP) to
    <BugTask...


Branches
========

Branch ownership
----------------

Private teams can be assigned as the owner of a branch

    >>> branch = factory.makeBranch()
    >>> branch.owner = priv_team

But private membership teams cannot own a branch.

    >>> branch = factory.makeBranch()
    >>> branch.owner = pm_team
    Traceback (most recent call last):
    ...
    PrivatePersonLinkageError: Cannot link person
    (name=private-membership-team, visibility=PRIVATE_MEMBERSHIP) to
    <Branch...


Branch subscriptions
--------------------

Private teams can subscribe to branches.

    >>> from lp.code.enums import (
    ...     BranchSubscriptionDiffSize,
    ...     BranchSubscriptionNotificationLevel,
    ...     CodeReviewNotificationLevel)
    >>> branch = factory.makeBranch()
    >>> subscription = branch.subscribe(
    ...     priv_team,
    ...     BranchSubscriptionNotificationLevel.DIFFSONLY,
    ...     BranchSubscriptionDiffSize.WHOLEDIFF,
    ...     CodeReviewNotificationLevel.STATUS)
    >>> print subscription.person.name
    private-team

Private membership teams cannot subscribe to branches.

    >>> branch = factory.makeBranch()
    >>> subscription = branch.subscribe(
    ...     pm_team,
    ...     BranchSubscriptionNotificationLevel.DIFFSONLY,
    ...     BranchSubscriptionDiffSize.WHOLEDIFF,
    ...     CodeReviewNotificationLevel.STATUS)
    Traceback (most recent call last):
    ...
    PrivatePersonLinkageError: Cannot link person
    (name=private-membership-team, visibility=PRIVATE_MEMBERSHIP) to
    <BranchSubscription at...

Branch visibility policies
--------------------------

Private teams can have branch visibility policies.

    >>> def teamname(team):
    ...     if team is None:
    ...         return "*everyone*"
    ...     else:
    ...         return team.displayname
    >>> def print_team_policies(context):
    ...     for item in context.getBranchVisibilityTeamPolicies():
    ...         print "%s: %s" % (teamname(item.team), item.rule.title)

    >>> from lp.code.enums import BranchVisibilityRule
    >>> from lp.registry.interfaces.product import IProductSet
    >>> evolution = getUtility(IProductSet).getByName('evolution')
    >>> print_team_policies(evolution)
    >>> evolution.setBranchVisibilityTeamPolicy(
    ...     priv_team, BranchVisibilityRule.PRIVATE)
    >>> print_team_policies(evolution)
    Private Team: Private

But private membership teams cannot.

    >>> evolution.setBranchVisibilityTeamPolicy(
    ...     pm_team, BranchVisibilityRule.PRIVATE)
    Traceback (most recent call last):
    ...
    PrivatePersonLinkageError: Cannot link person
    (name=private-membership-team, visibility=PRIVATE_MEMBERSHIP) to
    <BranchVisibilityTeamPolicy at...


PPAs
====


PPA ownership
-------------

Private teams can own PPAs.

    >>> from lp.soyuz.interfaces.archive import (
    ...     ArchivePurpose, IArchiveSet)
    >>> from lp.registry.interfaces.distribution import (
    ...     IDistributionSet)
    >>> ubuntu = getUtility(IDistributionSet)['ubuntu']
    >>> archive_set = getUtility(IArchiveSet)
    >>> private_archive = archive_set.new(
    ...     owner=priv_team, purpose=ArchivePurpose.COPY,
    ...     distribution=ubuntu, name='private-team-archive',
    ...     enabled=False, require_virtualized=False)

Alas, Private Membership Teams cannot own PPAs.

    >>> noarchive = archive_set.new(
    ...     owner=pm_team, purpose=ArchivePurpose.COPY,
    ...     distribution=ubuntu, name='pmt-archive',
    ...     enabled=False, require_virtualized=False)
    Traceback (most recent call last):
    ...
    PrivatePersonLinkageError: Cannot link person
    (name=private-membership-team, visibility=PRIVATE_MEMBERSHIP) to
    <Archive at...


PPA subscriptions
-----------------

Private teams can be subscribed to private PPAs.

    >>> login('foo.bar@canonical.com')
    >>> another_priv_team = factory.makeTeam(name='another-private-team',
    ...     owner=team_owner,
    ...     visibility=PersonVisibility.PRIVATE)

    >>> # We must login as the archive owner to add the subscription.
    >>> login_person(team_owner)
    >>> subscription = private_archive.newSubscription(
    ...     subscriber=another_priv_team,
    ...     registrant=team_owner)

Private Membership Teams cannot subscribe to private PPAs.

    >>> nosubscription = private_archive.newSubscription(subscriber=pm_team,
    ...     registrant=team_owner)
    Traceback (most recent call last):
    ...
    PrivatePersonLinkageError: Cannot link person
    (name=private-membership-team, visibility=PRIVATE_MEMBERSHIP) to
    <...ArchiveSubscriber object at...
