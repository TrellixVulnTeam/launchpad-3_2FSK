= Editing team details =

Only an administrator (as well as the team owner) of a team can change the
details of that team.

    >>> user_browser.open('http://launchpad.dev/~ubuntu-team/+edit')
    Traceback (most recent call last):
    ...
    Unauthorized:...

    >>> browser.addHeader('Authorization', 'Basic mark@hbd.com:test')
    >>> browser.open('http://launchpad.dev/~ubuntu-team')
    >>> browser.getLink('Change details').click()
    >>> browser.url
    'http://launchpad.dev/~ubuntu-team/+edit'
    >>> browser.getControl('Name', index=0).value
    'ubuntu-team'
    >>> browser.getControl('Display Name').value
    'Ubuntu Team'
    >>> browser.getControl('Team Description').value
    'This Team is responsible for the Ubuntu Distribution'
    >>> browser.getControl('Moderated Team').selected
    True
    >>> browser.getControl('invite them to apply for renewal').selected
    True
    >>> print browser.getControl('Renewal period').value

Now we'll change some values.

    >>> browser.getControl('Name', index=0).value = 'ubuntuteam'
    >>> browser.getControl('Display Name').value = 'The Ubuntu Team'
    >>> browser.getControl('Team Description').value = ''
    >>> browser.getControl('Restricted Team').selected = True

    >>> browser.getControl('Save').click()

We're now redirected to the team's home page, which is now on a different
URL since we changed its name.

    >>> browser.url
    'http://launchpad.dev/~ubuntuteam'
    >>> browser.getLink('Change details').click()

    >>> browser.url
    'http://launchpad.dev/~ubuntuteam/+edit'
    >>> browser.getControl('Name', index=0).value
    'ubuntuteam'
    >>> browser.getControl('Display Name').value
    'The Ubuntu Team'
    >>> browser.getControl('Team Description').value
    ''
    >>> browser.getControl('Restricted Team').selected
    True

If we try to use a name which is already in use, we'll get an error
message explaining it.

    >>> browser.getControl('Name', index=0).value = 'sabdfl'
    >>> browser.getControl('Save').click()

    >>> browser.url
    'http://launchpad.dev/%7Eubuntuteam/+edit'
    >>> for tag in find_tags_by_class(browser.contents, 'message'):
    ...     print extract_text(tag)
    There is 1 error.
    sabdfl is already in use by another person or team.

We also get an error message if we attempt to create a team with a renewal
policy other than None and don't specify a default renewal period.

    >>> browser.getControl('Name', index=0).value = 'ubuntuteam'
    >>> browser.getControl(
    ...     'invite them to renew their own membership').selected = True
    >>> browser.getControl('Save').click()

    >>> browser.url
    'http://launchpad.dev/%7Eubuntuteam/+edit'
    >>> for tag in find_tags_by_class(browser.contents, 'message'):
    ...     print extract_text(tag)
    There is 1 error.
    You must specify a default renewal period greater than 0.


== Teams with mailing lists may not be renamed ==

Because renaming mailing lists is non-trivial in Mailman 2.1, renaming teams
with mailing lists is prohibited.  This is done by making the 'name' field of
such team pages read-only.

    >>> browser.open('http://launchpad.dev/~landscape-developers')
    >>> browser.getLink('Configure mailing list').click()
    >>> browser.getControl('Apply for Mailing List').click()

    # Approval of mailing lists is not yet exposed through the web.
    >>> from zope.component import getUtility
    >>> from canonical.launchpad.interfaces import (
    ...     MailingListStatus, ILaunchpadCelebrities)
    >>> from lp.registry.model.mailinglist import MailingListSet
    >>> from canonical.launchpad.ftests import login, logout
    >>> login('foo.bar@canonical.com')
    >>> experts = getUtility(ILaunchpadCelebrities).mailing_list_experts
    >>> admin = list(experts.allmembers)[0]
    >>> mailing_list = MailingListSet().get('landscape-developers')
    >>> mailing_list.review(admin, MailingListStatus.APPROVED)
    >>> mailing_list.syncUpdate()
    >>> logout()

Because the 'name' field is read-only, it's not a control that we can get
a hold of to change.

    >>> browser.getLink('Change details').click()
    >>> browser.getControl(name='field.name').value
    Traceback (most recent call last):
    ...
    LookupError: name 'field.name'

The reason why the field is immutable is displayed in the field
description.

    >>> print extract_text(
    ...     first_tag_by_class(browser.contents, 'form'))
    Name: landscape-developers
    This team cannot be renamed because it has a mailing list.
    ...

Of course, teams without mailing lists still have an editable name field.

    >>> print MailingListSet().get('guadamen')
    None
    >>> browser.open('http://launchpad.dev/~guadamen')
    >>> browser.getLink('Change details').click()
    >>> browser.getControl(name='field.name').value
    'guadamen'


== Private teams may not be renamed ==

    >>> # Create the necessary teams.
    >>> login('foo.bar@canonical.com')
    >>> from lp.registry.interfaces.person import (
    ...     IPersonSet, PersonVisibility)
    >>> owner = factory.makePerson(name='team-owner')
    >>> priv_team = factory.makeTeam(name='private-team',
    ...     owner=owner,
    ...     visibility=PersonVisibility.PRIVATE)
    >>> logout()

    >>> browser.open('http://launchpad.dev/~private-team')
    >>> browser.getLink('Change details').click()
    >>> browser.getControl(name='field.name').value
    Traceback (most recent call last):
    ...
    LookupError: name 'field.name'

The reason why the field is immutable is displayed in the field
description.

    >>> print extract_text(
    ...     first_tag_by_class(browser.contents, 'form'))
    Name: private-team
    This team cannot be renamed because it is private.
    ...


== Multiple conditions blocking team renaming ==

Since public teams can have mailing lists and PPAs simultaneously,
there will be scenarios where more than one of these conditions are
actually blocking the team to be renamed.

The Landscape Developers team already has a mailing list, we will
also activate its PPA.

    >>> browser.open('http://launchpad.dev/~landscape-developers')
    >>> browser.getLink('Create a new PPA').click()
    >>> browser.getControl(
    ...     name="field.displayname").value = 'Devel PPA'
    >>> browser.getControl(name="field.accepted").value = True
    >>> browser.getControl(
    ...    name="field.description").value = 'Hoohay for Team PPA.'
    >>> browser.getControl("Activate").click()

Back in the team edit form, the 'name' field remains read-only and has
a complete explanation about why it cannot be modified.

    >>> browser.getLink('Overview').click()
    >>> browser.getLink('Change details').click()

    >>> browser.getControl(name='field.name').value
    Traceback (most recent call last):
    ...
    LookupError: name 'field.name'

    >>> print extract_text(
    ...     first_tag_by_class(browser.contents, 'form'))
    Name: landscape-developers
    This team cannot be renamed because it has a mailing list and a PPA.
    ...
