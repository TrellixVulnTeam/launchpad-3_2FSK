= Field resources =

It's possible to get the value of one particular field. You can get a
JSON or XHTML-fragment representation.

    >>> import simplejson
    >>> def set_display_name(name):
    ...     """Sets salgado's display name."""
    ...     representation = {'display_name': name}
    ...     ignore = webservice('/~salgado', 'PATCH',
    ...                         simplejson.dumps(representation))

    >>> set_display_name("<b>Guilherme Salgado</b>")

    >>> print webservice.get('/~salgado/display_name')
    HTTP/1.1 200 Ok
    ...
    Content-Type: application/json
    ...
    "<b>Guilherme Salgado</b>"

    >>> print webservice.get('/~salgado/display_name', 'application/xhtml+xml')
    HTTP/1.1 200 Ok
    ...
    Content-Type: application/xhtml+xml
    ...
    &lt;b&gt;Guilherme Salgado&lt;/b&gt;

    >>> set_display_name("Guilherme Salgado")


= Supported methods =

Field resources are read-only.

    >>> for method in ['HEAD', 'POST', 'PUT', 'DELETE', 'OPTIONS']:
    ...     print webservice("/~salgado/display_name", method)
    HTTP/1.1 405 Method Not Allowed
    Allow: GET
    ...
    HTTP/1.1 405 Method Not Allowed
    Allow: GET
    ...
    HTTP/1.1 405 Method Not Allowed
    Allow: GET
    ...
    HTTP/1.1 405 Method Not Allowed
    Allow: GET
    ...
    HTTP/1.1 405 Method Not Allowed
    Allow: GET
    ...


= Conditional GET =

Field resources have ETags independent of their parent entries. They
respond to conditional GET.

    >>> response = webservice.get('/~salgado')
    >>> salgado_etag = response._response.getHeader('ETag')

    >>> response = webservice.get('/~salgado/display_name')
    >>> etag = response._response.getHeader('ETag')

    >>> salgado_etag == etag
    False

    >>> print webservice.get('/~salgado/display_name',
    ...                      headers={'If-None-Match': etag})
    HTTP/1.1 304 Not Modified
    ...

    >>> set_display_name("new display name")
    >>> print webservice.get('/~salgado/display_name',
    ...                      headers={'If-None-Match': etag})
    HTTP/1.1 200 Ok
    ...

    >>> set_display_name("Guilherme Salgado")


= Custom representations =

Every entry has an XHTML representation. The default representation is
a simple text node.

  >>> print webservice.get('/~salgado/display_name', 'application/xhtml+xml')
  HTTP/1.1 200 Ok
  ...
  Guilherme Salgado

But it's possible to define a custom HTML unmarshaller for a particular object
and field type. Here's a simple unmarshaller that serves some hard-coded HTML.

  >>> class DummyUnmarshaller:
  ...
  ...     def __init__(*args):
  ...         pass
  ...
  ...     def __call__(*args):
  ...         return "<html>foo</html>"

Register the unmarshaller as the IFieldHTMLUnmarshaller adapter for an
IText field of an IPerson entry...

  >>> from canonical.lazr.interfaces.rest import (
  ...     IFieldHTMLUnmarshaller, WebServiceLayer)
  >>> from canonical.launchpad.interfaces import IPerson
  >>> from zope.schema.interfaces import IText
  >>> from zope.interface.interfaces import IInterface
  >>> view_name = "canonical.lazr.rest.resource.EntryFieldResource"
  >>> from zope.component import getGlobalSiteManager
  >>> manager = getGlobalSiteManager()

  >>> manager.registerAdapter(
  ...      factory=DummyUnmarshaller, required=[IPerson, IText, WebServiceLayer],
  ...      provided=IFieldHTMLUnmarshaller, name=view_name)

...and the XHTML representation of an IPerson will be the result of
calling a DummyUnmarshaller object.

  >>> print webservice.get('/~salgado/display_name', 'application/xhtml+xml')
  HTTP/1.1 200 Ok
  ...
  <html>foo</html>

In fact, that adapter will be used for every IText field of an IPerson.

  >>> print webservice.get('/~salgado/name', 'application/xhtml+xml')
  HTTP/1.1 200 Ok
  ...
  <html>foo</html>

It will not be used for IText fields of other interfaces:

  >>> print webservice.get('/firefox/name', 'application/xhtml+xml')
  HTTP/1.1 200 Ok
  ...
  firefox

It will not be used for non-text fields of IPerson.

  >>> print webservice.get('/~salgado/date_created', 'application/xhtml+xml')
  HTTP/1.1 200 Ok
  ...
  2005-06-06 08:59:51.596025+00:00

Before we continue, here's some cleanup code to remove the custom
unmarshaller we just defined.

  >>> from zope.component import getGlobalSiteManager
  >>> ignored = getGlobalSiteManager().unregisterAdapter(
  ...      factory=DummyUnmarshaller, required=[IPerson, IText, WebServiceLayer],
  ...      provided=IFieldHTMLUnmarshaller, name=view_name)

  >>> print webservice.get('/~salgado/display_name', 'application/xhtml+xml')
  HTTP/1.1 200 Ok
  ...
  Guilherme Salgado


== Defining a custom representation for a single field ==

It's also possible to define a custom HTML representation of one
particular field, by registering a view on the field. This code
creates a custom unmarshaller for IPerson.display_name, by registering
a view on IPerson called "display_name".

  >>> manager.registerAdapter(
  ...      factory=DummyUnmarshaller, required=[IPerson, WebServiceLayer],
  ...      provided=IFieldHTMLUnmarshaller, name='display_name')

  >>> print webservice.get('/~salgado/display_name', 'application/xhtml+xml')
  HTTP/1.1 200 Ok
  ...
  <html>foo</html>

Unlike what happened when we registered an unmarshaller for
IPerson/IText, other IText fields of IPerson are not affected.

  >>> print webservice.get('/~salgado/name', 'application/xhtml+xml')
  HTTP/1.1 200 Ok
  ...
  salgado

The XHTML representation of an entry incorporates any custom XHTML
representations of that entry's fields.

  >>> print webservice.get('/~salgado', 'application/xhtml+xml')
  HTTP/1.1 200 Ok
  ...
  <dt>custom_name</dt>
  <dd>&lt;html&gt;foo&lt;/html&gt;</dd>
  ...

Before we continue, here's some code to unregister the view.

  >>> ignored = getGlobalSiteManager().unregisterAdapter(
  ...      factory=DummyUnmarshaller, required=[IPerson, WebServiceLayer],
  ...      provided=IFieldHTMLUnmarshaller, name='display_name')

  >>> print webservice.get('/~salgado/display_name', 'application/xhtml+xml')
  HTTP/1.1 200 Ok
  ...
  Guilherme Salgado
