= Mailing list subscriptions =

Both direct and indirect members of a team may subscribe to a team's mailing
list.  First, create the mailing list, which will send a notification messages
to all the members of the mailing list.  We can ignore these messages.

    >>> from canonical.launchpad.mailman.testing import helpers
    >>> list_one = helpers.create_list('itest-one')

Anne registers with Launchpad and decides to subscribe to the mailing list.

    >>> helpers.subscribe('Anne', 'itest-one')
    >>> helpers.subscribe('Bart', 'itest-one', use_alt_address=True)

Both Anne and Bart are now members of the mailing list.  Both have two
subscribed addresses (because both are validated with Launchpad), but only one
of them is enabled.

    >>> from Mailman.MailList import MailList
    >>> from Mailman.MemberAdaptor import ENABLED
    >>> def print_members(mailing_list):
    ...     for key in sorted(mailing_list.getMembers()):
    ...         address = mailing_list.getMemberCPAddress(key)
    ...         fullname = mailing_list.getMemberName(key)
    ...         is_enabled = (mailing_list.getDeliveryStatus(key) == ENABLED)
    ...         print fullname, '<%s>' % address, is_enabled

    >>> mailing_list = MailList('itest-one', lock=False)
    >>> print_members(mailing_list)
    Anne Person <anne.person@example.com> True
    Anne Person <aperson@example.org> False
     <archive@mail-archive.dev> True
    Bart Person <bart.person@example.com> False
    Bart Person <bperson@example.org> True

Cris and Dirk now subscribe to the team and its list.  Anne changes her
preferred email address, and Bart unsubscribes from the mailing list.

    >>> helpers.subscribe('Cris', 'itest-one')
    >>> helpers.subscribe('Dirk', 'itest-one')
    >>> helpers.unsubscribe('Bart', 'itest-one')

    # Change Anne's email address to her alternative.
    >>> import transaction
    >>> from canonical.launchpad.ftests import login, logout
    >>> from canonical.launchpad.ftests import mailinglists_helper
    >>> from canonical.launchpad.interfaces.person import IPersonSet
    >>> from canonical.launchpad.mailman.testing.logwatcher import LogWatcher
    >>> from zope.component import getUtility

    >>> log_watcher = LogWatcher()
    >>> login('foo.bar@canonical.com')
    >>> anne = getUtility(IPersonSet).getByName('anne')
    >>> anne.setPreferredEmail(mailinglists_helper.get_alternative_email(anne))
    >>> transaction.commit()
    >>> logout()
    >>> log_watcher.wait_for_membership_updates('itest-one')

Anne is now subscribed with her alternate email address, and Cris and Dirk are
the only other members.

    # Reload the list data.
    >>> mailing_list.Load()
    >>> print_members(mailing_list)
    Anne Person <anne.person@example.com> False
    Anne Person <aperson@example.org> True
     <archive@mail-archive.dev> True
    Cris Person <cperson@example.org> False
    Cris Person <cris.person@example.com> True
    Dirk Person <dirk.person@example.com> True
    Dirk Person <dperson@example.org> False


== Alternative addresses ==

Now Anne decides to register another email address with Launchpad, however
before she can validate this address, subscriptions for the list are
synchronized with Mailman.  Anne's non-validated address does not appear in
the membership list, either as an enabled or disabled address.

    >>> from canonical.launchpad.interfaces import IEmailAddressSet
    >>> login('foo.bar@canonical.com')
    >>> email_set = getUtility(IEmailAddressSet)
    >>> email = email_set.new('anne.x.person@example.net', anne)
    >>> transaction.commit()

    # This will time out because no changes have been propagated to Mailman.
    >>> log_watcher.wait_for_membership_changes('itest-one')
    'Timed out'

    # Reload the list data.
    >>> mailing_list.Load()
    >>> print_members(mailing_list)
    Anne Person <anne.person@example.com> False
    Anne Person <aperson@example.org> True
     <archive@mail-archive.dev> True
    Cris Person <cperson@example.org> False
    Cris Person <cris.person@example.com> True
    Dirk Person <dirk.person@example.com> True
    Dirk Person <dperson@example.org> False

Once Anne validates her address though, she may post from it.

    >>> from canonical.launchpad.interfaces import EmailAddressStatus
    >>> email.status = EmailAddressStatus.VALIDATED
    >>> transaction.commit()
    >>> logout()
    >>> log_watcher.wait_for_membership_changes('itest-one')

    >>> mailing_list.Load()
    >>> print_members(mailing_list)
    Anne Person <anne.person@example.com> False
    Anne Person <anne.x.person@example.net> False
    Anne Person <aperson@example.org> True
     <archive@mail-archive.dev> True
    Cris Person <cperson@example.org> False
    Cris Person <cris.person@example.com> True
    Dirk Person <dirk.person@example.com> True
    Dirk Person <dperson@example.org> False


== Case-preservation ==

Mailing lists preserve the case of the subscribed email address,
although for subscription purposes, two email addresses that differs
only in case are the same address.

Emma joins Launchpad as normal, then subscribes a mixed-case alternative
email address.

    >>> from canonical.launchpad.ftests.mailinglists_helper import new_person
    >>> login('foo.bar@canonical.com')
    >>> emma = new_person('Emma')
    >>> email = email_set.new('EmmaXPerson@example.org', emma)
    >>> email.status = EmailAddressStatus.VALIDATED
    >>> from canonical.launchpad.interfaces.mailinglist import IMailingListSet
    >>> team_one = getUtility(IPersonSet).getByName('itest-one')
    >>> emma.join(team_one)
    >>> list_one = getUtility(IMailingListSet).get('itest-one')
    >>> list_one.subscribe(emma, email)
    >>> transaction.commit()
    >>> logout()
    >>> log_watcher.wait_for_membership_changes('itest-one')

Emma is now a member of the mailing list, using her case-preserved email
address.

    >>> mailing_list.Load()
    >>> print_members(mailing_list)
    Anne Person <anne.person@example.com> False
    Anne Person <anne.x.person@example.net> False
    Anne Person <aperson@example.org> True
     <archive@mail-archive.dev> True
    Cris Person <cperson@example.org> False
    Cris Person <cris.person@example.com> True
    Dirk Person <dirk.person@example.com> True
    Dirk Person <dperson@example.org> False
    Emma Person <emma.person@example.com> False
    Emma Person <EmmaXPerson@example.org> True
    Emma Person <eperson@example.org> False
