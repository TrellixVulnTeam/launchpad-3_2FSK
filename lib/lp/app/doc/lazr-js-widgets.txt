LAZR JS Wrappers
================

The canonical.widgets.lazrjs module contains a bunch of wrapper
for widgets defined in Lazr-JS.

TextLineEditorWidget
--------------------------

We have a convenient wrapper for the inlineedit/editor JS widget in
TextLineEditorWidget.

    >>> from canonical.launchpad.webapp.publisher import canonical_url
    >>> from lp.app.browser.lazrjs import TextLineEditorWidget
    >>> bug = factory.makeBug(title='My bug is > important')

The wrapper takes as arguments the object and the attribute of the
object that is being edited, as well as the URL to use for editing when
when JS is turned off.

    >>> widget = TextLineEditorWidget(
    ...     bug, 'title', canonical_url(bug.bugtasks[0], view_name='+edit'))

The widget is rendered by executing it, it prints out the attribute
content.

    >>> print widget()
    <h1 id="..."><span class="yui3-editable_text-text">My bug is &gt;
        important</span>
    </h1>

In addition, when the logged in user can edit the value, there is a link to
the edit view that appears as well as a <script> tag that will change that
link into an AJAX control when JS is available:

    >>> login('no-priv@canonical.com')
    >>> print widget()
    <h1 id="..."><span class="yui3-editable_text-text">My bug is &gt;
        important</span>
        <a href="http://bugs.launchpad.dev/.../+edit"
           class="yui3-editable_text-trigger sprite edit"
        ></a>
    </h1>
    <script>
    ...
    </script>

The id and title attribute to use can be passed via parameters to the
constructor:

    >>> widget = TextLineEditorWidget(
    ...     bug, 'title', canonical_url(bug.bugtasks[0], view_name='+edit'),
    ...     id="bug-title", title="Edit this summary")
    >>> print widget()
    <h1 id="bug-title">...
        ...class="yui3-editable_text-trigger sprite edit"...

The initial_value_override parameter is passed as a JSON-serialized value.

    >>> widget = TextLineEditorWidget(
    ...     bug, 'title', canonical_url(bug.bugtasks[0], view_name='+edit'),
    ...     id="bug-title", title="Edit this summary",
    ...     initial_value_override='This bug has no title')
    >>> print widget()
    <h1 id="bug-title">...
        ...initial_value_override: "This bug has no title"...

When the value isn't supplied it defaults to None, which is serialized as a
Javascript null.

    >>> widget = TextLineEditorWidget(
    ...     bug, 'title', canonical_url(bug.bugtasks[0], view_name='+edit'),
    ...     id="bug-title", title="Edit this summary")
    >>> print widget()
    <h1 id="bug-title">...
        ...initial_value_override: null...


InlineEditPickerWidget
----------------------

The InlineEditPickerWidget can be used for any interface attribute that
has a vocabulary defined for it.

    >>> from zope.component import getUtility
    >>> from lp.app.browser.lazrjs import InlineEditPickerWidget
    >>> from lp.bugs.interfaces.bugtask import IBugTask, IBugTaskSet
    >>> bugtask = getUtility(IBugTaskSet).get(2)
    >>> def create_inline_edit_picker_widget():
    ...     view = create_initialized_view(bugtask, '+index')
    ...     return InlineEditPickerWidget(
    ...         context=view.context,
    ...         interface_attribute=IBugTask['assignee'],
    ...         default_html='default-html',
    ...         header='Change assignee',
    ...         step_title='Search for people or teams',
    ...         remove_button_text='Remove Assignee',
    ...         null_display_value='Nobody')

An unauthenticated user cannot see the activator's edit button, which
is revealed by Y.lp.app.picker.addPickerPatcher.

    >>> login(ANONYMOUS)
    >>> widget = create_inline_edit_picker_widget()
    >>> print widget.can_write
    False
    >>> print widget()
    <span id="inline-picker-activator-id-...">...
    <div class="yui3-activator-message-box yui3-activator-hidden" />
    </span>

The foo.bar user can see the activator's edit button.

    >>> login('foo.bar@canonical.com')
    >>> widget = create_inline_edit_picker_widget()
    >>> print widget.can_write
    True
    >>> print widget()
    <span id="inline-picker-activator-id-...">
    ...<div class="yui3-activator-message-box yui3-activator-hidden" />
    </span>
    ...Y.lp.app.picker.addPickerPatcher(...

The json_resource_uri is the canonical_url for the object in
WebServiceClientRequests.

    >>> print widget.json_resource_uri
    "/firefox/+bug/1"
