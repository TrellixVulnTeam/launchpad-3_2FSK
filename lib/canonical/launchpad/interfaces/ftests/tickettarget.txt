ITicketTarget Interface
=======================

Launchpad includes a support request tracker. Tickets are associated to
objects implementing ITicketTarget. This file documents that interface and
canonical be used to validate implementation of this interface on a particular
object. (This object is made available through the 'target' variable which is
defined outside of this file, usually by a LaunchpadFunctionalTestCase. This
instance shouldn't have any tickets associated with it at the start of the
test.)

    >>> from zope.interface.verify import verifyObject
    >>> from canonical.launchpad.interfaces import ITicketTarget, TicketSort
    >>> from canonical.lp.dbschema import TicketStatus

    >>> verifyObject(ITicketTarget, target)
    True


newTicket()
-----------

Tickets are always owned by a registered user.

    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> sample_person = getUtility(IPersonSet).getByEmail(
    ...     'test@canonical.com')

The newTicket() method is used to create ticket that will be associated with
the target. It takes as parameters the ticket's owner, title and description.

    >>> ticket = target.newTicket(sample_person, 'New ticket',
    ...     'Ticket description')
    >>> print ticket.title
    New ticket
    >>> print ticket.description
    Ticket description
    >>> ticket.owner == sample_person
    True
    >>> ticket.status.title
    'Open'

The created ticket starts in the 'Open' status and should have the owner
subscribed to the ticket.

    >>> sample_person in [s.person for s in ticket.subscriptions]
    True

The newTicket() method takes an optional argument 'when' that can be used to
set the ticket's datecreated attribute. It defaults to the current time.

    >>> from datetime import datetime, timedelta
    >>> from pytz import UTC
    >>> now = datetime.now(UTC)

    >>> ticket.datecreated - now < timedelta(seconds=3)
    True

    >>> one_hour_before_now = now - timedelta(hours=1)
    >>> ticket = target.newTicket(sample_person, 'Ticket in the past',
    ...     'Ticket created one hour before now', when=one_hour_before_now)
    >>> ticket.datecreated == one_hour_before_now
    True


getTicket()
-----------

The getTicket() method is used to retrieve a ticket by id for a particular
target.

    >>> target.getTicket(ticket.id) == ticket
    True

If you pass in a non-existent id or a ticket for a different target, the
method must return None.

    >>> target.getTicket(2) is None
    True
    >>> target.getTicket(12345) is None
    True


Creating some additional tickets
-------------------------------

For the following methods, we will require some more tickets. Create ten
new tickets.

    >>> for num in range(10):
    ...     oddoreven = num % 2 and 'odd' or 'even'
    ...     description = ('Support request description%d.\n'
    ...         'This request index is %s.') % (num, oddoreven)
    ...     ticket = target.newTicket(sample_person,
    ...         'Ticket title%d' % num, description,
    ...         when=now+timedelta(seconds=num))


tickets()
---------

The tickets() method returns the tickets created on the target. They are
sorted from most recent to least recent.

    >>> for t in target.tickets():
    ...     print t.title
    Ticket title9
    Ticket title8
    Ticket title7
    Ticket title6
    Ticket title5
    Ticket title4
    Ticket title3
    Ticket title2
    Ticket title1
    Ticket title0
    New ticket
    Ticket in the past

You can retrieve the X most recent tickets, by passing the wanted quantity
as parameter:

    >>> for t in target.tickets(5):
    ...     print t.title
    Ticket title9
    Ticket title8
    Ticket title7
    Ticket title6
    Ticket title5


searchTickets()
---------------

The searchTickets() method is used to search for tickets using a text
query and/or a list of status.

A search without any parameters should return all tickets:

    >>> len(list(target.searchTickets(status=[])))
    12

The sort order can be controlled through the sort parameter. This should be
one of the value defined in TicketSort.

    >>> for t in target.searchTickets(search_text='odd',
    ...         sort=TicketSort.OLDER_FIRST):
    ...     print t.title
    Ticket title1
    Ticket title3
    Ticket title5
    Ticket title7
    Ticket title9

    >>> for t in target.searchTickets(search_text='even',
    ...         sort=TicketSort.NEWER_FIRST):
    ...     print t.title
    Ticket title8
    Ticket title6
    Ticket title4
    Ticket title2
    Ticket title0

Search can be limited to a few status:

    >>> for t in target.searchTickets(search_text='title4',
    ...         status=(TicketStatus.OPEN, TicketStatus.REJECTED)):
    ...     print t.title
    Ticket title4

or one:

    >>> for t in target.searchTickets(search_text='title4',
    ...         status=TicketStatus.REJECTED):
    ...     print t.title
    <BLANKLINE>

Note that implementation are free to use whatever suits them as defaults for
the status and sort parameters.


Support contacts
----------------

Target can have support contacts. The list of support contacts for a target is
available through the support_contacts attribute.

    >>> list(target.support_contacts)
    []

You add a support contact by using the addSupportContact method. This
method will return True when the contact was added the list and False when it
was already on the list:

    >>> name18 = getUtility(IPersonSet).getByName('name18')
    >>> target.addSupportContact(name18)
    True
    >>> list([p.name for p in target.support_contacts])
    [u'name18']
    >>> target.addSupportContact(name18)
    False

Support contacts are automatically subscribed to the target's new tickets.

    >>> ticket = target.newTicket(sample_person, 'Yet another ticket',
    ...     'The support contact will be subscribed to this one.')
    >>> name18 in [s.person for s in ticket.subscriptions]
    True

Support contacts can be removed by using the removeSupportContact() method.
Like its counterpart, it returns True when the support contact was removed and
False when the person wasn't on the support contact list.

    >>> target.removeSupportContact(name18)
    True
    >>> list(target.support_contacts)
    []
    >>> target.removeSupportContact(name18)
    False
