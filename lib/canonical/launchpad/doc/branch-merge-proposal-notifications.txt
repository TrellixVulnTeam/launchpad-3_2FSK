= Email Notifications for Branch Merge Proposals =

Subscribers to any of the branches involved in the merge proposal get
notifications.


== Subscription ==

When subscribers subscribe to branches, they can specify what level of
notification they would like to receive.

    >>> from canonical.launchpad.testing import LaunchpadObjectFactory
    >>> from canonical.launchpad.interfaces import (
    ...     BranchSubscriptionDiffSize, BranchSubscriptionNotificationLevel,
    ...     CodeReviewNotificationLevel)
    >>> from canonical.launchpad.tests.mail_helpers import pop_notifications
    >>> factory = LaunchpadObjectFactory()
    >>> login('test@canonical.com')
    >>> bmp = factory.makeBranchMergeProposal()
    >>> source_subscriber = factory.makePerson(
    ...     email='source@example.com', displayname='Source Subscriber')
    >>> _unused = bmp.source_branch.subscribe(source_subscriber,
    ...     BranchSubscriptionNotificationLevel.NOEMAIL,
    ...     BranchSubscriptionDiffSize.NODIFF,
    ...     CodeReviewNotificationLevel.STATUS)
    >>> target_subscriber = factory.makePerson(
    ...     email='target@example.com', displayname='Target Subscriber')
    >>> target_subscription = bmp.target_branch.subscribe(target_subscriber,
    ...     BranchSubscriptionNotificationLevel.NOEMAIL,
    ...     BranchSubscriptionDiffSize.NODIFF,
    ...     CodeReviewNotificationLevel.FULL)

The owners of the branches are subscribed when the branches are created.

    >>> source_owner = bmp.source_branch.owner
    >>> target_owner = bmp.target_branch.owner


== Notification Recipients ==

Recipients are determined using getNotificationRecipients.

    >>> recipients = bmp.getNotificationRecipients(
    ...     CodeReviewNotificationLevel.STATUS)

Subscribers to all related branches are candidates.

    >>> all_subscribers = set([
    ...     source_owner, target_owner, source_subscriber, target_subscriber])
    >>> all_subscribers == set(recipients.keys())
    True

Only subscribers whose level is >= the minimum level are selected.

    >>> full_subscribers = set([
    ...     source_owner, target_owner, target_subscriber])
    >>> recipients = bmp.getNotificationRecipients(
    ...     CodeReviewNotificationLevel.FULL)
    >>> full_subscribers == set(recipients.keys())
    True

Now we will unsubscribe the branch owners to simplify the rest of the test.

    >>> bmp.source_branch.unsubscribe(source_owner)
    >>> bmp.target_branch.unsubscribe(target_owner)
    >>> recipients = bmp.getNotificationRecipients(
    ...     CodeReviewNotificationLevel.FULL)

The value assigned to the recipient is a utility class to generate useful
values for the email headers and footers.

    >>> [reason] = recipients.values()
    >>> print reason.mail_header
    Subscriber
    >>> print reason.getReason()
    You are subscribed to branch ...


== E-mail ==

Notifications are automagically generated by creating a branch merge
proposal, and the email is sent from the registrant.

    >>> #clear any existing notifications
    >>> source_branch = bmp.source_branch
    >>> target_branch = bmp.target_branch
    >>> # Login to delete the proposal.
    >>> login('admin@canonical.com')
    >>> bmp.deleteProposal()
    >>> notifications = pop_notifications()
    >>> registrant = factory.makePerson(
    ...     displayname="Eric", email="eric@example.com")
    >>> bmp = source_branch.addLandingTarget(registrant, target_branch)
    >>> notifications = pop_notifications()

An email is sent to subscribers of either branch.

    >>> for notification in notifications:
    ...     print notification['To']
    Source Subscriber <source@example.com>
    Target Subscriber <target@example.com>

    >>> notification = notifications[0]
    >>> print notification['From']
    Eric <eric@example.com>
    >>> print notification['Subject']
    [Merge] lp://dev/~person-name... into lp://dev/~person-name...
    >>> print notification['X-Launchpad-Project']
    product-name...
    >>> print notification['X-Launchpad-Branch']
    ~person-name...
    >>> print notification['X-Launchpad-Message-Rationale']
    Subscriber
    >>> body = notification.get_payload()
    >>> print body.replace('=\n', '')
    Eric has proposed merging
    lp://dev/~person-name...into lp://dev/~person-name...
    --
    http://code.launchpad.dev/~person-name...
    You are subscribed to branch ...


If there is an initial commit message or reviewers then they are also included
in the email.

    >>> bob = factory.makePerson(
    ...     name="bob", displayname="Bob the Builder",
    ...     email="bob@example.com")
    >>> mary = factory.makePerson(
    ...     name="mary", displayname="Mary Jones",
    ...     email="mary@example.com")
    >>> reviewers = ((bob, None), (mary, 'ui'))
    >>> from textwrap import dedent
    >>> initial_comment = dedent("""\
    ...     This is the initial commit message.
    ...
    ...     It is included in the initial email sent out.
    ...     """)
    >>> bmp.deleteProposal()
    >>> bmp = source_branch.addLandingTarget(
    ...     registrant, target_branch,
    ...     initial_comment=initial_comment, review_requests=reviewers)
    >>> notifications = pop_notifications()
    >>> for notification in notifications:
    ...     print "%s, %s" % (
    ...         notification['To'],
    ...         notification['X-Launchpad-Message-Rationale'])
    Bob the Builder <bob@example.com>, Reviewer
    Mary Jones <mary@example.com>, Reviewer
    Source Subscriber <source@example.com>, Subscriber
    Target Subscriber <target@example.com>, Subscriber
    >>> notification = notifications[0]
    >>> body = notification.get_payload()
    >>> print body.replace('=\n', '')
    Eric has proposed merging
    lp://dev/~person-name...into lp://dev/~person-name...
    <BLANKLINE>
    Requested reviews:
        Bob the Builder (bob)
        Mary Jones (mary): ui
    <BLANKLINE>
    This is the initial commit message.
    <BLANKLINE>
    It is included in the initial email sent out.
    <BLANKLINE>
    --
    http://code.launchpad.dev/~...
