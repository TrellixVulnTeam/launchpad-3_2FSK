= GeoIP =

GeoIP allows us to guess the location of a user based on his IP address.
Our IGeoIP utility provides a couple methods to get location information
from a given IP address.

    >>> from canonical.launchpad.interfaces.geoip import IGeoIP
    >>> geoip = getUtility(IGeoIP)

The country_by_addr() method will return the country of the given IP
address.

    >>> geoip.country_by_addr('201.13.165.145').name
    u'Brazil'

When running tests the IP address will start with '127.', and GeoIP
would, obviously, fail to find the country for, so we use a South
African IP address in that case.

    >>> geoip.country_by_addr('127.0.0.88').name
    u'South Africa'

IGeoIP also provides a getRecordByAddress() method, wich returns a
GeoIPRecord object, containing a bunch more information about that IP's
location.

    >>> record = geoip.getRecordByAddress('201.13.165.145')
    >>> for key, value in sorted(record.items()):
    ...     print "%s: %s" % (key, value)
    area_code: ...
    city: ...
    country_code: BR
    country_code3: BRA
    country_name: Brazil
    dma_code: ...
    latitude: ...
    longitude: ...
    postal_code: ...
    region: ...
    region_name: ...
    time_zone: ...

And again we'll use a Soth African IP if the address starts with '127.'.

    >>> record = geoip.getRecordByAddress('127.0.0.1')
    >>> for key, value in sorted(record.items()):
    ...     print "%s: %s" % (key, value)
    area_code: ...
    city: ...
    country_code: ZA
    country_code3: ZAF
    country_name: South Africa
    dma_code: ...
    latitude: ...
    longitude: ...
    postal_code: ...
    region: ...
    region_name: ...
    time_zone: ...

We also have GeoIPRequest, which adapts an IBrowserRequest into an
IGeoIPRecord, providing the latitude, longitude and time zone of the
request's originating IP address.

    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest
    >>> from canonical.launchpad.interfaces.geoip import IGeoIPRecord
    >>> request = LaunchpadTestRequest()

Since our request won't have an originating IP address, we'll use that
same South African IP address.

    >>> from canonical.launchpad.components.request_country import (
    ...     ipaddress_from_request)
    >>> print ipaddress_from_request(request)
    None
    >>> geoip_request = IGeoIPRecord(request)
    >>> geoip_request.latitude
    -26...
    >>> geoip_request.longitude
    28...
    >>> geoip_request.time_zone
    'Africa/Johannesburg'

If the request had an originating IP address, though, it'd be used when
we adapted it into an IGeoIPRecord.

    >>> request = LaunchpadTestRequest(
    ...     environ={'REMOTE_ADDR': '201.13.165.145'})
    >>> geoip_request = IGeoIPRecord(request)
    >>> geoip_request.latitude
    -23...
    >>> geoip_request.longitude
    -47...
    >>> geoip_request.time_zone
    'Brazil/Acre'
