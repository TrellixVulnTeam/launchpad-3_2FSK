= Launchpad OpenID Teams Extension =

The Launchpad OpenID server implements a custom team membership
extension.  This allows a relying party to query whether the user is a
member of one or more teams.

First acquire an association handle:

    >>> from canonical.launchpad.ftests.openid import (
    ...     install_consumer, uninstall_consumer)
    >>> install_consumer()

    >>> from urllib import urlencode
    >>> args = urlencode({
    ...     'openid.mode': 'associate',
    ...     'openid.assoc_type': 'HMAC-SHA1',
    ...     })
    >>> anon_browser.open('http://openid.launchpad.dev/+openid', data=args)
    >>> import re
    >>> [assoc_handle] = re.findall('assoc_handle:(.*)', anon_browser.contents)

Now perform an OpenID authentication request, querying membership in
three teams: one that the user is a member of, one that does not exist
and one that does exist but the user is not a member of:

    >>> args = urlencode({
    ...     'openid.mode': 'checkid_setup',
    ...     'openid.assoc_handle': assoc_handle,
    ...     'openid.identity': 'http://specs.openid.net/auth/2.0/identifier_select',
    ...     'openid.return_to': 'http://launchpad.dev/+openid-consumer',
    ...     'openid.trust_root': 'http://launchpad.dev/+openid-consumer',
    ...     'openid.ns.lp': 'http://ns.launchpad.net/2007/openid-teams',
    ...     'openid.lp.query_membership':
    ...         'ubuntu-team,no-such-team,launchpad-beta-testers',
    ...     })

    >>> sabdfl_browser = setupBrowser('Basic mark@hbd.com:test')
    >>> sabdfl_browser.open('http://openid.launchpad.dev/+openid?%s' % args)
    >>> sabdfl_browser.getControl('Sign In', index=0).click()
    >>> print sabdfl_browser.url
    http://launchpad.dev/+openid-consumer?...
    >>> print sabdfl_browser.contents
    Consumer received GET
    openid.assoc_handle:...
    openid.identity:http://openid.launchpad.dev/+id/sabdfl_oid
    openid.lp.is_member:ubuntu-team
    openid.mode:id_res
    openid.op_endpoint:http://openid.launchpad.dev/+openid
    openid.response_nonce:...
    openid.return_to:http://launchpad.dev/+openid-consumer
    openid.sig:...
    openid.signed:...lp.is_member...
    <BLANKLINE>

The response reveals that the user is a member of the ubuntu-team.  As
specified, there is no difference in the response for non-existent
teams and teams that the user is not a member of.


== Cleanup ==

    >>> uninstall_consumer()
