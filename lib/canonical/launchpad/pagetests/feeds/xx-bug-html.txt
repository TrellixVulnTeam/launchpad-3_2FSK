= HTML Feeds =

HTML feeds produce snippets of html for inclusion in user's own web pages.
The content of an HTML feed is very similar to an Atom feed, but is formatted
as HTML instead of Atom.

    >>> from BeautifulSoup import BeautifulSoup
    >>> from BeautifulSoup import SoupStrainer

Define a helper function for parsing the entries:

    >>> def parse_entries(contents):
    ...     entries = [tag for tag in BeautifulSoup(browser.contents,
    ...                   parseOnlyThese=SoupStrainer('tr'))]
    ...     return entries


== Latest bugs for a product ==

This feed gets the latest bugs reported against a product. The feed includes
summary information about the bugs such as ID, title, author, and a link to
the bug itself.

    >>> browser.open('http://feeds.launchpad.dev/jokosher/latest-bugs.html?'
    ...              'show_column=bugtargetdisplayname')
    >>> browser.title
    'Bugs in Jokosher'
    >>> browser.url
    'http://feeds.launchpad.dev/jokosher/latest-bugs.html?show_column=bugtargetdisplayname'

    >>> entries = parse_entries(browser.contents)
    >>> print len(entries)
    3
    >>> entry = entries[1]
    >>> print extract_text(entry('td')[1])
    12
    >>> print entry('td')[1].a['href']
    http://bugs.launchpad.dev/jokosher/+bug/12
    >>> print extract_text(entry('td')[2])
    Copy, Cut and Delete operations should work on selections
    >>> print entry('td')[2].a['href']
    http://bugs.launchpad.dev/jokosher/+bug/12
    >>> print extract_text(entry('td')[3])
    Critical
    >>> print extract_text(entry('td')[4])
    Confirmed


== Latest bugs for a project ==

This feed gets the latest bugs for a project, and has the same type of content
as the latest bugs feed for a product.

    >>> browser.open('http://feeds.launchpad.dev/mozilla/latest-bugs.html?'
    ...              'show_column=bugtargetdisplayname')
    >>> browser.title
    'Bugs in the Mozilla Project'
    >>> browser.url
    'http://feeds.launchpad.dev/mozilla/latest-bugs.html?show_column=bugtargetdisplayname'

    >>> entries = parse_entries(browser.contents)
    >>> print len(entries)
    12

    >>> entry = entries[1]
    >>> print extract_text(entry('td')[1])
    15
    >>> print entry('td')[1].a['href']
    http://bugs.launchpad.dev/redfish/+bug/15
    >>> print extract_text(entry('td')[2])
    Nonsensical bugs are useless
    >>> print extract_text(entry('td')[3])
    Undecided
    >>> print extract_text(entry('td')[4])
    New


== Latest bugs for a person ==

This feed gets the latest bugs for a person.

    >>> browser.open('http://feeds.launchpad.dev/~name16/latest-bugs.html')
    >>> browser.title
    'Bugs for Foo Bar'
    >>> browser.url
    'http://feeds.launchpad.dev/~name16/latest-bugs.html'

    >>> entries = parse_entries(browser.contents)
    >>> print len(entries)
    13

    >>> entry = entries[1]
    >>> print extract_text(entry('td')[1])
    3
    >>> print entry('td')[1].a['href']
    http://bugs.launchpad.dev/debian/+source/mozilla-firefox/+bug/3
    >>> print extract_text(entry('td')[2])
    Bug Title Test
    >>> print entry('td')[2].a['href']
    http://bugs.launchpad.dev/debian/+source/mozilla-firefox/+bug/3
    >>> print extract_text(entry('td')[3])
    mozilla-firefox (Debian)
    >>> print extract_text(entry('td')[4])
    Unknown
    >>> print extract_text(entry('td')[5])
    New


== General bug search ==

This feed is the most useful of them all. Any bug search can be turned into
a feed.

    >>> url = ("http://feeds.launchpad.dev/bugs/+bugs.html?"
    ...        "field.searchtext=&search=Search+Bug+Reports&"
    ...        "field.scope=all&field.scope.target=")

The bug search feed is not enabled by default since it may represent a
performance problem in production.

    >>> from zope.security.interfaces import Unauthorized
    >>> from canonical.config import config
    >>> config.launchpad.is_bug_search_feed_active = False
    >>> try: 
    ...     browser.open(url)
    ... except Unauthorized, info:
    ...     print Unauthorized, info
    zope.security.interfaces.Unauthorized Bug search feed deactivated

The bug search feed can be tested after setting is_bug_search_feed_active
to True.

    >>> config.launchpad.is_bug_search_feed_active = True
    >>> browser.open(url)
    >>> config.launchpad.is_bug_search_feed_active = False
    >>> browser.title
    'Bugs from custom search'


    >>> entries = parse_entries(browser.contents)
    >>> print len(entries)
    24

    >>> entry = entries[1]
    >>> print extract_text(entry('td')[1])
    3
    >>> print entry('td')[1].a['href']
    http://bugs.launchpad.dev/debian/+source/mozilla-firefox/+bug/3
    >>> print extract_text(entry('td')[2])
    Bug Title Test
    >>> print entry('td')[2].a['href']
    http://bugs.launchpad.dev/debian/+source/mozilla-firefox/+bug/3
    >>> print extract_text(entry('td')[3])
    mozilla-firefox (Debian)
    >>> print extract_text(entry('td')[4])
    Unknown
    >>> print extract_text(entry('td')[5])
    New
