= Sending the Bug Notifications =

As explained in bugnotifications.txt, a change to a bug causes a bug
notification to be added. These notifications should be assembled into
an email notification, and sent to the appropriate people.

Before we start, let's ensure that there are no pending notifications to
be sent:

    >>> import pytz
    >>> from datetime import datetime, timedelta
    >>> now = datetime.now(pytz.timezone('UTC'))
    >>> ten_minutes_ago = now - timedelta(minutes=10)
    >>> from canonical.launchpad.interfaces import IBugNotificationSet
    >>> len(getUtility(IBugNotificationSet).getNotificationsToSend())
    0

And let's define a function to make printing out the notifications
easier.

    >>> def print_notification(email_notification):
    ...     for header in ['To', 'From', 'Subject',
    ...                    'X-Launchpad-Message-Rationale']:
    ...         print "%s: %s" % (header, email_notification[header])
    ...     print
    ...     print email_notification.get_payload(decode=True)
    ...     print "-" * 70

You'll note that we are printing out an X-Launchpad-Message-Rationale
header. This header is a simple string that allows people to filter
bugmail according to the reason they are getting emailed. For instance,
the person may want to specially filter mail for bugs which they are
assigned to.

Anyway, let's start our demonstration by adding a comment to a bug:

    >>> login('test@canonical.com')
    >>> from canonical.launchpad.interfaces import IBugSet, IMessageSet
    >>> bug_one = getUtility(IBugSet).get(1)
    >>> sample_person = getUtility(ILaunchBag).user
    >>> comment = getUtility(IMessageSet).fromText(
    ...     'subject', 'a comment.', sample_person,
    ...     datecreated=ten_minutes_ago)
    >>> bug_one.addCommentNotification(comment)

    >>> notifications = getUtility(IBugNotificationSet).getNotificationsToSend()
    >>> len(notifications)
    1

If we pass these notifications to get_email_notifications, we get a
list of emails to send:

    >>> from canonical.launchpad.scripts.bugnotification import (
    ...     get_email_notifications)
    >>> for bug_notifications, messages in get_email_notifications(notifications):
    ...     for message in messages:
    ...         print_notification(message)
    To: foo.bar@canonical.com
    From: Sample Person <test@canonical.com>
    Subject: [Bug 1] subject
    X-Launchpad-Message-Rationale: Bug Contact (mozilla-firefox in ubuntu)
    <BLANKLINE>
    a comment.
    <BLANKLINE>
    ...
    Firefox does not support SVG
    http://bugs.launchpad.dev/bugs/1
    You received this bug notification because you are a bug contact for
    mozilla-firefox in ubuntu.
    <BLANKLINE>
    ----------------------------------------------------------------------
    To: mark@hbd.com
    From: Sample Person <test@canonical.com>
    Subject: [Bug 1] subject
    X-Launchpad-Message-Rationale: Assignee
    <BLANKLINE>
    a comment.
    <BLANKLINE>
    ...
    Firefox does not support SVG
    http://bugs.launchpad.dev/bugs/1
    You received this bug notification because you are a bug assignee.
    <BLANKLINE>
    ----------------------------------------------------------------------
    To: test@canonical.com
    From: Sample Person <test@canonical.com>
    Subject: [Bug 1] subject
    X-Launchpad-Message-Rationale: Subscriber
    <BLANKLINE>
    a comment.
    <BLANKLINE>
    ...
    Firefox does not support SVG
    http://bugs.launchpad.dev/bugs/1
    You received this bug notification because you are a direct subscriber
    of the bug.
    <BLANKLINE>
    ----------------------------------------------------------------------


You can see that the message above contains the bug's initial comment's
message id as its reference, in order to make it thread properly in the
email client.

    >>> print bug_one.initial_message.rfc822msgid
    sdsdfsfd

The notification is still pending to be sent, since date_emailed is
still None:

    >>> notifications[0].date_emailed is None
    True
    >>> pending_notifications = getUtility(
    ...     IBugNotificationSet).getNotificationsToSend()
    >>> list(pending_notifications) == list(notifications)
    True

Setting date_emailed to some date causes it not to be pending anymore:

    >>> from canonical.database.sqlbase import flush_database_updates
    >>> notifications[0].date_emailed = datetime.now(pytz.timezone('UTC'))
    >>> flush_database_updates()
    >>> pending_notifications = getUtility(
    ...     IBugNotificationSet).getNotificationsToSend()
    >>> len(pending_notifications)
    0

To every message that get sent out, [Bug $bugid] is prefixed to the
subject. It gets prefixed only if it's not already present in the
subject, though, which is often the case when someone replies via email.

    >>> comment = getUtility(IMessageSet).fromText(
    ...     'Re: [Bug 1] subject', 'a new comment.', sample_person,
    ...     datecreated=ten_minutes_ago)
    >>> bug_one.addCommentNotification(comment)
    >>> pending_notifications = getUtility(
    ...     IBugNotificationSet).getNotificationsToSend()
    >>> for bug_notifications, messages in get_email_notifications(pending_notifications):
    ...     for message in messages:
    ...         print_notification(message)
    To: foo.bar@canonical.com
    From: Sample Person <test@canonical.com>
    Subject: Re: [Bug 1] subject
    X-Launchpad-Message-Rationale: Bug Contact (mozilla-firefox in ubuntu)
    <BLANKLINE>
    a new comment.
    <BLANKLINE>
    --
    Firefox does not support SVG
    http://bugs.launchpad.dev/bugs/1
    You received this bug notification because you are a bug contact for
    mozilla-firefox in ubuntu.
    <BLANKLINE>
    ----------------------------------------------------------------------
    To: mark@hbd.com
    ...
    To: test@canonical.com
    ...

    >>> for notification in pending_notifications:
    ...     notification.date_emailed = datetime.now(pytz.timezone('UTC'))
    >>> flush_database_updates()

Let's add a few changes and see how it looks like:

    >>> bug_one.addChangeNotification(
    ...     '** Summary changed to: New summary.', sample_person,
    ...     when=ten_minutes_ago)
    >>> bug_one.addChangeNotification(
    ...     '** Visibility changed to: Private.', sample_person,
    ...     when=ten_minutes_ago)
    >>> pending_notifications = getUtility(
    ...     IBugNotificationSet).getNotificationsToSend()
    >>> len(pending_notifications)
    2

    >>> for bug_notifications, messages in get_email_notifications(pending_notifications):
    ...     for message in messages:
    ...         print_notification(message)
    To: foo.bar@canonical.com
    From: Sample Person <test@canonical.com>
    Subject: [Bug 1] Re: Firefox does not support SVG
    X-Launchpad-Message-Rationale: Bug Contact (mozilla-firefox in ubuntu)
    <BLANKLINE>
    ** Summary changed to: New summary.
    <BLANKLINE>
    ** Visibility changed to: Private.
    <BLANKLINE>
    ...
    Firefox does not support SVG
    http://bugs.launchpad.dev/bugs/1
    You received this bug notification because you are a bug contact for
    mozilla-firefox in ubuntu.
    <BLANKLINE>
    ----------------------------------------------------------------------
    To: mark@hbd.com
    ...
    To: test@canonical.com
    ...

If we insert a comment and some more changes, they will be included in
the constructed email:

    >>> comment = getUtility(IMessageSet).fromText(
    ...     'subject', 'a new comment.', sample_person,
    ...     datecreated=ten_minutes_ago)
    >>> bug_one.addCommentNotification(comment)
    >>> bug_one.addChangeNotification(
    ...     '** Summary changed to: Another summary.', sample_person,
    ...     when=ten_minutes_ago)
    >>> bug_one.addChangeNotification(
    ...     '** Visibility changed to: Public.', sample_person,
    ...     when=ten_minutes_ago)
    >>> pending_notifications = getUtility(
    ...     IBugNotificationSet).getNotificationsToSend()
    >>> len(pending_notifications)
    5

Notice how the comment is in the top of the email, and the changes are
in the order they were added:

    >>> for bug_notifications, messages in get_email_notifications(pending_notifications):
    ...     for message in messages:
    ...         print_notification(message)
    To: foo.bar@canonical.com
    From: Sample Person <test@canonical.com>
    Subject: [Bug 1] Re: Firefox does not support SVG
    X-Launchpad-Message-Rationale: Bug Contact (mozilla-firefox in ubuntu)
    <BLANKLINE>
    a new comment.
    <BLANKLINE>
    ** Summary changed to: New summary.
    <BLANKLINE>
    ** Visibility changed to: Private.
    <BLANKLINE>
    ** Summary changed to: Another summary.
    <BLANKLINE>
    ** Visibility changed to: Public.
    <BLANKLINE>
    --
    Firefox does not support SVG
    http://bugs.launchpad.dev/bugs/1
    You received this bug notification because you are a bug contact for
    mozilla-firefox in ubuntu.
    ----------------------------------------------------------------------
    To: mark@hbd.com
    ...
    To: test@canonical.com
    ...

If we insert yet another comment, it will be sent as a separate email.

    >>> new_comment = getUtility(IMessageSet).fromText(
    ...     'subject', 'another comment.', sample_person,
    ...     datecreated=ten_minutes_ago)
    >>> bug_one.addCommentNotification(new_comment)
    >>> pending_notifications = getUtility(
    ...     IBugNotificationSet).getNotificationsToSend()
    >>> len(pending_notifications)
    6

    >>> for bug_notifications, messages in get_email_notifications(pending_notifications):
    ...     for message in messages:
    ...         print_notification(message)
    To: foo.bar@canonical.com
    From: Sample Person <test@canonical.com>
    Subject: [Bug 1] Re: Firefox does not support SVG
    X-Launchpad-Message-Rationale: Bug Contact (mozilla-firefox in ubuntu)
    <BLANKLINE>
    a new comment.
    <BLANKLINE>
    ** Summary changed to: New summary.
    <BLANKLINE>
    ** Visibility changed to: Private.
    <BLANKLINE>
    ** Summary changed to: Another summary.
    <BLANKLINE>
    ** Visibility changed to: Public.
    <BLANKLINE>
    --
    Firefox does not support SVG
    http://bugs.launchpad.dev/bugs/1
    You received this bug notification because you are a bug contact for
    mozilla-firefox in ubuntu.
    <BLANKLINE>
    ----------------------------------------------------------------------
    To: mark@hbd.com
    ...
    To: test@canonical.com
    ...
    To: foo.bar@canonical.com
    From: Sample Person <test@canonical.com>
    Subject: [Bug 1] subject
    X-Launchpad-Message-Rationale: Bug Contact (mozilla-firefox in ubuntu)
    <BLANKLINE>
    another comment.
    --
    Firefox does not support SVG
    http://bugs.launchpad.dev/bugs/1
    You received this bug notification because you are a bug contact for
    mozilla-firefox in ubuntu.
    ----------------------------------------------------------------------
    To: mark@hbd.com
    ...
    To: test@canonical.com
    ...

    >>> for notification in pending_notifications:
    ...     notification.date_emailed = datetime.now(pytz.timezone('UTC'))
    >>> flush_database_updates()

If we add three comments, three notifications will be sent:

    >>> new_comment = getUtility(IMessageSet).fromText(
    ...     'subject', 'a comment.', sample_person,
    ...     datecreated=ten_minutes_ago)
    >>> bug_one.addCommentNotification(new_comment)
    >>> new_comment = getUtility(IMessageSet).fromText(
    ...     'subject', 'another comment.', sample_person,
    ...     datecreated=ten_minutes_ago)
    >>> bug_one.addCommentNotification(new_comment)
    >>> new_comment = getUtility(IMessageSet).fromText(
    ...     'subject', 'yet another comment.', sample_person,
    ...     datecreated=ten_minutes_ago)
    >>> bug_one.addCommentNotification(new_comment)
    >>> pending_notifications = getUtility(
    ...     IBugNotificationSet).getNotificationsToSend()
    >>> len(pending_notifications)
    3

    >>> for bug_notifications, messages in get_email_notifications(pending_notifications):
    ...     for message in messages:
    ...         print_notification(message)
    To: foo.bar@canonical.com
    From: Sample Person <test@canonical.com>
    Subject: [Bug 1] subject
    X-Launchpad-Message-Rationale: Bug Contact (mozilla-firefox in ubuntu)
    <BLANKLINE>
    a comment.
    <BLANKLINE>
    --
    Firefox does not support SVG
    http://bugs.launchpad.dev/bugs/1
    You received this bug notification because you are a bug contact for
    mozilla-firefox in ubuntu.
    <BLANKLINE>
    ----------------------------------------------------------------------
    To: mark@hbd.com
    ...
    To: test@canonical.com
    ...
    To: foo.bar@canonical.com
    From: Sample Person <test@canonical.com>
    Subject: [Bug 1] subject
    X-Launchpad-Message-Rationale: Bug Contact (mozilla-firefox in ubuntu)
    <BLANKLINE>
    another comment.
    <BLANKLINE>
    --
    Firefox does not support SVG
    http://bugs.launchpad.dev/bugs/1
    You received this bug notification because you are a bug contact for
    mozilla-firefox in ubuntu.
    <BLANKLINE>
    ----------------------------------------------------------------------
    To: mark@hbd.com
    ...
    To: test@canonical.com
    ...
    To: foo.bar@canonical.com
    From: Sample Person <test@canonical.com>
    Subject: [Bug 1] subject
    X-Launchpad-Message-Rationale: Bug Contact (mozilla-firefox in ubuntu)
    <BLANKLINE>
    yet another comment.
    <BLANKLINE>
    --
    Firefox does not support SVG
    http://bugs.launchpad.dev/bugs/1
    You received this bug notification because you are a bug contact for
    mozilla-firefox in ubuntu.
    <BLANKLINE>
    ----------------------------------------------------------------------
    To: mark@hbd.com
    ...
    To: test@canonical.com
    ...

    >>> for notification in pending_notifications:
    ...     notification.date_emailed = datetime.now(pytz.timezone('UTC'))
    >>> flush_database_updates()

If Sample Person does a few changes, and Foo Bar steps in a does a
change in between, three notifications will be sent:

    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> foo_bar = getUtility(IPersonSet).getByEmail('foo.bar@canonical.com')
    >>> comment = getUtility(IMessageSet).fromText(
    ...     'subject', 'a comment.', sample_person,
    ...     datecreated=ten_minutes_ago)
    >>> bug_one.addCommentNotification(comment)
    >>> bug_one.addChangeNotification(
    ...     '** Summary changed to: New summary.', foo_bar,
    ...     when=ten_minutes_ago)
    >>> bug_one.addChangeNotification(
    ...     '** Visibility changed to: Private.', sample_person,
    ...     when=ten_minutes_ago)

    >>> pending_notifications = getUtility(
    ...     IBugNotificationSet).getNotificationsToSend()
    >>> len(pending_notifications)
    3

    >>> for bug_notifications, messages in get_email_notifications(pending_notifications):
    ...     for message in messages:
    ...         print_notification(message)
    To: foo.bar@canonical.com
    From: Sample Person <test@canonical.com>
    Subject: [Bug 1] subject
    X-Launchpad-Message-Rationale: Bug Contact (mozilla-firefox in ubuntu)
    <BLANKLINE>
    a comment.
    <BLANKLINE>
    --
    Firefox does not support SVG
    http://bugs.launchpad.dev/bugs/1
    You received this bug notification because you are a bug contact for
    mozilla-firefox in ubuntu.
    <BLANKLINE>
    ----------------------------------------------------------------------
    To: mark@hbd.com
    ...
    To: test@canonical.com
    ...
    <BLANKLINE>
    To: foo.bar@canonical.com
    From: Foo Bar <foo.bar@canonical.com>
    Subject: [Bug 1] Re: Firefox does not support SVG
    X-Launchpad-Message-Rationale: Bug Contact (mozilla-firefox in ubuntu)
    <BLANKLINE>
    ** Summary changed to: New summary.
    <BLANKLINE>
    --
    Firefox does not support SVG
    http://bugs.launchpad.dev/bugs/1
    You received this bug notification because you are a bug contact for
    mozilla-firefox in ubuntu.
    <BLANKLINE>
    ----------------------------------------------------------------------
    To: mark@hbd.com
    ...
    To: test@canonical.com
    ...
    To: foo.bar@canonical.com
    From: Sample Person <test@canonical.com>
    Subject: [Bug 1] Re: Firefox does not support SVG
    X-Launchpad-Message-Rationale: Bug Contact (mozilla-firefox in ubuntu)
    <BLANKLINE>
    ** Visibility changed to: Private.
    <BLANKLINE>
    --
    Firefox does not support SVG
    http://bugs.launchpad.dev/bugs/1
    You received this bug notification because you are a bug contact for
    mozilla-firefox in ubuntu.
    <BLANKLINE>
    ----------------------------------------------------------------------
    To: mark@hbd.com
    ...
    To: test@canonical.com
    ...

    >>> for notification in pending_notifications:
    ...     notification.date_emailed = datetime.now(pytz.timezone('UTC'))
    >>> flush_database_updates()

We send the notification only if the user hasn't done any other changes
for the last 5 minutes:

    >>> now = datetime.now(pytz.timezone('UTC'))
    >>> for minutes_ago in reversed(range(10)):
    ...     bug_one.addChangeNotification(
    ...         '** Visibility changed to: Private.', sample_person,
    ...         when=now - timedelta(minutes=minutes_ago))
    >>> pending_notifications = getUtility(
    ...     IBugNotificationSet).getNotificationsToSend()
    >>> len(pending_notifications)
    0

    >>> from canonical.launchpad.database import BugNotification
    >>> for notification in BugNotification.select():
    ...     notification.date_emailed = datetime.now(pytz.timezone('UTC'))
    >>> flush_database_updates()

A more complicated example, Sample Person does a change every minute,
but Foo Bar does a change in between:

    >>> now = datetime.now(pytz.timezone('UTC'))
    >>> for minutes_ago in reversed(range(10)):
    ...     if minutes_ago == 6:
    ...         bug_one.addChangeNotification(
    ...             '** Visibility changed to: Public.', foo_bar,
    ...             when=now - timedelta(minutes=minutes_ago))
    ...     bug_one.addChangeNotification(
    ...         '** Visibility changed to: Private.', sample_person,
    ...         when=now - timedelta(minutes=minutes_ago))
    >>> pending_notifications = getUtility(
    ...     IBugNotificationSet).getNotificationsToSend()
    >>> len(pending_notifications)
    4
    >>> for notification in pending_notifications:
    ...     print notification.id, notification.message.owner.displayname
    25 Sample Person
    26 Sample Person
    27 Sample Person
    28 Foo Bar

    >>> from canonical.launchpad.database import BugNotification
    >>> for notification in BugNotification.select():
    ...     notification.date_emailed = datetime.now(pytz.timezone('UTC'))
    >>> flush_database_updates()

Let's take a more complete example, where we edit different bugs as
well:

    >>> bug_two = getUtility(IBugSet).get(2)
    >>> long_comment = getUtility(IMessageSet).fromText(
    ...     'subject',
    ...     'This is a long comment, which is longer than 72 characters.'
    ...     ' This should result in the lined being wrapped, so that it'
    ...     " won't be displayed as a single long line. Let's add another"
    ...     ' sentence just to make it longer.'
    ...     '\r\n\r\n'
    ...     "Let's add another paragraph to the comment as well, separating"
    ...     " it with dos-style line endings.",
    ...     foo_bar, datecreated=now - timedelta(minutes=6))
    >>> for minutes_ago in reversed(range(10)):
    ...     if minutes_ago == 6:
    ...         bug_one.addChangeNotification(
    ...             '** Visibility changed to: Public.', foo_bar,
    ...             when=now - timedelta(minutes=minutes_ago))
    ...         bug_one.addCommentNotification(long_comment)
    ...         bug_two.addChangeNotification(
    ...             '** Visibility changed to: Public.', foo_bar,
    ...             when=now - timedelta(minutes=minutes_ago))
    ...     bug_one.addChangeNotification(
    ...         '** Visibility changed to: Private.', sample_person,
    ...         when=now - timedelta(minutes=minutes_ago))
    ...     bug_two.addChangeNotification(
    ...         '** Visibility changed to: Private.', sample_person,
    ...         when=now - timedelta(minutes=minutes_ago))
    >>> pending_notifications = getUtility(
    ...     IBugNotificationSet).getNotificationsToSend()
    >>> len(pending_notifications)
    9

    >>> for bug_notifications, messages in get_email_notifications(pending_notifications):
    ...     for message in messages:
    ...         print_notification(message)
    To: support@ubuntu.com
    From: Sample Person <test@canonical.com>
    Subject: [Bug 2] Re: Blackhole Trash folder
    X-Launchpad-Message-Rationale: Registrant (Tomcat) @ubuntu-team
    <BLANKLINE>
    ** Visibility changed to: Private.
    <BLANKLINE>
    ** Visibility changed to: Private.
    <BLANKLINE>
    ** Visibility changed to: Private.
    <BLANKLINE>
    ...
    Blackhole Trash folder
    http://bugs.launchpad.dev/bugs/2
    You received this bug notification because you are a member of Ubuntu
    Team, which is the registrant for Tomcat.
    <BLANKLINE>
    ----------------------------------------------------------------------
    To: test@canonical.com
    From: Sample Person <test@canonical.com>
    Subject: [Bug 2] Re: Blackhole Trash folder
    X-Launchpad-Message-Rationale: Assignee
    <BLANKLINE>
    ** Visibility changed to: Private.
    <BLANKLINE>
    ** Visibility changed to: Private.
    <BLANKLINE>
    ** Visibility changed to: Private.
    <BLANKLINE>
    ...
    Blackhole Trash folder
    http://bugs.launchpad.dev/bugs/2
    You received this bug notification because you are a bug assignee.
    <BLANKLINE>
    ----------------------------------------------------------------------
    To: support@ubuntu.com
    From: Foo Bar <foo.bar@canonical.com>
    Subject: [Bug 2] Re: Blackhole Trash folder
    X-Launchpad-Message-Rationale: Registrant (Tomcat) @ubuntu-team
    <BLANKLINE>
    ** Visibility changed to: Public.
    <BLANKLINE>
    ...
    Blackhole Trash folder
    http://bugs.launchpad.dev/bugs/2
    You received this bug notification because you are a member of Ubuntu
    Team, which is the registrant for Tomcat.
    <BLANKLINE>
    ----------------------------------------------------------------------
    To: test@canonical.com
    ...
    ----------------------------------------------------------------------
    To: foo.bar@canonical.com
    From: Sample Person <test@canonical.com>
    Subject: [Bug 1] Re: Firefox does not support SVG
    X-Launchpad-Message-Rationale: Bug Contact (mozilla-firefox in ubuntu)
    <BLANKLINE>
    ** Visibility changed to: Private.
    <BLANKLINE>
    ** Visibility changed to: Private.
    <BLANKLINE>
    ** Visibility changed to: Private.
    <BLANKLINE>
    ...
    Firefox does not support SVG
    http://bugs.launchpad.dev/bugs/1
    You received this bug notification because you are a bug contact for
    mozilla-firefox in ubuntu.
    <BLANKLINE>
    ----------------------------------------------------------------------
    To: mark@hbd.com
    ...
    To: test@canonical.com
    ...
    ----------------------------------------------------------------------
    To: foo.bar@canonical.com
    From: Foo Bar <foo.bar@canonical.com>
    Subject: [Bug 1] Re: Firefox does not support SVG
    X-Launchpad-Message-Rationale: Bug Contact (mozilla-firefox in ubuntu)
    <BLANKLINE>
    This is a long comment, which is longer than 72 characters.  This
    should result in the lined being wrapped, so that it won't be
    displayed as a single long line. Let's add another sentence just to
    make it longer.
    <BLANKLINE>
    Let's add another paragraph to the comment as well, separating it
    with dos-style line endings.
    <BLANKLINE>
    ** Visibility changed to: Public.
    <BLANKLINE>
    ...
    Firefox does not support SVG
    http://bugs.launchpad.dev/bugs/1
    You received this bug notification because you are a bug contact for
    mozilla-firefox in ubuntu.
    <BLANKLINE>
    ----------------------------------------------------------------------
    To: mark@hbd.com
    ...
    To: test@canonical.com
    ...
    ----------------------------------------------------------------------

There's a blank line before the signature, and the signature marker has
a trailing space.

    >>> message.get_payload(decode=True).splitlines()
    ['This is a long comment, which is longer than 72 characters. This should',
     "result in the lined being wrapped, so that it won't be displayed as a",
     "single long line. Let's add another sentence just to make it longer.",
     '',
     "Let's add another paragraph to the comment as well, separating it with",
     'dos-style line endings.',
     '',
     '** Visibility changed to: Public.',
     '',
     '-- ',
     'Firefox does not support SVG',
     'http://bugs.launchpad.dev/bugs/1',
     'You received this bug notification because you are a direct subscriber',
     'of the bug.']

    >>> for notification in BugNotification.select():
    ...     notification.date_emailed = datetime.now(pytz.timezone('UTC'))
    >>> flush_database_updates()

If a team without a contact address is subscribed to the bug, the
notification will be sent to all members individually.

    >>> shipit_admins = getUtility(IPersonSet).getByName('shipit-admins')
    >>> shipit_admins.preferredemail is None
    True
    >>> for member in shipit_admins.activemembers:
    ...     print member.preferredemail.email
    marilize@hbd.com

    >>> bug_one.subscribe(shipit_admins, shipit_admins)
    <...>

    >>> comment = getUtility(IMessageSet).fromText(
    ...     'subject', 'a comment.', sample_person,
    ...     datecreated=ten_minutes_ago)
    >>> bug_one.addCommentNotification(comment)
    >>> pending_notifications = getUtility(
    ...     IBugNotificationSet).getNotificationsToSend()
    >>> len(pending_notifications)
    1

    >>> for bug_notifications, messages in get_email_notifications(pending_notifications):
    ...     for message in messages:
    ...         print message['To']
    foo.bar@canonical.com
    marilize@hbd.com
    mark@hbd.com
    test@canonical.com

    >>> for notification in BugNotification.select():
    ...     notification.date_emailed = datetime.now(pytz.timezone('UTC'))
    >>> flush_database_updates()


== Bug Filed Notification ==

Generating notifications when a new bug is filed is just a special case
of a comment notification. If we add a comment notification for the
initial message of the bug, it will result in a bug filed notification:

    >>> from canonical.launchpad.interfaces import (
    ...     IDistributionSet, CreateBugParams)
    >>> ubuntu = getUtility(IDistributionSet).getByName('ubuntu')
    >>> description = getUtility(IMessageSet).fromText(
    ...     'subject', 'a description of the bug.', sample_person,
    ...     datecreated=ten_minutes_ago)
    >>> params = CreateBugParams(
    ...     msg=description, owner=sample_person, title='new bug')
    >>> new_bug = ubuntu.createBug(params)
    >>> new_bug.addCommentNotification(description)
    >>> description == new_bug.initial_message
    True

    >>> notifications = getUtility(IBugNotificationSet).getNotificationsToSend()
    >>> len(notifications)
    1

    >>> for bug_notifications, messages in get_email_notifications(notifications):
    ...     for message in messages:
    ...         print_notification(message)
    To: test@canonical.com
    From: Sample Person <test@canonical.com>
    Subject: [Bug ...] [NEW] new bug
    X-Launchpad-Message-Rationale: Subscriber
    <BLANKLINE>
    Public bug reported:
    <BLANKLINE>
    a description of the bug.
    <BLANKLINE>
    ** Affects: ubuntu
         Importance: Undecided
             Status: New
    <BLANKLINE>
    --
    new bug
    http://bugs.launchpad.dev/bugs/...
    You received this bug notification because you are a direct subscriber
    of the bug.
    <BLANKLINE>
    ----------------------------------------------------------------------

    >>> for notification in BugNotification.select():
    ...     notification.date_emailed = datetime.now(pytz.timezone('UTC'))
    >>> flush_database_updates()


== Duplicates ==

If the bug is a duplicate of another bug, a marker gets inserted at the
top of the email:

    >>> new_bug.duplicateof = bug_one
    >>> comment = getUtility(IMessageSet).fromText(
    ...     'subject', 'a comment.', sample_person,
    ...     datecreated=ten_minutes_ago)
    >>> new_bug.addCommentNotification(comment)
    >>> notifications = getUtility(IBugNotificationSet).getNotificationsToSend()
    >>> len(notifications)
    1

    >>> for bug_notifications, messages in get_email_notifications(notifications):
    ...     for message in messages:
    ...         print_notification(message)
    To: foo.bar@canonical.com
    From: Sample Person <test@canonical.com>
    Subject: [Bug ...] subject
    X-Launchpad-Message-Rationale: Bug Contact (mozilla-firefox in ubuntu) via Bug 1
    <BLANKLINE>
    *** This bug is a duplicate of bug 1 ***
        http://bugs.launchpad.dev/bugs/1
    <BLANKLINE>
    a comment.
    <BLANKLINE>
    --
    new bug
    http://bugs.launchpad.dev/bugs/...
    You received this bug notification because you are a bug contact for
    mozilla-firefox in ubuntu (via bug 1).
    <BLANKLINE>
    ----------------------------------------------------------------------
    To: marilize@hbd.com
    From: Sample Person <test@canonical.com>
    Subject: [Bug ...] subject
    X-Launchpad-Message-Rationale: Subscriber @shipit-admins via Bug 1
    <BLANKLINE>
    *** This bug is a duplicate of bug 1 ***
        http://bugs.launchpad.dev/bugs/1
    <BLANKLINE>
    a comment.
    <BLANKLINE>
    --
    new bug
    http://bugs.launchpad.dev/bugs/...
    You received this bug notification because you are a member of ShipIt
    Administrators, which is a direct subscriber (via bug 1).
    <BLANKLINE>
    ----------------------------------------------------------------------
    To: mark@hbd.com
    From: Sample Person <test@canonical.com>
    Subject: [Bug ...] subject
    X-Launchpad-Message-Rationale: Assignee via Bug 1
    <BLANKLINE>
    *** This bug is a duplicate of bug 1 ***
        http://bugs.launchpad.dev/bugs/1
    <BLANKLINE>
    a comment.
    <BLANKLINE>
    --
    new bug
    http://bugs.launchpad.dev/bugs/...
    You received this bug notification because you are a bug assignee (via
    bug 1).
    <BLANKLINE>
    ----------------------------------------------------------------------
    To: test@canonical.com
    From: Sample Person <test@canonical.com>
    Subject: [Bug ...] subject
    X-Launchpad-Message-Rationale: Subscriber
    <BLANKLINE>
    *** This bug is a duplicate of bug 1 ***
        http://bugs.launchpad.dev/bugs/1
    <BLANKLINE>
    a comment.
    <BLANKLINE>
    --
    new bug
    http://bugs.launchpad.dev/bugs/...
    You received this bug notification because you are a direct subscriber
    of the bug.
    <BLANKLINE>
    ----------------------------------------------------------------------


Also note that notification was sent to Mark as well, since he's a
subscriber of bug one.

    >>> for notification in BugNotification.select():
    ...     notification.date_emailed = datetime.now(pytz.timezone('UTC'))
    >>> flush_database_updates()

== The cronscript ==

There's a cronsript which does the sending of the email. Let's add a
few notifications to show that it works.

    >>> comment = getUtility(IMessageSet).fromText(
    ...     'subject', 'a comment.', sample_person,
    ...     datecreated=ten_minutes_ago)
    >>> bug_one.addCommentNotification(comment)
    >>> bug_one.addChangeNotification(
    ...     '** Summary changed to: New summary.', sample_person,
    ...     when=ten_minutes_ago)
    >>> comment = getUtility(IMessageSet).fromText(
    ...     'subject', 'another comment.', sample_person,
    ...     datecreated=ten_minutes_ago)
    >>> bug_one.addCommentNotification(comment)
    >>> bug_one.addChangeNotification(
    ...     '** Summary changed to: Old summary.', sample_person,
    ...     when=ten_minutes_ago)

    >>> bug_two = getUtility(IBugSet).get(2)
    >>> comment = getUtility(IMessageSet).fromText(
    ...     'subject', 'a comment.', sample_person,
    ...     datecreated=ten_minutes_ago)
    >>> bug_two.addCommentNotification(comment)
    >>> bug_two.addChangeNotification(
    ...     '** Summary changed to: New summary.', sample_person,
    ...     when=ten_minutes_ago)

    >>> notifications = getUtility(IBugNotificationSet).getNotificationsToSend()
    >>> len(notifications)
    6

We need to commit the transaction so that the cronscript will see the
notifications.

    >>> import transaction
    >>> transaction.commit()

Now, let's run the cronscript and look at the output. Passing -v to it
makes it write out the emails it sends.

    >>> import subprocess
    >>> process = subprocess.Popen(
    ...     'cronscripts/send-bug-notifications.py -v', shell=True,
    ...     stdin=subprocess.PIPE, stdout=subprocess.PIPE,
    ...     stderr=subprocess.PIPE)
    >>> (out, err) = process.communicate()
    >>> process.returncode
    0
    >>> print err
    INFO creating lockfile
    INFO    Notifying support@ubuntu.com about bug 2.
    ...
    From: Sample Person <test@canonical.com>
    To: support@ubuntu.com
    Reply-To: Bug 2 <2@bugs.launchpad.net>
    References: foo@example.com-332342--1231
    ...
    X-Launchpad-Message-Rationale: Registrant (Tomcat)
    ...
    INFO    Notifying test@canonical.com about bug 2.
    ...
    From: Sample Person <test@canonical.com>
    To: test@canonical.com
    Reply-To: Bug 2 <2@bugs.launchpad.net>
    ...
    a comment.
    <BLANKLINE>
    ** Summary changed to: New summary.
    ...
    INFO    Notifying foo.bar@canonical.com about bug 1.
    ...
    From: Sample Person <test@canonical.com>
    To: foo.bar@canonical.com
    Reply-To: Bug 1 <1@bugs.launchpad.net>
    ...
    a comment.
    <BLANKLINE>
    ** Summary changed to: New summary.
    ...
    INFO    Notifying marilize@hbd.com about bug 1.
    ...
    INFO    Notifying mark@hbd.com about bug 1.
    ...
    INFO    Notifying test@canonical.com about bug 1.
    ...
    INFO    Notifying foo.bar@canonical.com about bug 1.
    ...
    From: Sample Person <test@canonical.com>
    To: foo.bar@canonical.com
    Reply-To: Bug 1 <1@bugs.launchpad.net>
    ...
    another comment.
    <BLANKLINE>
    ** Summary changed to: Old summary.
    ...
    INFO    Notifying marilize@hbd.com about bug 1.
    ...
    INFO    Notifying mark@hbd.com about bug 1.
    ...
    INFO    Notifying test@canonical.com about bug 1.
    ...


    >>> for notification in BugNotification.select():
    ...     notification.date_emailed = datetime.now(pytz.timezone('UTC'))
    >>> flush_database_updates()


== The X-Launchpad-Bug header ==

When a notification is sent out about a bug, the X-Launchpad-Bug header is
filled with data about that bug:

    >>> from canonical.launchpad.interfaces import IMilestoneSet
    >>> bug_three = getUtility(IBugSet).get(3)
    >>> subscription = bug_three.subscribe(sample_person, sample_person)

    >>> comment = getUtility(IMessageSet).fromText(
    ...     'subject', 'a short comment.', sample_person,
    ...     datecreated=ten_minutes_ago)
    >>> bug_three.addCommentNotification(comment)
    >>> notifications = getUtility(
    ...     IBugNotificationSet).getNotificationsToSend()
    >>> len(notifications)
    1

If we take a closer look at a notification, we can see that
X-Launchpad-Bug headers were added:

    >>> [(bug_notifications, messages)] = get_email_notifications(
    ...     notifications)
    >>> [message] = messages
    >>> sorted(message.get_all('X-Launchpad-Bug'))
    [u'distribution=debian; distroseries=sarge;... milestone=3.1;...',
     u'distribution=debian; distroseries=woody;...',
     u'distribution=debian; sourcepackage=mozilla-firefox; component=...']

The milestone field in X-Launchpad-Bug won't be filled where no milestone is
specified:

    >>> for line in sorted(message.get_all('X-Launchpad-Bug')):
    ...     'milestone' in line
    True
    False
    False


== The X-Launchpad-Bug-Visibility header ==

When a notification is sent out about a bug, the
X-Launchpad-Bug-Visibility header is filled with data about the bug's
visibility:

    >>> message.get_all('X-Launchpad-Bug-Visibility')
    [u'private=False; security=False;']

Predictably, private bugs are sent with slightly different header
values:

    >>> bug_three.private
    False
    >>> bug_three.setPrivate(True, sample_person)
    True

    >>> email_notifications = get_email_notifications(notifications)
    >>> for bug_notifications, messages in email_notifications:
    ...     for message in messages:
    ...         message.get_all('X-Launchpad-Bug-Visibility')
    [u'private=True; security=False;']

The same is true for security related bugs:

    >>> bug_three.security_related
    False
    >>> bug_three.security_related = True

    >>> email_notifications = get_email_notifications(notifications)
    >>> for bug_notifications, messages in email_notifications:
    ...     for message in messages:
    ...         message.get_all('X-Launchpad-Bug-Visibility')
    [u'private=True; security=True;']


== Verbose bug notifications ==

It is possible for users to have all the bug notifications which they
receive include the bug description and status. This helps in those
cases where the user doesn't save bug notifications, which can make
subsequent notifications seem somewhat obscure.

We'll expire all existing notifications since we're not interested in
them:

    >>> notifications = getUtility(
    ...     IBugNotificationSet).getNotificationsToSend()
    >>> len(notifications)
    1

    >>> from canonical.launchpad.ftests import syncUpdate
    >>> for notification in notifications:
    ...     notification.date_emailed = datetime.now(pytz.timezone('UTC'))
    ...     syncUpdate(notification)


To demonstrate verbose notifications, we'll subscribe David Allouche,
who receives verbose bug notifications, to bug 15.

    >>> bug_15 = getUtility(IBugSet).get(15)
    >>> ddaa = getUtility(IPersonSet).getByName('ddaa')
    >>> ddaa.verbose_bugnotifications
    True

    >>> bug_15.subscribe(ddaa, sample_person)
    <...>

If we then add a comment to the bug, ddaa will receieve a notification
containing that comment.

    >>> comment = getUtility(IMessageSet).fromText(
    ...     'subject', 'a really simple comment.', sample_person,
    ...     datecreated=ten_minutes_ago)
    >>> bug_15.addCommentNotification(comment)

    >>> notifications = getUtility(
    ...     IBugNotificationSet).getNotificationsToSend()
    >>> len(notifications)
    1

If we pass this notifcation to get_email_notifications we can see that
ddaa will receieve a notification which contains the bug description and
its status in all of its targets. All other subscribers will receive
standard notifications that don't include the bug description. To help
with demonstrating this, we'll define a helper function.

    >>> def sort_messages_by_recipient(messages):
    ...     messages_by_recipient = {}
    ...     for message in messages:
    ...         if message['To'] in messages_by_recipient:
    ...             messages_by_recipient[message['To']].append(message)
    ...         else:
    ...             messages_by_recipient[message['To']] = [message]
    ...     return messages_by_recipient

    >>> from canonical.launchpad.scripts.bugnotification import (
    ...     get_email_notifications)
    >>> [(bug_notifications, messages)] = (
    ...     get_email_notifications(notifications))
    >>> sorted_messages = sort_messages_by_recipient(messages)

We can see that foo.bar@canonical.com doesn't receive verbose
notifications:

    >>> print_notification(sorted_messages['foo.bar@canonical.com'][0])
    To: foo.bar@canonical.com
    From: Sample Person <test@canonical.com>
    Subject: [Bug 15] subject
    X-Launchpad-Message-Rationale: Subscriber
    <BLANKLINE>
    a really simple comment.
    <BLANKLINE>
    -- 
    Nonsensical bugs are useless
    http://bugs.launchpad.dev/bugs/15
    You received this bug notification because you are a direct subscriber
    of the bug.
    <BLANKLINE>
    ---------------------------------------------------------------------- 

Whereas ddaa does:

    >>> print_notification(
    ...     sorted_messages['david.allouche@canonical.com'][0])
    To: david.allouche@canonical.com
    From: Sample Person <test@canonical.com>
    Subject: [Bug 15] subject
    X-Launchpad-Message-Rationale: Subscriber
    <BLANKLINE>
    a really simple comment.
    <BLANKLINE>
    -- 
    Nonsensical bugs are useless
    http://bugs.launchpad.dev/bugs/15
    You received this bug notification because you are a direct subscriber
    of the bug.
    <BLANKLINE>
    Status in Redfish: New
    Status in Mozilla Thunderbird: New
    <BLANKLINE>
    Bug description:
    Like this one, natch.
    <BLANKLINE>
    ---------------------------------------------------------------------- 

