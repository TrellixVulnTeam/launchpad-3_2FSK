= LAZR's field marshallers =

LAZR defines an interface for converting between the values that
come in on an HTTP request, and the object values appropriate for schema
fields. This is similar to Zope's widget interface, but much smaller.

To test the various marshallers we create a dummy request and
application root.

    >>> from canonical.launchpad.webapp.servers import WebServiceTestRequest
    >>> from canonical.launchpad.webapp.servers import WebServicePublication
    >>> request = WebServiceTestRequest(method='GET')
    >>> request.setPublication(WebServicePublication(None))
    >>> login(ANONYMOUS, request)
    >>> request.processInputs()

    >>> from canonical.launchpad.systemhomes import WebServiceApplication
    >>> root = WebServiceApplication()
    >>> from canonical.launchpad.webapp.webapp.interfaces import (
    ...     IOpenLaunchBag)
    >>> getUtility(IOpenLaunchBag).add(root)


=== Choice of SQLObjectVocabularyBase ===

For vocabularies based on SQLObjectVocabularyBase, the values are
interpreted as URLs referencing objects on the web service. If the given
string is a URL corresponding to a vocabulary item, the marshaller
returns that item. Otherwise it raises a ValueError.

    >>> from zope.component import getMultiAdapter
    >>> from zope.schema import Choice
    >>> from lazr.restful.interfaces import IFieldMarshaller
    >>> from lazr.restful import EntryResource

    # Bind the field, to resolve the vocabulary name.
    >>> field = Choice(__name__='some_person', vocabulary='ValidPersonOrTeam')
    >>> field = field.bind(None)
    >>> marshaller = getMultiAdapter((field, request), IFieldMarshaller)
    >>> verifyObject(IFieldMarshaller, marshaller)
    True

    >>> from lp.registry.interfaces.person import IPerson
    >>> person = marshaller.marshall_from_request(
    ...     "http://api.launchpad.dev/beta/~salgado")
    >>> IPerson.providedBy(person)
    True
    >>> person.name
    u'salgado'

    >>> from lp.registry.interfaces.person import IPerson
    >>> ubuntu_team = marshaller.marshall_from_json_data(
    ...     "http://api.launchpad.dev/beta/~ubuntu-team")
    >>> ubuntu_team.name
    u'ubuntu-team'

    >>> marshaller.marshall_from_request(
    ...     "http://api.launchpad.dev/beta/~nosuchperson")
    Traceback (most recent call last):
    ...
    ValueError: No such object "http://api.launchpad.dev/beta/~nosuchperson".

    >>> marshaller.marshall_from_json_data("salgado")
    Traceback (most recent call last):
    ...
    ValueError: "salgado" is not a valid URI.

Instead of unmarshall() returning the Person object (which
wouldn't look nice in a JSON representation), this marshaller returns
the URL to that object.

    >>> person_resource = EntryResource(person, request)

    >>> marshaller.unmarshall(person_resource, person)
    u'http://.../~salgado'

This marshaller also appends '_link' to the representation name of
this field, so that clients can know this is a link to another
resource and not a random string.

    >>> marshaller.representation_name
    'some_person_link'

Cleanup.

    >>> request.oopsid = None
    >>> request.publication.endRequest(request, None)
