Librarian File Upload Protocol Unit Tests
=========================================

Error conditions
----------------

Errors receive a 400 status code in the reply, and the connection will be
closed.

Unknown commands are rejected.

    >>> upload_request("FROB the chicken\n")
    reply: '400 Unknown command: FROB the chicken'
    connection closed

Incomplete STORE commands are rejected.

    >>> upload_request("STORE bad-arg!\n")
    reply: '400 STORE command expects a size and file name'
    connection closed

Invalid headers are rejected.

    >>> upload_request("""STORE 10000 foo.txt
    ... Some garbage.
    ... """)
    reply: '400 Invalid header: Some garbage.'
    connection closed

Invalid UTF-8 filenames are rejected.

    >>> upload_request("STORE 10000 \xff\n")
    reply: '400 STORE command expects the filename to be in UTF-8'
    connection closed


Uploading corner cases
----------------------

Empty files work, rather than hang the connection.

    >>> upload_request("""STORE 0 foo.txt
    ... Content-Type: text/plain
    ... File-Content-ID: 123
    ... File-Alias-ID: 456
    ...
    ... """)
    reply: '200'
    file u'foo.txt' stored as text/plain, contents: ''

Filename with spaces work.

    >>> upload_request("""STORE 14 cats and dogs.txt
    ... Content-Type: text/plain
    ... File-Content-ID: 123
    ... File-Alias-ID: 456
    ...
    ... Cats and dogs.""")
    reply: '200'
    file u'cats and dogs.txt' stored as text/plain, contents: 'Cats and dogs.'

Unicode filenames work, but must be encoded as UTF-8 on the socket.

    >>> filename = u'Yow\N{INTERROBANG}'.encode('utf-8')
    >>> upload_request("""STORE 14 %s
    ... Content-Type: text/plain
    ... File-Content-ID: 123
    ... File-Alias-ID: 456
    ...
    ... Cats and dogs.""" % filename)
    reply: '200'
    file u'Yow\u203d' stored as text/plain, contents: 'Cats and dogs.'


