The configuration defines a number of domains, one for the main Launchpad site
and one for the sites of the various applications.

    >>> from canonical.config import config
    >>> config.launchpad.vhosts.mainsite.hostname
    'launchpad.dev'
    >>> config.launchpad.vhosts.blueprints.hostname
    'blueprints.launchpad.dev'

It also says whether we use http or https (although this setting can be
overridden for the root URL of a particular host).

    >>> config.launchpad.vhosts.use_https
    False

These are parsed into webapp.vhost.allvhosts.

    >>> from canonical.launchpad.webapp.vhosts import allvhosts
    >>> allvhosts.use_https
    False
    >>> for confname, vhost in sorted(allvhosts.configs.items()):
    ...     print confname, '@', vhost.hostname
    ...     print 'rooturl:', vhost.rooturl
    ...     print 'althosts:', ', '.join(vhost.althostnames)
    ...     print '----'
    blueprints @ blueprints.launchpad.dev
    rooturl: http://blueprints.launchpad.dev/
    althosts:
    ----
    code @ code.launchpad.dev
    rooturl: http://code.launchpad.dev/
    althosts:
    ----
    mainsite @ launchpad.dev
    rooturl: http://launchpad.dev/
    althosts: localhost
    ----
    shipitedubuntu @ shipit.edubuntu.dev
    rooturl: http://shipit.edubuntu.dev/
    althosts:
    ----
    shipitkubuntu @ shipit.kubuntu.dev
    rooturl: http://shipit.kubuntu.dev/
    althosts:
    ----
    shipitubuntu @ shipit.ubuntu.dev
    rooturl: http://shipit.ubuntu.dev/
    althosts:
    ----
    xmlrpc @ xmlrpc.launchpad.dev
    rooturl: http://launchpad.dev/
    althosts:
    ----


LaunchpadRequestPublicationFactory chooses the right request and publication to
use by looking at the Host header. If we pass in the main Launchpad
site host name, MainLaunchpadPublication will be chosen.

    >>> from canonical.launchpad.webapp.servers import (
    ...     LaunchpadRequestPublicationFactory)
    >>> environment = {'HTTP_HOST': 'launchpad.dev'}
    >>> factory = LaunchpadRequestPublicationFactory()
    >>> factory.canHandle(environment)
    True

    >>> from canonical.launchpad.webapp.servers import (
    ...     MainLaunchpadPublication)
    >>> requestfactory, publicationfactory = factory()
    >>> publicationfactory is MainLaunchpadPublication
    True

The Host header can contain a port number as well. At the moment it's
ignored, so we can pass in any port and it will still work.

    >>> environment = {'HTTP_HOST': "launchpad.dev:1234"}
    >>> factory = LaunchpadRequestPublicationFactory()
    >>> factory.canHandle(environment)
    True

    >>> requestfactory, publicationfactory = factory()
    >>> publicationfactory is MainLaunchpadPublication
    True

If we pass in the Features host name, BlueprintPublication will be
chosen.

    >>> environment = {'HTTP_HOST': 'blueprints.launchpad.dev'}
    >>> factory = LaunchpadRequestPublicationFactory()
    >>> factory.canHandle(environment)
    True

    >>> from canonical.launchpad.webapp.servers import BlueprintPublication
    >>> from canonical.launchpad.webapp.servers import (
    ...     BlueprintBrowserRequest, ApplicationServerSettingRequestFactory)
    >>> requestfactory, publicationfactory = factory()
    >>> type(requestfactory) is ApplicationServerSettingRequestFactory
    True
    >>> requestfactory.requestfactory is BlueprintBrowserRequest
    True
    >>> publicationfactory is BlueprintPublication
    True

If we pass in the XMLRPC host name, the LaunchpadXMLRPCRequest will be
chosen.

    >>> environment = {'HTTP_HOST': config.launchpad.vhosts.xmlrpc.hostname}
    >>> factory = LaunchpadRequestPublicationFactory()
    >>> factory.canHandle(environment)
    True

    >>> from canonical.launchpad.webapp.servers import LaunchpadXMLRPCRequest
    >>> requestfactory, publicationfactory = factory()
    >>> publicationfactory is MainLaunchpadPublication
    True
    >>> requestfactory.requestfactory is LaunchpadXMLRPCRequest
    True

If the given host name isn't one of the configured host names,
canHandle returns False.

    >>> environment = {'HTTP_HOST': 'not-configured'}
    >>> factory = LaunchpadRequestPublicationFactory()
    >>> factory.canHandle(environment)
    False

If there is no Host header, the default publication factory will be
returned.

    >>> environment = {}
    >>> factory = LaunchpadRequestPublicationFactory()
    >>> factory.canHandle(environment)
    True

    >>> from canonical.launchpad.webapp.publication import LaunchpadBrowserPublication
    >>> requestfactory, publicationfactory = factory()
    >>> publicationfactory is LaunchpadBrowserPublication
    True

