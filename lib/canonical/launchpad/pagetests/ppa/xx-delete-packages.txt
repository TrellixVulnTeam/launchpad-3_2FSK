= PPA package deletion =

The PPA 'Delete packages' view allows users to delete packages form
their PPAs via the web UI. Only the owner of the PPA and Launchpad
administrators may access this page.

Anonymous and an ordinary user cannot access Celso's PPA package
console, even if they try the URL directly.

    >>> anon_browser.open('http://launchpad.dev/~cprov/+archive')
    >>> anon_browser.getLink('Delete packages').click()
    Traceback (most recent call last):
    ...
    LinkNotFoundError

    >>> anon_browser.open(
    ...     'http://launchpad.dev/~cprov/+archive/+delete-packages')
    Traceback (most recent call last):
    ...
    Unauthorized: ..., 'launchpad.Edit')

    >>> user_browser.open('http://launchpad.dev/~cprov/+archive')
    >>> user_browser.getLink('Delete packages').click()
    Traceback (most recent call last):
    ...
    LinkNotFoundError

    >>> user_browser.open(
    ...    'http://launchpad.dev/~cprov/+archive/+delete-packages')
    Traceback (most recent call last):
    ...
    Unauthorized: ..., 'launchpad.Edit')

Only Celso and Foo bar can access the 'Delete packages' page for
Celso's PPA.

    >>> cprov_browser = setupBrowser(
    ...     auth="Basic celso.providelo@canonical.com:cprov")
    >>> cprov_browser.open('http://launchpad.dev/~cprov/+archive')
    >>> cprov_browser.getLink('Delete packages').click()
    >>> cprov_browser.title
    'Delete packages from PPA for Celso Providelo'

    >>> admin_browser.open('http://launchpad.dev/~cprov/+archive')
    >>> admin_browser.getLink('Delete packages').click()
    >>> admin_browser.title
    'Delete packages from PPA for Celso Providelo'

Once accessed the page provides a way to search for published package
sources and optionally delete one or more matching packages via POST
form.

When the 'Delete packages' page is loaded a list of all published
sources is presented,

    >>> print_ppa_packages(admin_browser.contents)
    Source           Published   Status     Series          Section  Built
    cdrkit - 1.0     2007-07-09  Published  Breezy-autotest Editors  i386
    iceweasel - 1.0  2007-07-09  Published  Warty           Editors
    pmount - 0.1-1   2007-07-09  Published  Warty           Editors

The user can update the form to only list published sources with name
matching the given text.

    >>> admin_browser.getControl(
    ...     name='field.name_filter').value = 'nonexistentpackage'
    >>> admin_browser.getControl("Update").click()
    >>> print_ppa_packages(admin_browser.contents)
    No matching source packages for 'nonexistentpackage'.

    >>> admin_browser.getControl(
    ...     name='field.name_filter').value = 'pmount'
    >>> admin_browser.getControl("Update").click()
    >>> print_ppa_packages(admin_browser.contents)
    Source           Published   Status     Series          Section  Built
    pmount - 0.1-1   2007-07-09  Published  Warty           Editors  

Foo Bar can select one or more sources to be deleted and the
'deletion_comment' field is mandatory.

    >>> admin_browser.getControl('Deletion comment').value
    ''

    >>> admin_browser.getControl(
    ...     name='field.name_filter').value = ''
    >>> admin_browser.getControl(
    ...    name='field.selected_sources').value = ['27']
    >>> admin_browser.getControl("Request Deletion").click()
    >>> messages = get_feedback_messages(admin_browser.contents)
    >>> for msg in messages:
    ...     print msg
    There is 1 error.
    Read the page help to understand how removals work.
    Deletion comment is required.

    >>> print_ppa_packages(admin_browser.contents)
    Source           Published   Status     Series          Section  Built
    cdrkit - 1.0     2007-07-09  Published  Breezy-autotest Editors  i386
    iceweasel - 1.0  2007-07-09  Published  Warty           Editors
    pmount - 0.1-1   2007-07-09  Published  Warty           Editors

Deletion requires, at least, one selected a source, otherwise an error
is issued.

    >>> admin_browser.getControl("Deletion comment").value = "DO IT"
    >>> admin_browser.getControl("Request Deletion").click()
    >>> messages = get_feedback_messages(admin_browser.contents)
    >>> for msg in messages:
    ...     print msg
    There is 1 error.
    No sources selected.
    Read the page help to understand how removals work.

Once the deletion is successfully requested, Foo Bar sees an
informational message containing the summary of the action
performed. The results should not include the just-deleted source.

Note that we will also include a unquoted portion of text in the
deletion comment, simulating a XSS attack. The current code will
automaticaly quote the text entered by the user resulting in an
entirely readable content.

    >>> admin_browser.getControl("Update").click()
    >>> admin_browser.getControl(
    ...    name='field.selected_sources').value = ['27']
    >>> admin_browser.getControl(
    ...     "Deletion comment").value = "DO <where is my XSS ?> IT"
    >>> admin_browser.getControl("Request Deletion").click()

    >>> messages = get_feedback_messages(admin_browser.contents)
    >>> for msg in messages:
    ...     print msg
    Source and binaries deleted by Foo Bar request:
    cdrkit 1.0 in breezy-autotest
    Deletion comment: DO &lt;where is my XSS ?&gt; IT
    Read the page help to understand how removals work.

    >>> print_ppa_packages(admin_browser.contents)
    Source           Published   Status     Series          Section  Built
    iceweasel - 1.0  2007-07-09  Published  Warty           Editors
    pmount - 0.1-1   2007-07-09  Published  Warty           Editors

Here we can check for maliciously submitted forms containing
invalid data.

An already deleted source:

    >>> admin_browser.getControl(
    ...    name='field.selected_sources').value = ['27']
    Traceback (most recent call last):
    ...
    ItemNotFoundError: insufficient items with name '27'

An nonexistent source:

    >>> admin_browser.getControl(
    ...    name='field.selected_sources').value = ['100']
    Traceback (most recent call last):
    ...
    ItemNotFoundError: insufficient items with name '100'

An invalid value.

    >>> admin_browser.getControl(
    ...    name='field.selected_sources').value = ['blah']
    Traceback (most recent call last):
    ...
    ItemNotFoundError: insufficient items with name 'blah'

The deleted record is now presented accordingly in the +index page. We
will use another browser to inspect the results of our deletions.

    >>> cprov_browser.open('http://launchpad.dev/~cprov/+archive')
    >>> print_ppa_packages(cprov_browser.contents)
    Source           Published   Status     Series          Section  Built
    iceweasel - 1.0  2007-07-09  Published  Warty           Editors
    pmount - 0.1-1   2007-07-09  Published  Warty           Editors

    >>> cprov_browser.getControl(
    ...    name='field.status_filter').value = ['superseded']
    >>> cprov_browser.getControl("Search").click()
    >>> print_ppa_packages(cprov_browser.contents)
    Source           Published   Status     Series          Section  Built
    cdrkit - 1.0     2007-07-09  Deleted    Breezy-autotest Editors  i386

    >>> cprov_browser.getControl(
    ...    name='field.status_filter').value = ['any']
    >>> cprov_browser.getControl("Search").click()
    >>> print_ppa_packages(cprov_browser.contents)
    Source           Published   Status     Series          Section  Built
    cdrkit - 1.0     2007-07-09  Deleted    Breezy-autotest Editors  i386
    iceweasel - 1.0  2007-07-09  Published  Warty           Editors
    pmount - 0.1-1   2007-07-09  Published  Warty           Editors

Before deleting the remaining sources we will save a in this state for
the form re-submission tests.

    >>> re_post_browser = setupBrowser(
    ...     auth="Basic foo.bar@canonical.com:test")
    >>> re_post_browser.open('http://launchpad.dev/~cprov/+archive')
    >>> re_post_browser.getLink('Delete packages').click()

Multiple packages can be deleted in one single batch.

    >>> admin_browser.getControl("Update").click()

    >>> admin_browser.getControl(
    ...    name='field.selected_sources').value = ['28', '29']
    >>> admin_browser.getControl(
    ...    "Deletion comment").value = "DO IT AGAIN !"
    >>> admin_browser.getControl("Request Deletion").click()

    >>> messages = get_feedback_messages(admin_browser.contents)
    >>> for msg in messages:
    ...     print msg
    Source and binaries deleted by Foo Bar request:
    iceweasel 1.0 in warty
    pmount 0.1-1 in warty
    Deletion comment: DO IT AGAIN !

The page doesn't present the form anymore, since there are no sources
available for deletion.

    >>> print extract_text(find_main_content(admin_browser.contents))
    Source and binaries deleted by Foo Bar request:
    iceweasel 1.0 in warty
    pmount 0.1-1 in warty
    Deletion comment: DO IT AGAIN !
    Delete packages from PPA for Celso Providelo
    This PPA does not contain any source packages published.

All the packages were deleted via the admin_browser, now we will
re-POST the same deletion request via the browser saved in the
previous state to check if the bug 185922 is really fixed.

    >>> re_post_browser.getControl(
    ...    name='field.selected_sources').value = ['28', '29']
    >>> re_post_browser.getControl(
    ...    "Deletion comment").value = "DO IT AGAIN !"
    >>> re_post_browser.getControl("Request Deletion").click()

    >>> print extract_text(find_main_content(re_post_browser.contents))
    Delete packages from PPA for Celso Providelo
    This PPA does not contain any source packages published.
    There is 1 error.

Any user can see that all packages present in Celso's PPA are deleted.

    >>> cprov_browser.getControl(
    ...    name='field.status_filter').value = ['any']
    >>> cprov_browser.getControl("Search").click()
    >>> print_ppa_packages(cprov_browser.contents)
    Source           Published   Status     Series          Section  Built
    cdrkit - 1.0     2007-07-09  Deleted    Breezy-autotest Editors  i386
    iceweasel - 1.0  2007-07-09  Deleted    Warty           Editors
    pmount - 0.1-1   2007-07-09  Deleted    Warty           Editors

A clear message is presented for PPAs that don't contain any
published source packages.

    >>> admin_browser.open('http://launchpad.dev/~no-priv/+archive')
    >>> admin_browser.getLink('Delete packages').click()
    >>> admin_browser.title
    'Delete packages from PPA for No Privileges Person'

    >>> print extract_text(find_main_content(admin_browser.contents))
    Delete packages from PPA for No Privileges Person
    This PPA does not contain any source packages published.

== Removing source partially deleted ==

The 'delete-packages' interface should allow users to enforce removal
of packages partially removed or superseded. It happens, for instance,
when:

 1. A source got deleted before it was completely built;

 2. The new source version in the series builds a smaller set of
    binaries than the previous version.

In order to reproduce this we will use SoyuzTestPublisher to create a
SUPERSEDED source with a PUBLISHED binary in No Privileged Person's PPA.

    >>> from zope.component import getUtility

    >>> from canonical.database.constants import UTC_NOW
    >>> from canonical.launchpad.ftests import login, logout
    >>> from canonical.launchpad.interfaces import (
    ...    IDistributionSet, ILibraryFileAliasSet, IPersonSet,
    ...    PackagePublishingStatus)
    >>> from canonical.launchpad.tests.test_publishing import (
    ...     SoyuzTestPublisher)

    >>> login('foo.bar@canonical.com')

    >>> ubuntu = getUtility(IDistributionSet).getByName('ubuntu')
    >>> hoary = ubuntu.getSeries('hoary')

    >>> fake_chroot = getUtility(ILibraryFileAliasSet)[1]
    >>> trash = hoary["i386"].addOrUpdateChroot(fake_chroot)

    >>> test_publisher = SoyuzTestPublisher()

    >>> no_priv = getUtility(IPersonSet).getByName('no-priv')
    >>> name16 = getUtility(IPersonSet).getByName('name16')
    >>> test_publisher.person = name16

    >>> foo_pub_src = test_publisher.getPubSource(
    ...     version="1.0", architecturehintlist='i386',
    ...     distroseries=hoary, archive=no_priv.archive,
    ...     status=PackagePublishingStatus.SUPERSEDED)
    >>> foo_pub_src.secure_record.datesuperseded = UTC_NOW
    >>> foo_pub_src.secure_record.datemadepending = UTC_NOW

    >>> foo_pub_binaries = test_publisher.getPubBinaries(
    ...     distroseries=hoary, pub_source=foo_pub_src,
    ...     status=PackagePublishingStatus.PUBLISHED)

    >>> logout()
    >>> import transaction
    >>> transaction.commit()

The SUPERSEDED source we have just added is listed in the PPA
overview page.

    >>> user_browser.open('http://launchpad.dev/~no-priv/+archive')
    >>> user_browser.getControl(
    ...    name='field.status_filter').value = ['superseded']
    >>> user_browser.getControl("Search").click()
    >>> print_ppa_packages(user_browser.contents)
    Source           Published   Status     Series          Section  Built
    foo - 1.0                    Superseded Hoary           Base     i386

We don't show the publishing details for binary packages, but the
presence of 'Built Packages' and the binary filename in the 'Files'
section indicates to the user that it is still published.

    >>> details_section_id = 'pub%d' % foo_pub_src.id
    >>> details_section = find_tag_by_id(
    ...     user_browser.contents, details_section_id)
    >>> print extract_text(details_section)
    Publishing details
    Changelog
    Builds
      i386
    Built Packages
      foo-bin Foo app is great
    Download files from Librarian
      foo-bin_i386.deb (18 bytes)
      foo.dsc (28 bytes)

Even if the source added is recorded as SUPERSEDED, it is still
available for deletion because it contains a PUBLISHED binary.

    >>> user_browser.getLink('Delete packages').click()
    >>> user_browser.title
    'Delete packages from PPA for No Privileges Person'

    >>> print_ppa_packages(user_browser.contents)
    Source           Published   Status     Series          Section  Built
    foo - 1.0                    Superseded Hoary           Base     i386

    >>> details_section = find_tag_by_id(
    ...     user_browser.contents, details_section_id)
    >>> print extract_text(details_section)
    Publishing details
    Changelog
    Builds
      i386
    Built Packages
      foo-bin Foo app is great
    Download files from Librarian
      foo-bin_i386.deb (18 bytes)
      foo.dsc (28 bytes)

Although the list of 'deletable' sources can be filtered by
status. The default filter is 'Any Status', but the user can modify it
anytime.

    >>> print user_browser.getControl(name='field.status_filter').value
    ['any']

When the user selects 'Published' filter and update the results, no
records are presented.

    >>> user_browser.getControl(
    ...     name='field.status_filter').value = ['published']
    >>> user_browser.getControl("Update").click()
    >>> print_ppa_packages(user_browser.contents)
    No matching source packages for ''.

When he selects 'Superseded' the SUPERSEDED source shows up again.

    >>> user_browser.getControl(
    ...     name='field.status_filter').value = ['superseded']
    >>> user_browser.getControl("Update").click()
    >>> print_ppa_packages(user_browser.contents)
    Source           Published   Status     Series          Section  Built
    foo - 1.0                    Superseded Hoary           Base     i386

The deletion works exactly as it does for PUBLISHED sources, both,
source and binaries are marked as DELETED and the corresponding
'datesuperseded' as set to 'now'.

    >>> user_browser.getControl(
    ...    name='field.selected_sources').value = [str(foo_pub_src.id)]
    >>> user_browser.getControl(
    ...    "Deletion comment").value = "Go foo, go ..."
    >>> user_browser.getControl("Request Deletion").click()

    >>> messages = get_feedback_messages(user_browser.contents)
    >>> for msg in messages:
    ...     print msg
    Source and binaries deleted by No Privileges Person request:
    foo 1.0 in hoary
    Deletion comment: Go foo, go ...

After the deletion, any user accessing No-privileges' PPA page can see
a row representing 'foo' and it is marked as 'superseded'. In its
corresponding expandable area, he can see that the 'Built Packages'
section is omitted, however the source and binary files can be
downloaded from librarian.

    >>> user_browser.open('http://launchpad.dev/~no-priv/+archive')
    >>> user_browser.getControl(
    ...    name='field.status_filter').value = ['superseded']
    >>> user_browser.getControl("Search").click()
    >>> print_ppa_packages(user_browser.contents)
    Source           Published   Status     Series          Section  Built
    foo - 1.0                    Deleted    Hoary           Base     i386

    >>> details_section = find_tag_by_id(
    ...     user_browser.contents, details_section_id)
    >>> print extract_text(details_section)
    Publishing details
    Deleted ... ago by No Privileges Person (Go foo, go ...)
    Changelog
    Builds
      i386
    Download files from Librarian
      foo-bin_i386.deb (18 bytes)
      foo.dsc (28 bytes)

Once a deleted package gets removed from disk we render a message in
the "Publishing Status" section pointing to the users that even if the
package files were removed from the archive disk, it is still possible
to download them directly from librarian and the links are below.

Remove the just deleted publication from disk setting its
'dateremoved' attribute.

    >>> login('foo.bar@canonical.com')
    >>> no_priv = getUtility(IPersonSet).getByName('no-priv')
    >>> deleted_pub = no_priv.archive.getPublishedSources(
    ...     status=PackagePublishingStatus.DELETED)[0]
    >>> deleted_pub.secure_record.dateremoved = deleted_pub.datecreated
    >>> logout()

    >>> from canonical.database.sqlbase import flush_database_updates
    >>> flush_database_updates()

Now, not only the 'Removed from disk' notice is rendered inside the
expandable area, but also the message mentioned pointing to the file
links at the end of the section.

    >>> user_browser.getControl(
    ...    name='field.status_filter').value = ['superseded']
    >>> user_browser.getControl("Search").click()
    >>> details_section = find_tag_by_id(
    ...     user_browser.contents, details_section_id)

    >>> print extract_text(details_section)
    Publishing details
    Removed from disk ... ago.
    Deleted ... ago by No Privileges Person (Go foo, go ...)
    Removed files can still be downloaded from the Librarian; see below.
    Changelog
    Builds
      i386
    Download files from Librarian
      foo-bin_i386.deb (18 bytes)
      foo.dsc (28 bytes)
