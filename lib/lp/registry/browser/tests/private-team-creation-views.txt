= Private Team Creation =

Private teams may only be created by commercial admins
(launchpad.Commercial permission).  This permission is controlled in
the UI by only displaying the 'visibility' control to commercial
admins.

Unprivileged users do not see the visibility widget.

    >>> from lp.registry.interfaces.person import IPersonSet
    >>> personset = getUtility(IPersonSet)
    >>> nopriv = personset.getByEmail('no-priv@canonical.com')
    >>> login('no-priv@canonical.com')

    >>> view = create_initialized_view(
    ...     personset, '+newteam',
    ...     form={}, principal=nopriv)
    >>> 'visibility' in [field.__name__ for field in view.form_fields]
    False

Members of the commercial team who are not admins do see the
visibility widget.

    >>> login('commercial-member@canonical.com')
    >>> commercial_member = (
    ...     personset.getByEmail('commercial-member@canonical.com'))
    >>> view = create_initialized_view(
    ...     personset, '+newteam',
    ...     form={}, principal=commercial_member)
    >>> 'visibility' in [field.__name__ for field in view.form_fields]
    True

And real admins see the visibility widget too.

    >>> login('foo.bar@canonical.com')
    >>> foo_bar = personset.getByEmail('foo.bar@canonical.com')
    >>> view = create_initialized_view(
    ...     personset, '+newteam',
    ...     form={}, principal=foo_bar)
    >>> 'visibility' in [field.__name__ for field in view.form_fields]
    True

When creating a private membership team, the team subscription policy
must be 'Restricted.'

    >>> login('foo.bar@canonical.com')
    >>> foo_bar = personset.getByEmail('foo.bar@canonical.com')
    >>> form = {
    ...     'field.name': 'super-secret',
    ...     'field.displayname': 'Shhhh',
    ...     'field.description': 'my own team description',
    ...     'field.defaultmembershipperiod': '365',
    ...     'field.defaultrenewalperiod': '365',
    ...     'field.subscriptionpolicy': 'OPEN',
    ...     'field.renewal_policy': 'NONE',
    ...     'field.visibility': 'Private Membership',
    ...     'field.actions.create': 'Create',
    ...     }
    >>> view = create_initialized_view(
    ...     personset, '+newteam',
    ...     form=form, principal=foo_bar)

    >>> print len(view.request.notifications)
    0

    >>> for error in view.errors:
    ...     print error
    Private teams must have a Restricted subscription policy.

Commercial admins can create a team too.

    >>> login('commercial-member@canonical.com')
    >>> form = {
    ...     'field.name': 'secret-team',
    ...     'field.displayname': 'Shhhh',
    ...     'field.description': 'my own team description',
    ...     'field.defaultmembershipperiod': '365',
    ...     'field.defaultrenewalperiod': '365',
    ...     'field.subscriptionpolicy': 'RESTRICTED',
    ...     'field.renewal_policy': 'NONE',
    ...     'field.visibility': 'Private Membership',
    ...     'field.actions.create': 'Create',
    ...     }
    >>> view = create_initialized_view(
    ...     personset, '+newteam',
    ...     form=form, principal=commercial_member)

    >>> print len(view.request.notifications)
    0

    >>> print len(view.errors)
    0

    >>> import transaction
    >>> transaction.commit()
    >>> secret_team = personset.getByName('secret-team')
    >>> print secret_team.visibility.name
    PRIVATE_MEMBERSHIP

Admins can successfully create a private team.

    >>> login('foo.bar@canonical.com')
    >>> form = {
    ...     'field.name': 'super-secret',
    ...     'field.displayname': 'Shhhh',
    ...     'field.description': 'my own team description',
    ...     'field.defaultmembershipperiod': '365',
    ...     'field.defaultrenewalperiod': '365',
    ...     'field.subscriptionpolicy': 'RESTRICTED',
    ...     'field.renewal_policy': 'NONE',
    ...     'field.visibility': 'Private Membership',
    ...     'field.actions.create': 'Create',
    ...     }
    >>> view = create_initialized_view(
    ...     personset, '+newteam',
    ...     form=form, principal=foo_bar)

    >>> print len(view.request.notifications)
    0

    >>> print len(view.errors)
    0

    >>> import transaction
    >>> transaction.commit()
    >>> super_secret = personset.getByName('super-secret')
    >>> print super_secret.visibility.name
    PRIVATE_MEMBERSHIP


Admins who attempt to create a new team with the name of an existing
team get the normal error message.

    >>> login('foo.bar@canonical.com')
    >>> form = {
    ...     'field.name': 'super-secret',
    ...     'field.displayname': 'Shhhh',
    ...     'field.description': 'my own team description',
    ...     'field.defaultmembershipperiod': '365',
    ...     'field.defaultrenewalperiod': '365',
    ...     'field.subscriptionpolicy': 'RESTRICTED',
    ...     'field.renewal_policy': 'NONE',
    ...     'field.visibility': 'Private Membership',
    ...     'field.actions.create': 'Create',
    ...     }
    >>> view = create_initialized_view(
    ...     personset, '+newteam',
    ...     form=form, principal=foo_bar)

    >>> print len(view.request.notifications)
    0

    >>> for error in view.errors:
    ...     print view.getFieldError(error.field_name)
    super-secret is already in use by another person or team.

Regular users who try to create a team with a name that is already
taken by a private team get the blacklist message.

    >>> login('no-priv@canonical.com')
    >>> form = {
    ...     'field.name': 'super-secret',
    ...     'field.displayname': 'Shhhh',
    ...     'field.description': 'my own team description',
    ...     'field.defaultmembershipperiod': '365',
    ...     'field.defaultrenewalperiod': '365',
    ...     'field.subscriptionpolicy': 'RESTRICTED',
    ...     'field.renewal_policy': 'NONE',
    ...     'field.actions.create': 'Create',
    ...     }
    >>> view = create_initialized_view(
    ...     personset, '+newteam',
    ...     form=form, principal=nopriv)

    >>> print len(view.request.notifications)
    0

    >>> for error in view.errors:
    ...     print view.getFieldError(error.field_name)
    The name 'super-secret' has been blocked by the Launchpad administrators.

= Private Team Editing =

The same as when creating a new team, only commercial admins are given
the option of changing a team's visibility.

    >>> launchpad = personset.getByName('launchpad')
    >>> view = create_initialized_view(
    ...     launchpad, '+edit',
    ...     form={}, principal=nopriv)
    >>> 'visibility' in [field.__name__ for field in view.form_fields]
    False

    >>> login('foo.bar@canonical.com')
    >>> foo_bar = personset.getByEmail('foo.bar@canonical.com')
    >>> view = create_initialized_view(
    ...     launchpad, '+edit',
    ...     form={}, principal=foo_bar)
    >>> 'visibility' in [field.__name__ for field in view.form_fields]
    True

And a non-public team must have restricted membership.

    >>> login('foo.bar@canonical.com')
    >>> foo_bar = personset.getByEmail('foo.bar@canonical.com')

    >>> form = {
    ...     'field.name': 'super-secret',
    ...     'field.displayname': 'Shhhh',
    ...     'field.description': 'my own team description',
    ...     'field.defaultmembershipperiod': '365',
    ...     'field.defaultrenewalperiod': '365',
    ...     'field.subscriptionpolicy': 'OPEN',
    ...     'field.renewal_policy': 'NONE',
    ...     'field.visibility': 'Private Membership',
    ...     'field.actions.save': 'Save',
    ...     }
    >>> view = create_initialized_view(
    ...     super_secret, '+edit',
    ...     form=form, principal=foo_bar)

    >>> print len(view.request.notifications)
    0

    >>> for error in view.errors:
    ...     print error
    Private teams must have a Restricted subscription policy.

= Use of 'private-' prefix =

Commercial admins can create private projects with the 'private-' prefix.

    >>> login('foo.bar@canonical.com')
    >>> form = {
    ...     'field.name': 'private-super-secret',
    ...     'field.displayname': 'Shhhh',
    ...     'field.description': 'my own team description',
    ...     'field.defaultmembershipperiod': '365',
    ...     'field.defaultrenewalperiod': '365',
    ...     'field.subscriptionpolicy': 'RESTRICTED',
    ...     'field.renewal_policy': 'NONE',
    ...     'field.visibility': 'Private Membership',
    ...     'field.actions.create': 'Create',
    ...     }
    >>> view = create_initialized_view(
    ...     personset, '+newteam',
    ...     form=form, principal=foo_bar)

    >>> print len(view.request.notifications)
    0
    >>> print len(view.errors)
    0

When trying to register a project with a 'private-' prefix, regular
users will get a blacklist message.

    >>> login('no-priv@canonical.com')
    >>> form = {
    ...     'field.name': 'private-top-secret',
    ...     'field.displayname': 'Shhhh',
    ...     'field.description': 'my own team description',
    ...     'field.defaultmembershipperiod': '365',
    ...     'field.defaultrenewalperiod': '365',
    ...     'field.subscriptionpolicy': 'RESTRICTED',
    ...     'field.renewal_policy': 'NONE',
    ...     'field.visibility': 'Private Membership',
    ...     'field.actions.create': 'Create',
    ...     }
    >>> view = create_initialized_view(
    ...     personset, '+newteam',
    ...     form=form, principal=nopriv)

    >>> print len(view.request.notifications)
    0

    >>> for error in view.errors:
    ...     print view.getFieldError(error.field_name)
    The name 'private-top-secret' has been blocked by the Launchpad administrators.
