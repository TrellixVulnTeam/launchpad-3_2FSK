= URL support in Launchpad =

== The Url class ==

    >>> from canonical.launchpad.webapp.url import Url
    >>> url1 = Url('http://localhost/foo/bar?123')
    >>> url2 = Url('http://localhost/foo/bar/baz')
    >>> url2.is_inside(url1)
    True

These next two are equivalent, so the answer should be True, even through
the "outside" one is shorter than the "inside" one.

    >>> url1 = Url('http://localhost/foo/bar/')
    >>> url2 = Url('http://localhost/foo/bar')
    >>> url2.is_inside(url1)
    True

The next two are exactly the same.  We consider a url to be inside itself.

    >>> url1 = Url('http://localhost/foo/bar/')
    >>> url2 = Url('http://localhost/foo/bar/')
    >>> url2.is_inside(url1)
    True

In the next case, the string of url2 starts with the string of url1.  But,
because url2 continues within the same path step, url2 is not inside url1.

    >>> url1 = Url('http://localhost/foo/ba')
    >>> url2 = Url('http://localhost/foo/bar')
    >>> url2.is_inside(url1)
    False

Here, url2 is url1 plus an extra path step.  So, url2 is inside url1.

    >>> url1 = Url('http://localhost/foo/bar/')
    >>> url2 = Url('http://localhost/foo/bar/baz')
    >>> url2.is_inside(url1)
    True

We also test the basic parsing functionality.

    >>> url = Url('https://fish.tree:8666/blee/blah')
    >>> url.addressingscheme
    'https'
    >>> url.hostname
    'fish.tree'
    >>> url.port
    8666
    >>> url.networklocation
    'fish.tree:8666'
    >>> url.protohost
    'https://fish.tree:8666'

    >>> url = Url('https://localhost/blee/blah')
    >>> url.addressingscheme
    'https'
    >>> url.hostname
    'localhost'
    >>> url.port is None
    True
    >>> url.networklocation
    'localhost'
    >>> url.protohost
    'https://localhost'

