= Archives =

For archives we publish a subset of their attributes.
This works for PPAs:

    >>> archive = webservice.get("/~cprov/+archive").jsonBody()
    >>> print archive['self_link']
    http://.../~cprov/+archive

    >>> ppa = webservice.get(archive['self_link']).jsonBody()
    >>> for key, value in sorted(ppa.items()):
    ...     print "%s: %s" % (key, value)
    description: packages to help my friends.
    distribution_link: http://.../ubuntu
    name: default
    owner_link: http://.../~cprov
    resource_type_link: http://.../#archive
    self_link: http://.../~cprov/+archive

    >>> main = webservice.get("/ubuntu/+archive/primary").jsonBody()
    >>> print main['self_link']
    http://.../ubuntu/+archive/primary

And also for distribution archives; we can get a list of all archives
for a distribution:

    >>> distros = webservice.get("/distros").jsonBody()
    >>> for entry in distros['entries']:
    ...    print entry['self_link']
    http://.../ubuntu
    http://.../kubuntu
    http://.../ubuntutest
    http://.../debian
    http://.../gentoo

Look at ubuntutest's archives:

    >>> distro = distros['entries'][2]
    >>> ubuntu = webservice.get(distro['self_link']).jsonBody()
    >>> print ubuntu['archives_collection_link']
    http://.../ubuntutest/archives

Each distribution also has a main_archive:

    >>> print ubuntu['main_archive_link']
    http://.../ubuntutest/+archive/primary

And it has the following attributes:

    >>> main_archive = webservice.get(ubuntu['main_archive_link']).jsonBody()
    >>> for key, value in sorted(main_archive.items()):
    ...     print "%s: %s" % (key, value)
    description: None
    distribution_link: http://.../ubuntutest
    name: primary
    owner_link: http://.../~ubuntu-team
    resource_type_link: http://.../#archive
    self_link: http://.../ubuntutest/+archive/primary

And also a collection of all its archives:

    >>> archives = webservice.get(
    ...     ubuntu['archives_collection_link']).jsonBody()
    >>> for entry in archives['entries']:
    ...     print entry['self_link']
    http://api.launchpad.dev/beta/ubuntutest/+archive/primary
    http://api.launchpad.dev/beta/ubuntutest/+archive/partner

Attempting to grab a non-existent archive will result in an error:

    >>> bogus_archive = "ubuntutest/+archive/bogus"
    >>> webservice.get(bogus_archive).jsonBody()
    Traceback (most recent call last):
    ...
    ValueError: HTTP/1.1 404 Not Found
    ...
