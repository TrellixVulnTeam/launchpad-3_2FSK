= Builder Actions =

All builder actions require authorization, some launchpad.Edit, some
launchpad.Admin, both are only granted to members of
'launchpad-buildd-admins' team and launchpad administrators.

    >>> cprov_browser = setupBrowser(
    ...     auth='Basic celso.providelo@canonical.com:cprov')

Starting on 'Build Farm' page the administrator can browse all the
active builders

    >>> def print_build_rows(contents):
    ...     builder_rows = find_tags_by_class(contents, 'builder-row')
    ...     for row in builder_rows:
    ...         print str(extract_text(row))

    >>> cprov_browser.open('http://launchpad.dev/+builds')
    >>> print_build_rows(cprov_browser.contents)
    Builder        Architecture Owner                   Status
    bob Automatic  386          Launchpad Buildd Admins Not available
    frog Automatic 386 Virtual  Launchpad Buildd Admins Not available

Already in the builder page the available actions are presented in the
'Actions' portlet.

    >>> cprov_browser.getLink('bob').click()
    >>> print str(extract_text(find_portlet(cprov_browser.contents, "Actions")))
    Actions
    Administer builder
    Cancel current job
    Change details
    Change mode
    Show build history

Via the 'edit' form the user can modify the location and the visible
details of the builder

    >>> cprov_browser.getLink('Change details').click()
    >>> cprov_browser.getControl(name="field.name").value
    'bob'
    >>> cprov_browser.getControl(name="field.title").value
    'Bob The Builder'
    >>> cprov_browser.getControl(name="field.description").value
    'The default build-slave'
    >>> cprov_browser.getControl(name="field.processor").value
    ['386']
    >>> cprov_browser.getControl(name="field.owner").value
    'launchpad-buildd-admins'

The 'manual' field isn't available in +edit, because it can be
modified separately via its own form, 'Change mode' (see below).

    >>> cprov_browser.getControl(name="field.manual")
    Traceback (most recent call last):
    ...
    LookupError: name 'field.manual'

The same happens to the fields 'vm_host', 'builderok', 'failnotes' and
'active' which are only available via 'Administer builder' form (see
below).

    >>> cprov_browser.getControl(name="field.vm_host")
    Traceback (most recent call last):
    ...
    LookupError: name 'field.vm_host'

    >>> cprov_browser.getControl(name="field.builderok")
    Traceback (most recent call last):
    ...
    LookupError: name 'field.builderok'

    >>> cprov_browser.getControl(name="field.failnotes")
    Traceback (most recent call last):
    ...
    LookupError: name 'field.failnotes'

    >>> cprov_browser.getControl(name="field.active")
    Traceback (most recent call last):
    ...
    LookupError: name 'field.active'

Any change should take effect immediately:

    >>> print str(cprov_browser.title)
    Edit build machine Bob The Builder

    >>> title = cprov_browser.getControl(name="field.title")
    >>> original_title = title.value
    >>> title.value = 'Donkey builder'
    >>> cprov_browser.getControl("Change").click()

    >>> cprov_browser.getLink("Bob The Builder").click()
    >>> print cprov_browser.title
    Build machine Donkey builder

Restore the original title.

    >>> cprov_browser.getLink('Change details').click()
    >>> cprov_browser.getControl(
    ...     name="field.title").value = original_title
    >>> cprov_browser.getControl("Change").click()
    >>> cprov_browser.getLink("Donkey builder").click()

It's provided a form to modify only the builder operational mode,
either Automatic or Manual. In the future it might not require such
high permissions.

    >>> details_portlet = find_portlet(
    ...     cprov_browser.contents, "Bob The Builder details")
    >>> print str(extract_text(details_portlet))
    Bob The Builder details
    Name: Bob The Builder
    Architecture: Intel 386
    Location: http://localhost:8221/
    Trusted: True
    Description
    The default build-slave
    Status
    NOT OK : None (AUTO)
    Owner
    Launchpad Buildd Admins

    >>> cprov_browser.getLink("Change mode").click()
    >>> cprov_browser.getControl(name="field.manual").value = True
    >>> cprov_browser.getControl("Change").click()

    >>> details_portlet = find_portlet(
    ...     cprov_browser.contents, "Bob The Builder details")
    >>> print str(extract_text(details_portlet))
    Bob The Builder details
    Name: Bob The Builder
    Architecture: Intel 386
    Location: http://localhost:8221/
    Trusted: True
    Description
    The default build-slave
    Status
    NOT OK : None (MANUAL)
    Owner
    Launchpad Buildd Admins

Via the 'administration' form the user not only has access to all fields
available in 'edit' form but also can modify 'builderok',
'failure_notes', 'trusted' and 'virtual machine' fields. All the
consequences of those modification are covered in
buildd-admin documentation.

The simplest and most effective thing a administrator can do in this
case is to bring the builder back to work.

    >>> cprov_browser.getLink("Administer builder").click()
    >>> cprov_browser.getControl(name="field.builderok").value = True
    >>> cprov_browser.getControl(name="field.manual").value = False
    >>> cprov_browser.getControl("Change").click()

    >>> details_portlet = find_portlet(
    ...     cprov_browser.contents, "Bob The Builder details")
    >>> print str(extract_text(details_portlet))
    Bob The Builder details
    Name: Bob The Builder
    Architecture: Intel 386
    Location: http://localhost:8221/
    Trusted: True
    Description
    The default build-slave
    Status
    BUILDING i386 build of mozilla-firefox 0.9 in ubuntu hoary RELEASE (AUTO)
    Owner
    Launchpad Buildd Admins

Canceling the current job of a builder is currently not implemented,
however we have a placeholder page in place.

    >>> cprov_browser.getLink("Cancel current job").click()
    >>> print extract_text(find_main_content(cprov_browser.contents))
    Cancel job
    Bob The Builder is processing:
    Build of                         Queued     Started    Time spent so far
    i386 build of mozilla-firefox... 2005-09-30 2005-06-15 ... weeks
    Are you sure ?

    >>> cprov_browser.getControl("Cancel job").click()
    >>> messages = get_feedback_messages(cprov_browser.contents)
    >>> for msg in messages:
    ...     print str(msg)
    Cancel (1). Not implemented yet.


== Marking a builder as inactive ==

The builder administrators can hide a builder from the public list
when they judge it convenient, for instance, when the builder present
transient failure or is used for another purpose.

    >>> cprov_browser.open('http://launchpad.dev/+builds')
    >>> cprov_browser.getLink('bob').click()
    >>> print cprov_browser.title
    Build machine Bob The Builder

Active bit can be toggled in the builder administration form:

    >>> cprov_browser.getLink('Administer builder').click()
    >>> active = cprov_browser.getControl(name="field.active")
    >>> active.value
    True

    >>> active.value = False
    >>> cprov_browser.getControl("Change").click()

Once deactivated the builder is not be presented in the public Build
Farm list.

    >>> cprov_browser.getLink("Build Farm").click()

    >>> print_build_rows(cprov_browser.contents)
    Builder        Architecture Owner                   Status
    frog Automatic 386 Virtual  Launchpad Buildd Admins Not available

    >>> cprov_browser.getLink('bob').click()
    Traceback (most recent call last):
    ...
    LinkNotFoundError

Although, the deactivated builder still accessible via direct URL.

    >>> cprov_browser.open('http://launchpad.dev/+builds/bob')
    >>> print cprov_browser.title
    Build machine Bob The Builder


== Actions permissions ==

Check if the access to builder actions is forbidden to normal users:

    >>> user_browser.open("http://localhost/+builds/bob")
    >>> print extract_text(find_portlet(user_browser.contents, "Actions"))
    Actions
    Administer builder (disabled)
    Cancel current job (disabled)
    Change details (disabled)
    Change mode (disabled)
    Show build history

    >>> user_browser.open("http://localhost/+builds/bob/+edit")
    Traceback (most recent call last):
    ...
    Unauthorized:...

    >>> user_browser.open("http://localhost/+builds/bob/+mode")
    Traceback (most recent call last):
    ...
    Unauthorized:...

    >>> user_browser.open("http://localhost/+builds/bob/+cancel")
    Traceback (most recent call last):
    ...
    Unauthorized:...

    >>> user_browser.open("http://localhost/+builds/bob/+admin")
    Traceback (most recent call last):
    ...
    Unauthorized:...

and Unauthorized for anonymous access:

    >>> anon_browser.open("http://localhost/+builds/bob")
    >>> print extract_text(find_portlet(anon_browser.contents, "Actions"))
    Actions
    Administer builder (disabled)
    Cancel current job (disabled)
    Change details (disabled)
    Change mode (disabled)
    Show build history

    >>> anon_browser.open("http://localhost/+builds/bob/+edit")
    Traceback (most recent call last):
    ...
    Unauthorized: ...

    >>> anon_browser.open("http://localhost/+builds/bob/+mode")
    Traceback (most recent call last):
    ...
    Unauthorized: ...

    >>> anon_browser.open("http://localhost/+builds/bob/+cancel")
    Traceback (most recent call last):
    ...
    Unauthorized: ...

    >>> anon_browser.open("http://localhost/+builds/bob/+admin")
    Traceback (most recent call last):
    ...
    Unauthorized: ...
