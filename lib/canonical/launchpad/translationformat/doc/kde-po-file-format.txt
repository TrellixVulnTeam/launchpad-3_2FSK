= Legacy KDE PO file format =

KDE versions before 4.0 used regular PO files with translatable
strings and their translations specially formatted to accommodate
features that were introduced in GNU gettext PO files later.

Such features include plural forms support and context support.

== Helper imports ==

    >>> from zope.app import datetimeutils
    >>> from canonical.launchpad.ftests import syncUpdate
    >>> from canonical.launchpad.interfaces import ITranslationImportQueue
    >>> from canonical.launchpad.interfaces import IPersonSet, IProductSet
    >>> from canonical.launchpad.interfaces import ILaunchpadCelebrities
    >>> from canonical.launchpad.interfaces import IPOTemplateNameSet
    >>> from canonical.launchpad.database import (
    ...     POTemplateSubset, SourcePackageName)
    >>> from canonical.launchpad.scripts.po_import import (
    ...     AutoApproveProcess, ImportProcess)
    >>> from canonical.lp.dbschema import TranslationFileFormat
    >>> import datetime
    >>> import pytz
    >>> UTC = pytz.timezone('UTC')

We need this for the Librarian to work properly.

    >>> import transaction

And also, the DBSchema to change the imports status

    >>> from canonical.lp.dbschema import RosettaImportStatus

Then, let's get a handle to our mailer. This is the thing we'll examine to show
what email has been sent, to whom, and what the body of the message contains:

    >>> import email
    >>> from canonical.launchpad.mail import stub

Here's a fake logger to capture any errors that happen.

    >>> from canonical.launchpad.scripts import FakeLogger

This is a function for importing a pofile or potemplate from a string,
printing out the import status after import is done.

    >>> def import_pofile_or_potemplate(file_contents, person, series,
    ...                                 pofile=None, potemplate=None):
    ...     translation_import_queue = getUtility(ITranslationImportQueue)
    ...     if pofile:
    ...         entry = translation_import_queue.addOrUpdateEntry(
    ...             pofile.path, file_contents, True, person,
    ...             productseries=series, pofile=pofile)
    ...     else:
    ...         entry = translation_import_queue.addOrUpdateEntry(
    ...             potemplate.path, file_contents, True, person,
    ...             productseries=series, potemplate=potemplate)
    ...     transaction.commit()
    ...     entry.status = RosettaImportStatus.APPROVED
    ...     syncUpdate(entry)
    ...     if pofile:
    ...         pofile.importFromQueue(FakeLogger())
    ...     else:
    ...         potemplate.importFromQueue(FakeLogger())
    ...     print entry.status.name
    ...     return entry

We'll be doing all our imports into Firefox trunk as
carlos@canonical.com.

    >>> carlos = getUtility(IPersonSet).getByEmail('carlos@canonical.com')
    >>> login('carlos@canonical.com')

    >>> firefox = getUtility(IProductSet).getByName('firefox')
    >>> firefox_trunk = firefox.getSeries('trunk')
    >>> firefox_potemplatename = getUtility(IPOTemplateNameSet)['firefox']
    >>> firefox_potsubset = POTemplateSubset(productseries=firefox_trunk)

    >>> firefox_potemplate = firefox_potsubset.new(
    ...     potemplatename=firefox_potemplatename,
    ...     path='po/firefox.pot',
    ...     owner=carlos)

== Non-KDE PO file detection ==

Our KDE PO support is built on top of existing gettext support.  As
such, it has precedence in handling any PO files, but it correctly
sets the format to regular PO if it's not a KDE style file.

    >>> non_kde_template = r'''
    ... msgid ""
    ... msgstr ""
    ... "POT-Creation-Date: 2004-07-11 16:16+0900\n"
    ... "Content-Type: text/plain; charset=CHARSET\n"
    ... "Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\n"
    ... "X-Launchpad-Export-Date: %s\n"
    ...
    ... msgid "foo"
    ... msgstr ""
    ... ''' % datetime.datetime.now(UTC).isoformat()

Importing this file works, but the format is set to Gettext PO.

    >>> entry = import_pofile_or_potemplate(non_kde_template, carlos,
    ...                                     firefox_trunk,
    ...                                     potemplate=firefox_potemplate)
    IMPORTED
    >>> print entry.format.title
    PO format

== Plural forms support ==

=== Import ===

Plural forms are supported by using a specially formated msgid where
English singular and plural are split with a newline, and entire
message is preceded with '_n: '.

    >>> plural_forms_template = r'''
    ... msgid ""
    ... msgstr ""
    ... "POT-Creation-Date: 2004-07-11 16:16+0900\n"
    ... "Content-Type: text/plain; charset=CHARSET\n"
    ... "Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\n"
    ... "X-Launchpad-Export-Date: %s\n"
    ...
    ... # This is not considered a plural forms message
    ... msgid "_n:bar\nbars"
    ... msgstr ""
    ...
    ... #, c-format
    ... msgid "_n: %%d foo\n%%d foos"
    ... msgstr ""
    ... ''' % datetime.datetime.now(UTC).isoformat()

And strangely, importing this file actually works, and format is changed
to KDE PO format.

    >>> entry = import_pofile_or_potemplate(plural_forms_template, carlos,
    ...                                     firefox_trunk,
    ...                                     potemplate=firefox_potemplate)
    IMPORTED
    >>> print entry.format.title
    KDE PO format

Messages which are preceded with just '_n:' and no space after it are
not considered plural forms messages.

    >>> potmsgset = firefox_potemplate.getPOTMsgSetByMsgIDText(u'_n:bar\nbars')
    >>> print potmsgset.msgid
    _n:bar
    bars
    >>> print potmsgset.msgid_plural
    None

Proper format in messages is to use '_n: ' and separate singular and
plural with a newline.

    >>> potmsgset = firefox_potemplate.getPOTMsgSetByMsgIDText(u'%d foo')
    >>> print potmsgset.msgid
    %d foo
    >>> print potmsgset.msgid_plural
    %d foos

For translations, specially formatted msgstr is used to hold all plural forms.
They are simply newline-separated strings.

    >>> firefox_serbian_pofile = firefox_potemplate.newPOFile('sr')
    >>> firefox_serbian_pofile.path='sr.po'
    >>> firefox_serbian_pofile_contents = r'''
    ... msgid ""
    ... msgstr ""
    ... "POT-Creation-Date: 2004-07-11 16:16+0900\n"
    ... "Content-Type: text/plain; charset=CHARSET\n"
    ... "Language: Serbian\n"
    ... "Plural-Forms: nplurals=3; plural=(n%%10==1 && n%%100!=11 ? 0 : n%%10>=2 && n%%10<=4 && (n%%100<10 || n%%100>=20) ? 1 : 2);\n"
    ... "X-Launchpad-Export-Date: %s\n"
    ...
    ... # This is not considered a plural forms message
    ... msgid "_n:bar\nbars"
    ... msgstr "non-plural forms message"
    ...
    ... #, c-format
    ... msgid "_n: %%d foo\n%%d foos"
    ... msgstr "%%d translation\n%%d translationes\n%%d translations"
    ... ''' % datetime.datetime.now(UTC).isoformat()

Importing this file succeeds, even if the number of %d printf specifications
doesn't match: this is because this is now specially handled with KDE PO format
support.

    >>> entry = import_pofile_or_potemplate(firefox_serbian_pofile_contents,
    ...                                     carlos, firefox_trunk,
    ...                                     pofile=firefox_serbian_pofile)
    IMPORTED
    >>> print entry.format.title
    KDE PO format

Non-KDE style messages get their translations in the usual way.

    >>> pomsgset = firefox_serbian_pofile.getPOMsgSet(key=u'_n:bar\nbars')
    >>> print pomsgset.active_texts
    [u'non-plural forms message']

While KDE style plural form message is correctly split into three separate
plural messages:

    >>> pomsgset = firefox_serbian_pofile.getPOMsgSet(key=u'%d foo')
    >>> print pomsgset.active_texts
    [u'%d translation', u'%d translationes', u'%d translations']

=== Export ===

Lets define a helper function for the exports.

    >>> def export_with_format(translation_file, format):
    ...     from canonical.launchpad.interfaces import (
    ...         ITranslationExporter,  ITranslationFile)
    ...     from zope.proxy import removeAllProxies
    ...
    ...     translation_exporter = getUtility(ITranslationExporter)
    ...     translation_format_exporter = (
    ...         translation_exporter.getTranslationFormatExporterByFileFormat(
    ...             format))
    ...     requested_file = ITranslationFile(translation_file)
    ...     exported_file = translation_format_exporter.exportTranslationFiles(
    ...         [requested_file])
    ...     return removeAllProxies(exported_file.content_file).read()

Template export turns it back into a KDE-style PO file:

    >>> print export_with_format(firefox_potemplate,
    ...                          TranslationFileFormat.KDEPO)
    #, fuzzy
    msgid ""
    msgstr ""
    ...
    "POT-Creation-Date: 2004-07-11 16:16+0900\n"
    ...
    "Content-Type: text/plain; charset=UTF-8\n"
    ...
    "Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\n"
    ...
    <BLANKLINE>
    # This is not considered a plural forms message
    msgid ""
    "_n:bar\n"
    "bars"
    msgstr ""
    <BLANKLINE>
    #, c-format
    msgid ""
    "_n: %d foo\n"
    "%d foos"
    msgstr ""

But, we can also export it as a regular gettext PO file:

    >>> print export_with_format(firefox_potemplate,
    ...                          TranslationFileFormat.PO)
    #, fuzzy
    msgid ""
    msgstr ""
    ...
    "POT-Creation-Date: 2004-07-11 16:16+0900\n"
    ...
    "Content-Type: text/plain; charset=UTF-8\n"
    ...
    "Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\n"
    ...
    <BLANKLINE>
    # This is not considered a plural forms message
    msgid ""
    "_n:bar\n"
    "bars"
    msgstr ""
    <BLANKLINE>
    #, c-format
    msgid "%d foo"
    msgid_plural "%d foos"
    msgstr[0] ""
    msgstr[1] ""

Exporting a translation is possible in a very similar way.

    >>> print export_with_format(firefox_serbian_pofile,
    ...                          TranslationFileFormat.KDEPO)
    msgid ""
    msgstr ""
    ...
    "POT-Creation-Date: 2004-07-11 16:16+0900\n"
    ...
    "Content-Type: text/plain; charset=UTF-8\n"
    ...
    "Plural-Forms: ...
    ...
    <BLANKLINE>
    # This is not considered a plural forms message
    msgid ""
    "_n:bar\n"
    "bars"
    msgstr "non-plural forms message"
    <BLANKLINE>
    #, c-format
    msgid ""
    "_n: %d foo\n"
    "%d foos"
    msgstr ""
    "%d translation\n"
    "%d translationes\n"
    "%d translations"


== Context support ==

Message context is supported in legacy KDE PO files using a specially
formatted msgid: context is preceded with a string '_: ', and split with
a new line from the rest of the message.

=== Import ===

We can have a template with a message with context.

    >>> kde_context_template = r'''
    ... msgid ""
    ... msgstr ""
    ... "POT-Creation-Date: 2004-07-11 16:16+0900\n"
    ... "Content-Type: text/plain; charset=CHARSET\n"
    ... "X-Launchpad-Export-Date: %s\n"
    ...
    ... msgid "_: Context\nMessage"
    ... msgstr ""
    ...
    ... msgid "_: Different Context\nMessage"
    ... msgstr ""
    ... ''' % datetime.datetime.now(UTC).isoformat()

Importing this template works and format is recognized as the KDE PO format.

    >>> entry = import_pofile_or_potemplate(kde_context_template, carlos,
    ...                                     firefox_trunk,
    ...                                     potemplate=firefox_potemplate)
    IMPORTED
    >>> print entry.format.title
    KDE PO format

Message with context is properly split into msgid and context fields.

    >>> potmsgset = firefox_potemplate.getPOTMsgSetByMsgIDText(
    ...     u'Message', context='Context')
    >>> print potmsgset.msgid
    Message
    >>> print potmsgset.context
    Context

If we ask for a message without specifying context, we get no results:

    >>> potmsgset = firefox_potemplate.getPOTMsgSetByMsgIDText(
    ...     u'Message')
    >>> print potmsgset
    None

We can also import translated file with message contexts:

    >>> kde_context_translation = r'''
    ... msgid ""
    ... msgstr ""
    ... "POT-Creation-Date: 2004-07-11 16:16+0900\n"
    ... "Content-Type: text/plain; charset=CHARSET\n"
    ... "X-Launchpad-Export-Date: %s\n"
    ...
    ... msgid "_: Context\nMessage"
    ... msgstr "First translation"
    ...
    ... msgid "_: Different Context\nMessage"
    ... msgstr "Second translation"
    ... ''' % datetime.datetime.now(UTC).isoformat()
    >>> entry = import_pofile_or_potemplate(kde_context_translation, carlos,
    ...                                     firefox_trunk,
    ...                                     pofile=firefox_serbian_pofile)
    IMPORTED
    >>> print entry.format.title
    KDE PO format


We can get first translation by specifying 'Context' for the context:

    >>> pomsgset = firefox_serbian_pofile.getPOMsgSet(
    ...     key=u'Message', context=u'Context')
    >>> print pomsgset.active_texts
    [u'First translation']

And if we ask for a message with context 'Different Context', we get the
other message and it's translation:

    >>> pomsgset = firefox_serbian_pofile.getPOMsgSet(
    ...     key=u'Message', context=u'Different Context')
    >>> print pomsgset.active_texts
    [u'Second translation']

=== Export ===

Exporting a PO template as a KDE PO file joins the context back together:

    >>> print export_with_format(firefox_potemplate,
    ...                          TranslationFileFormat.KDEPO)
    #, fuzzy
    msgid ""
    msgstr ""
    ...
    "POT-Creation-Date: 2004-07-11 16:16+0900\n"
    ...
    "Content-Type: text/plain; charset=UTF-8\n"
    ...
    <BLANKLINE>
    msgid ""
    "_: Context\n"
    "Message"
    msgstr ""
    <BLANKLINE>
    msgid ""
    "_: Different Context\n"
    "Message"
    msgstr ""

And similar happens with a translation:

    >>> print export_with_format(firefox_serbian_pofile,
    ...                          TranslationFileFormat.KDEPO)
    msgid ""
    msgstr ""
    ...
    "POT-Creation-Date: 2004-07-11 16:16+0900\n"
    ...
    "Content-Type: text/plain; charset=UTF-8\n"
    ...
    <BLANKLINE>
    msgid ""
    "_: Context\n"
    "Message"
    msgstr "First translation"
    <BLANKLINE>
    msgid ""
    "_: Different Context\n"
    "Message"
    msgstr "Second translation"
