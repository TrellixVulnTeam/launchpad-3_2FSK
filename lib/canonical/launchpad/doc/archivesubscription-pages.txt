Activating a subscription for a private archive is a two-step process.
First the archive owner needs to add a subscription for a person or
team - this is the purpose of the ArchiveSubscribersView.

Second, the person who has been subscribed - either directly or via a team -
needs to activate their subscription, which will update the
private-ppas-sources.list file displayed to them. This is the purpose
of the PersonArchiveSubscriptions View.

== ArchiveSubscribersView ==

The ArchiveSubscribersView presents all the subscribers for an archive, as
well as allowing the addition of new subscribers.

First, ensure that the archives we'll be using are private:

    >>> login('foo.bar@canonical.com')
    >>> from canonical.launchpad.interfaces.person import IPersonSet
    >>> cprov = getUtility(IPersonSet).getByName("cprov")
    >>> cprov.archive.buildd_secret = 'boing'
    >>> cprov.archive.private = True
    >>> sabdfl = getUtility(IPersonSet).getByName("sabdfl")
    >>> sabdfl.archive.buildd_secret = 'boing'
    >>> sabdfl.archive.private = True
    >>> transaction.commit()
    >>> logout()

Initially the view does not display any subscribers, as can be seen
using the has_subscriptions property:

    >>> login('celso.providelo@canonical.com')
    >>> view = create_initialized_view(cprov.archive, name="+subscriptions")
    >>> view.has_subscriptions
    False

POSTing with out data just causes the validation to display:

    >>> view = create_initialized_view(
    ...     cprov.archive, name="+subscriptions", method="POST",
    ...     server_url=
    ...         "https://launchpad.dev/~cprov/+archive/ppa/+subscriptions",
    ...     form={'field.actions.add': 'Add'})
    >>> for error in view.errors:
    ...     print error
    Required field is missing


The view can be used to add a new subscriber:

    >>> view = create_initialized_view(
    ...     cprov.archive, name="+subscriptions", method="POST",
    ...     server_url=
    ...         "https://launchpad.dev/~cprov/+archive/ppa/+subscriptions",
    ...     form={
    ...         'field.subscriber': 'spiv',
    ...         'field.description': "spiv's my friend",
    ...         'field.date_expires': '',
    ...         'field.actions.add': 'Add'
    ...         })

The view redirects to itself when a new subscriber has been added
successfully:

    >>> view.request.response.getStatus()
    302
    >>> print view.request.response.getHeader('location')
    https://launchpad.dev/~cprov/+archive/ppa/+subscriptions
    >>> view.has_subscriptions
    True

The view includes a subscribers property that returns all the current
subscribers:

    >>> for subscription in view.subscriptions:
    ...     print subscription.subscriber.displayname
    Andrew Bennetts

    >>> transaction.commit()

The same subscriber cannot be added a second time:

    >>> view = create_initialized_view(
    ...     cprov.archive, name="+subscriptions", method="POST",
    ...     form={
    ...         'field.subscriber': 'spiv',
    ...         'field.description': "spiv's still my friend",
    ...         'field.date_expires': '',
    ...         'field.actions.add': 'Add'
    ...         })

In this case the view will include validation errors:

    >>> for error in view.errors:
    ...     print error
    Andrew Bennetts is already subscribed.

But the same person can be a subscriber of other archives:

    >>> login('mark@hbd.com')
    >>> view = create_initialized_view(
    ...     sabdfl.archive, name="+subscriptions", method="POST",
    ...     form={
    ...         'field.subscriber': 'spiv',
    ...         'field.description': "spiv's still my friend",
    ...         'field.date_expires': '',
    ...         'field.actions.add': 'Add'
    ...         })

    >>> for subscription in view.subscriptions:
    ...     print subscription.subscriber.displayname
    Andrew Bennetts

A second subscriber can be added, this time a we'll add a team as a
subscriber, but the date_expires must be in the future:

    >>> transaction.commit()
    >>> view = create_initialized_view(
    ...     sabdfl.archive, name="+subscriptions", method="POST",
    ...     server_url=
    ...         "https://launchpad.dev/~cprov/+archive/ppa/+subscriptions",
    ...     form={
    ...         'field.subscriber': 'launchpad',
    ...         'field.description': "The launchpad team can use it.",
    ...         'field.date_expires': '1980-12-10',
    ...         'field.actions.add': 'Add'
    ...         })
    >>> for error in view.errors:
    ...     print error
    The expiry date must be in the future.

So we try again with an expiry date in the future:

    >>> import datetime
    >>> future_date = datetime.date.today() + datetime.timedelta(30)
    >>> view = create_initialized_view(
    ...     sabdfl.archive, name="+subscriptions", method="POST",
    ...     server_url=
    ...         "https://launchpad.dev/~cprov/+archive/ppa/+subscriptions",
    ...     form={
    ...         'field.subscriber': 'launchpad',
    ...         'field.description': "The launchpad team can use it.",
    ...         'field.date_expires': str(future_date),
    ...         'field.actions.add': 'Add'
    ...         })
    >>> view.errors
    []
    >>> for subscription in view.subscriptions:
    ...     print subscription.subscriber.displayname
    Launchpad Developers
    Andrew Bennetts


== PersonArchiveSubscriptions View ==

The PersonArchiveSubscriptions view provides all the archive subscriptions
for a person, as well as the ability to activate subscriptions.

The has_subscriptions helper simply returns whether the current person
has any archive subscriptions. Currently sabdfl isn't subscribed to any
private archives:

    >>> view = create_initialized_view(sabdfl, name="+archivesubscriptions")
    >>> view.has_subscriptions
    False

But spiv is subscribed to a number of archives:

    >>> spiv = getUtility(IPersonSet).getByName('spiv')
    >>> login("andrew.bennetts@ubuntulinux.com")
    >>> view = create_initialized_view(spiv, name="+archivesubscriptions")
    >>> view.has_subscriptions
    True

The subscriptions property returns all the archive subscriptions for
the current person (Needs to be updated to return only current subscriptions):

    >>> for subscription in view.subscriptions:
    ...     print subscription.archive.title
    ...     print subscription.description
    Private PPA for Mark Shuttleworth       spiv's still my friend
    Private PPA for Celso Providelo         spiv's my friend

