= Distribution Mirrors =

For every mirror of distribution we publish most of its attributes. For archive
mirrors:

    >>> from lazr.restful.testing.webservice import pprint_entry
    >>> distros = webservice.get("/distros").jsonBody()
    >>> distro = distros['entries'][0]
    >>> ubuntu = webservice.get(distro['self_link']).jsonBody()
    >>> ubuntu_archive_mirrors = webservice.get(ubuntu['archive_mirrors_collection_link']).jsonBody()
    >>> canonical_archive = ubuntu_archive_mirrors['entries'][0]
    >>> canonical_archive_json = webservice.get(canonical_archive['self_link']).jsonBody()
    >>> pprint_entry(canonical_archive_json)
    content: u'Archive'
    date_created: u'2006-10-16T18:31:43.434567+00:00'
    date_reviewed: None
    description: None
    displayname: None
    distribution_link: u'http://.../ubuntu'
    enabled: True
    ftp_base_url: None
    http_base_url: u'http://archive.ubuntu.com/ubuntu/'
    name: u'canonical-archive'
    official_candidate: True
    owner_link: u'http://.../~mark'
    resource_type_link: u'http://.../#distribution_mirror'
    reviewer_link: None
    rsync_base_url: None
    self_link: u'http://.../ubuntu/+mirror/canonical-archive'
    speed: u'100 Mbps'
    status: u'Official'
    whiteboard: None

And CD image mirrors:

    >>> ubuntu_cd_mirrors = webservice.get(ubuntu['cdimage_mirrors_collection_link']).jsonBody()
    >>> canonical_releases =  ubuntu_cd_mirrors['entries'][0]
    >>> canonical_releases_json = webservice.get(canonical_releases['self_link']).jsonBody()
    >>> pprint_entry(canonical_releases_json)
    content: u'CD Image'
    date_created: u'2006-10-16T18:31:43.434567+00:00'
    date_reviewed: None
    description: None
    displayname: None
    distribution_link: u'http://.../ubuntu'
    enabled: True
    ftp_base_url: None
    http_base_url: u'http://releases.ubuntu.com/'
    name: u'canonical-releases'
    official_candidate: True
    owner_link: u'http://.../~mark'
    resource_type_link: u'http://.../#distribution_mirror'
    reviewer_link: None
    rsync_base_url: None
    self_link: u'http://.../ubuntu/+mirror/canonical-releases'
    speed: u'100 Mbps'
    status: u'Official'
    whiteboard: None

= Security checks =

People who are not mirror listing admins or the mirrors registrar may not
change the owner's of mirrors:

    >>> from canonical.launchpad.testing.pages import webservice_for_person
    >>> from canonical.launchpad.webapp.interfaces import OAuthPermission
    >>> from zope.component import getUtility
    >>> from lp.registry.interfaces.person import IPersonSet
    >>> from simplejson import dumps
    >>> login(ANONYMOUS)
    >>> karl_db = getUtility(IPersonSet).getByName('karl')
    >>> test_db = getUtility(IPersonSet).getByName('name12')
    >>> karl_webservice = webservice_for_person(karl_db,
    ...     permission=OAuthPermission.WRITE_PUBLIC)
    >>> test_webservice = webservice_for_person(test_db,
    ...     permission=OAuthPermission.WRITE_PUBLIC)
    >>> logout()
    >>> karl = webservice.get("/~karl").jsonBody()
    >>> patch = {
    ...     u'owner_link': karl['self_link']
    ... }

Now trying to set the owner using Sample Person's webservice is not authorized.

    >>> response = test_webservice.patch(
    ...     canonical_archive['self_link'], 'application/json', dumps(patch))
    >>> print response.getheader('status')
    401 Unauthorized

But if we use Karl, the mirror listing admin's, webservice, we can update the owner.

    >>> response = karl_webservice.patch(
    ...     canonical_archive['self_link'], 'application/json', dumps(patch))
    >>> print response.getheader('status')
    209 Content Returned

    >>> patched_canonical_archive = response.jsonBody()
    >>> print patched_canonical_archive['owner_link']
    http://.../~karl

Some attributes are read-only via the API:

    >>> patch = {
    ...     u'date_reviewed' : u'2010-02-04T17:19:16.424198+00:00',
    ...     u'enabled' : False,
    ...     u'reviewer_link' : karl['self_link']
    ... }
    >>> response = karl_webservice.patch(
    ...     canonical_releases['self_link'], 'application/json', dumps(patch))
    >>> print response
    HTTP/1.1 400 Bad Request
    Status: 400 Bad Request
    ...
    enabled: You tried to modify a read-only attribute.
    date_reviewed: You tried to modify a read-only attribute.
    reviewer_link: You tried to modify a read-only attribute.

While others can be set with the appropriate authorization:

    >>> patch = {
    ...     u'status' : 'Unofficial',
    ...     u'whiteboard' : u'This mirror is too shiny to be true'
    ... }
    >>> response = test_webservice.patch(
    ...     canonical_releases['self_link'], 'application/json', dumps(patch))
    >>> print response.getheader('status')
    401 Unauthorized

    >>> response = karl_webservice.patch(
    ...     canonical_releases['self_link'], 'application/json', dumps(patch)).jsonBody()
    >>> pprint_entry(response)
    content: u'CD Image'
    ...
    status: u'Unofficial'
    whiteboard: u'This mirror is too shiny to be true'

= Distribution Mirror Custom Operations =

DistributionMirror has some custom operations.

"isOfficial" returns a boolean result on whether a mirror is an official mirror
or not.

    >>> is_official_mirror = webservice.named_get(canonical_releases['self_link'],
    ...     'isOfficial').jsonBody()
    >>> print is_official_mirror
    False

"getOverallFreshness" returns the freshness of the mirror determined by the
mirror prober from the mirror's last probe.

    >>> releases_mirror2 = ubuntu_cd_mirrors['entries'][2]
    >>> freshness = webservice.named_get(releases_mirror2['self_link'],
    ...     'getOverallFreshness').jsonBody()
    >>> print freshness
    Up to date
