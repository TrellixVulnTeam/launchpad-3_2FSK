While doing translations, there is a functionality that allows to the user
to filter the kind of messages that should be showed.

For this test, we know that the valid msgsets that this form uses are the ones
with the ids between 130 and 151 and, by default, the batch are of 10 items.

  # This function will be used to check the content of the browser.
  >>> def print_shown_messages(browser):
  ...     """Print the id/value of all shown translations on the page."""
  ...     from BeautifulSoup import BeautifulSoup
  ...
  ...     for msgset_id in range(130, 152):
  ...         translation = find_tag_by_id(
  ...             browser.contents, 'msgset_%d_es_translation_0' % msgset_id)
  ...         if translation is None:
  ...             continue
  ...         print "%s: '%s'" % (
  ...             msgset_id, translation.renderContents().strip())

Let's see the list of untranslated messsages that the pofile has with the
first batch of entries:

  >>> user_browser.open(
  ...     'http://launchpad.dev/ubuntu/hoary/+source/evolution/+pots/'
  ...     'evolution-2.2/es/+translate?show=untranslated')
  >>> user_browser.url
  'http://.../evolution-2.2/es/+translate?show=untranslated'

  >>> print_shown_messages(user_browser)
  133: '(no translation yet)'
  135: '(no translation yet)'
  136: '(no translation yet)'
  137: '(no translation yet)'
  138: '(no translation yet)'
  139: '(no translation yet)'
  140: '(no translation yet)'
  141: '(no translation yet)'
  142: '(no translation yet)'
  148: '(no translation yet)'

The set of messages that are untranslated in the second batch:

  >>> user_browser.getLink('Next').click()
  >>> user_browser.url
  'http://.../evolution-2.2/es/+translate?show=untranslated&start=10'

  >>> print_shown_messages(user_browser)
  149: '(no translation yet)'
  150: '(no translation yet)'
  151: '(no translation yet)'

Now, we are going to select messages with new suggestions submitted after
they were last reviewed.

  >>> user_browser.open(
  ...     'http://launchpad.dev/ubuntu/hoary/+source/evolution/+pots/'
  ...     'evolution-2.2/es/+translate?show=new_suggestions')
  >>> user_browser.url
  'http://.../evolution-2.2/es/+translate?show=new_suggestions'

  >>> print_shown_messages(user_browser)
  134: '<samp> </samp>caratas'

Now, we are going to select the amount of entries that need to be reviewed.

  >>> user_browser.open(
  ...     'http://launchpad.dev/ubuntu/hoary/+source/evolution/+pots/'
  ...     'evolution-2.2/es/+translate?show=need_review')
  >>> user_browser.url
  'http://.../evolution-2.2/es/+translate?show=need_review'

  >>> print_shown_messages(user_browser)
  132: 'tiene<samp> </samp>'
  146: '<code>%d</code> foo'

Next, lets see entries which have changed in Launchpad.

  >>> user_browser.getControl('Show:').displayValue = ['changed in Launchpad']
  >>> user_browser.getControl('Filter').click()
  >>> user_browser.url
  'http://.../evolution-2.2/es/+translate?batch=10&show=changed_in_launchpad'

  >>> print_shown_messages(user_browser)
  134: '<samp> </samp>caratas'

We are now at the end of this template. Let's try the form submission
to be sure that we don't redirect to a broken URL but to the first batch.

  >>> user_browser.getControl('Save & Continue').click()
  >>> user_browser.url
  'http://...evolution-2.2/es/+translate?show=changed_in_launchpad&start=10'

Another thing that filtering should do is to move to the start of the set of
messages when the filtering rule changes but preserving batch size.

  >>> user_browser.open(
  ...     'http://launchpad.dev/ubuntu/hoary/+source/evolution/+pots/'
  ...     'evolution-2.2/es/+translate')
  >>> user_browser.url
  'http://.../evolution-2.2/es/+translate'
  >>> user_browser.getLink('Last').click()
  >>> user_browser.url
  'http://.../evolution-2.2/es/+translate?start=20'
  >>> user_browser.getControl('Show').value = ['untranslated']
  >>> user_browser.getControl('Filter').click()
  >>> user_browser.url
  'http://.../evolution-2.2/es/+translate?batch=10&show=untranslated'
