== Split off distroseries.txt to be able to disable separately ==
'''Re-insert back before 'SourcePackagePublishingHistory' section'''

=== Translation Migration taks ===

The main way to migrate translations is to clone what we have in its parent
distribution.

   >>> humpy.copyMissingTranslationsFromParent(transaction_stub)

Only current PO templates are copied from the distribution parent:

   >>> len(hoary.getTranslationTemplates()) > len(
   ...     hoary.getCurrentTranslationTemplates())
   True
   >>> len(humpy.getTranslationTemplates()) == len(
   ...     humpy.getCurrentTranslationTemplates())
   True
   >>> len(humpy.getTranslationTemplates()) == len(
   ...     hoary.getCurrentTranslationTemplates())
   True
   >>> humpy.getObsoleteTranslationTemplates()
   []

Define a couple of functions we will need to compare the files from the parent
and child distro series.

   >>> def get_diffable_lines(file):
   ...     """Get lines in file worth diffing (but omit date)."""
   ...     return [
   ...         line for line in file.splitlines()
   ...         if not line.startswith('"X-Launchpad-Export-Date:')]

   >>> def get_diff(old_file, new_file):
   ...     from canonical.launchpad.helpers import test_diff
   ...     # Get content as list of lines, removing X-Launchpad-Export-Date
   ...     # lines to prevent time bombs in tests.
   ...     old_file_lines = get_diffable_lines(old_file)
   ...     new_file_lines = get_diffable_lines(new_file)
   ...
   ...     if old_file_lines != new_file_lines:
   ...         # The old and new files differ.
   ...         return u"Output doesn't match:\n\n %s\n" % test_diff(
   ...             old_file_lines, new_file_lines)
   ...     return ''

   >>> def compare_translations(orig_distroseries, dest_distroseries):
   ...
   ...     sortkey = lambda template: (
   ...         template.name, template.sourcepackagename.name)
   ...
   ...     orig_templates = sorted(
   ...         orig_distroseries.getCurrentTranslationTemplates(),
   ...         key=sortkey)
   ...     dest_templates = sorted(
   ...         dest_distroseries.getCurrentTranslationTemplates(),
   ...         key=sortkey)
   ...
   ...     output_text = ''
   ...     for i in range(len(orig_templates)):
   ...         old_template = orig_templates[i]
   ...         new_template = dest_templates[i]
   ...         if old_template.priority != new_template.priority:
   ...             output_text += 'Priority of %s is different from %s\n' % (
   ...                 old_template.title, new_template.title)
   ...         output = get_diff(old_template.export(), new_template.export())
   ...         if output != '':
   ...            output_text += output
   ...         for old_pofile in old_template.pofiles:
   ...             new_pofile = new_template.getPOFileByLang(
   ...                 old_pofile.language.code, old_pofile.variant)
   ...             old_pofile_data = old_pofile.export(
   ...                 ignore_obsolete=True,force_utf8=True)
   ...             new_pofile_data = new_pofile.export(
   ...                 ignore_obsolete=True, force_utf8=True)
   ...             output = get_diff(old_pofile_data, new_pofile_data)
   ...             if output is not None:
   ...                 output_text += output
   ...     return output_text

Comparing the current translations for the parent distro series to those of the
distro series we just created, we see that there are no differences at all.
Translation-wise, humpy is a perfect copy of hoary.

   >>> print compare_translations(hoary, humpy)
   <BLANKLINE>

Since people may continue to translate Hoary (and in fact we usually encourage
them to do so as a matter of policy), we will also periodically update Humpy's
translations based on changes made in Hoary.

To illustrate this, we will add some new translations to Hoary, migrate them
to Humpy, and check that the changes are copied where appropriate.

In practice the updates need not be entirely complete.  The database and the
Translations application remain "live" during the process, so there may be some
interference from changes made through the UI.  In those cases the copying
mechanism will drop a few updates rather than risk overwriting newer changes.
Any dropped updates from Hoary will still appear as suggestions to translators
working on Humpy, as long as they're still translating the same messages.

Get the needed objects to prepare this test.

    >>> import datetime
    >>> from canonical.launchpad.interfaces import (
    ...     ISourcePackageNameSet, IPOTemplateSet, IPersonSet)
    >>> evolution = getUtility(ISourcePackageNameSet)['evolution']
    >>> potemplateset = getUtility(IPOTemplateSet)
    >>> potemplatesubset_hoary = potemplateset.getSubset(distroseries=hoary,
    ...     sourcepackagename=evolution)
    >>> potemplate_hoary = potemplatesubset_hoary.getPOTemplateByName(
    ...     'evolution-2.2')
    >>> pofile_es_hoary = potemplate_hoary.getPOFileByLang('es')
    >>> potemplatesubset_humpy = potemplateset.getSubset(distroseries=humpy,
    ...     sourcepackagename=evolution)
    >>> potemplate_humpy = potemplatesubset_humpy.getPOTemplateByName(
    ...     'evolution-2.2')
    >>> pofile_es_humpy = potemplate_humpy.getPOFileByLang('es')

The one submitting the string will be Carlos.  He's an editor for this POFile.

    >>> carlos = getUtility(IPersonSet).getByName('carlos')

    >>> from lp.testing import time_counter
    >>> # "Clock" that's guaranteed always to progress between calls.
    >>> now = time_counter(delta=datetime.datetime.resolution).next

As it happens, our templates have some messages with the same msgids but
different contexts.  These exist in both Hoary and Humpy, but one is
translated only in Hoary; another only in Humpy; another in both, with
the one in Humpy the most recent; and yet another in both but with the
one in Hoary the most recent.  We also have an obsolete message that is
translated in Hoary but not in Humpy.

    >>> from zope.security.proxy import removeSecurityProxy

    >>> def add_messageset_to_template(potemplate, sequence, msgid, context):
    ...     """Add a message set to the given `POTemplate`."""
    ...     context_msg = potemplate.createMessageSetFromText(
    ...         msgid, None, context=context)
    ...     context_msg = removeSecurityProxy(context_msg)
    ...     context_msg.sequence = sequence
    ...     return context_msg

    >>> def add_translation(pofile, potmsgset, translation):
    ...     """Set translation for given message set in given `POFile`."""
    ...     potmsgset.updateTranslation(
    ...         pofile, carlos, { 0: translation }, is_imported=False,
    ...         lock_timestamp=now())

    >>> context_msg = add_messageset_to_template(
    ...     potemplate_humpy, 0, u"Obsolete message", None)
    >>> context_msg = add_messageset_to_template(
    ...     potemplate_hoary, 0, u"Obsolete message", None)
    >>> add_translation(pofile_es_hoary, context_msg, "Obsolete (in Hoary)")

    >>> context_msg = add_messageset_to_template(
    ...     potemplate_hoary, 100, u"A contexted message", None)
    >>> add_translation(pofile_es_hoary, context_msg, "Hoary0")
    >>> context_msg = add_messageset_to_template(
    ...     potemplate_humpy, 100, u"A contexted message", None)
    >>> context_msg = add_messageset_to_template(
    ...     potemplate_hoary, 101, u"A contexted message", u"context1")
    >>> context_msg = add_messageset_to_template(
    ...     potemplate_humpy, 101, u"A contexted message", u"context1")
    >>> add_translation(pofile_es_humpy, context_msg, "Humpy1")
    >>> context_msg = add_messageset_to_template(
    ...     potemplate_hoary, 102, u"A contexted message", u"context2")
    >>> add_translation(pofile_es_hoary, context_msg, "Hoary2")
    >>> context_msg = add_messageset_to_template(
    ...     potemplate_humpy, 102, u"A contexted message", u"context2")
    >>> add_translation(pofile_es_humpy, context_msg, "Humpy2")
    >>> context_msg_hoary = add_messageset_to_template(
    ...     potemplate_hoary, 103, u"A contexted message", u"context3")
    >>> context_msg_humpy = add_messageset_to_template(
    ...     potemplate_humpy, 103, u"A contexted message", u"context3")
    >>> add_translation(pofile_es_humpy, context_msg_humpy, "Humpy3")
    >>> add_translation(pofile_es_hoary, context_msg_hoary, "Hoary3")

Carlos also updates a regular string in the parent release.

    >>> potmsgset_hoary = potemplate_hoary.getPOTMsgSetByMsgIDText(
    ...     u'evolution addressbook')
    >>> dummy = potmsgset_hoary.updateTranslation(
    ...     pofile_es_hoary, carlos, { 0: u'hoary updated string' },
    ...     is_imported=False, lock_timestamp=now())

And another update in a string that was previously untranslated.

    >>> potmsgset_hoary = potemplate_hoary.getPOTMsgSetByMsgIDText(u'has ')
    >>> dummy = potmsgset_hoary.updateTranslation(
    ...     pofile_es_hoary, carlos, { 0: u'empty string translated' },
    ...     is_imported=False, lock_timestamp=now())

Update a string in the child release.

    >>> potmsgset_humpy = potemplate_humpy.getPOTMsgSetByMsgIDText(
    ...     u'current addressbook folder')
    >>> dummy = potmsgset_humpy.updateTranslation(
    ...     pofile_es_humpy, carlos, { 0: u'humpy updated string' },
    ...     is_imported=False, lock_timestamp=now())

These are the respective expected numbers of translated messages, messages
whose translations have changed in Launchpad, ones that are newly translated
in Launchpad, and ones with unreviewed suggestions.

We update these statistics first, since we have not gone through the regular
UI for updating translations.

    >>> pofile_es_hoary.updateStatistics()
    (7, 2, 4, 1)
    >>> pofile_es_humpy.updateStatistics()
    (7, 2, 3, 0)

The statistics for messages translated in Launchpad reflect the fact that we
translated one previously untranslated string in Hoary.  The number for this
category of message is called rosettaCount.

    >>> pofile_es_hoary.rosettaCount()
    4
    >>> pofile_es_humpy.rosettaCount()
    3

The other statistics may change depending on unrelated factors, but it's
the total number of current translations that matters.

    >>> from canonical.database.sqlbase import quote
    >>> from canonical.launchpad.database.translationmessage import (
    ...     TranslationMessage)
    >>> def count_current_translations(pofile):
    ...     """Count how many messages in pofile have current translations.
    ...     """
    ...     query = """
    ...         pofile = %s AND
    ...         POTMsgSet.id = potmsgset AND
    ...         POTMsgSet.sequence > 0 AND
    ...         is_current
    ...         """ % quote(pofile)
    ...     return TranslationMessage.select(
    ...         query, clauseTables=['POTMsgSet']).count()

    >>> count_current_translations(pofile_es_hoary)
    11
    >>> count_current_translations(pofile_es_humpy)
    10

There are also some obsolete messages.

    >>> potmsgset = pofile_es_hoary.potemplate.getPOTMsgSetByMsgIDText(
    ...     u"Obsolete message")
    >>> msg = potmsgset.getCurrentTranslationMessage(
    ...     pofile_es_hoary.potemplate, pofile_es_hoary.language)
    >>> msg.translations
    [u'Obsolete (in Hoary)']

    >>> potmsgset = pofile_es_humpy.potemplate.getPOTMsgSetByMsgIDText(
    ...     u"Obsolete message")
    >>> msg = potmsgset.getCurrentTranslationMessage(
    ...     pofile_es_humpy.potemplate, pofile_es_humpy.language)
    >>> print msg
    None

When we compare the full translations for hoary and humpy, we see the
changes we just made, as well as the differences between the
messages-with-context.  The obsolete messages do not show up.

    >>> flush_database_caches()
    >>> print compare_translations(hoary, humpy)
    Output doesn't match:
    <BLANKLINE>
    --- expected
    +++ actual
    <BLANKLINE>
    @@ -30,11 +30,11 @@
    <BLANKLINE>
     #: a11y/addressbook/ea-addressbook-view.c:103
     #: a11y/addressbook/ea-minicard-view.c:119
     msgid "evolution addressbook"
    -msgstr "hoary updated string"
    +msgstr "libreta de direcciones de Evolution"
    <BLANKLINE>
     #: a11y/addressbook/ea-minicard-view.c:101
     msgid "current addressbook folder"
    -msgstr "carpeta de libretas de direcciones actual"
    +msgstr "humpy updated string"
    <BLANKLINE>
     #: a11y/addressbook/ea-minicard-view.c:102
     msgid "have "
    @@ -42,7 +42,7 @@
    <BLANKLINE>
    <BLANKLINE>
     #: a11y/addressbook/ea-minicard-view.c:102
     msgid "has "
    -msgstr "empty string translated "
    +msgstr ""
    <BLANKLINE>
     #: a11y/addressbook/ea-minicard-view.c:104
     msgid " cards"
    @@ -277,16 +277,16 @@
     msgstr ""
    <BLANKLINE>
     msgid "A contexted message"
    -msgstr "Hoary0"
    +msgstr ""
    <BLANKLINE>
     msgctxt "context1"
     msgid "A contexted message"
    -msgstr ""
    +msgstr "Humpy1"
    <BLANKLINE>
     msgctxt "context2"
     msgid "A contexted message"
    -msgstr "Hoary2"
    +msgstr "Humpy2"
    <BLANKLINE>
     msgctxt "context3"
     msgid "A contexted message"
    -msgstr "Hoary3"
    +msgstr "Humpy3"

Now we migrate the updates from Hoary to Humpy.

    >>> humpy.copyMissingTranslationsFromParent(transaction_stub)

Our updates are copied to Humpy.  The remaining differences between Hoary and
Humpy are the messages that were translated in Humpy more recently than they
were in Hoary, or were translated in Humpy but not at all in Hoary.

    >>> print compare_translations(hoary, humpy)
    Output doesn't match:
    <BLANKLINE>
    --- expected
    +++ actual
    <BLANKLINE>
    @@ -34,7 +34,7 @@
    <BLANKLINE>
     #: a11y/addressbook/ea-minicard-view.c:101
     msgid "current addressbook folder"
    -msgstr "carpeta de libretas de direcciones actual"
    +msgstr "humpy updated string"
    <BLANKLINE>
     #: a11y/addressbook/ea-minicard-view.c:102
     msgid "have "
    @@ -281,12 +281,12 @@
    <BLANKLINE>
     msgctxt "context1"
     msgid "A contexted message"
    -msgstr ""
    +msgstr "Humpy1"
    <BLANKLINE>
     msgctxt "context2"
     msgid "A contexted message"
    -msgstr "Hoary2"
    +msgstr "Humpy2"
    <BLANKLINE>
     msgctxt "context3"
     msgid "A contexted message"
    -msgstr "Hoary3"
    +msgstr "Humpy3"

Obsolete messages are not copied.

    >>> potmsgset = pofile_es_hoary.potemplate.getPOTMsgSetByMsgIDText(
    ...     u"Obsolete message")
    >>> msg = potmsgset.getCurrentTranslationMessage(
    ...     pofile_es_hoary.potemplate, pofile_es_hoary.language)
    >>> msg.translations
    [u'Obsolete (in Hoary)']
    >>> potmsgset = pofile_es_humpy.potemplate.getPOTMsgSetByMsgIDText(
    ...     u"Obsolete message")
    >>> msg = potmsgset.getCurrentTranslationMessage(
    ...     pofile_es_humpy.potemplate, pofile_es_humpy.language)
    >>> print msg
    None

Changes in Humpy supersede any translation changes that may be made in its
parent distroseries for that same message.  So even if someone now translates
the same messages in Hoary as well, Humpy will retain its own translations
of those string when we next migrate updates.

    >>> potmsgset_hoary = potemplate_hoary.getPOTMsgSetByMsgIDText(
    ...     u'current addressbook folder')
    >>> dummy = potmsgset_hoary.updateTranslation(
    ...     pofile_es_hoary, carlos, { 0: u'second hoary updated string' },
    ...     is_imported=False, lock_timestamp=now())
    >>> humpy.copyMissingTranslationsFromParent(transaction_stub)

    >>> print compare_translations(hoary, humpy)
    Output doesn't match:
    <BLANKLINE>
    --- expected
    +++ actual
    <BLANKLINE>
    @@ -34,7 +34,7 @@
    <BLANKLINE>
     #: a11y/addressbook/ea-minicard-view.c:101
     msgid "current addressbook folder"
    -msgstr "second hoary updated string"
    +msgstr "humpy updated string"
    <BLANKLINE>
     #: a11y/addressbook/ea-minicard-view.c:102
     msgid "have "
    @@ -281,12 +281,12 @@
    ...

The Hoary message is updated, but even though the Humpy version is older, it
is not overwritten by the copy.  (The differences in the part where we had
messages with contexts remain as they were.)

We can also see that the statistics are updated and both distributions
show mostly the same numbers (though some messages in the rosettaCount
actually differ between the two distro series).  The only difference is
that 1 message that was untranslated in Humpy got copied from Hoary,
whereas another that was translated in Humpy but not in Hoary, wasn't.

Thus Humpy now has one more message translated than Hoary does.

    >>> (count_current_translations(pofile_es_hoary) ==
    ...     count_current_translations(pofile_es_humpy) - 1)
    True
    >>> pofile_es_hoary.rosettaCount() == pofile_es_humpy.rosettaCount() - 1
    True

Finally, prepare a new distro series to do the copy using an external script
to do the translation migration to this new distro series.

    >>> testing_series = ubuntu.newSeries(
    ...     'testing', 'Testing Test', 'The Testing Test', 'Fat',
    ...     'Yo Momma', '99.4',hoary, hoary.owner)
    >>> testing_series.defer_translation_imports = False
    >>> testing_series.hide_all_translations
    True

    >>> from canonical.launchpad.ftests import syncUpdate
    >>> syncUpdate(testing_series)
    >>> testing_series.getTranslationTemplates()
    []

Now, we execute the script that will migrate/copy all current templates
and translations from testing_series' parent distro series (hoary).

    >>> import transaction
    >>> from canonical.launchpad.ftests.script import run_script

The script starts its own transactions, so we need to commit here to be sure
the new series will be available in the script.

    >>> testing_series_id = testing_series.id
    >>> transaction.commit()

The script fails as long as the defer_translation_imports flag is not
set.

    >>> returnvalue, output, error_output = run_script(
    ...     'cronscripts/copy-missing-translations-from-parent.py',
    ...     ['--distribution=ubuntu', '--series=testing', '-v'])
    >>> returnvalue
    1
    >>> print error_output
    INFO    creating lockfile
    ERROR   Before this process starts, set the hide_all_translations and
            defer_translation_imports flags for distribution ubuntu, series
            testing; or use the --force option to make it happen
            automatically.
    DEBUG   Removing lock file: /var/lock/launchpad-copy-missing-translations-ubuntu-testing.lock

    >>> transaction.abort()
    >>> testing_series = DistroSeries.get(testing_series_id)
    >>> testing_series.defer_translation_imports
    False
    >>> testing_series.hide_all_translations
    True

It succeeds, however, when we pass the --force option.  The script then
sets the defer_translation_imports flag itself before copying.

    >>> transaction.abort()
    >>> returnvalue, output, error_output = run_script(
    ...     'cronscripts/copy-missing-translations-from-parent.py',
    ...     ['--distribution=ubuntu', '--series=testing', '-v', '--force'])
    >>> returnvalue
    0
    >>> print error_output
    INFO    creating lockfile
    INFO    Starting...
    INFO    Populating blank distroseries ... with translations from 3.
    ...
    INFO    Done...
    DEBUG   Removing lock file: /var/lock/launchpad-copy-missing-translations-ubuntu-testing.lock


After completing, the script restores the defer_translation_imports
flag to its previous value (off).

    >>> transaction.abort()
    >>> testing_series = DistroSeries.get(testing_series_id)
    >>> testing_series.defer_translation_imports
    False
    >>> testing_series.hide_all_translations
    True


    # Set the flag again to facilitate further testing.
    >>> testing_series.defer_translation_imports = True

Once the script has finished, the new distro series does have templates.

    >>> len(testing_series.getCurrentTranslationTemplates()) > 0
    True

And all current templates were copied.

    >>> len(hoary.getCurrentTranslationTemplates()) == len(
    ...     testing_series.getCurrentTranslationTemplates())
    True


