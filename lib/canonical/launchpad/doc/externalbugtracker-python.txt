= ExternalBugTracker: Python =

This covers the implementation of the ExternalBugTracker class for Python
bugwatches.


== Basics ==

The ExternalBugTracker descendant class which implements methods for updating
bug watches on Python bug trackers is externalbugtracker.Python, which
implements IExternalBugTracker.

    >>> from canonical.launchpad.components.externalbugtracker import Python
    >>> from canonical.launchpad.interfaces.externalbugtracker import (
    ...     IExternalBugtracker)
    >>> from canonical.launchpad.webapp.testing import verifyObject
    >>> verifyObject(IExternalBugtracker, Python('http://bugs.foo.com'))
    True


== Status Conversion ==

The basic Python bug statuses (i.e. those available by default in new Python instances) map to Launchpad bug statuses. Python.convertRemoteStatus() handles the conversion.

    >>> python = Python('http://spam.eggs.ham')
    >>> python.convertRemoteStatus('1:None').title
    'New'
    >>> python.convertRemoteStatus('1:1').title
    'Confirmed'
    >>> python.convertRemoteStatus('1:2').title
    'Confirmed'
    >>> python.convertRemoteStatus('1:3').title
    'Fix Committed'
    >>> python.convertRemoteStatus('1:4').title
    'Invalid'
    >>> python.convertRemoteStatus('1:5').title
    'Confirmed'
    >>> python.convertRemoteStatus('1:6').title
    'Invalid'
    >>> python.convertRemoteStatus('1:7').title
    'Confirmed'
    >>> python.convertRemoteStatus('1:8').title
    "Won't Fix"
    >>> python.convertRemoteStatus('1:9').title
    'Confirmed'
    >>> python.convertRemoteStatus('1:10').title
    "Won't Fix"
    >>> python.convertRemoteStatus('1:11').title
    'Invalid'
    >>> python.convertRemoteStatus('2:None').title
    "Won't Fix"
    >>> python.convertRemoteStatus('2:1').title
    'Fix Committed'
    >>> python.convertRemoteStatus('2:3').title
    'Fix Released'
    >>> python.convertRemoteStatus('2:7').title
    "Won't Fix"
    >>> python.convertRemoteStatus('3:None').title
    'Incomplete'
    >>> python.convertRemoteStatus('3:7').title
    "Won't Fix"

If the status isn't something that our Python ExternalBugTracker can
understand, Unknown will be returned and a warning logged.

    >>> python.convertRemoteStatus('7:13').title
    WARNING:...:Unknown status '7:13'
    'Unknown'

UNKNOWN_REMOTE_STATUS maps to Unknown without generating a warning. This
handles the case where we've tried to probe for a bug but didn't succeed. For
example, if the bug number was invalid.

    >>> from canonical.launchpad.interfaces import UNKNOWN_REMOTE_STATUS
    >>> python.convertRemoteStatus(UNKNOWN_REMOTE_STATUS).title
    'Unknown'


== Initialization ==

Calling initializeRemoteBugDB() on our Python instance and passing it a set
of remote bug IDs will fetch those bug IDs from the server and file them in a
local variable for later use.

We use a test-oriented implementation for the purposes of these tests, which 
overrides ExternalBugTracker.urlopen() so that we don't have to rely on a
working network connection.

    >>> from canonical.launchpad.ftests.externalbugtracker import (
    ...     TestPython, print_bugwatches)
    >>> python = TestPython('http://test.python')
    >>> python.initializeRemoteBugDB([1])
    >>> sorted(python.bugs.keys())
    [1]


== Export Methods ==

There are two means by which we can export Python bug statuses: on a
bug-by-bug basis and as a batch. When the number of bugs that need updating is
less than a given bug pythonker's batch_query_threshold the bugs will be
fetched one-at-a-time:

    >>> python.batch_query_threshold
    10

    >>> python.trace_calls = True
    >>> python.initializeRemoteBugDB([6, 7, 8, 9, 10])
    CALLED urlopen('http://test.python/issue?...&id=6')
    CALLED urlopen('http://test.python/issue?...&id=7')
    CALLED urlopen('http://test.python/issue?...&id=8')
    CALLED urlopen('http://test.python/issue?...&id=9')
    CALLED urlopen('http://test.python/issue?...&id=10')

If there are more than batch_query_threshold bugs to update then they are
fetched as a batch:

    >>> python.batch_query_threshold = 4
    >>> python.initializeRemoteBugDB([6, 7, 8, 9, 10])
    CALLED urlopen('http://test.python/issue?...@startwith=0')


== Updating Bug Watches ==

First, we create some bug watches to test with:

    >>> from canonical.launchpad.database import BugTracker
    >>> from canonical.launchpad.interfaces import IBugSet, IPersonSet
    >>> from canonical.lp.dbschema import BugTrackerType

    >>> sample_person = getUtility(IPersonSet).getByEmail('test@canonical.com')

    >>> example_bug_tracker = BugTracker(
    ...     name="example-bugs",
    ...     title="Example.com Python",
    ...     bugtrackertype=BugTrackerType.ROUNDUP,
    ...     baseurl="http://bugs.example.com",
    ...     summary="Contains bugs for Example.com",
    ...     contactdetails="foo.bar@example.com",
    ...     owner=sample_person)

    >>> login('test@canonical.com')

    >>> example_bug = getUtility(IBugSet).get(10)
    >>> example_bugwatch = example_bug.addWatch(
    ...     example_bug_tracker, 1008, sample_person)

    >>> login('no-priv@canonical.com')

Collect the Example.com watches:

    >>> print_bugwatches(example_bug_tracker.watches)
    Remote bug 1008: None

And have a Python instance process them:

    >>> python = TestPython(example_bug_tracker.baseurl)
    >>> python.updateBugWatches(example_bug_tracker.watches)
    >>> print_bugwatches(example_bug_tracker.watches)
    Remote bug 1008: 1:None

We'll add some more watches now.

    >>> from canonical.launchpad.interfaces import IBugSet, IBugWatchSet
    >>> print_bugwatches(example_bug_tracker.watches,
    ...     python.convertRemoteStatus)
    Remote bug 1008: New

    >>> remote_bugs = [
    ...     (1008, 'Confirmed'),
    ...     (1010, 'New'),
    ...     (1011, 'Confirmed'),
    ...     (1013, 'Fix Committed'),
    ...     (1014, "Won't Fix"),
    ...     (1018, 'Invalid'),
    ...     (1020, 'Invalid'),
    ...     (1021, 'Confirmed'),
    ...     (1025, 'Confirmed'),
    ...     (1028, "Won't Fix"),
    ...     (1031, 'Confirmed'),
    ...     (1033, 'Invalid'),
    ...     (1036, "Won't Fix"),
    ...     (1042, "Won't Fix"),
    ...     (1046, 'Fix Committed'),
    ...     (1048, "Won't Fix"),
    ...     (1053, 'Fix Released'),
    ... ]

    >>> bug_watch_set = getUtility(IBugWatchSet)
    >>> for remote_bug_id, remote_status in remote_bugs:
    ...     bug_watch = bug_watch_set.createBugWatch(
    ...         bug=example_bug, owner=sample_person,
    ...         bugtracker=example_bug_tracker,
    ...         remotebug=str(remote_bug_id))

    >>> python.trace_calls = True
    >>> python.updateBugWatches(example_bug_tracker.watches)
    CALLED urlopen(u'http://bugs.example.com/issue?...@startwith=0')

    >>> print_bugwatches(example_bug_tracker.watches,
    ...     python.convertRemoteStatus)
    Remote bug 1008: Confirmed
    Remote bug 1010: New
    Remote bug 1011: Confirmed
    Remote bug 1013: Fix Committed
    Remote bug 1014: Won't Fix
    Remote bug 1018: Invalid
    Remote bug 1020: Invalid
    Remote bug 1021: Confirmed
    Remote bug 1025: Confirmed
    Remote bug 1028: Won't Fix
    Remote bug 1031: Confirmed
    Remote bug 1033: Invalid
    Remote bug 1036: Won't Fix
    Remote bug 1042: Won't Fix
    Remote bug 1046: Fix Committed
    Remote bug 1048: Won't Fix
    Remote bug 1053: Fix Released


