= Atom Feeds =

Feeds produce XML not HTML.  Therefore we must parse the output as XML
using BeautifulStoneSoup instead of BeautifulSoup or the helper functions.

    >>> from BeautifulSoup import BeautifulStoneSoup as BSS
    >>> from BeautifulSoup import SoupStrainer

Please note that when displaying the results of the feeds in a reader
the order of entries may not be the same as generated.  Some readers
will arrange the entries in a different sort order based on the update
time. 

Define a helper function for parsing the entries:
    >>> def parse_entries(contents):
    ...     entries = [tag for tag in BSS(browser.contents,
    ...                   parseOnlyThese=SoupStrainer('entry'))]
    ...     return entries

== Latest bugs for a product ==

    >>> browser.open('http://feeds.launchpad.dev/jokosher/latest-bugs.atom')
    >>> browser.title
    'Bugs in Jokosher'
    >>> browser.url
    'http://feeds.launchpad.dev/jokosher/latest-bugs.atom'

    >>> soup = BSS(browser.contents)
    >>> print extract_text(soup.find('id'))
    http://feeds.launchpad.dev/jokosher/latest-bugs.atom
    >>> entries = parse_entries(browser.contents)
    >>> print len(entries)
    2
    >>> entry = entries[0]
    >>> print extract_text(entry.title)
    [12] Copy, Cut and Delete operations should work on selections
    >>> print extract_text(entry.author('name')[0])
    Foo Bar
    >>> print extract_text(entry.author('uri')[0])
    http://launchpad.dev/~name16

    >>> entry = entries[1]
    >>> print extract_text(entry.title)
    [11] Make Jokosher use autoaudiosink
    >>> print extract_text(entry.author('name')[0])
    Foo Bar
    >>> print extract_text(entry.author('uri')[0])
    http://launchpad.dev/~name16


== Latest bugs for a project ==

    >>> browser.open('http://feeds.launchpad.dev/mozilla/latest-bugs.atom')
    >>> browser.title
    'Bugs in the Mozilla Project'
    >>> browser.url
    'http://launchpad.dev/mozilla/latest-bugs.atom'

    >>> soup = BSS(browser.contents)
    >>> print extract_text(soup.find('id'))
    http://launchpad.dev/mozilla/latest-bugs.atom
    >>> entries = parse_entries(browser.contents)
    >>> print len(entries)
    4

    >>> entry = entries[0]
    >>> print extract_text(entry.title)
    [9] Thunderbird crashes
    >>> print extract_text(entry.author('name')[0])
    Foo Bar
    >>> print extract_text(entry.author('uri')[0])
    http://launchpad.dev/~name16

    >>> entry = entries[1]
    >>> print extract_text(entry.title)
    [5] Firefox install instructions should be complete
    >>> print extract_text(entry.author('name')[0])
    Sample Person
    >>> print extract_text(entry.author('uri')[0])
    http://launchpad.dev/~name12

== Latest bugs for a person ==

    >>> browser.open('http://launchpad.dev/~name16/latest-bugs.atom')
    >>> browser.title
    'Bugs for Foo Bar'
    >>> browser.url
    'http://launchpad.dev/~name16/latest-bugs.atom'

    >>> soup = BSS(browser.contents)
    >>> print extract_text(soup.find('id'))
    http://launchpad.dev/~name16/latest-bugs.atom
    >>> entries = parse_entries(browser.contents)
    >>> print len(entries)
    6

    >>> entry = entries[0]
    >>> print extract_text(entry.title)
    [3] Bug Title Test
    >>> print extract_text(entry.author('name')[0])
    Foo Bar
    >>> print extract_text(entry.author('uri')[0])
    http://launchpad.dev/~name16

    >>> entry = entries[1]
    >>> print extract_text(entry.title)
    [12] Copy, Cut and Delete operations should work on selections
    >>> print extract_text(entry.author('name')[0])
    Foo Bar
    >>> print extract_text(entry.author('uri')[0])
    http://launchpad.dev/~name16

== Latest bugs for a team ==

First, make a team responsible for some bugs.

    >>> from canonical.launchpad.interfaces import (
    ...     IPersonSet)
    >>> from zope.component import getUtility
    >>> from canonical.launchpad.ftests import login, logout
    >>> one_mem_browser = setupBrowser(auth='Basic one-membership@test.com:test')
    >>> personset = getUtility(IPersonSet)

Subscribe simple-team to a number of bugs.

    >>> one_mem_browser.open('http://launchpad.dev/bugs/1')
    >>> one_mem_browser.getLink('Subscribe someone else').click()
    >>> one_mem_browser.getControl('Person').value = 'simple-team'
    >>> one_mem_browser.getControl('Add').click()

    >>> one_mem_browser.open('http://launchpad.dev/bugs/2')
    >>> one_mem_browser.getLink('Subscribe someone else').click()
    >>> one_mem_browser.getControl('Person').value = 'simple-team'
    >>> one_mem_browser.getControl('Add').click()

    >>> one_mem_browser.open('http://launchpad.dev/bugs/3')
    >>> one_mem_browser.getLink('Subscribe someone else').click()
    >>> one_mem_browser.getControl('Person').value = 'simple-team'
    >>> one_mem_browser.getControl('Add').click()


Now we can do a query on the lastest bugs for simple team and expect
some results.

    >>> browser.open('http://launchpad.dev/~simple-team/latest-bugs.atom')
    >>> browser.title
    'Bugs for Simple Team'

    >>> soup = BSS(browser.contents)
    >>> print extract_text(soup.find('id'))
    http://launchpad.dev/~simple-team/latest-bugs.atom

    >>> entries = parse_entries(browser.contents)
    >>> print len(entries)
    3

== General bug search ==

    >>> import cgi
    >>> url = ("http://launchpad.dev/bugs/search-bugs.atom?"
    ...        "field.searchtext=&search=Search+Bug+Reports&"
    ...        "field.scope=all&field.scope.target=")
    >>> browser.open(url)
    >>> browser.title
    'Bugs from custom search'

    >>> soup = BSS(browser.contents)
    >>> entry_id = extract_text(soup.find('id'))
    >>> assert entry_id==cgi.escape(url), "Id does match URL (%s)" % entry_id

    >>> entries = parse_entries(browser.contents)
    >>> print len(entries)
    10

    >>> entry = entries[0]
    >>> print extract_text(entry.title)
    [3] Bug Title Test
    >>> print extract_text(entry.author('name')[0])
    Foo Bar
    >>> print extract_text(entry.author('uri')[0])
    http://launchpad.dev/~name16

    >>> entry = entries[1]
    >>> print extract_text(entry.title)
    [5] Firefox install instructions should be complete
    >>> print extract_text(entry.author('name')[0])
    Sample Person
    >>> print extract_text(entry.author('uri')[0])
    http://launchpad.dev/~name12

== Results for a single bug ==

    >>> browser.open('http://launchpad.dev/bugs/1/bug.atom')
    >>> browser.title
    'Bug 1'
    >>> entries = parse_entries(browser.contents)
    >>> print len(entries)
    1
    >>> entry = entries[0]
    >>> print extract_text(entry.title)
    [1] Firefox does not support SVG

