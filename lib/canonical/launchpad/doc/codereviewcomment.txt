= Code review comments =

When code is proposed to be merged, it's common to perform a review of
that code, which is often in the form of a conversation.  The reviewer
asks questions, makes comments, and offers an opinion (a 'vote') on
whether or not the code should be merged.  The submitter responds to the
reviewer until submitter and reviewer and reach an agreement about the
status of the code or conclude that agreement cannot be reached.

The ICodeReviewComment interface represents this kind of conversation.
It has an IMessage as a member (in a one-to-one relationship), a vote
(which is an enum), and a reference to the IBranchMergeProposal it is
about.


== Creating CodeReviewComments ==

CodeReviewComments are created from their BranchMergeProposals:

    >>> login('foo.bar@canonical.com')
    >>> from canonical.launchpad.testing import LaunchpadObjectFactory
    >>> factory = LaunchpadObjectFactory()
    >>> merge_proposal = factory.makeBranchMergeProposal()
    >>> sender = factory.makePerson(
    ...     email='sender@example.com', password='password',
    ...     displayname='Sender Person')
    >>> comment = merge_proposal.createComment(
    ...     sender, 'Please merge', 'This patch is very nice.')

The first comment to be created is the root of the code review
conversation, and is available as BranchMergeProposal.root_comment.

    >>> merge_proposal.root_comment == comment
    True

Subsequent comments are marked as replies to the root_comment, by
default.

    >>> from canonical.launchpad.interfaces import CodeReviewVote
    >>> comment2 = merge_proposal.createComment(
    ...     sender, 'No!', 'You are ugly and stupid',
    ...     CodeReviewVote.DISAPPROVE)
    >>> comment2.message.parent is None
    True

Comments can be marked as replies to particular comments.

    >>> comment3 = merge_proposal.createComment(
    ...     sender, 'Hurt', "That wasn't a nice thing to say.",
    ...     parent=comment2)
    >>> comment3.message.parent == comment2.message
    True

If there is a subscriber to any of the branches involved in the merge,
a notification is produced when the comment is created.

    >>> from canonical.launchpad.interfaces import (
    ...     BranchSubscriptionDiffSize, BranchSubscriptionNotificationLevel,
    ...     CodeReviewNotificationLevel)
    >>> source_subscriber = factory.makePerson(email='subscriber@example.com',
    ...     password='baz', displayname='Subscriber Person')
    >>> _unused = merge_proposal.source_branch.subscribe(source_subscriber,
    ...     BranchSubscriptionNotificationLevel.NOEMAIL,
    ...     BranchSubscriptionDiffSize.NODIFF,
    ...     CodeReviewNotificationLevel.FULL)
    >>> from canonical.launchpad.tests.mail_helpers import (
    ...     pop_notifications, print_emails)
    >>> _unused = pop_notifications()
    >>> comment = merge_proposal.createComment(
    ...     sender, 'Please merge', 'This patch is very nice.',
    ...     vote=CodeReviewVote.APPROVE, review_type='DB')
    >>> notifications = pop_notifications()
    >>> print_emails(include_reply_to=True, notifications=notifications[:1])
    From: Sender Person <sender@example.com>
    To: ...
    Reply-To: mp+1@code.launchpad.dev
    Subject: Please merge
    Review: Approve db
    This patch is very nice.
    --...
    You are subscribed to branch lp://dev/~...
    ----------------------------------------
    >>> print notifications[0]['X-Launchpad-Branch']
    ~person-name.../product-name.../branch...
    >>> print notifications[0]['X-Launchpad-Message-Rationale']
    Subscriber
    >>> notifications[0]['Message-Id'] == comment.message.rfc822msgid
    True
    >>> (notifications[0]['In-Reply-To'] == merge_proposal.root_message_id)
    True


== Interfaces ==

The CodeReviewComment must implement the ICodeReviewComment interface.

    >>> from canonical.launchpad.webapp.testing import verifyObject
    >>> from canonical.launchpad.interfaces import ICodeReviewComment
    >>> verifyObject(ICodeReviewComment, comment)
    True
