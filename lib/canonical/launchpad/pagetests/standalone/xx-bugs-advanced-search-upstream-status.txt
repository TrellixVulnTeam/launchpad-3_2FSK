The advanced search page provides widgets for filtering bugtasks based on
upstream status.

There are currently four bugs open in Ubuntu.

    >>> anon_browser.open('http://launchpad.dev/distros/ubuntu/+bugs')
    >>> from BeautifulSoup import BeautifulSoup
    >>> def print_bugtasks(text):
    ...     soup = BeautifulSoup(anon_browser.contents)
    ...     table = soup('table', {'id': 'buglisting'})[0]
    ...     for tr in table('tr'):
    ...         if not tr.td:
    ...             continue
    ...         icon, id, description = tr('td', limit=3)
    ...         print id.string, description.a.string
    >>> print_bugtasks(anon_browser.contents)
    1 Firefox does not support SVG
    9 Thunderbird crashes
    10 another test bug
    2 Blackhole Trash folder

Now if we go to the advanced search and choose to list only the bugs
needing a bug watch, only the bugs with tasks in other contexts that
don't use Malone are shown, if at least one of those contexts doesn't
have a bug watch.

    XXX: Can't click on the link due to bug 51853.
       -- Bjorn Tillenius, 2006-07-04
    >>> anon_browser.getLink('Advanced search').attrs['href']
    '?advanced=1'
    >>> anon_browser.open('http://launchpad.dev/distros/ubuntu/+bugs?advanced=1')
    >>> anon_browser.url
    'http://launchpad.dev/distros/ubuntu/+bugs?advanced=1'

    >>> upstream_status = anon_browser.getControl(name='field.status_upstream')
    >>> upstream_status.displayValue = [
    ...     'Show only bugs that need to be forwarded to an upstream bugtracker']
    >>> anon_browser.getControl('Search', index=0).click()
    >>> print_bugtasks(anon_browser.contents)
    2 Blackhole Trash folder

There's an exception to what's shown on this filter though: if all the
bugtasks on contexts that don't use Malone are Rejected, those bugs
are not included in the report.

    >>> from zope.component import getUtility
    >>> from canonical.database.sqlbase import flush_database_updates
    >>> from canonical.launchpad.ftests import login, logout
    >>> from canonical.launchpad.interfaces import IBugSet
    >>> from canonical.lp.dbschema import BugTaskStatus

    >>> login("foo.bar@canonical.com")

    >>> bug_two = getUtility(IBugSet).get(2)
    >>> for bugtask in bug_two.bugtasks:
    ...     if not bugtask.target_uses_malone:
    ...         bugtask.transitionToStatus(BugTaskStatus.REJECTED)

    >>> flush_database_updates()

    >>> for bugtask in bug_two.bugtasks:
    ...     print "%s, %s" % (bugtask.target.bugtargetname, bugtask.status.title)
    ubuntu-product (upstream), Rejected
    Ubuntu, Unconfirmed
    Ubuntu Hoary, Unconfirmed
    mozilla-firefox (Debian), Rejected
    mozilla-firefox (Debian Woody), Rejected
    >>> logout()

    >>> anon_browser.open('http://launchpad.dev/distros/ubuntu/+bugs?advanced=1')
    >>> upstream_status = anon_browser.getControl(name='field.status_upstream')
    >>> upstream_status.displayValue = [
    ...     'Show only bugs that need to be forwarded to an upstream bugtracker']
    >>> anon_browser.getControl('Search', index=0).click()
    >>> print anon_browser.contents
    <!DOCTYPE...
    ...No results...

The search can also be filtered to show only bugs not known to affect
upstream, i.e., bugs that don't have an IUpstreamBugTask. This filter
makes it easy for developers to ignore bugs that they've already passed
on upstream, to focus instead on things they need to work on.

    >>> anon_browser.open('http://launchpad.dev/distros/ubuntu/+bugs?advanced=1')
    >>> anon_browser.url
    'http://launchpad.dev/distros/ubuntu/+bugs?advanced=1'

    >>> upstream_status = anon_browser.getControl(name='field.status_upstream')
    >>> upstream_status.displayValue = [
    ...     'Show only bugs that are not known to affect upstream']
    >>> anon_browser.getControl('Search', index=0).click()
    >>> print_bugtasks(anon_browser.contents)
    10 another test bug

We can also show only the bugs that have a resolved upstream task. For
our purposes, this means:

    * bugs with bugtasks linked to watches that are rejected, fixed
      committed or fix released
    * bugs with upstream bugtasks that are fix committed or fix
      released

Let's modify some existing bugtasks and create some new ones, to
demonstrate.

    >>> from canonical.launchpad.ftests import login, logout
    >>> from canonical.launchpad.ftests.test_bugtask import (
    ...     BugTaskSearchBugsElsewhereTest)
    >>> test_helper = BugTaskSearchBugsElsewhereTest(helper_only=True)
    >>> login('test@canonical.com')
    >>> test_helper.setUpBugsResolvedUpstreamTests()
    >>> logout()

Now, if we choose to show only closed upstream task, only the bugs we
modified and the sampledata we created above will show up.

    >>> anon_browser.open('http://launchpad.dev/distros/ubuntu/+bugs?advanced=1')
    >>> anon_browser.url
    'http://launchpad.dev/distros/ubuntu/+bugs?advanced=1'

    >>> upstream_status = anon_browser.getControl(name='field.status_upstream')
    >>> upstream_status.displayValue = [
    ...     'Show only bugs that are resolved upstream']
    >>> anon_browser.getControl('Search', index=0).click()
    >>> print_bugtasks(anon_browser.contents)
    1 Firefox does not support SVG
    9 Thunderbird crashes
    2 Blackhole Trash folder

Let's reset the statuses we set.

    >>> login('test@canonical.com')
    >>> test_helper.tearDownBugsElsewhereTests()
    >>> logout()
