Let's test the /specialrequest page, where users place custom requests and/or
change existing ones.

  >>> browser.addHeader('Authorization', 'Basic foo.bar@canonical.com:test')
  >>> browser.open('http://shipit.ubuntu.dev/specialrequest')
  >>> browser.url
  'http://shipit.ubuntu.dev/specialrequest'

First of all, we'll make sure a request is accepted only if all required 
fields are filled.

  >>> browser.getControl('Request CDs').click()
  >>> browser.url
  'http://shipit.ubuntu.dev/specialrequest'

  >>> print browser.contents
  <!DOCTYPE...
  ...Your ShipIt Request...
  ...
  ...Please fix the problems below and try again...
  ...
  ...Name...
  ...
  ...Required input is missing...
  ...
  ...Address...
  ...
  ...Required input is missing...
  ...
  ...City/Town/etc...
  ...
  ...Required input is missing...
  ...
  ...Country...
  ...
  ...Required input is missing...
  ...
  ...Phone...
  ...
  ...Required input is missing...
  ...


To make a custom request, the reason field is required.

  >>> browser.getControl(name='field.recipientdisplayname').value = 'Foo'
  >>> browser.getControl(name='field.ubuntu_quantityx86').value = '1'
  >>> browser.getControl(name='field.organization').value = 'Baz'
  >>> browser.getControl(name='field.addressline1').value = 'Street'
  >>> browser.getControl(name='field.city').value = 'City'
  >>> browser.getControl(name='field.province').value = 'Province'
  >>> browser.getControl(name='field.postcode').value = '4352542'
  >>> browser.getControl(name='field.country').value = ['226']
  >>> browser.getControl(name='field.phone').value = '43242442'
  >>> browser.getControl('Request CDs').click()
  >>> browser.url
  'http://shipit.ubuntu.dev/specialrequest'

  >>> browser.getControl(name='field.reason').value
  ''
  >>> print browser.contents
  <!DOCTYPE...
  ...field.reason...
  ...Required input is missing...


The quantities specified by the user must be positive integers.

  >>> browser.getControl(name='field.reason').value = 'foo'
  >>> browser.getControl(name='field.ubuntu_quantityx86').value = '-1'
  >>> browser.getControl('Request CDs').click()

  >>> print browser.contents
  <!DOCTYPE...
  ...field.ubuntu_quantityx86...
  ...Quantities must be greater than or equal 0...

  >>> from canonical.launchpad.interfaces import ShipItConstants
  >>> browser.getControl(name='field.ubuntu_quantityx86').value = str(
  ...     ShipItConstants.max_size_for_auto_approval)
  >>> browser.getControl('Request CDs').click()
  >>> browser.url
  'http://shipit.ubuntu.dev/specialrequest'

  >>> print browser.contents
  <!DOCTYPE...
  ...Request accepted. Please note that special requests can take up to...
  ...ten weeks...


All custom requests with less than $max_size_for_auto_approval CDs are
automatically approved.

  >>> max_cds = ShipItConstants.max_size_for_auto_approval

  >>> from canonical.launchpad.database import Person
  >>> from canonical.launchpad.ftests import login, logout, ANONYMOUS
  >>> login(ANONYMOUS)
  >>> current_request = Person.byName('name16').currentShipItRequest()
  >>> current_request.isApproved()
  True
  >>> current_request.getTotalApprovedCDs() == max_cds
  True
  >>> logout()

But custom requests with more than $max_size_for_auto_approval CDs have to
be approved before they can be shipped.

  >>> quantity = str(max_cds + 1)
  >>> browser.getControl(name='field.ubuntu_quantityx86').value = quantity
  >>> browser.getControl('Change Request').click()

  >>> login(ANONYMOUS)
  >>> Person.byName('name16').currentShipItRequest().isAwaitingApproval()
  True
  >>> Person.byName('name16').currentShipItRequest().getTotalApprovedCDs()
  0
  >>> Person.byName('name16').currentShipItRequest().reason
  u'foo'
  >>> logout()

And for custom requests that are not automatically approved, we send an
email to info@shipit.ubuntu.com, notifying that a new request is waiting for
approval.

  >>> from canonical.launchpad.mail import stub
  >>> from_addr, to_addrs, raw_msg = stub.test_emails.pop()
  >>> to_addrs
  ['info@shipit.ubuntu.com']


If later the user asks for standard quantities of CDs of a different flavour,
the request will still be pending approval, becuase it contains more than
$max_size_for_auto_approval CDs in total.

  >>> browser.open('http://shipit.kubuntu.dev/myrequest')
  >>> browser.url
  'http://shipit.kubuntu.dev/myrequest'

  >>> browser.getControl(name='ordertype').value = ['10']
  >>> browser.getControl(name='field.recipientdisplayname').value = 'Foo'
  >>> browser.getControl(name='field.organization').value = 'Baz'
  >>> browser.getControl(name='field.addressline1').value = 'Street'
  >>> browser.getControl(name='field.city').value = 'City'
  >>> browser.getControl(name='field.province').value = 'Province'
  >>> browser.getControl(name='field.postcode').value = '43242342'
  >>> browser.getControl(name='field.country').value = ['226']
  >>> browser.getControl(name='field.phone').value = '43242442'

  # This is an existent request, so all address fields are already filled.
  >> browser.getControl(name='field.recipientdisplayname').value
  'Foo'
  >> browser.getControl(name='field.organization').value
  'Baz'

  >>> browser.getControl('Request More CDs').click()

  >>> login(ANONYMOUS)
  >>> Person.byName('name16').currentShipItRequest().isAwaitingApproval()
  True
  >>> Person.byName('name16').currentShipItRequest().getTotalApprovedCDs()
  0
  >>> logout()

And the reason will still be there, because Marilize will have to check it
before approving.

  >>> login(ANONYMOUS)
  >>> Person.byName('name16').currentShipItRequest().reason
  u'foo'
  >>> logout()

Now, let's pretend this request was approved and shipped, so that we can see
how shipit would behave if this guy (name16) comes back asking for more CDs
of this same distroseries.

  >>> login(ANONYMOUS)
  >>> shipit_request = Person.byName('name16').currentShipItRequest()
  >>> shipit_request.approve()
  >>> for requestedcds in shipit_request.getAllRequestedCDs():
  ...     requestedcds.quantityapproved = requestedcds.quantity
  >>> from canonical.database.sqlbase import flush_database_updates
  >>> flush_database_updates()
  >>> from canonical.launchpad.database import ShippingRequestSet
  >>> run = ShippingRequestSet()._create_shipping_run([shipit_request.id])
  >>> [request.recipient.name for request in run.requests]
  [u'name16']
  >>> logout()

His shipped request contained only Ubuntu and Kubuntu CDs, so a request for
Edubuntu CDs that is under the $max_size_for_auto_approval CDs limit will
be auto approved.

  >>> browser.open('http://shipit.edubuntu.dev/specialrequest')
  >>> browser.url
  'http://shipit.edubuntu.dev/specialrequest'

  # As name16 already has a request, the address fields will be pre-filled for
  # him.
  >>> browser.getControl(name='field.recipientdisplayname').value
  'Foo'
  >>> browser.getControl(name='field.organization').value
  'Baz'

  >>> browser.getControl(name='field.ubuntu_quantityx86').value = '10'
  >>> browser.getControl(name='field.reason').value = 'foo'
  >>> browser.getControl('Request CDs').click()

  >>> browser.url
  'http://shipit.edubuntu.dev/specialrequest'

  >>> print browser.contents
  <!DOCTYPE...
  ...Request accepted...
  ...ten weeks...

  >>> login(ANONYMOUS)
  >>> Person.byName('name16').currentShipItRequest().isApproved()
  True
  >>> logout()

If later on he adds some Ubuntu (or Kubuntu) CDs to his request it'll then be
marked as pending approval.

  >>> browser.open('http://shipit.ubuntu.dev/specialrequest')
  >>> browser.url
  'http://shipit.ubuntu.dev/specialrequest'

  >>> browser.getControl(name='field.ubuntu_quantityx86').value = '10'
  >>> browser.getControl(name='field.ubuntu_quantityamd64').value = '1'
  >>> browser.getControl(name='field.reason').value = 'foo'
  >>> browser.getControl('Request More CDs').click()

  >>> browser.url
  'http://shipit.ubuntu.dev/specialrequest'

  >>> print browser.contents
  <!DOCTYPE...
  ...Request changed successfully...

Although his new request contains only 21 CDs, it will be pending approval
because he already has a shipped request containing Ubuntu CDs.

  >>> login(ANONYMOUS)
  >>> Person.byName('name16').currentShipItRequest().isAwaitingApproval()
  True
  >>> logout()


The architectures of the CDs we ship depend on the flavour (Ubuntu, Kubuntu
and Edubuntu).

For Ubuntu, we ship both X86 and AMD64 CDs.

  >>> browser.open('http://shipit.ubuntu.dev/specialrequest')
  >>> browser.url
  'http://shipit.ubuntu.dev/specialrequest'

  >>> browser.getControl(name='field.ubuntu_quantityx86')
  <Control name='field.ubuntu_quantityx86' type='text'>
  >>> browser.getControl(name='field.ubuntu_quantityamd64')
  <Control name='field.ubuntu_quantityamd64' type='text'>
  >>> browser.getControl(name='field.ubuntu_quantityppc')
  Traceback (most recent call last):
  ...
  LookupError: name 'field.ubuntu_quantityppc'


For Kubuntu we also ship X86 and AMD64.

  >>> browser.open('http://shipit.kubuntu.dev/specialrequest')
  >>> browser.url
  'http://shipit.kubuntu.dev/specialrequest'

  >>> browser.getControl(name='field.ubuntu_quantityx86')
  <Control name='field.ubuntu_quantityx86' type='text'>
  >>> browser.getControl(name='field.ubuntu_quantityamd64')
  <Control name='field.ubuntu_quantityamd64' type='text'>
  >>> browser.getControl(name='field.ubuntu_quantityppc')
  Traceback (most recent call last):
  ...
  LookupError: name 'field.ubuntu_quantityppc'


And for Edubuntu, we ship only X86.

  >>> browser.open('http://shipit.edubuntu.dev/specialrequest')
  >>> browser.url
  'http://shipit.edubuntu.dev/specialrequest'

  >>> browser.getControl(name='field.ubuntu_quantityx86')
  <Control name='field.ubuntu_quantityx86' type='text'>
  >>> browser.getControl(name='field.ubuntu_quantityamd64')
  Traceback (most recent call last):
  ...
  LookupError: name 'field.ubuntu_quantityamd64'
  >>> browser.getControl(name='field.ubuntu_quantityppc')
  Traceback (most recent call last):
  ...
  LookupError: name 'field.ubuntu_quantityppc'

