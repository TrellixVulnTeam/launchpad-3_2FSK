= IStructuralSubscriptionTarget =

Structural subscriptions allow users to subscribe to notifications about
new items and changes to existing items for a Launchpad structure such as
Product, Project, Distribution, Milesonte and series.

    >>> from canonical.launchpad.interfaces import (
    ...     IStructuralSubscriptionTarget)
    >>> from canonical.launchpad.webapp.testing import verifyObject
    >>> verifyObject(IStructuralSubscriptionTarget, target)
    True

== Bug Subscriptions ==

Bug subscriptions are structural subscriptions to notifications about
bug activity.

    >>> target.bug_subscriptions
    []

First, we try to create a new subscription.

    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> personset = getUtility(IPersonSet)
    >>> sample_person = personset.getByName("name12")

Only authenticated users can create subscriptions.

    >>> target.addBugSubscription(sample_person, sample_person)
    Traceback (most recent call last):
      ...
    Unauthorized: ...

Let's login then to add a subscription:

    >>> from canonical.launchpad.ftests import login
    >>> login("foo.bar@canonical.com")

    >>> target.addBugSubscription(sample_person, sample_person)
    <StructuralSubscription ...>
    >>> [sub.subscriber.name for sub in target.bug_subscriptions]
    [u'name12']

Trying to add a subscription to a target when that person
or team is already subscribe to that target will raise a
DuplicateSubscriptionError.

    >>> target.addBugSubscription(sample_person, sample_person)
    Traceback (most recent call last):
      ...
    DuplicateSubscriptionError: ...

Let's add an ITeam as one of the subscribers:

    >>> ubuntu_team = personset.getByName("ubuntu-team")
    >>> target.addBugSubscription(ubuntu_team, ubuntu_team)
    <StructuralSubscription ...>

    >>> sorted([sub.subscriber.name for sub in target.bug_subscriptions])
    [u'name12', u'ubuntu-team']

To remove a bug subscription, use
IStructuralSubscriptionTarget.removeBugSubscription:

    >>> target.removeBugSubscription(sample_person)
    >>> sorted([sub.subscriber.name for sub in target.bug_subscriptions])
    [u'ubuntu-team']

Trying to remove a subscription that doesn't exist on a target raises a
DeleteSubscriptionError.

    >>> foobar = personset.getByName("name16")
    >>> target.removeBugSubscription(foobar)
    Traceback (most recent call last):
      ...
    DeleteSubscriptionError: ...

Trying to remove a bug subscription when notification levels for other
applications are set, doesn't remove the subscription. Instead the
notification level for bugs is set to NOTHING.

    >>> def print_subscriptions_list(subscriptions):
    ...     for subscription in subscriptions:
    ...         print '%s %s %s' % (
    ...               subscription.subscriber.name,
    ...               subscription.bug_notification_level.name,
    ...               subscription.blueprint_notification_level.name)

    >>> from canonical.launchpad.interfaces import (
    ...     BlueprintNotificationLevel)

    >>> subscription = target.addBugSubscription(foobar, foobar)
    >>> subscription.blueprint_notification_level = (
    ...     BlueprintNotificationLevel.LIFECYCLE)
    >>> print_subscriptions_list(target.getSubscriptions())
    name16 COMMENTS LIFECYCLE
    ubuntu-team COMMENTS NOTHING
    >>> target.removeBugSubscription(foobar)
    >>> print_subscriptions_list(target.getSubscriptions())
    name16 NOTHING LIFECYCLE
    ubuntu-team COMMENTS NOTHING

To find out if an IPerson or ITeam is a subscriber, use
IStructuralSubscriptionTargetIDistributionSourcePackage.isSubscribed.

    >>> target.isSubscribed(ubuntu_team)
    True
    >>> target.isSubscribed(sample_person)
    False

To search for subscriptions with certain level settings on a structure
we use getSubscriptions.

    >>> from canonical.launchpad.interfaces import BugNotificationLevel
    >>> subscription = target.addSubscription(sample_person, sample_person)
    >>> subscription.bug_notification_level = BugNotificationLevel.METADATA
    >>> print_subscriptions_list(target.bug_subscriptions)
    name12 METADATA NOTHING
    ubuntu-team COMMENTS NOTHING
    >>> subscriptions = target.getSubscriptions(min_bug_notification_level=
    ...                         BugNotificationLevel.COMMENTS)
    >>> print_subscriptions_list(subscriptions)
    ubuntu-team COMMENTS NOTHING


=== Structural subscriptions and indirect bug subscriptions ===
 
    >>> bug = filebug(target, 'test bug one')
    >>> indirect_subscribers = set(
    ...     subscriber.name for subscriber in bug.getIndirectSubscribers())
    >>> structural_subscribers = set(
    ...     sub.subscriber.name for sub in target.bug_subscriptions)
    >>> structural_subscribers.difference(indirect_subscribers)
    set([])
