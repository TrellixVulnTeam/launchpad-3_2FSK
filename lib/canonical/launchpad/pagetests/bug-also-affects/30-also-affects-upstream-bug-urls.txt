= Adding bugtask with bug watch =


== HTTP & HTTPS URLs ==

When adding a bug watch together with a new bugtask, you have to enter
the URL of the remote bug.

    >>> user_browser.open(
    ...    'http://bugs.launchpad.dev/firefox/+bug/4/+choose-affected-product')
    >>> user_browser.getControl('Project').value = 'gnome-terminal'
    >>> user_browser.getControl('Continue').click()
    >>> user_browser.url
    'http://bugs.launchpad.dev/firefox/+bug/4/+choose-affected-product'

    >>> user_browser.getControl('I have the URL').selected = True
    >>> user_browser.getControl(name='field.bug_url').value = (
    ...     u'http://bugzilla.gnome.org/bugs/show_bug.cgi?id=42')

At this point, just in case we change our mind, there is a cancel link
that points back to the bug page:

    >>> cancel_link = user_browser.getLink('Cancel')
    >>> cancel_link.url
    'http://bugs.launchpad.dev/firefox/+bug/4'

But we're happy, so we add the bug watch.

    >>> user_browser.getControl('Add to Bug Report').click()
    >>> user_browser.url
    'http://bugs.launchpad.dev/gnome-terminal/+bug/4'

    >>> bug_watches = find_portlet(user_browser.contents, 'Remote bug watches')
    >>> for li in bug_watches('li'):
    ...     print li.findAll('a')[1].renderContents()
    gnome-bugzilla #42

It's possible to supply an HTTPS URL, even though the bug tracker's
base URL is HTTP.

    >>> user_browser.open(
    ...  'http://bugs.launchpad.dev/firefox/+bug/4/+choose-affected-product')
    >>> user_browser.getControl('Project').value = 'netapplet'
    >>> user_browser.getControl('Continue').click()
    >>> user_browser.url
    'http://bugs.launchpad.dev/firefox/+bug/4/+choose-affected-product'

    >>> user_browser.getControl('I have the URL').selected = True
    >>> user_browser.getControl(name='field.bug_url').value = (
    ...     u'https://bugzilla.gnome.org/bugs/show_bug.cgi?id=84')
    >>> user_browser.getControl('Add to Bug Report').click()
    >>> user_browser.url
    'http://bugs.launchpad.dev/netapplet/+bug/4'

The URL was automatically converted to HTTP:

    >>> bug_watches = find_portlet(user_browser.contents, 'Remote bug watches')
    >>> for li in bug_watches('li'):
    ...     print li.findAll('a')[1]['href']
    http://bugzilla.gnome.org/bugs/show_bug.cgi?id=42
    http://bugzilla.gnome.org/bugs/show_bug.cgi?id=84

If the URL can't be recognised (i.e., we don't even know what bug
tracker type it is), an error message is displayed.

    >>> user_browser.open(
    ...    'http://bugs.launchpad.dev/firefox/+bug/4/+choose-affected-product')
    >>> user_browser.getControl('Project').value = 'alsa-utils'
    >>> user_browser.getControl('Continue').click()
    >>> user_browser.url
    'http://bugs.launchpad.dev/firefox/+bug/4/+choose-affected-product'

    >>> user_browser.getControl('I have the URL').selected = True
    >>> user_browser.getControl(name='field.bug_url').value = (
    ...     u'http://bugs.unknown/42')
    >>> user_browser.getControl('Add to Bug Report').click()
    >>> user_browser.url
    'http://bugs.launchpad.dev/firefox/+bug/4/+choose-affected-product'

    >>> for message in find_tags_by_class(user_browser.contents, 'message'):
    ...     print message.renderContents()
    There is 1 error.
    Launchpad does not recognize the bug tracker at this URL.

If the URL can be recognised as a valid bug URL, but no such tracker is
registered in Launchpad, the user will be prompted to register it first.

    >>> user_browser.getControl('I have the URL').selected = True
    >>> user_browser.getControl(name='field.bug_url').value = (
    ...     u"http://new.trac/ticket/42")
    >>> user_browser.getControl('Add to Bug Report').click()
    >>> user_browser.url
    'http://bugs.launchpad.dev/firefox/+bug/4/+choose-affected-product'

    >>> print get_feedback_messages(user_browser.contents)[0]
    The bug tracker with the given URL is not registered in Launchpad.
    Would you like to register it now?

As before, if we change our mind, we can back out if we want.

    >>> cancel_link = user_browser.getLink('Cancel')
    >>> cancel_link.url
    'http://bugs.launchpad.dev/firefox/+bug/4'

Now the user confirms he wants us to register the bug tracker for him and we
do that before creating the new bug watch.

    >>> user_browser.getControl('Register Bug Tracker').click()

The bug watch is linked, and we're redirected to the bug's page.

    >>> user_browser.url
    'http://bugs.launchpad.dev/alsa-utils/+bug/4'

The bug tracker and bug watch were added. We can see that the bugtracker
has a special name, starting with 'auto-', to indicate that it was
registered automatically.

    >>> bug_watches = find_portlet(user_browser.contents, 'Remote bug watches')
    >>> for li in bug_watches('li'):
    ...     print li.findAll('a')[1].renderContents()
    gnome-bugzilla #42
    gnome-bugzilla #84
    auto-new.trac #42

If the user does not specify the base url's schema at all, we complete it
to HTTP on their behalf:

    >>> user_browser.open(
    ...  'http://bugs.launchpad.dev/firefox/+bug/4/+choose-affected-product')
    >>> user_browser.getControl('Project').value = 'thunderbird'
    >>> user_browser.getControl('Continue').click()
    >>> user_browser.url
    'http://bugs.launchpad.dev/firefox/+bug/4/+choose-affected-product'

    >>> user_browser.getControl('I have the URL').selected = True
    >>> user_browser.getControl(name='field.bug_url').value = (
    ...     u'bugzilla.gnome.org/bugs/show_bug.cgi?id=168')
    >>> user_browser.getControl('Add to Bug Report').click()
    >>> user_browser.url
    'http://bugs.launchpad.dev/thunderbird/+bug/4'

    >>> bug_watches = find_portlet(user_browser.contents, 'Remote bug watches')
    >>> for li in bug_watches('li'):
    ...     print li.findAll('a')[1]['href']
    http://bugzilla.gnome.org/bugs/show_bug.cgi?id=168
    http://bugzilla.gnome.org/bugs/show_bug.cgi?id=42
    http://bugzilla.gnome.org/bugs/show_bug.cgi?id=84
    http://new.trac/ticket/42


== Email Addresses ==

Similar things happen when the upstream link is an email address:

    >>> user_browser.open(
    ...    'http://bugs.launchpad.dev/jokosher/+bug/12/'
    ...    '+choose-affected-product')
    >>> user_browser.getControl('Project').value = 'gnome-terminal'
    >>> user_browser.getControl('Continue').click()

    >>> user_browser.getControl('I have already emailed').selected = True
    >>> user_browser.getControl(
    ...     name='field.upstream_email_address_done').value = (
    ...         'dark-master-o-bugs@mylittlepony.com')

    >>> from canonical.launchpad.ftests.bug import print_upstream_linking_form
    >>> print_upstream_linking_form(user_browser)
    ( ) I have the URL for the upstream bug:
        [          ]
    (*) I have already emailed an upstream bug contact:
        [dark-master-o-bugs@mylittlepony.com]
    ( ) I just want to register that it is upstream right now; I
        don't have any way to link it.

The bug tracker is automatically created without asking for
confirmation.

    >>> user_browser.getControl('Add to Bug Report').click()
    >>> user_browser.url
    'http://bugs.launchpad.dev/gnome-terminal/+bug/12'

    >>> def print_remote_bug_watches_portlet(browser):
    ...     bug_watches = find_portlet(
    ...         browser.contents, 'Remote bug watches')
    ...     for li in bug_watches('li'):
    ...         print ' '.join(extract_text(li).splitlines())
    ...         bug_watch_link = li.find('a', {'class': 'link-external'})
    ...         if bug_watch_link is None:
    ...             print '  --> None'
    ...         else:
    ...             print '  --> %s' % bug_watch_link.get('href')

    >>> import re
    >>> def print_assigned_bugtasks(browser):
    ...     bugtasks = find_main_content(browser.contents).find(
    ...         'table', attrs={'class': 'listing'}).tbody(
    ...         'tr', id=re.compile('^tasksummary[0-9]+$'))
    ...     for bugtask in bugtasks:
    ...         cells = bugtask('td', recursive=False)
    ...         if len(cells) != 6:
    ...             continue
    ...         affects = extract_text(cells[1])
    ...         assignee = extract_text(cells[-2])
    ...         if 'Nobody' not in assignee:
    ...             assignee_link = cells[-2].a
    ...             if assignee_link is None:
    ...                 print '%s -->\n  %s' % (affects, assignee)
    ...             else:
    ...                 print '%s -->\n  %s\n  %s' % (
    ...                     affects, assignee, assignee_link['href'])

    >>> print_remote_bug_watches_portlet(user_browser)
    auto-dark-master-o-bugs
      --> mailto:dark-master-o-bugs@mylittlepony.com

    >>> print_assigned_bugtasks(user_browser)
    GNOME Terminal -->
      auto-dark-master-o-bugs
      mailto:dark-master-o-bugs@mylittlepony.com

    >>> user_browser.contents.count(
    ...     'mailto:dark-master-o-bugs@mylittlepony.com')
    3

To evade harvesting, the email address above is obfuscated if you're
not logged in.

    >>> anon_browser.open(user_browser.url)
    >>> print_remote_bug_watches_portlet(anon_browser)
    auto-dark-master-o-bugs
      --> None

    >>> print_assigned_bugtasks(anon_browser)
    GNOME Terminal -->
      auto-dark-master-o-bugs

    >>> anon_browser.contents.count(
    ...     'mailto:dark-master-o-bugs@mylittlepony.com')
    0
