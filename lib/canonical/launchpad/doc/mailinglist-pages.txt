= Mailing list pages =

Most of the mailing list view tests unfortunately live as page tests
currently.  See lib/canonical/launchpad/pagetests/mailinglists/*.txt


== Purging lists ==

A team mailing list can, under certain circumstances, be purged by a
Mailing List Expert or Launchpad administrator.  Purging is an assertion
that there are no data structures on the Mailman side that we care
about.  This is not enforced by Launchpad, and a purging a list invokes
no communication between the two systems.

    >>> from canonical.launchpad.ftests import mailinglists_helper
    >>> team_one, list_one = mailinglists_helper.new_team(
    ...     'team-one', with_list=True)

    >>> the_owner = team_one.teamowner.preferredemail.email

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.interfaces.launchpad import (
    ...     ILaunchpadCelebrities)
    >>> celebrities = getUtility(ILaunchpadCelebrities)
    >>> an_expert = list(celebrities.mailing_list_experts.allmembers)[0]
    >>> an_admin = list(celebrities.admin.allmembers)[0]

    >>> from canonical.launchpad.testing.systemdocs import (
    ...     create_initialized_view)

    >>> def create_view(principal, form=None):
    ...     if form is None:
    ...         method = 'GET'
    ...     else:
    ...         method = 'POST'
    ...     return create_initialized_view(
    ...         team_one, '+mailinglist',
    ...         form=form, method=method, principal=principal)

Nobody can purge an active mailing list, the team owner...

    >>> view = create_view(the_owner)
    >>> print view.label
    Mailing list configuration
    >>> view.list_can_be_purged
    False

...a mailing list expert...

    >>> view = create_view(an_expert)
    >>> view.list_can_be_purged
    False

...or a Launchpad administrator.

    >>> view = create_view(an_admin)
    >>> view.list_can_be_purged
    False

Even subverting the form will not trick Launchpad into purging the list.

    # Commit the current transaction, becuase when the view encounters an
    # error, it aborts the transaction, blowing away the setup state.
    >>> transaction.commit()

    >>> view = create_view(
    ...     an_admin,
    ...     {'field.actions.purge_list': u'Purge this Mailing List'})
    >>> print '\n'.join(view.errors)
    This list cannot be purged.

Now the team owner deactivates the mailing list.  When this completes
successfully, the mailing list will have been archived and removed on the
Mailman side.

    >>> view = create_view(an_admin)

    >>> login('no-priv@canonical.com')
    >>> list_one.deactivate()
    >>> mailinglists_helper.mailman.act()
    >>> logout()
    >>> transaction.commit()

The team owner cannot purge his list...

    >>> login(ANONYMOUS)
    >>> view = create_view(the_owner)
    >>> view.list_can_be_purged
    False

...but a Launchpad administrator, or mailing list expert can purge the mailing
list.

    >>> view = create_view(an_admin)
    >>> view.list_can_be_purged
    True

    >>> view = create_view(an_expert)
    >>> view.list_can_be_purged
    True


== Like it never existed ==

A list which has been purged acts, for all intents and purposes, as if the
mailing list doesn't exist.  For example, once purged, it can be re-requested,
but not re-activated.

    >>> list_one.purge()
    >>> view = create_view(the_owner)
    >>> view.list_can_be_requested
    True
    >>> view.list_can_be_deactivated
    False
    >>> view.list_can_be_reactivated
    False
    >>> view.list_application_can_be_cancelled
    False

Of course, while purged, the mailing list cannot be purged again.

    >>> view = create_view(an_expert)
    >>> view.list_can_be_purged
    False
