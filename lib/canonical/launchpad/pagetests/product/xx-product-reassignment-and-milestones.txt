Because milestones are associated with products or distros, reassigning
a bugtask to a different product forces the milestone value to None,
even if the user was trying to set the milestone value.

    >>> browser.addHeader("Authorization", "Basic foo.bar@canonical.com:test")
    >>> browser.open("http://localhost:9000/firefox/+bug/1/+editstatus")
    >>> browser.getControl("Product").value = "evolution"
    >>> browser.getControl("Milestone").value = ["1"]
    >>> browser.getControl("Save Changes").click()

    >>> milestone_ignored_message = (
    ...     "The milestone setting was ignored because you reassigned the bug "
    ...     "to a new product")

    >>> milestone_ignored_message in browser.contents
    True

(Revert the change we just made.)

    >>> browser.open("http://localhost:9000/evolution/+bug/1/+editstatus")
    >>> browser.getControl("Product").value = "firefox"
    >>> browser.getControl("Save Changes").click()

(The "ignore" message doesn't appear when the user didn't set a
milestone.)

    >>> milestone_ignored_message not in browser.contents
    True

Likewise, reassigning a bugtask to a different product will clear the
milestone value, if one was set.

    >>> browser.open("http://localhost:9000/firefox/+bug/1/+editstatus")
    >>> browser.getControl("Milestone").value = ["1"]
    >>> browser.getControl("Save Changes").click()

    >>> browser.open("http://localhost:9000/firefox/+bug/1/+editstatus")
    >>> browser.getControl("Product").value = "evolution"
    >>> browser.getControl("Save Changes").click()

    >>> milestone_cleared_message = (
    ...     "The bug report for evolution (upstream) was removed from the "
    ...     "Mozilla Firefox: 1.0 milestone because it was reassigned to a new "
    ...     "product")
    >>> milestone_cleared_message in  browser.contents
    True
