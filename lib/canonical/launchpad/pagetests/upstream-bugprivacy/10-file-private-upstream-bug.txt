When filing a private security bug upstream, with no upstream bug
contact, the maintainer will be subscribed to the bug instead.

    >>> browser.addHeader("Authorization", "Basic foo.bar@canonical.com:test")
    >>> browser.open(
    ...     "http://localhost:9000/firefox/+filebug-advanced")

    >>> print browser.contents
    <!DOCTYPE...
    ...The maintainer of...Mozilla Firefox...Sample Person...will be notified...
    ...

    >>> browser.getControl(name="field.title").value = (
    ...     "this is a newly created private bug")
    >>> browser.getControl(name="field.comment").value = (
    ...     "very secret info here")
    >>> browser.getControl(
    ...     "This bug is a security vulnerability").selected = True

    >>> browser.getControl("Submit Bug Report").click()

    >>> bug_id = browser.url.split("/")[-1]
    >>> print browser.url.replace(bug_id, "BUG-ID")
    http://bugs.launchpad.dev/firefox/+bug/BUG-ID


Now the reporter and the maintainer are subscribed.

    >>> from zope.component import getUtility

    >>> from canonical.launchpad.ftests import login, logout
    >>> from canonical.launchpad.interfaces import IBugSet

    >>> login("foo.bar@canonical.com")

    >>> bug = getUtility(IBugSet).get(bug_id)

    >>> sorted(subscriber.name for subscriber in bug.getDirectSubscribers())
    [u'name12', u'name16']

    >>> logout()

Of course, we're able to see the private bug we've just filed in the
bug listing.

    >>> browser.open("http://localhost:9000/firefox/+bugs")
    >>> print browser.contents.replace(bug_id, "BUG-ID")
    <!DOCTYPE...
    ...
    ...Mozilla Firefox...
    ...
    ...4 results...
    ...
    ...5...
    ...Critical...
    ...
    ...4...
    ...Medium...
    ...
    ...1...
    ...Low...
    ...
    ...BUG-ID...
    ...Undecided...

When the upstream has a security contact, the upstream will be
subscribed instead.

    >>> browser.open("http://launchpad.dev/firefox/+securitycontact")

    >>> browser.getControl("Security Contact").value = "sabdfl"
    >>> browser.getControl("Change").click()

    >>> browser.open(
    ...     "http://localhost:9000/firefox/+filebug-advanced")

    >>> print browser.contents
    <!DOCTYPE...
    ...The security contact for...Mozilla Firefox...Mark Shuttleworth...will be notified...
    ...

    >>> browser.getControl(name="field.title").value = (
    ...     "this is a newly created private bug")
    >>> browser.getControl(name="field.comment").value = (
    ...     "very secret info here")
    >>> browser.getControl(
    ...     "This bug is a security vulnerability").selected = True

    >>> browser.getControl("Submit Bug Report").click()

    >>> other_bug_id = browser.url.split("/")[-1]
    >>> print browser.url.replace(other_bug_id, "BUG-ID")
    http://bugs.launchpad.dev/firefox/+bug/BUG-ID

    >>> login("foo.bar@canonical.com")

    >>> bug = getUtility(IBugSet).get(other_bug_id)

    >>> sorted(subscriber.name for subscriber in bug.getDirectSubscribers())
    [u'name16', u'sabdfl']

    >>> logout()

== Checking basic access to the private bug pages ==

Trying to access the task edit page of a task on a private bug
redirects the anonymous user to the login page.

XXX: Brad Bollenbach, 2005-09-13: This redirect is going to the wrong
URL. See https://launchpad.net/malone/bugs/2265.

    >>> from zope.testbrowser.testing import Browser
    >>> browser = Browser()
    >>> browser.open("http://launchpad.dev/firefox/+bug/%s/+editstatus" % bug_id)
    >>> print browser.url
    http://launchpad.dev/firefox/+bug/.../+editstatus/+login

The no-privs user cannot access bug #10, because it's filed on a private bug on
which the no-privs is not an explicit subscriber.

    >>> browser = Browser()
    >>> browser.addHeader("Authorization", "Basic no-priv@canonical.com:test")
    >>> browser.open("http://launchpad.dev/firefox/+bug/%s/+editstatus" % bug_id)
    Traceback (most recent call last):
    ...
    HTTPError: HTTP Error 403: Forbidden

Sample Person accesses the bug page of a private bug. He is allowed to
view the page because he is an explicit subscriber on the bug.

    >>> browser = Browser()
    >>> browser.addHeader("Authorization", "Basic test@canonical.com:test")
    >>> browser.open("http://launchpad.dev/firefox/+bug/%s" % bug_id)
    >>> print browser.headers["Status"]
    200 Ok

He now accesses the task page of a task on a private bug; also
permitted.

    >>> browser = Browser()
    >>> browser.addHeader("Authorization", "Basic test@canonical.com:test")
    >>> browser.open("http://launchpad.dev/firefox/+bug/%s/+editstatus" % bug_id)
    >>> print browser.headers["Status"]
    200 Ok


