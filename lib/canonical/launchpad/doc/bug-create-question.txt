Bugs can be converted into questions when a person ascertains that
that is the nature of the issue. The bug's target must be adaptable
to IQuestionTarget and must use Launchpad track bugs.

    >>> from canonical.launchpad.interfaces import (
    ...     CreateBugParams, IBugSet, IBugTaskSet, IDistributionSet,
    ...     IDistributionSourcePackage, IDistroSeries, IPersonSet,
    ...     IProductSet, IProductSeries, IQuestionTarget,
    ...     ISourcePackageNameSet)

Some parts of the IQuestionTarget interface are only accessible
to a registered user. No Privileges Person will create the bugs,
Sample Person will play the role of bug contact.

    >>> no_priv = getUtility(IPersonSet).getByName('no-priv')
    >>> sample_person = getUtility(IPersonSet).getByName('name12')
    >>> login('test@canonical.com')

A Firefox bug in Debian cannot be converted to a question because the
Distribution does not use Launchpad to track bugs.

    >>> firefox_bug = getUtility(IBugSet).get(8)
    >>> target = firefox_bug.bugtasks[0].target
    >>> IQuestionTarget.providedBy(target)
    True
    >>> firefox_bug.bugtasks[0].target_uses_malone
    False

Jokosher does use Launchpad to track bugs; its bugs can be converted
to questions.

    >>> login('no-priv@canonical.com')

    >>> target = getUtility(IProductSet)['jokosher']
    >>> bug_params = CreateBugParams(
    ...     title="Print is broken", comment="blah blah blah", owner=no_priv)
    >>> bug_params.setBugTarget(product=target)
    >>> bug = target.createBug(bug_params)
    >>> bugtask = bug.bugtasks[0]
    >>> bugtask.status.title
    'New'
    >>> target.official_malone
    True
    >>> IQuestionTarget.providedBy(target)
    True

The primary use case for converting a bug into a question is when
a bug contact recognises a bug is really a question. This happens
at the UI level. For example, Sample Person would recognise that
this bug is a question while reviewing Jokosher's bugs, and choose
to make it into a question. The UI would pass Jokosher as the
QuestionTarget and Sample Person as the Person.

    >>> login('test@canonical.com')
    >>> question = bug.createQuestionFromBug(
    ...     target, sample_person, subect, comment)

    >>> question.target == target
    True
    >>> question.owner == bug.owner
    True
    >>> question.title == bug.title
    True
    >>> question.description == bug.description
    True
        
    >>> question.owner.displayname
    u'No Privileges Person'
    >>> question.title
    u'Print is broken'
    >>> question.description
    u'blah blah blah'

Once converted to a question, the bugtask status is Invalid.

    >>> bugtask.status.title
    'Invalid'
    >>> bugtask.statusexplanation
    None
    >>> # use bug.newMessage to create a comment and an email message.
    

The question is automatically linked to the original bug.

    >>> [bug_link.question.title for bug_link in question.bug_links]
    [u'Print is broken']

Subscribers to the bug are not notified that the bug is now invalid
because the issue does not, nor did it ever, concern the bug contacts.
The question owner (the bug owner) is informed by email that he asked
a question.

    >>> from canonical.launchpad.tests.mail_helpers import pop_notifications
    >>> notifications = pop_notifications()
    >>> len(notifications)
    1
    
    >>> notifications[0]['To']
    'no-priv@canonical.com'
    
    >>> notifications[0]['Subject']
    '[Question #15]: Print is broken'

A bug can only be converted to a question once.

    >>> question = bug.createQuestionFromBug(target, sample_person)
    Traceback (most recent call last):
    ...
    AssertionError: This bug was already converted to question #...    

In the rare instance where a bug has more than one bugtask, the status
for both bugtasks is set to Invalid. When a bug is really a question,
it is a question for all bugtasks; a bug cannot be a question in one
location and a bug in another.

    >>> login('no-priv@canonical.com')

    >>> ubuntu = getUtility(IDistributionSet)['ubuntu']
    >>> bug_params = CreateBugParams(
    ...     title="Print is borked", comment="blah blah blah", owner=no_priv)
    >>> bug_params.setBugTarget(distribution=ubuntu)
    >>> ubuntu_bug = getUtility(IBugSet).createBug(bug_params)

    >>> evo_ubuntu = getUtility(ISourcePackageNameSet)['evolution']
    >>> evo_bugtask = getUtility(IBugTaskSet).createTask(
    ...     bug=ubuntu_bug, distribution=ubuntu, sourcepackagename=evo_ubuntu,
    ...     owner=no_priv)
    >>> bugtasks = ubuntu_bug.bugtasks
    >>> len(bugtasks)
    2

    >>> ['%s: %s' % (bt.target.name, bt.status.title) for bt in bugtasks]
    [u'ubuntu: New', u'evolution: New']

    >>> login('test@canonical.com')
    
    >>> question = ubuntu_bug.createQuestionFromBug(ubuntu, sample_person)
    >>> question.title
    u'Print is borked'
    >>> question.target.name
    u'ubuntu'

    >>> ['%s: %s' % (bt.target.name, bt.status.title) for bt in bugtasks]
    [u'ubuntu: Invalid', u'evolution: Invalid']
    >>> [bt.statusexplanation for bt in bugtasks]
    [u'This is not a bug. It is a question.',
     u'This is not a bug. It is a question.']
