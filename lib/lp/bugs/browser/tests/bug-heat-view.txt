= Bug heat view =

Bug heat is represented as four flame icons. The quantity of flames that are
coloured is dependent on the value of the heat field. The function
bugtask_heat_html is used to render the flames.

    >>> MAX_HEAT = 5000.0
    >>> from canonical.launchpad.ftests import login, logout
    >>> from zope.security.proxy import removeSecurityProxy
    >>> from BeautifulSoup import BeautifulSoup
    >>> from lp.bugs.browser.bugtask import bugtask_heat_html
    >>> def print_flames(bugtask):
    ...     html = bugtask_heat_html(bugtask)
    ...     soup = BeautifulSoup(html)
    ...     for img in soup.span.contents:
    ...         print img['src']
    >>> login('foo.bar@canonical.com')
    >>> bug = factory.makeBug()

The maximum heat is defined as a constant in browser/bug.py. A bug with
a heat of half the maximum will result in a display of two coloured flames
and two black-and-white flames.

    >>> removeSecurityProxy(bug.default_bugtask.target).max_heat = MAX_HEAT
    >>> removeSecurityProxy(bug).heat = MAX_HEAT / 2
    >>> print_flames(bug.default_bugtask)
    /@@/flame-icon
    /@@/flame-icon
    /@@/flame-bw-icon
    /@@/flame-bw-icon

A bug with a maximum heat will display all four flames coloured.

    >>> removeSecurityProxy(bug).heat = MAX_HEAT
    >>> print_flames(bug.default_bugtask)
    /@@/flame-icon
    /@@/flame-icon
    /@@/flame-icon
    /@@/flame-icon

A heat of less than a quarter of the maximum will display no coloured flames.

    >>> removeSecurityProxy(bug).heat = 0.1 * MAX_HEAT
    >>> print_flames(bug.default_bugtask)
    /@@/flame-bw-icon
    /@@/flame-bw-icon
    /@@/flame-bw-icon
    /@@/flame-bw-icon

    >>> logout()


== Scaling Bug Heat ==

To ensure a reasonable proportion of cold and hot bugs, the number used to
calculate the number of flames to display is not a straight-forward ration.
Instead, we transform it by forcing low heat bugs to produce no flames and
scaling the hottest bugs logarithmically.

    >>> from lp.bugs.browser.bugtask import calculate_heat_display
    >>> from math import floor

Heat values less than a third of the maximum heat don't produce any flames.

    >>> print int(floor((300.0 / 1000.0) * 4))
    1
    >>> print calculate_heat_display(300.0, 1000.0)
    0

Heat values higher than a third of the max but lower than two thirds are treated
as a straightforward ratio.

    >>> print int(floor((500.0 / 1000.0) * 4))
    2
    >>> print calculate_heat_display(500.0, 1000.0)
    2

Heat values higher than two thirds of the maximum heat are scaled upwards.

    >>> print int(floor((700.0 / 1000.0) * 4))
    2
    >>> print calculate_heat_display(800.0, 1000.0)
    3

