Buildd Scoring
==============

Some tests for build jobs scoring implementation, which envolves the
analysis of each job pending in the queue. There is a summary of
actions to be performed in :

https://wiki.launchpad.canonical.com/AutoBuildManagement

specification page, but they basically are:

 * ETA to build (smaller == more points)
 * Time spent in build queue (longer == more points)
 * urgency
 * priority/seed/component (BASE|DESKTOP|SUPPORTED) [PEND]
 * Overarching policy (SECURITY/UPDATES/RELEASE) [PEND]
 * Build Dependencies [PEND]


We need to have a BuildMaster support class ready to use, see more
details about its setup in buildd-queuebuilder.txt or buildd-slavescanner.txt

  >>> from canonical.launchpad.scripts.builddmaster import BuilddMaster 
  >>> import transaction
  >>> import logging
  >>> bm = BuilddMaster(logging.getLogger(), transaction)

Let's create a 'mock' class which emulate the real behaviour of
BuildQueue entries. 

  >>> class MockBuildQueue:
  ...     def __init__(self, name, urgency, component_name):
  ...         self.name = name
  ...         self.urgency = urgency
  ...         self.component_name = component_name
  ...         self.lastscore = 0

  >>> from canonical.lp.dbschema import SourcePackageUrgency

Let's start the run-time tests:

  >>> bq0 = MockBuildQueue('Null', SourcePackageUrgency.HIGH, 'main')

So we expect lastscore of 7 points, since the initial value was 0:

 * 4 points for component 'main', 
 * and 3 points for urgency HIGH.

see the tables in launchpad/scripts/builddmaster.py at
scoreBuildQueueEntry() method.

  >>> bm.scoreBuildQueueEntry(bq0)
  >>> bq0.name, bq0.lastscore
  ('Null', 7)


We expect lastscore of 5 points, where :

 * 4 points for main components
 * 1 point for priority LOW

  >>> bq1 = MockBuildQueue('Eins', SourcePackageUrgency.LOW, 'main')
  >>> bm.scoreBuildQueueEntry(bq1)
  >>> bq1.name, bq1.lastscore
  ('Eins', 5)


We expect lastscore of 5 points, where:

* 2 points for universe component
* 3 points for priority HIGH

  >>> bq2 = MockBuildQueue('Zwei', SourcePackageUrgency.HIGH, 'universe')
  >>> bm.scoreBuildQueueEntry(bq2)
  >>> bq2.name, bq2.lastscore
  ('Zwei', 5)


We expect lastscore of 3 points, where:

* 1 point for component multiverse
* 2 points for MEDIUM priority

  >>> bq3 = MockBuildQueue('Drei', SourcePackageUrgency.MEDIUM, 
  ...                      'multiverse')
  >>> bm.scoreBuildQueueEntry(bq3)
  >>> bq3.name, bq3.lastscore
  ('Drei', 3)


We expect lastscore of 8 points, where:

* 4 points for main component
* 4 points for EMERGENCY priority

  >>> bq4 = MockBuildQueue('Vier', SourcePackageUrgency.EMERGENCY, 'main')
  >>> bm.scoreBuildQueueEntry(bq4)
  >>> bq4.name, bq4.lastscore
  ('Vier', 8)


We expect lastscore of 4 points, where:

* 3 point for restricted component
* 1 point for LOW priority

  >>> bq5 = MockBuildQueue('Funf', SourcePackageUrgency.LOW, 'restricted')
  >>> bm.scoreBuildQueueEntry(bq5)
  >>> bq5.name, bq5.lastscore
  ('Funf', 4)
