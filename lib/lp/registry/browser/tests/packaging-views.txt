Packaging views
===============

Packaging links connect a sourcepackage to a distroseries and a productseries.


Productseries linking packages
------------------------------

Distro series sourcepackages can be linked to product series using the
+addpackage named view.

    >>> from canonical.launchpad.interfaces.launchpad import (
    ...     ILaunchpadCelebrities)

    >>> ubuntu = getUtility(ILaunchpadCelebrities).ubuntu
    >>> hoary = ubuntu.getSeries('hoary')
    >>> sourcepackagename = factory.makeSourcePackageName('hot')
    >>> sourcepackage = factory.makeSourcePackage(
    ...     sourcepackagename=sourcepackagename, distroseries=hoary)
    >>> product = factory.makeProduct(name="hot", displayname='Hot')
    >>> productseries = factory.makeProductSeries(
    ...     product=product, name='hotter')
    >>> productseries.sourcepackages
    []

The view has a label and requires a distro series, source package name,
and a packaging contents.

    >>> view = create_view(productseries, '+addpackage')
    >>> print view.label
    Packaging of hotter in distributions

    >>> print view.page_title
    Packaging of hotter in distributions

    >>> print view.field_names
    ['distroseries', 'sourcepackagename', 'packaging']

    >>> print view.cancel_url
    http://launchpad.dev/hot/hotter

    >>> form = {
    ...     'field.distroseries': 'ubuntu/hoary',
    ...     'field.sourcepackagename': 'hot',
    ...     'field.packaging': 'Primary Project',
    ...     'field.actions.continue': 'Continue',
    ...     }
    >>> view = create_initialized_view(
    ...     productseries, '+addpackage', form=form)
    >>> view.errors
    []
    >>> for package in productseries.sourcepackages:
    ...     print package.name
    hot

    >>> transaction.commit()

It is an error to link a series to the same package and distro series twice.

    >>> form = {
    ...     'field.distroseries': 'ubuntu/hoary',
    ...     'field.sourcepackagename': 'hot',
    ...     'field.packaging': 'Primary Project',
    ...     'field.actions.continue': 'Continue',
    ...     }
    >>> view = create_initialized_view(
    ...     productseries, '+addpackage', form=form)
    >>> for error in view.errors:
    ...     print error
    This series is already packaged in Hoary.

Once a distro series sourcepackage is linked to a product series, no other
product series can link to it.

    >>> other_productseries = factory.makeProductSeries(
    ...     product=product, name='hotest')
    >>> form = {
    ...     'field.distroseries': 'ubuntu/hoary',
    ...     'field.sourcepackagename': 'hot',
    ...     'field.packaging': 'Primary Project',
    ...     'field.actions.continue': 'Continue',
    ...     }
    >>> view = create_initialized_view(
    ...     other_productseries, '+addpackage', form=form)
    >>> for error in view.errors:
    ...     print error
    The <a href=".../hoary/+source/hot">hot</a> package in Hoary is already
    linked to another series.

A source package name must be provided.

    >>> form = {
    ...     'field.distroseries': 'ubuntu/hoary',
    ...     'field.sourcepackagename': '',
    ...     'field.packaging': 'Primary Project',
    ...     'field.actions.continue': 'Continue',
    ...     }
    >>> view = create_initialized_view(
    ...     productseries, '+addpackage', form=form)
    >>> for error in view.errors:
    ...     print error
    ('sourcepackagename', u'Source Package Name', RequiredMissing())
    You must choose the source package name.

The +addpackage view provides the default_distroseries property. It is None
by default, but subclasses may change it.

    >>> print view.default_distroseries
    None


Productseries linking Ubuntu packages
-------------------------------------

The +ubuntupkg named view is a subclass of the +addpackage named view. It
allows the user to update the current linked Ubuntu package.

    >>> from lp.registry.browser.packaging import PackagingAddView

    >>> view = create_initialized_view(productseries, '+ubuntupkg')
    >>> isinstance(view, PackagingAddView)
    True

    >>> print view.label
    Ubuntu source packaging

    >>> print view.page_title
    Ubuntu source packaging

    >>> print view.field_names
    ['sourcepackagename']

    >>> print view.cancel_url
    http://launchpad.dev/hot/hotter

The view restricts the packaging to the current Ubuntu series.

    >>> print view.default_distroseries.name
    hoary

The sourcepackagename is None if the package link was never set. The view's
packaging history is empty, and the sourcepackagename widget is empty.

    >>> new_productseries = factory.makeProductSeries(
    ...     product=product, name='cold')
    >>> view = create_initialized_view(new_productseries, '+ubuntupkg')

    >>> print view.default_sourcepackagename
    None

    >>> print view.widgets.get('sourcepackagename')._getFormValue()
    <BLANKLINE>

    >>> print view.ubuntu_history
    []

Series have been packaged in Ubuntu do have the current information and
a history.

    >>> view = create_initialized_view(productseries, '+ubuntupkg')
    >>> print view.default_sourcepackagename.name
    hot

    >>> print view.widgets.get('sourcepackagename')._getFormValue().name
    hot

    >>> for packaging in view.ubuntu_history:
    ...     print packaging.distroseries.name
    ...     print packaging.sourcepackagename.name
    hoary hot

The package in the current Ubuntu series can be updated.

    >>> form = {
    ...     'field.sourcepackagename': 'thunderbird',
    ...     'field.actions.continue': 'Update',
    ...     }
    >>> view = create_initialized_view(
    ...     productseries, '+ubuntupkg', form=form)
    >>> view.errors
    []

    >>> for packaging in view.ubuntu_history:
    ...     print packaging.distroseries.name
    ...     print packaging.sourcepackagename.name
    hoary thunderbird

It is not an error to submit the same sourcepackagename information, the
action is ignored because there is no change

    >>> form = {
    ...     'field.sourcepackagename': 'thunderbird',
    ...     'field.actions.continue': 'Update',
    ...     }
    >>> view = create_initialized_view(
    ...     productseries, '+ubuntupkg', form=form)
    >>> view.errors
    []

    >>> for packaging in view.ubuntu_history:
    ...     print packaging.distroseries.name
    ...     print packaging.sourcepackagename.name
    hoary thunderbird

When the current Ubuntu series changes, the sourcepackagename is not known,
and a new entry can be added to the packaging history.

    >>> from lp.registry.interfaces.distroseries import DistroSeriesStatus

    >>> login('admin@canonical.com')
    >>> hoary.status = DistroSeriesStatus.CURRENT
    >>> grumpy_series = ubuntu.getSeries('grumpy')
    >>> grumpy_series.status = DistroSeriesStatus.FROZEN

    >>> a_user = factory.makePerson(name="hedgehog")
    >>> login_person(a_user)
    >>> form = {
    ...     'field.sourcepackagename': 'hot',
    ...     'field.actions.continue': 'Update',
    ...     }
    >>> view = create_initialized_view(
    ...     productseries, '+ubuntupkg', form=form)
    >>> view.errors
    []

    >>> print view.default_distroseries.name
    grumpy

    >>> print view.default_sourcepackagename
    None

    >>> for packaging in view.ubuntu_history:
    ...     print packaging.distroseries.name
    ...     print packaging.sourcepackagename.name
    grumpy hot
    hoary thunderbird


Product packages view
----------------------

The +packages named view displays the packages links to the product's series.

    >>> view = create_initialized_view(product, name='+packages')
    >>> print view.label
    Linked packages

The view defines the all_packages property used by the PackagingDeleteView
to create a vocabulary.

    >>> for package in view.all_packaging:
    ...     print package.distroseries.name, package.productseries.name
    grumpy hotter
    hoary hotter

The view provides the series_packages property that returns a list of
dicts. Each dict as a series and a list of package dicts. The package dict
contains the package and field for form actions.

    >>> for series_dict in view.series_packages:
    ...     print series_dict['series'].name
    ...     for package_dict in series_dict['packagings']:
    ...         print package_dict['packaging'].distroseries.name
    ...         print package_dict['form_id']
    ...         print package_dict['field']
    cold
    hotter
      grumpy
        delete-grumpy-hot-hotter
        <input type="hidden" name="field.packaging" .../>
      hoary
        delete-hoary-thunderbird-hotter
        <input type="hidden" name="field.packaging" .../>
    trunk

The +packages named view descends from PackagingDeleteView to provide remove
link actions for the product's linked packages.

    >>> from lp.registry.browser.packaging import PackagingDeleteView

    >>> isinstance(view, PackagingDeleteView)
    True

A packaging link can be deleted if the owner believes it is an error. The
package linked to hoary is wrong; thunderbird is the wrong sourcepackage.

    >>> [hoary_package] = [package for package in view.all_packaging
    ...                     if package.distroseries.name == 'hoary']
    >>> form = {
    ...     'field.packaging': '%s' % hoary_package.id,
    ...     'field.actions.delete_packaging': 'Delete upstream link',
    ...     }
    >>> view = create_initialized_view(product, name='+packages', form=form)
    >>> view.errors
    []
    >>> for package in view.all_packaging:
    ...     print package.distroseries.name, package.productseries.name
    grumpy hotter
