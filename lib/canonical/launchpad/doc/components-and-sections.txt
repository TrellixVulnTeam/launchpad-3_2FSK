     Components and Sections
     ^^^^^^^^^^^^^^^^^^^^^^^

Component refers to a group of packages within a DistroRelease that
are related by their need, shipment condition and/or license.

Zope auxiliary test toolchain:

 >>> from zope.interface.verify import verifyObject
 >>> from zope.component import getUtility

Importing Component content class and its interface:

 >>> from canonical.launchpad.database import Component
 >>> from canonical.launchpad.interfaces import IComponent

Get an Component instance from the current sampledata:

 >>> main = Component.get(1)

Test some attributes:

 >>> main.id, main.name
 (1, u'main')

Check if the instance corresponds to the declared interface:

 >>> verifyObject(IComponent, main)
 True

Now perform the tests for the Component ContentSet class, ComponentSet.

Check if it can be imported:

 >>> from canonical.launchpad.interfaces import IComponentSet

Check we can use the set as a utility:

 >>> component_set = getUtility(IComponentSet)

Test iteration over the sampledata default components:

 >>> for c in component_set:
 ...    c.name
 u'main'
 u'restricted'
 u'universe'
 u'multiverse'

by default, they are ordered by 'id'.

Test __getitem__ method, retrieving a component by name:

 >>> component_set['universe'].name
 u'universe'

Test get method, retrieving a component by its id:

 >>> component_set.get(2).name
 u'restricted'

New component creation for a given name:

 >>> new_comp = component_set.new('test')
 >>> new_comp.id, new_comp.name
 (5L, u'test')

Ensuring a component (if not found, create it):

 >>> component_set.ensure('test').id
 5L

 >>> component_set.ensure('test2').id
 6L


Importing Section content class and its interface:

 >>> from canonical.launchpad.database import Section
 >>> from canonical.launchpad.interfaces import ISection

Get a Section instance from the current sampledata:

 >>> base = Section.get(1)

Test some attributes:

 >>> base.id, base.name
 (1, u'base')

Check if the instance corresponds to the declared interface:

 >>> verifyObject(ISection, base)
 True

Now perform the tests for the Section ContentSet class, SectionSet.

Check if it can be imported:

 >>> from canonical.launchpad.interfaces import ISectionSet

Check we can use the set as a utility:

 >>> section_set = getUtility(ISectionSet)

Test iteration over the sampledata default sections:

 >>> for s in section_set:
 ...    s.name
 u'base'
 u'web'
 u'editors'
 u'admin'
 u'comm'
 u'debian-installer'
 u'devel'
 u'doc'
 u'games'
 u'gnome'
 u'graphics'
 u'interpreters'
 u'kde'
 u'libdevel'
 u'libs'
 u'mail'
 u'math'
 u'misc'
 u'net'
 u'news'
 u'oldlibs'
 u'otherosfs'
 u'perl'
 u'python'
 u'shells'
 u'sound'
 u'tex'
 u'text'
 u'translations'
 u'utils'
 u'x11'
 u'electronics'
 u'embedded'
 u'hamradio'
 u'science'

by default they are ordered by 'id'.

Test __getitem__ method, retrieving a section by name:

 >>> section_set['science'].name
 u'science'

Test get method, retrieving a section by its id:

 >>> section_set.get(2).name
 u'web'

New section creation for a given name:

 >>> new_sec = section_set.new('test')
 >>> new_sec.id, new_sec.name
 (36L, u'test')

Ensuring a section (if not found, create it):

 >>> section_set.ensure('test').id
 36L

 >>> section_set.ensure('test2').id
 37L
