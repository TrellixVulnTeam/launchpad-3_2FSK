There are two pages that deal with adding an upstream task:
+choose-affected-product and +add-affected-product. The former deals
with choosing which product that is affected by the bug, and the latter
display some information about the chosen product and adds the actual
bugtask.

If we add go to the page from an Ubuntu evolution task, we get
redirected to +add-affected-product directly.

    >>> user_browser.open(
    ...  'http://launchpad.dev/distros/ubuntu/+source/evolution/+bug/6')
    >>> user_browser.getLink(url='+choose-affected-product').click()
    >>> user_browser.url
    'http://launchpad.dev/distros/ubuntu/+source/evolution/+bug/6/+add-affected-product?field.product=evolution'

If this wasn't what we intended, we can go back to choose another
product.

    >>> user_browser.getLink('Choose another product').click()
    >>> user_browser.url
    'http://launchpad.dev/distros/ubuntu/+source/evolution/+bug/6/+choose-affected-product?field.product=evolution'

    >>> user_browser.getControl('Product').value
    'evolution'

    >>> user_browser.getControl('Product').value = 'thunderbird'
    >>> user_browser.getControl('Continue').click()

Since Thunderbird doesn't use  Malone, there's a widget for entering a bug URL.

    >>> user_browser.getControl('URL').value
    ''

If we leave it empty, a notification will be shown when trying to add
the task, asking us to confirm that we want to add the task without a
bug watch.

    >>> user_browser.getControl('Indicate bug in Mozilla Thunderbird').click()
    >>> user_browser.url
    'http://launchpad.dev/distros/ubuntu/+source/evolution/+bug/6/+add-affected-product'

    >>> for notification in find_tags_by_class(user_browser.contents, 'message'):
    ...     print notification.renderContents()
    Mozilla Thunderbird doesn't use Malone as its bug tracker...

Let's confirm adding the task.

    >>> user_browser.getControl('Yes').click()
    >>> user_browser.url
    'http://launchpad.dev/products/thunderbird/+bug/6'

Let's add the evolution task as well.

    >>> user_browser.open(
    ...  'http://launchpad.dev/distros/ubuntu/+source/evolution/+bug/6')
    >>> user_browser.getLink(url='+choose-affected-product').click()
    >>> user_browser.url
    'http://launchpad.dev/distros/ubuntu/+source/evolution/+bug/6/+add-affected-product?field.product=evolution'

    >>> user_browser.getControl('Indicate bug in Evolution').click()

    >>> user_browser.url
    'http://launchpad.dev/products/evolution/+bug/6'

If we try to add an upstream task without specifying a product:

    >>> user_browser.addHeader('Authorization', 'Basic test@canonical.com:test')
    >>> user_browser.open(
    ...     'http://launchpad.dev/debian/+source/mozilla-firefox/+bug/3')
    >>> user_browser.getLink(url='+choose-affected-product').click()
    >>> user_browser.url
    'http://launchpad.dev/debian/+source/mozilla-firefox/+bug/3/+choose-affected-product'

    >>> user_browser.getControl('Product').value
    ''
    >>> user_browser.getControl('Continue').click()
    >>> user_browser.url
    'http://launchpad.dev/debian/+source/mozilla-firefox/+bug/3/+choose-affected-product'

We get a nice error message.

  >>> 'Required input is missing' in user_browser.contents
  True

Now we add an upstream task, while adding this new bugtask we can also
specify a bug watch. If we inadvertently left some leading or trailing white
space in the bug URL it will be stripped.

  >>> user_browser.getControl('Product').value = 'alsa-utils'
  >>> user_browser.getControl('Continue').click()

  >>> user_browser.getControl('URL').value = (
  ...     '   https://bugzilla.mozilla.org/show_bug.cgi?id=1234   ')
  >>> user_browser.getControl('Indicate bug in alsa-utils').click()

Redirected to the newly created bugtask page

  >>> user_browser.url
  'http://launchpad.dev/alsa-utils/+bug/3'

  >>> print user_browser.contents
  <...
  ...alsa-utils (upstream)...

And we can check that the remote bug number was stripped.

  >>> user_browser.getLink('mozilla.org #1234')
  <Link text='Linked to [IMG] mozilla.org #1234'
    url='https://bugzilla.mozilla.org/show_bug.cgi?id=1234'>

And now we try to add the same upstream again.

    >>> user_browser.getLink(url='+choose-affected-product').click()
    >>> user_browser.url
    'http://launchpad.dev/alsa-utils/+bug/3/+choose-affected-product'

    >>> user_browser.getControl('Product').value = 'alsa-utils'
    >>> user_browser.getControl('Continue').click()
    >>> user_browser.url
    'http://launchpad.dev/alsa-utils/+bug/3/+choose-affected-product'

We get a nice error message.

    >>> print user_browser.contents
    <...A fix for this bug has already been requested for alsa-utils...

We can add another upstream to the bug.

    >>> user_browser.getControl('Product').value = 'evolution'
    >>> user_browser.getControl('Continue').click()
    >>> user_browser.getControl('Indicate bug in Evolution').click()
    >>> user_browser.url
    'http://launchpad.dev/evolution/+bug/3'

But if we try to change it to the target of an existing upstream bugtask,
our validator springs into action.

    >>> user_browser.getLink("evolution (upstream)").click()
    >>> user_browser.url
    'http://launchpad.dev/evolution/+bug/3/+editstatus'
    >>> user_browser.getControl('Product').value = 'alsa-utils'
    >>> user_browser.getControl('Save Changes').click()
    >>> user_browser.url
    'http://launchpad.dev/evolution/+bug/3/+editstatus'
    >>> print user_browser.contents
    <...
    ...Please fix them and try again...
    ...
    ...A fix for this bug has already been requested for alsa-utils...
    ...
