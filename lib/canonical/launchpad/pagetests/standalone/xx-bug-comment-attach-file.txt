Bug commenting and attaching files is done on the same form.

When a comment is submitted, the attachment is optional. Accessing the
comment form requires launchpad.Edit permission on the bugtask. In this
case, it means being logged in.

    >>> anon_browser.open(
    ...     "http://launchpad.dev/products/firefox/+bug/1/+addcomment-form")
    Traceback (most recent call last):
      ..
    Unauthorized: ...launchpad.Edit...

So let's login and add a comment.

    >>> import re
    >>> from BeautifulSoup import BeautifulSoup

    >>> def get_feedback_messages(browser):
    ...     soup = BeautifulSoup(browser.contents)
    ...     feedback_messages = []
    ...     for div_tag in soup('div', re.compile('message')):
    ...         feedback_messages.append(div_tag.string)
    ...
    ...     return feedback_messages

    >>> user_browser.open(
    ...     "http://launchpad.dev/products/firefox/+bug/1/+addcomment-form")
    >>> user_browser.getControl("Comment").value = "a test comment"
    >>> user_browser.getControl("Save Changes").click()

    >>> print user_browser.url
    http://launchpad.dev/products/firefox/+bug/1

    >>> get_feedback_messages(user_browser)
    ['Thank you for your comment.']

When an attachment is submitted, the comment is optional. A description,
however, is required.

    >>> from StringIO import StringIO

    >>> user_browser.open(
    ...     "http://launchpad.dev/products/firefox/+bug/1/+addcomment-form")
    >>> print user_browser.getControl("Include attachment")
    >>> user_browser.getControl("Include attachment").selected = True
    >>> user_browser.getControl("File").add_file(
    ...     StringIO("a test file"), "text/plain", "foo.txt")
    >>> user_browser.getControl("Save Changes").click()

    >>> print user_browser.url
    http://launchpad.dev/products/firefox/+bug/1/+addcomment

    >>> get_feedback_messages(user_browser)
    ['An attachment requires a description.']

    >>> user_browser.getControl("Include attachment").selected = True
    >>> user_browser.getControl("File").add_file(
    ...     StringIO("a test file"), "text/plain", "foo.txt")
    >>> user_browser.getControl("Description").value = "some file"
    >>> user_browser.getControl("Save Changes").click()

    >>> get_feedback_messages(user_browser)
    ['Attachment foo.txt added to bug.']

A comment and attachment can be submitted in one request.

    >>> user_browser.open(
    ...     "http://launchpad.dev/products/firefox/+bug/1/+addcomment-form")
    >>> user_browser.getControl("Comment").value = "this is a comment"
    >>> user_browser.getControl("Include attachment").selected = True
    >>> user_browser.getControl("File").add_file(
    ...     StringIO("some file"), "text/plain", "bar.txt")
    >>> user_browser.getControl("Description").value = "some file"
    >>> user_browser.getControl("Save Changes").click()

    >>> print user_browser.url
    http://launchpad.dev/products/firefox/+bug/1

    >>> get_feedback_messages(user_browser)
    ['Thank you for your comment.', 'Attachment bar.txt added to bug.']

You cannot upload an empty attachment.

    >>> user_browser.open(
    ...     "http://launchpad.dev/products/firefox/+bug/1/+addcomment-form")
    >>> user_browser.getControl("Include attachment").selected = True
    >>> user_browser.getControl("File").add_file(
    ...     StringIO(""), "text/plain", "foo.txt")
    >>> user_browser.getControl("Save Changes").click()

    >>> print user_browser.url
    http://launchpad.dev/products/firefox/+bug/1/+addcomment

    >>> get_feedback_messages(user_browser)
    ['Cannot upload empty file.']

You cannot add a comment without a subject.

    >>> user_browser.open(
    ...     "http://launchpad.dev/products/firefox/+bug/1/+addcomment-form")
    >>> user_browser.getControl("Subject").value = ""
    >>> user_browser.getControl("Save Changes").click()

(The error message is duplicated because it's shown once at the top of
the page and once under the field. Ideally, it should not be
duplicated.)

    >>> get_feedback_messages(user_browser)
    ['Required input is missing.', 'Required input is missing.']

The size of uploaded files is limited with the max_bug_attachment_size
option in launchpad.conf. In our example, the size is limited to 1024.

    >>> from canonical.config import config

    >>> print config.launchpad.max_bug_attachment_size
    1024

    >>> user_browser.open(
    ...     "http://launchpad.dev/products/firefox/+bug/1/+addcomment-form")
    >>> user_browser.getControl("Include attachment").selected = True
    >>> user_browser.getControl("File").add_file(
    ...     StringIO("x"*1025), "text/plain", "foo.txt")
    >>> user_browser.getControl("Save Changes").click()

    >>> get_feedback_messages(user_browser)
    ['Cannot upload files larger than 1024 bytes']

The comment/attach file form is available from a link on the bug page.

    >>> user_browser.open(
    ...     "http://launchpad.dev/products/firefox/+bug/1")
    >>> user_browser.getLink("Comment/Attach File").click()
    >>> user_browser.getControl("Include attachment").selected = True
    >>> user_browser.getControl("File").add_file(
    ...     StringIO("a test file"), "text/plain", "foo.txt")
    >>> user_browser.getControl("Description").value = "some file"
    >>> user_browser.getControl("Save Changes").click()

    >>> print user_browser.url
    http://launchpad.dev/products/firefox/+bug/1

    >>> get_feedback_messages(user_browser)
    ['Attachment foo.txt added to bug.']

And directly on the bug page (after the comments.)

    >>> user_browser.open(
    ...     "http://launchpad.dev/products/firefox/+bug/1")
    >>> user_browser.getControl("Subject") is not None
    True
    >>> user_browser.getControl("Comment", index=3).value = "a test comment"
    >>> user_browser.getControl("Include attachment") is not None
    True
    >>> user_browser.getControl("File") is not None
    True
    >>> user_browser.getControl("patch") is not None
    True
    >>> user_browser.getControl("Description") is not None
    True
    >>> user_browser.getControl("Save Changes", index=3).click()

    >>> print user_browser.url
    http://launchpad.dev/products/firefox/+bug/1

    >>> get_feedback_messages(user_browser)
    ['Thank you for your comment.']