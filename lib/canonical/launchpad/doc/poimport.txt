PO Imports
----------

The tale of a PO template and a PO file and how they get imported into
Rosetta.

    >>> from canonical.launchpad.ftests.harness import LaunchpadFunctionalTestSetup
    >>> from canonical.librarian.ftests.harness import LibrarianTestSetup

    >>> LaunchpadFunctionalTestSetup(dbuser='poimport').setUp()
    >>> LibrarianTestSetup().setUp()


Here's some database classes we'll be using.

    >>> from canonical.launchpad.database import Person
    >>> from canonical.launchpad.database import POTemplate
    >>> from canonical.launchpad.database import POFile
    >>> from canonical.launchpad.utilities import LaunchpadCelebrities

We need this for the Librarian to work properly.

    >>> import transaction

Then, let's get a handle to our mailer. This is the thing we'll examine to show
what email has been sent, to whom, and what the body of the message contains:

    >>> import email
    >>> from canonical.launchpad.mail import stub

Here's a fake logger to capture any errors that happen.

    >>> class FakeLogger:
    ...     def log(self, *stuff, **kw):
    ...         print 'log>', ' '.join(stuff)
    ...
    ...         if 'exc_info' in kw:
    ...             import sys
    ...             import traceback
    ...             exception = traceback.format_exception(*sys.exc_info())
    ...             for thing in exception:
    ...                 for line in thing.splitlines():
    ...                     self.log(line)
    ...
    ...     warning = log

Now, is time to create the new potemplate

    >>> from canonical.launchpad.database import ProductRelease
    >>> release = ProductRelease.get(3)
    >>> release.productseries.product.name
    u'firefox'
    >>> series = release.productseries
    >>> from canonical.launchpad.database import POTemplateNameSet
    >>> ptn = POTemplateNameSet().new('firefox', 'Whatever')

    >>> from canonical.launchpad.database import POTemplateSubset
    >>> subset = POTemplateSubset(productseries=series)

Here's the person who'll be doing the import.

    >>> person = Person.get(1)

    >>> potemplate = subset.new(
    ...     potemplatename=ptn,
    ...     contents='# Not much.',
    ...     owner=person)

We should disable the pending import status added by the IPOTemplate
creation because the current data is not valid.

    >>> from canonical.lp.dbschema import RosettaImportStatus
    >>> from canonical.launchpad.interfaces import IRawFileData
    >>> IRawFileData(potemplate).rawimportstatus = RosettaImportStatus.IGNORE

And this is the file that'll get imported.

    >>> potemplate_contents = r'''
    ... msgid ""
    ... msgstr ""
    ... "Content-Type: text/plain; charset=CHARSET\n"
    ... "Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\n"
    ...
    ... msgid "foo"
    ... msgstr ""
    ...
    ... msgid "bar"
    ... msgstr ""
    ...
    ... #: test.c:13
    ... msgid "baz"
    ... msgstr ""
    ...
    ... #, c-format
    ... msgid "Foo %s"
    ... msgstr ""
    ...
    ... #, c-format
    ... msgid "Singular %d"
    ... msgid_plural "Plural %d"
    ... msgstr[0] ""
    ... msgstr[1] ""
    ... '''

Importing happens in two steps. First, we attach the file data to the
template. The potemplate is always "published"

    >>> potemplate.attachRawFileData(potemplate_contents, True, person)

The file data is stored in the Librarian, so we have to commit the transaction
to make sure it's stored properly.

    >>> transaction.commit()

Second, we tell the PO template to import from the file data it has but first
check the number of activities the 'person' has done to be sure that Karma is
working.

    >>> person.activities.count()
    0
    >>> potemplate.doRawImport(FakeLogger())

The number of activities should be higher.

    >>> person.activities.count()
    1

Once we've done this, the correct message IDs should show up in the template.

    >>> potmsgsets = list(potemplate.getPOTMsgSets())
    >>> [potmsgset.primemsgid_.msgid for potmsgset in potmsgsets]
    [u'foo', u'bar', u'baz', u'Foo %s', u'Singular %d']

The file references field should be there

    >>> potmsgsets[2].filereferences
    u'test.c:13'

Now let's get a PO file to import.

    >>> pofile = potemplate.getOrCreatePOFile('cy')

It's newly created, so it has no message sets yet.

    >>> pofile.currentMessageSets().count()
    0

And the statistics reflect it.

    >>> pofile.currentCount()
    0

Here are the contents of the file we'll be importing.
It has some validation errros.

    >>> pofile_with_errors = r'''
    ... msgid ""
    ... msgstr ""
    ... "PO-Revision-Date: 2005-06-03 19:41+0100\n"
    ... "Last-Translator: Carlos Perello Marin <carlos@canonical.com>\n"
    ... "Content-Type: text/plain; charset=UTF-8\n"
    ... "Plural-Forms: nplurals=4; plural=n==1) ? 0 : n==2 ? 1 : (n != 8 || n != 11) ? 2 : 3;\n"
    ...
    ... msgid "foo"
    ... msgstr "blah"
    ...
    ... #, fuzzy
    ... msgid "bar"
    ... msgstr "heffalump"
    ...
    ... msgid "balloon"
    ... msgstr "blah"
    ...
    ... #, c-format
    ... msgid "Foo %s"
    ... msgstr "blah %i"
    ...
    ... #, c-format
    ... msgid "Singular %d"
    ... msgid_plural "Plural %d"
    ... msgstr[0] "Foos %d"
    ... msgstr[1] "Bars %d"
    ... msgstr[2] "Welsh power! %d"
    ... msgstr[3] "We have four! %d"
    ... '''

This is the dbschema that controls the validation of a translation.
    >>> from canonical.lp.dbschema import TranslationValidationStatus

The process of importing a PO file is much like that of importing a PO
template. Remember, we need to tell the system that this po file is a
"published" one.

    >>> pofile.attachRawFileData(pofile_with_errors, True, person)
    >>> transaction.commit()
    >>> pofile.doRawImport(FakeLogger())

The number of activities performed is...

    >>> person.activities.count()
    2

And the statistics reflect it.

    >>> pofile.currentCount()
    3

Here's a current message set: i.e. it has a corresponding current message set
in the PO template. It should not be publishedfuzzy.

    >>> messageSets = list(pofile.currentMessageSets())
    >>> messageSets[0].potmsgset.primemsgid_.msgid
    u'foo'
    >>> messageSets[0].publishedfuzzy
    False

And should be accepted by our validator.

    >>> published = messageSets[0].getPublishedSubmission(0)
    >>> published.validationstatus == TranslationValidationStatus.OK
    True

And here's a non-current message set. It shouldn't be fuzzy either.

    >>> messageSets = list(pofile.getPOMsgSetsNotInTemplate())
    >>> messageSets[0].potmsgset.primemsgid_.msgid
    u'balloon'
    >>> messageSets[0].publishedfuzzy
    False

This message set should be fuzzy, however.

    >>> messageSet = pofile.getPOMsgSet(u'bar')
    >>> messageSet.publishedfuzzy
    True

And as we don't have a translation for it over the web, it should
be the same for the active translation.

    >>> messageSet.isfuzzy
    True

And this one should have the validation status with an error.

    >>> messageSet = pofile.getPOMsgSet(u'Foo %s')
    >>> published = messageSet.getPublishedSubmission(0)
    >>> published.validationstatus == TranslationValidationStatus.UNKNOWNERROR
    True

Check that the plural form was imported correctly.

    >>> messageSet = pofile.getPOMsgSet(u'Singular %d')
    >>> published = messageSet.getPublishedSubmission(0)
    >>> published.validationstatus == TranslationValidationStatus.OK
    True
    >>> messageSet.published_texts
    [u'Foos %d', u'Bars %d', u'Welsh power! %d', u'We have four! %d']

The owner for those translations should be Carlos

    >>> published.person.displayname
    u'Carlos Perell\xf3 Mar\xedn'

Now, is time to check the notification email.

    >>> transaction.commit()

    >>> len(stub.test_emails)
    1

    >>> from_addr, to_addrs, raw_message = stub.test_emails.pop()
    >>> to_addrs
    ['mark@hbd.com']
    >>> msg = email.message_from_string(raw_message)
    >>> msg["Subject"]
    'Translation problems - Welsh (cy) - firefox in Mozilla Firefox\n\tMilestone Releases'
    >>> print msg.get_payload(decode=True)
    Hello Mark Shuttleworth,
    <BLANKLINE>
    On ... (just requested), you uploaded 5
    Welsh (cy) translations for firefox in Mozilla Firefox Milestone Releases in Rosetta.
    <BLANKLINE>
    There were problems with 1 of these translations.
    <BLANKLINE>
    4.  [msg 4]
    "format specifications in 'msgid' and 'msgstr' for argument 1 are not the same":
    <BLANKLINE>
    #, c-format
    msgid "Foo %s"
    msgstr "blah %i"
    <BLANKLINE>
    <BLANKLINE>
    <BLANKLINE>
    The other 4 translations have been accepted.
    <BLANKLINE>
    ...

Here are the contents of another file we'll be importing. It has no errors.

    >>> rosetta_experts = LaunchpadCelebrities().rosetta_expert
    >>> pofile_without_errors = r'''
    ... msgid ""
    ... msgstr ""
    ... "PO-Revision-Date: 2005-06-03 20:41+0100\n"
    ... "Last-Translator: Foo <no-priv@canonical.com>\n"
    ... "Content-Type: text/plain; charset=UTF-8\n"
    ... "Plural-Forms: nplurals=4; plural=n==1) ? 0 : n==2 ? 1 : (n != 8 || n != 11) ? 2 : 3;\n"
    ...
    ... msgid "foo"
    ... msgstr "blah"
    ... '''
    >>> pofile.attachRawFileData(pofile_without_errors, True, rosetta_experts)
    >>> transaction.commit()
    >>> pofile.doRawImport(FakeLogger())

And the statistics reflect it.

    >>> pofile.currentCount()
    1
    >>> pofile.updatesCount()
    0
    >>> pofile.rosettaCount()
    1

Check the notification email about the success of this import without errors.

    >>> transaction.commit()

    >>> len(stub.test_emails)
    1

    >>> from_addr, to_addrs, raw_message = stub.test_emails.pop()
    >>> msg = email.message_from_string(raw_message)
    >>> msg["Subject"]
    'Translation import - Welsh (cy) - firefox in Mozilla Firefox\n\tMilestone Releases'
    >>> print msg.get_payload(decode=True)
    Hello Rosetta Administrators,
    <BLANKLINE>
    ...

Now, is time to test a .pot import when we don't have any header.

    >>> potemplate_contents = r'''
    ... msgid "foo"
    ... msgstr ""
    ... '''
    >>> potemplate.attachRawFileData(potemplate_contents, True, person)
    >>> transaction.commit()
    >>> potemplate.doRawImport(FakeLogger())

And the number of activities performed is...

    >>> person.activities.count()
    3

The header should be the old one as this one does not have any:

    >>> print potemplate.header
    Content-Type: text/plain; charset=CHARSET
    Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;


Another test, try to import a .po file that is older than previous import...

    >>> print pofile.header
    PO-Revision-Date: 2005-06-03 20:41+0100
    ...

    >>> pofile_contents = r'''
    ... msgid ""
    ... msgstr ""
    ... "PO-Revision-Date: 2005-05-03 19:41+0100\n"
    ... "Last-Translator: Carlos Perello Marin <carlos@canonical.com>\n"
    ... "Content-Type: text/plain; charset=UTF-8\n"
    ... "Plural-Forms: nplurals=4; plural=n==1) ? 0 : n==2 ? 1 : (n != 8 || n != 11) ? 2 : 3;\n"
    ...
    ... msgid "foo"
    ... msgstr "blah"
    ... '''
    >>> pofile.attachRawFileData(pofile_contents, True, person)
    >>> transaction.commit()
    >>> pofile.doRawImport(FakeLogger())
    log> Got an old version for Welsh (cy) translation of firefox in Mozilla Firefox Milestone Releases

The rawimportstatus should be ignored.

    >>> pofile.rawimportstatus == RosettaImportStatus.IGNORE
    True

The number of activities shouldn't change as the import was rejected.

    >>> person.activities.count()
    3

And the statistics reflect it.

    >>> pofile.currentCount()
    1
    >>> pofile.updatesCount()
    0
    >>> pofile.rosettaCount()
    0

And the date should be the old one

    >>> print pofile.header
    PO-Revision-Date: 2005-06-03 20:41+0100
    ...

Check to be sure that we notify when a msgid_Plural is changed without touch
the msgid

    >>> pofile_content = r'''
    ... msgid ""
    ... msgstr ""
    ... "PO-Revision-Date: 2005-06-04 20:41+0100\n"
    ... "Last-Translator: Foo <no-priv@canonical.com>\n"
    ... "Content-Type: text/plain; charset=UTF-8\n"
    ... "Plural-Forms: nplurals=2; plural=n==1 ? 0;\n"
    ...
    ... #, c-format
    ... msgid "Singular %d"
    ... msgid_plural "Plurals %d"
    ... msgstr[0] ""
    ... msgstr[1] ""
    ... '''
    >>> pofile.attachRawFileData(pofile_content, True, rosetta_experts)
    >>> transaction.commit()
    >>> pofile.doRawImport(FakeLogger())

Now, is time to check the notification email.

    >>> transaction.commit()

    >>> len(stub.test_emails)
    1

    >>> from_addr, to_addrs, raw_message = stub.test_emails.pop()
    >>> msg = email.message_from_string(raw_message)
    >>> msg["Subject"]
    'Translation problems - Welsh (cy) - firefox in Mozilla Firefox\n\tMilestone Releases'
    >>> print msg.get_payload(decode=True)
    Hello Rosetta Administrators,...
    ...
    0.  [msg 0]
    "The msgid_Plural field has changed since last time this .po file was
    generated, please notify this error to rosetta@ubuntu.com":
    <BLANKLINE>
    #, c-format
    msgid "Singular %d"
    msgid_plural "Plurals %d"
    msgstr[0] ""
    msgstr[1] ""
    ...

Finally, we need to test that the script is being executed without problems.
We tested already that the functionality works. Now it's time to know if the
cronscript has any problem.

First, remove the recently seen cache

    >>> from canonical.launchpad.scripts.po_import import ImportProcess
    >>> import os, os.path
    >>> if os.path.exists(ImportProcess.POIMPORT_RECENTLY_SEEN_PICKLE):
    ...     os.unlink(ImportProcess.POIMPORT_RECENTLY_SEEN_PICKLE)

    >>> potemplate.rawimportstatus = RosettaImportStatus.PENDING
    >>> potemplate.sync()
    >>> pofile.rawimportstatus = RosettaImportStatus.PENDING
    >>> pofile.sync()
    >>> transaction.commit()

    >>> import subprocess, sys
    >>> process = subprocess.Popen([
    ...     sys.executable, 'cronscripts/rosetta-poimport.py',
    ...     ], stdin=subprocess.PIPE, stdout=subprocess.PIPE,
    ...     stderr=subprocess.STDOUT
    ...     )
    >>> (output, empty) = process.communicate()
    >>> print output
    INFO    Importing: Template "firefox" in Mozilla Firefox Milestone Releases
    WARNING No header found in this pofile
    INFO    Importing: Welsh (cy) translation of firefox in Mozilla Firefox Milestone Releases
    <BLANKLINE>

If we run it again, the files won't import because the importer has seen
them too recently.

    >>> potemplate.rawimportstatus = RosettaImportStatus.PENDING
    >>> potemplate.sync()
    >>> pofile.rawimportstatus = RosettaImportStatus.PENDING
    >>> pofile.sync()
    >>> transaction.commit()

    >>> process = subprocess.Popen([
    ...     sys.executable, 'cronscripts/rosetta-poimport.py',
    ...     ], stdin=subprocess.PIPE, stdout=subprocess.PIPE,
    ...     stderr=subprocess.STDOUT
    ...     )
    >>> (output, empty) = process.communicate()
    >>> print output
    <BLANKLINE>

Remove the cache so it doesn't confuse anything

    >>> os.unlink(ImportProcess.POIMPORT_RECENTLY_SEEN_PICKLE)


It's time to test the import queue.

Here, we are going to test that if a file is imported twice, both are imported
following the order the users uploaded them.

    >>> first_pofile_content = r'''
    ... msgid ""
    ... msgstr ""
    ... "PO-Revision-Date: 2005-06-04 20:41+0100\n"
    ... "Last-Translator: Foo <no-priv@canonical.com>\n"
    ... "Content-Type: text/plain; charset=UTF-8\n"
    ...
    ... msgid "Foo"
    ... msgstr "Bar"
    ... '''

    >>> second_pofile_content = r'''
    ... msgid ""
    ... msgstr ""
    ... "PO-Revision-Date: 2005-06-04 21:41+0100\n"
    ... "Last-Translator: Jordi Mallach <jordi@canonical.com>\n"
    ... "Content-Type: text/plain; charset=UTF-8\n"
    ...
    ... msgid "Foo"
    ... msgstr "Bars"
    ... '''

This is needed to use the translation import queue.

    >>> from canonical.launchpad.interfaces import ITranslationImportQueue
    >>> translation_import_queue = getUtility(ITranslationImportQueue)

The queue is empty at this point.

    >>> len(translation_import_queue)
    0

Set the path of the IPOFile to a not None value.

    >>> pofile.path = 'po/cy.po'
    >>> pofile.sync()

Attach the first version of the file.

    >>> entry = translation_import_queue.addOrUpdateEntry(
    ...     pofile.path, first_pofile_content, False, rosetta_experts,
    ...     sourcepackagename=pofile.potemplate.sourcepackagename,
    ...     distrorelease=pofile.potemplate.distrorelease,
    ...     productseries=pofile.potemplate.productseries)
    >>> transaction.commit()

It's in the queue now.

    >>> len(translation_import_queue)
    1

For the second version, we need a new importer, in this case, Jordi.

    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> person_set = getUtility(IPersonSet)
    >>> jordi = person_set.getByName('jordi')

Attach the second version of the file.

    >>> entry = translation_import_queue.addOrUpdateEntry(
    ...     pofile.path, second_pofile_content, False, jordi,
    ...     sourcepackagename=pofile.potemplate.sourcepackagename,
    ...     distrorelease=pofile.potemplate.distrorelease,
    ...     productseries=pofile.potemplate.productseries)
    >>> transaction.commit()

It's in the queue now.

    >>> len(translation_import_queue)
    2

Do the final import.

    >>> process = subprocess.Popen([
    ...     sys.executable, 'cronscripts/rosetta-poimport.py',
    ...     ], stdin=subprocess.PIPE, stdout=subprocess.PIPE,
    ...     stderr=subprocess.STDOUT
    ...     )
    >>> (output, empty) = process.communicate()
    >>> print output
    INFO...
    ...
    INFO    Importing: Welsh (cy) translation of firefox in Mozilla Firefox Milestone Releases
    <BLANKLINE>
    >>> transaction.commit()

Only the first entry has been imported and thus, we still have one entry
in the queue.

    >>> len(translation_import_queue)
    1

    >>> LibrarianTestSetup().tearDown()
    >>> LaunchpadFunctionalTestSetup().tearDown()


