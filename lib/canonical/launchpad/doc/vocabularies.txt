Introduction
============

Vocabularies are lists of terms. In Launchpad's Component Architecture (CA), a
vocabulary is a list of terms that a widget (normally a selection style widget)
"speaks", i.e. its allowed values.

This document is about some of the vocabularies found in Launchpad.

Values, Tokens, and Titles
==========================

In Launchpad, we generally use "tokenized vocabularies." Each term in a
vocabulary has a value, token and title. In human terms, a term would be
rendered in a select widget like this:

<option value="$token">$title</option>

The Value is probably the data you would store in your DB. The Token is used to
uniquely identify a Term, and the Title is the thing you display to the user.

Have a look at a few of the vocabularies below for clarification.

Launchpad Vocabularies
======================

There are two kinds of vocabularies in Launchpad: enumerable and
non-enumerable. In human terms, enumerable vocabularies are short and sweet
enough to render in a select widget, where non-enumerable vocabularies require
a special query interface to make it easy to choose just one or a couple of
options from several hundred, or several thousand, or more.

Vocabularies should not be imported - they can be retrieved from the
vocabulary registry.

    >>> from zope.schema.vocabulary import getVocabularyRegistry
    >>> vocabulary_registry = getVocabularyRegistry()
    >>> product_vocabulary = vocabulary_registry.get(None, "Product")

Enumerable Vocabularies
=======================

Creating a new Enumeratable Vocabulary based on an existent dbschema
constant:

    >>> from canonical.lp import dbschema
    >>> from canonical.launchpad.vocabularies import vocab_factory
    >>> PackagingVocabulary = vocab_factory(dbschema.Packaging)
    
The right place to do it is in the file vocabularies/dbschema.py.
Note: don't forget to registry your brand new instance for zope lookup
in configure.zcml.

o PackagingVocabulary - reflects the available constants for
  Packaging.packaging field.


Non-Enumerable Vocabularies
===========================

Although you technically *could* iterate over these, in launchpad it
would be stupid to do so due to their expected size on the production
database.

o ProductVocabulary - the list of selectable products. Results are
  ordered by displayname.

    >>> product_vocabulary = vocabulary_registry.get(None, "Product")
    >>> gnome_products = product_vocabulary.search("gnome")
    >>> l = [product_term.title for product_term in gnome_products]
    >>> l[:2]
    [u'The Evolution Groupware Application', u'The GNOME Terminal Emulator']
    >>> l[2:4]
    [u'The Gnome Panel Applets', u'Ubuntu']
    >>> l[4:]
    [u'python gnome2 dev']
    >>> arch = product_vocabulary.getTermByToken("arch-mirrors")
    >>> arch.title 
    u'Arch archive mirrors'

o PersonVocabulary - all people and teams. Results are ordered by familyname,
  givenname, displayname

    >>> vocab = vocabulary_registry.get(None, "Person")
    >>> stuff = vocab.search('team')
    >>> [t.token for t in stuff]
    ['name21', 'name18', 'name17', 'name19', 'name20']

o ValidPerson - all 'valid' people. This is currently defined as people
  with a password.

    >>> vocab = vocabulary_registry.get(None, "ValidPerson")
    >>> stuff = vocab.search('team')
    >>> [t.token for t in stuff]
    []
    >>> stuff = vocab.search('bishop')
    >>> [t.token for t in stuff]
    ['stub']

o ValidOwner - all 'valid' person or team in Launchpad context, able to 
  own an entity (Product, Project, Team, Package, etc) reflecting  
  "Ubuntu Membership" specification.

   XXX cprov 20050128
   Now, ValidOwner simply extends Person, i.e., returns all valid person
   or team, so we have the same usage as PersonVocabulary

    >>> vocab = vocabulary_registry.get(None, "ValidOwner")
    >>> stuff = vocab.search('team')
    >>> [t.token for t in stuff]
    ['name21', 'name18', 'name17', 'name19', 'name20']

o ValidGPGKey - all LP valid GPG key for a given person, it user FTI
  to query on Person table and return the respective rows from GPGKey
  table.

   XXX cprov 20050227
   The concept of 'Valid GPGKey' is not well defined yet.

    >>> vocab = vocabulary_registry.get(None, "ValidGPGKey")
    >>> stuff = vocab.search('mark')
    >>> [t.token for t in stuff]
    ['1']


XXX: document more vocabularies here, particularly when they break!
