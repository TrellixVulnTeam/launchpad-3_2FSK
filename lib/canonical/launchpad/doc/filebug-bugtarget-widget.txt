= The +filebug Bug Target Widget =

The general +filebug allows bugs to be filed on any product or package,
and to help with this, the FileBugTargetWidget is used.

    >>> from zope.interface.verify import verifyObject
    >>> from canonical.launchpad.interfaces import (
    ...     IFrontPageBugAddForm, IMaloneApplication)
    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest
    >>> from canonical.widgets.bug import FileBugTargetWidget

    >>> empty_request = LaunchpadTestRequest()
    >>> widget = FileBugTargetWidget(
    ...     IFrontPageBugAddForm['bugtarget'], empty_request)

The widget complies to both IInputWidget and IBrowserWidget.

    >>> from zope.app.form.interfaces import IInputWidget
    >>> from zope.app.form.browser.interfaces import IBrowserWidget
    >>> verifyObject(IInputWidget, widget)
    True
    >>> verifyObject(IBrowserWidget, widget)
    True

When the request is empty, the widet doesn't have any input:

    >>> widget.hasInput()
    False
    >>> widget.hasValidInput()
    False
    >>> widget.error()
    ''

It's a radio widget, so it assumes that it always will have input, so if
it doesn't it raises UnexpectedFormData

    >>> widget.getInputValue()
    Traceback (most recent call last):
    ...
    UnexpectedFormData: No valid option was selected.

By default the first option is selected:

    >>> print widget()
    <table>
      <tr>
        <td>
          <label>
            <input class="radioType" checked="checked"
                   id="field.bugtarget.option.package" name="field.bugtarget"
                   type="radio" value="package" />
    ...
            <input class="radioType" id="field.bugtarget.option.product"
                   name="field.bugtarget" type="radio" value="product" />
    ...

== Selecting a distribution ==

If we select a distribution, the distribution with that name is returned
by getInputValue().

    >>> from canonical.launchpad.interfaces import IDistribution
    >>> form = {'field.bugtarget': 'package',
    ...         'field.bugtarget.distribution': 'ubuntu'}
    >>> widget = FileBugTargetWidget(
    ...     IFrontPageBugAddForm['bugtarget'], LaunchpadTestRequest(form=form))
    >>> widget.hasInput()
    True
    >>> widget.error()
    ''
    >>> selected_distribution = widget.getInputValue()
    >>> IDistribution.providedBy(selected_distribution)
    True
    >>> selected_distribution.name
    u'ubuntu'

If an non-existant distribution name is provided, a widget error is
raised.

    >>> form['field.bugtarget.distribution'] = 'invalid'
    >>> widget = FileBugTargetWidget(
    ...     IFrontPageBugAddForm['bugtarget'], LaunchpadTestRequest(form=form))
    >>> widget.hasInput()
    True
    >>> selected_distribution = widget.getInputValue()
    Traceback (most recent call last):
    ...
    LaunchpadValidationError: There is no distribution named 'invalid'
                              registered in Launchpad
    >>> print widget.error()
    There is no distribution named 'invalid' registered in Launchpad

If no distribution name is given at all, a MissingInput error is raised.

    >>> del form['field.bugtarget.distribution']
    >>> widget = FileBugTargetWidget(
    ...     IFrontPageBugAddForm['bugtarget'], LaunchpadTestRequest(form=form))
    >>> widget.hasInput()
    True
    >>> selected_distribution = widget.getInputValue()
    Traceback (most recent call last):
    ...
    MissingInputError:...
    >>> widget.error()
    ''

== Selecting a package ==

If both a distribution and a package name is selected, a distribution
source package is returned.

    >>> from canonical.launchpad.interfaces import IDistributionSourcePackage
    >>> form = {'field.bugtarget': 'package',
    ...         'field.bugtarget.distribution': 'ubuntu',
    ...         'field.bugtarget.package': 'evolution'}
    >>> widget = FileBugTargetWidget(
    ...     IFrontPageBugAddForm['bugtarget'], LaunchpadTestRequest(form=form))
    >>> widget.hasInput()
    True
    >>> widget.error()
    ''
    >>> selected_package = widget.getInputValue()
    >>> IDistributionSourcePackage.providedBy(selected_package)
    True
    >>> selected_package.distribution.name
    u'ubuntu'
    >>> selected_package.name
    u'evolution'

If a non-existant package is selected, a widget error is raised.

    >>> form['field.bugtarget.package'] = 'non-existant'
    >>> widget = FileBugTargetWidget(
    ...     IFrontPageBugAddForm['bugtarget'], LaunchpadTestRequest(form=form))
    >>> widget.hasInput()
    True
    >>> selected_package = widget.getInputValue()
    Traceback (most recent call last):
    ...
    LaunchpadValidationError: There is no source package name 'non-existant'
                              published in Ubuntu
    >>> print widget.error()
    There is no source package name 'non-existant' published in Ubuntu

The same error is displayed when an existing source package name that
isn't published is selected.

    >>> form['field.bugtarget.package'] = 'thunderbird'
    >>> widget = FileBugTargetWidget(
    ...     IFrontPageBugAddForm['bugtarget'], LaunchpadTestRequest(form=form))
    >>> widget.hasInput()
    True
    >>> selected_package = widget.getInputValue()
    Traceback (most recent call last):
    ...
    LaunchpadValidationError: There is no source package name 'thunderbird'
                              published in Ubuntu
    >>> print widget.error()
    There is no source package name 'thunderbird' published in Ubuntu

== Selecting a product ==

If a product is selected, the product with the given name is returned.

    >>> from canonical.launchpad.interfaces import IProduct
    >>> form = {'field.bugtarget': 'product',
    ...         'field.bugtarget.product': 'firefox'}
    >>> widget = FileBugTargetWidget(
    ...     IFrontPageBugAddForm['bugtarget'], LaunchpadTestRequest(form=form))
    >>> widget.hasInput()
    True
    >>> widget.error()
    ''
    >>> selected_product = widget.getInputValue()
    >>> IProduct.providedBy(selected_product)
    True
    >>> selected_product.name
    u'firefox'

If a non-existant product name is entered, a widget error is raised.

    >>> form['field.bugtarget.product'] = u'non-existant'
    >>> widget = FileBugTargetWidget(
    ...     IFrontPageBugAddForm['bugtarget'], LaunchpadTestRequest(form=form))
    >>> widget.hasInput()
    True
    >>> selected_product = widget.getInputValue()
    Traceback (most recent call last):
    ...
    LaunchpadValidationError: There is no project named 'non-existant'
                              registered in Launchpad
    >>> print widget.error()
    There is no project named 'non-existant' registered in Launchpad

If no product name is given at all, a widget error is raised.

    >>> del form['field.bugtarget.product']
    >>> widget = FileBugTargetWidget(
    ...     IFrontPageBugAddForm['bugtarget'], LaunchpadTestRequest(form=form))
    >>> widget.hasInput()
    True
    >>> selected_distribution = widget.getInputValue()
    Traceback (most recent call last):
    ...
    LaunchpadValidationError: Please enter a project name
    >>> print widget.error()
    Please enter a project name

== setRenderedValue() ==

In order to initialize the widget with a value, setRenderedValue() is
used. Passing a product to it will select the 'product' radio button, as
well as displaying the product name in the product widget.

    >>> from canonical.launchpad.interfaces import IProductSet
    >>> widget = FileBugTargetWidget(
    ...     IFrontPageBugAddForm['bugtarget'], empty_request)
    >>> widget.setRenderedValue(getUtility(IProductSet).getByName('firefox'))
    >>> print widget()
    <table>
    ...
      <input class="radioType"
             id="field.bugtarget.option.package" name="field.bugtarget"
             type="radio" value="package" />
    ...
      <input class="radioType" checked="checked"
             id="field.bugtarget.option.product"
             name="field.bugtarget" type="radio" value="product" />
    ...
      <input type="text" value="firefox" id="field.bugtarget.product"
             name="field.bugtarget.product" size="20"
             maxlength=""
             onKeyPress="selectWidget('field.bugtarget.option.product', event)"
             style="" class="" />
    ...

Passing a distribution will select the 'package' radio button and select
the distribution in the drop-down list.

    >>> from canonical.launchpad.interfaces import IDistributionSet
    >>> widget = FileBugTargetWidget(
    ...     IFrontPageBugAddForm['bugtarget'], empty_request)
    >>> debian = getUtility(IDistributionSet).getByName('debian')
    >>> widget.setRenderedValue(debian)
    >>> print widget()
    <table>
    ...
      <input class="radioType" checked="checked"
             id="field.bugtarget.option.package" name="field.bugtarget"
             type="radio" value="package" />
    ...
      <option selected="selected" value="debian">Debian GNU/Linux</option>
    ...
      <input class="radioType"
             id="field.bugtarget.option.product"
             name="field.bugtarget" type="radio" value="product" />
    ...

Passing in a distribuiton source packagage will select the 'package'
radio button, select the distribution in the drop-down list, and set the
package widget to the package name.

    >>> widget = FileBugTargetWidget(
    ...     IFrontPageBugAddForm['bugtarget'], empty_request)
    >>> debian_evolution = debian.getSourcePackage('evolution')
    >>> widget.setRenderedValue(debian_evolution)
    >>> print widget()
    <table>
    ...
      <input class="radioType" checked="checked"
             id="field.bugtarget.option.package" name="field.bugtarget"
             type="radio" value="package" />
    ...
      <option selected="selected" value="debian">Debian GNU/Linux</option>
    ...
      <input type="text" value="evolution" id="field.bugtarget.package"
             name="field.bugtarget.package" size="20"
             maxlength=""
             onKeyPress="selectWidget('field.bugtarget.option.package', event)"
             style="" class="" />
    ...
      <input class="radioType"
             id="field.bugtarget.option.product"
             name="field.bugtarget" type="radio" value="product" />
    ...
