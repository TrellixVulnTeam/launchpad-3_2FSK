Source Packages
===============

A source package is a thing from which binary packages are built, to then be
installed using a package management tool like apt-get or rpm. One named source
package in a distro may be used to build several different named binary
packages, on one or more architectures. One named binary package in a distro
may have been built from more than one named source package (e.g. a different
source package may have been used to build "foo" on i386 vs. "foo" on ppc.)

Named Source Package
--------------------

The are various metadata we're interested in collecting about a bundle of code
used to build binary packages for installation in a particular distro release.
One such thing is the name of that bundle of code. This is abstracted into a
separate SourcePackageName table.

Accessing source package names is done through the ISourcePackageNameSet
utility.

The ISourcePackageNameSet utility is accessed in the usual fashion:

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.interfaces import ISourcePackageNameSet
    >>> sourcepackagenameset = getUtility(ISourcePackageNameSet)

To retrieve a specific source package name, use ISourcePackageNameSet.get:

    >>> firefox = sourcepackagenameset.get(1)
    >>> print firefox.name
    mozilla-firefox

To retrieve a specific source package name by its name, use
ISourcePackageNameSet.queryByName:

    >>> firefox = sourcepackagenameset.queryByName("mozilla-firefox")
    >>> print firefox.name
    mozilla-firefox

If the package doesn't exist, queryByName returns None:

    >>> foobar = sourcepackagenameset.queryByName("foobar")
    >>> print foobar
    None

Distribution Source Packages
----------------------------

In some cases it's useful to be able to refer to a source package at a
distribution level, independent of any particular distrorelease. For
example, with Malone, a bug is usually filed on a distribution
sourcepackage (filing a bug on a specific distrorelease actually means
something quite different, but is outside the scope of this document.)

To retrieve a distribution source package, use the getSourcePackage
method on a distribution:

    >>> from canonical.launchpad.interfaces import (
    ...     IDistributionSet, IDistributionSourcePackage)
    >>> ubuntu = getUtility(IDistributionSet).get(1)
    >>> ubuntu_firefox = ubuntu.getSourcePackage(firefox)
    >>> IDistributionSourcePackage.providedBy(ubuntu_firefox)
    True
    >>> print ubuntu_firefox.name
    mozilla-firefox
    >>> print ubuntu_firefox.title
    Source Package "mozilla-firefox" in Ubuntu Linux
    >>> print ubuntu_firefox.displayname
    mozilla-firefox in ubuntu
    >>> ubuntu_firefox.distribution == ubuntu
    True
    >>> ubuntu_firefox.sourcepackagename == firefox
    True

Distro sourcepackages know how to compare to each other:

    >>> debian = getUtility(IDistributionSet).get(3)
    >>> ubuntu_firefox_also = ubuntu.getSourcePackage(firefox)
    >>> debian_firefox = debian.getSourcePackage(firefox)

    >>> ubuntu_firefox_also == ubuntu_firefox
    True
    >>> ubuntu_firefox != debian_firefox
    True

You can search for bugs in an IDistroSourcePackage using the
.searchTasks method:

    >>> from canonical.launchpad.interfaces import BugTaskSearchParams
    >>> from canonical.lp import dbschema
    >>> params = BugTaskSearchParams(
    ...     status=dbschema.BugTaskStatus.UNCONFIRMED, user=None)
    >>> tasks = ubuntu_firefox.searchTasks(params)
    >>> tasks.count()
    1
    >>> tasks[0].id
    17

Packaging
---------

Distribution packages are linked to upstream productseries through the
packaging process. Here we test the code that links all of those.

First, let's get some useful objects from the db.

    >>> from canonical.launchpad.database import SourcePackageName
    >>> evolution = SourcePackageName.byName('evolution')
    >>> a52dec = SourcePackageName.byName('a52dec')
    >>> netapplet = SourcePackageName.byName('netapplet')
    >>> firefox = SourcePackageName.byName('mozilla-firefox')
    >>> pmount = SourcePackageName.byName('pmount')

    >>> from canonical.launchpad.database import DistroRelease
    >>> warty = DistroRelease.get(1)
    >>> hoary = DistroRelease.get(3)
    >>> sarge = DistroRelease.get(7)
    >>> sid = DistroRelease.get(8)
    >>> g2k5 = DistroRelease.get(9)

Now let's make sure that we can see a productseries for a source package.

    >>> from canonical.launchpad.database import SourcePackage
    >>> sp = SourcePackage(sourcepackagename=firefox, distrorelease=hoary)
    >>> sp.productseries.name
    u'1.0'

Now we make sure there is no Packaging data for a52dec in hoary.

    >>> from canonical.launchpad.database import Packaging
    >>> Packaging.selectBy(sourcepackagenameID=a52dec.id,
    ...     distroreleaseID=hoary.id).count()
    0

So far so good.

Now verify we still get a product for that source package, thanks to the
fact that we have Warty data for it

    >>> sp = SourcePackage(sourcepackagename=a52dec, distrorelease=hoary)
    >>> sp.productseries.product.name
    u'a52dec'

Similarly, we should be able to get the packaging information from a parent
distrorelease, on the basis that a derivative is highly unlikely to change
the packaging drastically without changing the name of the package.

First, show there is no packging data for a52dec in g2k5:

    >>> Packaging.selectBy(sourcepackagenameID=a52dec.id,
    ...     distroreleaseID=g2k5.id).count()
    0

Now verify we still get a product for that source package

    >>> sp = SourcePackage(sourcepackagename=a52dec, distrorelease=g2k5)
    >>> sp.productseries.product.name
    u'a52dec'

Test the Changelog concatenation process:

    >>> sp = SourcePackage(sourcepackagename=pmount, distrorelease=hoary)
    >>> print sp.changelog
    This is a placeholder changelog for pmount 0.1-2
    <BLANKLINE>
    pmount (0.1-1) hoary; urgency=low
    <BLANKLINE>
     * Fix description (Malone #1)
     * Fix debian (Debian #2000)
     * Fix warty (Warty Ubuntu #1)
    <BLANKLINE>
     -- Sample Person <test@canonical.com> Tue, 7 Feb 2006 12:10:08 +0300
    <BLANKLINE>
    <BLANKLINE>


Checking handy Sourcepackage properties:

XXX cprov 20060125: it's still very primitive test but it's better
than nothing ... bug # 29659

    >>> sp.manifest.uuid
    u'e0451064-b405-4f52-b387-ebfc1a7ee298'

    >>> len(sp.releases)
    2

    >>> len(sp.releasehistory)
    2


Comparing Sourcepackages
------------------------

Lastly, note that sourcepackages know how to compare to each other:

    >>> hoary_firefox_one = SourcePackage(sourcepackagename=firefox, distrorelease=hoary)
    >>> hoary_firefox_two = SourcePackage(sourcepackagename=firefox, distrorelease=hoary)
    >>> warty_firefox = SourcePackage(sourcepackagename=firefox, distrorelease=warty)

    >>> hoary_firefox_one == hoary_firefox_two
    True
    >>> hoary_firefox_one != warty_firefox
    True

releasehistory
--------------

    >>> print len(hoary_firefox_one.releasehistory)
    1

