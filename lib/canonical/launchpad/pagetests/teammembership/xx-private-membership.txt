= Teams with Private Membership =

If a team's visibility attribute is set to Private Membership, only
launchpad admins and members of that team can see the membership.

Create a test team with private membership and a test member. Even
though no-priv is a proposed member by requesting to join this moderated
team, he still does not get access to the membership list.

    >>> def print_members(contents, type):
    ...     table = find_tag_by_id(contents, type)
    ...     for link in table.findAll('a'):
    ...         if link.renderContents() != 'Edit' and not link.find('img'):
    ...             print link.renderContents()


== Membership Page ==

Users who are not team members should not be able to view the +members
page.

    >>> nopriv_browser = setupBrowser(auth='Basic no-priv@canonical.com:test')
    >>> nopriv_browser.open('http://launchpad.dev/~myteam/+members')
    Traceback (most recent call last):
    ...
    Unauthorized: ...

A team member should be able to view the +members page.

    >>> browser = setupBrowser(auth='Basic member@canonical.com:test')
    >>> browser.open('http://launchpad.dev/~myteam/+members')
    >>> print_members(browser.contents, 'activemembers')
    Gold Member
    Owner
    >>> print_members(browser.contents, 'proposedmembers')
    No Privileges Person

== Team Page ==

Users who are not team members cannot see the recently approved members,
recently applied members, or the membership summary on the ~myteam page.

    >>> nopriv_browser.open('http://launchpad.dev/~myteam')
    >>> find_tag_by_id(nopriv_browser.contents, 'recently-approved')
    >>> find_tag_by_id(nopriv_browser.contents, 'recently-applied')
    >>> find_tag_by_id(nopriv_browser.contents, 'membership-summary')
    <...You are not allowed to view this team's membership...

A team member will be able to see these parts of the team page.

    >>> browser.open('http://launchpad.dev/~myteam')
    >>> find_tag_by_id(browser.contents, 'recently-approved')
    <...<a href="/~member">Gold Member (member)</a>...


    >>> find_tag_by_id(browser.contents, 'recently-applied')
    <...<a href="/~no-priv">No Privileges Person (no-priv)</a>...

    >>> find_tag_by_id(browser.contents, 'membership-summary')
    <...2 active members...1 proposed members...

== Team Participation ==

The person page shows which teams that person participates in. Although, it
would be time consuming to gather the entire team membership by viewing
all the members' person pages, we don't want to leak this information, 
so MyTeam won't show up on the person page, because it has a private
membership.

    >>> nopriv_browser.open('http://launchpad.dev/~owner')
    >>> div = find_tag_by_id(nopriv_browser.contents, 'participation')
    >>> a_tags = div.findAll('a')
    >>> for a_tag in a_tags:
    ...     print a_tag.contents
    [u'Other Team']

A member of a team with private membership (MyTeam) can see that team
on other members' person pages.

    >>> browser.open('http://launchpad.dev/~owner')
    >>> div = find_tag_by_id(browser.contents, 'participation')
    >>> a_tags = div.findAll('a')
    >>> for a_tag in a_tags:
    ...     print a_tag.contents
    [u'My Team']
    [u'Other Team']


== Teams with Icons ==

The person page also shows a list of icons for all the teams that
person participates in, if the team has a custom icon. Only team
members should be able to see their team's icon in this list.

First, we will add a custom icon to two teams.

    >>> from canonical.launchpad.ftests import set_branding
    >>> admin_browser = setupBrowser(auth='Basic mark@hbd.com:test')
    >>> admin_browser.open('http://launchpad.dev/~myteam/+branding')
    >>> set_branding(admin_browser)
    >>> admin_browser.getControl('Change Branding').click()

    >>> admin_browser.open('http://launchpad.dev/~otherteam/+branding')
    >>> set_branding(admin_browser)
    >>> admin_browser.getControl('Change Branding').click()

The user which is not on myteam will only see otherteam listed.

    >>> nopriv_browser.open('http://launchpad.dev/~owner')
    >>> div = find_tag_by_id(nopriv_browser.contents, 'teams_with_icons')
    >>> for a_tag in div.findAll('a'):
    ...     print a_tag['href']
    /~otherteam


Another team member will see both the icons (otherteam and myteam).

    >>> browser.open('http://launchpad.dev/~owner')
    >>> div = find_tag_by_id(browser.contents, 'teams_with_icons')
    >>> for a_tag in div.findAll('a'):
    ...     print a_tag['href']
    /~myteam
    /~otherteam


== Restrict Answer Contact ==

To prevent leaking information about a team's private membership, 
no user can add that team as an answer contact for a project.

Even the owner of the team with private membership should not see
MyTeam as an option in the +answer-contact form.

    >>> owner_browser = setupBrowser(auth='Basic owner@canonical.com:test')
    >>> owner_browser.open(
    ...     'http://answers.launchpad.dev/ubuntu/+answer-contact')
    >>> team_div = find_tag_by_id(owner_browser.contents, 
    ...                            'answer-contact-teams')
    >>> for label in team_div.findAll('label'):
    ...     print label.contents[1]
    &nbsp;Other Team


== Restrict Mentorship ==

To prevent leaking information about a team's private membership, 
no user can select that team when offering mentorship for a bug
or a blueprint.

Even the owner of the team with private membership should not see
MyTeam as an option in the +mentor form.

    >>> owner_browser = setupBrowser(auth='Basic owner@canonical.com:test')
    >>> owner_browser.open(
    ...     'http://answers.launchpad.dev/firefox/+bug/1/+mentor')
    >>> team_select = find_tag_by_id(owner_browser.contents, 'field.team')
    >>> for option in team_select.findAll('option'):
    ...     print option['value']
    otherteam


== Restrict Private Membership Team as SubTeam ==

To prevent leaking information about a team's private membership,
no user can add that team as a member of a public team.

    >>> admin_browser.open('http://launchpad.dev/~simple-team/+addmember')
    >>> admin_browser.getControl('New member').value = 'myteam'
    >>> admin_browser.getControl('Add Member').click()
    >>> admin_browser.url
    'http://launchpad.dev/%7Esimple-team/+addmember'
    >>> get_feedback_messages(admin_browser.contents)
    [...Constraint not satisfied...

== Restrict Subscribing to Bugs ==

To prevent leaking information about a team's private membership,
no user can subscribe that team to a bug.

    >>> admin_browser.open(
    ...     'http://bugs.launchpad.dev/firefox/+bug/1/+addsubscriber')
    >>> admin_browser.getControl('Person').value = 'myteam'
    >>> admin_browser.getControl('Add').click()
    >>> admin_browser.url
    'http://bugs.launchpad.dev/firefox/+bug/1/+addsubscriber'
    >>> get_feedback_messages(admin_browser.contents)
    [...Constraint not satisfied...

== Restrict Subscribing to Blueprints ==

To prevent leaking information about a team's private membership,
no user can subscribe that team to a blueprint.

    >>> admin_browser.open('http://blueprints.launchpad.dev'
    ...                    '/firefox/+spec/canvas/+addsubscriber')
    >>> admin_browser.getControl('Subscriber').value = 'myteam'
    >>> admin_browser.getControl('Continue').click()
    >>> admin_browser.url
    'http://blueprints.launchpad.dev/firefox/+spec/canvas/+addsubscriber'
    >>> get_feedback_messages(admin_browser.contents)
    [...Constraint not satisfied...

== Restrict Appointing a Translator ==

To prevent leaking information about a team's private membership,
no user can specify that team as a translator.

    >>> admin_browser.open('http://translations.launchpad.dev'
    ...                    '/+groups/testing-translation-team/+appoint')
    >>> admin_browser.getControl('Language').value = ['de']
    >>> admin_browser.getControl('Translator').value = 'myteam'
    >>> admin_browser.getControl('Add').click()
    >>> admin_browser.url
    'http://translations.launchpad.dev/+groups/testing-translation-team/+appoint'
    >>> get_feedback_messages(admin_browser.contents)
    [...Constraint not satisfied...

== Restrict Project Owner ==

To prevent leaking information about a team's private membership,
no user can set that team as the owner of a project.

    >>> admin_browser.open('http://launchpad.dev/mozilla/+reassign')
    >>> admin_browser.getControl(name='field.owner').value = 'myteam'
    >>> admin_browser.getControl('Change Registrant').click()
    >>> admin_browser.url
    'http://launchpad.dev/mozilla/+reassign'
    >>> get_feedback_messages(admin_browser.contents)
    [...The person/team named 'myteam' is not a valid owner for...

== Restrict Product Maintainer ==

To prevent leaking information about a team's private membership,
no user can set that team as the maintainer of a product.

    >>> admin_browser.open('http://launchpad.dev/jokosher/+reassign')
    >>> admin_browser.getControl(name='field.owner').value = 'myteam'
    >>> admin_browser.getControl('Change Registrant').click()
    >>> admin_browser.url
    'http://launchpad.dev/jokosher/+reassign'
    >>> get_feedback_messages(admin_browser.contents)
    [...The person/team named 'myteam' is not a valid owner for...

== Restrict Distro Registrant ==

To prevent leaking information about a team's private membership,
no user can set that team as the registrant of a distribution.

    >>> admin_browser.open('http://launchpad.dev/ubuntu/+reassign')
    >>> admin_browser.getControl(name='field.owner').value = 'myteam'
    >>> admin_browser.getControl('Change Registrant').click()
    >>> admin_browser.url
    'http://launchpad.dev/ubuntu/+reassign'
    >>> get_feedback_messages(admin_browser.contents)
    [...The person/team named 'myteam' is not a valid owner for...
