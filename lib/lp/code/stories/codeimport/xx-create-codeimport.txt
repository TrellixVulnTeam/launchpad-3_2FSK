Creating a code import
======================

Users are able to specifically request a code import of their
project's code.  The main link to this is a large button on
the code home page "Import your project".

    >>> browser = setupBrowser(auth="Basic no-priv@canonical.com:test")
    >>> browser.open("http://code.launchpad.dev")
    >>> print find_tag_by_id(browser.contents, "new-code-import")
    <a href="/+code-imports/+new" id="new-code-import">
       <img alt="Import your project" ...>
    </a>

    >>> browser.getLink(id="new-code-import").click()
    >>> print browser.title
    Request a code import...

There is a cancel link on this page near the buttons to take the
user back to the main code page.

    >>> browser.getLink('Cancel').click()
    >>> print browser.url
    http://code.launchpad.dev/

For projects that don't officially use Launchpad for code, there is also a
link on the main branch listing page for the product.

    >>> browser.open('http://code.launchpad.dev/firefox')
    >>> browser.getLink('Import a branch').click()
    Traceback (most recent call last):
    ...
    LinkNotFoundError

The owner can configure code hosting for the project and then
importing will be available to any user.

    >>> owner_browser = setupBrowser(auth="Basic test@canonical.com:test")
    >>> owner_browser.open('http://code.launchpad.dev/firefox')
    >>> owner_browser.getLink('Configure code hosting').click()
    >>> owner_browser.getControl(
    ...     'Import a branch').click()
    >>> owner_browser.getControl('Branch URL').value = (
    ...     'git://example.com/firefox')
    >>> owner_browser.getControl('Git').click()
    >>> owner_browser.getControl('Branch name').value = 'trunk'
    >>> owner_browser.getControl('Update').click()

Now a regular user can import another branch.

    >>> browser.open('http://code.launchpad.dev/firefox')
    >>> browser.getLink('Import a branch').click()

Requesting a Bazaar import
==========================

The default VCS type is Bazaar.

    >>> print_radio_button_field(browser.contents, "rcs_type")
    (*) Bazaar
    ( ) Git
    ( ) Subversion
    ( ) CVS

The user is required to enter a project that the import is for, a name
for the import branch, and a Bazaar branch location.

    >>> browser.getControl('Branch Name').value = "mirrored"
    >>> browser.getControl('Branch URL', index=0).value = (
    ...     "http://bzr.example.com/firefox/trunk")
    >>> browser.getControl('Request Import').click()

When the user clicks continue, the import branch is created

    >>> print extract_text(find_tag_by_id(browser.contents, "import-details"))
    Import Status: Reviewed
    This branch is an import of the Bazaar branch
    at http://bzr.example.com/firefox/trunk.
    The next import is scheduled to run
    as soon as possible.
    >>> browser.getLink("http://bzr.example.com/firefox/trunk")
    <Link text='http://bzr.example.com/firefox/trunk'
           url='http://bzr.example.com/firefox/trunk'>

If the user wants, they can include a username and password in the
URL.

    >>> browser.open("http://code.launchpad.dev/+code-imports/+new")
    >>> browser.getControl('Branch Name').value = "with-password"
    >>> browser.getControl('Branch URL', index=0).value = (
    ...     "http://user:password@bzr.example.com/firefox/trunk")
    >>> browser.getControl('Project').value = "firefox"
    >>> browser.getControl('Request Import').click()
    >>> print extract_text(find_tag_by_id(browser.contents, "import-details"))
    Import Status: Reviewed
    This branch is an import of the Bazaar branch
    at http://user:password@bzr.example.com/firefox/trunk.
    The next import is scheduled to run
    as soon as possible.
    
Specifing a Launchpad URL results in an error.

    >>> browser.open("http://code.launchpad.dev/+code-imports/+new")
    >>> browser.getControl('Branch Name').value = "invalid"
    >>> browser.getControl('Branch URL', index=0).value = (
    ...     "http://bazaar.launchpad.net/firefox/trunk")
    >>> browser.getControl('Project').value = "firefox"
    >>> browser.getControl('Request Import').click()
    >>> print_feedback_messages(browser.contents)
    There is 1 error.
    You can not create imports for branches that are hosted by Launchpad.

Requesting a Subversion import
==============================

The user is required to enter a project that the import is for,
a name for the import branch, and a subversion branch location.

    >>> browser.open("http://code.launchpad.dev/+code-imports/+new")
    >>> browser.getControl('Subversion').click()
    >>> browser.getControl('Project').value = "firefox"
    >>> browser.getControl('Branch Name').value = "imported"
    >>> browser.getControl('Branch URL', index=1).value = (
    ...     "http://svn.example.com/firefox/trunk")
    >>> browser.getControl('Request Import').click()

When the user clicks continue, the import branch is created

    >>> print extract_text(find_tag_by_id(browser.contents, "import-details"))
    Import Status: Reviewed
    This branch is an import of the Subversion branch
    from http://svn.example.com/firefox/trunk.
    The next import is scheduled to run
    as soon as possible.
    >>> browser.getLink("http://svn.example.com/firefox/trunk")
    <Link text='http://svn.example.com/firefox/trunk'
           url='http://svn.example.com/firefox/trunk'>

The fact that this is an import via bzr-svn is indicated in a 'title'
attribute on the text of 'Subversion'.

    >>> svn_span = find_tag_by_id(browser.contents, 'svn-import-details').span
    >>> print extract_text(svn_span)
    Subversion
    >>> print svn_span['title']
    Subversion via bzr-svn

If the user wants, they can include a username and password in the
URL.

    >>> browser.open("http://code.launchpad.dev/+code-imports/+new")
    >>> browser.getControl('Subversion').click()
    >>> browser.getControl('Branch Name').value = "svn-with-password"
    >>> browser.getControl('Branch URL', index=1).value = (
    ...     "http://user:password@svn.example.com/firefox/trunk")
    >>> browser.getControl('Project').value = "firefox"
    >>> browser.getControl('Request Import').click()
    >>> print extract_text(find_tag_by_id(browser.contents, "import-details"))
    Import Status: Reviewed
    This branch is an import of the Subversion branch
    from http://user:password@svn.example.com/firefox/trunk.
    The next import is scheduled to run
    as soon as possible.


Requesting a Git import
=======================

The user is required to enter a project that the import is for,
a name for the import branch, and a subversion branch location.

    >>> browser.open("http://code.launchpad.dev/+code-imports/+new")
    >>> browser.getControl('Project').value = "firefox"
    >>> browser.getControl('Branch Name').value = "git-import"
    >>> browser.getControl('Git').click()
    >>> browser.getControl('Repo URL', index=0).value = (
    ...     "git://example.com/firefox.git")
    >>> browser.getControl('Request Import').click()

When the user clicks continue, the approved import branch is created

    >>> print extract_text(find_tag_by_id(browser.contents, "import-details"))
    Import Status: Reviewed
    This branch is an import of the HEAD branch of the Git repository at
    git://example.com/firefox.git.
    The next import is scheduled to run as soon as possible.


Requesting a CVS import
=======================

The user is required to enter both the CVS root and module in order
to identify the CVS branch.  A project and branch name are also required.

    >>> browser.open("http://code.launchpad.dev/+code-imports/+new")
    >>> browser.getControl('Project').value = "firefox"
    >>> browser.getControl('Branch Name').value = "import2"
    >>> browser.getControl('CVS').click()
    >>> browser.getControl('Repository').value = (
    ...     ":pserver:anonymous@cvs.example.com:/mozilla/cvs")
    >>> browser.getControl('Module').value = "firefox"
    >>> browser.getControl('Request Import').click()

    >>> print extract_text(find_tag_by_id(browser.contents, "import-details"))
    Import Status: Reviewed
    This branch is an import of the CVS module firefox from
    :pserver:anonymous@cvs.example.com:/mozilla/cvs.
    The next import is scheduled to run
    as soon as possible.

Requesting a CVS import with invalid information
================================================

If the :pserver is left off the beginning, the CVSROOT is invalid for our
purposes.

    >>> browser.open("http://code.launchpad.dev/+code-imports/+new")
    >>> browser.getControl('Project').value = "firefox"
    >>> browser.getControl('Branch Name').value = "import2"
    >>> browser.getControl('CVS').click()
    >>> browser.getControl('Repository').value = (
    ...     ":anonymous@cvs.example.com:/mozilla/cvs")
    >>> browser.getControl('Module').value = "firefox"
    >>> browser.getControl('Request Import').click()

    >>> print_feedback_messages(browser.contents)
    There is 1 error.
    CVS root is invalid.


Requesting an import that is already being imported
===================================================

If a user requests an import that is already being imported, then
the validation message points the user to the existing branch.

    >>> browser.open("http://code.launchpad.dev/+code-imports/+new")

The error is shown even if the project is different.

    >>> browser.getControl('Project').value = "thunderbird"
    >>> browser.getControl('Branch Name').value = "imported"
    >>> browser.getControl('CVS').click()
    >>> browser.getControl('Repository').value = (
    ...     ":pserver:anonymous@cvs.example.com:/mozilla/cvs")
    >>> browser.getControl('Module').value = "firefox"
    >>> browser.getControl('Request Import').click()

    >>> print_feedback_messages(browser.contents)
    There is 1 error.
    Those CVS details are already specified for
    the imported branch ~no-priv/firefox/import2.

    >>> browser.getControl('Subversion').click()
    >>> browser.getControl('Branch URL', index=1).value = (
    ...     "http://svn.example.com/firefox/trunk")
    >>> browser.getControl('Request Import').click()

    >>> print_feedback_messages(browser.contents)
    There is 1 error.
    This foreign branch URL is already specified for
    the imported branch ~no-priv/firefox/imported.


Requesting an import whose name would clash
===========================================

Instead of Launchpad trying to come up with names for the imported
branches, the user is asked to enter one when requesting the import.
If the name would clash, then the user is prompted to enter a different
one.

    >>> browser.open("http://code.launchpad.dev/+code-imports/+new")
    >>> browser.getControl('Subversion').click()
    >>> browser.getControl('Project').value = "firefox"
    >>> browser.getControl('Branch Name').value = "imported"
    >>> browser.getControl('Branch URL', index=1).value = (
    ...     "http://svn.example.com/firefox/other")
    >>> browser.getControl('Request Import').click()
    >>> print_feedback_messages(browser.contents)
    There is 1 error.
    There is already an existing import for firefox with the name of imported.


Requesting an import on a project where the user doesn't have permission
========================================================================

If there are privacy policies that disallow the user from creating branches
then an error is shown to the user.

    >>> browser.open("http://code.launchpad.dev/+code-imports/+new")
    >>> browser.getControl('Project').value = "launchpad"
    >>> browser.getControl('Branch Name').value = "imported"
    >>> browser.getControl('Branch URL', index=0).value = (
    ...     "http://svn.example.com/launchpage/fake")
    >>> browser.getControl('Request Import').click()
    >>> print_feedback_messages(browser.contents)
    There is 1 error.
    You are not allowed to register imports for Launchpad.


Requesting an import for a product that does not exist
======================================================

If the name typed in the product field does not match that of an
existing product, an error is shown to the user.

    >>> browser.open("http://code.launchpad.dev/+code-imports/+new")
    >>> browser.getControl('Project').value = "no-such-product"
    >>> browser.getControl('Branch Name').value = "imported"
    >>> browser.getControl('Branch URL', index=0).value = (
    ...     "http://svn.example.com/launchpage/fake")
    >>> browser.getControl('Request Import').click()
    >>> print_feedback_messages(browser.contents)
    There is 1 error.
    Invalid value


Specifying the owner of the branch when it is being created
===========================================================

When a user is requesting a new code import, they are the owner of the new
import branch.  sometimes the user may wish for the import branch to be owned
by a team rather than just themselves.  There is a drop down choice shown for
the user for the teams that they are a member of.

    >>> sample_browser = setupBrowser(auth='Basic test@canonical.com:test')
    >>> sample_browser.open("http://code.launchpad.dev/firefox/+new-import")
    >>> sample_browser.getControl('Owner').displayValue
    ['Sample Person (name12)']

Change the owner to be a team that sample person is a member of.

    >>> sample_browser.getControl('Owner').value = ['landscape-developers']
    >>> sample_browser.getControl('Owner').displayValue
    ['Landscape Developers (landscape-developers)']
    >>> sample_browser.getControl('Branch URL', index=0).value = (
    ...     "http://svn.example.com/firefox-beta/trunk")
    >>> sample_browser.getControl('Request Import').click()

    >>> print_tag_with_id(sample_browser.contents, 'registration')
    Created by Sample Person ...
    >>> print_tag_with_id(sample_browser.contents, 'owner')
    Owner: Landscape Developers

Admins can specify any owner for a new code import.

    >>> admin_browser = setupBrowser(auth='Basic admin@canonical.com:test')
    >>> admin_browser.open("http://code.launchpad.dev/firefox/+new-import")
    >>> admin_browser.getControl('Owner').value = 'mark'
    >>> admin_browser.getControl('Branch URL', index=0).value = (
    ...     "http://svn.example.com/firefox-theta/trunk")
    >>> admin_browser.getControl('Request Import').click()

    >>> print_tag_with_id(admin_browser.contents, 'registration')
    Created by Foo Bar ...
    >>> print_tag_with_id(admin_browser.contents, 'owner')
    Owner: Mark Shuttleworth
