SourcePackagePublishingHistory
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This class provides public access to publishing records via a SQL view.

 >>> from canonical.launchpad.database import SourcePackagePublishingHistory

Select a publishing record from the sampledata (pmount is a
interesting one):

 >>> spph = SourcePackagePublishingHistory.get(8)
 >>> spph.sourcepackagerelease.name, spph.distrorelease.name
 (u'pmount', u'hoary')

Verify if the object follows its interface contracts:

 >>> from zope.interface.verify import verifyObject
 >>> from canonical.launchpad.interfaces import (
 ...     ISourcePackageRelease, IDistroRelease,
 ...     ISourcePackagePublishingHistory,
 ...     ISourcePackage,
 ...     IDistributionSourcePackageRelease)

 >>> verifyObject(ISourcePackagePublishingHistory, spph)
 True

 XXX cprov 20060322: None of the attributes below pass verifyObject().
 So, they claim to implement some thing they don't really have. Most
 of the problems are related with bad interface inheritance.

 >>> IDistroRelease.providedBy(spph.distrorelease)
 True

 >>> ISourcePackageRelease.providedBy(spph.sourcepackagerelease)
 True

 >>> ISourcePackageRelease.providedBy(spph.supersededby)
 True

 >>> IDistributionSourcePackageRelease.providedBy(
 ...     spph.meta_sourcepackagerelease)
 True

 >>> IDistributionSourcePackageRelease.providedBy(spph.meta_supersededby)
 True

 >>> ISourcePackage.providedBy(spph.meta_sourcepackage)
 True


Check how the ISourcePackagePublishing and IArchivePublisher objects
fit together. IArchivePublisher interface grants to a single
publication record the ability to publish its contents.

It results in a more granular way to perform actions in the package
archive, because instead of driven by the whole group of files that needs
to be published in the archive filesystem (old way), it will be driven
by a much smaller and similar set of files that are contained in a
single publication record.

See canonical/launchpad/tests/test_publishing.py for run-time times.

 >>> from canonical.launchpad.database import SourcePackagePublishing
 >>> from canonical.launchpad.interfaces import (
 ...     ISourcePackagePublishing, IArchivePublisher, IArchiveSafePublisher,
 ...     ISourcePackageFilePublishing, IArchiveFilePublisher,
 ...     ISecureSourcePackagePublishingHistory)

Retrive any SourcePackagePublishing entry.

 >>> spp = SourcePackagePublishing.get(10)

SourcePackagPublishing implements both interfaces properly:

 >>> verifyObject(ISourcePackagePublishing, spp)
 True
 >>> verifyObject(IArchivePublisher, spp)
 True


Generating respective "Sources" stanzas based on IArchivePublishBase:

 >>> print spp.stanza()
 <BLANKLINE>
 Package: alsa-utils
 Binary:
 Version: 1.0.8-1ubuntu1
 Maintainer: Mark Shuttleworth <NDA>
 Build-Depends: None
 Architecture: None
 Standards-Version: 3.5.10.0
 Format: 1.0
 Directory: pool/main/a/alsa-utils
 Files:
  whatever                         3 alsa-utils_1.0.8-1ubuntu1.dsc
 <BLANKLINE>


IArchivePublisher.files are the SourcePackageFilePublishing records
contained in this publication record. Each instance also implements
IArchiveFilePublishing.

 >>> any_pub_file = spp.files[-1]
 >>> ISourcePackageFilePublishing.providedBy(any_pub_file)
 True
 >>> verifyObject(IArchiveFilePublisher, any_pub_file)
 True

 >>> [pub_file.libraryfilealias.filename for pub_file in spp.files]
 [u'alsa-utils_1.0.8-1ubuntu1.dsc']

'secure_record' returns a ISecureSourcePackagePublishing instance
corresponding to this publication. This instance implements
IArchiveSafePublisher.

 >>> sspph = spp.secure_record
 >>> ISecureSourcePackagePublishingHistory.providedBy(sspph)
 True
 >>> verifyObject(IArchiveSafePublisher, sspph)
 True
 >>> sspph.embargo
 False

Symetric behaviour is offered for BinaryPackagePublishing,
BinaryPackageFile and ISecureBinaryPackagePublishingHistory

 >>> from canonical.launchpad.database import BinaryPackagePublishing
 >>> from canonical.launchpad.interfaces import (
 ...     IBinaryPackagePublishing, IBinaryPackageFilePublishing,
 ...     ISecureBinaryPackagePublishingHistory)

 >>> bpp = BinaryPackagePublishing.get(15)

 >>> IBinaryPackagePublishing.providedBy(bpp)
 True
 >>> verifyObject(IArchivePublisher, bpp)
 True


Generating respective "Packages" stanzas based on IArchivePublishBase:

 >>> print bpp.stanza()
 <BLANKLINE>
 Package: mozilla-firefox
 Priority: Important
 Section: editors
 Installed-Size: None
 Maintainer: Mark Shuttleworth
 Architecture: i386
 Version: 0.9
 Replaces: gnome-mozilla-browser
 Depends: gcc-3.4-base, libc6 (>= 2.3.2.ds1-4), gcc-3.4 (>= 3.4.1-4sarge1), gcc-3.4 (<< 3.4.2), libstdc++6-dev (>= 3.4.1-4sarge1)
 Conflicts: firefox, mozilla-web-browser
 Filename: mozilla-firefox_0.9_i386.deb
 Size: 3
 MD5sum: whatever
 Description: Mozilla Firefox Web Browser
 Mozilla Firefox Web Browser is .....
 Bugs: NDA
 Origin: NDA
 Task: NDA
 <BLANKLINE>


 >>> sbpph = bpp.secure_record
 >>> ISecureBinaryPackagePublishingHistory.providedBy(sbpph)
 True
 >>> verifyObject(IArchiveSafePublisher, sbpph)
 True
 >>> sbpph.embargo
 False

 >>> any_file = bpp.files[-1]
 >>> IBinaryPackageFilePublishing.providedBy(any_file)
 True
 >>> verifyObject(IArchiveFilePublisher, any_file)
 True

 >>> [pub_file.libraryfilealias.filename for pub_file in bpp.files]
 [u'mozilla-firefox_0.9_i386.deb']
