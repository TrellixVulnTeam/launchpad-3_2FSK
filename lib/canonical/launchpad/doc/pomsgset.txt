POMsgSet
========

A POMsgSet represents a concrete msgset translation from a POFile.

It's linked with a POTMsgSet that has the English strings that are being
translated.

POMsgSet.updateTranslationSet
-----------------------------

This method is used to handle translation submission into the system, either
from the web UI or using the upload feature.

Get the PO msgid we will be working with.

  >>> from canonical.launchpad.database import POMsgSet, POMsgID, Language
  >>> from canonical.launchpad.database import POTemplate
  >>> pomsgid = POMsgID.byMsgid('evolution addressbook')

Carlos is the one that will do the uploads.

  >>> from zope.component import getUtility
  >>> from canonical.launchpad.interfaces import IPersonSet
  >>> carlos = getUtility(IPersonSet).getByName('carlos')
  >>> foobar = getUtility(IPersonSet).getByName('name16')

Now find the po template.

  >>> upstream_evo = POTemplate.get(1)
  >>> upstream_evo.productseries is not None
  True

  >>> upstream_evo.productseries.product.name
  u'evolution'

We will be working in Catalan (ca).

We need the right POMsgSet. We'll get the PO File, then, create the needed
po msgset there.

  >>> upstream_pofile = upstream_evo.newPOFile('ca')
  >>> upstream_pomsgset = upstream_pofile.createMessageSetFromText(
  ...     u'evolution addressbook')

Show that there are no active translations and no suggestions.

  >>> upstream_pomsgset.active_texts
  [None]
  >>> upstream_pomsgset.published_texts
  [None]
  >>> list(upstream_pomsgset.getSuggestedSubmissions(0))
  []

And the fuzzy flags should also be disabled

  >>> upstream_pomsgset.isfuzzy
  False
  >>> upstream_pomsgset.publishedfuzzy
  False

Let's add a fuzzy translation.

  >>> import datetime
  >>> import pytz
  >>> UTC = pytz.timezone('UTC')
  >>> upstream_pomsgset.updateTranslationSet(
  ...     carlos, {0: u'foo'}, fuzzy=True, published=True,
  ...     lock_timestamp=datetime.datetime.now(UTC))

Now it should appear as active and as published.

  >>> upstream_pomsgset.active_texts
  [u'foo']
  >>> upstream_pomsgset.published_texts
  [u'foo']

And also, the fuzzy flag should be set in both cases.

  >>> upstream_pomsgset.isfuzzy
  True
  >>> upstream_pomsgset.publishedfuzzy
  True

Now let's think that upstream removed that translation completely...

  >>> upstream_pomsgset.updateTranslationSet(
  ...     carlos, {0: u''}, fuzzy=False, published=True,
  ...     lock_timestamp=datetime.datetime.now(UTC))

The active text should still have it as we never remove anything from Rosetta
if upstream does it

  >>> upstream_pomsgset.active_texts
  [u'foo']

But the published one should disapper

  >>> upstream_pomsgset.published_texts
  [None]

And same with the fuzzy flags.

  >>> upstream_pomsgset.isfuzzy
  True
  >>> upstream_pomsgset.publishedfuzzy
  False

Now, we are going to test that we are not adding duplicated POSubmissions if
the translation submitted already exist from another translator.

  >>> pofile_es = upstream_evo.getPOFileByLang('es')
  >>> pomsgset = pofile_es.getPOMsgSet(u'evolution addressbook')

We check that there are no suggested translations yet.

  >>> suggested = pomsgset.getSuggestedSubmissions(0)
  >>> suggested.count()
  0

The one submitting the string will be the No Privileges User. He's not an
editor for this POFile.

  >>> no_priv = getUtility(IPersonSet).getByName('no-priv')
  >>> pomsgset.updateTranslationSet(
  ...     no_priv, {0: u'test string'}, fuzzy=False, published=False,
  ...     lock_timestamp=datetime.datetime.now(UTC))

Now, we should have one extra suggestion.

  >>> suggested = pomsgset.getSuggestedSubmissions(0)
  >>> suggested.count()
  1

That is the one that no_priv submitted.

  >>> suggested[0].potranslation.translation
  u'test string'

And the active translation is not the one we suggested.

  >>> pomsgset.getActiveSubmission(0).potranslation.translation
  u'libreta de direcciones de Evolution'

And previous reviewer was

  >>> selection = pomsgset.getSelection(0)
  >>> selection.reviewer.name
  u'carlos'

Now, Foo Bar, a translator with permissions, is going to approve that new
suggestion.

  >>> pomsgset.updateTranslationSet(
  ...     foobar, {0: u'test string'}, fuzzy=False, published=False,
  ...     lock_timestamp=datetime.datetime.now(UTC))

We don't have any suggestion newer than the new active translation

  >>> suggested = pomsgset.getSuggestedSubmissions(0)
  >>> suggested.count()
  0

And the active translation is now the one from no-priv user.

  >>> active = pomsgset.getActiveSubmission(0)
  >>> active.person.name
  u'no-priv'
  >>> active.potranslation.translation
  u'test string'

Also, we should have Foo Bar as the reviewer of that translation.

  >>> selection = pomsgset.getSelection(0)
  >>> selection.reviewer.displayname
  u'Foo Bar'


POMsgSet.pluralforms
--------------------

This attribute tell us the amount of plural forms we have in the language
associated with this message set.

We use a DummyPOMsgSet when we don't have a POMsgSet for a given POFile and
POTMsgSet. First we'll get a DummyPOFile:

  >>> pt_BR_dummypofile = upstream_evo.getDummyPOFile('pt_BR')

We get a POMsgSet and verify it's a singular form:

  >>> pt_BR_dummypomsgset = pt_BR_dummypofile.getPOMsgSet(
  ...     u'evolution addressbook')
  >>> pt_BR_dummypomsgset.potmsgset.getPOMsgIDs().count()
  1

  >>> pt_BR_dummypomsgset.pluralforms
  1
  >>> pt_BR_dummypomsgset.active_texts
  [None]

Using another dummy pofile we'll get a POMsgset that's not a
singular form: 

  >>> apa_dummypofile = upstream_evo.getDummyPOFile('apa')
  >>> apa_dummypomsgset = apa_dummypofile.getPOMsgSet(u'%d contact')

We don't know anything about pluralforms for this language, so we fall back to
the most common case:

  >>> print apa_dummypomsgset.pofile.language.pluralforms
  None
  >>> apa_dummypomsgset.pluralforms
  2
  >>> apa_dummypomsgset.active_texts
  [None, None]

We can guess the pluralforms for this language thru ILanguage.pluralforms:

  >>> ru_dummypofile = upstream_evo.getDummyPOFile('ru')
  >>> ru_dummypomsgset = ru_dummypofile.getPOMsgSet(u'%d contact')

  >>> print ru_dummypomsgset.pofile.language.pluralforms
  3
  >>> ru_dummypomsgset.pluralforms
  3
  >>> ru_dummypomsgset.active_texts
  [None, None, None]


POMsgSet.isNewer
----------------

This method tells us whether the active translation was reviewed after the
given timestamp.

  >>> from datetime import datetime
  >>> from pytz import UTC
  >>> from canonical.launchpad.interfaces import TranslationConstants
  >>> pomsgset = POMsgSet.get(2)
  >>> selection = pomsgset.getSelection(TranslationConstants.SINGULAR_FORM)
  >>> selection.date_reviewed.isoformat()
  '2005-04-07T13:19:17.601068+00:00'
  >>> pomsgset.isNewer(datetime(2004, 11, 30, 7, 0, 0, tzinfo=UTC))
  True
  >>> pomsgset.isNewer(datetime(2006, 11, 30, 7, 0, 0, tzinfo=UTC))
  False
