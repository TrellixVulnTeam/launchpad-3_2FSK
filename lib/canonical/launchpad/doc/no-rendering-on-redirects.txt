= No Rendering On Redirects =

We don't want edit and add pages render after a POST when they redirect
to another page, since it doesn't make any sense. For this we have a
mix-in class we can use, NoRenderingOnRedirect, which defines a
__call__ method.

    >>> from zope.publisher.browser import BrowserView
    >>> from canonical.launchpad.webapp.generalform import (
    ...     NoRenderingOnRedirect)
    >>> class TestPage(BrowserView, NoRenderingOnRedirect):
    ...     def index(self):
    ...         return u'index template called'
    ...     def update(self):
    ...         print 'update called'

    >>> class StubResponse:
    ...     _status = 200
    ...     def getStatus(self): return self._status

    >>> class StubRequest:
    ...     def __init__(self, response): self.response = response

    >>> REDIRECTS = {
    ...     301: 'Moved Permanently',
    ...     302: 'Found',
    ...     303: 'See Other',
    ... }

When the response status is not 301, 302 or 303, the page is rendered
normally:

    >>> request = StubRequest(StubResponse())
    >>> page = TestPage(None, request)
    >>> page()
    update called
    u'index template called'

If we simulate a redirect in the update() method, an empty page is
returned:

    >>> class RedirectPage(TestPage):
    ...     def update(self):
    ...         self.request.response._status = self.status

    >>> def exercise_redirecting_page(page_factory):
    ...     for status in sorted(REDIRECTS):
    ...         request = StubRequest(StubResponse())
    ...         page = page_factory(None, request)
    ...         page.status = status
    ...         rendered_page = page()
    ...         print '%d, %s --> %r' % (
    ...             status, REDIRECTS[status], rendered_page)

    >>> exercise_redirecting_page(RedirectPage)
    301, Moved Permanently --> u''
    302, Found             --> u''
    303, See Other         --> u''

If you don't specify a template for the page in ZCML, but specify an
attribute, __page_attribute__ is used to render the page.

    >>> class AttributePage(TestPage):
    ...     __page_attribute__ = 'render_page'
    ...     def render_page(self):
    ...         return u'render_page'
    >>> request = StubRequest(StubResponse())
    >>> page = AttributePage(None, request)
    >>> page()
    update called
    u'render_page'

Of course, redirecting this page will result in an empty page being
returned:

    >>> class RedirectAttributePage(AttributePage):
    ...     def update(self):
    ...         self.request.response._status = self.status

    >>> exercise_redirecting_page(RedirectAttributePage)
    301, Moved Permanently --> u''
    302, Found             --> u''
    303, See Other         --> u''
