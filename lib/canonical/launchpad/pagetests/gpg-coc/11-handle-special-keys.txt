This test verifies that we correctly handle keys which are in some way
special: either invalid, broken, revoked, expired, sign-only or already
imported.

  >>> import email
  >>> from canonical.launchpad.mail import stub
  >>> from canonical.zeca.ftests.harness import ZecaTestSetup

  >>> z = ZecaTestSetup()
  >>> z.setUp()

  >>> malformed   = "XXXX"
  >>> bogus       = "1111 1111 1111 1111 1111  1111 1111 1111 1111 1111"
  >>> revoked     = "84D2 05F0 3E1E 6709 6CB5  4E26 2BE8 3793 AACC D97C"
  >>> expired     = "ECA5 B797 586F 2E27 381A  16CF DE6C 9167 046C 6D63"
  >>> sign_only   = "447D BF38 C4F9 C4ED 7522  46B7 7D88 9137 17B0 5A8F"
  >>> preimported = "A419AE861E88BC9E04B9C26FBA2B9389DFD20543"

Try to import a key which is not on any keyserver:

  >>> user_browser.open('http://launchpad.dev/people/name12/+editpgpkeys')
  >>> user_browser.getControl(name='fingerprint').value = bogus
  >>> user_browser.getControl(name='import').click()
  >>> "Have you published your key" in user_browser.contents
  True
  >>> "A message has been sent" in user_browser.contents
  False
  >>> stub.test_emails
  []

Or malformed:

  >>> user_browser.open('http://launchpad.dev/people/name12/+editpgpkeys')
  >>> user_browser.getControl(name='fingerprint').value = malformed
  >>> user_browser.getControl(name='import').click()
  >>> "A message has been sent" in user_browser.contents
  False
  >>> stub.test_emails
  []
  >>> print user_browser.contents
  <BLANKLINE>
  ...
  ...A malformed fingerprint was submitted... 

Or revoked:

  >>> user_browser.open('http://launchpad.dev/people/name12/+editpgpkeys')
  >>> user_browser.getControl(name='fingerprint').value = revoked
  >>> user_browser.getControl(name='import').click()
  >>> "A message has been sent" in user_browser.contents
  False
  >>> stub.test_emails
  []
  >>> print user_browser.contents
  <BLANKLINE>
  ...
  ...it has been publically revoked...

Or a key which is expired:

  >>> user_browser.open('http://launchpad.dev/people/name12/+editpgpkeys')
  >>> user_browser.getControl(name='fingerprint').value = expired
  >>> user_browser.getControl(name='import').click()
  >>> "A message has been sent" in user_browser.contents
  False
  >>> stub.test_emails
  []
  >>> print user_browser.contents
  <BLANKLINE>
  ...
  ...it has expired...

Or a key which is already imported:

  >>> user_browser.open('http://launchpad.dev/people/name12/+editpgpkeys')
  >>> user_browser.getControl(name='fingerprint').value = preimported
  >>> user_browser.getControl(name='import').click()
  >>> "A message has been sent" in user_browser.contents
  False
  >>> stub.test_emails
  []
  >>> print user_browser.contents
  <BLANKLINE>
  ...
  ...has already been imported...

Finally, a key which is sign-only. This one is actually supported and
has a special validation email..

  >>> user_browser.open('http://launchpad.dev/people/name12/+editpgpkeys')
  >>> user_browser.getControl(name='fingerprint').value = sign_only
  >>> user_browser.getControl(name='import').click()
  >>> print user_browser.contents
  <BLANKLINE>
  ...
  ...A message has been sent...

..which is not encrypted..

  >>> "decrypt the message" in user_browser.contents
  False

and looks like this:

  >>> from_addr, to_addrs, raw_msg = stub.test_emails.pop()
  >>> msg = email.message_from_string(raw_msg)
  >>> print msg.get_payload(decode=True)
  <BLANKLINE>
  ...
  We received a request from Sample Person using email address 
  test@canonical.com, trying to confirm an OpenPGP key for use in 
  Launchpad.
  <BLANKLINE>
  Key details:
  <BLANKLINE>
  447DBF38C4F9C4ED752246B77D88913717B05A8F
  1024D/17B05A8F
  sign.only@canonical.com
  <BLANKLINE>
  <BLANKLINE>
  Please go here to finish adding the key to your Launchpad account:
  http://.../token/...
  ...

Finally, kill zeca:

  >>> z.tearDown()

