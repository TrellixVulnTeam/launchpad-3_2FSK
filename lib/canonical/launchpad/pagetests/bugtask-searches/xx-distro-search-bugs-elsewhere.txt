The advanced search page provides widgets for filtering the bugtasks
depending on the bugtasks's related task. First let's look at which
bugs are returned without using the advanced search features.

  >>> anon_browser.open('http://localhost/distros/ubuntu/+bugs')
  >>> from BeautifulSoup import BeautifulSoup
  >>> def print_bugtasks(text):
  ...     soup = BeautifulSoup(anon_browser.contents)
  ...     table = soup('table', {'id': 'buglisting'})[0]
  ...     for tr in table('tr'):
  ...         if not tr.td:
  ...             continue
  ...         icon, id, description = tr('td', limit=3)
  ...         print id.string, description.a.string
  >>> print_bugtasks(anon_browser.contents)
  1 Firefox does not support SVG
  2 Blackhole Trash folder
  9 Thunderbird crashes
  10 another test bug

Now if we go to the advanced search and choose to list only the bugs
needing a bug watch, only the ones not having a bug watch (and whose
target doesn't use Malone) are returned.

  XXX: Can't click on the link due to bug 51853.
       -- Bjorn Tillenius, 2006-07-04
  >>> anon_browser.getLink('Advanced search').attrs['href']
  '?advanced=1'
  >>> anon_browser.open('http://localhost/distros/ubuntu/+bugs?advanced=1')
  >>> anon_browser.url
  'http://localhost/distros/ubuntu/+bugs?advanced=1'

  >>> upstream_status = anon_browser.getControl(name='field.status_upstream')
  >>> upstream_status.displayValue = [
  ...     'Show only bugs that need to be linked to an upstream bug report']
  >>> anon_browser.getControl('Search', index=0).click()
  >>> print_bugtasks(anon_browser.contents)
  2 Blackhole Trash folder


We can also show only the bugs that have a closed task somewhere else.
We don't have any in the sample data, so let's change some statuses
first.

  >>> from zope.component import getUtility
  >>> from canonical.launchpad.ftests import login, logout
  >>> from canonical.launchpad.interfaces import IBugSet
  >>> from canonical.lp.dbschema import BugTaskStatus
  >>> login('test@canonical.com')
  >>> bug_one = getUtility(IBugSet).get(1)
  >>> debian_task = bug_one.bugtasks[2]
  >>> debian_task.targetname
  u'mozilla-firefox (Debian)'
  >>> OLD_DEBIAN_STATUS = debian_task.status
  >>> debian_task.transitionToStatus(BugTaskStatus.FIXRELEASED)
  >>> bug_nine = getUtility(IBugSet).get(9)
  >>> thunderbird_task = bug_nine.bugtasks[0]
  >>> thunderbird_task.targetname
  u'thunderbird (upstream)'
  >>> OLD_THUNDERBIRD_STATUS = thunderbird_task.status
  >>> thunderbird_task.transitionToStatus(BugTaskStatus.REJECTED)

  >>> from canonical.database.sqlbase import flush_database_updates
  >>> flush_database_updates()
  >>> logout()

Now, if we choose to show only closed upstream task, only the bugs we
modified above will show up.

  >>> anon_browser.open('http://localhost/distros/ubuntu/+bugs?advanced=1')
  >>> anon_browser.url
  'http://localhost/distros/ubuntu/+bugs?advanced=1'

  >>> upstream_status = anon_browser.getControl(name='field.status_upstream')
  >>> upstream_status.displayValue = [
  ...     'Show only bugs that are closed upstream']
  >>> anon_browser.getControl('Search', index=0).click()
  >>> print_bugtasks(anon_browser.contents)
  1 Firefox does not support SVG
  9 Thunderbird crashes

Another useful thing is to hide bugs that are open (and not fixed)
elsewhere. This allows developers to hide bugs that should be fixed
upstream. After the bug has been fixed upstream, the bug will show up
in the bug listing again.

  >>> anon_browser.open('http://localhost/distros/ubuntu/+bugs?advanced=1')
  >>> anon_browser.url
  'http://localhost/distros/ubuntu/+bugs?advanced=1'

  >>> upstream_status = anon_browser.getControl(name='field.status_upstream')
  >>> upstream_status.displayValue = [
  ...     'Hide bugs that are open upstream']
  >>> anon_browser.getControl('Search', index=0).click()
  >>> print_bugtasks(anon_browser.contents)
  1 Firefox does not support SVG
  9 Thunderbird crashes
  10 another test bug

Let's reset the statuses we set.

  >>> login('test@canonical.com')
  >>> debian_task.transitionToStatus(OLD_DEBIAN_STATUS)
  >>> thunderbird_task.transitionToStatus(OLD_THUNDERBIRD_STATUS)
  >>> logout()
