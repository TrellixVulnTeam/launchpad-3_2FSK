= Choosing a Product Bugtracker =

When choosing which bug tracker a Product uses, there are three possible
options. A product can choose to use Launchpad as its bug tracker, an external
bug tracker, or no specific bug tracker, which means either none or its
Project's bug tracker. This information is captured using two
attributes, 'official_malone' and 'bugtracker', and we'll use a custom
widget and a custom field in order to set these values. This is
presented to the user as radio buttons, where the option for using an
external bug tracker includes a dropdown for choosing the correct
tracker.

Let's take Firefox as an example, it uses Launchpad as its bug tracker.

    >>> from canonical.launchpad.interfaces import IProductSet
    >>> firefox = getUtility(IProductSet).getByName('firefox')
    >>> firefox.official_malone
    True

If we render the widget, it will have the 'No bug tracker' option
selected, since that's what the custom field's missing value represent.

    >>> from canonical.launchpad.interfaces import IProduct 
    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest
    >>> from canonical.widgets.product import ProductBugTrackerWidget
    >>> product_bugtracker = IProduct['bugtracker'].bind(
    ...     firefox)
    >>> widget = ProductBugTrackerWidget(
    ...     product_bugtracker, product_bugtracker.vocabulary,
    ...     LaunchpadTestRequest())

    >>> from BeautifulSoup import BeautifulSoup
    >>> def print_items(html):
    ...     soup = BeautifulSoup(html)
    ...     labels = soup('label')
    ...     for label in labels:
    ...         print label.renderContents()
    ...         if label.previous.previous.get('checked'):
    ...             print 'SELECTED'
    ...         else:
    ...             print 'NOT SELECTED'
    >>> print_items(widget())
    In Launchpad NOT SELECTED
    In a registered bug tracker: NOT SELECTED
    Somewhere else SELECTED

The selected option says "No bug tracker" since Firefox's project
doesn't have a bug tracker specified

    >>> firefox.project.bugtracker is None
    True

If we specify a bug tracker for the project, this will change.  Now the
bug tracker will be listed instead, since it's unlikely that a product
is part of a project (using a bug tracker), but still doesn't use any
bug tracker to track its bugs.

    >>> from canonical.launchpad.interfaces import IBugTrackerSet
    >>> gnome_bugzilla = getUtility(IBugTrackerSet).getByName('gnome-bugzilla')
    >>> login('foo.bar@canonical.com')
    >>> firefox.project.bugtracker = gnome_bugzilla

    >>> print_items(widget())
    In Launchpad NOT SELECTED
    In a registered bug tracker: NOT SELECTED
    In the the Mozilla Project bug tracker (<a...>GnomeGBug GTracker</a>)
    SELECTED

And if Firefox wouldn't have a project at all, "No bug tracker" is once
again showed.

    >>> old_firefox_project = firefox.project
    >>> firefox.project = None

    >>> print_items(widget())
    In Launchpad NOT SELECTED
    In a registered bug tracker: NOT SELECTED
    Somewhere else SELECTED

If we call setRenderedValue with a specific bug tracker, the
External bug tracker option will be selected.

    >>> from canonical.launchpad.interfaces import IBugTrackerSet
    >>> mozilla_bugtracker = getUtility(IBugTrackerSet).getByName(
    ...     'mozilla.org')
    >>> widget.setRenderedValue(mozilla_bugtracker)

    >>> print_items(widget())
    In Launchpad NOT SELECTED
    In a registered bug tracker: SELECTED
    Somewhere else NOT SELECTED

The custom field has a marker attribute which represents Launchpad. If we call
setRenderedValue with this marker, the "In Launchpad" option is selected.

    >>> widget.setRenderedValue(widget.context.malone_marker)
    >>> print_items(widget())
    In Launchpad SELECTED
    In a registered bug tracker: NOT SELECTED
    Somewhere else NOT SELECTED

Now, let's pass some request values to the widget to show how it reacts
on different user inputs. We start by simply passing 'malone' to it,
which means that bugs are tracked in Launchpad. This will mean that
getInputValue will return the special Malone marker object we used
above. We'll also pass a bug tracker value to the widget, which won't
affect what getInputValue() returns.

    >>> form = {
    ...     'field.bugtracker': 'malone', 'field.bugtracker.bugtracker': '3'}
    >>> widget = ProductBugTrackerWidget(
    ...     product_bugtracker, product_bugtracker.vocabulary,
    ...     LaunchpadTestRequest(form=form))
    >>> widget.getInputValue() is product_bugtracker.malone_marker
    True

If we look more closely, we can see that the bugtracker value we passed
to the widget caused the sub-widget used to select the bug tracker to
have the correct value.

    >>> widget.bugtracker_widget.getInputValue().id
    3
    >>> widget.bugtracker_widget.getInputValue().name
    u'debbugs'

If we indicate that we want to use an external bug tracker, the selected
bug tracker will be returned. The same bug tracker as above will be
passed as well.

    >>> form['field.bugtracker'] = 'external'
    >>> widget = ProductBugTrackerWidget(
    ...     product_bugtracker, product_bugtracker.vocabulary,
    ...     LaunchpadTestRequest(form=form))
    >>> debbugs = widget.getInputValue()
    >>> debbugs.name
    u'debbugs'

The sub-widget for selecting the external bug tracker will of
course also have debbugs as its input value.

    >>> widget.getInputValue() == debbugs
    True

And finally, if we choose to use the Project's bug tracker, or no bug
tracker at all, using 'project', None will be returned.

    >>> form['field.bugtracker'] = 'project'
    >>> widget = ProductBugTrackerWidget(
    ...     product_bugtracker, product_bugtracker.vocabulary,
    ...     LaunchpadTestRequest(form=form))
    >>> widget.getInputValue() is None
    True


We can't use the value returned from getInputValue() to set an
attribute on the Product directly. Instead the custom field,
ProductBugTracker, is used. It knows how to deal with the special
malone marker when getting and setting the values.

Firefox still uses Malone officially, which means that the field
returns the marker object.

    >>> firefox.official_malone
    True
    >>> firefox.bugtracker is None
    True
    >>> product_bugtracker.get(firefox) is product_bugtracker.malone_marker
    True

If we pass a bug tracker to the field's set method, it will unset
official_malone and set the bug tracker.

    >>> login('test@canonical.com')
    >>> product_bugtracker.set(firefox, debbugs)
    >>> firefox.official_malone
    False
    >>> firefox.bugtracker.name
    u'debbugs'

If we choose to use Malone again, the changes above will be reverted.

    >>> product_bugtracker.set(firefox, product_bugtracker.malone_marker)
    >>> firefox.official_malone
    True
    >>> firefox.bugtracker is None
    True

If we pass None to the field's set method, Firefox will once again
switch to not using Malone, and its bug tracker will be set to None.

    >>> product_bugtracker.set(firefox, None)
    >>> firefox.official_malone
    False
    >>> firefox.bugtracker is None
    True
