= Build Record UI =

Presenting Build Record details:

  >>> anon_browser.open("http://localhost/+builds/+build/17")
  >>> anon_browser.contents
  '...i386 build of pmount 0.1-1 in ubuntu breezy-autotest...
  ...pmount...
  ...0.1-1...
  ...ubuntu...
  ...breezy-autotest...
  ...i386...
  ...Failed to build...
  ...2005-10-01...
  ...2005-10-02...'

With anonymous access, Retry Build link should not be there

  >>> anon_browser.getLink("Retry build")
  Traceback (most recent call last):
  ...
  LinkNotFoundError

...and if we go directly to the page, no dice

  >>> anon_browser.open("http://localhost/+builds/+build/17/+retry")
  Traceback (most recent call last):
  ...
  Unauthorized: ...

Let's log in and the link should appear:

  >>> admin_browser.open("http://localhost/+builds/+build/17")
  >>> admin_browser.getLink("Retry build").click()
  >>> admin_browser.contents
  '...i386 build of pmount 0.1-1 in ubuntu breezy-autotest...
  ...Retry Build...'

We'll also set up a second browser pointing at this page, for later.
XXX: waiting for bug #68655's cloneBrowser function.

  >>> admin_browser_2 = setupBrowser(auth="Basic foo.bar@canonical.com:test")
  >>> admin_browser_2.open("http://localhost/+builds/+build/17")
  >>> admin_browser_2.getLink("Retry build").click()

Performing "Retry Build" with the first browser

  >>> admin_browser.getControl("Retry Build").click()
  >>> admin_browser.contents
  '...Build record active...'

Now it's active again, the retry button and the link to the retry page
are gone.

  >>> admin_browser.getLink("Retry build")
  Traceback (most recent call last):
  ...
  LinkNotFoundError

The second browser has old content, so still has a retry build button.
Clicking this should give a warning.

  >>> admin_browser_2.getControl("Retry Build").click()
  >>> admin_browser_2.contents
  '...Build can not be retried...'

Build rescoring feature (fixed bug #44227, we create build records
when retrying a build, so there is not life-cycle for a pending build
w/o build record anymore.)

  >>> admin_browser.getLink("Rescore build").click()
  >>> admin_browser.getControl(name="SCORE").value = '100'
  >>> admin_browser.getControl("Update").click()
  >>> admin_browser.contents
  '...Rescore i386 build of pmount 0.1-1 in ubuntu breezy-autotest...
  ...Build Record rescored to 100...'

it also checks input data sanity (bug # 44240):

  >>> admin_browser.getControl(name="SCORE").value = 'foo'
  >>> admin_browser.getControl("Update").click()
  >>> admin_browser.contents
  '...Rescore i386 build of pmount 0.1-1 in ubuntu breezy-autotest...
  ...priority must be an integer not "foo"...'


Also handles attempts to rescore a build in the wrong state:

  >>> print http(r"""
  ... POST /ubuntu/+source/netapplet/0.99.6-1/+build/13/+rescore HTTP/1.1
  ... Authorization: Basic Y2FybG9zQGNhbm9uaWNhbC5jb206dGVzdA==
  ... Content-Length: 9
  ...
  ... RESCORE=6""")
  HTTP/1.1 200 Ok
  Content-Length: ...
  ...i386 build of netapplet 0.99.6-1 in ubuntu warty...
  ...Build can not be rescored...

Build record inserted by gina that has an unknown build record.

  >>> admin_browser.open("http://localhost/+builds/+build/10")
  >>> admin_browser.contents
  '...Build details...
  ...Changes file...not available...
  ...Successfully built...
  ...2006-01-27...
  ...Started...not available...
  ...Finished...not available...
  ...Builder...not available...
  ...Build log...not available...'


== Buildd Admins ==

Check if buildd-celebrity is working as expected, try to access protected
pages as cprov (launchpad-buildd-admins member). Not using the better login
method here, as don't know the password.

  >>> cprov_browser = setupBrowser(
  ...       auth='Basic celso.providelo@canonical.com:cprov')
  >>> cprov_browser.open("http://localhost/+builds/+build/12")
  >>> cprov_browser.getLink("Retry build").click()
  >>> cprov_browser.getControl("Retry Build").click()
  >>> cprov_browser.contents
  '...Build record active...'

Allow Re-score:

  >>> cprov_browser.getLink("Rescore build").click()
  >>> cprov_browser.getControl(name="SCORE").value = '100'
  >>> cprov_browser.getControl("Update").click()
  >>> cprov_browser.contents
  '...Build Record rescored to 100...'


=== Dealing with Builders ===

Only buildd-celebrities are allowed to add/modify builders

Adding new builder:

  >>> cprov_browser.open("http://localhost/+builds/+new")

Administration of a builder:

  >>> cprov_browser.open("http://localhost/+builds/bob/+admin")

Adding new builder still denied for non-members (Edgar, no membership):

  >>> one_browser = setupBrowser(auth="Basic one-membership@test.com:test")
  >>> one_browser.open("http://localhost/+builds/+new")
  Traceback (most recent call last):
  ...
  Unauthorized:...

Adding a new builder is also denied for anonymous:

  >>> anon_browser.open(
  ...     "http://localhost/+builds/+new")
  Traceback (most recent call last):
  ...
  Unauthorized: ...


== PPA Builds ==

While keeping the same permission scheme we have for ubuntu builds,
i.e. that admins and lp-buildd-admins can modify them, PPA builds
also grant those rights to the PPA owner.

'anonymous' and 'normal users' (i.e. authenticated users not related to
the archive) are not allowed to modify the build record.

  >>> anon_browser.open("http://localhost/ubuntu/+source/cdrkit/1.0/+build/24")
  >>> anon_browser.getLink('Retry build')
  Traceback (most recent call last):
  ...
  LinkNotFoundError

  >>> one_browser.open("http://localhost/ubuntu/+source/cdrkit/1.0/+build/24")
  >>> one_browser.getLink('Retry build')
  Traceback (most recent call last):
  ...
  LinkNotFoundError

  >>> one_browser.open(
  ...     "http://localhost/ubuntu/+source/cdrkit/1.0/+build/24/+retry")
  Traceback (most recent call last):
  ...
  Unauthorized:...

  >>> anon_browser.open(
  ...     "http://localhost/ubuntu/+source/cdrkit/1.0/+build/24/+retry")
  Traceback (most recent call last):
  ...
  Unauthorized: ..., 'browserDefault', 'launchpad.Edit')

Ensure 'admins' and 'lp-buildd-admins' (foo.bar is a member of
lp-buildd-admins) have access for retrying PPA build.

  >>> admin_browser.open("http://localhost/ubuntu/+source/cdrkit/1.0/+build/24")
  >>> print_action_links(admin_browser.contents)
  Retry build: http://localhost/~no-priv/+archive/+build/24/+retry

  >>> user_browser.open("http://localhost/ubuntu/+source/cdrkit/1.0/+build/24")
  >>> print_action_links(user_browser.contents)
  Retry build: http://localhost/~no-priv/+archive/+build/24/+retry

PPA build pages also have some text telling the viewer that they can retry
the build if that action is possible:

  >>> extract_text(find_main_content(admin_browser.contents))
  u"...Use the 'Retry build' link in the Actions menu if you wish..."

PPA owner can 'retry' a build.

  >>> no_priv_browser = setupBrowser(auth="Basic no-priv@canonical.com:test")
  >>> no_priv_browser.open(
  ...     "http://localhost/ubuntu/+source/cdrkit/1.0/+build/24")
  >>> no_priv_browser.getLink('Retry build').click()
  >>> no_priv_browser.getControl("Retry Build").click()
  >>> no_priv_browser.contents
  '...Build record active...'

PPA owner may not re-score the build record. They could heavily mess
with the PPA build ordering by having the ability to assign *any*
enormous score value.

  >>> no_priv_browser.getLink("Rescore build").click()
  Traceback (most recent call last):
  ...
  LinkNotFoundError


'admins' and 'lp-build-admins' are the only entities able to
re-scoring PPA jobs:

  >>> admin_browser.open("http://localhost/ubuntu/+source/cdrkit/1.0/+build/24")
  >>> admin_browser.getLink('Rescore build').click()
  >>> admin_browser.getControl(name="SCORE").value
  '0'
  >>> admin_browser.getControl(name="SCORE").value = '100'
  >>> admin_browser.getControl("Update").click()
  >>> admin_browser.contents
  '...Rescore i386 build of cdrkit 1.0 in ubuntu warty...
  ...Build Record rescored to 100...'


  >>> cprov_browser.open("http://localhost/ubuntu/+source/cdrkit/1.0/+build/24")
  >>> cprov_browser.getLink('Rescore build').click()
  >>> cprov_browser.getControl(name="SCORE").value
  '100'
  >>> cprov_browser.getControl(name="SCORE").value = '200'
  >>> cprov_browser.getControl("Update").click()
  >>> cprov_browser.contents
  '...Rescore i386 build of cdrkit 1.0 in ubuntu warty...
  ...Build Record rescored to 200...'
