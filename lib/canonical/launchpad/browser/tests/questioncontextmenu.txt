QuestionContextMenu
-----------------

This file tests the QuestionContextMenu implementation.

    >>> from canonical.launchpad.browser.ticket import QuestionContextMenu

QuestionContextMenu is for a Question context. Since it only uses a few
attributes, we can use mock objects:

    >>> class ticket(object):
    ...     def __init__(self, **kwargs):
    ...         self.__dict__.update(kwargs)
    ...
    ...     def isSubscribed(self, person):
    ...         return self.subscribed

    >>> def setup_menu(bugs=(), subscribed=False):
    ...     menu = QuestionContextMenu(ticket(bugs=bugs, subscribed=subscribed))
    ...     menu._user = None
    ...     menu.initialize()
    ...     return menu

    >>> menu = setup_menu()

The 'Edit Request' and 'Link Existing Bug' links should be always
available:

    >>> menu.edit().enabled
    True
    >>> menu.linkbug().enabled
    True

'Create Bug' links should be available only when there are no existing
bugs linked to the ticket:

    >>> menu_with_bugs = setup_menu(bugs=[1])

    >>> menu.makebug().enabled
    True
    >>> menu_with_bugs.makebug().enabled
    False

The 'Remove Bug Link' link should only appear if there are existing
bug links:

    >>> menu.unlinkbug().enabled
    False

    >>> menu_with_bugs.unlinkbug().enabled
    True

The 'Subscribe' link only appears when the user is not subscribed to
the bug.

    (Let's fake a logged in user):
    >>> menu._user = object()

    >>> def print_link(link):
    ...     print link.text, repr(link.enabled)
    >>> print_link(menu.subscription())
    Subscribe True

When he is subscribed, the link text changes to 'Unsubscribe':

    >>> menu_subscribed = setup_menu(subscribed=True)
    >>> menu_subscribed._user = object()

    >>> print_link(menu_subscribed.subscription())
    Unsubscribe True


