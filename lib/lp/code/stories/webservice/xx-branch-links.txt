Branch links
============

  >>> from lazr.restful.testing.webservice import pprint_entry


Set up a branch and a bug to link to.

    >>> login('admin@canonical.com')
    >>> cybertron = factory.makeProduct(name='cybertron')
    >>> prime = factory.makePerson(name='prime',
    ...     displayname='Optimus Prime')
    >>> farmer_joe_url = '/~prime'
    >>> _robots = factory.makeAnyBranch(product=cybertron, owner=prime,
    ...     name='robots')
    >>> robots_url = '/' + _robots.unique_name
    >>> _bug = factory.makeBug(product=cybertron)
    >>> bug_url = '/bugs/' + str(_bug.id)
    >>> _spec = factory.makeSpecification()
    >>> spec_url = '/' + '/'.join([_spec.product.name, '+spec', _spec.name])
    >>> logout()


Branch linking and unlinking bugs
=================================

A bug can be linked to a branch through the API.

    >>> robots = webservice.get(robots_url).jsonBody()
    >>> bug = webservice.get(bug_url).jsonBody()
    >>> _unused = webservice.named_post(
    ...     robots['self_link'], 'linkBug', bug=bug['self_link'])
    >>> bugs = webservice.get(
    ...     robots['linked_bugs_collection_link']).jsonBody()
    >>> bug = bugs['entries'][0]
    >>> pprint_entry(bug)
    attachments_collection_link: u'http://.../bugs/.../attachments'
    bug_tasks_collection_link: u'http://.../bugs/.../bug_tasks'
    bug_watches_collection_link: u'http://.../bugs/.../bug_watches'
    cves_collection_link: u'http://.../bugs/.../cves'
    date_created: u'...'
    date_last_message: u'...'
    date_last_updated: u'...'
    date_made_private: None
    description: u'generic-string...'
    duplicate_of_link: None
    duplicates_collection_link: u'http://.../bugs/.../duplicates'
    id: 16
    messages_collection_link: u'http://.../bugs/.../messages'
    name: None
    owner_link: u'http://.../~person-name...'
    private: False
    resource_type_link: u'http://.../#bug'
    security_related: False
    self_link: u'http://.../bugs/...'
    subscriptions_collection_link: u'http://.../bugs/16/subscriptions'
    tags: []
    title: u'generic-string12'
    users_affected_collection_link: u'http://.../bugs/16/users_affected'
    users_affected_count: 1
    users_unaffected_count: 0
    who_made_private_link: None


If it turns out that the branch has no connection with the bug, it can be
unlinked from the bug as well.

    >>> _unused = webservice.named_post(
    ...     robots['self_link'], 'unlinkBug', bug=bug['self_link'])
    >>> bugs = webservice.get(
    ...     robots['linked_bugs_collection_link']).jsonBody()
    >>> print len(bugs['entries'])
    0


Branch linking and unlinking blueprints
=======================================

A spec can be linked to a branch through the API.

    >>> spec = webservice.get(spec_url).jsonBody()
    >>> _unused = webservice.named_post(
    ...     robots['self_link'], 'linkSpecification', spec=spec['self_link'])
    >>> spec_links = webservice.get(
    ...     robots['spec_links_collection_link']).jsonBody()
    >>> spec_link = spec_links['entries'][0]
    >>> pprint_entry(spec_link)
    branch_link: u'http://.../~prime/cybertron/robots'
    registrant_link: u'http://.../~salgado'
    resource_type_link: u'http://.../#specification_branch'
    self_link: u'http://.../product-name.../+spec/name.../+branch/prime/cybertron/robots'
    specification_link: u'http://.../product-name.../+spec/name...'


If it turns out that the branch has no connection with the spec, it can be
unlinked from the spec as well.

    >>> _unused = webservice.named_post(
    ...     robots['self_link'], 'unlinkSpecification', spec=spec['self_link'])
    >>> spec_links = webservice.get(
    ...     robots['spec_links_collection_link']).jsonBody()
    >>> print len(spec_links['entries'])
    0




