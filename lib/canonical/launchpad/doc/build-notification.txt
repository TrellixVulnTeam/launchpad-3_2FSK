= Build Notification System =

IBuild instance implements the 'notify' method which sends and status
report about the current record to the
ISourcePackageRelease.creator.preferred email.

We rely on contactEmailAddresses() to DTRT, either use the
Team.contactaddress of the Launchpad Buildd Celebrity or the
preferredemail of its members.

The report is based on the emailtemplate/build-notification.txt.

All build states are supported by the current implementation, however
only failures should be reported this time.

  >>> from canonical.launchpad.interfaces import IBuildSet
  >>> from canonical.launchpad.mail import stub
  >>> import transaction

  >>> buildset = getUtility(IBuildSet)

To avoid consequences of modified sampledata, specially if we add
more builds for test we are going to pick a specific build record
in a known state to perform the tests.

Notification for a FAILEDTOBUILD (failed) build record:

  >>> failed_candidate = buildset.getByBuildID(17)
  >>> failed_candidate.sourcepackagerelease.name
  u'pmount'
  >>> failed_candidate.buildstate.name
  'FAILEDTOBUILD'
  >>> failed_candidate.sourcepackagerelease.creator.name
  u'sabdfl'

  >>> failed_candidate.notify()
  >>> transaction.commit()

Check how many email the system have sent:

  >>> len(stub.test_emails)
  3

We need to sort the list of emails by the second element, the recipient:

  >>> stub.test_emails.sort(key=lambda x: x[1], reverse=True)

The members of launchpad-buildd-admins are notified:

  >>> from_addr, to_addrs, raw_msg = stub.test_emails.pop()
  >>> to_addrs
  ['celso.providelo@canonical.com']

  >>> from_addr, to_addrs, raw_msg = stub.test_emails.pop()
  >>> to_addrs
  ['foo.bar@canonical.com']

The maintainer is notified:

  >>> from_addr, to_addrs, raw_msg = stub.test_emails.pop()
  >>> to_addrs
  ['mark@hbd.com']

Let's check the notification content:

  >>> print raw_msg
  Content-Type: text/plain; charset="utf-8"
  MIME-Version: 1.0
  Content-Transfer-Encoding: quoted-printable
  X-Creator-Recipient: mark@hbd.com
  X-Launchpad-Build-State: FAILEDTOBUILD
  To: mark@hbd.com
  From: Launchpad Buildd System <noreply@launchpad.net>
  Subject: [Build #17] i386 build of pmount 0.1-1 in ubuntu breezy-autotest RELEASE
  ...
  Reply-To: Launchpad Buildd System <noreply@launchpad.net>
  Sender: bounces@canonical.com
  Errors-To: bounces@canonical.com
  Return-Path: bounces@canonical.com
  X-Generated-By: Launchpad (canonical.com)
  <BLANKLINE>
   * Source Package: pmount
   * Version: 0.1-1
   * Architecture: i386
   * State: Failed to build
   * Duration: three minutes
   * Build Log: http://localhost:58000/1/netapplet-1.0.0.tar.gz
   * Builder: http://launchpad.dev/+builds/bob
  <BLANKLINE>
  If you want further information about this situation, feel free to
  contact a member of the Launchpad Buildd Administrators team.
  <BLANKLINE>
  --
  i386 build of pmount 0.1-1 in ubuntu breezy-autotest RELEASE
  http://launchpad.dev/+builds/+build/17
  <BLANKLINE>


Notification for a pending (NEEDSBUILD) build record:

  >>> pending_candidate = buildset.getByBuildID(11)
  >>> pending_candidate.sourcepackagerelease.name
  u'alsa-utils'
  >>> pending_candidate.buildstate.name
  'NEEDSBUILD'
  >>> pending_candidate.sourcepackagerelease.creator.name
  u'sabdfl'

  >>> pending_candidate.notify()
  >>> transaction.commit()

Check how many email the system have sent:

  >>> len(stub.test_emails)
  3

We need to sort the list of emails by the second element, the recipient:

  >>> stub.test_emails.sort(key=lambda x: x[1], reverse=True)

The members of launchpad-buildd-admins are notified:

  >>> from_addr, to_addrs, raw_msg = stub.test_emails.pop()
  >>> to_addrs
  ['celso.providelo@canonical.com']

  >>> from_addr, to_addrs, raw_msg = stub.test_emails.pop()
  >>> to_addrs
  ['foo.bar@canonical.com']

The maintainer is notified:

  >>> from_addr, to_addrs, raw_msg = stub.test_emails.pop()
  >>> to_addrs
  ['mark@hbd.com']

Check the notification content:

  >>> print raw_msg
  Content-Type: text/plain; charset="utf-8"
  MIME-Version: 1.0
  Content-Transfer-Encoding: quoted-printable
  X-Creator-Recipient: mark@hbd.com
  X-Launchpad-Build-State: NEEDSBUILD
  To: mark@hbd.com
  From: Launchpad Buildd System <noreply@launchpad.net>
  Subject: [Build #11] i386 build of alsa-utils 1.0.9a-4ubuntu1 in ubuntu hoary RELEASE
  ...
  Reply-To: Launchpad Buildd System <noreply@launchpad.net>
  Sender: bounces@canonical.com
  Errors-To: bounces@canonical.com
  Return-Path: bounces@canonical.com
  X-Generated-By: Launchpad (canonical.com)
  <BLANKLINE>
   * Source Package: alsa-utils
   * Version: 1.0.9a-4ubuntu1
   * Architecture: i386
   * State: Needs building
   * Duration: not available
   * Build Log: not available
   * Builder: not available
  <BLANKLINE>
  If you want further information about this situation, feel free to
  contact a member of the Launchpad Buildd Administrators team.
  <BLANKLINE>
  --
  i386 build of alsa-utils 1.0.9a-4ubuntu1 in ubuntu hoary RELEASE
  http://launchpad.dev/+builds/+build/11
  <BLANKLINE>



Notification for a BUILDING build record:

  >>> building_candidate = buildset.getByBuildID(8)
  >>> building_candidate.sourcepackagerelease.name
  u'mozilla-firefox'
  >>> building_candidate.buildstate.name
  'BUILDING'
  >>> building_candidate.sourcepackagerelease.creator.name
  u'sabdfl'

  >>> building_candidate.notify()
  >>> transaction.commit()

Check how many email the system have sent:

  >>> len(stub.test_emails)
  3

We need to sort the list of emails by the second element, the recipient:

  >>> stub.test_emails.sort(key=lambda x: x[1], reverse=True)

The members of launchpad-buildd-admins are notified:

  >>> from_addr, to_addrs, raw_msg = stub.test_emails.pop()
  >>> to_addrs
  ['celso.providelo@canonical.com']

  >>> from_addr, to_addrs, raw_msg = stub.test_emails.pop()
  >>> to_addrs
  ['foo.bar@canonical.com']

The maintainer is notified:

  >>> from_addr, to_addrs, raw_msg = stub.test_emails.pop()
  >>> to_addrs
  ['mark@hbd.com']

Check the notification content:

  >>> print raw_msg
  Content-Type: text/plain; charset="utf-8"
  MIME-Version: 1.0
  Content-Transfer-Encoding: quoted-printable
  X-Creator-Recipient: mark@hbd.com
  X-Launchpad-Build-State: BUILDING
  To: mark@hbd.com
  From: Launchpad Buildd System <noreply@launchpad.net>
  Subject: [Build #8] i386 build of mozilla-firefox 0.9 in ubuntu hoary RELEASE
  ...
  Reply-To: Launchpad Buildd System <noreply@launchpad.net>
  Sender: bounces@canonical.com
  Errors-To: bounces@canonical.com
  Return-Path: bounces@canonical.com
  X-Generated-By: Launchpad (canonical.com)
  <BLANKLINE>
   * Source Package: mozilla-firefox
   * Version: 0.9
   * Architecture: i386
   * State: Currently building
   * Duration: not finished
   * Build Log: see builder page
   * Builder: http://launchpad.dev/+builds/bob
  <BLANKLINE>
  If you want further information about this situation, feel free to
  contact a member of the Launchpad Buildd Administrators team.
  <BLANKLINE>
  --
  i386 build of mozilla-firefox 0.9 in ubuntu hoary RELEASE
  http://launchpad.dev/+builds/+build/8
  <BLANKLINE>


Notification for a SUPERSEDED build record:

  >>> superseded_candidate = buildset.getByBuildID(15)
  >>> superseded_candidate.sourcepackagerelease.name
  u'at'
  >>> superseded_candidate.buildstate.name
  'SUPERSEDED'
  >>> superseded_candidate.sourcepackagerelease.creator.name
  u'sabdfl'

  >>> superseded_candidate.notify()
  >>> transaction.commit()

Check how many email the system have sent:

  >>> len(stub.test_emails)
  3

We need to sort the list of emails by the second element, the recipient:

  >>> stub.test_emails.sort(key=lambda x: x[1], reverse=True)

The members of launchpad-buildd-admins are notified:

  >>> from_addr, to_addrs, raw_msg = stub.test_emails.pop()
  >>> to_addrs
  ['celso.providelo@canonical.com']

  >>> from_addr, to_addrs, raw_msg = stub.test_emails.pop()
  >>> to_addrs
  ['foo.bar@canonical.com']

The maintainer is notified:

  >>> from_addr, to_addrs, raw_msg = stub.test_emails.pop()
  >>> to_addrs
  ['mark@hbd.com']

Check the notification content:

  >>> print raw_msg
  Content-Type: text/plain; charset="utf-8"
  MIME-Version: 1.0
  Content-Transfer-Encoding: quoted-printable
  X-Creator-Recipient: mark@hbd.com
  X-Launchpad-Build-State: SUPERSEDED
  To: mark@hbd.com
  From: Launchpad Buildd System <noreply@launchpad.net>
  Subject: [Build #15] i386 build of at 0.00 in ubuntu warty RELEASE
  ...
  Reply-To: Launchpad Buildd System <noreply@launchpad.net>
  Sender: bounces@canonical.com
  Errors-To: bounces@canonical.com
  Return-Path: bounces@canonical.com
  X-Generated-By: Launchpad (canonical.com)
  <BLANKLINE>
   * Source Package: at
   * Version: 0.00
   * Architecture: i386
   * State: Build for superseded Source
   * Duration: not available
   * Build Log: not available
   * Builder: not available
  <BLANKLINE>
  If you want further information about this situation, feel free to
  contact a member of the Launchpad Buildd Administrators team.
  <BLANKLINE>
  --
  i386 build of at 0.00 in ubuntu warty RELEASE
  http://launchpad.dev/+builds/+build/15
  <BLANKLINE>


Check if the 'build_notification' configuration option really suppress
notification as promised:

  >>> from canonical.config import config
  >>> config.builddmaster.send_build_notification = False
  >>> superseeded_candidate = buildset.getByBuildID(15)
  >>> superseeded_candidate.notify()
  >>> transaction.commit()
  >>> from_addr, to_addrs, raw_msg = stub.test_emails.pop()
  Traceback (most recent call last):
  ...
  IndexError: pop from empty list


Check if 'notify_owner' config option really suppress email to
the SPR owner, but still sending it to the default recipient:

  >>> config.builddmaster.send_build_notification = True
  >>> config.builddmaster.notify_owner = False
  >>> superseded_candidate = buildset.getByBuildID(15)

  >>> superseded_candidate.notify()
  >>> transaction.commit()

Check how many email the system have sent:

  >>> len(stub.test_emails)
  2

We need to sort the list of emails by the second element, the recipient:

  >>> stub.test_emails.sort(key=lambda x: x[1], reverse=True)

Only the members of launchpad-buildd-admins are notified:

  >>> from_addr, to_addrs, raw_msg = stub.test_emails.pop()
  >>> to_addrs
  ['celso.providelo@canonical.com']

  >>> from_addr, to_addrs, raw_msg = stub.test_emails.pop()
  >>> to_addrs
  ['foo.bar@canonical.com']


Just to keep the config sane, as it was before:

  >>> config.builddmaster.notify_owner = True

