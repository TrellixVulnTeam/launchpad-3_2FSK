= Branch Details =

Imports used later in the document:

    >>> import pytz
    >>> from datetime import datetime
    >>> from zope.component import getUtility
    >>> from canonical.launchpad.ftests import login, logout
    >>> from canonical.database.sqlbase import flush_database_updates
    >>> from canonical.launchpad.interfaces import (
    ...     BranchType, BranchFormat, RepositoryFormat, IBranchSet, IPersonSet)


== Recent Revisions ==

On the Code site, registered branches are reached by
/<owner>/<product>/<branch-name>.

    >>> user_browser.open('http://code.launchpad.dev/~name12/+junk/junk.dev')
    >>> revisions = find_tag_by_id(user_browser.contents, 'recent-revisions')


=== Heading ===

We display the recent revisions of a branch if it has been scanned. There's a
"Recent revisions" heading:

    >>> print revisions.h2.renderContents()
    Recent revisions


=== Revision information ===

Underneath that heading we see the ten most-recent revisions of the branch in
reverse-chronological order.  If the revision author has been linked to a
Launchpad person, then a link to the person is shown rather than the
text of the revision author.

    >>> def print_revisions(browser):
    ...     revisions = find_tags_by_class(
    ...         browser.contents, 'revision-details')
    ...     for revision in revisions:
    ...         print extract_text(revision).encode('ascii')

    >>> print_revisions(user_browser)
    6. By foo &lt;foo@localhost&gt; on 2005-10-31
    5. By foo &lt;foo@localhost&gt; on 2005-10-31
    4. By bar@localhost on 2005-10-31
    3. By Sample Person on 2005-10-31
    2. By Sample Person on 2005-10-31
    1. By Sample Person on 2005-10-31

Each of the revision numbers are now anchors to codebrowse (for public
branches).

    >>> revision = find_tags_by_class(
    ...         user_browser.contents, 'revision-details', only_first=True)
    >>> print revision.a
    <a href="http://bazaar.launchpad.dev/~name12/+junk/junk.dev/revision/6">6</a>


=== Email addresses ===

Commit messages often (always?) have email addresses associated with them.
'Revision information' shows that the addresses are shown to logged in users.
However, emails should *not* be shown to anonymous users.

In particular, we don't want search engine and spam bots harvesting email
addresses.

    >>> anon_browser.open('http://code.launchpad.dev/~name12/+branch/+junk/junk.dev')
    >>> print_revisions(anon_browser)
    6. By foo &lt;email address hidden&gt; on 2005-10-31
    5. By foo &lt;email address hidden&gt; on 2005-10-31
    4. By &lt;email address hidden&gt; on 2005-10-31
    3. By Sample Person on 2005-10-31
    2. By Sample Person on 2005-10-31
    1. By Sample Person on 2005-10-31


=== Commit messages ===

The commit message is displayed in paragraphs underneath the revision id and
author.

    >>> browser.open('http://code.launchpad.dev/~name12/+branch/+junk/junk.dev')
    >>> commit_messages = find_tags_by_class(
    ...         browser.contents, 'revision-comment')
    >>> print commit_messages[0].p.renderContents()
    fix bug in bar


When a commit message refers to a bug using the form "bug <bugnumber>", a link
to that bug is created.

    >>> print commit_messages[3].p.renderContents()
    fix <a ...>bug 1</a>


This link can be followed to the bug's details page.

    >>> browser.getLink('bug 1').click()
    >>> print browser.title
    Bug #1 in Mozilla Firefox...


== Unscanned branches ==

Some branches won't have any revisions in the database. Sometimes, this is
simply because the branch is empty. However, much of the time, the lack of
revisions will be because of an error or delay in the scanning process.

Before we can display the revisions, a branch needs to be mirrored (or
'published') and scanned. When a branch is not yet mirrored, we'll see a
helpful message.

    >>> browser.open('http://code.launchpad.dev/~name12/firefox/main')
    >>> print extract_text(find_tag_by_id(browser.contents, 'recent-revisions'))
    Recent revisions
    This branch has not been mirrored yet.

We don't want to use the word 'mirrored' for hosted or imported branches,
because those branches are only mirrored internally.

    >>> browser.open('http://code.launchpad.dev/~name12/gnome-terminal/pushed')
    >>> print extract_text(find_tag_by_id(browser.contents, 'recent-revisions'))
    Recent revisions
    This branch has not been pushed to yet.

    >>> browser.open('http://code.launchpad.dev/~vcs-imports/evolution/main')
    >>> print extract_text(find_tag_by_id(browser.contents, 'recent-revisions'))
    Recent revisions
    This branch has not been imported yet.

If a branch has been mirrored, but not scanned, we display a different message.
This is helpful particularly for hosted and imported branches, which are
available for download as soon as they are published.

    >>> browser.open('http://code.launchpad.dev/~name12/gnome-terminal/mirrored')
    >>> print extract_text(find_tag_by_id(browser.contents, 'recent-revisions'))
    Recent revisions
    This branch has not been scanned yet.

If a branch has been mirrored and scanned, and has no revisions, then it is
empty.

    >>> browser.open('http://code.launchpad.dev/~name12/gnome-terminal/scanned')
    >>> print extract_text(find_tag_by_id(browser.contents, 'recent-revisions'))
    Recent revisions
    This branch is empty.


== Branch Details ==

The branch page includes a table of details about the branch. The exact details
vary from branch type to branch type.

For hosted branches, the table has a link to the branch's project and the URL
for the branch's canonical location.

    >>> def get_branch_details_table():
    ...     table = find_tag_by_id(browser.contents, 'branch-details-table')
    ...     return table.tbody

    >>> browser.open(
    ...     'http://code.launchpad.dev/~name12/gnome-terminal/scanned')
    >>> print extract_text(get_branch_details_table())
    Project: GNOME Terminal
    Upload URL: Only Sample Person can upload to this branch.
      If you are Sample Person please log in for upload directions.
    Branch format
    Not recorded
    Repository format
    Not recorded

For mirrored branches, the table has a link to the branch's project, the
location of the original branch, the mirror on Launchpad, information about
when the branch was last mirrored and when it will be mirrored again.

First we create an example branch, then call the APIs to indicate that it has
been mirrored:

    >>> login('no-priv@canonical.com')
    >>> no_priv = getUtility(IPersonSet).getByName('no-priv')
    >>> branch = getUtility(IBranchSet).new(
    ...     BranchType.MIRRORED, name='mirrored', registrant=no_priv,
    ...     owner=no_priv, product=None, url='http://example.com/mirrored',
    ...     title='Disabled branch')
    >>> branch.last_mirrored = datetime(
    ...     year=2007, month=10, day=1, tzinfo=pytz.timezone('UTC'))
    >>> branch.next_mirror_time = None
    >>> flush_database_updates()
    >>> logout()

    >>> browser.open(
    ...     'http://code.launchpad.dev/~no-priv/+junk/mirrored')
    >>> print extract_text(get_branch_details_table())
    Location: http://example.com/mirrored
    Last mirrored: 2007-10-01
    Next mirror: Disabled
    Branch format
    Not recorded
    Repository format
    Not recorded

Branches that have never been mirrored don't have a 'Last mirrored' field.

    >>> browser.open(
    ...     'http://code.launchpad.dev/~name12/gnome-terminal/main')
    >>> print extract_text(get_branch_details_table())
    Project: GNOME Terminal
    Location: http://example.com/gnome-terminal/main
    Last mirrored: Not mirrored yet
    Next mirror: As soon as possible
    Branch format
    Not recorded
    Repository format
    Not recorded

If next_mirror_time is NULL, then mirroring of the branch is disabled.

(First we make a branch which has a NULL next_mirror_time)

    >>> login('no-priv@canonical.com')
    >>> no_priv = getUtility(IPersonSet).getByName('no-priv')
    >>> branch = getUtility(IBranchSet).new(
    ...     BranchType.MIRRORED, name='mirror-disabled', registrant=no_priv,
    ...     owner=no_priv, product=None, url='http://example.com/disabled',
    ...     title='Disabled branch')
    >>> branch.next_mirror_time = None
    >>> flush_database_updates()
    >>> logout()


    >>> browser.open(
    ...     'http://code.launchpad.dev/~no-priv/+junk/mirror-disabled')
    >>> print extract_text(get_branch_details_table())
    Location: http://example.com/disabled
    Last mirrored: Not mirrored yet
    Next mirror: Disabled
    Branch format
    Not recorded
    Repository format
    Not recorded


== Structural object presentation ==

The structural object presentation of a branch is the heading that appears
in the top left hand corner of the browser, and should refer to the
context object that all the tabs apply to.

    >>> browser.open(
    ...     'http://code.launchpad.dev/~name12/gnome-terminal/scanned')
    >>> print extract_text(find_tag_by_id(
    ...     browser.contents, "structuralobjectheading"))
    Sample Person


== Codebrowse link ==

The codebrowse link only appears for branches that have revisions.

    >>> browser.open(
    ...     'http://code.launchpad.dev/~name12/gnome-terminal/scanned')
    >>> print extract_text(find_tag_by_id(
    ...     browser.contents, "recent-revisions"))
    Recent revisions
    This branch is empty.
    >>> browser.getLink('Browse code')
    Traceback (most recent call last):
    ...
    LinkNotFoundError

Sample Person's junk branch has some revisions, so the 'Browse code'
link is shown.

    >>> browser.open(
    ...     'http://code.launchpad.dev/~name12/+junk/junk.dev')
    >>> print extract_text(find_tag_by_id(
    ...     browser.contents, "recent-revisions").dl)
    6. By foo... fix bug in bar...
    >>> print browser.getLink('Browse code').url
    http://bazaar.launchpad.dev/~name12/+junk/junk.dev/files

In addition, there is a "Browse revisions" link that links to the
changelog view in codebrowse.

    >>> print browser.getLink('Browse revisions').url
    http://bazaar.launchpad.dev/~name12/+junk/junk.dev/changes

If the branch is private, the browse code link is not shown.
In order to see the private branch, we need to log in as a user that
is able to see the branch.

    >>> browser = setupBrowser(auth="Basic test@canonical.com:test")
    >>> browser.open(
    ...     'http://code.launchpad.dev/~landscape-developers/landscape/trunk')
    >>> browser.getLink('Browse code')
    Traceback (most recent call last):
    ...
    LinkNotFoundError


== Download URL ==

In the details table there is a link to the branch download URL.

For public branches this shows links to the codehosting using http, whereas
private branches show bzr+ssh as they are not available over anonymous
http, and anyone who can see the branch is able to access it using bzr+ssh.

The download URL is only shown for branches that actually have revisions.
So we need to fake that here.

    >>> login('foo.bar@canonical.com')
    >>> branch = getUtility(IBranchSet).getByUniqueName(
    ...     '~landscape-developers/landscape/trunk')
    >>> branch.revision_count = 42
    >>> branch = getUtility(IBranchSet).getByUniqueName(
    ...     '~name12/gnome-terminal/scanned')
    >>> branch.revision_count = 13
    >>> flush_database_updates()
    >>> logout()

    >>> browser.open(
    ...     'http://code.launchpad.dev/~landscape-developers/landscape/trunk')
    >>> print extract_text(find_tag_by_id(
    ...     browser.contents, 'branch-details-table'))
    Project: The Landscape Project
    Get this branch:
      bzr branch lp://dev/~landscape-developers/landscape/trunk
    ...

Public branches use the lp spec bzr lookup name.

    >>> browser.open(
    ...     'http://code.launchpad.dev/~name12/gnome-terminal/scanned')
    >>> print extract_text(find_tag_by_id(
    ...     browser.contents, 'branch-details-table'))
    Project: GNOME Terminal
    Get this branch: bzr branch lp://dev/~name12/gnome-terminal/scanned
    ...


== Branch formats ==

    >>> login('no-priv@canonical.com')
    >>> branch = factory.makeBranch(
    ...     branch_format=BranchFormat.BZR_BRANCH_5,
    ...     repository_format=RepositoryFormat.BZR_KNITPACK_1)
    >>> url = canonical_url(branch)
    >>> unscanned_branch = factory.makeBranch()
    >>> unscanned_url = canonical_url(unscanned_branch)
    >>> logout()
    >>> browser.open(url)

The data that we specified is shown on the web page.

    >>> print extract_text(find_tag_by_id(
    ...     browser.contents, 'branch-format'))
    Branch format
    Branch format 5
    >>> print extract_text(find_tag_by_id(
    ...     browser.contents, 'repository-format'))
    Repository format
    Packs containing knits without subtree support

For branches that haven't been scanned, suitable messages are printed.

    >>> browser.open(unscanned_url)
    >>> print extract_text(find_tag_by_id(
    ...     browser.contents, 'branch-format'))
    Branch format
    Not recorded
    >>> print extract_text(find_tag_by_id(
    ...     browser.contents, 'repository-format'))
    Repository format
    Not recorded
