Bug Export
==========

Some projects require regular exports of thier bugs as a condition of
using Launchpad.  This provides them an exit strategy in the event
that they can't use Launchpad anymore.

Since the aim is to provide an export of a product's bugs, we don't
export information about all bug tasks -- only those for the product
in question.

The export is also limited to bug information -- it does not include
links to other Launchpad features such as specifications or support
tickets.


Exporting one bug
-----------------

We will export bug #1 in the context of Firefox.  First some initial setup:

  >>> import sys
  >>> import cElementTree as ET
  >>> from cStringIO import StringIO
  >>> from zope.component import getUtility
  >>> from canonical.launchpad.interfaces import (
  ...     IBugSet, IPersonSet, IProductSet)
  >>> from canonical.launchpad.scripts.bugexport import (
  ...     serialise_bugtask, export_bugtasks)


First get the bug task:

  >>> firefox = getUtility(IProductSet).getByName('firefox')
  >>> bug1 = getUtility(IBugSet).get(1)
  >>> bugtask = bug1.bugtasks[0]
  >>> bugtask.target == firefox
  True

Now we serialise it as XML, and print it:

  >>> node = serialise_bugtask(bugtask)
  >>> tree = ET.ElementTree(node)
  >>> tree.write(sys.stdout)
  <bug id="1">
  <private>False</private>
  <security_related>False</security_related>
  <datecreated>2004-01-01T20:58:04Z</datecreated>
  <title>Firefox does not support SVG</title>
  <description>Firefox needs to support embedded SVG images, now that the standard has been finalised.
  <BLANKLINE>
  The SVG standard 1.0 is complete, and draft implementations for Firefox exist. One of these implementations needs to be integrated with the base install of Firefox. Ideally, the implementation needs to include support for the manipulation of SVG objects from JavaScript to enable interactive and dynamic SVG drawings.</description>
  <reporter name="name12">Sample Person</reporter>
  <status>UNCONFIRMED</status>
  <importance>LOW</importance>
  <assignee name="sabdfl">Mark Shuttleworth</assignee>
  <subscriptions>
  <subscriber name="stevea">Steve Alexander</subscriber>
  <subscriber name="name12">Sample Person</subscriber>
  </subscriptions>
  <comment>
  <sender name="name12">Sample Person</sender>
  <date>2004-09-24T21:17:17Z</date>
  <text>We've seen something very similar on AIX with Gnome 2.6 when it is compiled with XFT support. It might be that the anti-aliasing is causing loopback devices to degrade, resulting in a loss of transparency at the system cache level and decoherence in the undelete function. This is only known to be a problem when the moon is gibbous.</text>
  </comment>
  <comment>
  <sender name="name12">Sample Person</sender>
  <date>2004-09-24T21:24:03Z</date>
  <text>Sorry, it was SCO unix which appears to have the same bug. For a brief moment I was confused there, since so much code is known to have been copied from SCO into AIX.</text>
  </comment>
  </bug>


Exporting a Product's Bugs
--------------------------

Rather than exporting a single bug, we'll usually want to export all
the bugs for a product.  The export_bugtasks() function does this by
successively serialising each of the tasks for that product.

  >>> from canonical.database.sqlbase import ZopelessTransactionManager
  >>> ztm = ZopelessTransactionManager._installed

  >>> export_bugtasks(ztm, firefox, sys.stdout)
  <launchpad-bugs>
  <bug id="1">
  ...
  </bug>
  <bug id="4">
  ...
  <title>Reflow problems with complex page layouts</title>
  ...
  <tags>
  <tag>layout-test</tag>
  </tags>
  ...
  </bug>
  <bug id="5">
  ...
  <title>Firefox install instructions should be complete</title>
  ...
  </bug>
  <bug id="6">
  ...
  <duplicateof bug="5" />
  ...
  <title>Firefox crashes when Save As dialog for a nonexistent window is closed</title>
  ...
  ...
  </bug>
  </launchpad-bugs>


Attachments
-----------

Attachments are included in the XML dump.  First add an attachment to
bug #1.  We need to commit here so that the librarian can later serve
the file when we later serialise the bug:

  >>> login('test@canonical.com')
  >>> bug1 = getUtility(IBugSet).get(1)
  >>> sampleperson = getUtility(IPersonSet).getByEmail('test@canonical.com')
  >>> bug1.addAttachment(sampleperson, StringIO('Hello World'),
  ...                    '"Hello World" attachment', 'Added attachment',
  ...                    'hello.txt')
  <BugAttachment ...>
  >>> ztm.commit()

A reference to the attachment is included with the new comment, and
then later the attachment contents are included using base-64
encoding:

  >>> node = serialise_bugtask(bug1.bugtasks[0])
  >>> tree = ET.ElementTree(node)
  >>> tree.write(sys.stdout)
  <bug id="1">
  ...
  <comment>
  <sender name="name12">Sample Person</sender>
  <date>...</date>
  <text>Added attachment</text>
  <attachment href="http://localhost:58000/.../hello.txt" />
  </comment>
  <attachment href="http://localhost:58000/.../hello.txt">
  <type>UNSPECIFIED</type>
  <title>"Hello World" attachment</title>
  <mimetype>text/plain</mimetype>
  <contents>SGVsbG8gV29ybGQ=
  </contents>
  </attachment>
  ...


Private Bugs
------------

By default a bug export will not include any private bugs.  However,
they can be included by passing the --include-private flag to the
import script.  To test this, we'll make a bug private:

  >>> bug1.private = True
  >>> ztm.commit()


Now we'll do a dump not including private bugs:

  >>> output = StringIO()
  >>> export_bugtasks(ztm, firefox, output)
  >>> '<bug id="1">' in output.getvalue()
  False


However, bug #1 will appear in the export if we include private bugs:

  >>> output = StringIO()
  >>> export_bugtasks(ztm, firefox, output, include_private=True)
  >>> '<bug id="1">' in output.getvalue()
  True
