Bazaar Revisions
================

Branches are collection of revisions, and a revision can exist independently
from any branch. Revisions are created automatically by scanning branches, they
have no creation interface and Launchpad cannot create or modify them.

Revisions have an owner attribute. I do not think that is useful at all, but
Mark wants to keep that around. As a convention, the owner of a Revision is
always the Launchpad Admins team.

>>> from canonical.launchpad.database import Person
>>> admins = Person.selectOneBy(name='admins')

The creator of a revision is identified by a RevisionAuthor. A RevisionAutor is
not a person because that is only an informational attribute, and even if we
trust it, there's really no simple way to map that reliably to persons.

>>> from canonical.launchpad.database import RevisionAuthor
>>> author = RevisionAuthor(name='ddaa@localhost')
>>> author.name
u'ddaa@localhost'

The log-body of a revision is the commit message of that revision.

>>> log_body_1 = "Initial import"
>>> log_body_2 = "Fix froboizer"

The revision-id is the id used by the revision control system. For Arch
revision it's a revision full name (archive/category--branch--version--level),
for native Bazaar2 revisions it's a GUID, for Bazaar2 imports it's some
arbitrary string.

>>> revision_id_1 = "ddaa@example.com/junk--devel--base-0"
>>> revision_id_2 = "some random unique string, we do not care, really"

The revision_date is the commit date recorded by the revision control system,
while the date_created is the time when the database record was created.

>>> from time import strptime
>>> date = strptime("2005-04-01 07:32:02 GMT", '%Y-%m-%d %H:%M:%S %Z')

The diff_adds and diff_deletes attributes should be changed to default to NULL.
And anyway, they should probably be moved to a separate table to model Bazaar2
properly.

>>> from canonical.launchpad.database import Revision
>>> revision_1 = Revision(owner=admins, log_body=log_body_1,
...     revision_author=author, revision_id=revision_id_1, revision_date=date,
...     diff_adds=None, diff_deletes=None)

Bazaar revisions can have multiple ancestors, the "leftmost" ancestor is the
revision that was used as a base when committing, other ancestors are used to
record merges.

All revisions except initial imports have a non-None committed_against
attribute that identify the leftmost ancestor.

>>> revision_2 = Revision(owner=admins, log_body=log_body_2,
...     revision_author=author, revision_id=revision_id_2, revision_date=date,
...     diff_adds=None, diff_deletes=None,
...     commited_against=revision_1)

Revisions are associated to branches through the RevisionNumber table. A given
revision may appear in different positions in different branches thanks to
Bazaar2 converge-on-pull logic.

>>> from canonical.launchpad.database import Branch
>>> branch = Branch.get(1)
>>> branch.revision_history
[] 

TODO: Rename RevisionNumber.rev_no to RevisionNumber.sequence
-- David Allouche 2005-10-19

RevisionNumber does not have a creation interface, like for Revision, new
records are only created automatically by scanning revision control data.

>>> from canonical.launchpad.database import RevisionNumber
>>> junkcode_sql = Branch.selectOneBy(name='junkcode')
>>> rev_no_1 = RevisionNumber(rev_no=1, branch=branch, revision=revision_1)
>>> rev_no_2 = RevisionNumber(rev_no=2, branch=branch, revision=revision_2)
>>> rev_no_1.branch == rev_no_2.branch == branch
True
