= The Bugs front page =

The contents on the Bugs front page is driven by MaloneView. It
doesn't use its context for anything, so we don't have to supply one
when creating it.

    >>> from lp.bugs.browser.bug import MaloneView
    >>> from canonical.launchpad.systemhomes import MaloneApplication
    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest
    >>> bugs_view = MaloneView(MaloneApplication(), LaunchpadTestRequest())
    >>> bugs_view.initialize()


== Recently Fixed Bugs ==

There is a list of the most recently fixed bugs on the page. This list
is generated by getMostRecentlyFixedBugs(), which returns the ten most
recently fixed bugs, across all contexts. Only one bug is fixed in
Launchpad currently.

    >>> from canonical.launchpad.interfaces import BugTaskStatus
    >>> from canonical.launchpad.database import BugTask
    >>> [bugtask.bug.id
    ...  for bugtask in BugTask.selectBy(status=BugTaskStatus.FIXRELEASED)]
    [8]
    >>> for bug in bugs_view.getMostRecentlyFixedBugs():
    ...     print "%s: %s" % (bug.id, bug.title)
    8: Printing doesn't work

Let's reopen it and close it again, to ensure that the date closed isn't
in the future.

    >>> login('test@canonical.com')
    >>> from canonical.launchpad.interfaces import IBugSet
    >>> from canonical.launchpad.ftests import syncUpdate
    >>> bug_eight = getUtility(IBugSet).get(8)
    >>> len(bug_eight.bugtasks)
    1
    >>> bug_eight.bugtasks[0].transitionToStatus(
    ...     BugTaskStatus.CONFIRMED, getUtility(ILaunchBag).user)
    >>> def fix_bug(bug_id, bugtask_index=0):
    ...     bugtask = getUtility(IBugSet).get(bug_id).bugtasks[bugtask_index]
    ...     bugtask.transitionToStatus(
    ...         BugTaskStatus.FIXRELEASED, getUtility(ILaunchBag).user)
    ...     syncUpdate(bugtask)
    >>> fix_bug(8)

If we fix a few other bugs, these will turn up first in the list. It
doesn't matter which bugtask that gets fixed.

    >>> fix_bug(1)
    >>> fix_bug(2)
    >>> fix_bug(4)

    >>> for bug in bugs_view.getMostRecentlyFixedBugs():
    ...     print "%s: %s" % (bug.id, bug.title)
    4: Reflow problems with complex page layouts
    2: Blackhole Trash folder
    1: Firefox does not support SVG
    8: Printing doesn't work

Even though a bug has several fixed bugtasks, it will only show up once
in the list. So if we fix another one of bug one's bugtasks, it will
simply appear on the top of the list.

    >>> fix_bug(1, bugtask_index=1)

    >>> for bug in bugs_view.getMostRecentlyFixedBugs():
    ...     print "%s: %s" % (bug.id, bug.title)
    1: Firefox does not support SVG
    4: Reflow problems with complex page layouts
    2: Blackhole Trash folder
    8: Printing doesn't work

Only the bugs that the user has permission to view are shown in the
list, so if we mark bug #2 as private, No Privileges won't see it, since
he's not subscribed to it.

    >>> bug_two = getUtility(IBugSet).get(2)
    >>> bug_two.setPrivate(True, getUtility(ILaunchBag).user)
    True
    >>> syncUpdate(bug_two)

    >>> login('no-priv@canonical.com')
    >>> bugs_view = MaloneView(MaloneApplication(), LaunchpadTestRequest())
    >>> bugs_view.initialize()
    >>> for bug in bugs_view.getMostRecentlyFixedBugs():
    ...     print "%s: %s" % (bug.id, bug.title)
    1: Firefox does not support SVG
    4: Reflow problems with complex page layouts
    8: Printing doesn't work

If Sample Person get subscribed to bug #2, he can see it in the list.

    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> person_set = getUtility(IPersonSet)
    >>> login('foo.bar@canonical.com')
    >>> bug_two.subscribe(
    ...     person_set.getByEmail('test@canonical.com'),
    ...     person_set.getByEmail('foo.bar@canonical.com'))
    <BugSubscription...>
    >>> login('test@canonical.com')
    >>> bugs_view = MaloneView(MaloneApplication(), LaunchpadTestRequest())
    >>> bugs_view.initialize()
    >>> for bug in bugs_view.getMostRecentlyFixedBugs():
    ...     print "%s: %s" % (bug.id, bug.title)
    1: Firefox does not support SVG
    4: Reflow problems with complex page layouts
    2: Blackhole Trash folder
    8: Printing doesn't work

Only five bugs are returned by default:

    >>> from canonical.launchpad.interfaces import CreateBugParams, IProductSet
    >>> firefox = getUtility(IProductSet).getByName('firefox')
    >>> for index in range(20):
    ...     bug = firefox.createBug(CreateBugParams(
    ...         getUtility(ILaunchBag).user, 'Test Bug #%s' % index,
    ...         comment='Test bug #%s.' % index))
    ...     bug.bugtasks[0].transitionToStatus(
    ...     BugTaskStatus.FIXRELEASED, getUtility(ILaunchBag).user)
    ...     syncUpdate(bug.bugtasks[0])

    >>> len(bugs_view.getMostRecentlyFixedBugs())
    5

