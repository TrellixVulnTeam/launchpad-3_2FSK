ProductRelease
==============

A ProductSeries can have multiple releases.  Apache2 (a ProductSeries)
can have ProductReleases 2.0, 2.0.1, 2.1, etc.
    >>> from zope.component import getUtility
    >>> from zope.interface.verify import verifyObject
    >>> from canonical.launchpad.interfaces import (
    ...     IPersonSet, IProductSeries, IProductSet, NotFoundError, IProjectSet)
    >>> from canonical.database.sqlbase import flush_database_updates

First, get a product that has some ProductSeries in the sample data.

    >>> productset = getUtility(IProductSet)
    >>> firefox = productset['firefox']

A ProductSeries can be retrieved using the associated product and the
series name.

    >>> trunk = firefox.getSeries('trunk')

Get the product releases for trunk.

    >>> releases = trunk.releases
    >>> releases.count()
    3

And pick the first from the set.
    >>> rel = releases[0]
    >>> files = rel.files
    >>> num_files = files.count()
    >>> print num_files
    1

Add a file alias to the productrelease.
    >>> from StringIO import StringIO
    >>> from canonical.launchpad.interfaces import (
    ...     IBugAttachmentSet, IMessageSet, IBugMessageSet,
    ...     ILibraryFileAliasSet)
    >>> from canonical.launchpad.interfaces import ILaunchBag

    >>> def current_user():
    ...     return getUtility(ILaunchBag).user

    >>> login("foo.bar@canonical.com")
    >>> filecontent = 'Some useful information.'
    >>> filealias = getUtility(ILibraryFileAliasSet).create(
    ...     name='foo.txt', size=len(filecontent),
    ...     file=StringIO(filecontent), contentType='text/plain')
    >>> productreleasefile = rel.addFileAlias(filealias,
    ...     current_user(),
    ...     description="Foo file")

Ensure the description is as we set it.
    >>> print productreleasefile.description
    Foo file

And that the number of files in the productrelease has increased.
    >>> print rel.files.count()
    2

Retrieve the alias by name.
    >>> filealias = rel.getFileAliasByName('foo.txt')
    >>> print filealias.filename
    foo.txt

Retrieve an alias that does not exist adn see that an error is raised.
    >>> filealias = rel.getFileAliasByName('bar.txt')
    Traceback (most recent call last):
    ...
    NotFoundError:...

Delete the file alias from the ProductRelease and see the file count decrement.
    >>> rel.deleteFileAlias(filealias)
    >>> print rel.files.count()
    1

Try to delete the same alias again and see that an error is raised.
    >>> rel.deleteFileAlias(filealias)
    Traceback (most recent call last):
    ...
    NotFoundError:...

