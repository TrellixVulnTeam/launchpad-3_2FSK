= Distribution Package Search Results =

Check if the Distribution Search Packages link is present, and
the page is not broken.
This page is used to search packages in a distribution context.

  >>> browser.open("http://localhost/ubuntu")
  >>> browser.getLink("Search packages").click()
  >>> browser.url
  'http://localhost/ubuntu/+search'

Search for a package and check if the result page is not broken

  >>> field = browser.getControl(name="text", index=1)
  >>> field.value = 'pmount'
  >>> browser.getControl("Search").click()
  >>> browser.contents
  '...pmount...0.1-2...'

Follow pmount source package path

  >>> browser.getLink('pmount').click()
  >>> browser.url
  'http://localhost/ubuntu/+source/pmount'

Get pmount 0.1-1 version

  >>> browser.getLink("0.1-1").click()
  >>> browser.url
  'http://localhost/ubuntu/+source/pmount/0.1-1'


Ensure that the correct binaries appear on the search results.  We only show
one link to mozilla-firefox on the results page under each distro release.
The "binaries" section for Warty should contain only a single instance 
of 'mozilla-firefox'.  This test relies on the sample data; it has
two mozilla-firefox binaries but we only want the warty one.

Prove that there are (at least) two by getting the one we *don't* want 
here first:

  >>> browser.open("http://localhost/ubuntu/breezy-autotest/+package/mozilla-firefox")
  >>> browser.title
  'Binary package "mozilla-firefox" in ubuntu breezy-autotest'

The following tests are using getLink by ID because there is more than 
one link with the text "mozilla-firefox' on the page and the first occurrence
is the wrong one.  Using the URL is not future proof if it ever changes.

Now run a search for mozilla-firefox and check that it is found:

  >>> browser.open("http://localhost/ubuntu")
  >>> browser.getLink("Search packages").click()
  >>> field = browser.getControl(name="text", index=1)
  >>> field.value = 'mozilla-firefox'
  >>> browser.getControl("Search").click()
  >>> browser.contents
  '...mozilla-firefox...0.9...'
  >>> binaries=find_tag_by_id(browser.contents, 'binaries')
  >>> extract_text(binaries).strip()
  u'mozilla-firefox\nmozilla-firefox\nmozilla-firefox-data'

Follow the link to the binaries page and make sure it's the right binary.

  >>> browser.getLink(id='binlink').click()
  >>> browser.title
  'Binary package "mozilla-firefox" in ubuntu warty'

The search page will also present commercial packages:

  >>> browser.goBack()
  >>> field = browser.getControl(name="text", index=1)
  >>> field.value = 'commercialpackage'
  >>> browser.getControl("Search").click()
  >>> extract_text(find_main_content(browser.contents))
  u'...Source Package "commercialpackage"...'

Now try searching for text that we know to be in a change log entry, to
prove that FTI works on change logs.  The text we're looking for is 
"placeholder" which is mentioned in the change log entry for pmount and
libstdc++, so we are looking for two results here as the "placeholder" text
is not mentioned in anything else that is indexed.

  >>> browser.open("http://localhost/ubuntu")
  >>> browser.getLink("Search packages").click()
  >>> field = browser.getControl(name="text", index=1)
  >>> field.value = 'placeholder'
  >>> browser.getControl("Search").click()
  >>> browser.contents
  '...2 results...'

  >>> soup = find_main_content(browser.contents)
  >>> results = soup.findAll(attrs={'class': 'packagetitle'})
  >>> len(results)
  2

  >>> texts = [extract_text(html) for html in results]
  >>> texts.sort()
  >>> for text in texts:
  ...    print text
  Source Package "libstdc++" in The Test Distribution
  Source Package "pmount" in The Test Distribution


== Distribution package change summary ==

/$DISTRO/+source/$PACKAGE pages contain a version history that lists
each published version of a package with its changelog entry for that
version.

  >>> browser.open("http://launchpad.dev/ubuntu/+source/alsa-utils/")

Each version history entry has a header with the version as the title
and details of the publishing status in each distroseries it's published
in.

  >>> first_header = find_tag_by_id(browser.contents,
  ...     'detail_alsa-utils_1.0.9a-4ubuntu1')
  >>> print extract_text(first_header)
  1.0.9a-4ubuntu1
  Pending in warty-release
  Published in hoary-release on 2005-09-15 

Following the header we get a body with the changelog in it.  Note that
any email addreses in the changelog are obfuscated because we are not
logged in (this prevents bots from harvesting email addresses).

  >>> first_body = find_tag_by_id(browser.contents,
  ...     'body_alsa-utils_1.0.9a-4ubuntu1')
  >>> print extract_text(first_body)
  alsa-utils (1.0.9a-4ubuntu1) hoary; urgency=low
  * Placeholder
  LP: #10
  LP: #999
  LP: #badid
  -- Sample Person &lt;email address hidden&gt; Tue, 7 Feb 2006 12:10:08 +0300

If we view the same page as a logged-in user, we can see the email
address:

  >>> user_browser.open("http://launchpad.dev/ubuntu/+source/alsa-utils/")
  >>> print extract_text(find_tag_by_id(user_browser.contents,
  ...     'body_alsa-utils_1.0.9a-4ubuntu1'))
  alsa-utils (1.0.9a-4ubuntu1) hoary; urgency=low
  ...
  -- Sample Person &lt;test@canonical.com&gt; Tue, 7 Feb 2006 12:10:08 +0300

The presented changelog is also linkified for any bugs mentioned in the
form LP: #nnn where nnn is the bug number.

  >>> browser.getLink('1.0.9a-4ubuntu1').url
  'http://launchpad.dev/ubuntu/hoary/+source/alsa-utils/1.0.9a-4ubuntu1'

  >>> browser.getLink('LP: #10').url
  'http://launchpad.dev/bugs/10'

