= Bug Activity =

Bugs are problems that occur in software. In Malone, various things can be
added to, edited and removed from a bug over the course of a bug's lifetime. We
call this stuff bug activity. This document is about bug activity.

Each activity can happen more than once to a bug over the course of its
lifetime. For auditing reasons, it's useful to track when these happen, why
these things happen, and who made them happen.

Before going any further--because editing a bug requires an
authenticated user--let's login:

    >>> login("test@canonical.com")

Bug activity tracking is done using event subscribers. The handlers
are simple little functions.

    >>> from zope.event import notify
    >>> from canonical.database.constants import UTC_NOW
    >>> from lazr.lifecycle.event import (
    ...     ObjectCreatedEvent, ObjectModifiedEvent)
    >>> from canonical.launchpad.database import (
    ...     BugPackageInfestation, BugProductInfestation)
    >>> from canonical.launchpad.interfaces import (
    ...     IUpstreamBugTask, IDistroBugTask, IProductSet, IBugTaskSet)
    >>> from lazr.lifecycle.snapshot import Snapshot
    >>> user = getUtility(ILaunchBag).user


== User files a bug ==

    >>> from canonical.launchpad.interfaces import CreateBugParams
    >>> firefox = getUtility(IProductSet)['firefox']
    >>> params = CreateBugParams(
    ...     title="a test bug",
    ...     comment="this is only a test bug\nplease ignore",
    ...     owner=user)
    >>> bug = firefox.createBug(params)
    >>> bug.activity.count()
    0
    >>> object_created = ObjectCreatedEvent(bug)
    >>> notify(object_created)
    >>> latest_activity = bug.activity[-1]
    >>> latest_activity.person == user
    True
    >>> latest_activity.whatchanged
    u'bug'
    >>> latest_activity.message
    u'added bug'


== Bug title edited ==

    >>> from canonical.launchpad.interfaces import IBug
    >>> old_state = Snapshot(bug, providing=IBug)
    >>> bug.title = "new bug title"
    >>> bug_edited = ObjectModifiedEvent(
    ...     bug, old_state, ["title", "description"])
    >>> notify(bug_edited)
    >>> latest_activity = bug.activity[-1]
    >>> latest_activity.whatchanged
    u'title'
    >>> latest_activity.oldvalue
    u'a test bug'
    >>> latest_activity.newvalue
    u'new bug title'


== Bug gets assigned to a source package ==

    >>> from canonical.launchpad.interfaces import (
    ...     ISourcePackageNameSet, IDistributionSet)
    >>> mozilla_firefox = getUtility(ISourcePackageNameSet)['mozilla-firefox']
    >>> ubuntu = getUtility(IDistributionSet).getByName('ubuntu')
    >>> source_package_assignment = getUtility(IBugTaskSet).createTask(
    ...     bug=bug, sourcepackagename=mozilla_firefox,
    ...     distribution=ubuntu,owner=user)
    >>> source_package_assignment_added = ObjectCreatedEvent(
    ...     source_package_assignment)
    >>> notify(source_package_assignment_added)
    >>> latest_activity = bug.activity[-1]
    >>> latest_activity.whatchanged
    u'bug'
    >>> latest_activity.message
    u'assigned to mozilla-firefox (Ubuntu)'


== Source package assignment edited ==

    >>> from lazr.lifecycle.snapshot import Snapshot
    >>> from canonical.launchpad.interfaces import BugTaskStatus
    >>> edit_fields = [
    ...     "distribution", "sourcepackagename", "milestone", "status",
    ...     "importance", "assignee", "bugwatch"]
    >>> old_source_package_assignment = Snapshot(
    ...   source_package_assignment, providing=IDistroBugTask)
    >>> source_package_assignment.transitionToStatus(
    ...     BugTaskStatus.CONFIRMED, getUtility(ILaunchBag).user)
    >>> source_package_assignment_edited = ObjectModifiedEvent(
    ...     source_package_assignment, old_source_package_assignment,
    ...     edit_fields)
    >>> notify(source_package_assignment_edited)
    >>> latest_activity = bug.activity[-1]
    >>> latest_activity.whatchanged
    u'mozilla-firefox: status'
    >>> latest_activity.oldvalue == BugTaskStatus.NEW.title
    True
    >>> latest_activity.newvalue == BugTaskStatus.CONFIRMED.title
    True


== Bug gets assigned to an upstream product ==

    >>> product_assignment = getUtility(IBugTaskSet).createTask(
    ...   bug=bug, product=getUtility(IProductSet)['thunderbird'], owner=user)
    >>> product_assignment_added = ObjectCreatedEvent(product_assignment)
    >>> notify(product_assignment_added)
    >>> latest_activity = bug.activity[-1]
    >>> latest_activity.whatchanged
    u'bug'
    >>> latest_activity.message
    u'assigned to thunderbird'


== Upstream product assignment edited ==

    >>> edit_fields = [
    ...     "product", "milestone", "status", "assignee", "bugwatch",
    ...     "importance"]
    >>> old_product_assignment = Snapshot(
    ...     product_assignment, providing=IUpstreamBugTask)
    >>> product_assignment.transitionToStatus(
    ...     BugTaskStatus.INVALID, getUtility(ILaunchBag).user)
    >>> product_assignment_edited = ObjectModifiedEvent(
    ...     product_assignment, old_product_assignment, edit_fields)
    >>> notify(product_assignment_edited)
    >>> latest_activity = bug.activity[-1]
    >>> latest_activity.whatchanged
    u'thunderbird: status'
    >>> latest_activity.oldvalue == BugTaskStatus.NEW.title
    True
    >>> latest_activity.newvalue == BugTaskStatus.INVALID.title
    True


== Source package infestation gets documented ==

    >>> from canonical.launchpad.interfaces import BugInfestationStatus
    >>> right_now = UTC_NOW
    >>> package_infestation = BugPackageInfestation(
    ...     bug=bug.id, explicit=True, datecreated=right_now,
    ...     creatorID=user.id, dateverified=right_now,
    ...     verifiedbyID=user.id, lastmodified=right_now,
    ...     lastmodifiedbyID=user.id, sourcepackagerelease=14,
    ...     infestationstatus=BugInfestationStatus.AFFECTED)
    >>> package_infesation_added = ObjectCreatedEvent(package_infestation)
    >>> notify(package_infesation_added)
    >>> latest_activity = bug.activity[-1]
    >>> latest_activity.whatchanged
    u'bug'
    >>> latest_activity.message
    u'added infestation of package release mozilla-firefox 0.9'


== Source package infestation edited ==

    >>> edit_fields = ["sourcepackagerelease", "infestationstatus"]
    >>> old_package_infestation = Snapshot(
    ...     package_infestation, names=edit_fields)
    >>> package_infestation.infestationstatus = BugInfestationStatus.VICTIMIZED
    >>> package_infestation_edited = ObjectModifiedEvent(
    ...     package_infestation, old_package_infestation, edit_fields)
    >>> notify(package_infestation_edited)
    >>> latest_activity = bug.activity[-1]
    >>> latest_activity.whatchanged
    u'mozilla-firefox 0.9: infestationstatus'
    >>> latest_activity.oldvalue == BugInfestationStatus.AFFECTED.title
    True
    >>> latest_activity.newvalue == BugInfestationStatus.VICTIMIZED.title
    True


== Product infestation gets documented ==

    >>> right_now = UTC_NOW
    >>> product_infestation = BugProductInfestation(
    ...     bug=bug.id, explicit=True, datecreated=right_now,
    ...     creatorID=user.id, dateverified=right_now,
    ...     verifiedbyID=user.id, lastmodified=right_now,
    ...     lastmodifiedbyID=user.id, productrelease=4,
    ...     infestationstatus=BugInfestationStatus.AFFECTED)
    >>> product_infesation_added = ObjectCreatedEvent(
    ...     product_infestation)
    >>> notify(product_infesation_added)
    >>> latest_activity = bug.activity[-1]
    >>> latest_activity.whatchanged
    u'bug'
    >>> latest_activity.message
    u'added infestation of product release firefox 0.9.1'


== Product infestation edited ==

    >>> edit_fields = ["productrelease", "infestationstatus"]
    >>> old_product_infestation = Snapshot(
    ...     product_infestation, names=edit_fields)
    >>> product_infestation.infestationstatus = BugInfestationStatus.UNKNOWN
    >>> product_infestation_edited = ObjectModifiedEvent(
    ...     product_infestation, old_product_infestation, edit_fields)
    >>> notify(product_infestation_edited)
    >>> latest_activity = bug.activity[-1]
    >>> latest_activity.whatchanged
    u'firefox 0.9.1: infestationstatus'
    >>> latest_activity.oldvalue == BugInfestationStatus.AFFECTED.title
    True
    >>> latest_activity.newvalue == BugInfestationStatus.UNKNOWN.title
    True


== Bug report is marked as a duplicate of another bug report ==

    >>> edit_fields = [
    ...     "id", "title", "description", "name",
    ...     "private", "duplicateof", "security_related"]
    >>> old_bug = Snapshot(bug, providing=IBug)
    >>> bug.duplicateof = 1
    >>> bug_edited = ObjectModifiedEvent(bug, old_bug, edit_fields)
    >>> notify(bug_edited)
    >>> latest_activity = bug.activity[-1]
    >>> latest_activity.whatchanged
    u'marked as duplicate'
    >>> latest_activity.oldvalue is None
    True
    >>> latest_activity.newvalue == u'1'
    True


== Bug report has itss duplicate marker changed to another bug report ==

    >>> edit_fields = [
    ...     "id", "title", "description", "name", "private", "duplicateof",
    ...     "security_related"]
    >>> old_bug = Snapshot(bug, providing=IBug)
    >>> bug.duplicateof = 2
    >>> bug_edited = ObjectModifiedEvent(bug, old_bug, edit_fields)
    >>> notify(bug_edited)
    >>> latest_activity = bug.activity[-1]
    >>> latest_activity.whatchanged
    u'changed duplicate marker'
    >>> latest_activity.oldvalue == u'1'
    True
    >>> latest_activity.newvalue == u'2'
    True


== The bug report is un-duplicated ==

    >>> edit_fields = [
    ...     "id", "title", "description", "name", "private", "duplicateof",
    ...     "security_related"]
    >>> old_bug = Snapshot(bug, providing=IBug)
    >>> bug.duplicateof = None
    >>> bug_edited = ObjectModifiedEvent(bug, old_bug, edit_fields)
    >>> notify(bug_edited)
    >>> latest_activity = bug.activity[-1]
    >>> latest_activity.whatchanged
    u'removed duplicate marker'
    >>> latest_activity.oldvalue == u'2'
    True
    >>> latest_activity.newvalue is None
    True


== Add an attachment to the bug ==

First we have to create the file itself, and upload it to the Librarian:

    >>> from StringIO import StringIO
    >>> from canonical.launchpad.interfaces import ILibraryFileAliasSet
    >>> filecontent = 'Some useful information.'
    >>> filealias = getUtility(ILibraryFileAliasSet).create(
    ...     name='foo.txt', size=len(filecontent),
    ...     file=StringIO(filecontent), contentType='text/plain')

    >>> from canonical.launchpad.interfaces import (
    ...     IBugAttachmentSet, IMessageSet)
    >>> message = getUtility(IMessageSet).fromText(
    ...     subject="title", content="added an attachment")
    >>> attachment = getUtility(IBugAttachmentSet).create(
    ...     bug=bug, title="title", message=message, filealias=filealias)
    >>> notify(ObjectCreatedEvent(attachment))
    >>> latest_activity = bug.activity[-1]
    >>> latest_activity.whatchanged
    u'bug'
    >>> latest_activity.message
    u"added attachment 'foo.txt' (title)"


== Target a bug task to a milestone ==

    >>> from canonical.launchpad.interfaces import IBugSet
    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> no_priv = getUtility(IPersonSet).getByName('no-priv')
    >>> firefox = getUtility(IProductSet).getByName('firefox')
    >>> firefox_1_0 = firefox.getMilestone('1.0')
    >>> bug_one = getUtility(IBugSet).get(1)
    >>> firefox_task = bug_one.getBugTask(firefox)
    >>> print firefox_task.milestone
    None
    >>> old_bugtask = Snapshot(firefox_task, providing=IUpstreamBugTask)

    >>> firefox_task.milestone = firefox_1_0
    >>> edit_fields = ["milestone"]
    >>> bugtask_edited = ObjectModifiedEvent(
    ...     firefox_task, old_bugtask, edit_fields, user=no_priv)
    >>> notify(bugtask_edited)

    >>> latest_activity = bug_one.activity[-1]
    >>> latest_activity.person.name
    u'no-priv'
    >>> latest_activity.whatchanged
    u'firefox: milestone'
    >>> print latest_activity.oldvalue
    None
    >>> print latest_activity.newvalue
    1.0


== Subscribe someone to a bug ==

    >>> bug_one = getUtility(IBugSet).get(1)
    >>> thumper = getUtility(IPersonSet).getByName('thumper')
    >>> bug_subscription = bug_one.subscribe(thumper, user)
    >>> notify(ObjectCreatedEvent(bug_subscription))
    >>> latest_activity = bug_one.activity[-1]
    >>> latest_activity.message
    u'added subscriber Tim Penhey'
