Editing Specifications
======================

Now, we are not happy with the summary and title of the spec on extension
manager support, so lets go and edit those.

First, we need to load the +edit page.

  >>> browser.addHeader('Authorization', 'Basic carlos@canonical.com:test')
  >>> features_domain = 'http://blueprint.launchpad.dev'
  >>> spec_path = '/products/firefox/+spec/extension-manager-upgrades'
  >>> browser.open(features_domain + spec_path)
  >>> browser.getLink('Edit Details').click()
  >>> browser.url
  'http://features.launchpad.dev/products/firefox/+spec/extension-manager-upgrades/+edit'

And we test the URL field validator filling a dupe URL.

  >>> url = 'http://wiki.ubuntu.com/NetworkMagic'
  >>> browser.getControl('Specification URL').value = url
  >>> browser.getControl('Change').click()

  >>> message = ('http://wiki.ubuntu.com/NetworkMagic is already registered '
  ...            'by another specification')
  >>> message in browser.contents
  True

Test the name validator filling a name of a existing specification for that
product.

  >>> browser.getControl('Name').value = 'e4x'
  >>> url = 'http://wiki.mozilla.org/Firefox:1.1_Product_Team'
  >>> browser.getControl('Specification URL').value = url
  >>> browser.getControl('Change').click()

  >>> message = 'e4x is already in use by another specification'
  >>> message in browser.contents
  True

Now, let's POST the resulting changes. We should be redirected to the
specification home page.

  >>> browser.getControl('Name').value = 'extension-manager-upgrades'
  >>> browser.getControl('Title').value = 'Extension Manager System Upgrades'
  >>> browser.getControl('Specification URL').value = url
  >>> summary = ('Simplify the way extensions are installed and registered '
  ...            'so that: 1. third party applications can easily register '
  ...            'and deregister extensions that live with their code. 2. '
  ...            'developers can easily register extensions that they are '
  ...            'developing out of a location apart from their build (e.g.'
  ...            ' their home directory), and  3. developers can easily '
  ...            'install extensions for testing.')
  >>> browser.getControl('Summary').value = summary
  >>> browser.getControl('Status Whiteboard').value = 'XXX'
  >>> browser.getControl('Change').click()
  >>> browser.url
  'http://features.launchpad.dev/products/firefox/+spec/extension-manager-upgrades'

Also, we would like to assign these to someone other than Carlos, and we
would also like to have a drafter associated with it.

  >>> browser.getLink('Change People').click()
  >>> browser.getControl('Assignee').value = 'tsukimi@quaqua.net'
  >>> browser.getControl('Drafter').value = 'daf@canonical.com'
  >>> browser.getControl('Approver').value = 'stuart.bishop@canonical.com'
  >>> browser.getControl('Status Whiteboard').value = 'YYY'
  >>> browser.getControl('Change').click()
  >>> browser.url
  'http://features.launchpad.dev/products/firefox/+spec/extension-manager-upgrades'

Finally, we should be able to change the status metadata (definition status,
implementation status, estimated man days etc) of the specification.

  >>> browser.getLink('Change Status').click()
  >>> browser.getControl('Definition Status').value = ['Drafting']
  >>> browser.getControl('Estimated Developer Days').value = '5'
  >>> browser.getControl('Implementation Status').value = ['Slow progress']
  >>> browser.getControl('Status Whiteboard').value = 'XXX'
  >>> browser.getControl('Change').click()
  >>> browser.url
  'http://features.launchpad.dev/products/firefox/+spec/extension-manager-upgrades'

