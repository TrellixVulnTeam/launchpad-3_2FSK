Bug Nomination Pages
====================

Release targeting is done on the +nominate page of a bug. From here,
normal users can propose that the bug be fixed in specific distribution
releases and product series', and release managers can approve and
decline nominations, and even directly target the bug to releases
they're responsible for.

A user has release management permissions if the have launchpad.Edit
permissions on the product or distribution context.

The no-priv user does not have release management permissions on bug #1.

    >>> from zope.component import getUtility, getView

    >>> from canonical.launchpad.helpers import check_permission
    >>> from canonical.launchpad.interfaces import IBugTaskSet, IOpenLaunchBag
    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest

    >>> login("no-priv@canonical.com")

    >>> request = LaunchpadTestRequest()
    >>> bug_one_in_ubuntu_firefox = getUtility(IBugTaskSet).get(17)
    >>> print bug_one_in_ubuntu_firefox.bug.id
    1
    >>> print bug_one_in_ubuntu_firefox.target.bugtargetname
    mozilla-firefox (Ubuntu)

    >>> nomination_view = getView(
    ...     bug_one_in_ubuntu_firefox, "+nominate", request)

(Add objects to the ILaunchBag that this view is interested in, for
permission checking purposes.)

    >>> launchbag = getUtility(IOpenLaunchBag)
    >>> launchbag.add(bug_one_in_ubuntu_firefox.distribution)

    >>> check_permission(
    ...     "launchpad.Edit", bug_one_in_ubuntu_firefox.distribution)
    False

    >>> nomination_view.userCanDoReleaseManagement()
    False

Foo Bar, an admin, can do release management.

    >>> login("foo.bar@canonical.com")

    >>> check_permission(
    ...     "launchpad.Edit", bug_one_in_ubuntu_firefox.distribution)
    True

    >>> nomination_view.userCanDoReleaseManagement()
    True

Displaying Releases
-------------------

The getReleasesToDisplay() method returns a list of dictionaries of
releases to show on the nomination page. The dictionaries contain three
keys: name, displayname, and status. ProductSeries' will always have a
status equal None. The list is sorted by displayname.

For distros, this list contains the current development release(s). For
products, this returns all the series, because there is no way in the
current model to know the "status" of a series.

    >>> from canonical.launchpad.interfaces import IDistributionSet, IProductSet

    >>> ubuntu = getUtility(IDistributionSet).getByName("ubuntu")
    >>> debian = getUtility(IDistributionSet).getByName("debian")
    >>> firefox = getUtility(IProductSet).getByName("firefox")

So, in the Ubuntu context, this returns Hoary.

    >>> launchbag.clear()
    >>> launchbag.add(ubuntu)

    >>> def print_releases(releases):
    ...     for release in releases:
    ...         print "%s, %s, %s" % (
    ...             release['name'], release['displayname'], release['status'])

    >>> print_releases(nomination_view.getReleasesToDisplay())
    hoary, Ubuntu Hoary, Active Development

getReleasesToDisplay() excludes releases that are already nominated.

    >>> current_user = launchbag.user
    >>> bug_one = bug_one_in_ubuntu_firefox.bug

    >>> ubuntu_hoary = ubuntu.getRelease("hoary")
    >>> bug_one.addNomination(
    ...     distrorelease=ubuntu_hoary, owner=current_user)
    <BugNomination...>

    >>> nomination_view.getReleasesToDisplay()
    []

The user may click a "(_more_)" link to show all releases eligible for
nomination for this bug.

    >>> request_more = LaunchpadTestRequest(form=dict(show_more_releases=1))
    >>> nomination_view = getView(
    ...     bug_one_in_ubuntu_firefox, "+nominate", request_more)

    >>> print_releases(nomination_view.getReleasesToDisplay())
    breezy-autotest, Ubuntu Breezy-autotest, Experimental
    grumpy, Ubuntu Grumpy, Experimental
    warty, Ubuntu Warty, Current Stable Release

In the Debian context, this returns Sarge.

    >>> bug_one_in_debian_firefox = getUtility(IBugTaskSet).get(4)

    >>> print bug_one_in_debian_firefox.bug.id
    1
    >>> print bug_one_in_debian_firefox.target.bugtargetname
    mozilla-firefox (Debian)

    >>> nomination_view = getView(
    ...     bug_one_in_debian_firefox, "+nominate", request)

    >>> launchbag.clear()
    >>> launchbag.add(debian)

    >>> print_releases(nomination_view.getReleasesToDisplay())
    sarge, Debian Sarge, Pre-release Freeze

    >>> nomination_view = getView(
    ...     bug_one_in_debian_firefox, "+nominate", request_more)

    >>> print_releases(nomination_view.getReleasesToDisplay())
    sarge, Debian Sarge, Pre-release Freeze
    sid, Debian Sid, Experimental
    woody, Debian Woody, Current Stable Release

And upstream, this would return all Firefox series.

    >>> bug_one_in_firefox = getUtility(IBugTaskSet).get(2)
    >>> print bug_one_in_firefox.bug.id
    1
    >>> print bug_one_in_firefox.target.bugtargetname
    firefox (upstream)

    >>> nomination_view = getView(
    ...     bug_one_in_firefox, "+nominate", request)

    >>> launchbag.clear()
    >>> launchbag.add(firefox)

    >>> print_releases(nomination_view.getReleasesToDisplay())
    1.0, firefox 1.0 (upstream), None
    milestones, firefox milestones (upstream), None

Submitting Nominations
----------------------

The processNominations() method processes nominations. It looks for a
field in the request called "release", and assumes the values in that
list to be names of releases for a distribution context, and names of
productseries' in an upstream context.

Here's an example of nominating a bug for a distrorelease.

    >>> login("no-priv@canonical.com")

    >>> request = LaunchpadTestRequest(form=dict(
    ...     nominate="Submit Nominations", release=["warty"]))

    >>> nomination_view = getView(
    ...     bug_one_in_ubuntu_firefox, "+nominate", request)

(Add objects to the LaunchBag that will be used by the view.)

    >>> launchbag.clear()
    >>> launchbag.add(bug_one_in_ubuntu_firefox)
    >>> launchbag.add(bug_one_in_ubuntu_firefox.distribution)

    >>> ubuntu_warty = ubuntu.getRelease("warty")
    >>> bug_one.isNominatedFor(ubuntu_warty)
    False

    >>> nomination_view.processNominations()

    >>> bug_one.isNominatedFor(ubuntu_warty)
    True

    >>> len(request.response.notifications)
    1

    >>> print request.response.notifications[0].message
    Successfully added nominations for: Ubuntu Warty

Here's an example of nominating a bug for a productseries.

    >>> request = LaunchpadTestRequest(form=dict(
    ...     nominate="Submit Nominatinons", release=["1.0"]))

    >>> nomination_view = getView(
    ...     bug_one_in_firefox, "+nominate", request)

(Add objects to the LaunchBag that will be used by the view.)

    >>> launchbag.clear()
    >>> launchbag.add(bug_one_in_firefox)
    >>> launchbag.add(bug_one_in_firefox.product)

    >>> firefox_1_0 = firefox.getSeries("1.0")
    >>> bug_one.isNominatedFor(firefox_1_0)
    False

    >>> nomination_view.processNominations()

    >>> bug_one.isNominatedFor(firefox_1_0)
    True

    >>> len(request.response.notifications)
    1

    >>> print request.response.notifications[0].message
    Successfully added nominations for: firefox 1.0 (upstream)

Approving and Declining Nominations
-----------------------------------

When release managers view nominations, they are shown a checkbox beside
each, allowing them to select the nomination and approve or decline it
by pressing buttons on the forms.

There is a helper method that figures out whether a checkbox should be
shown for a given nomination. A nomination will have a checkbox beside
it if:

  * the currently logged-in user has launchpad.Edit permissions on the
    nomination

  * the nomination is not already Approved (Declined nominations can be
    changed to Approved, but not vice versa, because an Approved
    nomination will already have tasks associated with it)

no-priv will not see checkboxes for the Firefox context, because he does
not have launchpad.Edit permissions on the product.

    >>> from canonical.launchpad.database import BugNomination

    >>> login("no-priv@canonical.com")

    >>> check_permission("launchpad.Edit", firefox)
    False

    >>> nomination_view = getView(
    ...     bug_one_in_firefox, "+nominate", request)

    >>> firefox_1_0_nomination = BugNomination.selectOneBy(
    ...     bugID=bug_one.id, productseriesID=firefox_1_0.id)

    >>> nomination_view.shouldShowCheckboxForNomination(firefox_1_0_nomination)
    False

Now, logging in as the Firefox owner, Sample Person, we should show the
checkbox.

    >>> login("test@canonical.com")

    >>> print launchbag.user.name
    name12
    >>> launchbag.user == firefox.owner
    True

    >>> nomination_view = getView(
    ...     bug_one_in_firefox, "+nominate", request)

    >>> nomination_view.shouldShowCheckboxForNomination(firefox_1_0_nomination)
    True

Now, if we approve the nomination, we won't be able to see the checkbox.

    >>> firefox_1_0_nomination.approve(launchbag.user)

    >>> print firefox_1_0_nomination.status.title
    Approved

    >>> nomination_view.shouldShowCheckboxForNomination(firefox_1_0_nomination)
    False

The getCurrentNominations() method returns a list of dicts used to
render the table of current nominations for a product or distro
context. In firefox, 1.0 is currently the only nominated release.

    >>> nominations = nomination_view.getCurrentNominations()

    >>> def print_nominations(nominations):
    ...     for nomination in nominations:
    ...         print "%s, %s, %s, %s, %s" % (
    ...             nomination['displayname'],
    ...             nomination['status'],
    ...             nomination['should_show_checkbox'],
    ...             nomination['value'],
    ...             nomination['owner'].displayname)

    >>> print_nominations(nominations)
    firefox 1.0 (upstream), Approved, False, 1.0, No Privileges Person

This nomination is already approved, so we can't change its
status. Let's nominate the milestones release then, and first decline,
then approve, that nomination.

    >>> login("no-priv@canonical.com")

    >>> request = LaunchpadTestRequest(form=dict(
    ...     release=["milestones"], nominate="Submit Nominations"))

    >>> nomination_view = getView(bug_one_in_firefox, "+nominate", request)

    >>> nomination_view.processNominations()

    >>> nominations = nomination_view.getCurrentNominations()

    >>> print_nominations(nominations)
    firefox 1.0 (upstream), Approved, False, 1.0, No Privileges Person
    firefox milestones (upstream), Proposed, False, milestones, No Privileges Person

First, declining it. An unprivileged user will not be allowed to bypass
the UI to decline a nomination:

    >>> login("no-priv@canonical.com")

    >>> request = LaunchpadTestRequest(form=dict(
    ...     nomination=["milestones"], decline="Decline"))

    >>> nomination_view = getView(bug_one_in_firefox, "+nominate", request)

    >>> nomination_view.processNominations()
    Traceback (most recent call last):
      ...
    Unauthorized: (<BugNomination ...>, 'decline', 'launchpad.Edit')

Sample Person, the Firefox owner, will be able to decline the nomination.

    >>> login("test@canonical.com")

    >>> nomination_view = getView(bug_one_in_firefox, "+nominate", request)

    >>> nomination_view.processNominations()

    >>> nominations = nomination_view.getCurrentNominations()

    >>> print_nominations(nominations)
    firefox 1.0 (upstream), Approved, False, 1.0, No Privileges Person
    firefox milestones (upstream), Declined, True, milestones, No Privileges Person

Then, approving it. An unprivileged user cannot approve a nomination.

    >>> login("no-priv@canonical.com")

    >>> request = LaunchpadTestRequest(form=dict(
    ...     nomination=["milestones"], approve="Approve"))

    >>> nomination_view = getView(bug_one_in_firefox, "+nominate", request)

    >>> nomination_view.processNominations()
    Traceback (most recent call last):
      ...
    Unauthorized: (<BugNomination ...>, 'approve', 'launchpad.Edit')

But Sample Person can.

    >>> login("test@canonical.com")

    >>> nomination_view = getView(bug_one_in_firefox, "+nominate", request)

    >>> nomination_view.processNominations()

    >>> nominations = nomination_view.getCurrentNominations()

    >>> print_nominations(nominations)
    firefox 1.0 (upstream), Approved, False, 1.0, No Privileges Person
    firefox milestones (upstream), Approved, False, milestones, No Privileges Person

Release Targeting For Release Managers
--------------------------------------

When a release manager "nominates" a bug, the nomination is immediately
approved. The nomination is created only to communicate when and by whom
the bug was proposed, so users aren't left wondering why some tasks have
nominations and others don't.

For example, bug one is currently nominated for Hoary and Warty.

    >>> ubuntu_nominations = bug_one.getNominations(distribution=ubuntu)
    >>> for nomination in ubuntu_nominations:
    ...     print nomination.target.bugtargetname
    Ubuntu Hoary
    Ubuntu Warty

Bug #1 currently has five tasks.

    >>> for bugtask in bug_one.bugtasks:
    ...     print bugtask.targetname
    firefox (upstream)
    firefox 1.0 (upstream)
    firefox milestones (upstream)
    mozilla-firefox (Ubuntu)
    mozilla-firefox (Debian)

But when we submit a "nomination" for Grumpy as a privileged user, it is
immediately approved, and a new task added. By "privileged user" in this
case, we refer to a user that is a member of the ubuntu-team.

    >>> from canonical.launchpad.interfaces import IPersonSet

    >>> ubuntu_team = getUtility(IPersonSet).getByName("ubuntu-team")

    >>> login("celso.providelo@canonical.com")

    >>> cprov = launchbag.user
    >>> print cprov.name
    cprov

    >>> cprov.inTeam(ubuntu_team)
    True

    >>> request = LaunchpadTestRequest(form=dict(
    ...     release=["grumpy"], nominate="Submit Nominations"))

    >>> nomination_view = getView(bug_one_in_ubuntu_firefox, "+nominate", request)
    >>> launchbag.clear()
    >>> launchbag.add(bug_one_in_ubuntu_firefox)
    >>> launchbag.add(bug_one_in_ubuntu_firefox.distribution)

    >>> nominations = nomination_view.getCurrentNominations()
    >>> print_nominations(nominations)
    Ubuntu Hoary, Proposed, True, hoary, Foo Bar
    Ubuntu Warty, Proposed, True, warty, No Privileges Person

    >>> nomination_view.processNominations()

An approved nomination, for Ubuntu Grumpy, has been added, and another
bugtask has been added.

    >>> nominations = nomination_view.getCurrentNominations()
    >>> print_nominations(nominations)
    Ubuntu Grumpy, Approved, False, grumpy, Celso Providelo
    Ubuntu Hoary, Proposed, True, hoary, Foo Bar
    Ubuntu Warty, Proposed, True, warty, No Privileges Person

    >>> for bugtask in bug_one.bugtasks:
    ...     print bugtask.targetname
    firefox (upstream)
    firefox 1.0 (upstream)
    firefox milestones (upstream)
    mozilla-firefox (Ubuntu)
    mozilla-firefox (Ubuntu Grumpy)
    mozilla-firefox (Debian)

The notification message also changes slightly.

    >>> print request.response.notifications[0].message
    Successfully targeted bug to: Ubuntu Grumpy