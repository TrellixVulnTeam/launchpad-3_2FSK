= Distribution Package Search Results =

Although there is a separate search page, we can search from the
distribution overview page which takes us there and displays the
search results immediately.

This page is used to search packages in a distribution context.

    >>> browser.open("http://localhost/ubuntu")
    >>> browser.getControl(name="text").value = "pmount"
    >>> browser.getControl("Find a Package").click()
    >>> browser.url
    'http://localhost/ubuntu/+search?text=pmount'

    >>> for tag in find_tags_by_class(browser.contents, 'sources'):
    ...     print extract_text(tag).encode('us-ascii', 'replace')
    ?pmount? source package in ...
    hoary (editors): 0.1-2
    ...

Follow pmount source package path

    >>> browser.getLink('pmount').click()
    >>> browser.url
    'http://localhost/ubuntu/+source/pmount'

Get pmount 0.1-1 version

    >>> browser.getLink("0.1-1").click()
    >>> browser.url
    'http://localhost/ubuntu/+source/pmount/0.1-1'

Ensure that the correct binaries appear on the search results.  We only
show one link to mozilla-firefox on the results page under each distro
release. The "binaries" section for Warty should contain only a single
instance of 'mozilla-firefox'.  This test relies on the sample data; it
has two mozilla-firefox binaries but we only want the warty one.

Prove that there are (at least) two by getting the one we *don't* want
here first:

    >>> browser.open(
    ...     'http://localhost'
    ...     '/ubuntu/breezy-autotest/+package/mozilla-firefox')
    >>> browser.title
    'Binary package "mozilla-firefox" in ubuntu breezy-autotest'

The following tests are using getLink by ID because there is more than
one link with the text "mozilla-firefox' on the page and the first
occurrence is the wrong one.  Using the URL is not future proof if it
ever changes.

Now run a search for mozilla-firefox and check that it is found:

    >>> browser.open("http://localhost/ubuntu/+search")
    >>> field = browser.getControl(name="text")
    >>> field.value = 'mozilla-firefox'
    >>> browser.getControl('Search', index=0).click()
    >>> for tag in find_tags_by_class(browser.contents, 'sources'):
    ...     print extract_text(tag).encode('us-ascii', 'replace')
    ?mozilla-firefox? source package in ...
    warty (web): 0.9
    ...

    >>> binaries=find_tag_by_id(browser.contents, 'binaries')
    >>> extract_text(binaries).strip()
    u'mozilla-firefox\nmozilla-firefox-data'

Follow the link to the binaries page and make sure it's the right
binary.

    >>> browser.getLink(id='binlink').click()
    >>> browser.title
    'Binary package "mozilla-firefox" in ubuntu warty'

The search page will also present commercial packages:

    >>> browser.goBack()
    >>> field = browser.getControl(name="text")
    >>> field.value = 'commercialpackage'
    >>> browser.getControl('Search', index=0).click()
    >>> extract_text(find_main_content(browser.contents))
    u'...commercialpackage... source package...'

Now try searching for text that we know to be in a change log entry, to
prove that FTI works on change logs.  The text we're looking for is
"placeholder" which is mentioned in the change log entry for pmount and
libstdc++, so we are looking for two results here as the "placeholder"
text is not mentioned in anything else that is indexed.

    >>> browser.open("http://localhost/ubuntu/+search")
    >>> field = browser.getControl(name="text")
    >>> field.value = 'placeholder'
    >>> browser.getControl('Search', index=0).click()
    >>> for tag in find_tags_by_class(
    ...     browser.contents, 'batch-navigation-index'):
    ...     print extract_text(tag)
    1...2 of 2 results

    >>> soup = find_main_content(browser.contents)
    >>> results = soup.findAll(attrs={'class': 'packagetitle'})
    >>> len(results)
    2

    >>> texts = [extract_text(html) for html in results]
    >>> texts.sort()
    >>> for text in texts:
    ...    print text.encode('ascii', 'backslashreplace')
    \...libstdc++... source package in Test Distro
    \...pmount... source package in Test Distro


== Distribution package change summary ==

A /$DISTRO/+source/$PACKAGE page shows for a given source package all
the distro releases in which it was published (see table at the top of
the page). The information presented in each row is as follows: the
distro series name and status as well as the package component, pocket
and version.

    >>> browser.open("http://launchpad.dev/ubuntu/+source/netapplet/")
    >>> print extract_text(find_tag_by_id(browser.contents, 'packaging'))
            Test Distro version                  Upstream version
    hoary development main release 1.0-1      NetApplet Series: trunk
    warty current     main release 0.99.6-1   NetApplet Series: trunk

/$DISTRO/+source/$PACKAGE pages contain a version history that lists
each published version of a package with its changelog entry for that
version.

    >>> browser.open("http://launchpad.dev/ubuntu/+source/alsa-utils/")

Each version history entry has a header with the version as the title
and details of the publishing status in each distroseries it's published
in.

    >>> first_header = find_tag_by_id(browser.contents,
    ...     'detail_alsa-utils_1.0.9a-4ubuntu1')
    >>> print extract_text(first_header)
    1.0.9a-4ubuntu1
    Pending in warty-release
    Published in hoary-release on 2005-09-15

The package release version links to the the page of this distro package
release.

    >>> first_header_link = first_header.find('a')
    >>> print extract_text(first_header_link)
    1.0.9a-4ubuntu1

    >>> first_header_link.get('href')
    u'/ubuntu/+source/alsa-utils/1.0.9a-4ubuntu1'

Following the header we get a body with the changelog in it.  Note that
any email addreses in the changelog are obfuscated because we are not
logged in (this prevents bots from harvesting email addresses).

    >>> first_body = find_tag_by_id(browser.contents,
    ...     'body_alsa-utils_1.0.9a-4ubuntu1')
    >>> print extract_text(first_body)
    alsa-utils (1.0.9a-4ubuntu1) hoary; urgency=low
    * Placeholder
    LP: #10
    LP: #999
    LP: #badid
    LP: #7, #8,
    #11
    -- Sample Person &lt;email address hidden&gt; Tue, 7 Feb 2006 12:10:08...

If we view the same page as a logged-in user, we can see the email
address:

    >>> user_browser.open("http://launchpad.dev/ubuntu/+source/alsa-utils/")
    >>> print extract_text(find_tag_by_id(user_browser.contents,
    ...     'body_alsa-utils_1.0.9a-4ubuntu1'))
    alsa-utils (1.0.9a-4ubuntu1) hoary; urgency=low
    ...
    -- Sample Person &lt;test@canonical.com&gt; Tue, 7 Feb 2006 12:10:08 +0300

The presented changelog is also linkified for any bugs mentioned in the
form LP: #nnn where nnn is the bug number.

    >>> browser.getLink('#10').url
    'http://launchpad.dev/bugs/10'

If any email addresses in the changelog are recognised as registered in
Launchpad, they are linkified to point to the person's profile page.
Here, 'commercialpackage' happens to have a recognised address in its
changelog:

    >>> user_browser.open(
    ...     "http://launchpad.dev/ubuntu/+source/commercialpackage/")
    >>> changelog = find_tag_by_id(
    ...     user_browser.contents, 'commercialpackage_1.0-1')
    >>> changelog.find('a')
    <a href="http://launchpad.dev/~name16"><img
    ...src="/@@/person" />&nbsp;foo.bar@canonical.com</a>


