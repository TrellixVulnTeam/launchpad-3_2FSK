= ExternalBugTracker: SourceForge =

This covers the implementation of the ExternalBugTracker class for SourceForge
bugwatches.


== Basics ==

The ExternalBugTracker descendant class which implements methods for updating
bug watches on SourceForge bug trackers is externalbugtracker.Roundup, which
implements IExternalBugTracker.

    >>> from canonical.launchpad.components.externalbugtracker import (
    ...     SourceForge)
    >>> from canonical.launchpad.interfaces.externalbugtracker import (
    ...     IExternalBugtracker)
    >>> from canonical.launchpad.webapp.testing import verifyObject
    >>> verifyObject(IExternalBugtracker,
    ...     SourceForge('http://sourceforge.net/'))
    True


== Status Conversion ==

The basic SourceForge bug statuses (i.e. those available by default in new
SourceForge instances) map to Launchpad bug statuses.
SourceForge.convertRemoteStatus() handles the conversion.

    >>> sourceforge = SourceForge('http://sourceforge.eggs')
    >>> sourceforge.convertRemoteStatus('Open').title
    'New'
    >>> sourceforge.convertRemoteStatus('Closed').title
    'Fix Released'
    >>> sourceforge.convertRemoteStatus('Pending').title
    'Incomplete'
    >>> sourceforge.convertRemoteStatus('Open:Accepted').title
    'Confirmed'
    >>> sourceforge.convertRemoteStatus('Open:Duplicate').title
    'Confirmed'
    >>> sourceforge.convertRemoteStatus('Open:Fixed').title
    'Fix Committed'
    >>> sourceforge.convertRemoteStatus('Open:Invalid').title
    'Invalid'
    >>> sourceforge.convertRemoteStatus('Open:Later').title
    'Confirmed'
    >>> sourceforge.convertRemoteStatus('Open:Out of Date').title
    'Invalid'
    >>> sourceforge.convertRemoteStatus('Open:Postponed').title
    'Confirmed'
    >>> sourceforge.convertRemoteStatus('Open:Rejected').title
    "Won't Fix"
    >>> sourceforge.convertRemoteStatus('Open:Remind').title
    'Confirmed'
    >>> sourceforge.convertRemoteStatus("Open:Won't Fix").title
    "Won't Fix"
    >>> sourceforge.convertRemoteStatus('Open:Works For Me').title
    'Invalid'
    >>> sourceforge.convertRemoteStatus('Closed:Accepted').title
    'Fix Committed'
    >>> sourceforge.convertRemoteStatus('Closed:Fixed').title
    'Fix Released'
    >>> sourceforge.convertRemoteStatus('Closed:Postponed').title
    "Won't Fix"
    >>> sourceforge.convertRemoteStatus('Pending:Postponed').title
    "Won't Fix"

If the status isn't something that our SourceForge ExternalBugTracker can
understand, Unknown will be returned and a warning logged.

    >>> sourceforge.convertRemoteStatus('eggs').title
    WARNING:...:Unknown status 'eggs'
    'Unknown'

UNKNOWN_REMOTE_STATUS maps to Unknown without generating a warning. This
handles the case where we've tried to probe for a bug but didn't succeed. For
example, if the bug number was invalid.

    >>> from canonical.launchpad.interfaces import UNKNOWN_REMOTE_STATUS
    >>> sourceforge.convertRemoteStatus(UNKNOWN_REMOTE_STATUS).title
    'Unknown'


== Initialization ==

Calling initializeRemoteBugDB() on our SourceForge instance and passing
it a set of remote bug IDs will fetch those bug IDs from the server and
file them in a local variable for later use.

We use a test-oriented implementation for the purposes of these tests,
which overrides ExternalBugTracker.urlopen() so that we don't have to
rely on a working network connection.

    >>> from canonical.launchpad.ftests.externalbugtracker import (
    ...     TestSourceForge, print_bugwatches)
    >>> sourceforge = TestSourceForge('http://test.sourceforge')
    >>> sourceforge.initializeRemoteBugDB([1])
    >>> sorted(sourceforge.bugs.keys())
    [1]


