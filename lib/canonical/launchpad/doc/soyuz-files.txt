= Soyuz Files =

Soyuz keeps a collection of source and binary packages classified as
SourcePackageRelease and BinaryPackageRelease, respectively.

Each of those records may containone or more files according its type:

 * Sources contains

   * An '.orig.tar.gz'
   * An '.diff.tar.gz'
   * An '.dsc'

 * Binaries contain:

   * An '.deb'

Those files are stored in Librarian and related to its parent object by
BinaryPackageFile and SourcePackageReleaseFile.

The parents provide an SQLMultipleJoin attribute called 'files' which
returns a group of respective ISourcePackageReleaseFile or
IBinaryPackageFile instances.

 >>> from zope.interface.verify import verifyObject
 >>> from zope.component import getUtility

 >>> from canonical.launchpad.interfaces import (
 ...    IDistributionSet, ILibraryFileAlias)

 >>> warty = getUtility(IDistributionSet)['ubuntu']['warty']

First let's select a convenient IDistroReleaseSourcePackageRelease,
which has files in the sampledata.

 >>> src = warty.getSourcePackage('mozilla-firefox').currentrelease

Use the property 'files' to retrieve a list of files related to this
IDistroReleaseSourcePackageRelease,

 >>> file = src.files[0]
 >>> verifyObject(ILibraryFileAlias, file.libraryfile)
 True

Check if ILibraryFileAlias is returning sane data:

 >>> file.libraryfile.filename
 u'firefox-0.9.2.tar.gz'

 >>> file.libraryfile.url
 'http://localhost:58000/3/firefox-0.9.2.tar.gz'

Perform similar tests for IDistroArchReleaseBinaryPackageRelease:

 >>> bin = warty['i386'].getBinaryPackage('mozilla-firefox').currentrelease

 >>> bin.name
 u'mozilla-firefox'

Use the property 'files' to retrieve a list of files related to this
IDistroArchReleaseBinaryPackageRelease,

 >>> file = bin.files[0]
 >>> verifyObject(ILibraryFileAlias, file.libraryfile)
 True

 >>> file.libraryfile.filename
 u'mozilla-firefox_0.9_i386.deb'

 >>> file.libraryfile.url
 'http://localhost:58000/40/mozilla-firefox_0.9_i386.deb'
