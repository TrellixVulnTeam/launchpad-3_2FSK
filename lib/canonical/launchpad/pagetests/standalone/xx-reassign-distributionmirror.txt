XXX: This test must be generalized and used like
interfaces/ftests/questiontarget.txt, to test reassignment in all contexts that
allow them. -- Guilherme Salgado, 2006-10-27

    These are the variables that will be defined in each setup hook once we
    move to a generic test used for all objects that can be reassigned.
    >>> from canonical.launchpad.database import DistributionMirror
    >>> context = DistributionMirror.byName('archive-mirror')
    >>> owner_attribute_name = 'owner'
    >>> context_url = (
    ...     'http://launchpad.dev/ubuntu/+mirror/archive-mirror')

Distribution mirrors can be reassigned by anybody with the launchpad.Admin
permission on them.

    >>> user_browser.open(context_url)
    >>> user_browser.getLink('Change Owner')
    Traceback (most recent call last):
    ...
    LinkNotFoundError
    >>> user_browser.open(context_url + "/+reassign")
    Traceback (most recent call last):
    ...
    Unauthorized: ...

    >>> browser.addHeader('Authorization', 'Basic karl@canonical.com:test')
    >>> browser.open(context_url)
    >>> browser.getLink('Change Owner').click()
    >>> browser.url
    'http://launchpad.dev/ubuntu/+mirror/archive-mirror/+reassign'

First we'll enter an unexistent name.

    >>> browser.getControl(name='field.owner').value = 'unexistent-name'
    >>> browser.getControl(name='existing').value = ['existing']
    >>> browser.getControl(name='CHANGE_OWNER').click()
    >>> browser.url
    'http://launchpad.dev/ubuntu/+mirror/archive-mirror/+reassign'
    >>> for tag in find_tags_by_class(browser.contents, 'error message'):
    ...     tag.renderContents()
    "There's no person/team named 'unexistent-name' in Launchpad."

We also try to use the name of an unvalidated account, which can't be used as
the owner of something.

    >>> from canonical.launchpad.database import Person
    >>> Person.byName('spiv').is_valid_person_or_team
    False
    >>> browser.getControl(name='field.owner').value = 'spiv'
    >>> browser.getControl(name='CHANGE_OWNER').click()
    >>> browser.url
    'http://launchpad.dev/ubuntu/+mirror/archive-mirror/+reassign'
    >>> for tag in find_tags_by_class(browser.contents, 'error message'):
    ...     tag.renderContents()
    "The person/team named 'spiv' is not a valid owner for ..."

Now we try to create a team using a name that is already taken.

    >>> browser.getControl(name='field.owner').value = 'name16'
    >>> browser.getControl(name='existing').value = ['new']
    >>> browser.getControl(name='CHANGE_OWNER').click()
    >>> browser.url
    'http://launchpad.dev/ubuntu/+mirror/archive-mirror/+reassign'
    >>> for tag in find_tags_by_class(browser.contents, 'error message'):
    ...     tag.renderContents()
    "There's already a person/team with the name 'name16' in Launchpad..."

Okay, let's do it properly now and reassign it to an existing (and validated)
account.

    >>> salgado = Person.byName('salgado')
    >>> salgado.is_valid_person_or_team
    True

    >>> browser.getControl(name='field.owner').value = 'salgado'
    >>> browser.getControl(name='existing').value = ['existing']
    >>> browser.getControl(name='CHANGE_OWNER').click()
    >>> browser.url
    'http://launchpad.dev/ubuntu/+mirror/archive-mirror/'
    >>> salgado.id == getattr(context, owner_attribute_name).id
    True
