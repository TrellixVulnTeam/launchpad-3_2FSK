# Put your TODOs for this branch here, then make sure it is empty before
# landing. There is a test to ensure it is empty in trunk. If there is
# stuff still here when you are ready to land, the items should probably
# be converted to bugs so they can be scheduled.

* we can't reuse the existing identity URLs in the new openid provider because
it is not allowed to make assertions about those identity URLs (the OPs who
can are defined in the XRDS document fetched by the RP using the claimed ID).

  For now I've made it work by extending the XRDS template in c-i-p to state
  that testopenid.lp.dev can make assertions about the claimed ID.

  The easiest way forward is probably to change all the OpenID identities in
  the dev sampledata to URLs under testopenid.lp.dev.
 
* Our demo openid provider can initially work with a dict mapping
email/password to identity URL.  when the given email/pass is found in the
dict, the login succeeds.

  The two items above mean we need a separate table in Launchpad to store the 
  mapping of identity URLs to users.

* Account.openid_identifier is generated by a DB trigger, which is good.

* We still rely heavily on the Account table and expect all users to have an
Account. We need to fix that if we're going to copy the Account table into the
main replication set and stop using the one from the auth set.  If we fix
that, though, the Account table won't be necessary so there'll be no point in
copying it.  *I'm not sure this is feasible.*

* As discussed with Francis, it's not worth porting the team-restricted login
stuff to the new system, so we'll drop it.

* Functionality needed in the callback view:
 - reactivate accounts when credentials belong to a deactivated profile
 - create Person entries when the credentials don't exist in our db
 - forbid to log suspended accounts in. btw, I guess we're going to copy the
   AccountStatus table to the main db.

    # To test all this I'll just have to monkey patch
    # OpenIDCallbackView.openid_response to return my hand-crafted
    # openid response.

* Must keep the old +login view (probably renamed to +login-old) so that our
windmill tests can log in. It will still be needed to fix the windmill helper
for logging in (./lib/canonical/launchpad/windmill/testing/lpuser.py), as it
just follows the links to login. To do that we'll need to keep the
AccountPassword table in the main database instead of just the account table

* Some tests use anon_browser.open() on protected pages so that they get
reidrected to +login and can show how the protected page works when the user
is not logged in, including the preserved query string. If we want to keep
doing that in these tests, we'll need an OpenID provider accessible to the
test suite. One option would be to include a crippled version of the one in
c-i-p in our tree, to be used only in tests.
(lib/canonical/launchpad/pagetests/oauth/authorize-token.txt is one of the
tests that rely on +login)

 - Does not work for /people/+me, because when the OpenID provider sends the user back to /people/+me/+openid-callback, there's a redirect to /~person/+openid-callback, which causes the openid dance to fail:
* <openid.consumer.consumer.FailureResponse id=None message="return_to does not match return URL. Expected 'https://launchpad.dev/%7Ename16/+openid-callback', got u'https://launchpad.dev/people/+me/+openid-callback?janrain_nonce=2009-12-23T14%3A47%3A47ZsgdbOJ'">
  I think this is a general problem with OpenID and login.lp.net because when
you log into login.lp.net and is sent to the callback page (in lp.net), that
page will see you as logged in, regardless of the openid response, because the
cookie is shared, and that causes /people/+me/+openid-callback to redirect to
/~name16/+openid-callback, which causes the error above.
  One way around this is to always use /+openid-callback as the return_to URL,
and include a lp_redirect_to URL in the query string, where LP will send the
user to, once the openid dance is completed.


= These points seem to be moot, actually =

- log into openid.lp.dev and you'll be automatically logged into lp.dev.
  - similarly, logout from lp.dev and you're logged out from openid.lp.dev

Is the above desirable?  Why does it happen?

This happens in production as well, although logging into login.lp.net only
makes me logged into lp.net but not edge.lp.net.

What are the implications of all this now that we use login.lp.net to
authenticate?

Today, if I'm not logged into lp.net and I use my OpenID identity on another
site, I'll end up logged into lp.net.
