Date Display
============

We aim for "friendly" display of dates. That means we prefer to express the
date "relative to the present" when it is close to now. Instead of saying
"2007-12-15 06:15 EST" we say "3 minutes ago" or "in 18 seconds".

There are two TALES formatters:

  o fmt:approximatedate does the hard work of turning a timestamp into an
    relative time description. It should be used for tabular data. For
    example:

        Product           Registered               Registrant
        =======           ==========               ==========
        foobar            *3 minutes ago*          James Wilson
        bzrness           *2005-11-07*             Richard Downes

  o fmt:displaydate is similar but is better in paragraphs or sentences. So,
    for example: "FooBar was registered *on 2005-11-06* and last updated
    *4 minutes ago*."

The difference between them is TINY: fmt:displaydate prepends "on " to the
result of fmt:approximatedate IF the time delta is greater than 1 day, and
hence if the display will be the date.

First, let's bring in some dependencies:

   >>> from datetime import datetime, timedelta
   >>> from canonical.launchpad.ftests import test_tales
   >>> import pytz

In the tests below, we create a timestamp that is a certain distance from
the presence, then test whether it is the same for fmt:approximatedate and
fmt:displaydate.

A time that is very close to the present will be displayed in seconds:

   >>> t = datetime.now(pytz.timezone('UTC')) + timedelta(0, 5, 0)
   >>> test_tales('t/fmt:approximatedate', t=t)
   'in ... seconds'
   >>> print test_tales('t/fmt:approximatedate', t=t) == \
   ...     test_tales('t/fmt:displaydate', t=t)
   True
   >>> t = datetime.now(pytz.timezone('UTC')) - timedelta(0, 5, 0)
   >>> test_tales('t/fmt:approximatedate', t=t)
   '... seconds ago'
   >>> print test_tales('t/fmt:approximatedate', t=t) == \
   ...     test_tales('t/fmt:displaydate', t=t)
   True

Further out we expect minutes:

  >>> t = datetime.now(pytz.timezone('UTC')) + timedelta(0, 75, 0)
  >>> test_tales('t/fmt:approximatedate', t=t)
  'in ... minutes'
   >>> print test_tales('t/fmt:approximatedate', t=t) == \
   ...     test_tales('t/fmt:displaydate', t=t)
   True
  >>> t = datetime.now(pytz.timezone('UTC')) - timedelta(0, 75, 0)
  >>> test_tales('t/fmt:approximatedate', t=t)
  '... minutes ago'
   >>> print test_tales('t/fmt:approximatedate', t=t) == \
   ...     test_tales('t/fmt:displaydate', t=t)
   True

Further out we expect hours:

  >>> t = datetime.now(pytz.timezone('UTC')) + timedelta(0, 3635, 0)
  >>> test_tales('t/fmt:approximatedate', t=t)
  'in ... hours'
   >>> print test_tales('t/fmt:approximatedate', t=t) == \
   ...     test_tales('t/fmt:displaydate', t=t)
   True
  >>> t = datetime.now(pytz.timezone('UTC')) - timedelta(0, 3635, 0)
  >>> test_tales('t/fmt:approximatedate', t=t)
  '... hours ago'
   >>> print test_tales('t/fmt:approximatedate', t=t) == \
   ...     test_tales('t/fmt:displaydate', t=t)
   True

And if the approximate date is more than a day away, we expect the date. We
also expect the fmt:displaydate to change form, and become "on yyyy-mm-dd".

  >>> t = datetime(2006, 1, 13, 15, 35)
  >>> test_tales('t/fmt:approximatedate', t=t)
  '2006-01-13'
   >>> print test_tales('t/fmt:approximatedate', t=t) == \
   ...     test_tales('t/fmt:displaydate', t=t)
   False
   >>> test_tales('t/fmt:displaydate', t=t)
   'on 2006-01-13'
  >>> t = datetime(2015, 1, 13, 15, 35)
  >>> test_tales('t/fmt:approximatedate', t=t)
  '2015-01-13'
   >>> print test_tales('t/fmt:approximatedate', t=t) == \
   ...     test_tales('t/fmt:displaydate', t=t)
   False
   >>> test_tales('t/fmt:displaydate', t=t)
   'on 2015-01-13'

