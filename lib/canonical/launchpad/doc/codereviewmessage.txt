= Code review messages =

When code is proposed to be merged, it's common to perform a review of
that code, which is often in the form of a conversation.  The reviewer
asks questions, makes comments, and offers an opinion (a 'vote') on
whether or not the code should be merged.  The submitter responds to the
reviewer until submitter and reviewer and reach an agreement about the
status of the code or conclude that agreement cannot be reached.

The ICodeReviewMessage interface represents this kind of conversation.
It has a IMessage as a member (in a one-to-one relationship), a vote
(which is an enum), and a reference to the IBranchMergeProposal it is
about.


== Creating CodeReviewMessages ==

CodeReviewMessages are created from their BranchMergeProposals:

    >>> login('foo.bar@canonical.com')
    >>> from canonical.launchpad.testing import LaunchpadObjectFactory
    >>> factory = LaunchpadObjectFactory()
    >>> merge_proposal = factory.makeBranchMergeProposal()
    >>> person = factory.makePerson(password='password')
    >>> message = merge_proposal.createMessage(
    ...     person, 'Please merge', 'This patch is very nice.')

The first message to be created is the root of the code review
conversation, and is available as BranchMergeProposal.root_message.

    >>> merge_proposal.root_message == message
    True

Subsequent messages are marked as replies to the root_message, by
default.

    >>> from canonical.launchpad.interfaces import CodeReviewVote
    >>> message2 = merge_proposal.createMessage(
    ...     person, 'No!', 'You are ugly and stupid',
    ...     CodeReviewVote.DISAPPROVE)
    >>> message2.message.parent == merge_proposal.root_message.message
    True

Messages can be marked as replies to particular messages.

    >>> message3 = merge_proposal.createMessage(
    ...     person, 'Hurt', "That wasn't a nice thing to say.",
    ...     parent=message2)
    >>> message3.message.parent == message2.message
    True

If there is a subscriber to any of the branches involved in the merge,
a notification is produced when the message is created.

    >>> from canonical.launchpad.interfaces import (
    ...     BranchSubscriptionDiffSize, BranchSubscriptionNotificationLevel,
    ...     CodeReviewNotificationLevel)
    >>> from canonical.launchpad.tests.mail_helpers import (
    ...     pop_notifications, print_emails)
    >>> source_subscriber = factory.makePerson(email='foo@bar.com',
    ...     password='baz')
    >>> _unused = merge_proposal.source_branch.subscribe(source_subscriber,
    ...     BranchSubscriptionNotificationLevel.NOEMAIL,
    ...     BranchSubscriptionDiffSize.NODIFF,
    ...     CodeReviewNotificationLevel.FULL)
    >>> _unused = pop_notifications()
    >>> message = merge_proposal.createMessage(
    ...     person, 'Please merge', 'This patch is very nice.',
    ...     vote=CodeReviewVote.APPROVE, vote_tag='DB')
    >>> notifications = pop_notifications()
    >>> print_emails(include_reply_to=True, notifications=notifications)
    From: Person-name... <...>
    To: Person-name... <...>
    Reply-To: mp+1@code.launchpad.dev
    Subject: Please merge
    Vote: Approve DB
    This patch is very nice.
    --
    You are subscribed to branch ~person-name.../product-name.../branch....
    ----------------------------------------
    >>> print notifications[0]['X-Launchpad-Branch']
    ~person-name.../product-name.../branch...
    >>> print notifications[0]['X-Launchpad-Message-Rationale']
    Subscriber
    >>> notifications[0]['Message-Id'] == message.message.rfc822msgid
    True
    >>> (notifications[0]['In-Reply-To'] ==
    ...  merge_proposal.root_message.message.rfc822msgid)
    True


== Interfaces ==

The CodeReviewMessage must implement the ICodeReviewMessage interface.

    >>> from canonical.launchpad.webapp.testing import verifyObject
    >>> from canonical.launchpad.interfaces import ICodeReviewMessage
    >>> verifyObject(ICodeReviewMessage, message)
    True
