= OpenID Pages =

OpenID Relying Parties (RP) may use Launchpad as an OpenID
provider. It can authenticate users for other sites.


== OpenIDPersistentIdentity ==

OpenIDPersistentIdentity is a representation of a user account
as a permanent identity usable for OpenID authentication. This
object is responsible to providing user's OpenID Login URL.

OpenIDPersistentIdentity implements IOpenIDPersistentIdentity.
An account object can be adapted to an OpenIDPersistentIdentity by
casting the account to the IOpenIDPersistentIdentity interface.

    >>> from zope.interface.verify import verifyObject

    >>> from canonical.launchpad.interfaces.account import IAccountSet
    >>> from canonical.launchpad.interfaces.openidserver import (
    ...     IOpenIDPersistentIdentity)

    >>> accountset = getUtility(IAccountSet)
    >>> sample_account = accountset.getByEmail('test@canonical.com')
    >>> sample_identity = IOpenIDPersistentIdentity(sample_account)
    >>> verifyObject(IOpenIDPersistentIdentity, sample_identity)
    True

OpenIDPersistentIdentity provides access to the account.

    >>> sample_identity.account.displayname
    u'Sample Person'

It also exposes both the new and old openid identifiers.

    >>> sample_identity.new_openid_identifier
    u'123/name12'
    >>> sample_identity.openid_identifier
    u'+id/name12_oid'

Most importantly, OpenIDPersistentIdentity provides access to the user's
old and new openid identity URLs.

    >>> sample_identity.new_openid_identity_url
    'http://id.launchpad.dev/123/name12'
    >>> sample_identity.old_openid_identity_url
    'http://openid.launchpad.dev/+id/name12_oid'


== Identity URLs ==

The openid_identity_url property is the identity URL for the vhost. It
is the canonical URL for the XRDS discovery end point. It will return
either the new or the old openid identity URL based on the vhost in
the current request. A request is always associated with a Layer.

    >>> from zope.interface import implements
    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest
    >>> from canonical.launchpad.layers import OpenIDLayer, IdLayer

When the current request is associated with the IdLayer,
openid_identity_url is the new URL format.

    >>> class IdTestRequest(LaunchpadTestRequest):
    ...     implements(IdLayer)

    >>> request = IdTestRequest(
    ...     SERVER_URL='http://id.launchpad.dev',
    ...     PATH_INFO='/123/name12')
    >>> login('test@canonical.com', request)
    >>> sample_identity.openid_identity_url
    'http://id.launchpad.dev/123/name12'

The OpenIDPersistentIdentity class provides the supportsURL()
staticmethod to test if the format of the identity URL is supported.
This verifies that the vhost and path are a valid combination.

    >>> from canonical.launchpad.components.openidserver import (
    ...     OpenIDPersistentIdentity)

    >>> OpenIDPersistentIdentity.supportsURL(
    ...     'http://id.launchpad.dev/123/name12')
    True

The old path is not valid for the new vhost.

    >>> OpenIDPersistentIdentity.supportsURL(
    ...     'http://id.launchpad.dev/+id/name12_oid')
    False


== Old identity URLs ==

When the current request is associated with the OpenIDLayer,
openid_identity_url is the old URL format.

    >>> class OpenIDTestRequest(LaunchpadTestRequest):
    ...     implements(OpenIDLayer)

    >>> old_request = OpenIDTestRequest(
    ...     SERVER_URL='http://openid.launchpad.dev',
    ...     PATH_INFO='/+id/name12_oid')
    >>> login('test@canonical.com', old_request)
    >>> sample_identity.openid_identity_url
    'http://openid.launchpad.dev/+id/name12_oid'

The old vhost supports the old identity URL path.

    >>> OpenIDPersistentIdentity.supportsURL(
    ...     'http://openid.launchpad.dev/+id/name12_oid')
    True

The new path is not valid for the old vhost.

    >>> OpenIDPersistentIdentity.supportsURL(
    ...     'http://openid.launchpad.dev/123/name12')
    False


== PersistentIdentityView ==

The PersistentIdentityView displays an OpenIDPersistentIdentity.
It is used by OpenID Discovery process to represent a user's
identity end point. It provides two URLs for navigation.

    >>> from openid.yadis.constants import YADIS_CONTENT_TYPE
    >>> from zope.component import getMultiAdapter

    >>> request = LaunchpadTestRequest(
    ...     SERVER_URL='http://openid.launchpad.dev',
    ...     PATH_INFO='/+id/name12_oid',
    ...     HTTP_ACCEPT=YADIS_CONTENT_TYPE)
    >>> identity_view = getMultiAdapter(
    ...     (sample_identity, request), name="+index")
    >>> identity_view.initialize()

The OpenIDPersistentIdentity's openid_identity_url:

    >>> identity_view.openid_identity_url
    u'http://openid.launchpad.dev/+id/name12_oid'

The URL for the server:

    >>> identity_view.openid_server_url
    'http://openid.launchpad.dev/+openid'

The view supports XRDS discovery. When the YADIS content type is in
the HTTP_ACCEPT header, XRDS XML is rendered.

    >>> identity_view.enable_xrds_discovery
    True

    >>> identity_view.xrds()
    '<?xml version="1.0"?>\n<xrds:XRDS xmlns="xri://$xrd*($v*2.0)"...'

    >>> identity_view.render()
    '<?xml version="1.0"?>\n<xrds:XRDS xmlns="xri://$xrd*($v*2.0)"...'

If YADIS is not in the HTTP_ACCEPT header, HTML is rendered().

    >>> request = LaunchpadTestRequest(
    ...     SERVER_URL='http://openid.launchpad.dev',
    ...     PATH_INFO='/+id/name12_oid',
    ...     HTTP_ACCEPT='text/html')
    >>> identity_view = getMultiAdapter(
    ...     (sample_identity, request), name="+index")
    >>> identity_view.initialize()
    >>> identity_view.render()
    u'<html xmlns="http://www.w3.org/1999/xhtml">...'

If the requested URL does not match the expected identity URL, nothing
is rendered.

    >>> request = LaunchpadTestRequest(
    ...     SERVER_URL='http://openid.launchpad.dev',
    ...     PATH_INFO='/+id/name12_oid/bogus_info',
    ...     HTTP_ACCEPT=YADIS_CONTENT_TYPE)
    >>> identity_view = getMultiAdapter(
    ...     (sample_identity, request), name="+index")
    >>> identity_view.initialize()
    >>> identity_view.render()
    ''

== OpenIDApplicationIndexView ==

The OpenIDApplicationIndexView is the default view for the OpenID
application. It is a used by the OpenID Discovery process.

    >>> from canonical.launchpad.interfaces import IOpenIDApplication

    >>> openid_app = getUtility(IOpenIDApplication)
    >>> request = LaunchpadTestRequest(
    ...     SERVER_URL='http://openid.launchpad.dev',
    ...     PATH_INFO='/',
    ...     HTTP_ACCEPT=YADIS_CONTENT_TYPE)
    >>> app_view = getMultiAdapter(
    ...     (openid_app, request), name="+xrds")
    >>> app_view.initialize()

It provides the OpenID server URL.

    >>> app_view.openid_server_url
    'http://openid.launchpad.dev/+openid'

The view supports XRDS discovery. When the YADIS content type is in
the HTTP_ACCEPT header, XRDS XML is rendered.

    >>> app_view.enable_xrds_discovery
    True

    >>> app_view.xrds()
    '<?xml version="1.0"?>\n<xrds:XRDS xmlns="xri://$xrd*($v*2.0)"...'

    >>> app_view.render()
    '<?xml version="1.0"?>\n<xrds:XRDS xmlns="xri://$xrd*($v*2.0)"...'

If YADIS is not in the HTTP_ACCEPT header, HTML is rendered().

    >>> request = LaunchpadTestRequest(
    ...     SERVER_URL='http://openid.launchpad.dev',
    ...     PATH_INFO='/+id/name12_oid',
    ...     HTTP_ACCEPT='text/html')
    >>> app_view = getMultiAdapter(
    ...     (sample_identity, request), name="+index")
    >>> app_view.initialize()
    >>> app_view.render()
    u'<html xmlns="http://www.w3.org/1999/xhtml">...'

Nothing is rendered if the URL is not the expected URL.

    >>> request = LaunchpadTestRequest(
    ...     SERVER_URL='http://openid.launchpad.dev',
    ...     PATH_INFO='/unexpected/content',
    ...     HTTP_ACCEPT=YADIS_CONTENT_TYPE)
    >>> app_view = getMultiAdapter(
    ...     (openid_app, request), name="+xrds")
    >>> app_view.initialize()
    >>> app_view.render()
    ''
