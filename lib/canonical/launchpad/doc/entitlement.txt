= Entitlements =

Entitlements are a means of recording features and privileges
Launchpad users have been assigned.  The business model for these
assignments is not important, but it could be through a commercial
arrangement or through a grant that applies to everyone.

    >>> from zope.interface.verify import verifyObject
    >>> from canonical.launchpad.interfaces import (
    ...     EntitlementQuota, IPersonSet, IEntitlement)
    >>> from canonical.launchpad.database import Entitlement
    >>> from canonical.launchpad.ftests import login
    >>> from canonical.lp.dbschema import EntitlementState, EntitlementType
    >>> from canonical.database.sqlbase import flush_database_updates

Be an admin in order to change the quota.

    >>> login("foo.bar@canonical.com")

Find a team with an entitlement.

    >>> personset = getUtility(IPersonSet)
    >>> ubuntu_team = personset.getByName('ubuntu-team')

An entitlement grants privilege to use a restricted feature.  The
'quota' is the number of instances being granted and the
entitlement_type is the feature being enabled.  The 'person' is the
person or team being granted the right.  The state for a granted
entitlement is ACTIVE and the expiration and start dates can be specified.

    >>> entitlement = Entitlement(
    ...     quota=5,
    ...     entitlement_type=EntitlementType.PRIVATE_BUGS,
    ...     person=ubuntu_team,
    ...     state=EntitlementState.ACTIVE,
    ...     date_expires="2038-06-11 00:00:00")

    >>> verifyObject(IEntitlement, entitlement)
    True

If the current date is after the start date (if not None) or before
the expiration date (if not None) then the in_date_range test will
pass. 

    >>> entitlement.in_date_range
    True

== Quota checking ==

If the amount used is less than the quota value the exceeded_quota
test will be false.

    >>> entitlement.quota = 100
    >>> entitlement.amount_used = 0
    >>> entitlement.exceeded_quota
    False

The quota is not exceeded, the date is in range, and the state is
ACTIVE, so the entitlement is valid.

    >>> entitlement.is_valid
    True

If the amount used is equal to the quota 'exceeded_quota' should still
be false and 'is_valid' is still true.

    >>> entitlement.quota = 100
    >>> entitlement.amount_used = 100
    >>> entitlement.exceeded_quota
    False
    >>> entitlement.is_valid
    True

However if the amount_used to exceeds the quota, the exceeded quota is
true and the entitlement is no longer valid.

    >>> entitlement.quota = 100
    >>> entitlement.amount_used = 101
    >>> entitlement.exceeded_quota
    True
    >>> entitlement.is_valid
    False

If the quota is UNLIMITED the exceeded quota test is false even when
using a really large value for amount used.  The entitlement remains
valid. 

    >>> import sys
    >>> entitlement.quota = EntitlementQuota.UNLIMITED
    >>> entitlement.amount_used = pow(10,9)
    >>> entitlement.exceeded_quota
    False
    >>> entitlement.is_valid
    True

Calling incrementAmountUsed increases the value by one.

    >>> entitlement.quota = 10
    >>> entitlement.amount_used = 9
    >>> entitlement.incrementAmountUsed()
    >>> entitlement.amount_used
    10

Attemting to increment past the quota will cause an error.

    >>> entitlement.incrementAmountUsed()
    Traceback (most recent call last):
      ...
    EntitlementQuotaExceededError: ...

If the entitlement is invalid for any reason, attempting to increment
the amount used will cause an error.

    >>> entitlement.state = EntitlementState.INACTIVE
    >>> entitlement.quota = 50
    >>> entitlement.incrementAmountUsed()
    Traceback (most recent call last):
      ...
    EntitlementInvalidError: ...

    
== Date range checking ==

Remove the start and expiration dates and show the range is valid.

    >>> entitlement.state = EntitlementState.ACTIVE
    >>> entitlement.date_starts = None
    >>> entitlement.date_expires = None
    >>> entitlement.in_date_range
    True
    >>> entitlement.is_valid
    True

    >>> from datetime import datetime, timedelta
    >>> from pytz import UTC
    >>> now = datetime.now(UTC)
    >>> yesterday = now - timedelta(days = 1)
    >>> tomorrow = now + timedelta(days = 1)

Set the start date to the past and the date range is satisfied.

    >>> entitlement.date_starts = yesterday
    >>> entitlement.in_date_range
    True
    >>> entitlement.is_valid
    True

Set the start date to the future and the date range is not satisfied.

    >>> entitlement.date_starts = tomorrow
    >>> entitlement.in_date_range
    False
    >>> entitlement.is_valid
    False

Set the expires date to the past and the entitlement is out of the
date range.

    >>> entitlement.date_starts = None
    >>> entitlement.date_expires = yesterday
    >>> entitlement.in_date_range
    False
    >>> entitlement.is_valid
    False

Set the expires date to the future and the date range is satisfied.

    >>> entitlement.date_expires = tomorrow
    >>> entitlement.in_date_range
    True
    >>> entitlement.is_valid
    True

Set the start date to the past and the expires date to the future to
again satisfy the date criteria.

    >>> entitlement.date_starts = yesterday
    >>> entitlement.date_expires = tomorrow
    >>> entitlement.in_date_range
    True
    >>> entitlement.is_valid
    True

Login as an anonymous user and show that the entitlement values
cannot be viewed as access to viewing attributes is restricted to the
owner or members of the team, registrant, or Launchpad administrators.  
Get a security-wrapped entitlement to test against. 

    >>> entitlement = ubuntu_team.entitlements[0]
    >>> entitlement.quota = 50
    >>> logout()
    >>> login(ANONYMOUS)
    >>> entitlement.quota
    Traceback (most recent call last):
      ...
    Unauthorized: (<Entitlement..., 'quota', 'launchpad.View')


    >>> entitlement.quota=10
    Traceback (most recent call last):
      ...
    Unauthorized: (<Entitlement..., 'quota', 'launchpad.Admin')
    >>> logout()

Authenticated Launchpad users who are not the owner or team member are
similarly restricted.

    >>> login('no-priv@canonical.com')
    >>> entitlement.quota
    Traceback (most recent call last):
      ...
    Unauthorized: (<Entitlement..., 'quota', 'launchpad.View')


    >>> entitlement.quota=10
    Traceback (most recent call last):
      ...
    Unauthorized: (<Entitlement..., 'quota', 'launchpad.Admin')

Now let's add the current user to the team and show that the user can
now access attributes.  Since ubuntu-team is restricted, an
administrator must be listed as a reviewer for the membership to go
through. 

    >>> from canonical.lp.dbschema import TeamMembershipStatus
    >>> nopriv = getUtility(ILaunchBag).user
    >>> sabdfl = personset.getByName('sabdfl')
    >>> nopriv.join(ubuntu_team)
    >>> ubuntu_team.setMembershipData(nopriv, TeamMembershipStatus.APPROVED, sabdfl)
    >>> flush_database_updates()
    >>> nopriv in ubuntu_team.activemembers
    True
    >>> nopriv.inTeam(ubuntu_team)
    True
    >>> entitlement.quota
    50

    >>> entitlement.quota=10
    Traceback (most recent call last):
      ...
    Unauthorized: (<Entitlement..., 'quota', 'launchpad.Admin')
    
