Check that we can approve an import for sync without having to review
the Product.

We use the david.allouche@canonical.com user for this test, because it is
member of vcs-imports and not a member of admins.

Check the the +source form loads and that the import status is the
expected value.

  >>> browser.addHeader('Authorization',
  ...     'Basic david.allouche@canonical.com:test')
  >>> browser.open('http://launchpad.dev/a52dec/trunk/+source')
  >>> print find_main_content(browser.contents)
  <...
  <h2>Import Status</h2>
  <p>The current import status is: <b>Testing</b>. </p>
  ...

Since we are a VCS imports team member, there is an extra action
button to allow us to approve imports.

  >>> browser.getControl('Approve import for production and publication')
  <SubmitControl ...>

This button does not appear for normal users:

  >>> user_browser.open('http://launchpad.dev/a52dec/trunk/+source')
  >>> user_browser.getControl('Approve import for production and publication')
  Traceback (most recent call last):
    ...
  LookupError: label 'Approve import for production and publication'


If we remove the RCS details, we will get an error when trying to
certify the import:

  >>> browser.getControl('No revision control system, or Bazaar').click()
  >>> browser.getControl(
  ...     'Approve import for production and publication').click()
  >>> print browser.url
  http://launchpad.dev/a52dec/trunk/+source
  >>> for tag in find_tags_by_class(browser.contents, 'error'):
  ...     print tag
  <p class="error message">There is 1 error.</p>
  <p class="error message">Can not certify import without CVS or Subversion details.</p>


If we have correct details, we can approve the build for production:

  >>> browser.getControl('CVS').click()
  >>> browser.getControl('Repository').value = (
  ...     ':pserver:anonymous@cvs.sourceforge.net:/cvsroot/liba52')
  >>> browser.getControl('Module').value = 'a52dec'
  >>> browser.getControl(name='field.cvsbranch').value = 'MAIN'
  >>> browser.getControl(
  ...     'Approve import for production and publication').click()
  >>> print browser.url
  http://launchpad.dev/a52dec/trunk

Check that that import status was indeed updated.

  >>> print find_main_content(browser.contents)
  <...
  <tr>
  <th>Import status:</th>
  <td>Processing</td>
  </tr>
  ...

On the edit page, there are buttons for marking imports as TESTFAILED
or DONTSYNC and another for wiping out an import:

  >>> browser.getLink('Edit source').click()
  >>> browser.url
  'http://launchpad.dev/a52dec/trunk/+source'
  >>> browser.getControl('Mark import TESTFAILED')
  <SubmitControl ...>
  >>> browser.getControl('Mark import DONTSYNC')
  <SubmitControl ...>
  >>> browser.getControl('Wipe out import')
  <SubmitControl ...>

These are only for VCS operators:

  >>> user_browser.url
  'http://launchpad.dev/a52dec/trunk/+source'
  >>> user_browser.getControl('Mark import TESTFAILED')
  Traceback (most recent call last):
    ...
  LookupError: label 'Mark import TESTFAILED'
  >>> user_browser.getControl('Mark import DONTSYNC')
  Traceback (most recent call last):
    ...
  LookupError: label 'Mark import DONTSYNC'
  >>> user_browser.getControl('Wipe out import')
  Traceback (most recent call last):
    ...
  LookupError: label 'Wipe out import'

Clicking the first two buttons changes the status of the import:

  >>> browser.open('http://launchpad.dev/a52dec/trunk/+source')
  >>> browser.getControl('Mark import TESTFAILED').click()
  >>> print browser.url
  http://launchpad.dev/a52dec/trunk
  >>> print find_main_content(browser.contents)
  <...
  <tr>
  <th>Import status:</th>
  <td>Test Failed</td>
  </tr>
  ...

  >>> browser.open('http://launchpad.dev/a52dec/trunk/+source')
  >>> browser.getControl('Mark import DONTSYNC').click()
  >>> print browser.url
  http://launchpad.dev/a52dec/trunk
  >>> print find_main_content(browser.contents)
  <...
  <tr>
  <th>Import status:</th>
  <td>Do Not Import</td>
  </tr>
  ...

The last button has to be tested last, because it erases all knowledge of the
import:

  >>> browser.open('http://launchpad.dev/a52dec/trunk/+source')
  >>> browser.getControl('Wipe out import').click()
  >>> print browser.url
  http://launchpad.dev/a52dec/trunk
  >>> print find_main_content(browser.contents)
  <...
  <p>
    No revision control details recorded for trunk.
  </p>
  ...
