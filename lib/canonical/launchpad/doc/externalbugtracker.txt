= Generic ExternalBugTracker Tests =

ExternalBugTracker instances are used to communicate with remote bug
trackers. This document tests those features that are common to all
ExternalBugTracker instances.


== Configuration Options ==

All ExternalBugTrackers have two properties which are set by
configuration options in launchpad.conf, batch_set_size and
batch_query_threshold. batch_set_size is used to limit the number of
bugs fetched from the remote server on each run of the checkwatches
script. batch_query_threshold is used to decide whether or not the bugs
are exported from the remote server as a batch (where possible) or
individually.

The batch_query_threshold for a vanilla ExternalBugTracker should be the
same as that specified in launchpad.conf. We use a test version of
ExternalBugTracker here that doesn't actually do anything besides
fulfill the implementation requirements of IExternalBugTracker.

    >>> from canonical.config import config
    >>> from canonical.launchpad.ftests.externalbugtracker import (
    ...     TestExternalBugTracker)
    >>> tracker = TestExternalBugTracker()
    >>> (tracker.batch_query_threshold ==
    ...     config.checkwatches.batch_query_threshold)
    True

The batch_set_size property is much the same a batch_query_set, with one
important distinction. If a bug tracker applies no limit to its batch
set size its batch_set_size will be zero. However, for the sake of
making batch_set_size easier to use in code a value of 0 for a bug
tracker will be returned by batch_set_size as None.

Each ExternalBugTracker has an attribute _batch_set_size, which stores
the batch set size for that bug tracker. In our test ExternalBugTracker
its value will be that specified in launchpad.conf:

    >>> tracker._batch_set_size == config.checkwatches.batch_set_size
    True

If we create a new subclass of TestExternalBugTracker with a batch set
size of, say, five, this will be reflected in that class's
batch_set_size property as well as its _batch_set_size attribute:

    >>> class NewTestExternalBugTracker(TestExternalBugTracker):
    ...     _batch_set_size = 5
    >>> tracker = NewTestExternalBugTracker()
    >>> tracker._batch_set_size
    5
    >>> tracker.batch_set_size
    5

However, if we set NewTestExternalBugTracker's batch set size to 0, the
attribute and the property return different values:

    >>> NewTestExternalBugTracker._batch_set_size = 0
    >>> tracker = NewTestExternalBugTracker()
    >>> tracker._batch_set_size
    0
    >>> tracker.batch_set_size is None
    True


== Error Handling ==

When an error occurs during the updating of bug watches it will be
recorded against the bug watches themselves so that it can be displayed
to users. We can test this by using a test version of
ExternalBugTracker.

    >>> from canonical.launchpad.ftests.externalbugtracker import (
    ...     TestBrokenExternalBugTracker)
    >>> external_bugtracker = TestBrokenExternalBugTracker(
    ...     'http://example.com')

We'll create an example bug watch with which to test this. This will
be passed to external_bugtracker's updateBugWatches() method and should
have errors recorded against it. We log in as Sample Person to make
these changes since there's no particular need to use one Person over
another.

    >>> from canonical.launchpad.database import BugTracker
    >>> from canonical.launchpad.interfaces import (
    ...     BugTrackerType, IBugSet, IPersonSet)

    >>> sample_person = getUtility(IPersonSet).getByEmail(
    ...     'test@canonical.com')

    >>> example_bug_tracker = BugTracker(
    ...     name="example-bugs",
    ...     title="Example.com Bug Tracker",
    ...     bugtrackertype=BugTrackerType.BUGZILLA,
    ...     baseurl="http://bugs.example.com",
    ...     summary="Contains bugs for Example.com",
    ...     contactdetails="foo.bar@example.com",
    ...     owner=sample_person)

    >>> login('test@canonical.com')

    >>> example_bug = getUtility(IBugSet).get(10)
    >>> example_bugwatch = example_bug.addWatch(
    ...     example_bug_tracker, 1, sample_person)

    >>> from canonical.launchpad.components.externalbugtracker import (
    ...     BugNotFound, BugTrackerConnectError, InvalidBugId,
    ...     UnparseableBugData, UnparseableBugTrackerVersion)
    >>> from socket import timeout

TestBrokenExternalBugTracker allows us to force errors to occur, so we
can use it to check that bug watches' last_error_types are being set
correctly.

We start with those errors that may be raised by
ExternalBugTracker.initializeRemoteBugDB(). We supress exceptions
because we're only interested in the bug watch's last error field.

    >>> for error in [BugTrackerConnectError, UnparseableBugData,
    ...     UnparseableBugTrackerVersion]:
    ...     external_bugtracker.initialize_remote_bugdb_error = error
    ...     try:
    ...         external_bugtracker.updateBugWatches([example_bugwatch])
    ...     except error:
    ...         pass
    ...     example_bugwatch.last_error_type.title
    'Connection Error'
    'Unparsable Bug'
    'Unparsable Bug Tracker Version'

We can run the same test on getRemoteStatus(), which can raise different
errors. We temporarily silence the logging from this function because
we're not interested in it.

    >>> from canonical.launchpad.scripts import log
    >>> loglevel = log._log.level
    >>> external_bugtracker.initialize_remote_bugdb_error = None
    >>> try:
    ...     log._log.setLevel(100)
    ...     for error in [BugNotFound, InvalidBugId, UnparseableBugData]:
    ...         external_bugtracker.get_remote_status_error = error
    ...         try:
    ...             external_bugtracker.updateBugWatches([example_bugwatch])
    ...         except:
    ...             pass
    ...         example_bugwatch.last_error_type.title
    ... finally:
    ...     log._log.setLevel(loglevel)
    'Bug Not Found'
    'Invalid Bug ID'
    'Unparsable Bug'

