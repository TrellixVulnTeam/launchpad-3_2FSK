= OpenID Security Extensions: Max Login Delta =

Launchpad offers a way to relaying party to ensure that the user enters
their password, even if they have already logged into Launchpad. The
purpose of this is for sites for which the long-lived session policy of
Launchpad is problematic.

    >>> browser.open('http://launchpad.dev')
    >>> browser.getLink('Log in').click()
    >>> browser.getControl('E-mail', index=0).value = 'test@canonical.com'
    >>> browser.getControl('Password').value = 'test'
    >>> browser.getControl('Log In').click()
    >>> print extract_text(find_tag_by_id(browser.contents, 'logincontrol'))
    Sample Person...

Normally, if a relaying party asks to authenticates this user, the user
will be able to click the 'Sign In' button to complete the
authentication process.

    >>> from openid.consumer.consumer import Consumer
    >>> from openid.fetchers import setDefaultFetcher
    >>> from openid.store.memstore import MemoryStore
    >>> from canonical.launchpad.testing.openidhelpers import (
    ...     complete_from_browser, make_identifier_select_endpoint,
    ...     PublisherFetcher)
    >>> setDefaultFetcher(PublisherFetcher())

    >>> openid_store = MemoryStore()
    >>> endpoint = make_identifier_select_endpoint(PROTOCOL_URI)
    >>> consumer = Consumer(session={}, store=openid_store)
    >>> request = consumer.beginWithoutDiscovery(endpoint)

    >>> browser.open(request.redirectURL(
    ...     'http://launchpad.dev/', 'http://launchpad.dev/+openid-consumer'))
    >>> browser.getControl('Sign In', index=0)
    <SubmitControl...>

The max_login_delta extension parameter can be used to force the user to
enter their password, even if they are already authenticated with
Launchpad.

    >>> from canonical.launchpad.browser.openidserver import (
    ...     LAUNCHPAD_TEAMS_NS)
    >>> consumer = Consumer(session={}, store=openid_store)
    >>> request = consumer.beginWithoutDiscovery(endpoint)
    >>> request.message.namespaces.addAlias(LAUNCHPAD_TEAMS_NS, 'lp')
    'lp'

Using 0 as max_login_delta value will always force the user to enter
their password.

    >>> request.addExtensionArg(LAUNCHPAD_TEAMS_NS, 'max_login_delta', '0')
    >>> browser.open(request.redirectURL(
    ...     'http://launchpad.dev/', 'http://launchpad.dev/+openid-consumer'))
    >>> print browser.url
    http://openid.launchpad.dev/+openid...
    >>> browser.getControl('Sign In', index=0)
    Traceback (most recent call last):
      ...
    LookupError:...

If they do not enter their password correctly, they get an error message
and can try again:

    >>> browser.getControl(name='field.email').value = 'test@canonical.com'
    >>> browser.getControl(name='field.password').value = 'bad password'
    >>> browser.getControl('Continue').click()

    >>> for tag in find_tags_by_class(browser.contents, 'error'):
    ...     print extract_text(tag)
    Incorrect password for the provided email address.

Entering their credential properly completes the OpenID request.

    >>> browser.getControl(name='field.email').value = 'test@canonical.com'
    >>> browser.getControl(name='field.password').value = 'test'
    >>> browser.getControl('Continue').click()
    >>> print browser.url
    http://launchpad.dev/+openid-consumer?...

    >>> info = complete_from_browser(
    ...     consumer, browser, 'http://openid.launchpad.dev/+id/name12_oid')
    >>> print info.status
    success
    >>> print info.endpoint.claimed_id
    http://openid.launchpad.dev/+id/name12_oid

== Cleanup ==

    >>> setDefaultFetcher(None)
