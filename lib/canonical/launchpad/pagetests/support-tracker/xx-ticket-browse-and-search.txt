= Browsing and Searching Questions =

This story describes some common use cases about using the browsing and
searching features of the Answer Tracker.

== When Nobody Uses the Answer Tracker ==

Average Joe has recently installed Kubuntu. He has a problem with his
system and goes to the Kubuntu's support page in Launchpad to see if
somebody had a similar problem.

    >>> browser.open('http://launchpad.dev/kubuntu')
    >>> browser.getLink('Answers').click()

He discovers that there are no questions on the Kubuntu Answers page:

    >>> print browser.title
    Questions for Kubuntu

    >>> from BeautifulSoup import BeautifulSoup
    >>> print find_main_content(browser.contents).first('p').renderContents()
    There are no questions for Kubuntu with the requested statuses.

== Browsing Questions ==

He realises that support for Kubuntu is probably going on in the Ubuntu
Answers page and goes there to check.

    >>> browser.open('http://launchpad.dev/ubuntu/+tickets')
    >>> browser.title
    'Questions for Ubuntu'

He sees a listing of the current questions posted on Ubuntu:

    >>> soup = BeautifulSoup(browser.contents)
    >>> for ticket in soup.fetch('td', 'ticket'):
    ...     print ticket.first('a').renderContents()
    Continue playing after shutdown
    Play DVDs in Totem
    mailto: problem in webpage
    Installation of Java Runtime Environment for Mozilla
    Slow system

None of the listed question titles quite match his problem. He sees that
there is another page of questions, so he goes to the next page of
results. There, he finds only one other question:

    >>> browser.getLink('Next').click()
    >>> browser.title
    'Questions for Ubuntu'
    >>> soup = BeautifulSoup(browser.contents)
    >>> for ticket in soup.fetch('td', 'ticket'):
    ...     print ticket.first('a').renderContents()
    Installation failed

This is the last results page, so the next and last links are greyed
out.

    >>> 'Next' in browser.contents
    True
    >>> browser.getLink('Next')
    Traceback (most recent call last):
      ..
    LinkNotFoundError...
    >>> 'Last' in browser.contents
    True
    >>> browser.getLink('Last')
    Traceback (most recent call last):
      ..
    LinkNotFoundError...

He decides to go the first page. He remembered one quesiton title that
might have been remotely related to his problem.

    >>> browser.getLink('First').click()

Since he is on the first page, the 'First' and 'Previous' links are
greyed out:

    >>> 'Previous' in browser.contents
    True
    >>> browser.getLink('Previous')
    Traceback (most recent call last):
      ..
    LinkNotFoundError...
    >>> 'First' in browser.contents
    True
    >>> browser.getLink('First')
    Traceback (most recent call last):
      ..
    LinkNotFoundError...

When he passes the mouse over the question's row, the beginning of the
description appears in a small pop-up:

    >>> import re
    >>> soup = BeautifulSoup(browser.contents)
    >>> ticket_link = soup.first('a', text=re.compile('Play DVDs'))
    >>> print ticket_link.findParent('tr')['title']
    How do you play DVDs in Totem..........?

    >>> ticket_link = soup.first('a', text=re.compile('mailto:'))
    >>> print ticket_link.findParent('tr')['title']
    I am not able to open my email client if i click on a mailto: link in a
    webpage in Firefox 1.5.0.4 (ubuntu dapper).
    <BLANKLINE>
    Earlier I could do this but since balsa was installed and then uninstalled,
    things have not been the same. balsa used to start when a mailto: link was
    clicked on a webpage. balsa i...

He clicks on the question title to obtain the question page where the
details of the question are available.

    >>> browser.getLink('Slow system').click()
    >>> browser.title
    'Ubuntu question #7: ...Slow system...'
    >>> soup = BeautifulSoup(browser.contents)
    >>> soup('div', 'report')
    [<div class="report"><p>I get really poor hard drive performance.</p></div>]

== Searching Questions ==

Browsing is fine when the number of questions is small, but searching is
more convenient as the number of questions grow larger.

This time, it's Firefox that brings Average Joe to the Ubuntu Answer
Tracker. He finds that his machine becomes really slow
whenever he has Firefox open. Luckily for Average Joe, searching for
similar questions is easy: on the question listing page, he just
enters his search key and hit the 'Search' button.

    >>> browser.open('http://launchpad.dev/ubuntu/+tickets')
    >>> browser.getControl(name='field.search_text').value = 'firefox is slow'
    >>> browser.getControl('Search').click()

Unfortunately, the search doesn't return any similar questions:

    >>> print browser.title
    Questions matching "firefox is slow" for Ubuntu
    >>> print find_main_content(browser.contents).first('p').renderContents()
    There are no questions matching "firefox is slow" for Ubuntu with
    the requested statuses.

Joe observes under the search widget that there are checkboxes to select
the question status to search. He notices that only some statuses are
selected. He adds 'Invalid' to the selection, and run his search again.

    >>> browser.getControl(name='field.status').value
    ['Open', 'Needs information', 'Answered', 'Solved']
    >>> browser.getControl('Invalid').selected = True
    >>> browser.getControl('Search').click()

This time, the search returns one item.

    >>> soup = BeautifulSoup(browser.contents)
    >>> for ticket in soup.fetch('td', 'ticket'):
    ...     print ticket.first('a').renderContents()
    Firefox is slow and consumes too much RAM

He clicks on the link to read the question description.

    >>> browser.getLink('Firefox is slow').click()
    >>> browser.title
    'mozilla-firefox in ubuntu question #3:...Firefox is slow...'

== Controlling the Sort Order ==

That question isn't exactly what Average Joe was looking for. Now, he'd
like to see all the questions that were related to the firefox package.
The quesiton listing page for distribution displays the source package
related to each question . The source package name is a link to the
source package's question listing.

    # We should use goBack() here but can't because of ZC #645:
    # zope.testbrowser truncates document content after goBack().
    #>>> browser.goBack()
    >>> browser.open('http://launchpad.dev/ubuntu/+tickets')
    >>> browser.getLink('mozilla-firefox').click()
    >>> browser.title
    'Questions for mozilla-firefox in ubuntu'
    >>> soup = BeautifulSoup(browser.contents)
    >>> soup('table', 'listing')
    [<table...
    ...mailto: problem in webpage...2006-07-20...
    ...Installation of Java Runtime Environment for Mozilla...2006-07-20...
    </table>]

Average Joe wants to see all questions but listed from the oldest to the
newest. Again, he adds the 'Invalid' status to the selection and
selects the 'oldest first' sort order.

    >>> browser.getControl('Invalid').selected = True
    >>> browser.getControl('oldest first').selected = True
    >>> browser.getControl('Search').click()

    >>> soup = BeautifulSoup(browser.contents)
    >>> soup('table', 'listing')
    [<table...
    ...Firefox is slow and consumes too much RAM...2005-09-05...
    ...Installation of Java Runtime Environment for Mozilla...2006-07-20...
    ...mailto: problem in webpage...2006-07-20...
    </table>]

== Common Reports ==

In the actions menu, we find links to some common reports.

=== Open Requests ===

Nice Guy likes helping others. He uses the 'Open' link to view the most
recent questions on Mozilla Firefox.

    >>> browser.open('http://launchpad.dev/firefox/+tickets')
    >>> browser.getLink('Open').click()
    >>> print browser.title
    Open questions for Mozilla Firefox
    >>> tickets = find_tag_by_id(browser.contents, 'ticket-listing')
    >>> for ticket in tickets.fetch('td', 'ticket'):
    ...     print ticket.first('a').renderContents()
    Firefox loses focus and gets stuck
    Problem showing the SVG demo on W3C site
    Firefox cannot render Bank Site

Note that the default sort order for this listing is
'recently updated first' so that questions which received new information
from the submitter shows up first:

    >>> browser.getControl(name='field.sort').displayValue
    ['recently updated first']

That listing is also searchable. Since he's has lots of experience
dealing with plugins problems, he always start by a search for such
problems:

    >>> browser.getControl(name='field.search_text').value = 'plug-in'
    >>> browser.getControl('Search').click()
    >>> tickets = find_tag_by_id(browser.contents, 'ticket-listing')
    >>> for ticket in tickets.fetch('td', 'ticket'):
    ...     print ticket.first('a').renderContents()
    Problem showing the SVG demo on W3C site

=== Answered Requests ===

A random user has a problem with firefox in Ubuntu. He uses the
'Answered' link on the 'Answers' facet of the distribution to look for
similar problems. (This listing includes both 'Answered' and 'Solved'
questions.)

    >>> browser.open('http://launchpad.dev/ubuntu/+tickets')
    >>> browser.getLink('Answered').click()
    >>> print browser.title
    Answered questions for Ubuntu
    >>> browser.getControl(name='field.status').value
    ['Answered', 'Solved']
    >>> tickets = find_tag_by_id(browser.contents, 'ticket-listing')
    >>> for ticket in tickets.fetch('td', 'ticket'):
    ...     print ticket.first('a').renderContents()
    Play DVDs in Totem
    mailto: problem in webpage
    Installation of Java Runtime Environment for Mozilla

This report is also searchable. He's having a problem with Evolution, so
he enters 'Evolution' as a keyword and hits the search button.

    >>> browser.getControl(name='field.search_text').value = 'Evolution'
    >>> browser.getControl('Search').click()

    >>> print find_main_content(browser.contents).first('p').renderContents()
    There are no answered questions matching "Evolution" for Ubuntu.

=== My Questions ===

Sample Person remembers posting a question on mozilla-firefox. He uses
the 'My Questions' link on the distribution source package Answers facet
to list all the questions he ever made about that package.

He needs to login to access that page:

    >>> anon_browser.open(
    ...     'http://launchpad.dev/ubuntu/+source/mozilla-firefox/'
    ...     '+tickets')
    >>> anon_browser.getLink('My Questions').click()
    Traceback (most recent call last):
      ...
    Unauthorized...

    >>> user_browser.open(
    ...     'http://launchpad.dev/ubuntu/+source/mozilla-firefox/'
    ...     '+tickets')
    >>> user_browser.getLink('My Questions').click()
    >>> print user_browser.title
    Questions you asked about mozilla-firefox in ubuntu
    >>> tickets = find_tag_by_id(user_browser.contents, 'ticket-listing')
    >>> for ticket in tickets.fetch('td', 'ticket'):
    ...     print ticket.first('a').renderContents()
    mailto: problem in webpage
    Installation of Java Runtime Environment for Mozilla

His problem was about integrating his email client in firefox, so he
enters 'email client in firefox'

    >>> user_browser.getControl(name='field.search_text').value = (
    ...     'email client in firefox')

He also remembers that his question was answered, so he unselects the
other statuses and hits the search button.

    >>> user_browser.getControl('Open').selected = False
    >>> user_browser.getControl('Invalid').selected = False
    >>> user_browser.getControl('Search').click()

The exact question he was searching for is displayed!

    >>> tickets = find_tag_by_id(user_browser.contents, 'ticket-listing')
    >>> for ticket in tickets.fetch('td', 'ticket'):
    ...     print ticket.first('a').renderContents()
    mailto: problem in webpage

If the user didn't make any questions on the product, a message
informing him of this fact is displayed.

    >>> user_browser.open('http://launchpad.dev/gnomebaker/+tickets')
    >>> user_browser.getLink('My Questions').click()
    >>> print find_main_content(
    ...     user_browser.contents).first('p').renderContents()
    You didn't ask any questions about gnomebaker.

=== Need Attention ===

A user can often forget which questions need his attention. For
this purpose, there is a 'Need Attention' report which displays the
questions made by the user which require a reply. It also lists
the questions on which he provided an answer or requested for more
information and that are now back in the 'Open' state.

He needs to login to access that page:

    >>> anon_browser.open('http://launchpad.dev/distros/ubuntu/+tickets')
    >>> anon_browser.getLink('Need Attention').click()
    Traceback (most recent call last):
      ...
    Unauthorized...

    >>> user_browser.open('http://launchpad.dev/distros/ubuntu/+tickets')
    >>> user_browser.getLink('Need Attention').click()
    >>> print user_browser.title
    Questions needing your attention for Ubuntu
    >>> tickets = find_tag_by_id(user_browser.contents, 'ticket-listing')
    >>> for ticket in tickets.fetch('td', 'ticket'):
    ...     print ticket.first('a').renderContents()
    Play DVDs in Totem
    Installation of Java Runtime Environment for Mozilla

Like all other report, this one is searchable:

    >>> user_browser.getControl(name='field.search_text').value = 'evolution'
    >>> user_browser.getControl('Search').click()
    >>> print user_browser.title
    Questions matching "evolution" needing your attention for Ubuntu
    >>> print find_main_content(
    ...     user_browser.contents).first('p').renderContents()
    No questions matching "evolution" need your attention for Ubuntu.

If there is no questions needing the user's attention, a message
informing him of this fact is displayed.

    >>> user_browser.open('http://launchpad.dev/products/gnomebaker/+tickets')
    >>> user_browser.getLink('Need Attention').click()
    >>> print find_main_content(
    ...     user_browser.contents).first('p').renderContents()
    No questions need your attention for gnomebaker.

== Person Reports ==

The Answers facet on on person also contains various searchable
listings.

The default listing on the person Answers facet lists all the questions
that the person was involved with. This includes questions that
the person asked, answered, is assigned to, is subscribed to, or
commented on.

    >>> browser.open('http://launchpad.dev/~name16')
    >>> browser.getLink('Answers').click()
    >>> print browser.title
    Questions involving Foo Bar

    >>> tickets = find_tag_by_id(browser.contents, 'ticket-listing')
    >>> for ticket in tickets.fetch('td', 'ticket'):
    ...     print ticket.first('a').renderContents()
    Continue playing after shutdown
    Play DVDs in Totem
    mailto: problem in webpage
    Installation of Java Runtime Environment for Mozilla
    Slow system

That listing is batched when there are many questions:

    >>> browser.getLink('Next')
    <Link...>

The listing contains a 'In' column that shows the context where the
questions was made.

    >>> for ticket in tickets.fetch('td', 'ticket-target'):
    ...     print ticket.first('a').renderContents()
    Ubuntu
    Ubuntu
    mozilla-firefox in ubuntu
    mozilla-firefox in ubuntu
    Ubuntu

These contexts are links to the context question listing.

    >>> browser.getLink('mozilla-firefox in ubuntu').click()
    >>> print browser.title
    Questions for mozilla-firefox in ubuntu

The listing is searchable and can restrict also the list of displayed
questions to a particular status:

    # goBack() doesn't work.
    >>> browser.open('http://launchpad.dev/~name16/+tickets')
    >>> browser.getControl(name='field.search_text').value = 'Firefox'
    >>> browser.getControl(name='field.status').value = ['Solved', 'Invalid']
    >>> browser.getControl('Search').click()
    >>> tickets = find_tag_by_id(browser.contents, 'ticket-listing')
    >>> for ticket in tickets.fetch('td', 'ticket'):
    ...     print ticket.first('a').renderContents()
    Firefox is slow and consumes too much RAM
    mailto: problem in webpage

The actions menu contains links to listing that contain only a specific
type of involvement.

=== Assigned ===

The assigned report only lists the questions to which the person is
assigned.

    >>> browser.getLink('Assigned').click()
    >>> print browser.title
    Questions assigned to Foo Bar
    >>> print find_main_content(browser.contents).first('p').renderContents()
    No questions assigned to Foo Bar found with the requested statuses.

=== Answered ===

The 'Answered' link displays all the questions where the person is the
answerer.

    >>> browser.getLink('Answered').click()
    >>> print browser.title
    Questions answered by Foo Bar
    >>> tickets = find_tag_by_id(browser.contents, 'ticket-listing')
    >>> for ticket in tickets.fetch('td', 'ticket'):
    ...     print ticket.first('a').renderContents()
    mailto: problem in webpage

=== Commented ===

The report available under the 'Commented' link displays all the
questions commented on by the person.

    >>> browser.getLink('Commented').click()
    >>> print browser.title
    Questions commented on by Foo Bar
    >>> tickets = find_tag_by_id(browser.contents, 'ticket-listing')
    >>> for ticket in tickets.fetch('td', 'ticket'):
    ...     print ticket.first('a').renderContents()
    Continue playing after shutdown
    Play DVDs in Totem
    mailto: problem in webpage
    Installation of Java Runtime Environment for Mozilla
    Newly installed plug-in doesn't seem to be used

=== Asked ===

The 'Asked' link displays a listing containing all the questions
asked by the person.

    >>> browser.getLink('Asked').click()
    >>> print browser.title
    Questions asked by Foo Bar
    >>> tickets = find_tag_by_id(browser.contents, 'ticket-listing')
    >>> for ticket in tickets.fetch('td', 'ticket'):
    ...     print ticket.first('a').renderContents()
    Slow system
    Firefox loses focus and gets stuck

=== Need Attention ===

The 'Need Attention' link displays all the questions that need
the attention of that person.

    >>> browser.getLink('Need Attention').click()
    >>> print browser.title
    Questions needing Foo Bar attention
    >>> tickets = find_tag_by_id(browser.contents, 'ticket-listing')
    >>> for ticket in tickets.fetch('td', 'ticket'):
    ...     print ticket.first('a').renderContents()
    Continue playing after shutdown
    Slow system

=== Subscribed ===

Foo Bar can find all the questions to which he is subscribed by
visiting the 'Subscribed' link in the 'Answers' facet.

    >>> browser.getLink('Subscribed').click()
    >>> print browser.title
    Questions Foo Bar is subscribed to
    >>> tickets = find_tag_by_id(browser.contents, 'ticket-listing')
    >>> for ticket in tickets.fetch('td', 'ticket'):
    ...     print ticket.first('a').renderContents()
    Slow system

== Searching All Questions ==

It is possible from the Answer Tracker front page to search among all
questions ever filed on Launchpad.

    >>> browser.open('http://answers.launchpad.dev/')
    >>> browser.getControl(name='field.search_text').value = 'firefox'
    >>> browser.getControl('Search').click()

    >>> print browser.title
    Questions matching "firefox"

    >>> print browser.url
    http://answers.launchpad.dev/support/+tickets?...

The results are displayed in a format similar to the Person reports:
there is an 'In' column displaying where the questions were filed.

    >>> tickets = find_tag_by_id(browser.contents, 'ticket-listing')
    >>> for ticket in tickets.tbody.fetch('tr'):
    ...     ticket_title = ticket.first(
    ...         'td', 'ticket').first('a').renderContents()
    ...     ticket_target = ticket.first(
    ...         'td', 'ticket-target').first('a').renderContents()
    ...     print ticket_title, ticket_target
    Firefox loses focus and gets stuck  Mozilla Firefox
    Firefox cannot render Bank Site     Mozilla Firefox
    mailto: problem in webpage          mozilla-firefox in ubuntu
    Newly installed plug-in doesn't seem to be used Mozilla Firefox
    Problem showing the SVG demo on W3C site    Mozilla Firefox

Only the default set of statuses is searched:

    >>> browser.getControl(name='field.status').value
    ['Open', 'Needs information', 'Answered', 'Solved']

When no results are found, a message informs the user of this fact:

    >>> browser.getControl(name='field.status').displayValue = ['Expired']
    >>> browser.getControl('Search').click()

    >>> print find_main_content(
    ...     browser.contents).first('p').renderContents()
    There are no questions matching "firefox" with the requested statuses.
