Most of the time, web service requests come through the web service
layer. But there are times when a request that came through the
website neeeds to be treated as a web service request. It's easy to
adapt a normal request into an IWebServiceLayer request.

    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest
    >>> from canonical.lazr.interfaces.rest import WebServiceLayer

    >>> website_request = LaunchpadTestRequest(
    ...     SERVER_URL="http://launchpad.dev/")
    >>> request = WebServiceLayer(website_request)
    >>> request
    <canonical.launchpad.webapp.servers.WebServiceClientRequest ...>
    >>> request.getApplicationURL()
    'http://launchpad.dev/api/beta'

This works for HTTPS requests as well as HTTP requests:

    >>> website_request = LaunchpadTestRequest(
    ...     SERVER_URL="https://launchpad.dev/")
    >>> request = WebServiceLayer(website_request)
    >>> request
    <canonical.launchpad.webapp.servers.WebServiceClientRequest ...>
    >>> request.getApplicationURL()
    'https://launchpad.dev/api/beta'

Objects can be stored in the template cache so that their JSON
representations can be included in the template. An object can be
stored in the template cache's 'objects' dict or its 'links' dict.

    >>> from canonical.lazr.interfaces.rest import IJSONRequestCache
    >>> cache = IJSONRequestCache(website_request)

    >>> cache.objects['object1'] = 'foo'
    >>> cache.objects['object2'] = 'bar'
    >>> for key in cache.objects:
    ...     print "%s: %s" % (key, cache.objects[key])
    object1: foo
    object2: bar

    >>> cache.links['objectA'] = 'foo'
    >>> cache.links['objectB'] = 'bar'
    >>> for key in cache.links:
    ...     print "%s: %s" % (key, cache.links[key])
    objectA: foo
    objectB: bar
