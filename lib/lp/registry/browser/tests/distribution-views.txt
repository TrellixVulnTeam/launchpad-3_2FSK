Distribution Pages
==================

Lists of distribution mirrors
-----------------------------

There are several pages listing the mirrors of a distribution, and they all
share a common base class which is responsible for ordering the mirrors by
country.

    >>> from zope.component import getMultiAdapter, getUtility
    >>> from canonical.launchpad.interfaces import IDistributionSet
    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest

    >>> login("foo.bar@canonical.com")

    >>> ubuntu = getUtility(IDistributionSet).getByName("ubuntu")
    >>> ubuntu_cdmirrors = getMultiAdapter(
    ...     (ubuntu, LaunchpadTestRequest()), name="+cdmirrors")

    >>> country_and_mirrors = ubuntu_cdmirrors.getMirrorsGroupedByCountry()
    >>> for country_and_mirror in country_and_mirrors:
    ...     country = country_and_mirror['country']
    ...     mirrors = country_and_mirror['mirrors']
    ...     for mirror in mirrors:
    ...         assert mirror.country.name == country
    ...     print "%s: %d mirror(s)" % (country, len(mirrors))
    France: 2 mirror(s)
    Germany: 1 mirror(s)
    United Kingdom: 1 mirror(s)


== DistributionArchivesView ==

The DistributionArchivesView includes an archive_list property that
returns a list of copy archives only for the given distribution (because
only copy archives are exposed through the distribution/+archives UI):

    >>> distro_archives_view = create_initialized_view(ubuntu,
    ...                                                name="+archives")
    >>> archives = distro_archives_view.archive_list
    >>> archives.count()
    0

And then after creating a copy archive for Ubuntu:

    >>> copy_location = factory.makeCopyArchiveLocation(
    ...     distribution=ubuntu,
    ...     name="intrepid-security-rebuild")
    >>> archives = distro_archives_view.archive_list
    >>> archives.count()
    1


DistributionPackageSearchView
=============================

The DistributionPackageSearchView adds some functionality to the base
PackageSearchView class, specifically for making the results more useful.

By default the view will be initialized as a binary-package-name search,
and the search_by_binary_name property is used to determine the search
type (in templates):

    >>> distro_pkg_search_view = create_initialized_view(
    ...     ubuntu, name="+search")
    >>> distro_pkg_search_view.search_by_binary_name
    True

But users can specify that the search should be on source-package-names
instead:

    >>> distro_pkg_search_view = create_initialized_view(
    ...     ubuntu, name="+search", form={'search_type': 'source'})
    >>> distro_pkg_search_view.search_by_binary_name
    False

Unless the distribution being searched does not support binaries, in which
cases it will always be on source:

    >>> debian = factory.makeDistribution(
    ...     name='mydebian', displayname='debian-without-binaries')

    >>> debian.has_published_binaries
    False

    >>> distro_pkg_search_view = create_initialized_view(
    ...     debian, name="+search", form={'search_type': 'binary'})
    >>> distro_pkg_search_view.search_by_binary_name
    False


=== Exact matches ===

The DistributionPackageSearchView view has an exact_matches property
and a has_exact_matches property which are used to find packages that
match exactly on the binary/source name.

In the following example, there is one source package that has a binary
with the exact name 'mozilla-firefox':

    >>> distro_pkg_search_view = create_initialized_view(
    ...     ubuntu, name="+search", form={'text': 'mozilla-firefox'})
    >>> distro_pkg_search_view.has_exact_matches
    True
    >>> for package in distro_pkg_search_view.exact_matches:
    ...     print package.name
    mozilla-firefox

The DistributionPackageSearchView also has a helper property to
help templates print the list of distroseries that an exactly-matched
package is available in:

    >>> distro_pkg_search_view.distroseries_names
    {u'mozilla-firefox': u'warty'}
    >>> distro_pkg_search_view = create_initialized_view(
    ...     ubuntu, name="+search", form={'text': 'foobar'})
    >>> distro_pkg_search_view.distroseries_names
    {u'foobar': ''}

Another helper on the DistributionPackageSearchView is the
matching_binary_names property which can be used by templates to get
a list of the binary names that matched the search term for each
package:

    >>> distro_pkg_search_view = create_initialized_view(
    ...     ubuntu, name="+search", form={'text': 'moz'})
    >>> distro_pkg_search_view.matching_binary_names
    {u'mozilla-firefox': u'mozilla-firefox'}


Substring matches
=================

The DistributionPackageSearchView includes substring matches by default.

    >>> search_results = distro_pkg_search_view.search_results
    >>> search_results.count()
    1

    >>> for pkg in search_results:
    ...     print pkg.name
    mozilla-firefox
