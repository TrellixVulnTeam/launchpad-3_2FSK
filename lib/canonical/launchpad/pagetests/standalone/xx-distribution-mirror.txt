  First of all we'll create a new mirror for the Ubuntu distribution...

  >>> browser.addHeader('Authorization', 'Basic test@canonical.com:test')
  >>> browser.open('http://localhost:9000/distros/ubuntu/+newmirror')

  ...but every mirror must have at least one of HTTP, FTP or Rsync URL, and
  the form will raise an error message if this is not provided by the user.

  >>> browser.getControl(name='field.name').value = 'mymirror'
  >>> browser.getControl('Link Speed').value = ['1 Mbps']
  >>> browser.getControl('Location (Country)').value =  ['9']
  >>> browser.getControl('Content').value = ['Archive']
  >>> browser.getControl('Continue').click()

  >>> message = 'All mirrors require at least one URL (HTTP, FTP or Rsync)'
  >>> message in browser.contents
  True

  If we try to register the mirror with the same name of a existing one we
  should get a nice error message

  >>> browser.getControl(name='field.name').value = 'archive-mirror'
  >>> browser.getControl('Continue').click()

  >>> message = "is already in use by another distribution mirror."
  >>> message in browser.contents
  True

  If we try to register the mirror using the same HTTP URL of a existing one,
  we should also get a nice error message

  >>> browser.getControl(name='field.name').value = 'mymirror'
  >>> http_url = 'http://localhost:11375/invalid-mirror' 
  >>> browser.getControl('HTTP URL').value = http_url
  >>> browser.getControl('Continue').click()

  >>> message = (
  ...   '%s is already registered by another distribution mirror.' % http_url)
  >>> message in browser.contents
  True

  We'll have to add some URLs to sample data to test the validator for FTP and
  Rsync URLs.

  >>> from zope.component import getUtility
  >>> from canonical.database.sqlbase import flush_database_updates
  >>> from canonical.launchpad.interfaces import IDistributionMirrorSet
  >>> from canonical.launchpad.ftests import login, logout
  >>> login("mark@hbd.com")
  >>> mirrorset = getUtility(IDistributionMirrorSet)
  >>> example_mirror = mirrorset.getByName('invalid-mirror')
  >>> ftp_url = 'ftp://localhost:11375/invalid-mirror'
  >>> example_mirror.ftp_base_url = ftp_url
  >>> rsync_url = 'rsync://localhost:11375/invalid-mirror'
  >>> example_mirror.rsync_base_url = rsync_url
  >>> flush_database_updates()
  >>> logout()

  And now we test the validator for the FTP URL

  >>> browser.getControl('FTP URL').value = ftp_url
  >>> browser.getControl('Continue').click()

  >>> message = (
  ...   '%s is already registered by another distribution mirror.' % ftp_url)
  >>> message in browser.contents
  True

  And for the Rsync URL

  >>> browser.getControl('Rsync URL').value = rsync_url
  >>> browser.getControl('Continue').click()

  >>> message = (
  ...   '%s is already registered by another distribution mirror.' % rsync_url)
  >>> message in browser.contents
  True

  Now we provide everything that is needed...

  >>> browser.getControl(name='field.name').value = 'mymirror'
  >>> browser.getControl('Link Speed').value = ['1 Mbps']
  >>> browser.getControl('Location (Country)').value =  ['9']
  >>> browser.getControl('Content').value = ['Archive']
  >>> browser.getControl('HTTP URL').value = 'http://my.mirror.com/pub'
  >>> browser.getControl('FTP URL').value = ''
  >>> browser.getControl('Rsync URL').value = ''
  >>> browser.getControl('Continue').click()

  ...and the mirror is created just fine.

  >>> browser.url
  'http://localhost:9000/distros/ubuntu/+mirror/mymirror'

  But it can't be probed before it's marked as official by one of the
  distribution owners.

  >>> 'mirror "mymirror"' in browser.contents
  True
  >>> "This mirror can't be verified" in browser.contents
  True

  Now the mirror's owner mark it as enabled and as a candidate for being
  official.

  >>> browser.getLink('Edit Details').click()
  >>> browser.url
  'http://localhost:9000/distros/ubuntu/+mirror/mymirror/+edit'

  >>> browser.getControl('Enabled').selected = True
  >>> browser.getControl('Official Candidate').selected = True
  >>> browser.getControl('Change').click()

  >>> browser.url
  'http://localhost:9000/distros/ubuntu/+mirror/mymirror'


  But that's not enough to make a mirror official, as we can see in the
  details portlet.

  >>> 'Not Official' in browser.contents
  True

  To make a mirror official, one has to go to the +admin page, and the mirror
  owner found out that, so he'll try to make his mirror official by manually
  entering the URL in his web browser, but he won't have access to that page.

  >>> browser.open(
  ...   'http://localhost:9000/distros/ubuntu/+mirror/mymirror/+admin')
  Traceback (most recent call last):
  ...
  Unauthorized...

  Now one of the mirror administrators goes and make this an official mirror.

  # XXX: matsubara 2006-05-18: We need to reset the Browser object to reset the
  # headers.
  # https://launchpad.net/products/launchpad/+bug/45226

  >>> from zope.testbrowser import Browser
  >>> browser = Browser()
  >>> browser.handleErrors = False

  >>> browser.addHeader('Authorization', 'Basic mark@hbd.com:test')
  >>> browser.open(
  ...   'http://localhost:9000/distros/ubuntu/+mirror/mymirror/+admin')

  >>> browser.getControl('Official Approved').selected = True 
  >>> browser.getControl('Change').click()

  >>> browser.url
  'http://localhost:9000/distros/ubuntu/+mirror/mymirror'


  And in the mirror's main page we can now see that it's an official mirror.

  >>> 'Official Ubuntu Linux Mirror' in browser.contents
  True

