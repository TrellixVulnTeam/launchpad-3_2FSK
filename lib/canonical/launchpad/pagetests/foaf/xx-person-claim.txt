
Alexander Limi was browsing through Launchpad and found a page for
himself, even though he has never used Launchpad.

    >>> browser.open('http://launchpad.dev/~limi')
    >>> browser.url
    'http://launchpad.dev/~limi'

He was wondering who created that when he saw a very proeminent link, saying
'Are you Alexander Limi?'.  He promptly clicked on it.

    >>> import re
    >>> soup = find_main_content(browser.contents)
    >>> print re.sub(r'\s+', ' ', soup('h1')[0].findNext('p').renderContents())
    Alexander Limi does not use Launchpad. This page was created...
    ...2005-06-06...<strong>when importing bugs from 
    http://bugzilla.ubuntu.com/</strong>.

    >>> browser.getLink("Are you Alexander Limi?").click()

Clicking on that link brought him to a page where he can claim that Launchpad
profile.

    >>> browser.url
    'http://launchpad.dev/%7Elimi/+claim'

He first tries it with an old email address he had, but we tell him that the
given email address is not associated with that profile.

    >>> browser.getControl('Email address').value = 'non@existent.org'
    >>> browser.getControl('E-mail Me').click()
    >>> soup = find_main_content(browser.contents)
    >>> for tag in soup('div', 'message'):
    ...     print tag.renderContents()
    We couldn't find this email address. Please try another one that could
    possibly be associated with this profile. Note that this profile's name
    (limi) was generated based on the email address it's associated with.

Then he tries with Sample Person's email address.

    >>> browser.getControl('Email address').value = 'test@canonical.com'
    >>> browser.getControl('E-mail Me').click()
    >>> soup = find_main_content(browser.contents)
    >>> for tag in soup('div', 'message'):
    ...     print tag.renderContents()
    This email address is associated with yet another Launchpad profile, which
    you seem to have used at some point. If that's the case, you can <a
    href="/people/+requestmerge?field.dupeaccount=limi">combine this profile
    with the other one</a> (you'll have to log in with the other profile
    first, though). If that's not the case, please try with a different email
    address.

And once again he tries with an email address he found in Launchpad, but
this one is associated with an unvalidated profile.

    >>> browser.getControl('Email address').value = 'morten@wtf.dk'
    >>> browser.getControl('E-mail Me').click()
    >>> soup = find_main_content(browser.contents)
    >>> for tag in soup('div', 'message'):
    ...     print tag.renderContents()
    Although this email address is not associated with this profile, it's
    associated with yet another one. You can <a
    href="http://launchpad.dev/~morten/+claim">claim that other
    profile</a> and then later <a href="/people/+requestmerge">combine</a>
    both of them into a single one.

Now he finally remembered his email address.

    >>> browser.getControl('Email address').value = 'limi@plone.org'
    >>> browser.getControl('E-mail Me').click()

    >>> from canonical.launchpad.mail import stub
    >>> from canonical.launchpad.ftests.logintoken import (
    ...     get_token_url_from_email)
    >>> from_addr, to_addr, msg = stub.test_emails.pop()
    >>> to_addr
    ['limi@plone.org']
    >>> token_url = get_token_url_from_email(msg)
    >>> token_url
    'http://launchpad.dev/token/...'

    >>> browser.open(token_url)
    >>> browser.url == "%s/+claimprofile" % token_url
    True

    >>> browser.getControl(name='field.password').value = 'foo'
    >>> browser.getControl(name='field.password_dupe').value = 'foo'
    >>> browser.getControl('Continue').click()

    >>> browser.url
    'http://launchpad.dev/~limi'
    >>> soup = find_main_content(browser.contents)
    >>> for tag in soup('div', 'informational message'):
    ...     print tag.renderContents()
    Profile claimed successfully


It's also possible that a person tries to claim an account that has a
preferred email but no password, like some accounts imported from Ubuntu's
bugzilla. Although these accounts are not considered valid (that's why they
can be claimed) they /do/ have a preferred email and we need to handle this.

    (To see spiv's email we must be logged in, so we'll use user_browser)
    >>> user_browser.open('http://launchpad.dev/~spiv')
    >>> print user_browser.contents
    <...
    ...<a...Are you Andrew Bennetts?</a>...
    ...Confirmed e-mail addresses...
    ...andrew.bennetts@ubuntulinux.com...
    ...

    >>> anon_browser.open('http://launchpad.dev/~spiv')
    >>> anon_browser.getLink("Are you Andrew Bennetts?").click()
    >>> anon_browser.url
    'http://launchpad.dev/%7Espiv/+claim'

    >>> anon_browser.getControl('Email address').value = (
    ...     'andrew.bennetts@ubuntulinux.com')
    >>> anon_browser.getControl('E-mail Me').click()

    >>> from_addr, to_addr, msg = stub.test_emails.pop()
    >>> to_addr
    ['andrew.bennetts@ubuntulinux.com']
    >>> token_url = get_token_url_from_email(msg)
    >>> token_url
    'http://launchpad.dev/token/...'

    >>> anon_browser.open(token_url)
    >>> anon_browser.url == "%s/+claimprofile" % token_url
    True

    >>> anon_browser.getControl(name='field.password').value = 'foo'
    >>> anon_browser.getControl(name='field.password_dupe').value = 'foo'
    >>> anon_browser.getControl('Continue').click()

    >>> anon_browser.url
    'http://launchpad.dev/~spiv'
    >>> soup = find_main_content(anon_browser.contents)
    >>> for tag in soup('div', 'informational message'):
    ...     print tag.renderContents()
    Profile claimed successfully

