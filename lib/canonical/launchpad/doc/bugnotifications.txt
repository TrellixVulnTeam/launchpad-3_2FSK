Malone Bug Notifications
========================

What is a bug notification?
---------------------------

A bug notification gets added when something interesting happens to the
bug. It's stored in a a table, and later on a cronscript constructs an
email and sends the notification to the bug's subscribers.

When do bug notifications get added?
-----------------------------------

Not *every* change on a bug causes a notification to be added. This
section will give a rundown of the things that do cause notifications to
be sent. To start with, let's login:

    >>> login("test@canonical.com")

Here are the things that cause bug notifications to be add, and what
those notifications look like.

1. Filing a new bug

    >>> from zope.event import notify
    >>> from zope.publisher.browser import TestRequest
    >>> from canonical.launchpad.event.sqlobjectevent import (
    ...     SQLObjectModifiedEvent, SQLObjectToBeModifiedEvent,
    ...     SQLObjectCreatedEvent)
    >>> from canonical.launchpad.interfaces import (
    ...     IProductSet, IPersonSet, IDistributionSet, IDistroReleaseSet,
    ...     ISourcePackageNameSet, IBugSet)

    >>> bug_submitter = getUtility(IPersonSet).get(12)
    >>> firefox = getUtility(IProductSet).get(4)

    >>> firefox_crashes = getUtility(IBugSet).createBug(
    ...     product=firefox, title="firefox crashes all the time",
    ...     comment="this is a comment", owner=bug_submitter, 
    ...     summary="some summary")
    >>> notify(SQLObjectCreatedEvent(firefox_crashes))

    >>> from canonical.launchpad.database import BugNotification
    >>> latest_notification = BugNotification.selectFirst(orderBy='-id')
    >>> print latest_notification.message.owner.displayname
    Sample Person

    >>> latest_notification.is_comment
    True
    >>> print latest_notification.message.text_contents
    this is a comment

2. Editing a bug

    >>> from zope.interface import implements
    >>> from canonical.launchpad.interfaces import IBug

    >>> class MockObject(object):
    ...     implements(IBug)

    >>> bug_before_modification = MockObject()
    >>> for name in IBug.names(all=True):
    ...     setattr(bug_before_modification, name,
    ...             getattr(firefox_crashes, name))
    >>> firefox_crashes.summary = "a new summary"
    >>> firefox_crashes_modified = SQLObjectModifiedEvent(
    ...     firefox_crashes, bug_before_modification,
    ...     ["summary"])
    >>> notify(firefox_crashes_modified)

    >>> latest_notification = BugNotification.selectFirst(orderBy='-id')
    >>> print latest_notification.message.owner.displayname
    Sample Person

    >>> latest_notification.is_comment
    False
    >>> print latest_notification.message.text_contents
    ** Short description changed:
    ...

3. Filing a new task on an existing bug

There are three kinds of tasks that can be added to an existing
bug. Let's take a look at each type.

  3.1 Distro Task

    A task that says this bug must be fixed in a certain distro. Because no
    specific release is specified, the developer will assume that the fix
    belongs in the current development release. For backporting a fix to a
    specific distro release, see 2.2.

    >>> from canonical.launchpad.interfaces import IBugTaskSet
    >>> debian = getUtility(IDistributionSet).get(3)
    >>> firefox_source = getUtility(ISourcePackageNameSet).get(1)
    >>> firefox_crashes_in_debian = getUtility(IBugTaskSet).createTask(
    ...     bug=firefox_crashes, distribution=debian,
    ...     sourcepackagename=firefox_source,
    ...     owner=bug_submitter)
    >>> notify(SQLObjectCreatedEvent(firefox_crashes_in_debian))

    >>> latest_notification = BugNotification.selectFirst(orderBy='-id')
    >>> print latest_notification.message.owner.displayname
    Sample Person

    >>> latest_notification.is_comment
    False
    >>> print latest_notification.message.text_contents
    ** Also affects: mozilla-firefox (Debian)
    ...

  3.2 Distro Release Task

    Similar to a distro task, except that a task filed on a specific distro
    release is meant to be used for backport fixes (e.g. for critical data
    loss or security bugs.) Tasks filed on specific distro releases are not
    listed in the more generic, distro-wide bug task listings.

    >>> sid = getUtility(IDistroReleaseSet).get(8)
    >>> firefox_crashes_in_sid = getUtility(IBugTaskSet).createTask(
    ...     bug=firefox_crashes, distrorelease=sid,
    ...     sourcepackagename=firefox_source, owner=bug_submitter)
    >>> notify(SQLObjectCreatedEvent(firefox_crashes_in_sid))

    >>> latest_notification = BugNotification.selectFirst(orderBy='-id')
    >>> print latest_notification.message.owner.displayname
    Sample Person

    >>> latest_notification.is_comment
    False
    >>> print latest_notification.message.text_contents
    ** Also affects: mozilla-firefox (Debian Sid)
    ...

  3.3 Upstream Task

    An upstream tasks notes that a bug needs to be fixed upstream. "Upstream"
    is a somewhat ambiguous term -- it can have different meanings in the eyes
    of an Ubuntu maintainer vs. a maintainer of a package from an Ubuntu
    derivative. At the moment, "upstream" means "the distro-agnostic place from
    which we procured a source tarball to create a source package for a distro."
    The common case will be that bugs filed in distros bubble up to upstream,
    and are fixed there then bubble back down (via patches) to the various
    distros via patches.

    >>> evolution = getUtility(IProductSet).get(5)
    >>> evolution_crashes_too = getUtility(IBugTaskSet).createTask(
    ...     bug=firefox_crashes, product=evolution, owner=bug_submitter)
    >>> notify(SQLObjectCreatedEvent(evolution_crashes_too))

    >>> latest_notification = BugNotification.selectFirst(orderBy='-id')
    >>> print latest_notification.message.owner.displayname
    Sample Person

    >>> latest_notification.is_comment
    False
    >>> print latest_notification.message.text_contents
    ** Also affects: evolution (upstream)
    ...


4. Commenting on a bug

    >>> from canonical.launchpad.interfaces import IBugMessageSet

    >>> bugmessageset = getUtility(IBugMessageSet)
    >>> current_user = getUtility(ILaunchBag).user
    >>> comment_on_firefox_crashes_in_debian = bugmessageset.createMessage(
    ...     subject="some title", content="just a test comment",
    ...     bug=firefox_crashes, owner=current_user)
    >>> notify(SQLObjectCreatedEvent(comment_on_firefox_crashes_in_debian))

    >>> latest_notification = BugNotification.selectFirst(orderBy='-id')
    >>> print latest_notification.message.owner.displayname
    Sample Person

    >>> latest_notification.is_comment
    True
    >>> print latest_notification.message.text_contents
    just a test comment

5. Editing a task.

Let's demonstrate a notification email where Sample Person marks a
task Fixed, and assigns himself to it.

    >>> from canonical.launchpad.interfaces import IDistroBugTask
    >>> from canonical.lp.dbschema import BugTaskStatus
    >>> from canonical.launchpad.helpers import Snapshot

    >>> bugtask_before_modification = Snapshot(
    ...     firefox_crashes_in_debian, providing=IDistroBugTask)
    >>> firefox_crashes_in_debian.status = BugTaskStatus.FIXRELEASED
    >>> firefox_crashes_in_debian.assignee = bug_submitter
    >>> debian_task_modified = SQLObjectModifiedEvent(
    ...     firefox_crashes_in_debian, bugtask_before_modification,
    ...     ["status", "assignee"])
    >>> notify(debian_task_modified)

    >>> latest_notification = BugNotification.selectFirst(orderBy='-id')
    >>> print latest_notification.message.owner.displayname
    Sample Person

    >>> latest_notification.is_comment
    False
    >>> print latest_notification.message.text_contents
    ** Changed in: mozilla-firefox (Debian)
    ...

6. Adding and editing a bug watch.

A bug watch can be added to a bug to watch the status of this bug in a
remote bug tracker. A notification is sent out to the bug notification
recipients when a bug watch is added to a bug. Let's demonstrate by
pretending we've just added a watch to a bug.

    >>> from canonical.launchpad.interfaces import IBugWatchSet
    >>> bugwatch = getUtility(IBugWatchSet).get(2)
    >>> bugwatch_added = SQLObjectCreatedEvent(bugwatch)
    >>> notify(bugwatch_added)

    >>> latest_notification = BugNotification.selectFirst(orderBy='-id')
    >>> print latest_notification.message.owner.displayname
    Sample Person

    >>> latest_notification.is_comment
    False
    >>> print latest_notification.message.text_contents
    ** Bug watch added: The Mozilla.org Bug Tracker #2000
    ...

If the bug watch is modified, a notification is sent out describing
the changes made:

    >>> bugwatch_before_modification = MockObject()
    >>> bugwatch_before_modification.bugtracker = bugwatch.bugtracker
    >>> bugwatch_before_modification.remotebug = bugwatch.remotebug
    >>> bugwatch_before_modification.url = bugwatch.url
    >>> bugwatch.remotebug = "2001"
    >>> bugwatch_modified = SQLObjectModifiedEvent(
    ...     object = bugwatch,
    ...     object_before_modification = bugwatch_before_modification,
    ...     edited_fields = ("remotebug"))

    >>> notify(bugwatch_modified)

    >>> latest_notification = BugNotification.selectFirst(orderBy='-id')
    >>> print latest_notification.message.owner.displayname
    Sample Person

    >>> latest_notification.is_comment
    False
    >>> print latest_notification.message.text_contents
    ** Bug watch removed: The Mozilla.org Bug Tracker #2000
    ...

7. Adding and editing a CVE ref.

Adding a CVE reference to a bug also causes a notification email to go
out to the bug notification recipient list. Let's create a CVE ref and
attach it to the firefox_crashes bug that we've been using throughout
this document:

    >>> from canonical.launchpad.interfaces import ICveSet
    >>> from canonical.lp.dbschema import CveStatus
    >>> cve = getUtility(ICveSet).new(sequence="2004-0276",
    ...     description="a brief CVE description", status=CveStatus.ENTRY)
    >>> from canonical.launchpad.database import Bug
    >>> bug = Bug.get(1)
    >>> bugcve = cve.linkBug(bug) # note this creates the event and notifies

    >>> latest_notification = BugNotification.selectFirst(orderBy='-id')
    >>> print latest_notification.message.owner.displayname
    Sample Person

    >>> latest_notification.is_comment
    False
    >>> print latest_notification.message.text_contents
    ** CVE added: http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=2004-0276

8. Adding an external URL reference.

When someone adds a web link to a bug report (e.g. to a related
mailing list discussion), an email is sent to the notification
recipients. We'll demonstrate by creating an external link and
publishing an object created event.

    >>> from canonical.launchpad.interfaces import IBugExternalRefSet
    >>> extref = getUtility(IBugExternalRefSet).createBugExternalRef(
    ...     bug=1, url="http://www.example.com", title="test",
    ...     owner=12)
    >>> extref_added = SQLObjectCreatedEvent(extref)
    >>> notify(extref_added)

    >>> latest_notification = BugNotification.selectFirst(orderBy='-id')
    >>> print latest_notification.message.owner.displayname
    Sample Person

    >>> latest_notification.is_comment
    False
    >>> print latest_notification.message.text_contents
    ** Web link added: http://www.example.com

When a link is edited, the notification will look as follows:

    >>> extref_before_modification = MockObject()
    >>> extref_before_modification.url = extref.url
    >>> extref_before_modification.title = extref.title
    >>> extref.url = "http://www.example.com/somewhere.html"

    >>> extref_changed = SQLObjectModifiedEvent(
    ...     object_before_modification=extref_before_modification,
    ...     object=extref,
    ...     edited_fields=("url",))
    >>> notify(extref_changed)

    >>> latest_notification = BugNotification.selectFirst(orderBy='-id')
    >>> print latest_notification.message.owner.displayname
    Sample Person

    >>> latest_notification.is_comment
    False
    >>> print latest_notification.message.text_contents
    ** Web link removed: http://www.example.com
    <BLANKLINE>
    ** Web link added: http://www.example.com/somewhere.html

9. Marking a bug as a duplicate

When someone marks a bug as a duplicate two emails are sent. One to the
duplicate bug's subscribers, telling that the bug has been marked a
duplicate, and one email to the subscribers of the bug that the duplicate
bug is a duplicate of, telling which bug has been marked as a
duplicate.

    >>> from canonical.launchpad.helpers import Snapshot
    >>> bug_one = getUtility(IBugSet).get(1)
    >>> bug_two = getUtility(IBugSet).get(2)
    >>> bug_two_unmodified = Snapshot(bug_two, providing=IBug)
    >>> bug_two.duplicateof = bug_one
    >>> marked_duplicate = SQLObjectModifiedEvent(
    ...     bug_two, bug_two_unmodified, edited_fields=['duplicateof'])
    >>> notify(marked_duplicate)

    >>> latest_notification = BugNotification.selectFirst(orderBy='-id')
    >>> print latest_notification.message.owner.displayname
    Sample Person

    >>> latest_notification.is_comment
    False
    >>> latest_notification.bug.id
    1
    >>> print latest_notification.message.text_contents
    ** Bug 2 has been marked a duplicate of this bug

    >>> latest_notification = BugNotification.select(orderBy='-id')[1]
    >>> print latest_notification.message.owner.displayname
    Sample Person

    >>> latest_notification.is_comment
    False
    >>> latest_notification.bug.id
    2
    >>> print latest_notification.message.text_contents
    ** This bug has been marked a duplicate of bug 1
       Firefox does not support SVG

Now we change the target of a bug that's already marked as a dupe and
check if the correct notification message is sent.

    >>> bug_six = getUtility(IBugSet).get(6)
    >>> bug_three = getUtility(IBugSet).get(3)
    >>> bug_six_unmodified = Snapshot(bug_six, providing=IBug)
    >>> bug_six.duplicateof = bug_three
    >>> marked_duplicate = SQLObjectModifiedEvent(
    ...     bug_six, bug_six_unmodified, edited_fields=['duplicateof'])
    >>> notify(marked_duplicate)

    >>> latest_notification = BugNotification.select(orderBy='-id')[1]
    >>> print latest_notification.message.owner.displayname
    Sample Person

    >>> latest_notification.is_comment
    False
    >>> latest_notification.bug.id
    6
    >>> print latest_notification.message.text_contents
    ** This bug is no longer a duplicate of bug 5
       Firefox install instructions should be complete
    <BLANKLINE>
    ** This bug has been marked a duplicate of bug 3
       Bug Title Test

    >>> latest_notification = BugNotification.selectFirst(orderBy='-id')
    >>> print latest_notification.message.owner.displayname
    Sample Person

    >>> latest_notification.is_comment
    False
    >>> latest_notification.bug.id
    3
    >>> print latest_notification.message.text_contents
    ** Bug 6 has been marked a duplicate of this bug

Now we unduplicate the above bug and check if the correct notification message is sent.

    >>> bug_six = getUtility(IBugSet).get(6)
    >>> bug_six_unmodified = Snapshot(bug_six, providing=IBug)
    >>> bug_six.duplicateof = None
    >>> marked_duplicate = SQLObjectModifiedEvent(
    ...     bug_six, bug_six_unmodified, edited_fields=['duplicateof'])
    >>> notify(marked_duplicate)

    >>> latest_notification = BugNotification.selectFirst(orderBy='-id')
    >>> print latest_notification.message.owner.displayname
    Sample Person

    >>> latest_notification.is_comment
    False
    >>> latest_notification.bug.id
    6
    >>> print latest_notification.message.text_contents
    ** This bug is no longer a duplicate of bug 3
       Bug Title Test
