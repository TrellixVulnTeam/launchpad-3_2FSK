Introduction
============

A user can "subscribe" to a bug report to get email notifications when
changes are made to the report.

Accessing Bug Subscriber Lists
==============================

Sometimes you'll want to know which people are subscribed to a bug. For
example, you might want to send out a notification email to everyone that is
Cc'd on a bug when something changes. For the purposes of this document, let's
pretend we're logged in as Foo Bar:

    >>> from canonical.launchpad.ftests import login
    >>> login("foo.bar@canonical.com")

To get the set of subscriptions to a bug, you can access the
IBug.subscriptions attribute:

    >>> from canonical.launchpad.interfaces import IBugSet
    >>> from zope.component import getUtility
    >>> bugset = getUtility(IBugSet)
    >>> bug = bugset.get(1)
    >>> bug.subscriptions.count()
    2

This is slightly misleading though, because this only gives us the
list of explicit subscriptions on the bug, when in fact, there are
special cases where one can be "implicitly" subscribed to a bug.

Direct vs. Indirect Subscriptions
---------------------------------

A direct subscription has a row in the BugSubscription table. An
indirect subscription does not. For example, the bug reporter is
*directly* subscribed to the bug report; a bug contact is indirectly
subscribed.

Indirect subscriptions are particularly useful for some of the "roles"
associated with a bug, like bug contacts. Because the subscription is
indirect--looked up at bugmail delivery time--new bug contacts
automatically start getting all the relevant bugmail. Users that choose
to no longer be bug contacts automatically stop getting such mail.

Let's create a new bug to demonstrate how direct and indirect
subscriptions work.

    >>> from canonical.launchpad.interfaces import (
    ...     IDistributionSet, ILaunchBag)
    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> ubuntu = getUtility(IDistributionSet).get(1)
    >>> personset = getUtility(IPersonSet)

    >>> linux_source = ubuntu.getSourcePackage("linux-source-2.6.15")
    >>> linux_source.bugcontacts
    []
    >>> print linux_source.distribution.bugcontact
    None

    >>> foobar = getUtility(ILaunchBag).user
    >>> print foobar.name
    name16

    >>> linux_source_bug = linux_source.createBug(
    ...     title="a bug to test subscriptions",
    ...     comment="test", owner=foobar)

The list of direct subscribers to a bug is accessed via
IBug.direct_subscribers.

    >>> sorted(person.name for person in linux_source_bug.direct_subscribers)
    [u'name16']

    >>> sabdfl = personset.get(1)
    >>> print sabdfl.name
    sabdfl

    >>> linux_source_bug.subscribe(sabdfl)
    <BugSubscription ...>

    >>> sorted(person.name for person in linux_source_bug.direct_subscribers)
    [u'name16', u'sabdfl']

The list of indirect subscribers is accessed via
IBug.indirect_subscribers.

    >>> sorted(
    ...     person.name for person in linux_source_bug.indirect_subscribers)
    []

Indirect subscribers can be:

1. Assignees

    >>> sample_person = personset.get(12)
    >>> print sample_person.name
    name12

    >>> linux_source_bug.bugtasks[0].transitionToAssignee(sample_person)

    >>> sorted(
    ...     person.name for person in linux_source_bug.indirect_subscribers)
    [u'name12']

2. Bug contacts

    >>> mr_no_privs = personset.get(52)

    >>> print mr_no_privs.name
    no-priv

    >>> linux_source.addBugContact(mr_no_privs)

    >>> sorted(pbc.bugcontact.name for pbc in linux_source.bugcontacts)
    [u'no-priv']

    >>> sorted(
    ...     person.name for person in linux_source_bug.indirect_subscribers)
    [u'name12', u'no-priv']

    >>> ubuntu_team = personset.get(17)
    >>> print ubuntu_team.name
    ubuntu-team

    >>> linux_source.distribution.bugcontact = ubuntu_team

    >>> sorted(
    ...     person.name for person in linux_source_bug.indirect_subscribers)
    [u'name12', u'no-priv', u'ubuntu-team']

(Adding a product bugtask to demonstrate that the upstream bug contact
is also an indirect subscriber.)

    >>> from canonical.launchpad.interfaces import IBugTaskSet, IProductSet
    >>> firefox = getUtility(IProductSet).get(4)

    >>> getUtility(IBugTaskSet).createTask(
    ...     product=firefox, bug=linux_source_bug,
    ...     owner=foobar)
    <BugTask ...>

    >>> lifeless = personset.get(2)
    >>> print lifeless.name
    lifeless
    >>> firefox.bugcontact = lifeless

    >>> sorted(
    ...     person.name for person in linux_source_bug.indirect_subscribers)
    [u'lifeless', u'name12', u'no-priv', u'ubuntu-team']

If there were no upstream product bug contact, the product owner would
be used instead.

    >>> firefox.bugcontact = None

    >>> sorted(
    ...     person.name for person in linux_source_bug.indirect_subscribers)
    [u'name12', u'no-priv', u'ubuntu-team']

    >>> previous_owner = firefox.owner

    >>> firefox.owner = lifeless

    >>> sorted(
    ...     person.name for person in linux_source_bug.indirect_subscribers)
    [u'lifeless', u'name12', u'no-priv', u'ubuntu-team']

    >>> firefox.owner = previous_owner
    >>> firefox.bugcontact = lifeless

3. Subscribers (whether direct or indirect) from duplicate bugs

    >>> keybuk = personset.get(5)

    >>> print keybuk.name
    keybuk

    >>> linux_source_bug_dupe = linux_source.createBug(
    ...     title="a bug to test subscriptions",
    ...     comment="test", owner=keybuk)

    >>> sorted(
    ...     person.name for person in linux_source_bug_dupe.direct_subscribers)
    [u'keybuk']

    >>> sorted(
    ...     person.name for person in
    ...     linux_source_bug_dupe.indirect_subscribers)
    [u'no-priv', u'ubuntu-team']

    >>> linux_source_bug_dupe.duplicateof = linux_source_bug
    >>> linux_source_bug_dupe.syncUpdate()

    >>> sorted(
    ...     person.name for person in linux_source_bug.indirect_subscribers)
    [u'keybuk', u'lifeless', u'name12', u'no-priv', u'ubuntu-team']

When a bug is marked private, all its indirect subscribers become direct
subscribers.

    >>> from zope.event import notify

    >>> from canonical.launchpad.event import (
    ...     SQLObjectModifiedEvent, SQLObjectToBeModifiedEvent)
    >>> from canonical.launchpad.helpers import Snapshot
    >>> from canonical.launchpad.interfaces import IBug

    >>> notify(
    ...     SQLObjectToBeModifiedEvent(linux_source_bug, {"private": True}))

    >>> bug_before_modification = Snapshot(linux_source_bug, providing=IBug)
    >>> linux_source_bug.private = True

    >>> notify(
    ...     SQLObjectModifiedEvent(
    ...         bug_before_modification, linux_source_bug, ["private"]))

    >>> sorted(
    ...     person.name for person in linux_source_bug.direct_subscribers)
    [u'keybuk', u'lifeless', u'name12', u'name16', u'no-priv', u'sabdfl', u'ubuntu-team']

A private bug never has indirect subscribers.

    >>> linux_source_bug.indirect_subscribers
    []

Direct subscriptions always take precedence over indirect
subscriptions. So, if we unmark the above bug as private, the list of
indirect_subscribers is still empty, because they're all direct
subscribers now.

    >>> linux_source_bug.private = False
    >>> linux_source_bug.syncUpdate()

    >>> sorted(
    ...     person.name for person in linux_source_bug.direct_subscribers)
    [u'keybuk', u'lifeless', u'name12', u'name16', u'no-priv', u'sabdfl', u'ubuntu-team']
    >>> linux_source_bug.indirect_subscribers
    []

To get the entire list of email addresses that should receive a
notification email on a bug, call
IBug.notificationRecipientAddresses().

   >>> sorted(linux_source_bug.notificationRecipientAddresses())
   ['foo.bar@canonical.com', 'mark@hbd.com', 'no-priv@canonical.com', 'robertc@robertcollins.net', 'support@ubuntu.com', 'test@canonical.com']

To find out if someone is already directly subscribed to a bug, call
IBug.isSubscribed, passing in an IPerson:

    >>> linux_source_bug.isSubscribed(personset.get(27))
    False
    >>> linux_source_bug.isSubscribed(personset.get(12))
    True

Subscribing and Unsubscribing
=============================

To subscribe people to and unsubscribe people from a bug, use
IBug.subscribe and IBug.unsubscribe:

    >>> foobar = personset.get(16)
    >>> subscribed_people = [s.person.id for s in bug.subscriptions]
    >>> 16 not in subscribed_people
    True
    >>> bug.subscribe(foobar)
    <BugSubscription at ...>
    >>> subscriptions = [s.person.id for s in bug.subscriptions]
    >>> 16 in subscriptions
    True

Automatic Subscriptions on Bug Creation
=======================================

When a new bug is opened, only the bug reporter is automatically, explicitly
subscribed to the bug:

XXX: Brad Bollenbach, 2005-11-25: These bits need real sample data. See
https://launchpad.net/bugs/5484.

Let's have a look at an example for a distribution bug:

    >>> ubuntu.bugcontact = sample_person

    >>> from canonical.launchpad.interfaces import IBugSet

    >>> new_bug = getUtility(IBugSet).createBug(
    ...     title="a test bug", comment="a test description",
    ...     owner=foobar, distribution=ubuntu)

Only the bug reporter, Foo Bar, has an explicit subscription.

    >>> [subscription.person.displayname
    ...  for subscription in new_bug.subscriptions]
    [u'Foo Bar']

But because Sample Person is the distribution contact for Ubuntu, he
will be implicitly added to the notification recipients.

    >>> sorted(new_bug.notificationRecipientAddresses())
    ['foo.bar@canonical.com', 'test@canonical.com']

The distro contact will *not* be subscribed to private bugs, not even
implicitly:

    >>> new_bug = getUtility(IBugSet).createBug(
    ...     title="a test bug", comment="a test description",
    ...     owner=foobar, distribution=ubuntu, private=True)

    >>> sorted(new_bug.notificationRecipientAddresses())
    ['foo.bar@canonical.com']

Another example, this time for an upstream:


    >>> sabdfl = personset.get(1)
    >>> firefox.bugcontact = sabdfl

    >>> new_bug = getUtility(IBugSet).createBug(
    ...     title="a test bug", comment="a test description",
    ...     owner=foobar, product=firefox)

Again, only Foo Bar is explicitly subscribed:

    >>> [subscription.person.displayname
    ...  for subscription in new_bug.subscriptions]
    [u'Foo Bar']

But the upstream Firefox bug contact, sabdfl, is implicitly added to the
recipients list.

    >>> sorted(new_bug.notificationRecipientAddresses())
    ['foo.bar@canonical.com', 'mark@hbd.com']

If we create a bug task on Ubuntu in the same bug, the Ubuntu bug
contact will be subscribed:

    >>> ubuntu_task = getUtility(IBugTaskSet).createTask(
    ...     bug=new_bug, distribution=ubuntu, owner=sabdfl)

    >>> sorted(new_bug.notificationRecipientAddresses())
    ['foo.bar@canonical.com', 'mark@hbd.com', 'test@canonical.com']

But still, only Foo Bar is explicitly subscribed.

    >>> [subscription.person.displayname
    ...  for subscription in new_bug.subscriptions]
    [u'Foo Bar']

When an upstream does *not* have a specific bug contact set, the
product.owner is used instead. So, if Firefox's bugcontact is unset,
Sample Person, the Firefox "owner" will get subscribed instead:

    >>> firefox.bugcontact = None

    >>> new_bug = getUtility(IBugSet).createBug(
    ...     title="a test bug", comment="a test description",
    ...     owner=foobar, product=firefox)

Foo Bar is the only explicit subscriber:

    >>> [subscription.person.displayname
    ...  for subscription in new_bug.subscriptions]
    [u'Foo Bar']

But the product owner, Sample Person, is implicitly added to the
recipient list:

    >>> sorted(new_bug.notificationRecipientAddresses())
    ['foo.bar@canonical.com', 'test@canonical.com']

The upstream bug contact will *not* be automatically subscribed to
private bugs:

    >>> new_bug = getUtility(IBugSet).createBug(
    ...     title="a test bug", comment="a test description",
    ...     owner=foobar, product=firefox, private=True)

    >>> sorted(new_bug.notificationRecipientAddresses())
    ['foo.bar@canonical.com']

Now let's create a bug on a specific package, which has no package bug
contacts:

    >>> evolution = ubuntu.getSourcePackage("evolution")
    >>> evolution.bugcontacts
    []

    >>> new_bug = getUtility(IBugSet).createBug(
    ...     title="another test bug",
    ...     comment="another test description",
    ...     owner=foobar, distribution=ubuntu,
    ...     sourcepackagename=evolution.sourcepackagename)

    >>> sorted(new_bug.notificationRecipientAddresses())
    ['foo.bar@canonical.com', 'test@canonical.com']

Adding a package bug contact for evolution will mean that that package
bug contact gets implicitly subscribed to all bugs ever opened on that
package.

So, if the Ubuntu team is added as a bug contact to evolution:

    >>> evolution.addBugContact(ubuntu_team)

The team will be implicitly subscribed to the previous bug we
created. (Remember that Sample Person is also implicitly subscribed
because they are the distro bug contact):

    >>> [subscription.person.displayname
    ...  for subscription in new_bug.subscriptions]
    [u'Foo Bar']

    >>> sorted(new_bug.notificationRecipientAddresses())
    ['foo.bar@canonical.com', 'support@ubuntu.com', 'test@canonical.com']

And the Ubuntu team will be implicitly subscribed to future bugs:

    >>> new_bug = getUtility(IBugSet).createBug(
    ...     title="yet another test bug",
    ...     comment="yet another test description",
    ...     owner=foobar, distribution=ubuntu,
    ...     sourcepackagename=evolution.sourcepackagename)

    >>> [subscription.person.displayname
    ...  for subscription in new_bug.subscriptions]
    [u'Foo Bar']

    >>> sorted(new_bug.notificationRecipientAddresses())
    ['foo.bar@canonical.com', 'support@ubuntu.com', 'test@canonical.com']

The distribution and package contacts do not get subscribed to private
bug reports automatically:

    >>> new_bug = getUtility(IBugSet).createBug(
    ...     title="yet another test bug",
    ...     comment="yet another test description",
    ...     owner=foobar, distribution=ubuntu,
    ...     sourcepackagename=evolution.sourcepackagename,
    ...     private=True)

    >>> sorted(new_bug.notificationRecipientAddresses())
    ['foo.bar@canonical.com']
