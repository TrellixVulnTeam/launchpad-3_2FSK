= Finding the nearest adapter =

The nearest_adapter() and nearest_context_with_adapter() will search the
navigation hierarchy for a content-type that supplies the requested
adaptation.


== A sample hierarchy ==

First, we'll construct an example object hierarchy.

    >>> from canonical.launchpad.webapp import canonical_url, urlsplit
    >>> from canonical.launchpad.webapp.interfaces import (
    ...     ICanonicalUrlData, IFacetMenu)
    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest
    >>> from zope.interface import implements, directlyProvides, Interface
    >>> from zope.security.management import endInteraction, newInteraction

    >>> class ObjectThatHasUrl:
    ...     implements(ICanonicalUrlData)
    ...     def __init__(self, name, parent):
    ...         self.name = name  # Used in examples later.
    ...         self.path = name  # See ICanonicalUrlData.
    ...         self.inside = parent  # See ICanonicalUrlData.
    ...         self.rootsite = None  # See ICanonicalUrlData.

    >>> class ExampleContentObject(ObjectThatHasUrl):
    ...     pass


    # nearest_adapter() uses canonical_url(), which in turn requires a
    # running interaction.
    >>> def make_fake_request(url, traversed_objects=None):
    ...     """Return a fake request object for menu testing."""
    ...     url_parts = urlsplit(url)
    ...     server_url = '://'.join(url_parts[0:2])
    ...     path_info = url_parts[2]
    ...     request = LaunchpadTestRequest(
    ...         SERVER_URL=server_url,
    ...         PATH_INFO=path_info)
    ...     # After making the request, setup a new interaction.
    ...     endInteraction()
    ...     newInteraction(request)
    ...     return request

Here is the structure of our hierarchy:

    >>> root = ExampleContentObject('', None)
    >>> street = ExampleContentObject('sesamestreet', root)
    >>> house = ExampleContentObject('number73', street)

    >>> class IThingWithFacets(Interface):
    ...     """An object with facets."""

    >>> directlyProvides(street, IThingWithFacets)

    >>> request = make_fake_request(
    ...     'http://launchpad.dev/sesamestreet/number73')

    >>> canonical_url(street)
    u'http://launchpad.dev/sesamestreet'
    >>> canonical_url(house)
    u'http://launchpad.dev/sesamestreet/number73'


== Using nearest_adapter ==

Right now, none of our example objects have a facet menu.

    >>> from canonical.lazr.adapter import (nearest_adapter,
    ...     nearest_context_with_adapter)

    >>> print nearest_adapter(root, IFacetMenu)
    None
    >>> print nearest_adapter(street, IFacetMenu)
    None
    >>> print nearest_adapter(house, IFacetMenu)
    None

The same holds true for nearest_context_with_adapter():

    >>> nearest_context_with_adapter(root, IFacetMenu)
    (None, None)

We'll make the "street" object adaptable to IFactetMenu

    >>> class FacetMenu:
    ...     implements(IFacetMenu)
    ...     def __init__(self, context):
    ...         self.context = context

    >>> from zope.component import provideAdapter
    >>> provideAdapter(FacetMenu, [IThingWithFacets], IFacetMenu)

    >>> IFacetMenu(street)
    <...FacetMenu instance ...>

The nearest_adapter() function will look up the hierarchy for an object
that has the requested adaptation.

"house" does not provide IThingWithFacets, but "street" does, so street's
adapter will be returned.

    >>> print nearest_adapter(house, IFacetMenu)
    <...FacetMenu instance ...>

Calling nearest_adapter() on "street" itself will return the FacetMenu
adapter:

    >>> print nearest_adapter(street, IFacetMenu)
    <...FacetMenu instance ...>

Calling nearest_adapter() on the hierarchy root returns nothing:
the root does not have the requested adaptation, and there are no higher
objects to search.

    >>> print nearest_adapter(root, IFacetMenu)
    None
