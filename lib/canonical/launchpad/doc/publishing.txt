SourcePackagePublishingHistory
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This class provides public access to publishing records via a SQL view.

 >>> from canonical.launchpad.database import SourcePackagePublishingHistory

Select a publishing record from the sampledata (pmount is a
interesting one):

 >>> spph = SourcePackagePublishingHistory.get(8)
 >>> spph.sourcepackagerelease.name, spph.distroseries.name
 (u'pmount', u'hoary')

Verify if the object follows its interface contracts:

 >>> from canonical.launchpad.webapp.testing import verifyObject
 >>> from canonical.launchpad.interfaces import (
 ...     ISourcePackageRelease, IDistroSeries,
 ...     ISourcePackagePublishingHistory,
 ...     ISourcePackage,
 ...     IDistributionSourcePackageRelease)

 >>> verifyObject(ISourcePackagePublishingHistory, spph)
 True

 XXX cprov 20060322: None of the attributes below pass verifyObject().
 So, they claim to implement some thing they don't really have. Most
 of the problems are related with bad interface inheritance.

 >>> IDistroSeries.providedBy(spph.distroseries)
 True

 >>> ISourcePackageRelease.providedBy(spph.sourcepackagerelease)
 True

 >>> ISourcePackageRelease.providedBy(spph.supersededby)
 True

 >>> IDistributionSourcePackageRelease.providedBy(
 ...     spph.meta_sourcepackagerelease)
 True

 >>> IDistributionSourcePackageRelease.providedBy(spph.meta_supersededby)
 True

 >>> ISourcePackage.providedBy(spph.meta_sourcepackage)
 True


Check how the ISourcePackagePublishingHistory and IArchivePublisher objects
fit together. IArchivePublisher interface grants to a single
publication record the ability to publish its contents.

It results in a more granular way to perform actions in the package
archive, because instead of driven by the whole group of files that needs
to be published in the archive filesystem (old way), it will be driven
by a much smaller and similar set of files that are contained in a
single publication record.

See canonical/launchpad/tests/test_publishing.py for run-time times.

 >>> from canonical.launchpad.database import SourcePackagePublishingHistory
 >>> from canonical.launchpad.interfaces import (
 ...     IArchivePublisher, IArchiveSafePublisher,
 ...     ISourcePackageFilePublishing, IArchiveFilePublisher,
 ...     ISecureSourcePackagePublishingHistory)

Retrive any SourcePackagePublishingHistory entry.

 >>> spph = SourcePackagePublishingHistory.get(10)
 >>> print spph.displayname
 alsa-utils 1.0.8-1ubuntu1 in warty

SourcePackagPublishingHistory implements both interfaces properly:

 >>> verifyObject(ISourcePackagePublishingHistory, spph)
 True
 >>> verifyObject(IArchivePublisher, spph)
 True

Generating respective archive index *stanzas* based on IArchivePublisher:

A 'stanza' is the name given to a group of attributes related to one
source or binary package in the archive index file, it provides
informations to APT, things like, package name, pool path, DSC format,
files checksum, etc.

The archive index should containg one entry for each source or binary
currently published in the archive, it is usually partionated by
component:

<mirror_url_base>/ubuntu/edgy/main/binary-i386/Packages
<mirror_url_base>/ubuntu/edgy/main/source/Sources

The archive index is also available in in compressed formats.

IArchivePublisher provide the following API to retrieve the *stanza*
for a particular publication:

 >>> print spph.getIndexStanza() #doctest: -NORMALIZE_WHITESPACE
 Package: alsa-utils
 Binary: alsa-mixer
 Version: 1.0.8-1ubuntu1
 Maintainer: Mark Shuttleworth <sabdfl@hbd.com>
 Architecture: all
 Standards-Version: 3.6.2
 Format: 1.0
 Directory: pool/main/a/alsa-utils
 Files:
  01234567890123456789012345678925 3 alsa-utils_1.0.8-1ubuntu1.dsc


Empty fields like are suppressed, like 'Build-Depends' or
'Build-Depends-Indep' to avoid extra charge on download.
See sourcepackagerelease.txt for further information about the fields
in question.

IArchivePublisher.files are the SourcePackageFilePublishing records
contained in this publication record. Each instance also implements
IArchiveFilePublishing.

 >>> any_pub_file = spph.files[-1]
 >>> ISourcePackageFilePublishing.providedBy(any_pub_file)
 True
 >>> verifyObject(IArchiveFilePublisher, any_pub_file)
 True

 >>> [(pub_file.libraryfilealias.filename, pub_file.file_type_name)
 ...   for pub_file in spph.files]
 [(u'alsa-utils_1.0.8-1ubuntu1.dsc', 'dsc')]

'secure_record' returns a ISecureSourcePackagePublishing instance
corresponding to this publication. This instance implements
IArchiveSafePublisher.

 >>> sspph = spph.secure_record
 >>> ISecureSourcePackagePublishingHistory.providedBy(sspph)
 True
 >>> verifyObject(IArchiveSafePublisher, sspph)
 True
 >>> sspph.embargo
 False

Symetric behaviour is offered for BinaryPackagePublishing,
BinaryPackageFile and ISecureBinaryPackagePublishingHistory

 >>> from canonical.launchpad.database import BinaryPackagePublishingHistory
 >>> from canonical.launchpad.interfaces import (
 ...     IBinaryPackagePublishingHistory, IBinaryPackageFilePublishing,
 ...     ISecureBinaryPackagePublishingHistory)

 >>> bpph = BinaryPackagePublishingHistory.get(15)
 >>> print bpph.displayname
 mozilla-firefox 0.9 in woody i386

 >>> IBinaryPackagePublishingHistory.providedBy(bpph)
 True
 >>> verifyObject(IArchivePublisher, bpph)
 True

Generating respective "Packages" stanzas based on IArchivePublish:

 >>> print bpph.getIndexStanza() #doctest: -NORMALIZE_WHITESPACE
 Package: mozilla-firefox
 Priority: important
 Section: editors
 Maintainer: Mark Shuttleworth <mark@canonical.com>
 Architecture: i386
 Version: 0.9
 Replaces: gnome-mozilla-browser
 Suggests: firefox-gnome-support (= 1.0.7-0ubuntu20), latex-xft-fonts, xprint
 Provides: mozilla-firefox
 Depends: gcc-3.4-base, libc6 (>= 2.3.2.ds1-4), gcc-3.4 (>= 3.4.1-4sarge1), gcc-3.4 (<< 3.4.2), libstdc++6-dev (>= 3.4.1-4sarge1)
 Conflicts: firefox, mozilla-web-browser
 Filename: pool/universe/m/mozilla-firefox/mozilla-firefox_0.9_i386.deb
 Size: 3
 MD5sum: 01234567890123456789012345678926
 Description: Mozilla Firefox Web Browser
  Mozilla Firefox Web Browser is .....

 >>> sbpph = bpph.secure_record
 >>> ISecureBinaryPackagePublishingHistory.providedBy(sbpph)
 True
 >>> verifyObject(IArchiveSafePublisher, sbpph)
 True
 >>> sbpph.embargo
 False

 >>> any_file = bpph.files[-1]
 >>> IBinaryPackageFilePublishing.providedBy(any_file)
 True
 >>> verifyObject(IArchiveFilePublisher, any_file)
 True

 >>> [pub_file.libraryfilealias.filename for pub_file in bpph.files]
 [u'mozilla-firefox_0.9_i386.deb']

 >>> [pub_file.archive_url for pub_file in bpph.files]
 [u'http://launchpad.dev/debian/pool/universe/m/mozilla-firefox/mozilla-firefox_0.9_i386.deb']

