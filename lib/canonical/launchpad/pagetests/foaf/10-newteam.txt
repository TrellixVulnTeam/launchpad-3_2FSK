'foo' creates a new team named 'myemail'.

  >>> browser.addHeader('Authorization', 'Basic foo@baz.com:f')
  >>> browser.open('http://launchpad.dev/people/')
  >>> browser.getLink('Register a Team').click()

  >>> browser.url
  'http://launchpad.dev/people/+newteam'

  >>> browser.title
  'Register a new team in Launchpad'

  >>> browser.getControl(name='field.name').value = 'myemail'
  >>> browser.getControl('Display Name').value = 'my own team'
  >>> browser.getControl('Team Description').value = 'my own team description'
  >>> browser.getControl('Number of days a subscription lasts').value = '365'
  >>> browser.getControl(
  ...     'Number of days a renewed subscription lasts').value = '365'
  >>> browser.getControl('Subscription Policy').value = ['Open Team']
  >>> browser.getControl('Add').click()

  >>> browser.url
  'http://launchpad.dev/people/myemail'

  >>> browser.title
  'my own team in Launchpad'

  >>> team_portlet = find_portlet(browser.contents, 'my own team')
  >>> team_portlet.find(text='Team Owner:').findNext('a').string
  u'foobar'

The owner of a team is always added as an administrator of his team. Let's
make sure that's true.

  >>> from canonical.launchpad.database import Person
  >>> [a.name for a in Person.byName('myemail').administrators]
  [u'foo']

When creating a new team you can optionally provide a contact email address
for that team. This contact address must not be registered in Launchpad.

  >>> browser.open('http://launchpad.dev/people/+newteam')

  >>> browser.getControl(name='field.name').value = 'newtestteam'
  >>> browser.getControl('Display Name').value = 'newtestteam'
  >>> browser.getControl('Contact Email Address').value = 'test@canonical.com'
  >>> browser.getControl('Team Description').value = 'another test team'
  >>> browser.getControl('Subscription Policy').value = ['Moderated Team']
  >>> browser.getControl('Add').click()

  >>> for tag in find_tags_by_class(browser.contents, 'error'):
  ...     print tag
  <...An error occurred...
  ...
  test@canonical.com is already taken...
  ...

We also check if the given email address is syntactically valid.

  >>> browser.getControl('Contact Email Address').value = 'testcanonical.com'
  >>> browser.getControl('Add').click()

  >>> for tag in find_tags_by_class(browser.contents, 'error'):
  ...     print tag
  <...An error occurred...
  ...
  testcanonical.com isn't a valid email address...
  ...
