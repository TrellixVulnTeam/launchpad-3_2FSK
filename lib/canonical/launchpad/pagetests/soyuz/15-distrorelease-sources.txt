= DistroSeries Source Package Pages =

In Launchpad, SourcePackageReleases are directly attached to a
DistroSeries by a publication record (see doc/publishing.txt).

A SourcePackage, or better named DistroSeriesSourcePackage, is a
collection of SourcePackageReleases once published in a given
DistroSeries.

SourcePackages are available through the web UI after traversing
through a DistroSeries and SourceName. The URL schema is:

$LP/ubuntu/$DISTRORELEASE/+source/$SOURCENAME

A SourcePackageRelease once published in a DistroSeries is
represented by a DistroSeriesSourcePackageRelease and easily reached
by traversing a SourcePackage instance with a valid version, like:

$LP/ubuntu/$DISTRORELEASE/+source/$SOURCENAME/$VERSION

The path to click here is a bit involved, since the source package
page can only be reached by searching or getting a list of all
published packages. We will do the last:

Starting from distribution page:

  >>> browser.open(
  ...     'http://localhost/ubuntu')

We get a list of all published packages:

  >>> browser.getLink("List all packages").click()

Click on the respective name to get in the DistributionSourcePackage:
Let's have a look at the firefox DistributionSourcePackage.

  # But mozilla-firefox is not on the current batch of results
  >>> browser.getLink("mozilla-firefox").click()
  Traceback (most recent call last):
  ...
  LinkNotFoundError

  # Let's go to the next batch, where we can see it.
  >>> browser.getLink("Next").click()
  >>> browser.getLink("mozilla-firefox").click()
  >>> print browser.url
  http://localhost/ubuntu/+source/mozilla-firefox

Click the "Show publishing history" link to see specific information
about Firefox's publishing history.

  >>> browser.getLink("Show publishing history").click()
  >>> print extract_text(find_tag_by_id(browser.contents, 'publishing-summary'))
  Date                    Status    Target  Pocket  Component Section Version
  2006-02-13 12:19:00 UTC Pending   WartyII release main      editors 0.9
  ...
  2004-09-27 11:57:13 UTC Published WartyII release main      web     0.9
  Published on 2004-09-27
  ...

Jump back to the DistributionSourcePackage page to continue the tests:

  >>> browser.open('http://localhost/ubuntu/+source/mozilla-firefox')

By clicking in the 'target' distroseries we will get to the
SourcePackage page:

  >>> browser.getLink("warty").click()
  >>> browser.url
  'http://localhost/ubuntu/warty/+source/mozilla-firefox'

This page provides its versions publications organised by pocket.
We can see 'mozilla-firefox' is published once in pocket RELEASE:

  >>> print find_tag_by_id(browser.contents, 'publishing_history')
  <dl id="publishing_history">
    <dt><dfn>Release</dfn></dt>
    <dd>
      <p>The package versions that were published
         when the distribution release was made.
         For releases that are still under development,
         packages are published here only.
      </p>
      <ul>
        <li>
         <a href="/ubuntu/warty/+source/mozilla-firefox/0.9">mozilla-firefox 0.9</a>
        </li>
      </ul>
    </dd>
  </dl>

It also provides the upstream relationships for this source, Project,
Product and Branches:

  >>> print find_tag_by_id(browser.contents, 'upstreams')
  <ul id="upstreams">
    <li>
      <b>Project Group:</b>
      <a href="/mozilla">the Mozilla Project</a>
    </li>
    <li><b>Project:</b>
      <a href="/firefox">Mozilla Firefox</a>
    </li>
    <li><b>Branch: </b>
      <a href="/firefox/trunk">trunk</a><br />
    </li>
    <small>(<a href="/ubuntu/warty/+source/mozilla-firefox/+packaging">update</a>)</small>
  </ul>

The user can also download the files for the "currentrelease" (last
published version) if they are available:

  >>> print find_tag_by_id(browser.contents, 'files')
  <div id="files">
    <ul class="download">
      <li>
        <a href="/ubuntu/warty/+source/mozilla-firefox/0.9/+files/firefox-0.9.2.orig.tar.gz">firefox-0.9.2.orig.tar.gz</a>
      (9.5 MiB)
      </li>
    </ul>
  </div>

This page also provides links to the binary packages generated by this
source in a specfic architecture:

  >>> print extract_text(find_tag_by_id(browser.contents, 'binaries'))
  mozilla-firefox
  (hppa)
  (i386)
  mozilla-firefox-data
  (hppa)
  (i386)

Let's check the link to the binary package built on i386 architecture,
a DistroArchSeriesBinaryPackage:

  >>> browser.getLink("i386").click()
  >>> browser.url
  'http://localhost/ubuntu/warty/i386/mozilla-firefox'

More information about this page can be found at
17-distroarchseries-binpackages.txt.

Move back to the SourcePackage page to continue the tests:

  >>> browser.open(
  ...     'http://localhost/ubuntu/warty/+source/mozilla-firefox')


PackageRelationships, 'builddepends' & 'builddependsindep', for the
source in question are provided is this page:

  >>> depends_section = find_tag_by_id(browser.contents, 'depends')

  >>> parse_relationship_section(str(depends_section))
  TEXT: "gcc-3.4 (&gt;= 3.4.1-4sarge1)"
  TEXT: "gcc-3.4 (&lt;&lt; 3.4.2)"
  TEXT: "gcc-3.4-base"
  TEXT: "libc6 (&gt;= 2.3.2.ds1-4)"
  TEXT: "libstdc++6-dev (&gt;= 3.4.1-4sarge1)"
  LINK: "pmount" -> http://localhost/ubuntu/warty/+package/pmount

  >>> dependsindep_section = find_tag_by_id(browser.contents, 'dependsindep')

  >>> parse_relationship_section(str(dependsindep_section))
  TEXT: "bacula-common (= 1.34.6-2)"
  TEXT: "bacula-director-common (= 1.34.6-2)"
  LINK: "pmount" -> http://localhost/ubuntu/warty/+package/pmount
  TEXT: "postgresql-client (&gt;= 7.4)"


The '+changelog' page provides an aggregation of the changelogs for
SourcePackageReleases published in this DistroSeries.

The text is generated automatically by appending:

{{{
  SOURCENAME (VERSION) UPLOADDISTRORELEASE; urgency=URGENCY

  CHANGELOG

  -- UPLOADER-RFC-822 TIMESTAMP
}}}

for each published version.

  >>> browser.getLink("View changelog").click()
  >>> browser.url
  'http://localhost/ubuntu/warty/+source/mozilla-firefox/+changelog'

  >>> tag = find_tag_by_id(browser.contents, 'mozilla-firefox_0.9')
  >>> print extract_text(tag)
  Mozilla dummy Changelog......


Back to the SourcePackage page:

  >>> browser.open(
  ...     'http://localhost/ubuntu/warty/+source/mozilla-firefox')

We can visit a specific published release of "mozilla-firefox", this
page is provided by an DistroSeriesSourcePackageRelease instance:

  >>> browser.getLink("mozilla-firefox 0.9").click()
  >>> browser.url
  'http://localhost/ubuntu/warty/+source/mozilla-firefox/0.9'

There we can see the respective 'changelog' content for this version:

  >>> tag = find_tag_by_id(browser.contents, 'mozilla-firefox_0.9')
  >>> print extract_text(tag)
  Mozilla dummy Changelog......

With the possibility to download the entire changesfile (if available):

  >>> print find_tag_by_id(browser.contents, 'changesfile')
  <div id="changesfile">
    <p>
      <a href="http://localhost:58000/52/mozilla-firefox_0.9_i386.changes">
         View changesfile
      </a>
    </p>
  </div>

And also download the files contained in this source, like '.orig',
'.diff' and the DSC:

  >>> print find_tag_by_id(browser.contents, 'files')
  <div id="files">
    <ul class="download">
      <li>
        <a href="/ubuntu/hoary/+source/mozilla-firefox/0.9/+files/firefox-0.9.2.orig.tar.gz">firefox-0.9.2.orig.tar.gz</a>
        (9.5 MiB)
      </li>
    </ul>
  </div>

If we go to the same page for alsa-utils, the changelog has text that is
linkified.

  >>> browser.open(
  ...  'http://launchpad.dev/ubuntu/warty/+source/alsa-utils/1.0.9a-4ubuntu1')

This changelog has got text of the form 'LP: #nnn' where nnn is a bug number,
and this is linkified so that when clicked it takes us to the bug page:

  >>> browser.getLink('#10').url
  'http://launchpad.dev/bugs/10'

The same page for commercialpackage has an email address in the
changelog that is recognised in Launchpad.  It is linkified to point at
the profile page for that person:

  >>> user_browser.open(
  ...     "http://launchpad.dev/ubuntu/breezy-autotest/+source/"
  ...     "commercialpackage/1.0-1")
  >>> changelog = find_tag_by_id(
  ...     user_browser.contents, 'commercialpackage_1.0-1')
  >>> changelog.find('a')
  <a href="http://launchpad.dev/~name16"><img ...src="/@@/person" />&nbsp;foo.bar@canonical.com</a>


Let's check how the page behaves if we no files are present:

  >>> browser.open(
  ...     'http://launchpad.dev/ubuntu/hoary/+source/cnews')
  >>> browser.getLink("cnews cr.g7-37").click()

A string is presented in both 'changesfile' and 'files' sections,
warning the user that no file is available:

  >>> print find_tag_by_id(browser.contents, 'changesfile')
  <div id="changesfile">
    <p>No changesfile available.</p>
  </div>

  >>> print find_tag_by_id(browser.contents, 'files')
  <div id="files">
    <p>No files available for download.</p>
  </div>


= DistroSeries Partner Source Package Pages =

Partner packages in Launchpad differ from regular packages by two things:
1. Their component is 'partner'
2. Their archive is the partner archive, rather than the primary archive.

Their page functionality is identical to regular packages, which is described
in the previous section of this page.

    >>> browser.open(
    ...   "http://launchpad.dev/ubuntu/breezy-autotest/"
    ...   "+source/commercialpackage")

This page provides its versions publications organised by pocket.
We can see 'commercialpackage' is published once in pocket RELEASE:

    >>> print find_tag_by_id(browser.contents, 'publishing_history')
    <dl id="publishing_history">
    ...
    <a href="/ubuntu/breezy-autotest/+source/commercialpackage/1.0-1">commercialpackage 1.0-1</a>
    ...

The user can also download the files for the "currentrelease" (last
published version) if they are available:

    >>> print find_tag_by_id(browser.contents, 'files')
    <div id="files">
    ...
       <a href="/ubuntu/breezy-autotest/+source/commercialpackage/1.0-1/+files/commercialpackage_1.0.orig.tar.gz">commercialpackage_1.0.orig.tar.gz</a>
    ...
       <a href="/ubuntu/breezy-autotest/+source/commercialpackage/1.0-1/+files/commercialpackage_1.0-1.diff.gz">commercialpackage_1.0-1.diff.gz</a>
    ...
       <a href="/ubuntu/breezy-autotest/+source/commercialpackage/1.0-1/+files/commercialpackage_1.0-1.dsc">commercialpackage_1.0-1.dsc</a>
    ...

This page also provides links to the binary packages generated by this
source in a specfic architecture:

    >>> print extract_text(find_tag_by_id(browser.contents, 'binaries'))
    commercialpackage (i386)

Let's check the link to the binary package built on i386 architecture,
a DistroArchSeriesBinaryPackage:

    >>> browser.getLink("i386").click()
    >>> browser.url
    'http://launchpad.dev/ubuntu/breezy-autotest/i386/commercialpackage'

More information about this page can be found at
17-distroarchseries-binpackages.txt.

Move back to the SourcePackage page to continue the tests:

    >>> browser.open(
    ...     "http://launchpad.dev/ubuntu/breezy-autotest/+source/"
    ...     "commercialpackage")


The '+changelog' page provides an aggregation of the changelogs for
SourcePackageReleases published in this DistroSeries.

The text is generated automatically by appending:

{{{
  SOURCENAME (VERSION) UPLOADDISTRORELEASE; urgency=URGENCY

  CHANGELOG

  -- UPLOADER-RFC-822 TIMESTAMP
}}}

for each published version.

    >>> browser.getLink("View changelog").click()
    >>> browser.url
    'http://launchpad.dev/ubuntu/breezy-autotest/+source/commercialpackage/+changelog'

    >>> tag = find_tag_by_id(browser.contents, 'commercialpackage_1.0-1')
    >>> print extract_text(tag)
    commercialpackage...


Back to the SourcePackage page:

    >>> browser.open(
    ...     "http://launchpad.dev/ubuntu/breezy-autotest/+source/"
    ...     "commercialpackage")

We can visit a specific published release of "mozilla-firefox", this
page is provided by an DistroSeriesSourcePackageRelease instance:

    >>> browser.getLink("commercialpackage 1.0-1").click()
    >>> browser.url
    'http://launchpad.dev/ubuntu/breezy-autotest/+source/commercialpackage/1.0-1'

There we can see the respective 'changelog' content for this version:

    >>> tag = find_tag_by_id(browser.contents, 'commercialpackage_1.0-1')
    >>> print extract_text(tag)
    commercialpackage...

With the possibility to download the entire changesfile (if available):

    >>> print find_tag_by_id(browser.contents, 'changesfile')
    <div id="changesfile">
    ...
        <a href="http://localhost:58000/65/commercialpackage_1.0-1_source.changes">
    ...

And also download the files contained in this source, like '.orig',
'.diff' and the DSC:

    >>> print find_tag_by_id(browser.contents, 'files')
    <div id="files">
    ...
    <a href="/ubuntu/breezy-autotest/+source/commercialpackage/1.0-1/+files/commercialpackage_1.0.orig.tar.gz">commercialpackage_1.0.orig.tar.gz</a>
    ...
    <a href="/ubuntu/breezy-autotest/+source/commercialpackage/1.0-1/+files/commercialpackage_1.0-1.diff.gz">commercialpackage_1.0-1.diff.gz</a>
    ...
    <a href="/ubuntu/breezy-autotest/+source/commercialpackage/1.0-1/+files/commercialpackage_1.0-1.dsc">commercialpackage_1.0-1.dsc</a>
    ...

