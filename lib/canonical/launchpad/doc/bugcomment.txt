
Bug Comments
============

The BugComment class is a content class assembled by browser code; it
abstracts a single bug comment, has an index, and can be rendered
independently.

    >>> from zope.component import getView
    >>> from canonical.launchpad.interfaces import IBugSet
    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest

Handling of the bug's first comment
-----------------------------------

The bug's description starts out identical to its first comment. In the course
of a bug's life, the description may be updated, but the first comment stays
intact. To improve readability, we never display the first comment in the bug
page, and this is why getBugCommentsForDisplay doesn't return it:

    >>> bug_view = getView(bug_ten_bugtask, '+index', LaunchpadTestRequest())
    >>> bug_view.initialize()
    >>> rendered_comments = bug_view.getBugCommentsForDisplay()
    >>> [bug_comment.index for bug_comment in rendered_comments]
    [1]

In the case of bug 10, the first comment is identical to the bug's
description:

    >>> bug_view.wasDescriptionModified()
    False

And in this case we don't say anything special in the UI. If the description
was updated, the UI includes a note on this matter and a link to the original
comment.

Comment truncation
------------------

(For bug comments the context isn't too important, so we get the page using
just any of the bug's bugtask.)

    >>> bug_two = getUtility(IBugSet).get(2)
    >>> bug_two_bugtask = bug_two.bugtasks[0]
    >>> bug_view = getView(bug_two_bugtask, '+index', LaunchpadTestRequest())
    >>> bug_view.initialize()

When displaying the the comment getBugCommentsForDisplay() is used, it
returns all the comments decorated with some extra properties, for
example the comment number:

    >>> [bug_comment.index for bug_comment in bug_view.getBugCommentsForDisplay()]
    [1, 2]

If a comment is too long, we truncate it before we display it and
display a link to view the full comment. Let's change the default
threshold to the length of the first comment:

    >>> from canonical.config import config
    >>> OLD_COMMENT_SIZE = config.malone.max_comment_size
    >>> config.malone.max_comment_size = len(bug_two.messages[0].text_contents)

If we get the bug comments again from the view we can see that the
two additional comments have been truncated:

    >>> [(bug_comment.index, bug_comment.was_truncated)
    ...  for bug_comment in bug_view.getBugCommentsForDisplay()]
    [(1, True), (2, True)]

Let's take a closer look at one of the truncated comments. We can
display the truncated text using text_for_display:

    >>> comment_one = bug_view.getBugCommentsForDisplay()[0]
    >>> print comment_one.text_for_display #doctest: -ELLIPSIS
    This would be a real killer feature. I...

The UI will display information about the comment being truncated and
provide a link to view the full comment.

Comments with multiple chunks
-----------------------------

Bug 10 has two comments: one which is the initial description, and one
which is a multi-chunk comment added through the email interface. To
see what will be rendered for it, let's initialize its view:

    >>> bug_ten = getUtility(IBugSet).get(10)
    >>> bug_ten_bugtask = bug_ten.bugtasks[0]

To grab /all/ BugComments related to it, we use the browser function
get_comments_for_bugtask:

    >>> from canonical.launchpad.browser.bugtask import get_comments_for_bugtask
    >>> all_comments = get_comments_for_bugtask(bug_ten_bugtask)

    >>> [bug_comment.index for bug_comment in all_comments]
    [0, 1]
    >>> all_comments[0].text_for_display
    u'test bug'
    >>> all_comments[1].text_for_display
    u'Welcome to Canada!\n\nUnicode\u2122 text'

Note that multi-chunk comments are only created by the email interface
itself; adding comments through the web UI always places them in the
same chunk.

Wrapping up
-----------

Be nice and restore the comment size to what it was originally.

    >>> config.malone.max_comment_size = OLD_COMMENT_SIZE

