= User-to-user direct email contact =

A Launchpad user can contact another Launchpad user directly, even if the
recipient is hiding their email addresses.

    >>> def create_view(sender, recipient, form=None):
    ...     return create_initialized_view(
    ...         recipient, '+contactuser',
    ...         form=form, principal=sender)

    >>> def print_notifications(view):
    ...     for notification in view.request.notifications:
    ...         print notification.message

For example, let's say No Privileges Person wants to contact Salgado...

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.interfaces.person import IPersonSet
    >>> person_set = getUtility(IPersonSet)
    >>> no_priv = person_set.getByName('no-priv')
    >>> salgado = person_set.getByName('salgado')

...No Priv would start by going to Salgado's +contactuser page.

    >>> from canonical.launchpad.ftests import login
    >>> login(no_priv.preferredemail.email)
    >>> view = create_view(no_priv, salgado)

This contact is allowed.

    >>> print view.label
    Contact Guilherme Salgado
    >>> view.contact_is_allowed
    True

No Priv changes her mind though.

    >>> print view.cancel_url
    http://launchpad.dev/~salgado

No Priv decides, what the heck, let's contact Salgado after all.

    >>> view = create_view(
    ...     no_priv, salgado, {
    ...     'field.field.from_': 'no-priv@canonical.com',
    ...     'field.subject': 'Hello Salgado',
    ...     'field.message': 'Can you tell me about your project?',
    ...     'field.actions.send': 'Send',
    ...     })
    >>> print_notifications(view)
    Message sent to Guilherme Salgado

    # Capture the date of the last contact for later.
    >>> from canonical.config import config
    >>> from canonical.launchpad.database.message import UserToUserEmail
    >>> from canonical.lazr.config import as_timedelta
    >>> from storm.locals import Store
    >>> first_contact = Store.of(no_priv).find(
    ...     UserToUserEmail,
    ...     UserToUserEmail.sender == no_priv).one()
    >>> expires = first_contact.date_sent + as_timedelta(
    ...     config.launchpad.user_to_user_throttle_interval)

No Priv sends two more messages to Salgado.  Each of these are allowed too.

    >>> view = create_view(
    ...     no_priv, salgado, {
    ...     'field.field.from_': 'no-priv@canonical.com',
    ...     'field.subject': 'Hello Salgado',
    ...     'field.message': 'Can you tell me about your project?',
    ...     'field.actions.send': 'Send',
    ...     })
    >>> print_notifications(view)
    Message sent to Guilherme Salgado

    >>> view = create_view(
    ...     no_priv, salgado, {
    ...     'field.field.from_': 'no-priv@canonical.com',
    ...     'field.subject': 'Hello Salgado',
    ...     'field.message': 'Can you tell me about your project?',
    ...     'field.actions.send': 'Send',
    ...     })
    >>> print_notifications(view)
    Message sent to Guilherme Salgado

Now however, No Priv had reached her quota for direct user-to-user contact and
is not allowed to send a fourth message today.

    >>> view = create_view(no_priv, salgado)
    >>> view.contact_is_allowed
    False

No Priv can try again later.

    >>> view.next_try == expires
    True

As a corner case, let's say the number of notifications allowed was greater
yesterday than it was today.

    >>> config.push('seven_allowed', """\
    ... [launchpad]
    ... user_to_user_max_messages: 7
    ... """)

No Priv can actually try again right now.

    >>> from datetime import datetime
    >>> import pytz
    >>> view.next_try <= datetime.now(pytz.timezone('UTC'))
    True

So, No Priv sends four more emails.

    >>> for i in range(4):
    ...     assert create_view(no_priv, salgado).contact_is_allowed, (
    ...         'Contact was not allowed? %s' % i)
    ...     view = create_view(
    ...         no_priv, salgado, {
    ...         'field.field.from_': 'no-priv@canonical.com',
    ...         'field.subject': 'Hello Salgado',
    ...         'field.message': 'Can you tell me about your project?',
    ...         'field.actions.send': 'Send',
    ...         })
    ...     print_notifications(view)
    Message sent to Guilherme Salgado
    Message sent to Guilherme Salgado
    Message sent to Guilherme Salgado
    Message sent to Guilherme Salgado

No Priv has once again reached her limit of emails.

    >>> view = create_view(no_priv, salgado)
    >>> view.contact_is_allowed
    False
    >>> view.next_try == expires
    True

The configuration changes back to allow only three emails.

    >>> config.pop('seven_allowed')
    (...)
    >>> contacts = Store.of(no_priv).find(
    ...     UserToUserEmail,
    ...     UserToUserEmail.sender == no_priv)
    >>> contact = list(contacts)[4]
    >>> expires = contact.date_sent + as_timedelta(
    ...     config.launchpad.user_to_user_throttle_interval)


== Non-ASCII names ==

Carlos has non-ASCII characters in his name.  When he sends a message to a
user, his real name will be properly RFC 2047 encoded.

    >>> transaction.abort()
    >>> from canonical.launchpad.mail import stub
    >>> del stub.test_emails[:]
    >>> len(stub.test_emails)
    0

    >>> carlos = person_set.getByName('carlos')
    >>> login('carlos@canonical.com')
    >>> view = create_view(
    ...     carlos, no_priv, {
    ...     'field.field.from_': 'carlos@canonical.com',
    ...     'field.subject': 'Hello No Priv',
    ...     'field.message': 'I see funny characters',
    ...     'field.actions.send': 'Send',
    ...     })
    >>> transaction.commit()

    >>> len(stub.test_emails)
    1
    >>> from_addr, to_addrs, raw_msg = stub.test_emails.pop()
    >>> print raw_msg
    Content-Type: text/plain; charset="us-ascii"
    ...
    From: =?utf-8?q?Carlos_Perell=C3=B3_Mar=C3=ADn?= <carlos@canonical.com>
    To: No Privileges Person <no-priv@canonical.com>
    ...

Similarly, if Carlos is the recipient of a message, his real name will be
properly RFC 2047 encoded as well.

    >>> del stub.test_emails[:]

    >>> login('no-priv@canonical.com')
    >>> view = create_view(
    ...     no_priv, carlos, {
    ...     'field.field.from_': 'no-priv@canonical.com',
    ...     'field.subject': 'Hello Carlos',
    ...     'field.message': 'I see funny characters',
    ...     'field.actions.send': 'Send',
    ...     })
    >>> transaction.commit()

    >>> len(stub.test_emails)
    1
    >>> from_addr, to_addrs, raw_msg = stub.test_emails.pop()
    >>> print raw_msg
    Content-Type: text/plain; charset="us-ascii"
    ...
    From: No Privileges Person <no-priv@canonical.com>
    To: =?utf-8?q?Carlos_Perell=C3=B3_Mar=C3=ADn?= <carlos@canonical.com>
    ...


== Hidden addresses ==

Salgado decides to hide his email addresses.

    >>> login_person(salgado)
    >>> salgado.hide_email_addresses = True

Anne contacts Salgado even though his email addresses are hidden.

    >>> anne = factory.makePerson(email='anne@example.com', name='anne')
    >>> logout()
    >>> login_person(anne)

    >>> view = create_view(
    ...     anne, salgado, {
    ...         'field.field.from_': 'anne@example.com',
    ...         'field.subject': 'Hello Salgado',
    ...         'field.message': 'It is nice to meet you',
    ...         'field.actions.send': 'Send',
    ...         })
    >>> print_notifications(view)
    Message sent to Guilherme Salgado


== Contacting teams ==

Teams can also be contacted directly, regardless of whether they have no
official contact address, use a Launchpad mailing list, or have the contact
address set to an explicit address.

The team's overview page tells us that we're contacting a team instead of a
user.

    >>> view = create_view(anne, guadamen)
    >>> print view.contactuser_link_title
    Send an email to this team thorugh Launchpad
    >>> print view.specific_contact_text
    Contact this team

The Guadamen team has no contact address, so contacting them contacts all
its members directly.

    # Clear out left over crud.
    >>> transaction.commit()
    >>> del stub.test_emails[:]

    >>> guadamen = person_set.getByName('guadamen')
    >>> view = create_view(
    ...     anne, guadamen, {
    ...         'field.field.from_': 'anne@example.com',
    ...         'field.subject': 'Hello Guadamen',
    ...         'field.message': 'Can one of you help me?',
    ...         'field.actions.send': 'Send',
    ...         })
    >>> print_notifications(view)
    Message sent to GuadaMen

    >>> transaction.commit()
    >>> emails = []
    >>> while stub.test_emails:
    ...     emails.append(stub.test_emails.pop())
    >>> from operator import itemgetter
    >>> emails.sort(key=itemgetter(1))

There are 10 members of the team, so exactly 10 unique copies of the message
are sent, one to each team member.

    >>> len(emails)
    9

    >>> from email import message_from_string
    >>> message_ids = set()
    >>> message_subjects = set()
    >>> message_senders = set()
    >>> message_recipients = set()
    >>> message_bodies = set()
    >>> for from_addr, to_addrs, raw_msg in emails:
    ...     message = message_from_string(raw_msg)
    ...     message_ids.add(message['message-id'])
    ...     message_subjects.add(message['subject'])
    ...     message_senders.add(message['from'])
    ...     message_recipients.add(message['to'])
    ...     message_bodies.add(message.get_payload())

Everyone gets a message with the same subject and body from the same sender.
    
    >>> print message_senders
    set(['Anne <anne@example.com>'])
    >>> print message_subjects
    set(['Hello Guadamen'])
    >>> print message_bodies
    set(['Can one of you help me?'])

Everyone does get a unique copy of the message though.

    >>> len(message_ids)
    9
    >>> for recipient in sorted(message_recipients):
    ...     print recipient
    Alexander Limi <limi@plone.org>
    Celso Providelo <celso.providelo@canonical.com>
    Colin Watson <colin.watson@ubuntulinux.com>
    Daniel Silverstone <daniel.silverstone@canonical.com>
    Edgar Bursic <edgar@monteparadiso.hr>
    Foo Bar <foo.bar@canonical.com>
    Jeff Waugh <jeff.waugh@ubuntulinux.com>
    Mark Shuttleworth <mark@hbd.com>
    Steve Alexander <steve.alexander@ubuntulinux.com>

The Guadamen team now registers an external contact address.

    >>> address = getUtility(IEmailAddressSet).new(
    ...     'guadamen@example.com', guadamen)
    >>> guadamen.setContactAddress(address)

Anne contacts the Guadamen team again.  This time only one message is sent,
and that to the new contact address.

    >>> view = create_view(
    ...     anne, guadamen, {
    ...         'field.field.from_': 'anne@example.com',
    ...         'field.subject': 'Hello again Guadamen',
    ...         'field.message': 'Can one of you help me?',
    ...         'field.actions.send': 'Send',
    ...         })
    >>> print_notifications(view)
    Message sent to GuadaMen

    >>> transaction.commit()
    >>> len(stub.test_emails)
    1
    >>> from_addr, to_addrs, raw_msg = stub.test_emails.pop()
    >>> print from_addr, to_addrs
    XXX
    >>> print raw_msg
    XXX


* mailing list
* quota proofs
