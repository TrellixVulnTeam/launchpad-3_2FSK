= Deleting an archive =

When deleting an archive, the user calls IArchive.delete(), passing in
the IPerson who is requesting the deletion. The archive is disabled and
the status set to DELETING.

This status tells the publisher to then set the publications to DELETED
and delete the repository area. Once it completes that task the status
of the archive itself is set to DELETED.

    >>> from lp.soyuz.tests.test_publishing import SoyuzTestPublisher
    >>> login("admin@canonical.com")
    >>> stp = SoyuzTestPublisher()
    >>> stp.prepareBreezyAutotest()
    >>> owner = factory.makePerson(name='archive-owner')
    >>> archive = factory.makeArchive(owner=owner)

The archive is currently active:

    >>> print archive.enabled
    True

    >>> print archive.status.name
    ACTIVE

We can create some packages in it using the test publisher:

    >>> from lp.soyuz.enums import PackagePublishingStatus
    >>> ignore = stp.getPubBinaries(
    ...     archive=archive, binaryname="foo-bin1",
    ...     status=PackagePublishingStatus.PENDING)
    >>> ignore = stp.getPubBinaries(
    ...     archive=archive, binaryname="foo-bin2",
    ...     status=PackagePublishingStatus.PUBLISHED)
    >>> from storm.store import Store
    >>> Store.of(archive).flush()

Calling delete() will now do the deletion.  It is only callable by someone
with launchpad.Edit permission on the archive.  Here, "duderino" who is
some random dude is refused:

    >>> person = factory.makePerson(name="duderino")
    >>> ignored = login_person(person)
    >>> archive.delete(person)
    Traceback (most recent call last):
    ...
    Unauthorized:...

However we can delete it using the owner of the archive:

    >>> ignored = login_person(archive.owner)
    >>> archive.delete(archive.owner)

Now the archive is disabled and the status is DELETING to tell the
publisher to remove the publications and the repository:

    >>> print archive.enabled
    False

    >>> print archive.status.name
    DELETING

Once deleted the archive can't be reenabled.

    >>> archive.enable()
    Traceback (most recent call last):
    ...
    AssertionError: Deleted archives can't be enabled.

    >>> print archive.enabled
    False
