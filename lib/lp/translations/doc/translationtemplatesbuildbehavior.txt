= TranslationTemplatesBuildJobBehavior =

Set up build environment.

    >>> import transaction
    >>> import logging
    >>> logger = logging.getLogger()
    >>> logger.setLevel(logging.CRITICAL)

    >>> from lp.buildmaster.master import BuilddMaster
    >>> from canonical.buildd.tests import BuilddSlaveTestSetup
    >>> bm = BuilddMaster(logger, transaction)

    >>> BuilddSlaveTestSetup().setUp()

    >>> from canonical.librarian.interfaces import ILibrarianClient
    >>> from StringIO import StringIO
    >>> from canonical.launchpad.interfaces import ILibraryFileAliasSet
    >>> from canonical.launchpad.interfaces import ILaunchpadCelebrities
    >>> ubuntu = getUtility(ILaunchpadCelebrities).ubuntu
    >>> librarian_client = getUtility(ILibrarianClient)
    >>> content = 'arbitrary chroot file content'
    >>> alias_id = librarian_client.addFile(
    ...    'foo.tar.gz', len(content), StringIO(content), 'text/plain')
    >>> archdistroseries = ubuntu.currentseries.nominatedarchindep
    >>> chroot = getUtility(ILibraryFileAliasSet)[alias_id]
    >>> pc = archdistroseries.addOrUpdateChroot(chroot=chroot)

Activate builders present in sampledata.  We need to be logged in as a
member of launchpad-buildd-admin:

    >>> from canonical.launchpad.ftests import login, logout
    >>> login('celso.providelo@canonical.com')

    >>> bm.addDistroArchSeries(archdistroseries)
    >>> bm.setupBuilders(archdistroseries)
    >>> processor = archdistroseries.processorfamily.processors[0]
    >>> builder = factory.makeBuilder(virtualized=False, processor=processor)

    >>> from lp.translations.interfaces.translationtemplatesbuildjob import (
    ...     ITranslationTemplatesBuildJobSource)
    >>> from lp.soyuz.interfaces.buildqueue import IBuildQueueSet
    >>> branch = factory.makeBranch()
    >>> specific_job_source = getUtility(ITranslationTemplatesBuildJobSource)
    >>> specific_job = specific_job_source.create(branch)
    >>> buildqueue = getUtility(IBuildQueueSet).getByJob(specific_job.job)

    >>> print buildqueue.date_started
    None

    >>> builder.startBuild(buildqueue, logger)

The build is now marked as started.

    >>> buildqueue.date_started is None
    False

    >>> logout()
    >>> BuilddSlaveTestSetup().tearDown()
