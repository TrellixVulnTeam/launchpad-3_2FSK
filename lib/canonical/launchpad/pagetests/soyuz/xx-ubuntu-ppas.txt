= Ubuntu PPAs =

The Ubuntu Linux page contains a link to get to the Personal Package Archives.

    >>> browser.open("http://launchpad.dev/ubuntu")
    >>> browser.getLink("Personal Package Archives").click()
    >>> browser.title
    'Personal Package Archives for Ubuntu Linux'

== PPA main page ==

The PPA page contains a search box and a table of known PPAs with columns
Owner, Description, Sources and Binaries, the latter two being a count.

The sample data contains three PPAs.  Only Celso has any packages, with two
sources and one binary.

== Searching PPAs ==

By default only active (those with, at least one, PENDING or PUBLISHED
source record) PPAs are presented.

    >>> for ppa_row in find_tags_by_class(browser.contents, 'ppa_batch_row'):
    ...    print extract_text(ppa_row)
    Celso Providelo
    packages to help my friends.
    3
    2

We have a checkbox to allow inactive PPA results.

    >>> browser.getControl(name="show_inactive").value = True
    >>> browser.getControl("Search").click()

    >>> for ppa_row in find_tags_by_class(browser.contents, 'ppa_batch_row'):
    ...    print extract_text(ppa_row)
    Celso Providelo
    packages to help my friends.
    3
    2
    No Privileges Person
    I am not allowed to say, I have no privs.
    0
    0
    Mark Shuttleworth
    packages to help the humanity (you know, ubuntu)
    0
    0

This checkbox value is propagated to subsequent searches:

    >>> browser.getControl(name="show_inactive").value
    True

No data matches the non-existent search string "bustmybuffers".

    >>> field = browser.getControl("PPAs containing:")
    >>> field.value = 'bustmybuffers'
    >>> browser.getControl("Search").click()
    >>> len(find_tags_by_class(browser.contents, 'ppa_batch_row'))
    0

In the three sample data PPAs, only one matches the search string "Celso".

    >>> field = browser.getControl("PPAs containing:")
    >>> field.value = 'Celso'
    >>> browser.getControl("Search").click()
    >>> len(find_tags_by_class(browser.contents, 'ppa_batch_row'))
    1

== Owner's PPA pages ==

In the table rows, the "Owner" is a clickable link to his PPA page.

    >>> browser.getLink("Celso Providelo").click()
    >>> browser.title
    'Celso Providelo Personal Package Archive'

The page also shows some stats about Celso's PPA (number of sources. binaries
and estimated size).

    >>> results = find_tag_by_id(browser.contents,'package_counters')
    >>> text = extract_text(results)
    >>> print text
    3 Sources
    (9.5 MiB)
    2 Binaries
    (3 bytes)
    Estimated archive size:
    9.5 MiB

The sample data has two packages belonging to Celso. Two table rows
will be presented to user containing:

 * SourcePackageRelease title (<source_name> - <source-version>),
 * Date Published,
 * target DistroSeries,
 * target Pocket,
 * original Component and
 * original Section

    >>> for ppa_row in find_tags_by_class(browser.contents, 'ppa_package_row'):
    ...    print extract_text(ppa_row)
    pmount - 0.1-1
    2007-07-09
    Published
    hoary
    Release
    main
    editors
    iceweasel - 1.0
    2007-07-09
    Published
    warty
    Release
    main
    editors
    cdrkit - 1.0
    2007-07-09
    Published
    breezy-autotest
    Release
    main
    editors


== Searching an archive ==

We can search a PPA for a particular package.  A non-existent package shows
no results.

    >>> field = browser.getControl("Packages with name containing:")
    >>> field.value = 'nonexistentpackage'
    >>> browser.getControl("Search").click()
    >>> len(find_tags_by_class(browser.contents, 'ppa_package_row'))
    0

Searching for the package "iceweasel" show's that Celso is providing this.

    >>> field = browser.getControl("Packages with name containing:")
    >>> field.value = 'iceweasel'
    >>> browser.getControl("Search").click()
    >>> len(find_tags_by_class(browser.contents, 'ppa_package_row'))
    1


== Other Distribution PPAs ==

PPAs are targeted to a specific distribution and currently we only
allow Ubuntu PPAs, thus 'ubuntutest' PPAs page should be empty:

    >>> browser.open("http://launchpad.dev/ubuntutest")
    >>> browser.getLink("Personal Package Archives").click()
    >>> browser.title
    'Personal Package Archives for Ubuntu Test'

    >>> len(find_tags_by_class(browser.contents, 'ppa_batch_row'))
    0
