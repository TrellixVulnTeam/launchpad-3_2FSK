= External bug trackers =

Launchpad can link to bugs in external bug trackers. The list of bug
trackers Launchpad knows about is accessible from the Bugs front page.

  >>> user_browser.open('http://bugs.launchpad.dev/')
  >>> user_browser.getLink('bug trackers').click()
  >>> user_browser.title
  'Bug trackers registered in Launchpad'

Anyone logged in is able to register a new bug tracker.

  >>> user_browser.getLink('Register bug tracker').click()
  >>> user_browser.url
  'http://bugs.launchpad.dev/bugs/bugtrackers/+newbugtracker'

  >>> user_browser.title
  'Register an external bug tracker'

Supported external bug tracker types include Bugzilla, Debbugs,
Roundup, SourceForge and Trac.  We don't provide all of these as
options to the user.  We don't provide Debbugs because the status
synchronisation script requires manual set up of a bug archive mirror,
and SourceForge because there is only one instance (SourceForge.net).

  >>> for control in user_browser.getControl('Bug Tracker Type').controls:
  ...     print control.optionValue
  Bugzilla
  Roundup
  Trac
  Mantis
  Request Tracker (RT)
  GNU Savannah

The bug tracker name is used in URLs and certain characters (like '!')
aren't allowed.

  >>> user_browser.getControl('Name').value = 'testmantis!'
  >>> user_browser.getControl('Bug Tracker Type').getControl('Mantis').click()
  >>> user_browser.getControl('Title').value = 'Test Mantis Tracker'
  >>> user_browser.getControl('Summary').value = (
  ...     'This is a test MANTIS tracker.')
  >>> url = 'http://mantis.testing.org/'
  >>> user_browser.getControl('Base URL').value = url
  >>> user_browser.getControl('Contact details').value = 'blah blah'
  >>> user_browser.getControl('Add').click()

  >>> user_browser.url
  'http://bugs.launchpad.dev/bugs/bugtrackers/+newbugtracker'
  >>> for message in find_tags_by_class(user_browser.contents, 'message'):
  ...     print extract_text(message)
  There is 1 error.
  Invalid name 'testmantis!'. Names must start with a letter or
  number and be lowercase. The characters +,
  - and . are also allowed after the
  first character.

If a bug tracker is already registered with the same URL, the user is
informed about it.

  >>> user_browser.getControl('Name').value = 'testmantis'
  >>> user_browser.getControl('Base URL').value = 'http://bugzilla.mozilla.org/'
  >>> user_browser.getControl('Add').click()

  >>> user_browser.url
  'http://bugs.launchpad.dev/bugs/bugtrackers/+newbugtracker'
  >>> for message in find_tags_by_class(user_browser.contents, 'message'):
  ...     print extract_text(message)
  There is 1 error.
  http://bugzilla.mozilla.org/ is already registered in Launchpad.

The same happens if the requested URL is aliased to another bug
tracker. Aliases can be edited once a bug tracker has been added, but
for now we'll dig directly to the database.

  >>> from zope.component import getUtility
  >>> from canonical.launchpad.interfaces import BugTrackerType, IBugTrackerSet
  >>> from canonical.launchpad.ftests import login, logout
  >>> login('test@canonical.com')
  >>> gnome_bugzilla = getUtility(IBugTrackerSet).getByName('gnome-bugzilla')
  >>> gnome_bugzilla.aliases = ['http://alias.example.com/']
  >>> logout()

  >>> user_browser.getControl('Base URL').value = 'http://alias.example.com/'
  >>> user_browser.getControl('Add').click()

  >>> user_browser.url
  'http://bugs.launchpad.dev/bugs/bugtrackers/+newbugtracker'
  >>> for message in find_tags_by_class(user_browser.contents, 'message'):
  ...     print extract_text(message)
  There is 1 error.
  http://alias.example.com/ is already registered in Launchpad.

After successfully registering the bug tracker, the user is redirected
to the bug tracker page.

  >>> user_browser.getControl('Base URL').value = url
  >>> user_browser.getControl('Add').click()

  >>> user_browser.url
  'http://bugs.launchpad.dev/bugs/bugtrackers/testmantis'

  >>> user_browser.title
  'Bug tracker \xe2\x80\x9cTest Mantis Tracker\xe2\x80\x9d'

  >>> 'Test Mantis Tracker' in user_browser.contents
  True
  >>> 'This is a test MANTIS tracker.' in user_browser.contents
  True

The `Summary` and `Contact Details` fields are optional - creating a
bugtracker without them is acceptable.

  >>> user_browser.open('http://launchpad.dev/bugs/bugtrackers/+newbugtracker')
  >>> user_browser.getControl('Name').value = 'test-bugzilla'
  >>> user_browser.getControl('Title').value = 'Test Bugzilla'
  >>> user_browser.getControl('Bug Tracker Type').value = ['Bugzilla']
  >>> user_browser.getControl('Base URL').value = 'http://bugzilla.example.org/'
  >>> user_browser.getControl('Add').click()
  >>> user_browser.url
  'http://launchpad.dev/bugs/bugtrackers/test-bugzilla'

  >>> login('test@canonical.com')
  >>> bugtrackerset = getUtility(IBugTrackerSet)
  >>> test_tracker = bugtrackerset.getByName('testmantis')
  >>> test_tracker.bugtrackertype == BugTrackerType.MANTIS
  True

  >>> logout()

If we try to add a bugtracker with the same name of a existing one, we'll get
a nice error message.

  >>> user_browser.open('http://launchpad.dev/bugs/bugtrackers/+newbugtracker')

  >>> user_browser.getControl('Name').value = 'testmantis'
  >>> user_browser.getControl('Bug Tracker Type').getControl('Mantis').click()
  >>> user_browser.getControl('Title').value = 'Test Mantis Tracker'
  >>> user_browser.getControl('Summary').value = 'This is a test TRAC tracker.'
  >>> url = 'http://trac.example.org/tickets'
  >>> user_browser.getControl('Base URL').value = url
  >>> user_browser.getControl('Contact details').value = 'blah blah'
  >>> user_browser.getControl('Add').click()

  >>> message = 'testmantis is already in use by another bugtracker.'
  >>> message in user_browser.contents
  True

We can edit the details of the newly added bugtracker.

  >>> user_browser.open('http://launchpad.dev/bugs/bugtrackers/testmantis/')
  >>> user_browser.getLink('Change details').click()

  >>> user_browser.url
  'http://launchpad.dev/bugs/bugtrackers/testmantis/+edit'

  >>> user_browser.title
  'Change details for \xe2\x80\x9cTest Mantis Tracker\xe2\x80\x9d bug tracker'

  >>> user_browser.getControl('Name').value = 'testbugzilla'
  >>> user_browser.getControl('Title').value = 'A test Bugzilla Tracker'
  >>> user_browser.getControl('Bug Tracker Type').getControl('Bugzilla').click()
  >>> user_browser.getControl(
  ...     'Summary').value = 'This is used to be a test TRAC bug tracker.'

It's not possible to change the base URL to something that another bug
tracker uses.

  >>> user_browser.getControl('Base URL', index=0).value = (
  ...     'http://bugzilla.mozilla.org/')
  >>> user_browser.getControl('Change').click()

  >>> user_browser.url
  'http://launchpad.dev/bugs/bugtrackers/testmantis/+edit'
  >>> for message in get_feedback_messages(user_browser.contents):
  ...     print message
  There is 1 error.
  http://bugzilla.mozilla.org/ is already registered in Launchpad.

After successfully editing the bug tracker information, the user is
redirected to the bug tracker page. Note that the change we made to
the bugtracker name is reflected in the url.

  >>> user_browser.getControl('Base URL', index=0).value = url
  >>> user_browser.getControl('Change').click()

  >>> user_browser.url
  'http://launchpad.dev/bugs/bugtrackers/testbugzilla'

And now the test tracker should have been updated:

  >>> 'A test Bugzilla Tracker' in user_browser.contents
  True
  >>> 'This is used to be a test TRAC bug tracker.' in user_browser.contents
  True

  >>> login('test@canonical.com')
  >>> test_tracker = bugtrackerset.getByName('testbugzilla')
  >>> test_tracker.bugtrackertype == BugTrackerType.BUGZILLA
  True

  >>> logout()


== Aliases ==

We can associate multiple URLs with a bug tracker. An alias can
represent another valid URL for a bug tracker, or just a commonly seen
typo. Aliases are used to catch user mistakes; only the Base URL is
used to access the remote bug tracker.

They're added on the normal Change Details page.

  >>> user_browser.open('http://launchpad.dev/bugs/bugtrackers/testbugzilla')
  >>> user_browser.getLink('Change details').click()

  >>> user_browser.getControl('Base URL aliases').value = (
  ...     'http://pseudonym.example.com/')
  >>> user_browser.getControl('Change').click()

  >>> bugtracker_url_list = find_tag_by_id(
  ...     user_browser.contents, 'bugtracker-urls')
  >>> print extract_text(bugtracker_url_list)
  http://trac.example.org/tickets (Base URL)
  http://pseudonym.example.com/ (Alias)

It's not possible to add an alias that already refers to another
bugtracker.

  >>> user_browser.open(
  ...     'http://launchpad.dev/bugs/bugtrackers/testbugzilla/+edit')
  >>> user_browser.getControl('Base URL aliases').value = (
  ...     'http://bugzilla.mozilla.org/')
  >>> user_browser.getControl('Change').click()

  >>> for message in get_feedback_messages(user_browser.contents):
  ...     print message
  There is 1 error.
  http://bugzilla.mozilla.org/ already refers to The Mozilla.org Bug Tracker

Multiple aliases can be entered by separating URLs with whitespace.

  >>> user_browser.getControl('Base URL aliases').value = (
  ...     '    http://wolverhampton.example.com/    '
  ...     '  http://toadhall.example.com/      \n'
  ...     ' https://wibble.example.com/   \n\n\n')
  >>> user_browser.getControl('Change').click()

  >>> bugtracker_url_list = find_tag_by_id(
  ...     user_browser.contents, 'bugtracker-urls')
  >>> print extract_text(bugtracker_url_list)
  http://trac.example.org/tickets (Base URL)
  http://toadhall.example.com/ (Alias)
  http://wolverhampton.example.com/ (Alias)
  https://wibble.example.com/ (Alias)


== Overview pages and private bugs ==

When looking at a bug tracker page, a list of bug watches is
displayed:

  >>> anon_browser.open(
  ...     'http://launchpad.dev/bugs/bugtrackers/debbugs')
  >>> print extract_text(find_tag_by_id(
  ...     anon_browser.contents, 'latestwatches'))
  Launchpad bug                      Remote bug  Status
  #15: Nonsensical bugs are useless  308994      open important
  #3:  Bug Title Test                327549
  #2:  Blackhole Trash folder        327452
  #1:  Firefox does not support SVG  304014
  #7:  A test bug                    280883

But if the user is not permitted to view one of the watches only very
basic details are displayed. For example, when a bug watch is
associated with a private bug:

  >>> admin_browser.open('http://launchpad.dev/bugs/15')
  >>> admin_browser.getLink('Set privacy/security').click()
  >>> admin_browser.getControl(
  ...     'This bug report should be private').selected = True
  >>> admin_browser.getControl('Change').click()

  >>> anon_browser.open(
  ...     'http://launchpad.dev/bugs/bugtrackers/debbugs')
  >>> print extract_text(find_tag_by_id(
  ...     anon_browser.contents, 'latestwatches'))
  Launchpad bug                      Remote bug  Status
  #15: (Private)                     -
  #3:  Bug Title Test                327549
  #2:  Blackhole Trash folder        327452
  #1:  Firefox does not support SVG  304014
  #7:  A test bug                    280883

Note that even the remote bug number is hidden.

But... why doesn't Launchpad just show me the watches that I'm allowed
to see, and omit the rest?

Firstly, for this to work, Launchpad would need to recalculate totals
on the bug tracker summary page (/bugs/bugtrackers) and in each bug
tracker page (e.g. /bugs/bugtrackers/debbugs). That's complex and not
good for performance, and the work needed to make the performance good
would make it fragile. Without the recalculated totals it would be
confusing for users, and look like Launchpad is broken.

Secondly, these pages are also useful for administrators and users of
the remote trackers to see what's going on. Giving them an adjusted
total is misleading. There would be a disconnect between what
Launchpad reports and what it does, which again could lead them to
think that Launchpad is broken or lying.


== Related projects portlet ==

Related projects and project groups are shown in a portlet on the bug
tracker page.

First we need to change a project group and a project to use our new
bug tracker:

  >>> admin_browser.open('http://launchpad.dev/mozilla/+edit')
  >>> admin_browser.getControl('Bug Tracker:').displayValue = [
  ...     'A test Bugzilla Tracker']
  >>> admin_browser.getControl('Change Details').click()

  >>> admin_browser.open('http://launchpad.dev/jokosher/+edit')
  >>> admin_browser.getControl(name='field.bugtracker'
  ...     ).displayValue = ['In a registered bug tracker:']
  >>> admin_browser.getControl(name='field.bugtracker.bugtracker'
  ...     ).displayValue = ['A test Bugzilla Tracker']
  >>> admin_browser.getControl('Change').click()

Now the Mozilla Project and Jokosher will appear in the Related
projects portlet on the bug tracker page:

  >>> admin_browser.open(
  ...     'http://launchpad.dev/bugs/bugtrackers/testbugzilla')
  >>> print extract_text(find_portlet(
  ...     admin_browser.contents, 'Related projects'))
  Related projects
    You can link a registered bug tracker with a registered project in
    Launchpad:
      The Mozilla Project
      Jokosher Audio Editor
