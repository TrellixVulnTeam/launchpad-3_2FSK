 Setup the stub KeyServer

  >>> from canonical.zeca.ftests.harness import ZecaTestSetup
  >>> z = ZecaTestSetup()
  >>> z.setUp()
  
 Clean page

  >>> print http(r"""
  ... GET /foaf/people/name12/+editgpgkey HTTP/1.1
  ... Authorization: Basic dGVzdEBjYW5vbmljYWwuY29tOnRlc3Q=
  ... """)
  HTTP/1.1 200 Ok
  Content-Length: ...
  Content-Type: text/html;charset=utf-8
  ...
    <head>
      <title>Sample Person GPG Keys</title>
  ...

  Claim GPG Key

  >>> print http(r"""
  ... POST /people/name12/+editgpgkey HTTP/1.1
  ... Authorization: Basic dGVzdEBjYW5vbmljYWwuY29tOnRlc3Q=
  ... Content-Length: ...
  ... Content-Type: application/x-www-form-urlencoded
  ... 
  ... action=claim_gpg&fingerprint=A419AE861E88BC9E04B9C26FBA2B9389DFD20543""")
  HTTP/1.1 200 Ok
  Content-Length: ...
  Content-Type: text/html;charset=utf-8
  ...
  ...1024D/DFD20543...
  ...  

  Recover Token URL

  >>> import email, re
  >>> from canonical.launchpad.mail import stub
  >>> from_addr, to_addrs, raw_msg = stub.test_emails.pop()
  >>> msg = email.message_from_string(raw_msg)

  decode the content, originally encoded in 'base-64' or 'quoted-printable'
  
  >>> cipher_body = msg.get_payload(decode=True)

  >>> from canonical.launchpad.helpers import setupInteraction
  >>> setupInteraction(None)

  >>> from canonical.launchpad.interfaces import IGpgHandler 
  >>> from zope.component import getUtility
  >>> gpghandler = getUtility(IGpgHandler)

  Import the secret keys need for this test

  >>> from canonical.launchpad.ftests import import_secret_test_key
  >>> import_secret_test_key()

  'cipher_body' is a message encrypted to the just imported 1024D/DFD20543
  gpg key, we need to access the current IGpghandler instance to
  access this key and decrypt the message.

  >>> body = gpghandler.decryptContent(cipher_body, 'test')

  >>> from zope.security.management import endInteraction
  >>> endInteraction()

  Do the usual procedure to extract the token URL
 
  >>> link = re.findall(r'http.*/token/.*', body)[0]
  >>> token = re.sub(r'.*token/', '', link)
  >>> base_path = '/token/%s' % token


  Go to the link sent by email, to validate the email address.

  >>> print http(r"""
  ... GET %s HTTP/1.1
  ... Authorization: Basic dGVzdEBjYW5vbmljYWwuY29tOnRlc3Q=
  ... """ % base_path)
  HTTP/1.1 303 See Other
  Content-Length: ...
  Content-Type: text/html;charset=utf-8
  ...
  ...<h1>You're being redirected</h1>
  ...

  Get Redirected

  >>> path = '%s/+validategpg' % base_path
  >>> print http(r"""
  ... GET %s HTTP/1.1
  ... Authorization: Basic dGVzdEBjYW5vbmljYWwuY29tOnRlc3Q=
  ... """ % path)
  HTTP/1.1 200 Ok
  Content-Length: ...
  Content-Type: text/html;charset=utf-8
  ...

  Validate UID and consequently import the Key.

  >>> print http(r"""
  ... POST %s HTTP/1.1
  ... Authorization: Basic dGVzdEBjYW5vbmljYWwuY29tOnRlc3Q=
  ... Content-Length: ...
  ... Content-Type: application/x-www-form-urlencoded
  ... 
  ... password=test&SUBMIT_CHANGES=Submit""" % path)
  HTTP/1.1 200 Ok
  Content-Length: ...
  Content-Type: text/html;charset=utf-8
  ...
  ...1024D/DFD20543...
  ...

 Certify the key is imported

  >>> print http(r"""
  ... GET /foaf/people/name12/+editgpgkey HTTP/1.1
  ... Authorization: Basic dGVzdEBjYW5vbmljYWwuY29tOnRlc3Q=
  ... """)
  HTTP/1.1 200 Ok
  Content-Length: ...
  Content-Type: text/html;charset=utf-8
  ...
    <head>
      <title>Sample Person GPG Keys</title>
  ...
  ...1024D/DFD20543...


  Attempt to the fact the revoked uid present in the key in question
  wasn't added.


  >>> print http(r"""
  ... GET /foaf/people/name12/+emails HTTP/1.1
  ... Authorization: Basic dGVzdEBjYW5vbmljYWwuY29tOnRlc3Q=
  ... """)
  HTTP/1.1 200 Ok
  Content-Length: ...
  Content-Type: text/html;charset=utf-8
  ...
    <p>Your contact address for all Launchpad e-mail is: <b>test@canonical.com</b></p>
  <BLANKLINE>
  <BLANKLINE>
  <BLANKLINE>
  <BLANKLINE>
  <BLANKLINE>
    These other addresses are confirmed as being yours:
  <BLANKLINE>
    <div style="padding: 0.7em 0em">
      <div>
        <label for="testing@canonical.com">
          <input type="radio" name="VALIDATED_SELECTED"
                 id="testing@canonical.com"
                 value="testing@canonical.com" />
          <b>testing@canonical.com</b>
        </label>
      </div>
    </div>
    <input type="submit" value="Remove" name="REMOVE_VALIDATED" />
    <input type="submit" value="Set as Contact Address" name="SET_PREFERRED" />
    <br /><br /><br />
  <BLANKLINE>
  <BLANKLINE>
  <BLANKLINE>
    These addresses may also be yours:
  <BLANKLINE>
    <div style="padding: 0.7em 0em">
      <div>
        <label for="testtest@canonical.com_unvalidated">
          <input type="radio" name="UNVALIDATED_SELECTED"
                 id="testtest@canonical.com_unvalidated"
                 value="testtest@canonical.com" />
          <b>testtest@canonical.com</b>
        </label>
      </div>
      <div>
        <label for="sample.person@canonical.com_unvalidated">
          <input type="radio" name="UNVALIDATED_SELECTED"
                 id="sample.person@canonical.com_unvalidated"
                 value="sample.person@canonical.com" />
          <b>sample.person@canonical.com</b>
        </label>
      </div>
      </div>
      <input type="submit" value="Remove" name="REMOVE_UNVALIDATED" />
      <input type="submit" value="Confirm" name="VALIDATE" />
  ... 

  Kill stub KeyServer
  
  >>> z.tearDown()
