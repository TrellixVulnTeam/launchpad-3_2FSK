= Team pages =

== Home page ==

    >>> from canonical.launchpad.interfaces import (
    ...     IPersonSet, ITeamMembershipSet)
    >>> from zope.component import getView
    >>> from zope.publisher.browser import TestRequest
    >>> personset = getUtility(IPersonSet)
    >>> def create_view(context, name, form=None):
    ...     view = getView(context, name, TestRequest(form=form))
    ...     view.initialize()
    ...     return view

On a team home page, we show up to the latest five members who were approved
as well as the up to five latest members who proposed themselves.

    >>> ubuntu_team = personset.getByName('name18')
    >>> team_home = create_view(ubuntu_team, '+index')
    >>> membershipset = getUtility(ITeamMembershipSet)
    >>> for member in team_home.recently_approved_members:
    ...     membership = membershipset.getByPersonAndTeam(member, ubuntu_team)
    ...     print "%s: %s" % (member.name, membership.status.title)
    ...            
    name20: Approved
    spiv: Approved
    limi: Approved

    >>> for member in team_home.recently_proposed_members:
    ...     membership = membershipset.getByPersonAndTeam(member, ubuntu_team)
    ...     print "%s: %s" % (member.name, membership.status.title)
    justdave: Proposed

If new members are added/proposed, they'll show up at the top of the lists.

    >>> sample_person = personset.getByName('name12')
    >>> sample_person.join(ubuntu_team)
    >>> salgado = personset.getByName('salgado')
    >>> sabdfl = personset.getByName('sabdfl')
    >>> ubuntu_team.addMember(salgado, reviewer=sabdfl)

    >>> team_home = create_view(ubuntu_team, '+index')
    >>> for member in team_home.recently_approved_members:
    ...     membership = membershipset.getByPersonAndTeam(member, ubuntu_team)
    ...     print "%s: %s" % (member.name, membership.status.title)
    salgado: Approved
    name20: Approved
    spiv: Approved
    limi: Approved

    >>> for member in team_home.recently_proposed_members:
    ...     membership = membershipset.getByPersonAndTeam(member, ubuntu_team)
    ...     print "%s: %s" % (member.name, membership.status.title)
    name12: Proposed
    justdave: Proposed


== Change contact address ==

The contact address of a team can be None, an external email address or
a Launchpad hosted mailing list.  The Ubuntu Team has no contact address
and now we'll change that to an external address, but that won't have
effect until the address is validated.

    >>> from canonical.launchpad.ftests import LaunchpadFormHarness
    >>> from canonical.launchpad.browser.team import TeamContactAddressView
    >>> view = LaunchpadFormHarness(ubuntu_team, TeamContactAddressView)
    >>> login(sabdfl.preferredemail.email)
    >>> view.submit('change', {'field.contact_method': 'EXTERNAL_ADDRESS',
    ...                        'field.contact_address': 'foo@bar.baz'})
    >>> view.hasErrors()
    False
    >>> print ubuntu_team.preferredemail
    None
    >>> print ubuntu_team.unvalidatedemails
    [u'foo@bar.baz']

    # Let's pretend the email has been validated so that we can set it as the
    # contact address for that team.
    >>> from canonical.launchpad.interfaces import IEmailAddressSet
    >>> ubuntu_team.setContactAddress(getUtility(IEmailAddressSet).new(
    ...     'foo@bar.baz', ubuntu_team))
    >>> ubuntu_team.preferredemail.email
    u'foo@bar.baz'

Similarly, if we change it to a hosted mailing list, the change will be in
effect only after the mailing list is approved.

    >>> view = LaunchpadFormHarness(ubuntu_team, TeamContactAddressView)
    >>> view.submit('change', {'field.contact_method': 'HOSTED_LIST'})
    >>> view.hasErrors()
    False
    >>> ubuntu_team.preferredemail.email
    u'foo@bar.baz'
    >>> from canonical.launchpad.interfaces import IMailingListSet
    >>> mailing_list = getUtility(IMailingListSet).get(ubuntu_team.name)
    >>> mailing_list.status
    <DBItem MailingListStatus.REGISTERED...

If the mailing list is not approved, the old contact method is kept.

    >>> from canonical.launchpad.interfaces import MailingListStatus
    >>> mailing_list.review(sabdfl, MailingListStatus.DECLINED)
    >>> ubuntu_team.preferredemail.email
    u'foo@bar.baz'

We'll have to request a hosted mailing list again, then.

    >>> view = LaunchpadFormHarness(ubuntu_team, TeamContactAddressView)
    >>> view.submit('change', {'field.contact_method': 'HOSTED_LIST'})
    >>> view.hasErrors()
    False
    >>> from canonical.database.sqlbase import flush_database_caches
    >>> flush_database_caches()
    >>> mailing_list.status
    <DBItem MailingListStatus.REGISTERED...

If this time the mailing list is approved and constructed, the contact
method is changed, but only after its construction is finished.

    >>> mailing_list.review(sabdfl, MailingListStatus.APPROVED)
    >>> ubuntu_team.preferredemail.email
    u'foo@bar.baz'

    # When MM starts recreating the list its status is changed to
    # CONSTRUCTING. If the user submits the form once again when the ML is in
    # that status we'll simply tell him the ML is under maintenance.

    >>> mailing_list.startConstructing()
    >>> mailing_list.transitionToStatus(MailingListStatus.ACTIVE)
    >>> ubuntu_team.preferredemail.email


# TODO: Change back to None and show that the mailing list is left active.

