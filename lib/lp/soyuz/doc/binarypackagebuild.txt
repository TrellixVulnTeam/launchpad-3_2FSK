== AssertionErrors in IBinaryPackageBuild ==

Build records inserted by gina don't provide calculated_buildstart
value, since they miss fields used in its calculation.
TODO: check and update this based on the new model.

    >>> gina_build = getUtility(IBinaryPackageBuildSet).getByBuildID(10)
    >>> gina_build.title
    u'i386 build of cnews cr.g7-37 in ubuntu warty RELEASE'

even if IBinaryPackageBuild.was_built return true:

    >>> gina_build.was_built
    True

Only builds in failed_states (FAILEDTOBUILD, MANUALDEPWAIT and
CHROOTWAIT) can be retried. We must check if Soyuz is able to accept
its result in case of success, i.e., we should not be able to retry a
build for a released pocket.

All those conditions are controlled by
IBinaryPackageBuild.can_be_retried() property (see above).

    >>> failed_build = getUtility(IBinaryPackageBuildSet).getByBuildID(6)

    >>> failed_build.title
    u'i386 build of foobar 1.0 in ubuntu warty RELEASE'

    >>> failed_build.status.name
    'FAILEDTOBUILD'

    >>> failed_build.can_be_retried
    False

Attempt to retry this build record will fail with an AssertionError:

    >>> login('foo.bar@canonical.com')
    >>> failed_build.retry()
    Traceback (most recent call last):
    ...
    AssertionError: Build 6 cannot be retried

    >>> login(ANONYMOUS)

storeUploadLog() refuses to override any previously stored
'upload_log'.

    >>> failedtoupload_build = getUtility(IBinaryPackageBuildSet).getByBuildID(22)
    >>> print failedtoupload_build.title
    i386 build of cdrkit 1.0 in ubuntu breezy-autotest RELEASE

    >>> print failedtoupload_build.upload_log.filename
    upload_22_log.txt

    >>> failedtoupload_build.storeUploadLog('something')
    Traceback (most recent call last):
    ...
    AssertionError: Upload log information already exists and cannot be
    overridden.

It's only possible to store another 'upload_log' content once the
build is retried.

    >>> login('foo.bar@canonical.com')
    >>> failedtoupload_build.retry()
    >>> login(ANONYMOUS)
    >>> print failedtoupload_build.upload_log
    None

    >>> failedtoupload_build.storeUploadLog('something')

    >>> print failedtoupload_build.upload_log.filename
    upload_22_log.txt

There are other settable attributes declared in the zcml that require
launchpad.Edit.

    >>> def check_setting_property(build_rec, property, value, should_fail):
    ...     try:
    ...         setattr(build_rec, property, value)
    ...         if should_fail:
    ...             print "Should have failed setting %s" % property
    ...     except Unauthorized:
    ...         if not should_fail:
    ...             print "Did not fail when expected setting %s" % property
    >>> from canonical.database.constants import UTC_NOW
    >>> properties = {
    ...     'log': 1,
    ...     'date_finished': UTC_NOW,
    ...     'date_started': UTC_NOW,
    ...     'builder': bob,
    ...     'status': BuildStatus.FAILEDTOUPLOAD,
    ...     'dependencies': u'whatever',
    ...     'upload_log': 1,
    ...     }

Login as a non-privileged user and set the properties.  It will fail.

    >>> login('no-priv@canonical.com')
    >>> for property in properties:
    ...     check_setting_property(
    ...         depwait_build, property, properties[property],
    ...         should_fail=True)

As a buildd-admin it will work:

    >>> login('celso.providelo@canonical.com')
    >>> for property in properties:
    ...     check_setting_property(
    ...         depwait_build, property, properties[property],
    ...         should_fail=False)

== Estimated Build Duration ==

Build records will have an 'estimated_duration' time in the associated
BuildQueue record. The latter is set from a previous builds' 'buildduration'
value.

We will use SoyuzTestPublisher to generate coherent publications to
test this behaviour.

    >>> login('foo.bar@canonical.com')

Create oldest SourcePackageRelease instance.

    >>> oldest_spr = test_publisher.getPubSource(
    ...     status=PackagePublishingStatus.PUBLISHED,
    ...     sourcename='ebdtest')

Create oldest build instance.

    >>> oldest_build = oldest_spr.sourcepackagerelease.createBuild(
    ...         test_publisher.breezy_autotest_hppa,
    ...         PackagePublishingPocket.UPDATES,
    ...         test_publisher.breezy_autotest.main_archive,
    ...         status=BuildStatus.FULLYBUILT)
    >>> oldest_build.date_finished = datetime(2008, 4, 1, 10, 45, 39, tzinfo=UTC)
    >>> oldest_build.date_started = oldest_build.date_finished - timedelta(minutes=72)

Check that the oldest build instance's 'estimated_duration'
is initialized based on its package size. Since the latter is very
small (less than a KB) the 'estimated_duration' will be a
minute.

    >>> bq = oldest_build.queueBuild()
    >>> bq.estimated_duration
    datetime.timedelta(0, 60)

Create intermediate SourcePackageRelease instance.

    >>> medium_spr = test_publisher.getPubSource(
    ...     status=PackagePublishingStatus.PUBLISHED,
    ...     sourcename='ebdtest')

Create intermediate build instance.

    >>> medium_build = medium_spr.sourcepackagerelease.createBuild(
    ...         test_publisher.breezy_autotest_hppa,
    ...         PackagePublishingPocket.UPDATES,
    ...         test_publisher.breezy_autotest.main_archive,
    ...         status=BuildStatus.FULLYBUILT)
    >>> medium_build.date_finished = datetime(2008, 4, 2, 11, 56, 33, tzinfo=UTC)
    >>> medium_build.date_started = medium_build.date_finished - timedelta(minutes=60)

Check whether the intermediate build instance's 'estimated_duration'
value equals the oldest instance's 'buildduration' (72 minutes equals 4320
seconds).

    >>> bq = medium_build.queueBuild()
    >>> bq.estimated_duration
    datetime.timedelta(0, 4320)

Create most recent SourcePackageRelease instance.

    >>> recent_spr = test_publisher.getPubSource(
    ...     status=PackagePublishingStatus.PUBLISHED,
    ...     sourcename='ebdtest')

Create most recent build instance. Please note: this one is in state
NEEDSBUILD.

    >>> recent_build = recent_spr.sourcepackagerelease.createBuild(
    ...         test_publisher.breezy_autotest_hppa,
    ...         PackagePublishingPocket.UPDATES,
    ...         test_publisher.breezy_autotest.main_archive,
    ...         status=BuildStatus.NEEDSBUILD)

Check whether the most recent build instance's 'estimated_duration'
value equals the intermediate instance's 'buildduration'.

    >>> bq = recent_build.queueBuild()
    >>> bq.estimated_duration
    datetime.timedelta(0, 3600)

Create a SourcePackageRelease instance in a PPA.

    >>> ppa_spr = test_publisher.getPubSource(
    ...     status=PackagePublishingStatus.PUBLISHED,
    ...     sourcename='ebdtest')

Create most recent build instance.

    >>> ppa_build = ppa_spr.sourcepackagerelease.createBuild(
    ...         test_publisher.breezy_autotest_hppa,
    ...         PackagePublishingPocket.UPDATES,
    ...         cprov.archive,
    ...         status=BuildStatus.NEEDSBUILD)

Check whether the PPA build instance's 'estimated_duration'
value was set from the intermediate instance's 'buildduration' in
the main archive.

    >>> bq = ppa_build.queueBuild()
    >>> bq.estimated_duration
    datetime.timedelta(0, 3600)

