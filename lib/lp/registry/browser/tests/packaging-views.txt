Packaging views
===============

Packaging links connect a sourcepackage to a distroseries and a productseries.


Productseries linking packages
------------------------------

Distro series sourcepackages can be linked to product series using the
+ubuntupkg named view.

    >>> from canonical.launchpad.interfaces.launchpad import (
    ...     ILaunchpadCelebrities)

    >>> ubuntu = getUtility(ILaunchpadCelebrities).ubuntu
    >>> hoary = ubuntu.getSeries('hoary')
    >>> sourcepackagename = factory.makeSourcePackageName('hot')
    >>> sourcepackage = factory.makeSourcePackage(
    ...     sourcepackagename=sourcepackagename, distroseries=hoary)
    >>> spph = factory.makeSourcePackagePublishingHistory(
    ...     sourcepackagename=sourcepackagename, distroseries=hoary)
    >>> product = factory.makeProduct(name="hot", displayname='Hot')
    >>> productseries = factory.makeProductSeries(
    ...     product=product, name='hotter')
    >>> productseries.sourcepackages
    []
    >>> transaction.commit()

The view has a label and requires a distro series and a source package name.
The distroseries field's vocabulary is the same as the ubuntu.series
attribute.

    >>> view = create_view(productseries, '+ubuntupkg')
    >>> print view.label
    Ubuntu source packaging

    >>> print view.page_title
    Ubuntu source packaging

    >>> print view.field_names
    ['sourcepackagename', 'distroseries']

    >>> print view.cancel_url
    http://launchpad.dev/hot/hotter

    >>> for series in ubuntu.series:
    ...     print series.name
    breezy-autotest
    grumpy
    hoary
    warty
    >>> view.setUpFields()
    >>> for term in view.form_fields['distroseries'].field.vocabulary:
    ...     print term.token
    breezy-autotest
    grumpy
    hoary
    warty

    >>> form = {
    ...     'field.distroseries': 'hoary',
    ...     'field.sourcepackagename': 'hot',
    ...     'field.packaging': 'Primary Project',
    ...     'field.actions.continue': 'Continue',
    ...     }
    >>> view = create_initialized_view(
    ...     productseries, '+ubuntupkg', form=form)
    >>> view.errors
    []
    >>> for package in productseries.sourcepackages:
    ...     print package.name
    hot

    >>> transaction.commit()


Productseries linking Ubuntu packages
-------------------------------------

The +ubuntupkg named view allows the user to update the current linked
Ubuntu package.

    >>> view = create_initialized_view(productseries, '+ubuntupkg')

    >>> print view.label
    Ubuntu source packaging

    >>> print view.page_title
    Ubuntu source packaging

    >>> print view.field_names
    ['sourcepackagename', 'distroseries']

    >>> print view.cancel_url
    http://launchpad.dev/hot/hotter

The view restricts the packaging to Ubuntu series, and default is the current
Ubuntu series.

    >>> print view.default_distroseries.name
    hoary

    >>> print view.widgets['distroseries']._getDefault().name
    hoary

    >>> for term in view.widgets['distroseries'].vocabulary:
    ...     print term.title
    Breezy Badger Autotest (6.6.6)
    Grumpy (5.10)
    Hoary (5.04)
    Warty (4.10)

The sourcepackagename is None if the package link was never set. The view's
packaging history is empty, and the sourcepackagename widget is empty.

    >>> new_productseries = factory.makeProductSeries(
    ...     product=product, name='cold')
    >>> view = create_initialized_view(new_productseries, '+ubuntupkg')

    >>> print view.default_sourcepackagename
    None

    >>> print view.widgets.get('sourcepackagename')._getFormValue()
    <BLANKLINE>

    >>> print view.ubuntu_history
    []

Series have been packaged in Ubuntu do have the current information and
a history.

    >>> view = create_initialized_view(productseries, '+ubuntupkg')
    >>> print view.default_sourcepackagename.name
    hot

    >>> print view.widgets.get('sourcepackagename')._getFormValue().name
    hot

    >>> for packaging in view.ubuntu_history:
    ...     print packaging.distroseries.name
    ...     print packaging.sourcepackagename.name
    hoary hot

The package in the current Ubuntu series can be updated.

    >>> thunderbird_spn = factory.getOrMakeSourcePackageName('thunderbird')
    >>> spph = factory.makeSourcePackagePublishingHistory(
    ...     sourcepackagename=thunderbird_spn, distroseries=hoary)

    >>> form = {
    ...     'field.sourcepackagename': 'thunderbird',
    ...     'field.actions.continue': 'Update',
    ...     }
    >>> view = create_initialized_view(
    ...     productseries, '+ubuntupkg', form=form)
    >>> view.errors
    []

    >>> for packaging in view.ubuntu_history:
    ...     print packaging.distroseries.name
    ...     print packaging.sourcepackagename.name
    hoary thunderbird

It is not an error to submit the same sourcepackagename information, the
action is ignored because there is no change

    >>> form = {
    ...     'field.sourcepackagename': 'thunderbird',
    ...     'field.actions.continue': 'Update',
    ...     }
    >>> view = create_initialized_view(
    ...     productseries, '+ubuntupkg', form=form)
    >>> view.errors
    []

    >>> for packaging in view.ubuntu_history:
    ...     print packaging.distroseries.name
    ...     print packaging.sourcepackagename.name
    hoary thunderbird

When the current Ubuntu series changes, the sourcepackagename is not known,
and a new entry can be added to the packaging history.

    >>> from lp.registry.interfaces.series import SeriesStatus

    >>> login('admin@canonical.com')
    >>> hoary.status = SeriesStatus.CURRENT
    >>> grumpy_series = ubuntu.getSeries('grumpy')
    >>> spph = factory.makeSourcePackagePublishingHistory(
    ...     sourcepackagename=sourcepackagename, distroseries=grumpy_series)
    >>> grumpy_series.status = SeriesStatus.FROZEN

    >>> a_user = factory.makePerson(name="hedgehog")
    >>> login_person(a_user)
    >>> form = {
    ...     'field.sourcepackagename': 'hot',
    ...     'field.actions.continue': 'Update',
    ...     }
    >>> view = create_initialized_view(
    ...     productseries, '+ubuntupkg', form=form)
    >>> view.errors
    []

    >>> print view.default_distroseries.name
    grumpy

    >>> print view.default_sourcepackagename
    None

    >>> for packaging in view.ubuntu_history:
    ...     print packaging.distroseries.name
    ...     print packaging.sourcepackagename.name
    grumpy hot
    hoary thunderbird


Product packages view
----------------------

The +packages named view displays the packages links to the product's series.

    >>> view = create_initialized_view(product, name='+packages')
    >>> print view.label
    Linked packages

The view provides the series_packages property that returns a list of
dicts. Each dict as a series and a list of packages.

    >>> def print_packages(view):
    ...     for series_dict in view.series_packages:
    ...         print series_dict['series'].name
    ...         for package in series_dict['packagings']:
    ...             print package.distroseries.name
    >>> print_packages(view)
    cold
    hotter
      grumpy
      hoary
    trunk

The view provides the distro_packaging property that is a list of
dictionaries for the distributions and their packaging.  The list is
sorted by distribution with Ubuntu first and the rest in alphabetic
order.

    >>> for distro_dict in view.distro_packaging:
    ...     print distro_dict['distribution'].name
    ubuntu

A packaging link can be deleted if the owner believes it is an error. The
package linked to hoary is wrong; thunderbird is the wrong sourcepackage.

    >>> from canonical.launchpad.testing.pages import find_tag_by_id
    >>> view = create_initialized_view(
    ...     product, name='+packages', principal=a_user)
    >>> print_packages(view)
    cold
    hotter
      grumpy
      hoary
    trunk

    # There are links to the +remove-packaging page.
    >>> table = find_tag_by_id(view.render(), 'packages-hotter')
    >>> for link in table.findAll('a'):
    ...     if '+remove-packaging' in link['href']:
    ...         print link['href']
    http://launchpad.dev/ubuntu/grumpy/+source/hot/+remove-packaging
    http://launchpad.dev/ubuntu/hoary/+source/thunderbird/+remove-packaging

    >>> [hoary_package] = [
    ...     package for series_dict in view.series_packages
    ...     for package in series_dict['packagings']
    ...     if package.distroseries.name == 'hoary']
    >>> form = {'field.actions.unlink': 'Unlink'}
    >>> unlink_view = create_initialized_view(
    ...     hoary_package.sourcepackage, name='+remove-packaging', form=form)
    >>> unlink_view.errors
    []

    # The view has to be reloaded since view.series_packages is cached.
    >>> view = create_initialized_view(product, name='+packages')
    >>> print_packages(view)
    cold
    hotter
      grumpy
    trunk


Distro series +packaging view
-----------------------------

The DistroSeriesPackagesView shows the packages in a distro series that
are linked to upstream projects.

    >>> view = create_initialized_view(hoary, name='+packaging')
    >>> print view.label
    All series packages linked to upstream project series

    >>> print view.page_title
    All upstream links

The view provides a property to get prioritized list of series packagings.
The packages that most need more information to send bugs upstream, build
packages, and sync translations are listed first. A distro series can have
thousands of upstream packaging links. The view provides a batch navigator
to access the packagings. The default batch size is 20.

    >>> batch_navigator = view.cached_packagings
    >>> batch_navigator.default_size
    20

    >>> print batch_navigator.heading
    packagings

    >>> for packaging in batch_navigator.batch:
    ...     print packaging.sourcepackagename.name
    netapplet
    evolution


Distro series +needs-packaging view
-----------------------------------

The +needs-packaging view lists the source packages that needs packaging
links to an upstream project.

    >>> view = create_initialized_view(hoary, name='+needs-packaging')
    >>> print view.label
    Packages that need upstream packaging links

    >>> print view.page_title
    Needs upstream links

The view provides the cached_unlinked_packages property to access a
`BatchNavigator` of `ISourcePackages`.

    >>> batch_navigator = view.cached_unlinked_packages
    >>> batch_navigator.default_size
    20

    >>> print batch_navigator.heading
    packages

    >>> for summary in batch_navigator.batch:
    ...     print summary['package'].name
    pmount
    alsa-utils
    cnews
    libstdc++
    linux-source-2.6.15
    thunderbird
    hot
