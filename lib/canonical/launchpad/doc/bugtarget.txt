= Bug Targets =

A bug target is a thing on which a bug can be reported, e.g., an
IDistributionSourcePackage, an IProduct, etc.


== Bug Tasks on Bug Targets ==

Bug targets have a bugtargetdisplayname attribute, which returns a value
tailored for human reading (e.g. display in Web pages); and a bugtargetname
attribute, which returns a value tailored for unique identification of the
target (such as in filterable e-mail messages).

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.interfaces import (
    ...     IBugTarget, IDistributionSet, IProductSet)
    >>> distroset = getUtility(IDistributionSet)
    >>> debian = distroset.getByName("debian")
    >>> debian_firefox = debian.getSourcePackage("mozilla-firefox")
    >>> firefox = getUtility(IProductSet).getByName("firefox")
    >>> firefox_1_0 = firefox.getSeries("1.0")
    >>> debian_woody = debian.getSeries("woody")
    >>> debian_woody_firefox = debian_woody.getSourcePackage("mozilla-firefox")

    >>> IBugTarget.providedBy(firefox)
    True
    >>> IBugTarget.providedBy(firefox_1_0)
    True
    >>> IBugTarget.providedBy(debian)
    True
    >>> IBugTarget.providedBy(debian_firefox)
    True
    >>> IBugTarget.providedBy(debian_woody)
    True
    >>> IBugTarget.providedBy(debian_woody_firefox)
    True

    >>> print firefox.bugtargetdisplayname
    Mozilla Firefox
    >>> print firefox.bugtargetname
    firefox
    >>> print firefox_1_0.bugtargetdisplayname
    Mozilla Firefox 1.0
    >>> print firefox_1_0.bugtargetname
    firefox/1.0
    >>> print debian.bugtargetdisplayname
    Debian
    >>> print debian.bugtargetname
    debian
    >>> print debian_firefox.bugtargetdisplayname
    mozilla-firefox (Debian)
    >>> print debian_firefox.bugtargetname
    mozilla-firefox (Debian)
    >>> print debian_woody.bugtargetdisplayname
    Debian Woody
    >>> print debian_woody_firefox.bugtargetdisplayname
    mozilla-firefox (Debian Woody)
    >>> print debian_woody_firefox.bugtargetname
    mozilla-firefox (Debian Woody)


== Official Bug Tags ==

Distributions and products can define official bug tags.

    >>> from canonical.launchpad.webapp.interfaces import (
    ...     IStoreSelector, MAIN_STORE, DEFAULT_FLAVOR)
    >>> from canonical.launchpad.database.bugtarget import OfficialBugTag
    >>> store = getUtility(IStoreSelector).get(MAIN_STORE, DEFAULT_FLAVOR)

    >>> ubuntu = distroset.getByName('ubuntu')
    >>> distro_tag = OfficialBugTag()
    >>> distro_tag.tag = u'PCI'
    >>> distro_tag.target = ubuntu
    >>> store.add(distro_tag)
    <canonical.launchpad.database.bugtarget.OfficialBugTag object at...

    >>> product_tag = OfficialBugTag()
    >>> product_tag.tag = u'bar'
    >>> product_tag.target = firefox
    >>> store.add(product_tag)
    <canonical.launchpad.database.bugtarget.OfficialBugTag object at...

We can add the same bug tag for different products and distributions.

    >>> distro_tag2 = OfficialBugTag()
    >>> distro_tag2.tag = u'foo'
    >>> distro_tag2.distribution = ubuntu
    >>> store.add(distro_tag2)
    <canonical.launchpad.database.bugtarget.OfficialBugTag object at...
    >>> store.flush()

But bug tags must be unique for each product and distribution.

    >>> distro_tag3 = OfficialBugTag()
    >>> distro_tag3.tag = u'PCI'
    >>> distro_tag3.distribution = ubuntu
    >>> store.add(distro_tag3)
    <canonical.launchpad.database.bugtarget.OfficialBugTag object at...
    >>> store.flush()
    Traceback (most recent call last):
    IntegrityError: duplicate key value violates unique constraint
    "officialbugtag__distribution__tag__key"

    >>> import transaction
    >>> transaction.abort()


== Targets of official bug tags ==

Distribution owners and other persons with the permission launchpad.Edit
can add and remove offical bug tags by calling addOfficialBugTag() resp.
removeOfficialBugTag().

    >>> login('colin.watson@ubuntulinux.com')
    >>> ubuntu.addOfficialBugTag(u'foo')
    >>> ubuntu.addOfficialBugTag(u'bar')
    >>> result_set = store.find(
    ...     OfficialBugTag, OfficialBugTag.distribution==ubuntu)
    >>> result_set.order_by(OfficialBugTag.tag)
    <storm.store.ResultSet object at...
    >>> for tag in result_set:
    ...     print tag.tag
    bar
    foo

    >>> ubuntu.removeOfficialBugTag(u'foo')
    >>> result_set = store.find(
    ...     OfficialBugTag, OfficialBugTag.distribution==ubuntu)
    >>> for tag in result_set:
    ...     print tag.tag
    bar

    >>> login('test@canonical.com')
    >>> firefox.addOfficialBugTag(u'foo')
    >>> result_set = store.find(
    ...     OfficialBugTag, OfficialBugTag.product==firefox)
    >>> for tag in result_set:
    ...     print tag.tag
    foo

    >>> firefox.removeOfficialBugTag(u'foo')
    >>> result_set = store.find(
    ...     OfficialBugTag, OfficialBugTag.product==firefox)
    >>> print result_set.count()
    0

    >>> transaction.commit()

Ordinary users cannot add and remove official bug tags.

    >>> login('no-priv@canonical.com')
    >>> ubuntu.addOfficialBugTag(u'foo')
    Traceback (most recent call last):
    ...
    Unauthorized: (<Distribution at ...>, 'addOfficialBugTag',
    'launchpad.Edit')

    >>> ubuntu.removeOfficialBugTag(u'foo')
    Traceback (most recent call last):
    ...
    Unauthorized: (<Distribution at ...>, 'removeOfficialBugTag',
    'launchpad.Edit')

    >>> firefox.addOfficialBugTag(u'foo')
    Traceback (most recent call last):
    ...
    Unauthorized: (<Product at ...>, 'addOfficialBugTag', 'launchpad.Edit')

    >>> firefox.removeOfficialBugTag(u'foo')
    Traceback (most recent call last):
    ...
    Unauthorized: (<Product at ...>, 'removeOfficialBugTag', 'launchpad.Edit')
