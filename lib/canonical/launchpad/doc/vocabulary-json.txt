= View to export Vocabularies as  JSON =

This view provides a simple means for AJAX widgets to retrieve vocabulary
entries until vocabularies are integrated into the REST API.

    >>> from canonical.launchpad.interfaces.launchpad import ILaunchpadRoot
    >>> import simplejson
    >>> from urllib import urlencode
    >>> root = getUtility(ILaunchpadRoot)
    >>> def print_json(json):
    ...     data = simplejson.loads(json)
    ...     print simplejson.dumps(data, sort_keys=True, indent=4)
    >>> def create_vocabulary_view(form, context=root):
    ...     # The BatchNavigator looks in the query string for GET requests.
    ...     query_string = urlencode(form)
    ...     return create_view(context, '+huge-vocabulary',
    ...                        form=form, query_string=query_string)

The view requires the name of the vocabulary.

    >>> view = create_vocabulary_view({})
    >>> print_json(view())
    Traceback (most recent call last):
    ...
    MissingInputError: ('name', '', None)

Since it is exporting huge vocabularies, it requires a search term.

    >>> form = dict(name='ValidPerson')
    >>> view = create_vocabulary_view(form)
    >>> print_json(view())
    Traceback (most recent call last):
    ...
    MissingInputError: ('search_text', '', None)

The name must be a valid vocabulary.

    >>> form = dict(name='invalid-vocabulary', search_text='foo')
    >>> view = create_vocabulary_view(form)
    >>> print_json(view())
    Traceback (most recent call last):
    ...
    UnexpectedFormData: Unknown vocabulary 'invalid-vocabulary'

To use the new disclosure functionality, we need to turn on the feature flag.
    >>> from lp.services.features.testing import FeatureFixture
    >>> feature_flag = {'disclosure.picker_enhancements.enabled': 'on'}
    >>> flags = FeatureFixture(feature_flag)
    >>> flags.setUp()

A successful search.

    >>> form = dict(name='ValidPersonOrTeam', search_text='guadamen')
    >>> view = create_vocabulary_view(form)
    >>> print_json(view())
    {
        "entries": [
            {
                "alt_title": "guadamen",
                "alt_title_link": "http://launchpad.dev/~guadamen",
                "api_uri": "/~guadamen",
                "css": "sprite team",
                "link_css": "js-action",
                "title": "GuadaMen",
                "value": "guadamen"
            }
        ],
        "total_size": 1
    }

Multiple entries.

    >>> form = dict(name='ValidPersonOrTeam', search_text='admin')
    >>> view = create_vocabulary_view(form)
    >>> result = simplejson.loads(view())
    >>> result['total_size']
    6
    >>> len(result['entries'])
    5

Size and offset parameters can be passed in to switch between batches.

    >>> form = dict(name='ValidPersonOrTeam', search_text='admin',
    ...             start='0', batch='1')
    >>> view = create_vocabulary_view(form)
    >>> print_json(view())
    {
        "entries": [
            {
                "alt_title": "admins",
                "alt_title_link": "http://launchpad.dev/~admins",
                "api_uri": "/~admins",
                "css": "sprite team",
                "link_css": "js-action",
                "title": "Launchpad Administrators",
                "value": "admins"
            }
        ],
        "total_size": 6
    }

    >>> form = dict(name='ValidPersonOrTeam', search_text='admin',
    ...             start='1', batch='1')
    >>> view = create_vocabulary_view(form)
    >>> print_json(view())
    {
        "entries": [
            {
                "alt_title": "name16",
                "alt_title_link": "http://launchpad.dev/~name16",
                "api_uri": "/~name16",
                "css": "sprite person",
                "description": "<email address hidden>",
                "link_css": "js-action",
                "title": "Foo Bar",
                "value": "name16"
            }
        ],
        "total_size": 6
    }

If a person is affiliated with the view context, the relevant badge(s) will be
included in the picker entry.

    >>> from zope.component import getUtility
    >>> from lp.bugs.interfaces.bugtask import IBugTaskSet
    >>> bugtask = getUtility(IBugTaskSet).get(2)
    >>> form = dict(name='ValidPersonOrTeam', search_text='name12',
    ...             start='0', batch='1')
    >>> view = create_vocabulary_view(form, context=bugtask)
    >>> print_json(view())
    {
        "entries": [
            {
                "alt_title": "name12",
                "alt_title_link": "http://launchpad.dev/~name12",
                "api_uri": "/~name12",
                "badges": [
                     {
                         "alt": "Product affiliation",
                         "url": "/@@/product-badge"
                     }
                 ],
                "css": "sprite person",
                "description": "<email address hidden>",
                "link_css": "js-action",
                "title": "Sample Person",
                "value": "name12"
            }
        ],
        "total_size": 1
    }

Long descriptions will be truncated.

    >>> form = dict(name='ProjectGroup', search_text='apache')
    >>> view = create_vocabulary_view(form)
    >>> print_json(view())
    {
        "entries": [
            {
                "api_uri": "/apache",
                "css": "sprite project",
                "description": "The Apache projects are characterized by...
                "title": "Apache",
                "value": "apache"
            }
        ],
        "total_size": 1
    }

Hidden email addresses should also be hidden when IPerson objects are
retrieved through vocabularies.

    >>> form = dict(name='ValidPersonOrTeam', search_text='name12',
    ...             start='0', batch='1')
    >>> view = create_vocabulary_view(form)
    >>> print_json(view())
    {
        "entries": [
            {
                "alt_title": "name12",
                "alt_title_link": "http://launchpad.dev/~name12",
                "api_uri": "/~name12",
                "css": "sprite person",
                "description": "<email address hidden>",
                "link_css": "js-action",
                "title": "Sample Person",
                "value": "name12"
            }
        ],
        "total_size": 1
    }

IRC nicknames should be displayed after any email address.

    >>> form = dict(name='ValidPersonOrTeam', search_text='mark',
    ...             start='0', batch='1')
    >>> view = create_vocabulary_view(form)
    >>> print_json(view())
    {
        "entries": [
            {
                "alt_title": "mark",
                "alt_title_link": "http://launchpad.dev/~mark",
                "api_uri": "/~mark",
                "css": "sprite person",
                "description": "<email address hidden> (mark on irc.freenode.net)",
                "link_css": "js-action",
                "title": "Mark Shuttleworth",
                "value": "mark"
            }
        ],
        "total_size": 1
    }

Clean up the feature flag.
    >>> flags.cleanUp()
