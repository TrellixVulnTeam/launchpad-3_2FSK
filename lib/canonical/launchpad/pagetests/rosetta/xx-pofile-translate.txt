= Translation Submissions =

This pagetest is used to check general behaviour of IPOFile translation
submissions.

For specific tests, you can see:

  xx-pofile-translate-empty-strings-without-validation.txt
  xx-pofile-translate-gettext-error-middle-page.txt
  xx-pofile-translate-html-tags-escape.txt
  xx-pofile-translate-lang-direction.txt
  xx-pofile-translate-message-filtering.txt
  xx-pofile-translate-newlines-check.txt


== Anonymous access ==

Anonymous users are able to browse translations, but not to change them through
the translation form.

  >>> browser.open(
  ...     'http://launchpad.dev/ubuntu/hoary/+source/evolution/'
  ...     '+pots/evolution-2.2/es/+translate')
  >>> browser.url
  'http://launchpad.dev/ubuntu/hoary/+source/evolution/+pots/evolution-2.2/es/+translate'

The page is rendered in read-only mode, without any textareas for input.

  >>> main_content = find_tag_by_id(browser.contents, 'messages_to_translate')
  >>> for textarea in main_content.findAll('textarea'):
  ...     print 'Found textarea:\n%s' % textarea

In fact, no input widgets at all are displayed.

  >>> for input in main_content.findAll('input'):
  ...     print 'Found input:\n%s' % input

Rendering the form in read-only mode does not actually stop an anonymous
visitor (e.g. a spam bot, or a user whose login has expired) from submitting
data.  That part is more convenience than security.  The server does not
remember what form it provided to which requester.

Separately from that, however, the form also rejects anonymous POST
submissions.

  >>> print http(r"""
  ... POST /ubuntu/hoary/+source/evolution/+pots/evolution-2.2/es/+translate HTTP/1.1
  ... """)
  HTTP/1.1 500 Internal Server Error
  ...
  ...UnexpectedFormData: Anonymous users cannot do POST submissions...


== Form elements ==

Because the server does not remember what forms it served to whom, it is
essential that every form element identifier provide all the context the
server needs to find back the objects it relates to.  These HTML identifiers
are created in several places in the code and parsed in yet other places, so
they must adhere religiously to an agreed-to format.

  >>> browser.addHeader('Authorization', 'Basic carlos@canonical.com:test')
  >>> browser.open("http://translations.launchpad.dev/"
  ...              "ubuntu/hoary/+source/evolution/+pots/evolution-2.2/en_AU/"
  ...              "+translate?field.alternative_language=es")
  >>> browser.url
  'http://translations.launchpad.dev/ubuntu/hoary/+source/evolution/+pots/evolution-2.2/en_AU/+translate?field.alternative_language=es'

Elements related 1:1 to a translatable message on this form have names and
identifiers constructed as "msgset_<id>," where <id> is the unpadded decimal
id of their POTMsgSet.  The singular form, which plays a special role, has a
suffix 'singular' appended.  We'll see other suffixes later.

  >>> browser.contents
  '...id="msgset_130"...
  ...name="msgset_130"...
  ...id="msgset_130_singular"...

HTML element identifiers for suggestions and translations on this form are
constructed as an underscore-separated sequence of:

 * the string 'msgset';
 * the id for the POTMsgSet they pertain to;
 * language code, e.g. 'en_UK';
 * type, either 'translation' or 'suggestion';
 * plural-form number;
 * optional suffix describing the element, such as 'radiobutton.'

  >>> browser.contents
  '...
  id="msgset_130_es_suggestion_565_0"
  ...
  id="msgset_130_en_AU_translation_0_new_select"
  ...'

  >>> find_tag_by_id(browser.contents, 'msgset_130_es_suggestion_565_0')
  <...  id="msgset_130_es_suggestion_565_0"
  ...

There are many variants of this id structure, generated in several places and
for several objects, all generated by the same methods.

  >>> browser.open('http://launchpad.dev/ubuntu/hoary/+source/evolution/+pots/evolution-2.2/es/5/+translate')
  >>> find_tag_by_id(
  ...     browser.contents, 'msgset_134_es_suggestion_568_0').renderContents()
  '...tarjetas'

