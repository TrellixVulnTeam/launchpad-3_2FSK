= Asking a New Question from a Project =

Even if projects are not QuestionTargets, it is still possible to create a
question from a project.

The user must login to proceed:

    >>> browser.open('http://answers.launchpad.dev/mozilla')
    >>> browser.getLink('Ask a question').click()
    Traceback (most recent call last):
      ...
    Unauthorized...

    >>> from zope.testbrowser.testing import Browser
    >>> user_browser = Browser()
    >>> user_browser.addHeader('Authorization', 'Basic daf@canonical.com:daf')
    >>> user_browser.open('http://answers.launchpad.dev/mozilla')
    >>> user_browser.getLink('Ask a question').click()
    >>> print user_browser.title
    Ask a question about a project in the Mozilla Project

The workflow is identical to the regular one, except that the user has
to select the project's product for which a question is asked .

    >>> print user_browser.getControl('Project').displayOptions
    ['Mozilla Firefox', 'Mozilla Thunderbird']

Like for the regular workflow, the user enter a short summary of his
problem in the language of his choice. Note that only English is listed
as supported--Projects are not QuestionTargets can thus we cannot show
the full list of supported languages until after a Product is selected

    >>> user_browser.getControl('Project').value = ['firefox']
    >>> print user_browser.getControl('Language').displayOptions
    ['English (en) *', 'Welsh (cy)', 'Japanese (ja)']
    >>> user_browser.getControl('Language').value = ['en']
    >>> user_browser.getControl('Summary').value = (
    ...     'Problem displaying complex SVG')
    >>> user_browser.getControl('Continue').click()

He's shown a list of similar questions in the product selected:

    >>> similar_questions = find_tag_by_id(
    ...     user_browser.contents, 'similar-questions')
    >>> for row in similar_questions.fetch('tr', 'noted'):
    ...     print row.a.renderContents()
    Problem showing the SVG demo on W3C site

The list of supported languages matches the selected product.

    >>> print user_browser.getControl('Project').displayValue
    ['Mozilla Firefox']
    >>> print user_browser.getControl('Language').displayOptions
    ['English (en) *', 'Welsh (cy)', 'Japanese (ja)']
    
The user can still change the product against which he's asking the
question.

    >>> user_browser.getControl('Mozilla Thunderbird').selected = True
    
The list of supported languages matches the selected product.

    >>> print user_browser.getControl('Language').displayOptions
    ['English (en) *', 'Welsh (cy)', 'Japanese (ja)']
    
If he empties the title, he'll get redirected to the first page.

    >>> user_browser.getControl('Summary').value = ''
    >>> user_browser.getControl('Add').click()

An error will inform him that the summary is missing:

    >>> from BeautifulSoup import BeautifulSoup
    >>> soup = BeautifulSoup(user_browser.contents)
    >>> print soup.first('div', 'message').renderContents()
    You must enter a summary of your problem.

The newly selected product is still selected, and the list of supported
languages matches the product. When the user enters his problem
again, similar questions against that product will be shown.

    >>> print user_browser.getControl('Project').displayValue
    ['Mozilla Thunderbird']
    >>> print user_browser.getControl('Language').displayOptions
    ['English (en) *', 'Welsh (cy) *', 'Japanese (ja) *']    
    
    >>> user_browser.getControl('Project').value = ['thunderbird']
    >>> user_browser.getControl('Summary').value = (
    ...     'Problem displaying complex SVG')
    >>> user_browser.getControl('Continue').click()

Since there are no similar questions against Thunderbird, an appropriate
message is displayed:

    >>> soup = BeautifulSoup(user_browser.contents)
    >>> print soup.first('p').renderContents()
    There are no existing questions similar to the summary you entered.

Entering a description and clicking the 'Add' button will create the
question.

    >>> user_browser.getControl('Description').value = (
    ... "I received an HTML message containing an inlined SVG\n"
    ... "representation of a chessboard. It didn't displayed properly.\n"
    ... "Is there a way to configure Thunderbird to display SVG properly?\n")
    >>> user_browser.getControl('Add').click()
    >>> user_browser.url
    '.../thunderbird/+ticket/...'
    >>> print user_browser.title
    Mozilla Thunderbird question #...Problem displaying complex...
