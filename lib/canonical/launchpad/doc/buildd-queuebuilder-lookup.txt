= Build Candidates Lookup =


IDistroSeries.getSourcesPublishedForAllArchives method is used for
Build System, precisely for 'queue-builder' part, to retrieve the
sources publications that should be considered on it checks.

'queue-builder' will verify if each retrieved publication has the
respective Build/BuildQueue records according their DSC and P-a-s
information. See further details in buildd-queuebuilder.txt.

In this test we will simply verify if the IDistroSeries method is
returning the expected records.


First, we will create some functions to help creating and inspecting
publications for a given distroseries:

    >>> from canonical.database.constants import UTC_NOW
    >>> from canonical.launchpad.database.publishing import (
    ...      SecureSourcePackagePublishingHistory)
    >>> from canonical.lp.dbschema import (
    ...     PackagePublishingStatus, PackagePublishingPocket)
    >>> from canonical.launchpad.interfaces import (
    ...     IPersonSet, IDistributionSet)

    >>> ubuntu = getUtility(IDistributionSet)['ubuntu']
    >>> cprov = getUtility(IPersonSet).getByName('cprov')

    >>> dspr = ubuntu.getSourcePackage('mozilla-firefox')['0.9']
    >>> the_spr = dspr.sourcepackagerelease

    >>> initial_candidates = []

Creating a single source publishing record:

    >>> def createPublication(distroseries, pocket, archive, status):
    ...     SecureSourcePackagePublishingHistory(
    ...         sourcepackagerelease=the_spr, component=the_spr.component,
    ...         section=the_spr.section, datecreated=UTC_NOW, embargo=False,
    ...         distroseries=distroseries, status=status,
    ...         pocket=pocket, archive=archive)

Create a collection of source publishing records in different
archives, pockets and statuses. This function creates:

 * 1 PUBLISHED and 1 PENDING records in RELEASE pocket, main_archive;
 * 1 PUBLISHED and 1 PENDING records in UPDATES pocket, main_archive;
 * 1 PUBLISHED and 1 PENDING records in RELEASE pocket, PPA archive;

    >>> def createSamplePublications(distroseries):
    ...      createPublication(
    ...           distroseries, PackagePublishingPocket.RELEASE,
    ...           distroseries.main_archive, PackagePublishingStatus.PUBLISHED)
    ...      createPublication(
    ...           distroseries, PackagePublishingPocket.RELEASE,
    ...           distroseries.main_archive, PackagePublishingStatus.PENDING)
    ...      createPublication(
    ...           distroseries, PackagePublishingPocket.UPDATES,
    ...           distroseries.main_archive, PackagePublishingStatus.PUBLISHED)
    ...      createPublication(
    ...           distroseries, PackagePublishingPocket.UPDATES,
    ...           distroseries.main_archive, PackagePublishingStatus.PENDING)
    ...      createPublication(
    ...           distroseries, PackagePublishingPocket.RELEASE,
    ...           cprov.archive, PackagePublishingStatus.PUBLISHED)
    ...      createPublication(
    ...           distroseries, PackagePublishingPocket.RELEASE,
    ...           cprov.archive, PackagePublishingStatus.PENDING)

This function will store previous publishing records that will be
ignored later when inspecting the test results (sampledata already
contains other records that are not relevant for this test).

    >>> def resetCandidates(distroseries):
    ...      global initial_candidates
    ...      initial_candidates =  [
    ...          pub.id for pub in
    ...          distroseries.getSourcesPublishedForAllArchives()]


Inspect IDistroSeries.getSourcesPublishedForAllArchives ignoring
previous results and printing a lines containing:

   <STATUS> <POCKET> <IS_MAIN_ARCHIVE>

for each new publishing record.

    >>> def inspectNewCandidates(distroseries):
    ...     global initial_candidates
    ...     for pub in distroseries.getSourcesPublishedForAllArchives():
    ...         if pub.id in initial_candidates:
    ...             continue
    ...         is_main = pub.archive == pub.distroseries.main_archive
    ...         print pub.status.name, pub.pocket.name, is_main

Finally, a shortcut to do all the dirty-job:

    >>> def probeCandidates(distroseries):
    ...     resetCandidates(distroseries)
    ...     createSamplePublications(distroseries)
    ...     inspectNewCandidates(distroseries)


== CURRENT DistroSeries ==

For a distroseries in CURRENT state, which means STABLE, we expect to
retrieve the following publications:

 * All PPA publications (even those targeted to the RELEASE
   pocket, since we don't allow post-release pocket in PPA).
 * Only those targeted to post-release pockets (UPDATES, SECURITY,
   BACKPORTS and PROPOSED) in main_archive (default ubuntu archive)


    >>> warty = ubuntu['warty']
    >>> warty.status.name
    'CURRENT'

Note that, the records targeted to RELEASE pocket were ignored, only
records targeted to post-release pocket in main_archive are returned.

Both PUBLISHED and PENDING publication records are returned, this is
important to accomplish building-accepted-sources specification:

   https://launchpad.net/soyuz/+spec/build-unpublished-source

This will give us only 4 of the test publications:

    >>> probeCandidates(warty)
    PUBLISHED UPDATES True
    PENDING UPDATES True
    PUBLISHED RELEASE False
    PENDING RELEASE False


== DEVELOPMENT DistroSeries ==

For a distroseries in DEVELOPMENT state, which means UNSTABLE, we
expect to retrieve the following publications:

 * All PPA publications
 * All main_archive publication, including RELEASE and post-release pockets

    >>> hoary = ubuntu['hoary']
    >>> hoary.status.name
    'DEVELOPMENT'

Note that, also the publications targeted to post-release pockets are
returned, but they won't be dispatched until they can be accepted (see
IDistroSeries.canUploadToPocket). This nuance will be more explored
when fixing #67790 when we will start publishing and building
post-release pocket in FROZEN state.

Summing up, all the 6 test publications will be returned from the lookup:

    >>> probeCandidates(hoary)
    PUBLISHED RELEASE True
    PENDING RELEASE True
    PUBLISHED UPDATES True
    PENDING UPDATES True
    PUBLISHED RELEASE False
    PENDING RELEASE False

