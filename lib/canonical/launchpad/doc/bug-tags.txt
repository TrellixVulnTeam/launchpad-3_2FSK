= Bug tags =

In order to arbitrary group bugs together a bug can be associated with
one or more tags. A tag is a simple text string, not contain a space
character. The tags are available as a list of strings on the bug:

    >>> from canonical.launchpad.interfaces import IBugSet
    >>> bug_one = getUtility(IBugSet).get(1)

There are no tags currently, so let's add some:

    >>> bug_one.tags
    []

    >>> login('test@canonical.com')
    >>> bug_one.tags = [u'svg', u'sco']
    >>> bug_one.tags
    [u'svg', u'sco']

Under the hood the tags are stored in a different table. If we take a
look at it we can see that the added tags are there.

    >>> from canonical.launchpad.database.bug import BugTag
    >>> bugtags = BugTag.selectBy(bugID=bug_one.id, orderBy='tag')
    >>> for bugtag in bugtags:
    ...     print bugtag.tag
    sco
    svg

So if we add another tag by setting the 'tags' attribute to a new list.
The tag will be added in the table.

    >>> bug_one.tags = [u'svg', u'sco', u'installl']
    >>> bug_one.tags
    [u'svg', u'sco', u'installl']

    >>> bugtags = BugTag.selectBy(bugID=bug_one.id, orderBy='tag')
    >>> for bugtag in bugtags:
    ...     print bugtag.tag
    installl
    sco
    svg

Let's correct the spelling mistake we did and delete one of the tags:

    >>> bug_one.tags = [u'sco', u'install']
    >>> bug_one.tags
    [u'sco', u'install']

    >>> bugtags = BugTag.selectBy(bugID=bug_one.id, orderBy='tag')
    >>> for bugtag in bugtags:
    ...     print bugtag.tag
    install
    sco

The ordering of the tags are preserved:

    >>> bug_one.tags = [u'install', u'sco']
    >>> bug_one.tags
    [u'install', u'sco']

== Widgets ==

To make it easy editing the tags as a space separated text string, we
use BugTagsWidget.

    >>> from zope.publisher.browser import TestRequest
    >>> from canonical.launchpad.interfaces import IBug
    >>> from canonical.widgets.bug import BugTagsWidget
    >>> bug_tags_field = IBug['tags']
    >>> request = TestRequest()
    >>> tags_widget = BugTagsWidget(bug_tags_field.bind(bug_one), request)

Since we didn't provided a value in the request, the form value will be
empty:

    >>> tags_widget._getFormValue()
    u''

If we set the value to bug one's tags, it will be a space separated
string:

    >>> tags_widget.setRenderedValue(bug_one.tags)
    >>> tags_widget._getFormValue()
    u'install sco'

If we pass in a value via the request, we'll be able to get the tags as
a list through getInputValue():

    >>> request = TestRequest(form={'field.tags': u'svg sco'})
    >>> tags_widget = BugTagsWidget(bug_tags_field.bind(bug_one), request)
    >>> tags_widget._getFormValue()
    u'svg sco'
    >>> tags_widget.getInputValue()
    [u'svg', u'sco']

When we have an input value, the widget can edit the bug tags.

    >>> bug_one.tags
    [u'install', u'sco']
    >>> tags_widget.applyChanges(bug_one)
    True
    >>> bug_one.tags
    [u'svg', u'sco']

Let's take a closer look at _toFormValue() to ensure that it works
properly:

    >>> tags_widget._toFormValue([])
    u''
    >>> tags_widget._toFormValue(['foo'])
    u'foo'
    >>> tags_widget._toFormValue(['foo bar'])
    u'foo bar'

And _toFieldValue():

    >>> tags_widget._toFieldValue(u'')
    []
    >>> tags_widget._toFieldValue(u'foo')
    [u'foo']
    >>> tags_widget._toFieldValue(u'foo bar')
    [u'foo', u'bar']
    >>> tags_widget._toFieldValue(u'foo             bar')
    [u'foo', u'bar']
