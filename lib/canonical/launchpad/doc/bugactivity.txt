= Bug Activity =

Bugs are problems that occur in software. In Malone, various things can be
added to, edited and removed from a bug over the course of a bug's lifetime. We
call this stuff bug activity. This document is about bug activity.

Each activity can happen more than once to a bug over the course of its
lifetime. For auditing reasons, it's useful to track when these happen, why
these things happen, and who made them happen.

This file contains old tests for bug activity. New tests are in
tests/test_bugchanges.py.

Before going any further--because editing a bug requires an
authenticated user--let's login:

    >>> login("test@canonical.com")

Bug activity tracking is done using event subscribers. The handlers
are simple little functions.

    >>> from zope.event import notify
    >>> from lazr.lifecycle.event import (
    ...     ObjectCreatedEvent, ObjectModifiedEvent)
    >>> from canonical.launchpad.interfaces import (
    ...     IUpstreamBugTask, IDistroBugTask, IProductSet, IBugTaskSet)
    >>> from lazr.lifecycle.snapshot import Snapshot
    >>> user = getUtility(ILaunchBag).user


== User files a bug ==

    >>> from canonical.launchpad.interfaces import CreateBugParams
    >>> firefox = getUtility(IProductSet)['firefox']
    >>> params = CreateBugParams(
    ...     title="a test bug",
    ...     comment="this is only a test bug\nplease ignore",
    ...     owner=user)
    >>> bug = firefox.createBug(params)
    >>> bug.activity.count()
    0
    >>> object_created = ObjectCreatedEvent(bug)
    >>> notify(object_created)
    >>> latest_activity = bug.activity[-1]
    >>> latest_activity.person == user
    True
    >>> latest_activity.whatchanged
    u'bug'
    >>> latest_activity.message
    u'added bug'


== Bug title edited ==

    >>> from canonical.launchpad.interfaces import IBug
    >>> old_state = Snapshot(bug, providing=IBug)
    >>> bug.title = "new bug title"
    >>> bug_edited = ObjectModifiedEvent(
    ...     bug, old_state, ["title", "description"])
    >>> notify(bug_edited)
    >>> latest_activity = bug.activity[-1]
    >>> latest_activity.whatchanged
    u'summary'
    >>> latest_activity.oldvalue
    u'a test bug'
    >>> latest_activity.newvalue
    u'new bug title'


== Source package assignment edited ==

    >>> from lazr.lifecycle.snapshot import Snapshot
    >>> from canonical.launchpad.interfaces import BugTaskStatus
    >>> from canonical.launchpad.interfaces import (
    ...     ISourcePackageNameSet, IDistributionSet)
    >>> mozilla_firefox = getUtility(ISourcePackageNameSet)['mozilla-firefox']
    >>> ubuntu = getUtility(IDistributionSet).getByName('ubuntu')
    >>> source_package_assignment = getUtility(IBugTaskSet).createTask(
    ...     bug=bug, sourcepackagename=mozilla_firefox,
    ...     distribution=ubuntu,owner=user)
    >>> edit_fields = [
    ...     "distribution", "sourcepackagename", "milestone", "status",
    ...     "importance", "assignee", "bugwatch"]
    >>> old_source_package_assignment = Snapshot(
    ...   source_package_assignment, providing=IDistroBugTask)
    >>> source_package_assignment.transitionToStatus(
    ...     BugTaskStatus.CONFIRMED, getUtility(ILaunchBag).user)
    >>> source_package_assignment_edited = ObjectModifiedEvent(
    ...     source_package_assignment, old_source_package_assignment,
    ...     edit_fields)
    >>> notify(source_package_assignment_edited)
    >>> latest_activity = bug.activity[-1]
    >>> latest_activity.whatchanged
    u'mozilla-firefox (Ubuntu): status'
    >>> latest_activity.oldvalue == BugTaskStatus.NEW.title
    True
    >>> latest_activity.newvalue == BugTaskStatus.CONFIRMED.title
    True


== Upstream product assignment edited ==

    >>> product_assignment = getUtility(IBugTaskSet).createTask(
    ...   bug=bug, product=getUtility(IProductSet)['thunderbird'], owner=user)
    >>> edit_fields = [
    ...     "product", "milestone", "status", "assignee", "bugwatch",
    ...     "importance"]
    >>> old_product_assignment = Snapshot(
    ...     product_assignment, providing=IUpstreamBugTask)
    >>> product_assignment.transitionToStatus(
    ...     BugTaskStatus.INVALID, getUtility(ILaunchBag).user)
    >>> product_assignment_edited = ObjectModifiedEvent(
    ...     product_assignment, old_product_assignment, edit_fields)
    >>> notify(product_assignment_edited)
    >>> latest_activity = bug.activity[-1]
    >>> latest_activity.whatchanged
    u'thunderbird: status'
    >>> latest_activity.oldvalue == BugTaskStatus.NEW.title
    True
    >>> latest_activity.newvalue == BugTaskStatus.INVALID.title
    True


== Bug report is marked as a duplicate of another bug report ==

    >>> edit_fields = [
    ...     "id", "title", "description", "name",
    ...     "private", "duplicateof", "security_related"]
    >>> old_bug = Snapshot(bug, providing=IBug)
    >>> bug.duplicateof = 1
    >>> bug_edited = ObjectModifiedEvent(bug, old_bug, edit_fields)
    >>> notify(bug_edited)
    >>> latest_activity = bug.activity[-1]
    >>> latest_activity.whatchanged
    u'marked as duplicate'
    >>> latest_activity.oldvalue is None
    True
    >>> latest_activity.newvalue == u'1'
    True


== Bug report has itss duplicate marker changed to another bug report ==

    >>> edit_fields = [
    ...     "id", "title", "description", "name", "private", "duplicateof",
    ...     "security_related"]
    >>> old_bug = Snapshot(bug, providing=IBug)
    >>> bug.duplicateof = 2
    >>> bug_edited = ObjectModifiedEvent(bug, old_bug, edit_fields)
    >>> notify(bug_edited)
    >>> latest_activity = bug.activity[-1]
    >>> latest_activity.whatchanged
    u'changed duplicate marker'
    >>> latest_activity.oldvalue == u'1'
    True
    >>> latest_activity.newvalue == u'2'
    True


== The bug report is un-duplicated ==

    >>> edit_fields = [
    ...     "id", "title", "description", "name", "private", "duplicateof",
    ...     "security_related"]
    >>> old_bug = Snapshot(bug, providing=IBug)
    >>> bug.duplicateof = None
    >>> bug_edited = ObjectModifiedEvent(bug, old_bug, edit_fields)
    >>> notify(bug_edited)
    >>> latest_activity = bug.activity[-1]
    >>> latest_activity.whatchanged
    u'removed duplicate marker'
    >>> latest_activity.oldvalue == u'2'
    True
    >>> latest_activity.newvalue is None
    True


== Target a bug task to a milestone ==

    >>> from canonical.launchpad.interfaces import IBugSet
    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> no_priv = getUtility(IPersonSet).getByName('no-priv')
    >>> firefox = getUtility(IProductSet).getByName('firefox')
    >>> firefox_1_0 = firefox.getMilestone('1.0')
    >>> bug_one = getUtility(IBugSet).get(1)
    >>> firefox_task = bug_one.getBugTask(firefox)
    >>> print firefox_task.milestone
    None
    >>> old_bugtask = Snapshot(firefox_task, providing=IUpstreamBugTask)

    >>> firefox_task.milestone = firefox_1_0
    >>> edit_fields = ["milestone"]
    >>> bugtask_edited = ObjectModifiedEvent(
    ...     firefox_task, old_bugtask, edit_fields, user=no_priv)
    >>> notify(bugtask_edited)

    >>> latest_activity = bug_one.activity[-1]
    >>> latest_activity.person.name
    u'no-priv'
    >>> latest_activity.whatchanged
    u'firefox: milestone'
    >>> print latest_activity.oldvalue
    None
    >>> print latest_activity.newvalue
    1.0


== BugActivityItem ==

BugActivityItem implements the stuff that BugActivity doesn't need to
know about.

    >>> import pytz
    >>> from datetime import datetime
    >>> from canonical.launchpad.browser.bugtask import BugActivityItem
    >>> from canonical.launchpad.interfaces import IBugActivitySet

    >>> nowish = datetime(
    ...     2009, 3, 26, 16, 40, 31, tzinfo=pytz.timezone('UTC'))
    >>> activity = getUtility(IBugActivitySet).new(
    ...     bug=bug_one, whatchanged='summary', oldvalue='Old value',
    ...     newvalue='New value', person=user, datechanged=nowish)
    >>> activity_item = BugActivityItem(activity)

The BugActivityItem offers properties that can be used to render the
activity sensibly in an HTML interface. In most cases it just returns
activity.whatchanged.

    >>> print activity_item.change_summary
    summary

Summary changes are represented as unified diffs in the interface, in
the same way as they are in notifications. To ensure they display
properly in the UI, they're returned with newline characters replaces
with HTML line-breaks.

    >>> print activity_item.change_details
    - Old value<br />+ New value

BugActivityItem delegates to IBugActivity, so we can still access the
original BugActivity's properties if we want.

    >>> print "%s: %s => %s" % (
    ...     activity_item.whatchanged, activity_item.oldvalue,
    ...     activity_item.newvalue)
    summary: Old value => New value

For simpler changes, activity_item.change_details will simply return the
change in the form old_value -> new_value. The arrow will be represented
by the unicode character &#8594;.

    >>> activity = getUtility(IBugActivitySet).new(
    ...     bug=bug_one, whatchanged='security vulnerability',
    ...     oldvalue='no', newvalue='yes', person=user,
    ...     datechanged=nowish)
    >>> activity_item = BugActivityItem(activity)

    >>> print activity_item.change_details
    no &#8594; yes

    >>> activity = getUtility(IBugActivitySet).new(
    ...     bug=bug_one, whatchanged='visibility', oldvalue='public',
    ...     newvalue='private', person=user, datechanged=nowish)
    >>> activity_item = BugActivityItem(activity)

    >>> print activity_item.change_details
    public &#8594; private

Tag changes use the _formatted_tags_change property of BugActivityItem
to create a nicely formatted change_details.

    >>> activity = getUtility(IBugActivitySet).new(
    ...     bug=bug_one, whatchanged='tags', oldvalue='tag1 tag2',
    ...     newvalue='tag1 tag3', person=user, datechanged=nowish)
    >>> activity_item = BugActivityItem(activity)
    >>> print activity_item._formatted_tags_change
    added: tag3
    removed: tag2

The change_details value for this change will be that returned by
_formatted_tags_change but with newlines replaced by HTML line-breaks.

    >>> print activity_item.change_details
    added: tag3<br />removed: tag2

For changes to bug tasks, BugActivityItem returns the name of the attribute
that was changed (see "Determining the target and attribute of a
change", below).

    >>> activity = getUtility(IBugActivitySet).new(
    ...     bug=bug_one, whatchanged='malone: status', oldvalue='New',
    ...     newvalue='Triaged', person=user, datechanged=nowish)
    >>> activity_item = BugActivityItem(activity)

    >>> print activity_item.change_summary
    status

The change_details are expressed as a simple change.

    >>> print activity_item.change_details
    New &#8594; Triaged

For assignee changes, BugActivityItem will ensure that old or new values
of None will be converted to the string 'nobody'.

    >>> activity = getUtility(IBugActivitySet).new(
    ...     bug=bug_one, whatchanged='malone: assignee', oldvalue=None,
    ...     newvalue='somebody', person=user, datechanged=nowish)
    >>> activity_item = BugActivityItem(activity)
    >>> print activity_item.change_details
    nobody &#8594; somebody

    >>> activity = getUtility(IBugActivitySet).new(
    ...     bug=bug_one, whatchanged='malone: assignee',
    ...     oldvalue='somebody', newvalue=None, person=user,
    ...     datechanged=nowish)
    >>> activity_item = BugActivityItem(activity)
    >>> print activity_item.change_details
    somebody &#8594; nobody

For changes to a bug's description, we simply return the word 'updated,'
since such changes may be too long to be useful as a diff.

    >>> activity = getUtility(IBugActivitySet).new(
    ...     bug=bug_one, whatchanged='description',
    ...     oldvalue='Old description', newvalue='New description',
    ...     person=user, datechanged=nowish)
    >>> activity_item = BugActivityItem(activity)
    >>> print "%s: %s" % (
    ...     activity_item.change_summary, activity_item.change_details)
    description: updated


=== Determining the target and attribute of a change ===

Some changes - specifically changes to a BugTask - are listed in
BugActivity as targeted changes, i.e. their `whatchanged` string will be
of the form "<target>: <attribute>". BugActivityItem offers two
properties by which to extract these.

BugActivityItem.target will return the <target> part of the whatchanged
string or None if the BugActivity is not targeted to a BugTask.

    >>> activity = getUtility(IBugActivitySet).new(
    ...     bug=bug_one, whatchanged='malone: assignee',
    ...     oldvalue='nobody', newvalue='New Assignee',
    ...     person=user, datechanged=nowish)
    >>> targeted_activity_item = BugActivityItem(activity)
    >>> print targeted_activity_item.target
    malone

    >>> activity = getUtility(IBugActivitySet).new(
    ...     bug=bug_one, whatchanged='description',
    ...     oldvalue='Old description', newvalue='New description',
    ...     person=user, datechanged=nowish)
    >>> untargeted_activity_item = BugActivityItem(activity)
    >>> print untargeted_activity_item.target
    None

BugActivityItem.attribute will return the <attribute> part of the
whatchanged string if the activity is targeted to a BugTask. Otherwise
it will simply return the whole whatchanged string.

    >>> print targeted_activity_item.attribute
    assignee

    >>> print untargeted_activity_item.attribute
    description
