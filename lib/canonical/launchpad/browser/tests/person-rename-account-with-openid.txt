Renaming an account and the OpenID public identifier
====================================================

When you rename an account, you are also changing your delegated OpenID
identity. This means that if you used that identifier to log into a third
party site, there is a chance that you'll lock yourself out of those sites.
It's also possible for somebody to claim your old nickname and then log
into these third party sites using your old identity.

Because of this, we warn users about to rename their account of the risks.

    >>> from zope.app.pagetemplate.viewpagetemplatefile import (
    ...     ViewPageTemplateFile)
    >>> from canonical.launchpad.browser.person import PersonEditView
    >>> from canonical.launchpad.ftests import (
    ...     LaunchpadFormHarness, login_person)

    >>> class TestPersonEditView(PersonEditView):
    ...     template = ViewPageTemplateFile('../../templates/person-edit.pt')
    ...     # XXX flacoste 2008-11-18 bug=44032
    ...     # Unnecessary once LaunchpadFormView uses doom().
    ...     def _abort(self):
    ...         pass

    >>> joe = factory.makePerson(name='joe')
    >>> login_person(joe)
    >>> form_data = {}
    >>> for name in PersonEditView.field_names:
    ...     form_data['field.%s' % name] = getattr(joe, name)
    >>> harness = LaunchpadFormHarness(joe, TestPersonEditView)

If the user didn't ever use OpenID, he can just rename his account as he
wishes:

    >>> form_data['field.name'] = 'new-joe'
    >>> harness.submit('save', form_data)
    >>> harness.hasErrors()
    False
    >>> print joe.name
    new-joe

Same thing if they logged in using OpenID only to known trust roots.

    >>> from canonical.launchpad.interfaces.openidserver import (
    ...     IOpenIDRPConfigSet, IOpenIDRPSummarySet)

    >>> trust_root = getUtility(IOpenIDRPConfigSet).new(
    ...     'https://shop.canonical.com/', 'The Shop', 'For our fans')
    >>> record = getUtility(IOpenIDRPSummarySet).record(
    ...     joe.account, 'https://shop.canonical.com/')

    >>> form_data['field.name'] = 'joe'
    >>> harness.submit('save', form_data)
    >>> harness.hasErrors()
    False
    >>> print joe.name
    joe

But if the user has logged in using OpenID into an unknown trust root, we
assume that they did with the public profile identifier and warn them about
the potential pitfalls of this.

    >>> record = getUtility(IOpenIDRPSummarySet).record(
    ...     joe.account, 'http://sourceforge.net/')
    >>> record = getUtility(IOpenIDRPSummarySet).record(
    ...     joe.account, 'http://my.very.cool.site.com/')

    >>> form_data['field.name'] = 'i-know-what-i-am-doing-joe'
    >>> harness.submit('save', form_data)
    >>> harness.hasErrors()
    True
    >>> print harness.getFieldError('name')
    <div class="inline-warning">
    <p>Changing your name will change your public OpenID
    identifier...  You may have used your identifier on the following 
    sites:<br> http://my.very.cool.site.com/, http://sourceforge.net/.
    ...

The view will now contain an hidden input field allowing the user to confirm
the name change if they click save again:

    >>> from canonical.launchpad.testing.pages import find_tag_by_id
    >>> find_tag_by_id(
    ...     harness.view.render(), 'i_know_this_is_an_openid_security_issue')
    <input type="hidden" 
           id="i_know_this_is_an_openid_security_issue"
           name="i_know_this_is_an_openid_security_issue"
           value="1" />

    >>> form_data['i_know_this_is_an_openid_security_issue'] = 1
    >>> harness.submit('save', form_data)
    >>> harness.hasErrors()
    False
    >>> print joe.name
    i-know-what-i-am-doing-joe

