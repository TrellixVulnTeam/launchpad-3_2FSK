ProductEditPeopleView
=====================

Reassignment to an IPerson
--------------------------

A product can be reassigned to another person. Firefox is owned by Sample
Person (name12).

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.interfaces import IProductSet

    >>> productset = getUtility(IProductSet)
    >>> firefox = productset.getByName('firefox')
    >>> sample_person = firefox.owner
    >>> print sample_person.name
    name12

No Privileges Person is taking over the project, but he cannot access the
view because he is not yet an owner/maintainer or admin.

    >>> from canonical.launchpad.webapp.authorization import check_permission

    >>> login('no-priv@canonical.com')
    >>> view = create_view(firefox, '+edit-people')
    >>> check_permission('launchpad.Edit', view)
    False

Sample person, as the owner/maintainer can change the owner/maintainer
to No Privileges Person.

    >>> login_person(sample_person)
    >>> form = {
    ...     'field.owner': 'no-priv',
    ...     'field.actions.save': 'Save changes',
    ...     }

    >>> view = create_initialized_view(firefox, '+edit-people', form=form)
    >>> view.errors
    []

    >>> firefox.owner.name
    u'no-priv'


Assigning to Registry Administrators
------------------------------------

As a short-cut, a checkbox is presented to disclaim the maintainer
role and transfer it to the Registry Administrators team.

    >>> login_person(sample_person)
    >>> product = factory.makeProduct(owner=sample_person)

    >>> form = {
    ...     'field.transfer_to_registry': 'on',
    ...     'field.actions.save': 'Save changes',
    ...     }

    >>> view = create_initialized_view(product, '+edit-people', form=form)
    >>> view.errors
    []

    >>> product.owner.name
    u'registry'

Not specifying the owner/maintainer nor checking the checkbox is an error.

    >>> form = {
    ...     'field.actions.save': 'Save changes',
    ...     }

    >>> view = create_initialized_view(product, '+edit-people', form=form)
    >>> view.errors
    [u'You must specify a maintainer or select the checkbox.']

Selecting both the owner/maintainer and the checkbox is also an error.

    >>> product = factory.makeProduct(owner=sample_person)
    >>> form = {
    ...     'field.owner': 'no-priv',
    ...     'field.transfer_to_registry': 'on',
    ...     'field.actions.save': 'Save changes',
    ...     }

    >>> view = create_initialized_view(product, '+edit-people', form=form)
    >>> view.errors
    [u'You may not specify a new owner if you select the checkbox.']
