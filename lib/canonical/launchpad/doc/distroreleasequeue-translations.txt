== Upload processing queue with translations ==

This test will check the upload of translations after a build.

First, we do some needed imports.

  >>> from canonical.launchpad.database import (
  ...     ProcessorFamily, Component, GPGKey, Section, Manifest,
  ...     SecureSourcePackagePublishingHistory)
  >>> from canonical.launchpad.interfaces import (
  ...     IDistributionSet, IDistroReleaseSet, ISourcePackageNameSet)
  >>> from canonical.lp.dbschema import PackagePublishingPocket

  >>> from canonical.archivepublisher.nascentupload import NascentUpload
  >>> from canonical.archivepublisher.uploadpolicy import findPolicyByName
  >>> from canonical.archivepublisher.tests import datadir

  >>> class MockLogger:
  ...     def debug(self, s):
  ...         print "DEBUG:", s


  >>> class MockOptions:
  ...     distro = "ubuntu"
  ...     distrorelease = "dapper"


  >>> from canonical.launchpad.ftests import import_public_test_keys
  >>> import_public_test_keys()

  >>> from canonical.lp.dbschema import (
  ... SourcePackageUrgency, PackagePublishingStatus,
  ... PackagePublishingPocket)
  >>> from canonical.database.constants import UTC_NOW

Login as an admin.

  >>> login('foo.bar@canonical.com')

We need to setup our test environment and create the needed objects.

  >>> distro_release_set = getUtility(IDistroReleaseSet)
  >>> ubuntu = getUtility(IDistributionSet)['ubuntu']

  >>> hoary = distro_release_set.queryByName(ubuntu, 'hoary')

Create the Dapper distro release.

  >>> dapper = distro_release_set.new( ubuntu, 'dapper', 'Dapper', 'Dapper',
  ...     'Dapper', 'Dapper', '06.04', hoary, hoary.owner)

And an AMD 64 arch release.

  >>> dapper_amd64 = dapper.newArch('amd64', ProcessorFamily.get(3), True,
  ...     dapper.owner)

We are going to import the pmount build.

  >>> pmount_sourcepackagename = getUtility(ISourcePackageNameSet)['pmount']
  >>> source_package_release = dapper.createUploadedSourcePackageRelease(
  ...     pmount_sourcepackagename, "0.9.7-2ubuntu2", dapper.owner, UTC_NOW,
  ...     None, None, 'i386', Component.get(1), dapper.owner,
  ...     SourcePackageUrgency.LOW, None, None, GPGKey.get(1), Section.get(1),
  ...     Manifest.get(1))

  >>> publishing_history = SecureSourcePackagePublishingHistory(
  ...     distrorelease=dapper.id,
  ...     sourcepackagerelease=source_package_release.id,
  ...     component=source_package_release.component.id,
  ...     section=source_package_release.section.id,
  ...     status=PackagePublishingStatus.PUBLISHED,
  ...     datecreated=UTC_NOW,
  ...     pocket=PackagePublishingPocket.RELEASE,
  ...     embargo=False)

Do the upload into the system.

  >>> pmount_upload = NascentUpload(findPolicyByName('buildd'),
  ...     datadir(''), "pmount_0.9.7-2ubuntu2_amd64.changes", MockLogger())


  >>> pmount_upload.changes_filename == datadir("pmount_0.9.7-2ubuntu2_amd64.changes")
  True

  >>> build = source_package_release.createBuild(
  ...      dapper_amd64, PackagePublishingPocket.RELEASE)
  >>> mock_options = MockOptions()
  >>> mock_options.buildid = build.id
  >>> pmount_upload.policy.setOptions(mock_options)
  >>> pmount_upload.policy.can_upload_binaries = True
  >>> pmount_upload.policy.can_upload_mixed = True

  >>> pmount_upload.process()
  DEBUG: Beginning processing.
  DEBUG: Changes file can be unsigned, storing None
  DEBUG: Verifying the changes file.
  DEBUG: Verifying files in upload.
  DEBUG: Verifying binary pmount_0.9.7-2ubuntu2_amd64.deb
  DEBUG: Verifying timestamps in pmount_0.9.7-2ubuntu2_amd64.deb
  DEBUG: Finding and applying overrides.
  DEBUG: getPublishedReleases()
  DEBUG: Checking against amd64 for pmount
  DEBUG: pmount: (binary) NEW
  DEBUG: No signer, therefore ACL not processed
  DEBUG: Finished checking upload.

It was not rejected.

  >>> pmount_upload.rejected
  False

  >>> success, msgs = pmount_upload.do_accept()
  DEBUG: Building recipients list.
  DEBUG: Changes file is unsigned, adding changer as recipient
  DEBUG: Build ... found
  DEBUG: Creating a New queue entry

And all things worked.

  >>> success
  True

Ensure 'deb' is NEW and 'translation' is recognized, i.e., ACCEPTED

  >>> print pmount_upload.build_summary()
  NEW: pmount_0.9.7-2ubuntu2_amd64.deb
  OK: pmount_0.9.7-2ubuntu2_amd64_translations.tar.gz


Check the import queue content, it should be empty.

  >>> from canonical.launchpad.interfaces import ITranslationImportQueue
  >>> translation_import_queue = getUtility(ITranslationImportQueue)
  >>> translation_import_queue.entryCount()
  0

We need to commit the transaction to be able to use the librarian files.

  >>> import transaction
  >>> transaction.commit()

Do the publish. This is going to do the translation upload into the import
queue.

  >>> from canonical.lp.dbschema import DistroReleaseQueueStatus
  >>> queue_item = dapper.getQueueItems(status=DistroReleaseQueueStatus.NEW)[0]
  >>> queue_item.customfiles[0].publish()

And now, we have exactly the 10 entries imported by pmount.

  >>> translation_import_queue.entryCount()
  10

