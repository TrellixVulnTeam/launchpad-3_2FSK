= The stand-alone script make-graphviz-graph.py =

There's a script in ./scripts/make-graphviz-graph.py that receives
xmlrpc-format data on stdin, and outputs graph data on stdout.

We use this to render graphviz graphs in a separate process from the
Launchpad webapp, to avoid running a lot of possibly flaky C and C++
code in-process, and thus avoid memory leaks and crashes.

First, we'll set up some simple nodes and connections.

    >>> from subprocess import Popen, PIPE
    >>> import xmlrpclib
    >>> node1 = dict(
    ...     name='node1',
    ...     color='blue',
    ...     URL='http://whatever.example.com',
    ...     fontname='Sans',
    ...     fontsize=10,
    ...     comment='comment',
    ...     label='label')
    >>> node2 = dict(node1)
    >>> node2['name'] = 'node2'
    >>> node2['color'] = 'black'
    >>> nodes = [node1, node2]
    >>> connections = [('node1', 'node2'), ('node2', 'node1')]

Next, render them as a PNG.

    >>> format = 'png'
    >>> input = xmlrpclib.dumps((nodes, connections), format)
    >>> cmd = './scripts/make-graphviz-graph.py'
    >>> process = Popen(
    ...     cmd, shell=True, stdin=PIPE, stdout=PIPE, close_fds=True)
    >>> process.stdin.write(input)
    >>> process.stdin.close()
    >>> png_output = process.stdout.read()
    >>> png_magic_number = '\x89PNG'
    >>> png_output.startswith(png_magic_number)
    True

Finally, render them as an image-map.

    >>> format = 'cmapx'
    >>> input = xmlrpclib.dumps((nodes, connections), format)
    >>> cmd = './scripts/make-graphviz-graph.py'
    >>> process = Popen(
    ...     cmd, shell=True, stdin=PIPE, stdout=PIPE, close_fds=True)
    >>> process.stdin.write(input)
    >>> process.stdin.close()
    >>> cmapx_output = process.stdout.read()
    >>> print cmapx_output
    <map id="deptree" name="deptree">
    <area shape="rect" href="http://whatever.example.com" title="label" alt="" coords="..." />
    <area shape="rect" href="http://whatever.example.com" title="label" alt="" coords="..." />
    </map>

