= Introduction =

Some standard behavior is defined by the web service itself, not by
the individual resources.


== Authorization ==

  # XXX leonardr 2008-05-22 blueprint=api-bugs-remote
  # Once we launch the web service this test will be removed
  # because all users will have access to the web service.

In a development environment, any Launchpad person with an OAuth token
can make a request of the web service. Here's the 'no-priv' user
making a request.

  >>> print user_webservice.get("~launchpad").getOutput()
  HTTP/1.1 200 Ok
  ...

But in production, only Launchpad people who belong to a particular
team of beta testers are allowed to make requests. This code
configures that team so that web service clients must be authorized as
a member of the 'admins' team.

  >>> from canonical.config import config
  >>> print config.vhost.api.beta_test_team
  None

  >>> from textwrap import dedent
  >>> test_data = dedent("""
  ...     [vhost.api]
  ...     beta_test_team: admins
  ...     """)
  >>> config.push('test', test_data)

Now 'no-priv' can no longer make web service requests.

  >>> print user_webservice.get("~launchpad").getOutput()
  HTTP/1.1 401 Unauthorized
  ...
  no-priv is not a member of the beta test team.
  ...

But 'salgado' belongs to the 'admins' team, and so can make web
service requests.

  >>> print webservice.get("~launchpad").getOutput()
  HTTP/1.1 200 Ok
  ...

If for some reason the variable's value is set to a nonsensical value,
access to the web service will be cut off altogether.

  >>> test_config = config.pop('test')
  >>> from textwrap import dedent
  >>> test_data = dedent("""
  ...     [vhost.api]
  ...     beta_test_team: nosuchteam
  ...     """)
  >>> config.push('test', test_data)

  >>> print webservice.get("~launchpad").getOutput()
  HTTP/1.1 401 Unauthorized
  ...
  salgado is not a member of the beta test team.
  ...

  >>> test_config = config.pop('test')


== Nonexistent resources ==

An attempt to access a nonexistent resource yields a 404 error.

  >>> print webservice.get("no-such-resource")
  HTTP/1.1 404 Not Found
  ...

An attempt to access an existing resource without versioning the URL
yields a 404 error.

  >>> print webservice.get("/people")
  HTTP/1.1 404 Not Found
  ...

  >>> print webservice.get("/")
  HTTP/1.1 404 Not Found
  ...


== Nonexistent methods ==

An attempt to use an unsupported or nonexistent HTTP method on a
resource yields a 405 error.

  >>> print webservice("", method="COPY")
  HTTP/1.1 405 Method Not Allowed
  Allow: GET HEAD POST PATCH PUT DELETE OPTIONS
  ...

  >>> print webservice.delete("bugs")
  HTTP/1.1 405 Method Not Allowed
  Allow: GET
  ...

  >>> print webservice.delete("people")
  HTTP/1.1 405 Method Not Allowed
  Allow: GET POST
  ...

  >>> print webservice.delete("~salgado")
  HTTP/1.1 405 Method Not Allowed
  Allow: GET POST PUT PATCH
  ...

  >>> print webservice.delete("debian/+source/mozilla-firefox/+bug/1")
  HTTP/1.1 405 Method Not Allowed
  Allow: GET POST PUT PATCH
  ...


== Inappropriate media types ==

An attempt to PATCH a document with unsupported media type to a
resource yields a 415 error.

  >>> print webservice.patch("~salgado", 'text/plain', "Foo")
  HTTP/1.1 415 Unsupported Media Type
  ...


== Resources not exposed on the web service ==

Soyuz build set (exposed on the web at +builds) are not available on the
web service:

    >>> print webservice.get("+builds")
    HTTP/1.1 404 Not Found
    ...

