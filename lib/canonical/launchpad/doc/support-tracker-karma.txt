Support Tracker Karma
=====================

To promote community contributions to support requests in Launchpad, it's
very important that we acknowledge their work and give them some karma
points.

These karma points are assigned to a user when he performs one of the
actions we consider to be a reasonable contribution.

    >>> from canonical.launchpad.interfaces import (
    ...     IPersonSet, ITicket, ITicketSet, IProductSet)
    >>> from canonical.launchpad.database.karma import KarmaCategory
    >>> support_category = KarmaCategory.byName('support')
    >>> support_karma_actions = support_category.karmaactions
    >>> sorted([action.title for action in support_karma_actions])
    [u'Answered ticket',
     u'Comment made on a ticket.',
     u'Ticket description changed',
     u'Ticket linked to a bug',
     u'Ticket owner accepted answer',
     u'Ticket title changed']

    >>> sample_person = getUtility(IPersonSet).getByEmail('test@canonical.com')
    >>> foo_bar = getUtility(IPersonSet).getByEmail('foo.bar@canonical.com')

Now we define a function that makes it easier to test. It makes sure
that Sample Person got the given karma action, and that he got the given
number of points as well. Also it adds the karma action to
tested_support_karma_actions, so that we can make sure that every karma
action of the 'support' category was covered in this document.

    >>> from zope.event import notify
    >>> from canonical.launchpad.ftests.karma import KarmaAssignedEventListener
    >>> karma_helper = KarmaAssignedEventListener()
    >>> karma_helper.register_listener()


Let's create a ticket to use on this test.

    >>> login('test@canonical.com')
    >>> ticketset = getUtility(ITicketSet)
    >>> firefox = getUtility(IProductSet)['firefox']
    >>> firefox_ticket = ticketset.new(
    ...     title='New ticket', description='Ticket description.',
    ...     owner=sample_person, product=firefox)


Karma Actions
-------------

- Changing the Title/Description of a ticket:

    >>> from zope.event import notify
    >>> from canonical.launchpad.event import SQLObjectModifiedEvent
    >>> from canonical.launchpad.webapp.snapshot import Snapshot
    >>> old_ticket = Snapshot(firefox_ticket, providing=ITicket)
    >>> firefox_ticket.title = ('Firefox 1.5.0.5 does not have any '
    ...                         '"Quick Searches" installed by default')
    >>> notify(SQLObjectModifiedEvent(firefox_ticket, old_ticket, ['title']))
    Karma added: action=tickettitlechanged, product=firefox

    >>> old_ticket = Snapshot(firefox_ticket, providing=ITicket)
    >>> firefox_ticket.description = (
    ...     'Firefox 1.5.0.5 does not have any "Quick Searches" installed '
    ...     'in the bookmarks by default, like the official ones do.')
    >>> notify(SQLObjectModifiedEvent(
    ...     firefox_ticket, old_ticket, ['description']))
    Karma added: action=ticketdescriptionchanged, product=firefox
    >>> logout()

- Commenting on a ticket:

    This can be done through the web UI or using the email interface. In the
    former, we create the message using ticket.newMessage() while in the
    latter we have to use ticket.linkMessage(message) because the email
    handlers will create the message for us from the email address.

    >>> login('foo.bar@canonical.com')
    >>> msg = firefox_ticket.newMessage(
    ...     foo_bar, firefox_ticket.followup_subject,
    ...     ("Yeah, this is a known problem; you'll have to install them "
    ...      "manually for now, but this is fixed for the next release."))
    Karma added: action=ticketcommentadded, product=firefox

    >>> from canonical.launchpad.database import Message
    >>> firefox_ticket.linkMessage(Message.get(1))
    Karma added: action=ticketcommentadded, product=firefox

- Linking to a bug:

    >>> from canonical.launchpad.database import Bug
    >>> ticketbug = firefox_ticket.linkBug(Bug.get(5))
    Karma added: action=ticketlinkedtobug, product=firefox
    >>> logout()

- Accepting an answer:

    This will give karma to both the ticket owner who marked it as answered
    and to the last user who commented on the ticket, because we assume that's
    the answer to the ticket.

    >>> login('test@canonical.com')
    >>> firefox_ticket.acceptAnswer(sample_person)
    Karma added: action=ticketansweraccepted, product=firefox
    Karma added: action=ticketanswered, product=firefox


Now we do a check to make sure all support-tracker-related karma actions have
been tested.

    >>> karma_helper.added_karma_actions == set(support_karma_actions)
    True

Unregister the event listener to make sure we won't interfere in other tests.

    >>> karma_helper.unregister_listener()

- different ways of getting karma through the support tracker

    * accept an answer: ITicket.acceptAnswer().  If the submitter is set as
                        the answerer by acceptAnswer(), should we give karma
                        to him anyway?

    * have an answer accepted: Either hook after acceptAnswer() or subscribe
                               for status changes and assign the karma to
                               answerer. What if answerer == owner?
