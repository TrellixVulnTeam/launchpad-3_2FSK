= Browsing and Searching Tickets =

This story describes some common use cases about using the browsing and
searching features of the support tracker.

    # We want 5 items per page for these tests.
    >>> from canonical.config import config
    >>> original_default_batch_size = config.launchpad.default_batch_size
    >>> config.launchpad.default_batch_size = 5

== When Nobody Uses the Support Tracker ==

Average Joe has recently installed Kubuntu. He has a problem with his
system and goes to the Kubuntu's support page in Launchpad to see if
somebody had a similar problem.

    >>> browser.open('http://launchpad.dev/distros/kubuntu')
    >>> browser.getLink('Support').click()

He discovers that there are no tickets on the Kubuntu support page:

    >>> print browser.title
    Support requests for Kubuntu

    >>> from BeautifulSoup import BeautifulSoup
    >>> print find_main_content(browser.contents).first('p').renderContents()
    There are no support requests for Kubuntu with the requested statuses.

== Browsing Support Requests ==

He realises that support for Kubuntu is probably going on in the Ubuntu
support page and goes there to check.

    >>> browser.open('http://launchpad.dev/distros/ubuntu/+tickets')
    >>> browser.title
    'Support requests for Ubuntu'

He sees a listing of the current tickets posted on Ubuntu:

    >>> soup = BeautifulSoup(browser.contents)
    >>> for ticket in soup.fetch('td', 'ticket'):
    ...     print ticket.first('a').renderContents()
    Continue playing after shutdown
    Play DVDs in Totem
    mailto: problem in webpage
    Installation of Java Runtime Environment for Mozilla
    Slow system

None of the listed ticket titles quite match his problem. He sees that
there is another page of tickets, so he goes to the next page of
results. There, he finds only one other ticket:

    >>> browser.getLink('Next').click()
    >>> browser.title
    'Support requests for Ubuntu'
    >>> soup = BeautifulSoup(browser.contents)
    >>> for ticket in soup.fetch('td', 'ticket'):
    ...     print ticket.first('a').renderContents()
    Installation failed

This is the last results page, so the next and last links are greyed
out.

    >>> 'Next' in browser.contents
    True
    >>> browser.getLink('Next')
    Traceback (most recent call last):
      ..
    LinkNotFoundError...
    >>> 'Last' in browser.contents
    True
    >>> browser.getLink('Last')
    Traceback (most recent call last):
      ..
    LinkNotFoundError...

He decides to go the first page. He remembered one ticket title that
might have been remotely related to his problem.

    >>> browser.getLink('First').click()

Since he is on the first page, the 'First' and 'Previous' links are
greyed out:

    >>> 'Previous' in browser.contents
    True
    >>> browser.getLink('Previous')
    Traceback (most recent call last):
      ..
    LinkNotFoundError...
    >>> 'First' in browser.contents
    True
    >>> browser.getLink('First')
    Traceback (most recent call last):
      ..
    LinkNotFoundError...

When he passes the mouse over the ticket's row, the beginning of the
description appears in a small pop-up:

    >>> import re
    >>> soup = BeautifulSoup(browser.contents)
    >>> ticket_link = soup.first('a', text=re.compile('Play DVDs'))
    >>> print ticket_link.findParent('tr')['title']
    How do you play DVDs in Totem..........?

    >>> ticket_link = soup.first('a', text=re.compile('mailto:'))
    >>> print ticket_link.findParent('tr')['title']
    I am not able to open my email client if i click on a mailto: link in a
    webpage in Firefox 1.5.0.4 (ubuntu dapper).
    <BLANKLINE>
    Earlier I could do this but since balsa was installed and then uninstalled,
    things have not been the same. balsa used to start when a mailto: link was
    clicked on a webpage. balsa i...

He clicks on the ticket title to obtain the ticket page where the
details of the ticket are available.

    >>> browser.getLink('Slow system').click()
    >>> browser.title
    'Ubuntu support request #7: ...Slow system...'
    >>> soup = BeautifulSoup(browser.contents)
    >>> soup('div', 'highlighted')
    [<div class="highlighted">
    <p>I get really poor hard drive performance.</p>
    </div>]

== Searching Support Requests ==

Browsing is fine when the number of tickets is small, but searching is
more convenient as the number of tickets grow larger.

This time, it's Firefox that brings Average Joe to the Ubuntu support
tracker. He finds that his machine becomes really slow
whenever he has Firefox open. Luckily for Average Joe, searching for
similar support requests is easy: on the ticket listing page, he just
enters his search key and hit the 'Search' button.

    >>> browser.open('http://launchpad.dev/distros/ubuntu/+tickets')
    >>> browser.getControl(name='field.search_text').value = 'firefox is slow'
    >>> browser.getControl('Search').click()

Unfortunately, the search doesn't return any similar requests:

    >>> print browser.title
    Support requests about "firefox is slow" for Ubuntu
    >>> print find_main_content(browser.contents).first('p').renderContents()
    There are no support requests about "firefox is slow" for Ubuntu with the
    requested statuses.

Joe observes under the search widget that there are checkboxes to select
the ticket status to search. He notices that only some statuses are selected.
He adds 'Invalid' to the selection, and run his search again.

    >>> browser.getControl(name='field.status').value
    ['Open', 'Needs information', 'Answered', 'Solved']
    >>> browser.getControl('Invalid').selected = True
    >>> browser.getControl('Search').click()

This time, the search returns one item.

    >>> soup = BeautifulSoup(browser.contents)
    >>> for ticket in soup.fetch('td', 'ticket'):
    ...     print ticket.first('a').renderContents()
    Firefox is slow and consumes too much RAM

He clicks on the link to read the ticket description.

    >>> browser.getLink('Firefox is slow').click()
    >>> browser.title
    'mozilla-firefox in ubuntu support request #3:...Firefox is slow...'

== Controlling the Sort Order ==

That ticket isn't exactly what Average Joe was looking for. Now, he'd
like to see all the tickets that were related to the firefox package.
The ticket listing page for distribution displays the source package
related to each ticket. The source package name is a link to the source
package's ticket listing.

    # We should use goBack() here but can't because of ZC #645:
    # zope.testbrowser truncates document content after goBack().
    #>>> browser.goBack()
    >>> browser.open('http://launchpad.dev/distros/ubuntu/+tickets')
    >>> browser.getLink('mozilla-firefox').click()
    >>> browser.title
    'Support requests for mozilla-firefox in ubuntu'
    >>> soup = BeautifulSoup(browser.contents)
    >>> soup('table', 'listing')
    [<table...
    ...mailto: problem in webpage...2006-07-20...
    ...Installation of Java Runtime Environment for Mozilla...2006-07-20...
    </table>]

Average Joe wants to see all tickets but listed from the oldest to the
newest. Again, he adds the 'Invalid' status to the selection and
selects the 'oldest first' sort order.

    >>> browser.getControl('Invalid').selected = True
    >>> browser.getControl('oldest first').selected = True
    >>> browser.getControl('Search').click()

    >>> soup = BeautifulSoup(browser.contents)
    >>> soup('table', 'listing')
    [<table...
    ...Firefox is slow and consumes too much RAM...2005-09-05...
    ...Installation of Java Runtime Environment for Mozilla...2006-07-20...
    ...mailto: problem in webpage...2006-07-20...
    </table>]

== Common Reports ==

In the actions menu, we find links to some common reports.

=== Open Requests ===

Nice Guy likes helping others. He uses the 'Open' link to view the most
recent requests on Mozilla Firefox.

    >>> browser.open('http://launchpad.dev/products/firefox/+tickets')
    >>> browser.getLink('Open').click()
    >>> print browser.title
    Open support requests for Mozilla Firefox
    >>> tickets = find_tag_by_id(browser.contents, 'ticket-listing')
    >>> for ticket in tickets.fetch('td', 'ticket'):
    ...     print ticket.first('a').renderContents()
    Firefox loses focus and gets stuck
    Problem showing the SVG demo on W3C site
    Firefox cannot render Bank Site

That listing is also searchable. Since he's has lots of experience
dealing with plugins problems, he always start by a search for such
problems:

    >>> browser.getControl(name='field.search_text').value = 'plug-in'
    >>> browser.getControl('Search').click()
    >>> tickets = find_tag_by_id(browser.contents, 'ticket-listing')
    >>> for ticket in tickets.fetch('td', 'ticket'):
    ...     print ticket.first('a').renderContents()
    Problem showing the SVG demo on W3C site

=== Answered Requests ===

A random user has a problem with firefox in Ubuntu. He uses the
'Answered' link on the support facet of the distribution to look for
similar problems. (This listing includes both 'Answered' and 'Solved'
support requests.)

    >>> browser.open('http://launchpad.dev/distros/ubuntu/+tickets')
    >>> browser.getLink('Answered').click()
    >>> print browser.title
    Answered support requests for Ubuntu
    >>> browser.getControl(name='field.status').value
    ['Answered', 'Solved']
    >>> tickets = find_tag_by_id(browser.contents, 'ticket-listing')
    >>> for ticket in tickets.fetch('td', 'ticket'):
    ...     print ticket.first('a').renderContents()
    Play DVDs in Totem
    mailto: problem in webpage
    Installation of Java Runtime Environment for Mozilla

This report is also searchable. He's having a problem with Evolution, so he
enters 'Evolution' as a keyword and hits the search button.

    >>> browser.getControl(name='field.search_text').value = 'Evolution'
    >>> browser.getControl('Search').click()

    >>> print find_main_content(browser.contents).first('p').renderContents()
    There are no answered support requests about "Evolution" for Ubuntu.

=== My Requests ===

Sample Person remembers posting a question on mozilla-firefox. He uses
the 'My Requests' link on the distribution source package support facet
to list all the requests he ever made about that package.

He needs to login to access that page:

    >>> anon_browser.open(
    ...     'http://launchpad.dev/distros/ubuntu/+source/mozilla-firefox/'
    ...     '+tickets')
    >>> anon_browser.getLink('My Requests').click()
    Traceback (most recent call last):
      ...
    Unauthorized...

    >>> user_browser.open(
    ...     'http://launchpad.dev/distros/ubuntu/+source/mozilla-firefox/'
    ...     '+tickets')
    >>> user_browser.getLink('My Requests').click()
    >>> print user_browser.title
    Support requests you made for mozilla-firefox in ubuntu
    >>> tickets = find_tag_by_id(user_browser.contents, 'ticket-listing')
    >>> for ticket in tickets.fetch('td', 'ticket'):
    ...     print ticket.first('a').renderContents()
    mailto: problem in webpage
    Installation of Java Runtime Environment for Mozilla

His problem was about integrating his email client in firefox, so he
enters 'email client in firefox'

    >>> user_browser.getControl(name='field.search_text').value = (
    ...     'email client in firefox')

He also remembers that his question was answered, so he unselects the
other statuses and hits the search button.

    >>> user_browser.getControl('Open').selected = False
    >>> user_browser.getControl('Invalid').selected = False
    >>> user_browser.getControl('Search').click()

The exact request he was searching for is displayed!

    >>> tickets = find_tag_by_id(user_browser.contents, 'ticket-listing')
    >>> for ticket in tickets.fetch('td', 'ticket'):
    ...     print ticket.first('a').renderContents()
    mailto: problem in webpage

If the user didn't make any support requests on the product, a message
informing him of this fact is displayed.

    >>> user_browser.open('http://launchpad.dev/products/gnomebaker/+tickets')
    >>> user_browser.getLink('My Requests').click()
    >>> print find_main_content(
    ...     user_browser.contents).first('p').renderContents()
    You didn't make any support requests for gnomebaker.

=== Need Attention ===

A user can often forget which support requests need his attention. For
this purpose, there is a 'Need Attention' report which displays the
support requests made by the user which require a reply. It also lists
the requests on which he provided an answer or requested for more
information and that are now back in the 'Open' state.

He needs to login to access that page:

    >>> anon_browser.open('http://launchpad.dev/distros/ubuntu/+tickets')
    >>> anon_browser.getLink('Need Attention').click()
    Traceback (most recent call last):
      ...
    Unauthorized...

    >>> user_browser.open('http://launchpad.dev/distros/ubuntu/+tickets')
    >>> user_browser.getLink('Need Attention').click()
    >>> print user_browser.title
    Support requests needing your attention for Ubuntu
    >>> tickets = find_tag_by_id(user_browser.contents, 'ticket-listing')
    >>> for ticket in tickets.fetch('td', 'ticket'):
    ...     print ticket.first('a').renderContents()
    Play DVDs in Totem
    Installation of Java Runtime Environment for Mozilla

Like all other report, this one is searchable:

    >>> user_browser.getControl(name='field.search_text').value = 'evolution'
    >>> user_browser.getControl('Search').click()
    >>> print user_browser.title
    Support requests about "evolution" needing your attention for Ubuntu
    >>> print find_main_content(
    ...     user_browser.contents).first('p').renderContents()
    No support requests about "evolution" need your attention for Ubuntu.

If the there is no support requests needing the user's attention,
a message informing him of this fact is displayed.

    >>> user_browser.open('http://launchpad.dev/products/gnomebaker/+tickets')
    >>> user_browser.getLink('Need Attention').click()
    >>> print find_main_content(
    ...     user_browser.contents).first('p').renderContents()
    No support requests need your attention for gnomebaker.

== Person Reports ==

The Support facet on on person also contains various searchable
listings.

The default listing on the person support facet lists all the support
requests that the person was involved with. This includes requests that
the person created, answered, is assigned to, is subscribed to, or
commented.

    >>> browser.open('http://launchpad.dev/people/name16')
    >>> browser.getLink('Support').click()
    >>> print browser.title
    Support requests involving Foo Bar

    >>> tickets = find_tag_by_id(browser.contents, 'ticket-listing')
    >>> for ticket in tickets.fetch('td', 'ticket'):
    ...     print ticket.first('a').renderContents()
    Continue playing after shutdown
    Play DVDs in Totem
    mailto: problem in webpage
    Installation of Java Runtime Environment for Mozilla
    Slow system

That listing is batched when there are many requests:

    >>> browser.getLink('Next')
    <Link...>

The listing contains a 'In' column that shows the context where the
support request was made.

    >>> for ticket in tickets.fetch('td', 'ticket-target'):
    ...     print ticket.first('a').renderContents()
    Ubuntu
    Ubuntu
    mozilla-firefox in ubuntu
    mozilla-firefox in ubuntu
    Ubuntu

These contexts are links to the context ticket listing.

    >>> browser.getLink('mozilla-firefox in ubuntu').click()
    >>> print browser.title
    Support requests for mozilla-firefox in ubuntu

The listing is searchable and can restrict also the list of displayed
requests to a particular status:

    # goBack() doesn't work.
    >>> browser.open('http://launchpad.dev/people/name16/+tickets')
    >>> browser.getControl(name='field.search_text').value = 'Firefox'
    >>> browser.getControl(name='field.status').value = ['Solved', 'Invalid']
    >>> browser.getControl('Search').click()
    >>> tickets = find_tag_by_id(browser.contents, 'ticket-listing')
    >>> for ticket in tickets.fetch('td', 'ticket'):
    ...     print ticket.first('a').renderContents()
    Firefox is slow and consumes too much RAM
    mailto: problem in webpage

The actions menu contain list to listing that contain only a specific
type of involvement.

=== Assigned ===

The assigned report only lists the support requests to which the person
is assigned.

    >>> browser.getLink('Assigned').click()
    >>> print browser.title
    Support requests assigned to Foo Bar
    >>> print find_main_content(browser.contents).first('p').renderContents()
    No support requests assigned to Foo Bar found with the requested statuses.

=== Answered ===

The 'Answered' link displays all the support requests where the person
is the answerer.

    >>> browser.getLink('Answered').click()
    >>> print browser.title
    Support requests answered by Foo Bar
    >>> tickets = find_tag_by_id(browser.contents, 'ticket-listing')
    >>> for ticket in tickets.fetch('td', 'ticket'):
    ...     print ticket.first('a').renderContents()
    mailto: problem in webpage

=== Commented ===

The report available under the 'Commented' link displays all the
requests commented on by the person.

    >>> browser.getLink('Commented').click()
    >>> print browser.title
    Support requests commented on by Foo Bar
    >>> tickets = find_tag_by_id(browser.contents, 'ticket-listing')
    >>> for ticket in tickets.fetch('td', 'ticket'):
    ...     print ticket.first('a').renderContents()
    Continue playing after shutdown
    Play DVDs in Totem
    mailto: problem in webpage
    Installation of Java Runtime Environment for Mozilla
    Newly installed plug-in doesn't seem to be used

=== Created ===

The 'Created' link displays a listing containing all the support
requests made by the person.

    >>> browser.getLink('Created').click()
    >>> print browser.title
    Support requests created by Foo Bar
    >>> tickets = find_tag_by_id(browser.contents, 'ticket-listing')
    >>> for ticket in tickets.fetch('td', 'ticket'):
    ...     print ticket.first('a').renderContents()
    Slow system
    Firefox loses focus and gets stuck

=== Need Attention ===

The 'Need Attention' link displays all the support requests that need
the attention of that person.

    >>> browser.getLink('Need Attention').click()
    >>> print browser.title
    Support requests needing Foo Bar attention
    >>> tickets = find_tag_by_id(browser.contents, 'ticket-listing')
    >>> for ticket in tickets.fetch('td', 'ticket'):
    ...     print ticket.first('a').renderContents()
    Continue playing after shutdown
    Slow system

=== Subscribed ===

Foo Bar can find all the support requests to which he is subscribed by
visiting the 'Subscribed' link in the support facet.

    >>> browser.getLink('Subscribed').click()
    >>> print browser.title
    Support requests Foo Bar is subscribed to
    >>> tickets = find_tag_by_id(browser.contents, 'ticket-listing')
    >>> for ticket in tickets.fetch('td', 'ticket'):
    ...     print ticket.first('a').renderContents()
    Slow system

== Cleanup ==

    # Restore the original batch size for subsequent tests.
    >>> config.launchpad.default_batch_size = original_default_batch_size
