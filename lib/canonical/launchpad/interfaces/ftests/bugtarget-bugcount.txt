= Bug Counts for IBugTarget =

A IBugTarget has a method for getting the number of bugs in different
statuses.

    >>> bug_counts = bugtarget.getBugCounts(None)
    >>> for status in sorted(bug_counts.keys()):
    ...     print status.name
    UNCONFIRMED
    NEEDSINFO
    REJECTED
    CONFIRMED
    INPROGRESS
    FIXCOMMITTED
    FIXRELEASED
    UNKNOWN

It's possible to limit which statuses to return.

    >>> from canonical.lp.dbschema import BugTaskStatus
    >>> bug_counts = bugtarget.getBugCounts(
    ...     None, [BugTaskStatus.UNCONFIRMED, BugTaskStatus.CONFIRMED])
    >>> for status in sorted(bug_counts.keys()):
    ...     print status.name
    UNCONFIRMED
    CONFIRMED

If we file a few bugs in each status, the counts will increase.

    >>> def print_count_difference(new_counts, old_counts, status):
    ...     difference = new_counts[status] - old_counts[status]
    ...     if difference > 0:
    ...         diff_message = "%s bug(s) more" % difference
    ...     elif difference < 0:
    ...         diff_message = "%s bug(s) less" % -difference
    ...     else:
    ...         diff_message = "no difference"
    ...     print "%s: %s" % (status.name, diff_message)

    >>> login('test@canonical.com')
    >>> old_counts = bugtarget.getBugCounts(None)
    >>> for status in sorted(BugTaskStatus.items):
    ...     for index in range(5):
    ...         bug = filebug(bugtarget, "Test Bug", status=status)
    ...     new_bug_counts = bugtarget.getBugCounts(None)
    ...     print_count_difference(new_bug_counts, old_counts, status)
    UNCONFIRMED: 5 bug(s) more
    NEEDSINFO: 5 bug(s) more
    REJECTED: 5 bug(s) more
    CONFIRMED: 5 bug(s) more
    INPROGRESS: 5 bug(s) more
    FIXCOMMITTED: 5 bug(s) more
    FIXRELEASED: 5 bug(s) more
    UNKNOWN: 5 bug(s) more

If we take a bug that is in one status and changes it to another, the
former status' count will of course decrease, and the latter's increase.

    >>> from canonical.launchpad.ftests import syncUpdate
    >>> bug = filebug(bugtarget, "Test Bug", status=BugTaskStatus.CONFIRMED)
    >>> old_counts = bugtarget.getBugCounts(None)
    >>> for bugtask in bug.bugtasks:
    ...     if bugtask.target == bugtarget:
    ...         break
    >>> bugtask.transitionToStatus(BugTaskStatus.NEEDSINFO)
    >>> syncUpdate(bugtask)
    >>> new_bug_counts = bugtarget.getBugCounts(None)
    >>> print_count_difference(
    ...     new_bug_counts, old_counts, BugTaskStatus.CONFIRMED)
    CONFIRMED: 1 bug(s) less
    >>> print_count_difference(
    ...     new_bug_counts, old_counts, BugTaskStatus.NEEDSINFO)
    NEEDSINFO: 1 bug(s) more

== Private Bugs ==

Private bugs are included in the counts, only if the user has permission
to view the bug. So if we set the NEEDSINFO bug above to be private,
Sample Person (the bug reporter) will still get the bug included in the
count, but not No Privileges Person or the anonymous user.

    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> old_counts = bugtarget.getBugCounts(None)
    >>> bug.private = True
    >>> syncUpdate(bug)
    >>> sample_person_counts = bugtarget.getBugCounts(
    ...     getUtility(IPersonSet).getByEmail('test@canonical.com'))
    >>> nopriv_counts = bugtarget.getBugCounts(
    ...     getUtility(IPersonSet).getByEmail('no-priv@canonical.com'))
    >>> anon_counts = bugtarget.getBugCounts(None)

    >>> print_count_difference(
    ...     sample_person_counts, old_counts, BugTaskStatus.NEEDSINFO)
    NEEDSINFO: no difference

    >>> print_count_difference(
    ...     nopriv_counts, old_counts, BugTaskStatus.NEEDSINFO)
    NEEDSINFO: 1 bug(s) less

    >>> print_count_difference(anon_counts, old_counts, BugTaskStatus.NEEDSINFO)
    NEEDSINFO: 1 bug(s) less

    >>> bug.private = False
    >>> syncUpdate(bug)

== Duplicate Bugs ==

Duplicate bugs are not included in the counts, so if some bug is marked
as a duplicate of another bug, the count will decrease.

    >>> another_bug =  filebug(
    ...     bugtarget, "Another Test Bug", status=BugTaskStatus.UNCONFIRMED)
    >>> old_counts = bugtarget.getBugCounts(None)
    >>> another_bug.duplicateof = bug
    >>> syncUpdate(another_bug)
    >>> new_counts = bugtarget.getBugCounts(None)
    >>> print_count_difference(
    ...     new_counts, old_counts, BugTaskStatus.UNCONFIRMED)
    UNCONFIRMED: 1 bug(s) less
