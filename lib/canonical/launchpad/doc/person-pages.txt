= Person Pages =

There are many views that wrap the Person object to display the
person's information.


== Email address disclosure ==

PersonView is the base for many views for Person objects, including the
default view. It provides several properties to help display email
addresses.

There are five states for PersonView.email_address_observation:
are-private, are-unknown, are-hidden, are-visible, are-public. Templates
may use the five states to determine which message to show to the user.
PersonView.email_addresses is None for all states accept for are-visible
or are-public. The observable_email_address_description property
describes who can see the email addresses when email_address_observation
is are-visible or are-public.

Mark has a registered email address, and he has chosen to disclose it to
the world.

    >>> from canonical.launchpad.interfaces.person import IPersonSet

    >>> personset = getUtility(IPersonSet)
    >>> mark = personset.getByEmail('mark@hbd.com')
    >>> mark.preferredemail.email
    u'mark@hbd.com'
    >>> mark.hide_email_addresses
    False

Anonymous users cannot see Mark's email addresses. The email addresses
state is are-private, there is no description, nor are there any
email addresses.

    >>> from zope.component import getMultiAdapter
    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest

    >>> request = LaunchpadTestRequest()
    >>> view = getMultiAdapter((mark, request), name='+index')
    >>> view.initialize()
    >>> view.email_address_observation
    'are-private'
    >>> view.email_addresses_are_private
    True
    >>> print view.observable_email_address_description
    None
    >>> print view.observable_email_addresses
    None

Logged in user can see Mark's email addresses. The email addresses
state is are-public. There is a description of who can see the list of
email addresses.

    >>> login('test@canonical.com')
    >>> view = getMultiAdapter((mark, request), name='+index')
    >>> view.initialize()
    >>> view.email_address_observation
    'are-public'
    >>> view.email_addresses_are_public
    True
    >>> view.observable_email_address_description
    'This email address is only visible to Launchpad users.'
    >>> view.observable_email_addresses
    [u'mark@hbd.com']

As for Sample Person, he has chosen not to disclose his email addresses.

    >>> login(ANONYMOUS)
    >>> sample_person = personset.getByEmail('test@canonical.com')
    >>> sample_person.hide_email_addresses
    True

Anonymous users can't see them because the state is are-private.

    >>> view = getMultiAdapter((sample_person, request), name='+index')
    >>> view.initialize()
    >>> view.email_address_observation
    'are-private'
    >>> view.email_addresses_are_private
    True
    >>> print view.observable_email_addresses
    None

No Privileges Person cannot see them either because the state is
are-hidden. There is no description for the email addresses because
he cannot view them.

    >>> login('no-priv@canonical.com')
    >>> view = getMultiAdapter((sample_person, request), name='+index')
    >>> view.initialize()
    >>> view.email_address_observation
    'are-hidden'
    >>> view.email_addresses_are_hidden
    True
    >>> print view.observable_email_address_description
    None
    >>> print view.observable_email_addresses
    None

Admins and commercial admins, like Foo Bar and Commercial Member, can
see Sample Person's email addresses because the state is are-visible.
The description states that the email addresses are not disclosed to
others.

    >>> login('foo.bar@canonical.com')
    >>> view = getMultiAdapter((sample_person, request), name='+index')
    >>> view.initialize()
    >>> view.email_address_observation
    'are-visible'
    >>> view.email_addresses_are_visible
    True
    >>> view.observable_email_address_description
    'This email address is not disclosed to others.'
    >>> view.observable_email_addresses
    [u'test@canonical.com', u'testing@canonical.com']

    >>> login('commercial-member@canonical.com')
    >>> view = getMultiAdapter((sample_person, request), name='+index')
    >>> view.initialize()
    >>> view.email_address_observation
    'are-visible'
    >>> view.email_addresses_are_visible
    True
    >>> view.observable_email_addresses
    [u'test@canonical.com', u'testing@canonical.com']

Teams are like Persons. No email address is disclosed when the user is
anonymous.

    >>> login(ANONYMOUS)
    >>> ubuntu_team = personset.getByName('ubuntu-team')
    >>> view = getMultiAdapter((ubuntu_team, request), name='+index')
    >>> view.initialize()
    >>> view.email_address_observation
    'are-private'
    >>> view.email_addresses_are_private
    True
    >>> print view.observable_email_addresses
    None

Logged in user can see team addresses.

    >>> login('no-priv@canonical.com')
    >>> view = getMultiAdapter((ubuntu_team, request), name='+index')
    >>> view.initialize()
    >>> view.email_address_observation
    'are-public'
    >>> view.email_addresses_are_public
    True
    >>> view.observable_email_addresses
    [u'support@ubuntu.com']

When the user or team does not have a validated contact address, the
email addresses state is are-unknown.

    >>> landscape_developers = personset.getByName('landscape-developers')
    >>> view = getMultiAdapter((landscape_developers, request), name='+index')
    >>> view.initialize()
    >>> view.email_address_observation
    'are-unknown'
    >>> view.email_addresses_are_unknown
    True
    >>> print view.observable_email_address_description
    None
    >>> print view.observable_email_addresses
    None


== Person Packages ==

The page at ~user/+packages contains three sections,
"Maintained Packages", "Uploaded Packages" and "PPA Packages".

Each section is limited to displaying at most 50 packages so that
the page does not time out before Zope can render it.

Before continuing, create lots of packages that will appear in each
section of Foo Bar's +packages page, such that there's more available
that we're willing to display.

    >>> from canonical.launchpad.interfaces.distribution import (
    ...     IDistributionSet)
    >>> from canonical.launchpad.interfaces.publishing import (
    ...     PackagePublishingStatus)
    >>> name16 = getUtility(IPersonSet).getByName('name16')
    >>> sabdfl = getUtility(IPersonSet).getByName('sabdfl')
    >>> ubuntu = getUtility(IDistributionSet)['ubuntu']
    >>> warty = ubuntu['warty']
    >>> from canonical.launchpad.tests.test_publishing import (
    ...     SoyuzTestPublisher)
    >>> test_pub = SoyuzTestPublisher()
    >>> test_pub.person = name16

    >>> view = getMultiAdapter(
    ...     (name16, LaunchpadTestRequest()), name='+related-software')
    >>> view.initialize()

    >>> for count in range(0, view.PACKAGE_LIMIT + 3):
    ...     source_name = "foo" + str(count)
    ...     # Add the PPA packages.
    ...     discard = test_pub.getPubSource(
    ...         sourcename=source_name,
    ...         status=PackagePublishingStatus.PUBLISHED,
    ...         archive=sabdfl.archive,
    ...         distroseries=warty)
    ...     # Add the maintained packages.
    ...     discard = test_pub.getPubSource(
    ...         sourcename=source_name,
    ...         status=PackagePublishingStatus.PUBLISHED,
    ...         distroseries=warty)
    ...     # Add the uploaded packages.
    ...     discard = test_pub.getPubSource(
    ...         maintainer=sabdfl,
    ...         sourcename=source_name,
    ...         status=PackagePublishingStatus.PUBLISHED,
    ...         distroseries=warty)
    >>> import transaction
    >>> transaction.commit()

There are many more new packages to be displayed on the page now:

    >>> name16.getLatestUploadedPPAPackages().count() > 50
    True

    >>> name16.getLatestMaintainedPackages().count() > 50
    True

    >>> name16.getLatestUploadedButNotMaintainedPackages().count() > 50
    True

The view enforces the limit.

    >>> len(view.get_latest_uploaded_ppa_packages_with_stats)
    50

    >>> len(view.get_latest_maintained_packages_with_stats)
    50

    >>> len(view.get_latest_uploaded_but_not_maintained_packages_with_stats)
    50
