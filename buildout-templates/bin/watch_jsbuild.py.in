#!/usr/bin/env python

# Using ionotify we watch our sources of JavaScript in order to know we should
# build when the files change.

import lpjsmin
import pyinotify
import os
import re
import shutil

BUILD_DIR = 'build/js/lp'
WATCH_DIR = 'lib'

# to start out let's assume your CWD is where we're referencing things from
CWD = os.getcwd()
JSDIR = os.path.join(CWD, BUILD_DIR)
FILTERS = [
    # ignore test files
    lambda x: x.startswith('test_'),
    # ignore directories
    lambda x: os.path.isdir(x),
    # ignore files that don't end in .js
    lambda x: not x.endswith('.js'),
]
RENAME = re.compile("^.*lib/lp/(.*)/javascript")


def build_path(path):
    match = RENAME.search(path)
    js_dir = match.groups()[0]
    return os.path.join(JSDIR, RENAME.sub(js_dir, path))


def copyfile(src, dst):
    # make sure the directory for it exists
    d = os.path.dirname(dst)
    if not os.path.exists(d):
        os.makedirs(d)
    shutil.copyfile(src, dst)


class HandleChanges(pyinotify.ProcessEvent):
    def process_IN_CREATE(self, event):
        if event.mask == pyinotify.IN_MODIFY:
            needs_filtering = [f(event.name) for f in FILTERS]
            if True in needs_filtering:
                pass
            else:
                print "Was created:", event.pathname

    def process_IN_MODIFY(self, event):
        if event.mask == pyinotify.IN_MODIFY:
            needs_filtering = [f(event.name) for f in FILTERS]
            if True in needs_filtering:
                pass
            else:
                new_path = build_path(event.pathname)
                copyfile(event.pathname, new_path)
                lpjsmin.minify(new_path)


if __name__ == "__main__":
    print "Watching '%s' for JS changes" % WATCH_DIR
    # Instanciate a new WatchManager (will be used to store watches).
    wm = pyinotify.WatchManager()

    # watched events
    mask = pyinotify.IN_MODIFY | pyinotify.IN_CREATE

    # Associate this WatchManager with a Notifier (will be used to report and
    # process events).
    handler = HandleChanges()
    notifier = pyinotify.Notifier(wm, handler)

    # Add a new watch on cwd for ALL_EVENTS.
    # Loop forever and handle events.
    wm.add_watch(WATCH_DIR, mask, rec=True)
    notifier.loop()
