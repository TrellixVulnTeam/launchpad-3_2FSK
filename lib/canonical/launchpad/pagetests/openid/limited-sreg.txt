= Limited OpenID Simple Registration Extension support =

The Launchpad OpenID server does not have full OpenID Simple
Registration Extension support.  However, it will send some user
details to certain well known trust roots.

This is done in order to share the user details among the various
Canonical/Ubuntu sites participating in single sign-on.


== Behaviour for unknown trust roots ==

First we'll see what happens with an OpenID request from an unknown
trust root.

First acquire an association handle:

    >>> from canonical.launchpad.ftests.openid import (
    ...     install_consumer, uninstall_consumer)
    >>> install_consumer()

    >>> from urllib import urlencode
    >>> args = urlencode({
    ...     'openid.mode': 'associate',
    ...     'openid.assoc_type': 'HMAC-SHA1',
    ...     })
    >>> anon_browser.open('http://openid.launchpad.dev/+openid', data=args)
    >>> import re
    >>> [assoc_handle] = re.findall('assoc_handle:(.*)', anon_browser.contents)

Now perform an OpenID authentication request:

    >>> args = urlencode({
    ...     'openid.mode': 'checkid_setup',
    ...     'openid.assoc_handle': assoc_handle,
    ...     'openid.identity': 'http://specs.openid.net/auth/2.0/identifier_select',
    ...     'openid.return_to': 'http://launchpad.dev/+openid-consumer',
    ...     'openid.trust_root': 'http://launchpad.dev/+openid-consumer',
    ...     })

    >>> sabdfl_browser = setupBrowser('Basic mark@hbd.com:test')
    >>> sabdfl_browser.open('http://openid.launchpad.dev/+openid?%s' % args)
    >>> sabdfl_browser.getControl('Sign In', index=0).click()
    >>> print sabdfl_browser.url
    http://launchpad.dev/+openid-consumer?...
    >>> print sabdfl_browser.contents
    Consumer received GET
    openid.assoc_handle:...
    openid.identity:http://openid.launchpad.dev/+id/sabdfl_oid
    openid.mode:id_res
    openid.return_to:http://launchpad.dev/+openid-consumer
    openid.sig:...
    openid.signed:return_to,mode,identity
    <BLANKLINE>


== Behaviour for known trust roots ==

Now we'll do the same thing, but with the trust root added to
config.launchpad.openid_sreg_trustroots.  We can use the association
handle and login session from the previous test.

We now see the user's full name, nickname and email address.

    >>> from canonical.config import config
    >>> config.launchpad.openid_sreg_trustroots.append(
    ...     'http://launchpad.dev/+openid-consumer')
    >>> sabdfl_browser.open('http://openid.launchpad.dev/+openid?%s' % args)
    >>> sabdfl_browser.getControl('Sign In', index=0).click()
    >>> print sabdfl_browser.url
    http://launchpad.dev/+openid-consumer?...
    >>> print sabdfl_browser.contents
    Consumer received GET
    openid.assoc_handle:...
    openid.identity:http://openid.launchpad.dev/+id/sabdfl_oid
    openid.mode:id_res
    openid.return_to:http://launchpad.dev/+openid-consumer
    openid.sig:...
    openid.signed:return_to,mode,identity,sreg.email,sreg.fullname,sreg.nickname
    openid.sreg.email:mark@hbd.com
    openid.sreg.fullname:Mark Shuttleworth
    openid.sreg.nickname:sabdfl
    <BLANKLINE>


== Cleanup ==

    >>> config.launchpad.openid_sreg_trustroots.remove(
    ...     'http://launchpad.dev/+openid-consumer')
    >>> uninstall_consumer()
