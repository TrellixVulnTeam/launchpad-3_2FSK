David Allouche forgot his password and he's going to use the forgotten
password form to reset it.

Go to the 'Forgotten Password' page.

  >>> browser.open('http://launchpad.dev/+login')
  >>> browser.getLink('Forgotten your password?').click()

  >>> browser.url
  'http://launchpad.dev/+forgottenpassword'

  >>> browser.title
  'Need a new Launchpad password?'

Type the email address registered in Launchpad and submit the form.

  >>> browser.getControl(name='email').value = 'david.allouche@canonical.com'
  >>> browser.getControl('Request Reset').click()

  >>> print browser.contents
  <...
  ...<p>We have sent you an email with instructions to reset your
  password.</p>...
  ...

Get the token we'll have to use to finish the registration process.

  >>> import email, re
  >>> from canonical.launchpad.mail import stub
  >>> from_addr, to_addrs, raw_msg = stub.test_emails.pop()
  >>> assert not stub.test_emails
  >>> msg = email.message_from_string(raw_msg)
  >>> body = msg.get_payload()
  >>> link = re.findall(r'http.*/token/.*', body)[0]
  >>> token = re.sub(r'.*token/', '', link)
  >>> base_path = '/token/%s' % token

Check if the email was sent to the right address.

  >>> to_addrs
  ['david.allouche@canonical.com']

Go to the link sent by email.

  >>> browser.open('http://launchpad.dev%s' % base_path)

  >>> browser.url
  'http://launchpad.dev/token/.../+resetpassword'

Type the new password and submit. This time he doesn't want to be
automatically logged in, so he'll manually login later

  >>> browser.getControl(
  ...     name='field.email').value = 'david.allouche@canonical.com'
  >>> browser.getControl(name='field.password').value = 'test2'
  >>> browser.getControl(name='field.password_dupe').value = 'test2'
  >>> browser.getControl(
  ...     'Log me in after resetting my password').selected = False
  >>> browser.getControl('Continue').click()

  >>> browser.url
  'http://launchpad.dev/~ddaa'

Login with the new password, to make sure everything went fine.

  >>> browser.getLink('Log In / Register').click()

  >>> browser.getControl(
  ...     'E-mail address:', index=0).value = 'david.allouche@canonical.com'
  >>> browser.getControl('Password').value = 'test2'
  >>> browser.getControl('Log In').click()

  >>> browser.url
  'http://launchpad.dev/%7Eddaa'

  >>> print browser.contents
  <...
  ...Logged in as...
  ...David Allouche...
  ...

David Allouche forgot his password (again!) and he's going to use the 
forgotten password form to reset it. The only difference is that now he
wants to be automatically logged in after resetting his password.

Let's first log him out.

  >>> browser.open('http://launchpad.dev/+logout')
  >>> for tag in find_tags_by_class(browser.contents, 'message'):
  ...     print tag
  <div class="informational message">You have been logged out</div>

Go to the 'Forgotten Password' page.

  >>> browser.open('http://launchpad.dev/+forgottenpassword')

Type the email address registered in Launchpad and submit the form.

  >>> browser.getControl(name='email').value = 'david.allouche@canonical.com'
  >>> browser.getControl('Request Reset').click()

  >>> print browser.contents
  <...
  ...<p>We have sent you an email with instructions to reset your
  password.</p>...
  ...

Get the token we'll have to use to finish the registration process.

  >>> from_addr, to_addrs, raw_msg = stub.test_emails.pop()
  >>> assert not stub.test_emails
  >>> msg = email.message_from_string(raw_msg)
  >>> body = msg.get_payload()
  >>> link = re.findall(r'http.*/token/.*', body)[0]
  >>> token = re.sub(r'.*token/', '', link)
  >>> base_path = '/token/%s' % token

Check if the email was sent to the right address.

  >>> to_addrs
  ['david.allouche@canonical.com']

If he tries to validate an email with this token, he'll be redirected back to
the default view, which is responsible for deciding where to send him.

  >>> wrong_path = base_path + "/+validateemail"
  >>> browser.open('http://launchpad.dev%s' % wrong_path)

  >>> browser.url
  'http://launchpad.dev/token/.../+resetpassword'

Now he is on the right page and types the new password and submit. This time 
he wants to be automatically logged in. Inadvertently he uses a new password 
with illegal characters.

  >>> browser.getControl(
  ...     name='field.email').value = 'david.allouche@canonical.com'
  >>> browser.getControl(name='field.password').value = 'é'
  >>> browser.getControl(name='field.password_dupe').value = 'é'
  >>> browser.getControl('Log me in after resetting my password').selected
  True
  >>> browser.getControl('Continue').click()

  >>> for tag in find_tags_by_class(browser.contents, 'message'):
  ...     print tag
  <p class="error message">Please fix the problems below and try again.</p>
  <div class="message">The password provided contains non-ASCII characters.</div>

And now he does it right with valid ascii characters.

  >>> browser.getControl(name='field.password').value = 'test3'
  >>> browser.getControl(name='field.password_dupe').value = 'test3'
  >>> browser.getControl('Continue').click()

  >>> browser.url
  'http://launchpad.dev/~ddaa'

Now that the token is consumed, he's not able to use it again.

  >>> browser.open('http://launchpad.dev%s' % base_path)

  >>> for tag in find_tags_by_class(browser.contents, 'informational message'):
  ...     print tag
  <div class="informational message"...
  ...You reached this page probably because you followed a link received by...
  ...email. That link was sent to confirm you have access to the email...
  ...address it was sent to, but this confirmation was already concluded, so...
  ...you don't need to do anything else...
  ...

Test that we reject requests for resetting teams' passwords.

  >>> browser.open('http://launchpad.dev/+forgottenpassword')
  >>> browser.getControl(name='email').value = 'support@ubuntu.com'
  >>> browser.getControl('Request Reset').click()

  >>> for tag in find_tags_by_class(browser.contents, 'error'):
  ...     print tag
  <div class="error">The email address <strong>support@ubuntu.com</strong> belongs to a team, and teams cannot log in to Launchpad.</div>
