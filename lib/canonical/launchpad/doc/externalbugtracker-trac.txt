= ExternalBugTracker: Trac =

This covers the implementation of the ExternalBugTracker class for Trac
bugwatches.


== Basics ==

The ExternalBugTracker descendant class which implements methods for updating
bug watches on Trac bug trackers is externalbugtracker.Trac.

    >>> from canonical.launchpad.components.externalbugtracker import Trac
    >>> Trac('http://trac.foo.com')
    <canonical.launchpad.components.externalbugtracker.Trac object at...>

We use a test-oriented implementation for the purposes of these tests, so that
we don't have to rely on a working network connection.

    >>> from canonical.launchpad.ftests.externalbugtracker import TestTrac
    >>> from canonical.launchpad.components.externalbugtracker import (
    ...     get_external_bugtracker)
    >>> from canonical.launchpad.interfaces import IBugTrackerSet
    >>> # XXX: FIX THIS!


== Status Conversion ==

The basic Trac ticket statuses map to Launchpad bug statuses.
Trac.convertRemoteStatus() handles the conversion.

    >>> trac = TestTrac('http://foo.bar')
    >>> trac.convertRemoteStatus('open').title
    'New'
    >>> trac.convertRemoteStatus('assigned').title
    'Confirmed'
    >>> trac.convertRemoteStatus('fixed').title
    'Fix Released'
    >>> trac.convertRemoteStatus('invalid').title
    'Invalid'
    >>> trac.convertRemoteStatus('wontfix').title
    "Won't Fix"
    >>> trac.convertRemoteStatus('duplicate').title # XXX: Fix this, too!
    'Confirmed'
    >>> trac.convertRemoteStatus('worksforme').title
    'Invalid'

If the status isn't one that our Trac ExternalBugTracker can understand,
Unknown will be returned and a warning logged.

    >>> trac.convertRemoteStatus('eggs').title
    WARNING:...:Unknown status 'eggs'
    'Unknown'

UNKNOWN_REMOTE_STATUS maps to Unknown without generating a
warning. This handles the case where we've tried to probe for a bug
but didn't succeed. For example, if the bug number was invalid.

    >>> from canonical.launchpad.interfaces import UNKNOWN_REMOTE_STATUS
    >>> trac.convertRemoteStatus(UNKNOWN_REMOTE_STATUS).title
    'Unknown'


== Initialization ==

Calling initializeRemoteBugDB() on our Trac instance and passing it a set of
remote bug IDs will fetch those bug IDs from the server and file them in a
local variable for later use.

    >>> trac = Trac('http://code.djangoproject.com')
    >>> trac.initializeRemoteBugDB([1,2,3,4,5])
    >>> sorted(trac.bugs.keys())
    [1, 2, 3, 4, 5]

If we initialise with a different set of keys we overwrite the first set:

    >>> trac.initializeRemoteBugDB([6,7,8,9,10,11,12])
    >>> sorted(trac.bugs.keys())
    [6, 7, 8, 10, 11, 12]

If we try and initialize against a non-existant Trac we get a
BugTrackerConnectError:

    >>> trac = Trac('http://code.foobar.com')
    >>> trac.initializeRemoteBugDB([6,7,8,9,10,11,12])
    Traceback (most recent call last):
    ...
    BugTrackerConnectError...


