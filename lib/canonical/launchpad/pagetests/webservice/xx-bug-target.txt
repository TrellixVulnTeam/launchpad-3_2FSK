= Introduction =

Many exposed objects in the API provide IBugTarget, including
projects, distributions, distribution series, and source packages.


== bug_reporting_guidelines ==

All bug targets have a read/write bug_reporting_guidelines property.

    >>> product_url = '/firefox'

    >>> product = webservice.get(product_url).jsonBody()
    >>> print product['bug_reporting_guidelines']
    None

    >>> from simplejson import dumps
    >>> patch = {u'bug_reporting_guidelines':
    ...          u'Please run `ubuntu-bug -p firefox`.'}
    >>> response = webservice.patch(
    ...     product['self_link'], 'application/json', dumps(patch))

    >>> product = webservice.get(product_url).jsonBody()
    >>> print product['bug_reporting_guidelines']
    Please run `ubuntu-bug -p firefox`.

Not everyone can modify it however:

    >>> patch = {u'bug_reporting_guidelines':
    ...          u'Include your credit-card details, mwuh'}
    >>> response = user_webservice.patch(
    ...     product['self_link'], 'application/json', dumps(patch))
    >>> print response.getOutput()
    HTTP/1.1 401 Unauthorized
    Content-Length: ...
    Content-Type: text/plain
    X-Lazr-Oopsid: OOPS-...
    <BLANKLINE>
    (<Product at 0x...>, 'bug_reporting_guidelines', 'launchpad.Edit')
    <BLANKLINE>
    Traceback (most recent call last):
    ...
    Unauthorized: (...)
    <BLANKLINE>


== Official Bug Tags ==

We can access official bug tag targets and add and remove tags. We create a new
product, owned by ~salgado.

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> from canonical.launchpad.ftests import login, logout
    >>> login('foo.bar@canonical.com')
    >>> salgado = getUtility(IPersonSet).getByName('salgado')
    >>> product = factory.makeProduct(name='tags-test-product', owner=salgado)
    >>> logout()

The webserice client is logged in as salgado, so we can add a new official tag.

    >>> print webservice.named_post(
    ...     '/tags-test-product', 'addOfficialBugTag',
    ...     tag='test-bug-tag')
    HTTP/1.1 200 Ok
    ...
    <BLANKLINE>
    null

And we can remove it.

    >>> print webservice.named_post(
    ...     '/tags-test-product', 'removeOfficialBugTag',
    ...     tag='test-bug-tag')
    HTTP/1.1 200 Ok
    ...
    <BLANKLINE>
    null

But a different user can't.

    >>> print user_webservice.named_post(
    ...     '/tags-test-product', 'addOfficialBugTag',
    ...     tag='test-bug-tag')
    HTTP/1.1 401 Unauthorized
    ...
    <BLANKLINE>

