= Hardware database =

== Storage of raw submissions for the hardware database ==

The hardware database clients submits an XML file with collected hardware
information and other data. This file is stored without any parsing in a
librarian file. A reference to this file is stored in the table HWSubmission,
together with the following data:

  * date_created: Date and time of the submission (generated by the client).

    This value is not very reliable: 
    * Some users do not care to set the correct time, date and time zone.
    * Some machines have a broken CMOS battery and the user does not set
      date and time after every boot.
  * date_submitted: Date and time of the submission (generated by the server).
  * format: The format version of the submitted data, as given by the HWDB
    client. See HWSubmissionFormat for valid values.
  * status: The status of the submission. See HWSubmissionProcessingStatus for
    valid values.
  * private: If True, the submitter allows public access to the data. If
    false, the data may be used only for statistical purposes.
  * contactable: If True, the submitter agrees to be contacted by upstream
    developers and package maintainers for tests etc.
  * submission_key: A unique submission ID.
  * emailaddress: The email address of the submitter.
  * owner: A reference to the Person table. This value is null, if the email 
    address does not belong (yet) to an entry in Person table.
  * distroarchseries: A reference to the distroarchseries of the submission.
    This value is null, if the submitted values for distribution, 
    distroseries and architecture do not match an existing entry in the 
    Distroarchrelease table.
  * system_fingerprint: A reference to an entry of the HWSystemFingerprint
    table. This table stores the system name as returned by HAL 
    (system.vendor, system.product).

    Limitations: 
    * "No name" products like mainboards from companies like ASRock
       or Asus that are directly sold to end users have fingerprints like
       "American Megatrends Inc. Uknown 1.0".
    * A manufacturer may erroneously assign identical DMI values for product
      and vendor to different systems.
    * submissions for "counterfeit systems".
    * users submitting bogus values using a patched HWDB client.

The system fingerprint is stored in a separate table, HWSystemFingerprint.
IHWSystemFingerPrintSet.createFingerprint creates a new row in this table.

    >>> from storm.store import Store
    >>> from canonical.launchpad.interfaces import IHWSystemFingerprintSet
    >>> hw_fingerprint_set = getUtility(IHWSystemFingerprintSet)
    >>> fp = hw_fingerprint_set.createFingerprint(u'IBM T41')
    >>> fp.fingerprint
    u'IBM T41'

Each fingerprint string in HWSystemFingerprint must be unique.

    >>> import transaction
    >>> transaction.commit()
    >>> fp = hw_fingerprint_set.createFingerprint(u'IBM T41')
    >>> Store.of(fp).flush()
    Traceback (most recent call last):
    ...
    IntegrityError: ... violates unique constraint "hwsystemfingerprint...
    <BLANKLINE>

    >>> transaction.abort()

IHWSystemFingerprint.getByName returns a fingerprint...

    >>> fp = hw_fingerprint_set.getByName(u'IBM T41')
    >>> fp.fingerprint
    u'IBM T41'

...or None, if no entry exists.

    >>> print hw_fingerprint_set.getByName(u'DEC PDP11')
    None

IHWSubmissionSet.createSubmission creates a new entry in the 
HWSubmission table.

    >>> import pytz
    >>> from datetime import datetime
    >>> from StringIO import StringIO
    >>> from canonical.launchpad.interfaces import (
    ...     HWSubmissionFormat, IHWSubmissionSet)
    >>> date_created = datetime(2007, 04, 01, tzinfo=pytz.timezone('UTC'))
    >>> date_submitted = datetime(2007, 04, 02, tzinfo=pytz.timezone('UTC'))
    >>> submission_data = 'submission data'
    >>> hw_submission_set = getUtility(IHWSubmissionSet)
    >>> submission = hw_submission_set.createSubmission(
    ...     date_created=date_created,
    ...     format=HWSubmissionFormat.VERSION_1,
    ...     private=False,
    ...     contactable=False,
    ...     submission_key=u'unique-id-1',
    ...     emailaddress=u'test@canonical.com',
    ...     distroarchseries=None,
    ...     raw_submission=StringIO(submission_data),
    ...     filename=u'hwinfo.txt',
    ...     filesize=len(submission_data),
    ...     system_fingerprint=u'Dell Inspiron 1234')

submission_key must be unique. The attempt to create a HWSubmission entry
with an already existing submission_key raises HWSubmissionError.

    >>> submission = hw_submission_set.createSubmission(
    ...     date_created=date_created,
    ...     format=HWSubmissionFormat.VERSION_1,
    ...     private=False,
    ...     contactable=False,
    ...     submission_key=u'unique-id-1',
    ...     emailaddress=u'test@canonical.com',
    ...     distroarchseries=None,
    ...     raw_submission=StringIO(submission_data),
    ...     filename=u'hwinfo.txt',
    ...     filesize=len(submission_data),
    ...     system_fingerprint=u'Dell Inspiron 1234')
    Traceback (most recent call last):
    ...
    HWSubmissionKeyNotUnique: A submission with this ID already exists

The field `owner` points to the Person record of the submitter, if the
submitted emailaddress belongs to an existing Launchpad account.

    >>> submission.owner.displayname
    u'Sample Person'

If no Person record is yet known for the submitter's email address,
the field `owner` is None.

    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> beeblebrox = getUtility(IPersonSet).getByEmail(
    ...     'beeblebrox@example.com')
    >>> print beeblebrox
    None

    >>> submission = hw_submission_set.createSubmission(
    ...     date_created=date_created,
    ...     format=HWSubmissionFormat.VERSION_1,
    ...     private=False,
    ...     contactable=False,
    ...     submission_key=u'unique-id-2',
    ...     emailaddress=u'beeblebrox@example.com',
    ...     distroarchseries=None,
    ...     raw_submission=StringIO(submission_data),
    ...     filename=u'hwinfo.txt',
    ...     filesize=len(submission_data),
    ...     system_fingerprint=u'Acer 6789')
    >>> print submission.owner
    None

The submitted data can be retrieved via IHWSubmissionSet.getBySubmissionKey.

    >>> submission = hw_submission_set.getBySubmissionKey(u'unique-id-1')
    >>> submission.submission_key, submission.system_fingerprint.fingerprint
    (u'unique-id-1', u'Dell Inspiron 1234')

If a submission is marked as private, it is only returned by 
IHWSubmissionSet.getBySubmissionKey if the parameter `user` matches the
owner of the submission...

    >>> submission = hw_submission_set.createSubmission(
    ...     date_created=date_created,
    ...     format=HWSubmissionFormat.VERSION_1,
    ...     private=True,
    ...     contactable=False,
    ...     submission_key=u'unique-id-3',
    ...     emailaddress=u'test@canonical.com',
    ...     distroarchseries=None,
    ...     raw_submission=StringIO(submission_data),
    ...     filename=u'hwinfo.txt',
    ...     filesize=len(submission_data),
    ...     system_fingerprint=u'Dell Inspiron 1234')
    >>> print hw_submission_set.getBySubmissionKey(u'unique-id-3')
    None
    >>> sample_person = getUtility(IPersonSet).getByEmail('test@canonical.com')
    >>> sample_person.displayname
    u'Sample Person'
    >>> submission = hw_submission_set.getBySubmissionKey(
    ...     u'unique-id-3', sample_person)
    >>> submission
    <HWSubmission at ...>

... or if `user` is an admin.

    >>> foobar = getUtility(IPersonSet).getByEmail('foo.bar@canonical.com')
    >>> submission = hw_submission_set.getBySubmissionKey(
    ...     u'unique-id-3', foobar)
    >>> submission
    <HWSubmission at ...>

Only the owner and admins can view the submission details.

    >>> submission.submission_key, submission.system_fingerprint.fingerprint
    Traceback (most recent call last):
    ...
    Unauthorized: (...'submission_key', 'launchpad.View')

    >>> login('test@canonical.com')
    >>> submission.submission_key, submission.system_fingerprint.fingerprint
    (u'unique-id-3', u'Dell Inspiron 1234')

    >>> login('foo.bar@canonical.com')
    >>> submission.submission_key, submission.system_fingerprint.fingerprint
    (u'unique-id-3', u'Dell Inspiron 1234')

Passing another person than the owner or an admin as the parameter `user`
does not return private submissions.

    >>> no_priv = getUtility(IPersonSet).getByEmail('no-priv@canonical.com')
    >>> no_priv.displayname
    u'No Privileges Person'
    >>> print hw_submission_set.getBySubmissionKey(u'unique-ID-3', no_priv)
    None

    >>> login(ANONYMOUS)

If no submission exists for a given ID, None is returned.

    >>> print hw_submission_set.getBySubmissionKey(u'unknown-ID')
    None

IHWSubmissionSet.getByFingerprintName returns all submissions for a
given fingerprint name. Private submissions are excluded, if the parameter
`user` is omitted or if user is neither the owner nor an admin.

    >>> submissions = hw_submission_set.getByFingerprintName(
    ...     u'Dell Inspiron 1234')
    >>> [(s.submission_key, s.system_fingerprint.fingerprint, s.private)
    ...  for s in submissions]
    [(u'unique-id-1', u'Dell Inspiron 1234', False)]
    >>> submissions = hw_submission_set.getByFingerprintName(
    ...     u'Dell Inspiron 1234', no_priv)
    >>> [(s.submission_key, s.system_fingerprint.fingerprint, s.private)
    ...  for s in submissions]
    [(u'unique-id-1', u'Dell Inspiron 1234', False)]
    >>> login('test@canonical.com')
    >>> submissions = hw_submission_set.getByFingerprintName(
    ...     u'Dell Inspiron 1234', sample_person)
    >>> [(s.submission_key, s.system_fingerprint.fingerprint, s.private)
    ...  for s in submissions]
    [(u'unique-id-1', u'Dell Inspiron 1234', False),
     (u'unique-id-3', u'Dell Inspiron 1234', True)]
    >>> submissions = hw_submission_set.getByFingerprintName(
    ...     u'Dell Inspiron 1234', foobar)
    >>> [(s.submission_key, s.system_fingerprint.fingerprint, s.private)
    ...  for s in submissions]
    [(u'unique-id-1', u'Dell Inspiron 1234', False),
     (u'unique-id-3', u'Dell Inspiron 1234', True)]

If no submissions exist for the given system fingerprint, an empty result
set is returned.

    >>> list(hw_submission_set.getByFingerprintName('DEC PDP11'))
    []

IHWSubmissionSet.getByOwner returns all submissions of a person. Again,
only non-private submissions are returned if no parameter `user` is passed
to the method, or if the passed parameter is neither the owner nor an admin.

    >>> submissions = hw_submission_set.getByOwner(sample_person)
    >>> [(s.submission_key, s.system_fingerprint.fingerprint)
    ...  for s in submissions]
    [(u'unique-id-1', u'Dell Inspiron 1234'),
     (u'test_submission_id_1', u'TONKA TUFFBOOK2600')]
    >>> submissions = hw_submission_set.getByOwner(sample_person,
    ...                                            user=no_priv)
    >>> [(s.submission_key, s.system_fingerprint.fingerprint)
    ...  for s in submissions]
    [(u'unique-id-1', u'Dell Inspiron 1234'),
     (u'test_submission_id_1', u'TONKA TUFFBOOK2600')]
    >>> submissions = hw_submission_set.getByOwner(sample_person,
    ...                                            user=sample_person)
    >>> [(s.submission_key, s.system_fingerprint.fingerprint)
    ...  for s in submissions]
    [(u'unique-id-1', u'Dell Inspiron 1234'),
     (u'unique-id-3', u'Dell Inspiron 1234'),
     (u'test_submission_id_1', u'TONKA TUFFBOOK2600')]
    >>> submissions = hw_submission_set.getByOwner(sample_person,
    ...                                            user=foobar)
    >>> [(s.submission_key, s.system_fingerprint.fingerprint)
    ...  for s in submissions]
    [(u'unique-id-1', u'Dell Inspiron 1234'),
     (u'unique-id-3', u'Dell Inspiron 1234'),
     (u'test_submission_id_1', u'TONKA TUFFBOOK2600')]

When an anonymous submitter later registers a Launchpad account, the field 
`owner` is updated.

    >>> from canonical.launchpad.interfaces import (
    ...     IEmailAddressSet, PersonCreationRationale)
    >>> user = getUtility(IPersonSet).ensurePerson(
    ...     u'beeblebrox@example.com', u'Beeblebrox', 
    ...     PersonCreationRationale.OWNER_CREATED_LAUNCHPAD)
    >>> email = getUtility(IEmailAddressSet).getByEmail(
    ...     u'beeblebrox@example.com')
    >>> user.validateAndEnsurePreferredEmail(email)
    >>> submission = hw_submission_set.getBySubmissionKey(u'unique-id-2')
    >>> print submission.owner.displayname
    Beeblebrox

If somebody has a Launchpad account, but submits HWDB test data using
an email address which he has not added to his account, the submission
will have the the `owner` field set to None.

    >>> submission = hw_submission_set.createSubmission(
    ...     date_created=date_created,
    ...     format=HWSubmissionFormat.VERSION_1,
    ...     private=False,
    ...     contactable=False,
    ...     submission_key=u'unique-id-4',
    ...     emailaddress=u'beeblebrox@beeblebrox.net',
    ...     distroarchseries=None,
    ...     raw_submission=StringIO(submission_data),
    ...     filename=u'hwinfo.txt',
    ...     filesize=len(submission_data),
    ...     system_fingerprint=u'Acer 6789')
    >>> print submission.owner
    None

When he adds this email address to his list of addresses in Launchpad,
the field `owner` is updated.

    >>> email = getUtility(IEmailAddressSet).new(
    ...     u'beeblebrox@beeblebrox.net', user)
    >>> login(email.email)
    >>> user.validateAndEnsurePreferredEmail(email)
    >>> submission = hw_submission_set.getBySubmissionKey(u'unique-id-2')
    >>> print submission.owner.displayname
    Beeblebrox
