= Introduction =

All collections published by the Launchpad web service work pretty
much the same way. This document illustrates the general features of
entries, using Launchpad's collection of people and teams as an example.

== Collections and pagination ===

A collection responds to GET by serving one page of the objects in the
collection.

  >>> people_collection = webservice.get("/beta/people").jsonBody()
  >>> people_collection['total_size']
  63
  >>> people_collection['next_collection_link']
  u'http://api.launchpad.dev/beta/people?ws.start=5&ws.size=5'
  >>> people_collection.get('prev_collection_link') is None
  True

  >>> people_entries = sorted(people_collection['entries'])
  >>> len(people_entries)
  5
  >>> people_entries[0]['name']
  u'spiv'
  >>> people_entries[0]['self_link']
  u'http://api.launchpad.dev/beta/~spiv'
  >>> people_entries[-1]['name']
  u'bug-importer'

You can get other pages of the collection by following links:

  >>> result = webservice.get("/beta/people?ws.start=5&ws.size=5")
  >>> second_batch = result.jsonBody()
  >>> second_batch['next_collection_link']
  u'http://api.launchpad.dev/beta/people?ws.start=10&ws.size=5'
  >>> second_batch['prev_collection_link']
  u'http://api.launchpad.dev/beta/people?ws.start=0&ws.size=5'

  >>> people_entries = sorted(second_batch['entries'])
  >>> people_entries[0]['name']
  u'valyag'

You can also get a larger batch than the default:

  >>> big_batch = webservice.get("/beta/people?ws.size=50").jsonBody()
  >>> len(big_batch['entries'])
  50
  >>> big_batch.get('next_collection_link')
  u'http://api.launchpad.dev/beta/people?ws.start=50&ws.size=50'

  >>> bigger_batch = webservice.get("/beta/people?ws.size=75").jsonBody()
  >>> len(bigger_batch['entries'])
  63
  >>> bigger_batch.get('next_collection_link') is None
  True

But requesting a batch size higher than the maximum configured value
results in a 400 error.

    >>> print webservice.get("/beta/people?ws.start=0&ws.size=1000")
    HTTP/1.1 400 Bad Request
    ...
    Content-Type: text/plain...
    <BLANKLINE>
    Maximum for "ws.size" parameter is ...


== Element lookup ==

The elements of a collection can be looked up by unique identifier:

  >>> admins_team = webservice.get("/beta/~admins").jsonBody()
  >>> sorted(admins_team.items())
  [(u'date_created', u'2005-06-06T08:59:51.571899+00:00'),
   (u'display_name', u'Launchpad Administrators'),
   (u'member_memberships_collection_link',
    u'http://api.launchpad.dev/beta/~admins/member_memberships'),
   (u'members_collection_link',
      u'http://api.launchpad.dev/beta/~admins/members'),
   (u'mugshot_link', u'http://api.launchpad.dev/beta/~admins/mugshot'),
   (u'name', u'admins'),
   (u'self_link', u'http://api.launchpad.dev/beta/~admins'),
   (u'team_memberships_collection_link',
    u'http://api.launchpad.dev/beta/~admins/team_memberships'),
   (u'team_owner_link', u'http://api.launchpad.dev/beta/~sabdfl')]

A collection may be scoped to an element:

  >>> result = webservice.get("/beta/~admins/members")
  >>> team_members = sorted(result.jsonBody()['entries'])
  >>> len(team_members)
  5
  >>> team_members[0]['name']
  u'spiv'
  >>> team_members[-1]['name']
  u'kinnison'

  >>> result = webservice.get("/beta/~spiv/members")
  >>> list(result.jsonBody()['entries'])
  []


== Custom operations ==

A collection may expose custom named operations in response to GET
requests. A named operation may do anything consistent with the nature
of a GET request, but it's usually used to serve search results. The
custom operation to be invoked is named in the query string's
'ws.op' argument. Here's a custom operation on the collection of
people, called 'people'.

  >>> def search_people(text, start=0):
  ...     return webservice.get(
  ...         "/beta/people?ws.op=find&text=%s&ws.start=%s" %
  ...             (text, start)).jsonBody()

A custom operation that returns a list of objects is paginated, just
like a collection.

  >>> s_people = search_people("s")
  >>> s_people['total_size']
  8
  >>> s_people['next_collection_link']
  u'http://api.launchpad.dev/beta/people?ws.op=find&text=s&ws.start=5&ws.size=5'
  >>> [p['name'] for p in sorted(s_people['entries'])]
  [u'salgado', u'stevea', u'keybuk', u'sigurd-ubuntu', u'sjoerd']

  >>> s_people_batch_2 = search_people("s", 5)
  >>> [p['name'] for p in sorted(s_people_batch_2['entries'])]
  [u'skacel', u'stub', u'ubuntu-team']

Just as a collection may be empty, a custom operation may return an
empty list of results:

  >>> empty_list = search_people("nosuchperson")
  >>> empty_list['total_size']
  0
  >>> [p['name'] for p in empty_list['entries']]
  []

Custom operations may have custom error handling.

  >>> print webservice.get("/beta/people?ws.op=find&text=")
  HTTP/1.1 400 Bad Request
  ...
  text: Required input is missing.

A collection may also expose named operations in response to POST
requests. These operations are usually factories. Here's a helper
method that creates a new team by invoking a factory operation on
the collection of people.

  >>> def create_team(name, display_name):
  ...     return webservice.named_post(
  ...         "/beta/people", "create_team", {},
  ...         name=name, display_name=display_name)

  >>> print webservice.get('/beta/~serviceteam')
  HTTP/1.1 404 Not Found
  ...

  >>> print create_team("serviceteam", "Service Team")
  HTTP/1.1 201 Created
  ...
  Location: http://api.launchpad.dev/beta/~serviceteam
  <BLANKLINE>

  >>> print webservice.get('/beta/~serviceteam')
  HTTP/1.1 200 Ok
  ...

  >>> print create_team("serviceteam2", "Service Team")
  HTTP/1.1 201 Created
  ...
  Location: http://api.launchpad.dev/beta/~serviceteam2
  <BLANKLINE>

  >>> print webservice.get('/beta/~serviceteam2')
  HTTP/1.1 200 Ok
  ...

Standard team-creation rules apply. For instance, you can't create a
team with a name that's taken.

  >>> print create_team("serviceteam", "Name already taken")
  HTTP/1.1 400 Bad Request
  ...
  name: serviceteam is already in use by another person or team.

A POST request has no meaning right now unless it specifies a custom
operation.

  >>> print webservice.post("/beta/people", 'text/plain', '')
  HTTP/1.1 400 Bad Request
  ...
  No operation name given.

You can't invoke a nonexistent operation:

  >>> print webservice.named_post("/beta/people", "nosuchop", {})
  HTTP/1.1 400 Bad Request
  ...
  No such operation: nosuchop
