= Reset Password =

David Allouche forgot his password and he's going to use the forgotten
password form to reset it.

Go to the 'Forgotten Password' page.

    >>> browser.open('http://launchpad.dev/+login')
    >>> browser.getLink('Forgotten your password?').click()

    >>> browser.url
    'http://launchpad.dev/+forgottenpassword'

    >>> browser.title
    'Need a new Launchpad password?'

Type the email address registered in Launchpad and submit the form.

    >>> browser.getControl(name='email').value = (
    ...     'david.allouche@canonical.com')
    >>> browser.getControl('Request Reset').click()

    >>> print browser.contents
    <...
    ...<p>We have sent you an email with instructions to reset your
    password.</p>...
    ...

Get the token we'll have to use to finish the registration process.

    >>> import email, re
    >>> from canonical.launchpad.mail import stub
    >>> from_addr, to_addrs, raw_msg = stub.test_emails.pop()
    >>> assert not stub.test_emails
    >>> msg = email.message_from_string(raw_msg)
    >>> body = msg.get_payload()
    >>> link = re.findall(r'http.*/token/.*', body)[0]
    >>> token = re.sub(r'.*token/', '', link)
    >>> base_path = '/token/%s' % token

Check if the email was sent to the right address.

    >>> to_addrs
    ['david.allouche@canonical.com']

Go to the link sent by email.

    >>> browser.open('http://launchpad.dev%s' % base_path)
    >>> browser.url
    'http://launchpad.dev/token/.../+resetpassword'

The token can only be used to reset the password.  Manually typing
another login token view name will redirect to the correct one:

    >>> wrong_path = base_path + "/+validateemail"
    >>> browser.open('http://launchpad.dev%s' % wrong_path)
    >>> browser.url
    'http://launchpad.dev/token/.../+resetpassword'

He may now enter his password.  Unfortunately, he picks a password with
invalid characters:

    >>> browser.getControl(
    ...     name='field.email').value = 'david.allouche@canonical.com'
    >>> browser.getControl(name='field.password').value = 'é'
    >>> browser.getControl(name='field.password_dupe').value = 'é'
    >>> browser.getControl('Continue').click()

    >>> browser.url
    'http://launchpad.dev/token/.../+resetpassword'

    >>> for tag in get_feedback_messages(browser.contents):
    ...     print extract_text(tag)
    There is 1 error.
    The password provided contains non-ASCII characters.

This time, he corrects the password and continues:

    >>> browser.getControl(name='field.password').value = 'test2'
    >>> browser.getControl(name='field.password_dupe').value = 'test2'
    >>> browser.getControl('Continue').click()

    >>> browser.url
    'http://launchpad.dev/~ddaa'

    >>> for tag in get_feedback_messages(browser.contents):
    ...     print extract_text(tag)
    Your password has been reset successfully

    >>> for tag in find_tags_by_class(browser.contents, 'login'):
    ...     print extract_text(tag)
    Logged in as David Allouche &ndash;

Now that the token is consumed, he's not able to use it again.

    >>> browser.open('http://launchpad.dev%s' % base_path)

    >>> for tag in get_feedback_messages(browser.contents):
    ...     print extract_text(tag)
    You reached this page probably because you followed a link received by
    email. That link was sent to confirm you have access to the email
    address it was sent to, but this confirmation was already concluded, so
    you don't need to do anything else.

It is now possible for David to log in with his new password.  We will
log out and then log in again:

    >>> browser.open('http://launchpad.dev/+logout')
    >>> for tag in get_feedback_messages(browser.contents):
    ...     print extract_text(tag)
    You have been logged out

    >>> browser.getLink('Log In / Register').click()

    >>> browser.getControl(
    ...     'E-mail address:', index=0).value = 'david.allouche@canonical.com'
    >>> browser.getControl('Password').value = 'test2'
    >>> browser.getControl('Log In').click()

    >>> browser.url
    'http://launchpad.dev'

    >>> for tag in find_tags_by_class(browser.contents, 'login'):
    ...     print extract_text(tag)
    Logged in as David Allouche &ndash;

Test that we reject requests for resetting teams' passwords.

    >>> browser.open('http://launchpad.dev/+forgottenpassword')
    >>> browser.getControl(name='email').value = 'support@ubuntu.com'
    >>> browser.getControl('Request Reset').click()

    >>> for tag in find_tags_by_class(browser.contents, 'error'):
    ...     print tag
    <div class="error">The email address <strong>support@ubuntu.com</strong>
    belongs to a team, and teams cannot log in to Launchpad.</div>

