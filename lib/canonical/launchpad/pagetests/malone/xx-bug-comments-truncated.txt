= Bug comments truncated, obfuscated, and hidden =

There are several scenarios where user messages are altered for
presentation. Messages originating from emails for example often
have unwanted or unnecessary content included.

== Truncated text ==

When displaying the comments on the main bug page they are truncated if
they are too long. In order to show that, let's set the limit to a
small value.

    >>> from canonical.config import config
    >>> OLD_COMMENT_SIZE = config.malone.max_comment_size
    >>> config.malone.max_comment_size = 45

Bug number two starts with a short comment followed by two longer ones,
the first one will be displayed as it is, and the other two will be
truncated.

    >>> browser.open('http://localhost/bugs/2')
    >>> from BeautifulSoup import BeautifulSoup
    >>> def print_comments(page):
    ...     """Print all the comments on the page."""
    ...     soup = BeautifulSoup(page)
    ...     comment_divs = soup('div', 'boardCommentBody')
    ...     for div_tag in comment_divs:
    ...         print div_tag
    >>> print_comments(browser.contents) #doctest: -ELLIPSIS
    <div class="boardCommentBody">
    <div style="font-family: monospace;"><p>This
    would be a real killer feature. If there...</p></div>
    <p>
    <a href="/ubuntu-product/+bug/2/comments/1">Read more...</a>
    </p>
    </div>
    <div class="boardCommentBody">
    <div style="font-family: monospace;"><p>Oddly
    enough the bug system seems only capabl...</p></div>
    <p>
    <a href="/ubuntu-product/+bug/2/comments/2">Read more...</a>
    </p>
    </div>

Let's click on the first "Read more..." link.

    >>> browser.getLink("Read more...").click()
    >>> browser.url
    'http://bugs.launchpad.dev/ubuntu-product/+bug/2/comments/1'

The whole comment is visible on this page:

    >>> browser.title
    'Bug #2 - Comment #1'

    >>> print_comments(browser.contents) #doctest: -ELLIPSIS
    <div class="boardCommentBody">
    <div style="font-family: monospace;"><p>This
      would be a real killer feature. If there is already code
      to make it possible, why aren't there tons of press announcements
      about the secuirty possibilities. Imagine - no more embarrassing
      emails for Mr Gates... everything they delete would actually
      disappear! I'm sure Redmond will switch over as soon as they hear
      about this. It's not a bug, it's a feature!</p></div>
    </div>

    >>> config.malone.max_comment_size = OLD_COMMENT_SIZE

== Obfuscated email addresses and hidden content ==

Let's have an No Privileges Person create a message in the style of
an email post to examine the markup rules for obfuscations and
hiding. This message contains a quoted passage, and a signature
with an email address in it. Note: This set of tests is generally
the same rules as xx-question-message.txt; changes here may require
changes to that test.

    >>> user_browser.open('http://bugs.launchpad.dev/ubuntu-product/+bug/2')
    >>> user_browser.title.decode('utf-8')
    u'Bug #2 in ubuntu (upstream): ...Blackhole Trash folder...'
    >>> user_browser.getControl('Comment', index=-1).value = (
    ...     "Top quoting is bad netiquette.\n"
    ...     "The leading text will be displayed\n"
    ...     "normally--no markup to hide it from view.\n"
    ...     "\n"
    ...     "Somebody said sometime ago:\n"
    ...     "> 1. Remove the letters  c, j, q, x, w\n"
    ...     ">    from the English Language.\n"
    ...     "> 2. Remove the penny from US currency.\n"
    ...     "\n"
    ...     "--\n"
    ...     "______________________\n"
    ...     "human@somewhere.org\n"
    ...     "Witty signatures rock!\n")
    >>> user_browser.getControl('Save Changes', index=-1).click()

No Privileges Person is authenticated in user_browser, so he can see
email addresses in messages.

    >>> user_browser.title.decode('utf-8')
    u'Bug #2 in ubuntu (upstream): ...Blackhole Trash folder...'
    >>> text = find_tags_by_class(
    ...     user_browser.contents, 'boardCommentBody')[-1]
    >>> print extract_text(text.findAll('p')[-1])
    --
    ______________________
    human@somewhere.org
    Witty signatures rock!

Unauthenticated users, such as a bot will see the obfuscated email
address, '<email address hidden>'. The anonymous user is
unauthenticated, so he will see the obfuscated email address.

    >>> anon_browser.open('http://bugs.launchpad.dev/ubuntu-product/+bug/2')
    >>> anon_browser.title.decode('utf-8')
    u'Bug #2 in ubuntu (upstream): ...Blackhole Trash folder...'
    >>> text = find_tags_by_class(
    ...     anon_browser.contents, 'boardCommentBody')[-1]
    >>> print extract_text(text.findAll('p')[-1])
    --
    ______________________
    &lt;email address hidden&gt;
    Witty signatures rock!

The style and script in the user_browser control the display and behaviour
of content inside tags with the class 'foldable'. The script adds a
link to toggle the display of the foldable text between none and inline.

Signatures are identified by paragraphs with a starting line like '--'.
The entire content of the paragraph is wrapped by a tag of 'foldable'
class.

    >>> # XXX sinzui 2007-06-14 bug 120425
    >>> # Pagetests cannot test CSS and JS behaviour.
    >>> # We can only check that the markup includes the hooks
    >>> # for the style and script.
    >>> print text.findAll('p')[-1]
    <p><span class="foldable">--...
    &lt;email address hidden&gt;<br />
    Witty signatures rock!
    </span></p>

Quoted passages are identified by lines that start with '>' or ':'.
The lines represents many paragraphs of quoted text, but we mark the
block of content as a single paragraph. The quoted lines are often
preceded by a citation line. Only the quoted lines are wrapped with a
tag of 'foldable' class, citation lines are always displayed. Again
we can continue with the anonymous user to see the markup.

    >>> print text.findAll('p')[-2]
    <p>Somebody said sometime ago:<br />
    <span class="foldable">
    &gt; 1. Remove the letters  c, j, q, x, w<br />
    &gt;    from the English Language.<br />
    &gt; 2. Remove the penny from US currency.
    </span></p>
