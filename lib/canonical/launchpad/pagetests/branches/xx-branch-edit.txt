= Editing Branches =

Once a branch has been created in Launchpad, most of the details are able
to be edited by the owner of the branch.  The registrant and date_created
are not editable for obvious reasons.


== Editing branch details ==

First, check that the edit link is visible on the branch page and click on
that link to load the +edit form for the branch.

    >>> from canonical.launchpad.mail import stub
    >>> stub.test_emails = []

The link to edit the branch details is only available to the branch owner,
Launchpad administrators or members of the Bazaar Experts team.

    >>> admin_browser.open(
    ...     'http://launchpad.dev/~name12/gnome-terminal/klingon')
    >>> link = admin_browser.getLink('Change branch details')

    >>> bazaar_expert_browser = setupBrowser(
    ...     auth='Basic tim@canonical.com:test')
    >>> bazaar_expert_browser.open(
    ...     'http://launchpad.dev/~name12/gnome-terminal/klingon')
    >>> link = bazaar_expert_browser.getLink('Change branch details')

    >>> nopriv_browser = setupBrowser(
    ...     auth='Basic nopriv@canonical.com:test')
    >>> nopriv_browser.open(
    ...     'http://launchpad.dev/~name12/gnome-terminal/klingon')
    >>> link = nopriv_browser.getLink('Change branch details')
    Traceback (most recent call last):
    LinkNotFoundError

    >>> browser = setupBrowser(auth='Basic test@canonical.com:test')
    >>> browser.open(
    ...     'http://launchpad.dev/~name12/gnome-terminal/klingon')
    >>> browser.getLink('Change branch details').click()
    >>> browser.url
    'http://code.launchpad.dev/~name12/gnome-terminal/klingon/+edit'

The form should have been filled with sample data values.

    >>> print browser.getControl('Title').value
    Klingon support in GNOME Terminal
    >>> print browser.getControl('Branch URL').value
    http://trekkies.example.com/gnome-terminal/klingon
    >>> print browser.getControl('Summary').value
    Experimental feature branch for developping and testing Klingon
    support in GNOME Terminal.
    Home page: http://trekkies.example.com/k12n

Then, post the changes to the summary. Also add a trailing
slash to the URL.

    >>> browser.getControl('Summary').value = (
    ...     "Warriors' branch for developping and testing Klingon support"
    ...     " in GNOME Terminal.")
    >>> browser.getControl('Branch URL').value += '/'
    >>> browser.getControl('Change Branch').click()

We should be redirected to the branch page, check that our changes were taken
into account. The trailing slash added to the URL has been ignored.

Since the details have been changed, emails should have been sent out.
Emails go out to the all the subscribers.  Now there
are no subscribers so there whould be no emails.

    >>> len(stub.test_emails)
    0

    >>> print browser.url
    http://code.launchpad.dev/~name12/gnome-terminal/klingon

    >>> print extract_text(find_tag_by_id(
    ...     browser.contents, 'branch-details-table').tbody)
    Project: GNOME Terminal (Unspecified)
    Location: http://trekkies.example.com/gnome-terminal/klingon
    Last mirrored: ...

    >>> print extract_text(find_tag_by_id(browser.contents, 'branch-summary'))
    Warriors' branch for developping and testing Klingon support
    in GNOME Terminal.


== Editing the Lifecycle Status ==

To change the branch status, the +edit page is also used:

    >>> browser.open('http://launchpad.dev'
    ...     '/~name12/gnome-terminal/klingon/+edit')

The form displays the branch current status.

    >>> print_radio_button_field(browser.contents, 'lifecycle_status')
    ( ) New
    (*) Experimental
    ( ) Development
    ( ) Mature
    ( ) Merged
    ( ) Abandoned
    >>> browser.getControl('Whiteboard').value
    ''

The user selects the new status value and enters a more complete status message
in the 'Whiteboard':

    >>> browser.getControl('Merged').click()
    >>> browser.getControl('Whiteboard').value = \
    ...     "The brave shall prevail. Ka'plah!"
    >>> browser.getControl('Change Branch').click()

The branch page is displayed with the new status and the whiteboard content:

    >>> browser.url
    'http://code.launchpad.dev/~name12/gnome-terminal/klingon'
    >>> contents = browser.contents
    >>> status_tag = find_tag_by_id(contents, 'branch-details-status-value')
    >>> print status_tag.renderContents()
    Merged
    >>> whiteboard_tag = find_tag_by_id(contents, 'branch-whiteboard-value')
    >>> print extract_text(whiteboard_tag)
    The brave shall prevail. Ka'plah!

Set the branch status back to its initial state.

    >>> browser.open('http://launchpad.dev'
    ...     '/~name12/gnome-terminal/klingon/+edit')
    >>> browser.getControl('Experimental').click()
    >>> browser.getControl('Whiteboard').value = ''
    >>> browser.getControl('Change Branch').click()


== Changing branch product and name ==

The edit form allows changing the product of a branch.

    >>> browser.open('http://launchpad.dev/~name12/+junk/junk.dev')
    >>> browser.getLink('Change branch details').click()
    >>> browser.getControl('Project').value = 'tomcat'
    >>> browser.getControl('Change Branch').click()

Posting this form should redirect us to the branch page, which is a new URL
since changing the product associated to a branch changed the branch's
canonical URL

    >>> browser.url
    'http://code.launchpad.dev/~name12/tomcat/junk.dev'

A notification is also shown as moving a branch between projects is a big deal.

    >>> for message in get_feedback_messages(browser.contents):
    ...     print extract_text(message)
    The project for this branch has been changed to Tomcat (tomcat)

In the same way, the edit form allows changing the name of a branch, and must
correctly redirect to the new branch page.

    >>> browser.getLink('Change branch details').click()
    >>> browser.getControl('Name').value = 'junk'
    >>> browser.getControl('Change Branch').click()
    >>> browser.url
    'http://code.launchpad.dev/~name12/tomcat/junk'

Branch names are less strictly constrained than most others in Launchpad
-- they are not restricted to lower case, and can contain underscores in
addition to the plus signs, dots and hyphens allowed by the default name
validator.

    >>> browser.getLink('Change branch details').click()
    >>> browser.getControl('Name').value = 'USELESS_junk'
    >>> browser.getControl('Change Branch').click()
    >>> browser.url
    'http://code.launchpad.dev/~name12/tomcat/USELESS_junk'

We can also detach a branch from a product, making it a junk branch. While we
are it, we also reset the branch name to its original value, and check that the
branch was moved back to its original location.

    >>> browser.getLink('Change branch details').click()
    >>> browser.getControl('Name').value = 'junk.dev'
    >>> browser.getControl('Project').value = ''
    >>> browser.getControl('Change Branch').click()
    >>> browser.url
    'http://code.launchpad.dev/~name12/+junk/junk.dev'

A message is also shown when the branch has the project association removed.

    >>> for message in get_feedback_messages(browser.contents):
    ...     print extract_text(message)
    This branch is no longer associated with a project.

However, we cannot detach a team-owned branch from a product, for the
reasons given in xx-branch-reassign.txt.

    >>> browser.open('http://code.launchpad.dev/~landscape-developers/landscape/trunk')
    >>> browser.getLink('Change branch details').click()
    >>> browser.getControl('Project').value = ''
    >>> browser.getControl('Change Branch').click()
    >>> browser.url
    'http://code.launchpad.dev/%7Elandscape-developers/landscape/trunk/+edit'
    >>> for msg in get_feedback_messages(browser.contents):
    ...     print msg
    There is 1 error.
    Team-owned branches must be associated with a project.


== Name conflicts ==

The product and branch name contributes to the unique name of a branch.
The name of a branch has to be unique over all the branches of that
product for the given branch owner.

There is an existing main branch in Firefox that is owned by Sample Person.

    >>> browser.open('http://launchpad.dev/~name12/firefox/main')

If we try to move the main branch of GNOME Terminal there, that would cause a
name conflict, because both branches would have the same name.

Okay, trying to move a branch from GNOME Terminal to Firefox is a silly idea,
but that is just for the needs of the demonstration.

    >>> browser.open('http://launchpad.dev'
    ...     '/~name12/gnome-terminal/main/+edit')
    >>> browser.getControl('Project').value = 'firefox'
    >>> browser.getControl('Change Branch').click()
    >>> browser.url
    'http://launchpad.dev/%7Ename12/gnome-terminal/main/+edit'

This should have displayed an error message next to the name field.

    >>> for msg in get_feedback_messages(browser.contents):
    ...     print msg
    There is 1 error.
    You already have a branch for firefox called main.

Since we are clearly in a substance-induced state of altered consciousness, we
will now try to rename this branch in a way that conflicts with an existing
junk branch.

That tests two interesting corner cases: trying to turn a branch into a junk
branch, and changing the product and the branch name at the same time.

    >>> browser.open('http://launchpad.dev'
    ...     '/~name12/gnome-terminal/main/+edit')
    >>> browser.getControl('Project').value = ''
    >>> browser.getControl('Name').value = 'junk.dev'
    >>> browser.getControl('Change Branch').click()
    >>> browser.url
    'http://launchpad.dev/%7Ename12/gnome-terminal/main/+edit'
    >>> for msg in get_feedback_messages(browser.contents):
    ...     print msg
    There is 1 error.
    You already have a junk branch called junk.dev.

Finally, let's try just to change the name of the branch to the name of some
branch we already own in the same product. So we have tested all the
combinations of changing name and product that can cause an error.

    >>> browser.open('http://launchpad.dev'
    ...     '/~name12/gnome-terminal/main/+edit')
    >>> browser.getControl('Name').value = '2.6'
    >>> browser.getControl('Change Branch').click()
    >>> browser.url
    'http://launchpad.dev/%7Ename12/gnome-terminal/main/+edit'
    >>> for msg in get_feedback_messages(browser.contents):
    ...     print msg
    There is 1 error.
    You already have a branch for gnome-terminal called 2.6.

If the user enters an invalid product name they will get an error
message about that, but no error about the branch name since we don't
know if it conflicts or not:

    >>> browser.getControl('Project').value = 'no-such-product'
    >>> browser.getControl('Change Branch').click()
    >>> browser.url
    'http://launchpad.dev/%7Ename12/gnome-terminal/main/+edit'
    >>> for msg in get_feedback_messages(browser.contents):
    ...     print msg
    There is 1 error.
    Invalid value


== URL validation ==

Edit forms do the same URL validation checks as the add forms.

    >>> browser.open('http://launchpad.dev/~name12/gnome-terminal/main')
    >>> browser.getLink('Change branch details').click()
    >>> browser.getControl('Branch URL').value = (
    ...     'http://bazaar.launchpad.dev/~foo/bar/baz')
    >>> browser.getControl('Change Branch').click()

    >>> for message in get_feedback_messages(browser.contents):
    ...     print message
    There is 1 error.
    For Launchpad to mirror a branch, the original branch cannot be
    on launchpad.dev.

Check that when editing a hosted branch the URL field is not shown.

    >>> browser.open('http://launchpad.dev/~name12/gnome-terminal/scanned')
    >>> browser.getLink('Change branch details').click()
    >>> browser.getControl('Branch URL').value = (
    ...     'http://acme.example.com/~foo/bar/baz')
    Traceback (most recent call last):
    ...
    LookupError: label 'Branch URL'


== Editing the whiteboard ==

The whiteboard is now editable by any logged in user.

    >>> nopriv_browser = setupBrowser(auth='Basic no-priv@canonical.com:test')
    >>> nopriv_browser.open('http://launchpad.dev'
    ...     '/~name12/gnome-terminal/main')
    >>> whiteboard_tag = find_tag_by_id(
    ...     nopriv_browser.contents, 'branch-whiteboard-value')

There is no whiteboard section shown if there is no whiteboard value
set.

    >>> print whiteboard_tag
    None

    >>> # Reset the stub emails.
    >>> stub.test_emails = []
    >>> nopriv_browser.getLink('Edit whiteboard').click()

    >>> nopriv_browser.getControl('Whiteboard').value = (
    ...     'New whiteboard value')
    >>> nopriv_browser.getControl('Change Branch').click()

    >>> whiteboard_tag = find_tag_by_id(
    ...     nopriv_browser.contents, 'branch-whiteboard-value')
    >>> print extract_text(whiteboard_tag)
    New whiteboard value

Even though there are no subscribers, the owner of the branch is notified
that someone else has modified the details of the branch.

    >>> len(stub.test_emails)
    1
    >>> print stub.test_emails[0][2]
    Content-Type: ...
    ...
    To: test@canonical.com
    From: No Privileges Person <no-priv@canonical.com>
    Subject: [Branch ~name12/gnome-terminal/main] GNOME Terminal Mainline
    ...
    Whiteboard changed to:
    <BLANKLINE>
    New whiteboard value
    <BLANKLINE>
    --
    GNOME Terminal Mainline
    http://code.launchpad.dev/~name12/gnome-terminal/main
    <BLANKLINE>
    You are getting this email as you are the owner of the branch and someone h=
    as edited the details.


== Changing the branch owner ==

The user is able to change the owner of the branch using the edit details
page.

    >>> browser.open('http://launchpad.dev/~name12/gnome-terminal/main')
    >>> browser.getLink('Change branch details').click()
    >>> browser.getControl('Owner').displayValue = ['Landscape Developers']
    >>> browser.getControl('Change Branch').click()

When the owner is changed a notification is shown.

    >>> for message in get_feedback_messages(browser.contents):
    ...     print extract_text(message)
    The branch owner has been changed to Landscape Developers (landscape-developers)

If both the project and owner are changed, both notification messages are
shown.

    >>> browser.getLink('Change branch details').click()
    >>> browser.getControl('Owner').displayValue = ['Sample Person']
    >>> browser.getControl('Project').value = ''
    >>> browser.getControl('Change Branch').click()
    >>> for message in get_feedback_messages(browser.contents):
    ...     print extract_text(message)
    The branch owner has been changed to Sample Person (name12)
    This branch is no longer associated with a project.


== Preventing the assignment of a +junk branch to a team ==

+junk branches are a facility to host small snippets of code that do
not call for collaboration features.  Once a team is needed to
collaborate on a branch, we consider they also really want a project
to support their collaboration.

One of two potential ways of creating a +junk team branch is to assign
a +junk branch from yourself to a team.

    >>> browser.getLink('Change branch details').click()
    >>> browser.getControl('Owner').displayValue = ['Landscape Developers']
    >>> browser.getControl('Change Branch').click()
    >>> for message in get_feedback_messages(browser.contents):
    ...     print extract_text(message)
    There is 1 error.
    Team-owned branches must be associated with a project.

(The other is changing the product of a team owned branch to the +junk
pseudo project, which is tested above).


=== Assignment to anyone ===

Bazaar Experts and Launchpad administrators are able to reassign a branch
to any valid person or team.

    >>> admin_browser.open('http://launchpad.dev/~name12/firefox/main')
    >>> admin_browser.getLink('Change branch details').click()
    >>> admin_browser.getControl('Owner').value = 'sabdfl'
    >>> admin_browser.getControl('Change Branch').click()
    >>> print admin_browser.url
    http://code.launchpad.dev/~sabdfl/firefox/main
