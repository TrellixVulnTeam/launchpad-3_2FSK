The Hatchery: Upstream Projects in Launchpad
============================================

In the general Launchpad perspective, there are two kinds of software projects,
distro packages and upstream products. A distro package is usually some kind of
binary thing that you can install using your distributions package management
tools (e.g. APT.) There are some package management tools that can handle
installs from source packages as well.

An /upstream/ on the other hand is the original source from which a distro
package is often derived. We usually use this term to mean the distro-neutral
project, e.g. the Mozilla Firefox web browser from the Mozilla Project, but an
upstream can also be a package in another distro. For example, a large number
of Ubuntu packages are derived from Debian packages, so "upstream" in that case
is the Debian source package from which the Ubuntu source package was derived.

This document is about "upstreams" as in "the distro-neutral original source
from which a distro package is derived."

Working with Upstreams in Launchpad
===================================

In Launchpad, there are two terms you'll often hear used when discussing
upstream: project and product. A "project" would be something like The Mozilla
Project; a "product" would be something like The Mozilla Firefox web browser.

XXX: Brad Bollenbach, 2005-03-08: This document currently focusses on
products, but a discussion of projects should be included at some
point too.

For the purposes of this document, we'll interact with the system as an
anonymous user:

    >>> from canonical.launchpad.ftests import login
    >>> login('launchpad.anonymous')

Creation and retrieval of products in Launchpad is done via the IProductSet
utility.

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.interfaces import IProductSet
    >>> productset = getUtility(IProductSet)

Use the get() method of an IProductSet to get a specific product by its ID.

    >>> firefox = productset.get(4)
    >>> firefox.name
    u'firefox'

We can access all the product's releases easily. Note that this is
helpfully sorted for us.

    >>> [release.version for release in firefox.releases]
    [u'0.9', u'0.9.1', u'0.9.2', u'1.0.0']

Or we can go the long way via the product series.

    >>> all_series = firefox.serieslist
    >>> len(all_series)
    2
    >>> # Select the '1.0' series, and show all its releases
    >>> series = [s for s in all_series if s.name=='1.0'][0]
    >>> [release.version for release in series.releases]
    [u'1.0.0']

Trying to get() an ID that doesn't exit will raise a
zope.exceptions.NotFoundError:

    >>> firefox = productset.get(-1)
    Traceback (most recent call last):
      ...
    NotFoundError: 'Product with ID -1 does not exist'

We can get to a project from a product:

    >>> firefox.project.name
    u'mozilla'

We can get to the product from a project:

    >>> firefox.project.products[1].name
    u'firefox'

