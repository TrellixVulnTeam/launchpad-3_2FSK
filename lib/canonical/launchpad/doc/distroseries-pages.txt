= DistroSeries view classes =

    >>> from zope.component import getMultiAdapter
    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest

Let's use ubuntu/hoary for these tests.

    >>> from canonical.launchpad.interfaces import IDistributionSet
    >>> ubuntu = getUtility(IDistributionSet).getByName('ubuntu')
    >>> hoary = ubuntu.getSeries('hoary')

We will use a function to print the details related with the
distroseries being tested.

    >>> def administrate_distroseries(distroseries, form):
    ...     request = LaunchpadTestRequest(form=form)
    ...     request.method = 'POST'
    ...     view = getMultiAdapter((hoary, request), name="+admin")
    ...     view.initialize()
    ...     print '%d errors' % len(view.errors)
    ...     if len(view.errors) > 0:
    ...         print "\n".join(str(error) for error in view.errors)
    ...     print 'Name:', distroseries.name
    ...     print 'Version:', distroseries.version
    ...     print 'Changeslist:', distroseries.changeslist
    ...     print 'Status:', distroseries.status.name

    >>> form = {
    ...     'field.actions.change': 'Change',
    ...     'field.name': 'hoary',
    ...     'field.version': '5.04',
    ...     'field.changeslist': 'hoary-changes@ubuntu.com',
    ...     'field.status': 'DEVELOPMENT',
    ...     }

    >>> login('foo.bar@canonical.com')

    >>> administrate_distroseries(hoary, form)
    0 errors
    Name: hoary
    Version: 5.04
    Changeslist: hoary-changes@ubuntu.com
    Status: DEVELOPMENT

The distroseries 'changeslist' field only accept valid email addresses.

    >>> form['field.changeslist'] = ''
    >>> administrate_distroseries(hoary, form)
    1 errors
    ('changeslist', u'E-mail changes to', )
    Name: hoary
    Version: 5.04
    Changeslist: hoary-changes@ubuntu.com
    Status: DEVELOPMENT

    >>> form['field.changeslist'] = 'bRoKen_AdDreSs'
    >>> administrate_distroseries(hoary, form)
    1 errors
    ('changeslist', u'E-mail changes to', Invalid email 'bRoKen_AdDreSs'.)
    Name: hoary
    Version: 5.04
    Changeslist: hoary-changes@ubuntu.com
    Status: DEVELOPMENT

    >>> form['field.changeslist'] = 'foo@bar.com'
    >>> administrate_distroseries(hoary, form)
    0 errors
    Name: hoary
    Version: 5.04
    Changeslist: foo@bar.com
    Status: DEVELOPMENT

When the distroseries is released, i.e. when it goes from an unstable
status (FUTURE, EXPERIMENTAL, DEVELOPMENT, FROZEN) to CURRENT, its
'datereleased' field is set.

    >>> print hoary.datereleased
    None

    >>> form['field.status'] = 'CURRENT'
    >>> administrate_distroseries(hoary, form)
    0 errors
    Name: hoary
    Version: 5.04
    Changeslist: foo@bar.com
    Status: CURRENT

    >>> initial_datereleased = hoary.datereleased
    >>> initial_datereleased is not None
    True

Let's commit the current DB status, so errors can be triggered and
will not rollback the changes done until here.

    >>> import transaction
    >>> transaction.commit()

A stable distroseries cannot be made unstable again.

    >>> form['field.status'] = 'EXPERIMENTAL'
    >>> administrate_distroseries(hoary, form)
    1 errors
    ('Invalid value', token 'EXPERIMENTAL' not found in vocabulary)
    Name: hoary
    Version: 5.04
    Changeslist: foo@bar.com
    Status: CURRENT

The 'datereleased' value is only set once, even if the distroseries is
modified to SUPPORTED or OBSOLETE and then set back to CURRENT its
initial value remains.

    >>> form['field.status'] = 'SUPPORTED'
    >>> administrate_distroseries(hoary, form)
    0 errors
    Name: hoary
    Version: 5.04
    Changeslist: foo@bar.com
    Status: SUPPORTED

    >>> hoary.datereleased == initial_datereleased
    True

    >>> form['field.status'] = 'CURRENT'
    >>> administrate_distroseries(hoary, form)
    0 errors
    Name: hoary
    Version: 5.04
    Changeslist: foo@bar.com
    Status: CURRENT

    >>> hoary.datereleased == initial_datereleased
    True
