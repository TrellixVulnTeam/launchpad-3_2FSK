= Ubuntu PPAs =

The Ubuntu Linux page contains a link to get to the Personal Package Archives.

    >>> anon_browser.open("http://launchpad.dev/ubuntu")
    >>> anon_browser.getLink("Personal Package Archives").click()
    >>> anon_browser.title
    'Ubuntu Linux Personal Package Archives'


== Distribution PPA main page ==

Along with the search form this page also presents statistics about
the context PPAs (registered, active, number of sources and binaries
published) and a list of context series and corresponding architectures
supported for PPA.

    >>> print extract_text(
    ...    find_tag_by_id(anon_browser.contents,
    ...                   'supports_virtualized_architectures'))
    PPA supported series
    5.04
    "Hoary"
    - development
    i386
    (official)
    4.10
    "Warty"
    - current
    i386
    (official)

The sample data contains three PPAs.  Only Celso's and Mark's have
packages (the active ones). Altogether there 4 sources and 4 binaries
published across all ubuntu PPAs.

    >>> print extract_text(
    ...    find_tag_by_id(anon_browser.contents, 'ppa_statistics'))
    Statistics
    Registered PPAs:
    3
    Active PPAs:
    2
    Published sources:
    4
    Published binaries:
    4

Up to 5 latest source publications are also presented in the 'Latest
sources' section.

    >>> print extract_text(
    ...    find_tag_by_id(anon_browser.contents, 'ppa_latest_uploads'))
    Latest uploads
    cdrkit 1.0 in breezy-autotest  in PPA for Celso Providelo ... ago
    iceweasel 1.0 in breezy-autotest in PPA for Mark Shuttleworth ... ago
    pmount 0.1-1 in warty in PPA for Celso Providelo ... ago
    iceweasel 1.0 in warty in PPA for Celso Providelo ... ago

The 5 most active PPAs are listed in the 'Most active' section. Since
we only have 3 PPAs in sampledata they are all presented.

    >>> print extract_text(
    ...    find_tag_by_id(anon_browser.contents, 'ppa_most_active'))
    Most active
    PPAs with the highest number of uploads in the last 7 days.


Nothing suitable in the sampledata, check the end of this document for
further tests.

== Other distributions PPAs ==

Currently we only support PPAs for ubuntu, although the '+ppas' page
is presented for other distribution.

    >>> anon_browser.open("http://launchpad.dev/debian")
    >>> anon_browser.getLink("Personal Package Archives").click()
    >>> print anon_browser.title
    Debian GNU/Linux Personal Package Archives

Those pages present coherent data for a distribution with no PPAs.

PPA supported architectures reflects what we have in sampledata.

    >>> print extract_text(
    ...    find_tag_by_id(anon_browser.contents,
    ...                   'supports_virtualized_architectures'))
    PPA supported series
    3.1 "Sarge" - frozen
    3.0 "Woody" - current
      i386 (official)

Archive and package counter are empty.

    >>> print extract_text(
    ...    find_tag_by_id(anon_browser.contents, 'ppa_statistics'))
    Statistics
    Debian does not have any registered PPA.

'Latest uploads' section is not presented.

    >>> print find_tag_by_id(anon_browser.contents, 'ppa_latest_uploads')
    None

'Most active' section is not presented.

    >>> print find_tag_by_id(anon_browser.contents, 'ppa_most_active')
    None

The 'search' form is also suppresed.

    >>> anon_browser.getControl('Search', index=0).click()
    Traceback (most recent call last):
    ...
    LookupError: label 'Search'


== Searching PPAs ==

The search results are presented as a table with the columns Owner,
Description, Sources and Binaries, the latter two being a count.

The default search shows only active (those with, at least one,
PENDING or PUBLISHED source record) PPAs.

    >>> anon_browser.open("http://launchpad.dev/ubuntu")
    >>> anon_browser.getLink("Personal Package Archives").click()
    >>> anon_browser.getControl('Search', index=0).click()
    >>> for ppa_row in find_tags_by_class(
    ...     anon_browser.contents, 'ppa_batch_row'):
    ...     print extract_text(ppa_row)
    PPA for Celso Providelo
    packages to help my friends.
    3
    3
    PPA for Mark Shuttleworth
    packages to help the humanity (you know, ubuntu)
    1
    1

When a search is requested the information sections are not rendered.

    >>> print find_tag_by_id(anon_browser.contents, 'ppa_statistics')
    None

    >>> print find_tag_by_id(anon_browser.contents, 'ppa_most_active')
    None

    >>> print find_tag_by_id(anon_browser.contents, 'ppa_latest_uploads')
    None

    >>> print find_tag_by_id(
    ...     anon_browser.contents, 'supports_virtualized_architectures')
    None

The information section will be only rendered if the page is reloaded
with no 'name_filter' GET argument, in other words, when no search was
request.

    >>> anon_browser.open("http://launchpad.dev/ubuntu/+ppas")

    >>> find_tag_by_id(
    ...     anon_browser.contents, 'ppa_statistics') is not None
    True

    >>> find_tag_by_id(
    ...     anon_browser.contents, 'ppa_most_active') is not None
    True

    >>> find_tag_by_id(
    ...     anon_browser.contents, 'ppa_latest_uploads') is not None
    True

    >>> find_tag_by_id(
    ...     anon_browser.contents,
    ...     'supports_virtualized_architectures') is not None
    True

Back to the search form again anonymous users can click on a checkbox
to allow inactive PPA results.

    >>> anon_browser.getControl(
    ...     "Including descriptions of empty PPAs").selected = True
    >>> anon_browser.getControl('Search', index=0).click()

    >>> for ppa_row in find_tags_by_class(anon_browser.contents,
    ...                                   'ppa_batch_row'):
    ...    print extract_text(ppa_row)
    PPA for Celso Providelo
    packages to help my friends.
    3
    3
    PPA for Mark Shuttleworth
    packages to help the humanity (you know, ubuntu)
    1
    1
    PPA for No Privileges Person
    I am not allowed to say, I have no privs.
    0
    0

This checkbox value is propagated to subsequent searches:

    >>> anon_browser.getControl(
    ...     "Including descriptions of empty PPAs").selected
    True

No data matches the non-existent search string "bustmybuffers".

    >>> field = anon_browser.getControl("Show PPAs matching:")
    >>> field.value = 'bustmybuffers'
    >>> anon_browser.getControl('Search', index=0).click()
    >>> len(find_tags_by_class(anon_browser.contents, 'ppa_batch_row'))
    0

We have to update the archive caches, in order to be able to search
them properly, see doc/package-archive.txt.

    >>> from zope.component import getUtility

    >>> from canonical.database.sqlbase import flush_database_updates
    >>> from canonical.launchpad.interfaces import IDistributionSet

    >>> login(ANONYMOUS)
    >>> ubuntu = getUtility(IDistributionSet).getByName('ubuntu')
    >>> for archive in ubuntu.getAllPPAs():
    ...     archive.updateArchiveCache()
    >>> logout()
    >>> flush_database_updates()

In the three sample data PPAs, only one matches the search string "Celso".

    >>> field = anon_browser.getControl("Show PPAs matching:")
    >>> field.value = 'Celso'
    >>> anon_browser.getControl('Search', index=0).click()
    >>> len(find_tags_by_class(anon_browser.contents, 'ppa_batch_row'))
    1


== Owner's PPA pages ==

Let's start by adding some extra packages to Celso's archive:

    >>> import transaction
    >>> from lp.soyuz.tests.ppa import publishToPPA

    >>> login(ANONYMOUS)
    >>> publishToPPA("cprov", "warty", "commercialpackage", "1.0-1")
    >>> logout()
    >>> transaction.commit()
    >>> flush_database_updates()

And now on to the page itself. In the table rows, the "Owner" is a
clickable link to his PPA page:

    >>> anon_browser.getLink("Celso Providelo").click()
    >>> anon_browser.title
    'PPA for Celso Providelo'

Let's see his sources.list entries:

    >>> results = find_tag_by_id(anon_browser.contents, 'sources-list-entries')
    >>> text = extract_text(results)
    >>> print text
    deb http://ppa.launchpad.dev/cprov/ppa/ubuntu
        YOUR_UBUNTU_VERSION_HERE main
    deb-src http://ppa.launchpad.dev/cprov/ppa/ubuntu
        YOUR_UBUNTU_VERSION_HERE main

and the select control that lets you update them:

    >>> print extract_text(
    ...     find_tag_by_id(anon_browser.contents, 'series-widget-div'))
    Display sources.list entries for:
    Choose your Ubuntu version
    Breezy Badger Autotest (6.6.6)
    Warty (4.10)

The sample data has two packages belonging to Celso. Two table rows
will be presented to user containing:

 * SourcePackageRelease title (<source_name> - <source-version>),
 * Date Published,
 * target DistroSeries,
 * original Section

The table is sortable.

    >>> package_table = find_tag_by_id(
    ...     anon_browser.contents, 'packages_list')
    >>> 'sortable' in package_table['class']
    True

The source packages list is presented publicly.

    >>> def print_archive_package_rows(contents):
    ...     package_table = find_tag_by_id(
    ...         anon_browser.contents, 'packages_list')
    ...     for ppa_row in package_table.findChildren('tr'):
    ...         print extract_text(ppa_row)

    >>> print_archive_package_rows(anon_browser.contents)
    Package             Version         Uploaded by
    cdrkit              1.0             no signer (2007-07-09)
    commercialpackage   1.0-1           no signer
    iceweasel           1.0             no signer (2007-07-09)
    pmount              0.1-1           no signer (2007-07-09)

A Latest updates portlet is included on the index page indicating the
latest published sources with their states.

    >>> latest_updates = find_portlet(
    ...     anon_browser.contents, "Latest updates")
    >>> print extract_text(latest_updates)
    Latest updates
    cdrkit ... ago
    Failed to build
    pmount ... ago
    Successfully built
    iceweasel ... ago
    Successfully built

A statistics portlet is included on the index page.

    >>> stats = find_portlet(
    ...     anon_browser.contents, "PPA statistics")
    >>> print extract_text(stats)
    PPA statistics
    Activity
    1 updates were added during the past month.

If the ppa has some current activity (building or waiting builds) then this
is also included in the statistics portlet.

    >>> login('foo.bar@canonical.com')
    >>> from lp.registry.interfaces.person import IPersonSet
    >>> cprov_ppa = getUtility(IPersonSet).getByName('cprov').archive
    >>> from lp.soyuz.interfaces.build import BuildStatus, IBuildSet
    >>> builds = getUtility(IBuildSet).getBuildsForArchive(cprov_ppa)
    >>> builds[0].buildstate = BuildStatus.BUILDING
    >>> logout()

    >>> anon_browser.reload()
    >>> stats = find_portlet(
    ...     anon_browser.contents, "PPA statistics")
    >>> print extract_text(stats)
    PPA statistics
    Activity
    1 updates were added during the past month.
    Currently 1 packages are building and 0 packages are waiting to build.


== Filtering an archive ==

The default series filter is 'any' which means that by default the
results will include packages from any distro series. A user can
explicitly set the 'Any Series' filter and get the same result:

    >>> anon_browser.getControl(name='field.series_filter').value = (
    ...     ['any'])
    >>> anon_browser.getControl('Filter', index=0).click()
    >>> print_archive_package_rows(anon_browser.contents)
    Package             Version         Uploaded by
    cdrkit              1.0             no signer (2007-07-09)
    commercialpackage   1.0-1           no signer
    iceweasel           1.0             no signer (2007-07-09)
    pmount              0.1-1           no signer (2007-07-09)

If the packages are filtered by a particular series, then the result
will contain only the corresponding packages:

    >>> anon_browser.getControl(name='field.series_filter').value = (
    ...     ['breezy-autotest'])
    >>> anon_browser.getControl('Filter', index=0).click()
    >>> print_archive_package_rows(anon_browser.contents)
    Package             Version         Uploaded by
    cdrkit              1.0             no signer (2007-07-09)


== Empty PPAs ==

An empty PPA doesn't list any packages and it also doesn't present the
'apt sources lines ' widget and the repository 'URL' since they would
link to a repository that doesn't exist yet.

    >>> anon_browser.open("http://launchpad.dev/~no-priv/+archive/ppa")
    >>> print extract_text(find_main_content(anon_browser.contents))
    PPA for No Privileges Person
    ...
    PPA description
    I am not allowed to say, I have no privs.
    Adding this PPA to your system
    This PPA does not contain
    any packages yet. Find more information about how to upload
    packages in the PPA help page
    ...

It also contains a link to the 'PPA help page'.

    >>> print anon_browser.getLink('PPA help page').url
    https://help.launchpad.net/Packaging/PPA

The "sources list" widget isn't presented for empty PPAs either.

    >>> sources_list = find_tag_by_id(
    ...     anon_browser.contents, 'sources-list-entries')
    >>> print sources_list
    None

Users will only be able to see it for PPAs that have, at least, one
published source.

    >>> from lp.soyuz.tests.ppa import publishToPPA
    >>> login(ANONYMOUS)
    >>> publishToPPA("no-priv", "warty", "commercialpackage", "1.0-1")
    >>> logout()

    >>> anon_browser.reload()
    >>> sources_list = find_tag_by_id(
    ...     anon_browser.contents, 'sources-list-entries')
    >>> print extract_text(sources_list)
    deb http://ppa.launchpad.dev/no-priv/ppa/ubuntu
        warty main
    deb-src http://ppa.launchpad.dev/no-priv/ppa/ubuntu
        warty main

Also the repository URL, within the sources.list snippet, is an actual link.

    >>> print anon_browser.getLink(
    ...     "http://ppa.launchpad.dev/no-priv/ppa/ubuntu").url
    http://ppa.launchpad.dev/no-priv/ppa/ubuntu


== Upload hint ==

Users who have upload permissions to the PPA can see an 'upload hint'
section in the PPA details table.

    >>> no_priv_browser = setupBrowser(
    ...     auth='Basic no-priv@canonical.com:test')
    >>> no_priv_browser.open("http://launchpad.dev/~no-priv/+archive/ppa")

    >>> print_tag_with_id(no_priv_browser.contents, 'upload-hint')
    Uploading packages to this PPA
    You can upload packages to this PPA using:
    dput ppa:no-priv/ppa &lt;source.changes&gt;
    (Read about uploading)

It also has a link pointing to its corresponding help page.

    >>> print no_priv_browser.getLink('Read about uploading').url
    https://help.launchpad.net/Packaging/PPA/Uploading

Anonymous access or users with no upload permission cannot see the
upload hint section.

    >>> anon_browser.open("http://launchpad.dev/~no-priv/+archive/ppa")
    >>> print find_tag_by_id(
    ...     anon_browser.contents, 'upload-hint')
    None

    >>> admin_browser.open("http://launchpad.dev/~no-priv/+archive/ppa")
    >>> print find_tag_by_id(
    ...     anon_browser.contents, 'upload-hint')
    None


== PPA signing key ==

PPA signing keys are automatically generated and set sometime after
the PPA creation. While the signing key isn't available nothing is
presented to the users.

    >>> print find_tag_by_id(
    ...     anon_browser.contents, 'signing-key')
    None

We will set a signing key for 'No Privileges' PPA as if it got
generated by our key-generation script (see doc/archive-signing.txt
for more information).

    >>> from canonical.launchpad.interfaces import IGPGKeySet
    >>> from canonical.launchpad.interfaces import IPersonSet

    >>> login('foo.bar@canonical.com')
    >>> no_priv = getUtility(IPersonSet).getByName('no-priv')
    >>> a_key = getUtility(IGPGKeySet).get(1)
    >>> no_priv.archive.signing_key = a_key
    >>> logout()

Now that 'No privileges' PPA has a signing key, a text with the key
reference (fingerprint) and a pointer to the setup instructions in the
help wiki are presented in the PPA index page.

    >>> anon_browser.reload()

    >>> signing_key_section = find_tag_by_id(
    ...     anon_browser.contents, 'signing-key')

    >>> print extract_text(signing_key_section)
    Signing key: 1024D/12345678 (What is this?)

The key fingerprint links to the actual key available in the ubuntu
keyserver.

    >>> print anon_browser.getLink(
    ...     '1024D/12345678').url
    http://keyserver.ubuntu.com:11371/pks/lookup?search=0xABCDEF0123456789ABCDDCBA0000111112345678&op=index

Using software from a PPA can be hard for novices. We offer two
links to the same help pop-up that describes how to add a PPA and
its key to Ubuntu.

    >>> print anon_browser.getLink('Read about installing').url
    http://launchpad.dev/+help/soyuz/ppa-sources-list.html

And further down, next to the key id, we link to that same pop-up help:

    >>> print anon_browser.getLink('What is this?').url
    http://launchpad.dev/+help/soyuz/ppa-sources-list.html


== Single-publication PPAs ==

Just quickly check if the singular form of this section is handled
properly.

    >>> anon_browser.open("http://launchpad.dev/~mark/+archive/ppa")
    >>> anon_browser.title
    'PPA for Mark Shuttleworth'

Mark has sources only published in one archive, so he has no
series-widget-div control to update them:

    >>> print find_tag_by_id(anon_browser.contents, 'series-widget-div')
    None

And the sources.list entries point to the right distribution release:

    >>> results = find_tag_by_id(anon_browser.contents, 'sources-list-entries')
    >>> text = extract_text(results)
    >>> print text
    deb http://ppa.launchpad.dev/mark/ppa/ubuntu breezy-autotest main
    deb-src http://ppa.launchpad.dev/mark/ppa/ubuntu breezy-autotest main


== Other Distribution PPAs ==

PPAs are targeted to a specific distribution and currently we only
allow Ubuntu PPAs, thus 'ubuntutest' PPAs page should be empty:

    >>> anon_browser.open("http://launchpad.dev/ubuntutest")
    >>> anon_browser.getLink("Personal Package Archives").click()
    >>> anon_browser.title
    'Ubuntu Test Personal Package Archives'

    >>> len(find_tags_by_class(anon_browser.contents, 'ppa_batch_row'))
    0


== Populating 'Most Active' section ==

Since the sampledata publications are not recent enough to appear in
the 'Most active' section we will create some of them on-the-fly so we
can check how it looks.

    >>> from lp.soyuz.tests.ppa import publishToTeamPPA
    >>> login(ANONYMOUS)
    >>> publishToPPA("cprov", "warty", "commercialpackage", "1.0-1")
    >>> publishToPPA("cprov", "hoary", "commercialpackage", "1.0-1")
    >>> publishToPPA("cprov", "warty", "cdrkit", "1.0")

    >>> publishToPPA("mark", "warty", "commercialpackage", "1.0-1")
    >>> publishToPPA(
    ...     "mark", "breezy-autotest", "commercialpackage", "1.0-1")

    >>> logout()
    >>> transaction.commit()

Publications created, now when any user access the 'Ubuntu PPAs' page,
he will be able to see 4 PPAs where we've added publications listed in
the 'Most active' section.

    >>> anon_browser.open("http://launchpad.dev/ubuntu/+ppas")
    >>> print extract_text(
    ...    find_tag_by_id(anon_browser.contents, 'ppa_most_active'))
    Most active
    PPAs with the highest number of uploads in the last 7 days.
    PPA for Celso Providelo       4 uploads
    PPA for Mark Shuttleworth     2 uploads
    PPA for No Privileges Person  1 uploads

The user can also in any PPA title listed in that section to visit the
PPA itself.

    >>> anon_browser.getLink('PPA for Celso Providelo').click()
    >>> print anon_browser.title
    PPA for Celso Providelo


== Compatibility URL Redirection ==

PPAs are being enhanced to allow multiple named PPAs per owner.  For a
limited transitional period, specifying a URL without the name in it
will redirect to the correct URL with the default PPA name, "ppa".

    >>> admin_browser.open("http://launchpad.dev/~cprov/+archive")
    >>> admin_browser.url
    'http://launchpad.dev/~cprov/+archive/ppa'

If the user in question doesn't have a PPA, any attempt to access it,
either via the new-style URL or the compatibility redirection, will
result in a NotFound error.

    >>> admin_browser.open("http://launchpad.dev/~name16/+archive/ppa")
    Traceback (most recent call last):
    ...
    NotFound: Object: <Person at ... name16 (Foo Bar)>, name: u'+archive'

    >>> admin_browser.open("http://launchpad.dev/~name16/+archive")
    Traceback (most recent call last):
    ...
    NotFound: Object: <Person at ... name16 (Foo Bar)>, name: u'+archive'
