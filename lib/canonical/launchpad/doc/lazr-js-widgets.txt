LAZR JS Wrappers
================

The canonical.widgets.lazrjs module contains a bunch of wrapper
for widgets defined in Lazr-JS.

TextLineEditorWidget
--------------------------

We have a convenient wrapper for the inlineedit/editor JS widget in
TextLineEditorWidget.

    >>> from canonical.launchpad.webapp.publisher import canonical_url
    >>> from canonical.widgets.lazrjs import TextLineEditorWidget
    >>> bug = factory.makeBug(title='My bug is > important')

The wrapper takes as arguments the object and the attribute of the
object that is being edited, as well as the URL to use for editing when
when JS is turned off.

    >>> widget = TextLineEditorWidget(
    ...     bug, 'title', canonical_url(bug.bugtasks[0], view_name='+edit'))

The widget is rendered by executing it, it prints out the attribute
content.

    >>> print widget()
    <h1 id="..."><span class="yui-editable_text-text">My bug is &gt;
        important</span>
    </h1>

In addition, when the logged in user can edit the value, there is a link to
the edit view that appears as well as a <script> tag that will change that
link into an AJAX control when JS is available:

    >>> login('no-priv@canonical.com')
    >>> print widget()
    <h1 id="..."><span class="yui-editable_text-text">My bug is &gt;
        important</span>
        <a href="http://bugs.launchpad.dev/.../+edit"
           class="yui-editable_text-trigger"
        ><img src="/@@/edit" alt="[edit]" title="Edit" /></a>
    </h1>
    <script>
    ...
    </script>

The id and title attribute to use can be passed via parameters to the
constructor:

    >>> widget = TextLineEditorWidget(
    ...     bug, 'title', canonical_url(bug.bugtasks[0], view_name='+edit'),
    ...     id="bug-title", title="Edit this summary")
    >>> print widget()
    <h1 id="bug-title">...
        ><img src="/@@/edit" alt="[edit]" title="Edit this summary" />...


InlineEditPickerWidget
----------------------

The InlineEditPickerWidget can be used for any interface attribute that
has a vocabulary defined for it.

    >>> from canonical.widgets.lazrjs import InlineEditPickerWidget
    >>> from zope.component import getUtility
    >>> from canonical.launchpad.interfaces import IBugTask, IBugTaskSet
    >>> bugtask = getUtility(IBugTaskSet).get(2)
    >>> view = create_initialized_view(bugtask, '+index')
    >>> widget = InlineEditPickerWidget(
    ...     context=view.context,
    ...     request=view.request,
    ...     interface_attribute=IBugTask['assignee'],
    ...     default_html='default-html',
    ...     header='Change assignee',
    ...     step_title='Search for people or teams',
    ...     remove_button_text='Remove Assignee',
    ...     null_display_value='Nobody')


The resource_uri is encoded as json.

    >>> print widget.resource_uri
    "http:\/\/bugs.launchpad.dev\/firefox\/+bug\/1"

The zope widget creates a lazr-js activator widget which shows the
picker widget and the spinner icon.

    >>> print widget()
    <span id="inline-picker-activator-id-1">
    ...Y.lp.picker.addPickerPatcher(...
