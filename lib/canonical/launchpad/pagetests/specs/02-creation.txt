= Creating Blueprints =

Blueprints can be created from multiple locations within Launchpad. In
particular, users can create blueprints from distributions, from projects and 
from project groups. It's also possible to create a blueprint from the 
Blueprints home page.

Let's make sure we can see the relevant page on a distribution.

  >>> user_browser.open('http://blueprints.launchpad.dev/ubuntu')
  >>> user_browser.getLink('Register').click()
  >>> user_browser.url
  'http://blueprints.launchpad.dev/ubuntu/+addspec'

Let's also validate that a new blueprint's form page has the appropriate default
blueprint status.

  >>> user_browser.getControl('Status').value
  ['New']

And now, on a project.

  >>> user_browser.open('http://blueprints.launchpad.dev/firefox')
  >>> user_browser.getLink('Register').click()
  >>> user_browser.url
  'http://blueprints.launchpad.dev/firefox/+addspec'
  >>> user_browser.getControl('Status').value
  ['New']

And finally, on a project group.

  >>> user_browser.open('http://blueprints.launchpad.dev/mozilla')
  >>> user_browser.getLink('Register').click()  
  >>> user_browser.url
  'http://blueprints.launchpad.dev/mozilla/+addspec'
  >>> user_browser.getControl('Status').value
  ['New']

Let's go one step further and confirm that we can actually POST to that
form, to register a new blueprint. We'll do it on the Ubuntu distribution.

  >>> user_browser.open('http://blueprints.launchpad.dev/ubuntu/+addspec')
  >>> control = user_browser.getControl
  >>> summary = ("Users are increasingly using multiple networks. Being able "
  ...            "to seamlessly move between networks whilst remembering the "
  ...            "correct settings for each network would greatly enhance "
  ...            "Ubuntu's usability for mobile professionals. Many network "
  ...            "dependent services should only be run when the system is "
  ...            "positive that it has a network. This would greatly enhance "
  ...            "the system's flexibility and responsiveness.")
  >>> control('Name'    ).value = 'networkmagic'
  >>> control('Title'   ).value = 'Network Magic: Automatic Network Detection'
  >>> control('URL'     ).value = 'http://wiki.ubuntu.com/NetworkMagic'
  >>> control('Status'  ).value = ['Approved']
  >>> control('Summary' ).value = summary
  >>> control('Assignee').value = 'daf@canonical.com'
  >>> control('Drafter' ).value = 'carlos@canonical.com'
  >>> control('Approver').value = 'tsukimi@quaqua.net'
  >>> control('Register').click()
  >>> user_browser.url
  'http://blueprints.launchpad.dev/ubuntu/+spec/networkmagic'

OK, that created a new blueprint. Let's make sure we can see it.

  >>> url = 'http://blueprints.launchpad.dev/ubuntu/+spec/networkmagic'
  >>> user_browser.open(url)
  >>> user_browser.url
  'http://blueprints.launchpad.dev/ubuntu/+spec/networkmagic'

Now we test if the blueprint name validator is working trying to register a
blueprint with the same name.

  >>> user_browser.open('http://blueprints.launchpad.dev/ubuntu/+addspec')
  >>> control('Name'    ).value = 'networkmagic'
  >>> control('Title'   ).value = 'Network Magic: Automatic Network Detection'
  >>> control('URL'     ).value = 'http://wiki.ubuntu.com/NetworkMagic'
  >>> control('Status'  ).value = ['Approved']
  >>> control('Summary' ).value = summary
  >>> control('Assignee').value = 'daf@canonical.com'
  >>> control('Drafter' ).value = 'carlos@canonical.com'
  >>> control('Approver').value = 'tsukimi@quaqua.net'
  >>> control('Register').click()
  >>> user_browser.url
  'http://blueprints.launchpad.dev/ubuntu/+addspec'

Seeing that we were redirected again to the addspec page is a good sign
(something prevented the blueprint from being registered) however better make
sure this happened due to the right reason.

  >>> 'is already in use by another blueprint' in user_browser.contents
  True

We test the validator using an invalid name.

  >>> user_browser.open('http://blueprints.launchpad.dev/ubuntu/+addspec')
  >>> control('Name'    ).value = 'NetworkMagic!'
  >>> control('Title'   ).value = 'Network Magic: Automatic Network Detection'
  >>> control('URL'     ).value = 'http://wiki.ubuntu.com/NetworkMagicBang'
  >>> control('Summary' ).value = summary
  >>> control('Status'  ).value = ['Approved']
  >>> control('Assignee').value = 'daf@canonical.com'
  >>> control('Drafter' ).value = 'carlos@canonical.com'
  >>> control('Approver').value = 'tsukimi@quaqua.net'
  >>> control('Register').click()
  >>> user_browser.url
  'http://blueprints.launchpad.dev/ubuntu/+addspec'
  >>> for message in find_tags_by_class(user_browser.contents, 'message'):
  ...      print message.renderContents()
  There is 1 error.
  <BLANKLINE>
  Invalid name ...

Some invalid names can be transformed into valid names. When it is clear that a
valid name can be produced by removing trailing spaces or by converting upper
case characters to their lower case equivalents, this is done automatically for
the user:

  >>> user_browser.open('http://blueprints.launchpad.dev/ubuntu/+addspec')
  >>> control('Name    ').value = 'New-Network-Magic'
  >>> control('Title   ').value = 'Network Magic: Automatic Network Detection'
  >>> control('URL     ').value = 'http://wiki.ubuntu.com/NewNetworkMagic'
  >>> control('Summary ').value = summary
  >>> control('Status  ').value = ['Approved']
  >>> control('Assignee').value = 'daf@canonical.com'
  >>> control('Drafter ').value = 'carlos@canonical.com'
  >>> control('Approver').value = 'tsukimi@quaqua.net'
  >>> control('Register').click()
  >>> user_browser.url
  'http://blueprints.launchpad.dev/ubuntu/+spec/new-network-magic'
  >>> 'Blueprint overview' in user_browser.contents
  True

Now we test the URL field validator trying to register a new blueprint with the
same URL.

  >>> user_browser.open('http://blueprints.launchpad.dev/ubuntu/+addspec')
  >>> control('Name'    ).value = 'dupenetworkmagic'
  >>> control('Title'   ).value = 'This is a dupe Network Magic Spec'
  >>> control('URL'     ).value = 'http://wiki.ubuntu.com/NetworkMagic'
  >>> control('Summary' ).value = summary
  >>> control('Status'  ).value = ['Approved']
  >>> control('Assignee').value = 'daf@canonical.com'
  >>> control('Drafter' ).value = 'carlos@canonical.com'
  >>> control('Approver').value = 'tsukimi@quaqua.net'
  >>> control('Register').click()
  >>> user_browser.url
  'http://blueprints.launchpad.dev/ubuntu/+addspec'
  >>> 'is already registered by another blueprint' in user_browser.contents
  True


== Project blueprint registration ==

There is also a form which lets user create a new blueprint in an IProject
that first requires them to select an IProduct target, showing them only the
products in that IProject.

  >>> user_browser.open('http://blueprints.launchpad.dev/mozilla/+addspec')
  >>> control('For'     ).value = ['thunderbird']
  >>> control('Name'    ).value = 'gee-whizz-wotzit'
  >>> control('Title'   ).value = 'Grand amazing tool'
  >>> control('URL'     ).value = 'http://wiki.mozilla.org/WhizzWotzit'
  >>> control('Status'  ).value = ['Approved']
  >>> control('Assignee').value = 'daf@canonical.com'
  >>> control('Drafter' ).value = 'carlos@canonical.com'
  >>> control('Approver').value = 'tsukimi@quaqua.net'
  >>> control('Summary' ).value = ('This widget is the latest and greatest in '
  ...                              'a long range of wotzits. All wotzits are '
  ...                              'known to be particularly resilient.')
  >>> control('Register').click()
  >>> user_browser.url
  'http://blueprints.launchpad.dev/thunderbird/+spec/gee-whizz-wotzit'


== System-wide blueprint registration ==

There is also a form which lets user create a new blueprint for any product
or distribution, from the Blueprints home page.

First, we try to create a blueprint that has the same name as an existing one.

  >>> user_browser.open('http://blueprints.launchpad.dev/specs/+new')
  >>> control('For'     ).value = 'ubuntu'
  >>> control('Name'    ).value = 'networkmagic'
  >>> control('Title'   ).value = 'Network Magic: Automatic Network Detection'
  >>> control('URL'     ).value = 'http://wiki.ubuntu.com/NetworkMagic'
  >>> control('Summary' ).value = summary
  >>> control('Status'  ).value = ['Approved']
  >>> control('Assignee').value = 'daf@canonical.com'
  >>> control('Drafter' ).value = 'carlos@canonical.com'
  >>> control('Approver').value = 'tsukimi@quaqua.net'
  >>> control('Register').click()
  >>> user_browser.url
  'http://blueprints.launchpad.dev/specs/+new'

So, we were not redirected to the blueprint page, because the blueprint was not
created. Let's check that this happened because the name is taken:

  >>> 'is already in use by another blueprint' in user_browser.contents
  True

Now, we'll register a blueprint with a unique name and it should go straight
through.

  >>> user_browser.open('http://blueprints.launchpad.dev/specs/+new')
  >>> control('For'     ).value = 'ubuntu'
  >>> control('Name'    ).value = 'brandnewspec'
  >>> control('Title'   ).value = 'Network Voodoo: Automatic Network Detection'
  >>> control('URL'     ).value = 'http://wiki.ubuntu.com/NetworkVoodoo'
  >>> control('Summary' ).value = summary
  >>> control('Status'  ).value = ['Approved']
  >>> control('Assignee').value = 'daf@canonical.com'
  >>> control('Drafter' ).value = 'carlos@canonical.com'
  >>> control('Approver').value = 'tsukimi@quaqua.net'
  >>> control('Register').click()
  >>> user_browser.url
  'http://blueprints.launchpad.dev/ubuntu/+spec/brandnewspec'