= Team-restricted Launchpad =

It is possible to run Launchpad in a special mode where access is restricted
to Launchpad admins and members of a particular team.

You turn on this feature by setting the 'restrict_to_team' variable in the
launchpad.conf file.

  <launchpad>
    restrict_to_team teamname
    ...
  </launchpad>

We'll temporarily restrict Launchpad to be used only by Launchpad admins
and Landscape developers.

    >>> from canonical.config import config
    >>> config.launchpad.restrict_to_team == ''
    True
    >>> config.launchpad.restrict_to_team = 'landscape-developers'

When in this condition, anonymous users are shown a special trimmed-down
login page when they go to any page.

    >>> browser.open("http://launchpad.dev/people")
    >>> print browser.url
    http://launchpad.dev/+restricted-login?production=http%3A//launchpad.net/people

A link is provided to the equivalent page on the non-restricted
Launchpad instance:

    >>> print browser.contents
    <...
    <p>
    You may be able to access this page
    <a href="http://launchpad.net/people">on the main
    Launchpad site</a> instead.
    </p>
    ...

This includes nonsense URLs and not-found URLs.

    >>> browser.open("http://bugs.launchpad.dev/p/p/p/p?key=value")
    >>> print browser.url
    http://bugs.launchpad.dev/+restricted-login?production=http%3A//bugs.launchpad.net/p/p/p/p%3Fkey%3Dvalue
    >>> print browser.contents
    <...
    <p>
    You may be able to access this page
    <a href="http://bugs.launchpad.net/p/p/p/p?key=value">on the main
    Launchpad site</a> instead.
    </p>
    ...

That is, any page except an information page about the restriction.

    >>> browser.open("http://launchpad.dev/+restricted-info")
    >>> print browser.url
    http://launchpad.dev/+restricted-info

Anyway, the anonymous user logs in as name16 (foo.bar@canonical.com), who
is in the admin team, and gets redirected to the front page.

    >>> def submit_login(browser_instance, email, password):
    ...     emailcontrol = browser_instance.getControl(name="loginpage_email")
    ...     passwordcontrol = browser_instance.getControl(
    ...         name="loginpage_password")
    ...     emailcontrol.value = email
    ...     passwordcontrol.value = password
    ...     submitbutton = browser_instance.getControl(
    ...         name="loginpage_submit_login")
    ...     submitbutton.click()

    >>> browser.open("http://launchpad.dev/p/p/p/p")
    >>> print browser.url
    http://launchpad.dev/+restricted-login?production=http%3A//launchpad.net/p/p/p/p
    >>> submit_login(browser, 'foo.bar@canonical.com', 'test')
    >>> print browser.url
    http://launchpad.dev

Let's log out name16 (foo.bar@canonical.com), and log in someone else.
name12 (test@canonical.com) is in the landscape-developers team, so will
be able to log in.

    >>> browser.getControl(name="logout").click()
    >>> print browser.url
    http://launchpad.dev/+restricted-login?production=http%3A//launchpad.net/%3Floggingout%3D1
    >>> submit_login(browser, 'test@canonical.com', 'test')
    >>> print browser.url
    http://launchpad.dev

We'll now log out name12 (test@canonical.com), and try to log in cprov, who
isn't an admin, and isn't a landscape-developer.  So, he gets sent to the info
page to explain why he can't use the server.

    >>> browser.getControl(name="logout").click()
    >>> print browser.url
    http://launchpad.dev/+restricted-login
    >>> submit_login(browser, 'celso.providelo@canonical.com', 'cprov')
    >>> print browser.url
    http://launchpad.dev/+restricted-info?production=http%3A//launchpad.net/

Now that the user is logged in, they will be directed to the
+restricted-info page if they try to browse other pages:

    >>> browser.open("http://bugs.launchpad.dev/evolution")
    >>> print browser.url
    http://bugs.launchpad.dev/+restricted-info?production=http%3A//bugs.launchpad.net/evolution
    >>> print browser.contents
    <...
    <p>You may be able to
    access this page
    <a href="http://bugs.launchpad.net/evolution">on the main
    Launchpad site</a> instead.</p>
    ...

Set restrict_to_team back to being a server that is open to anyone.

    >>> config.launchpad.restrict_to_team = ''

Note that the info page still works even when the server is open.

    >>> browser.open("http://launchpad.dev/+restricted-info")
    >>> print browser.contents
    <...This server is open to anonymous access and registered users...

The restricted login page redirects to the normal login page.

    >>> browser.open("http://launchpad.dev/+restricted-login")
    >>> print browser.url
    http://launchpad.dev/+login

