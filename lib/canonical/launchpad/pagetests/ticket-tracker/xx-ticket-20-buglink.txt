Bug Links
=========

Ticket can be linked to bugs. A user should do that when the problem
exposed in the ticket is related to a bug report.

Adding Links
------------

Ticket #2 in firefox is about a user which has trouble displaying the
SVG demo on the W3C site. There is an existing Malone bug report (#1)
which describes that problem. A user that wants to document that
relationship goes to the ticket and click the 'Link Existing Bug'.

This link is only available to registered user:

    >>> anon_browser.open(
    ...     'http://launchpad.dev/products/firefox/+ticket/2')
    >>> anon_browser.getLink(url='+linkbug').click()
    Traceback (most recent call last):
      ...
    Unauthorized: ...

    >>> user_browser.open(
    ...     'http://launchpad.dev/products/firefox/+ticket/2')
    >>> user_browser.getLink('Link Existing Bug').click()

To link the bug, the user enters the bug ID and clicks the 'Add'
button.

    >>> user_browser.getControl('Bug ID').value = '111'
    >>> user_browser.getControl('Link').click()

When the user makes a mistake and uses an invalid bug number, an error
message is displayed:

    >>> from BeautifulSoup import BeautifulSoup
    >>> soup = BeautifulSoup(user_browser.contents)
    >>> soup.first('div', 'message')
    <div class="message">Not a valid bug number or nickname.</div>

The user is offered a link to search for bug in case he doesn't know the
bug number.

    >>> user_browser.getLink('Bugs Listing').click()
    >>> user_browser.url
    '.../products/firefox/+bugs'

    (We should use goBack() here but can't because of ZC #645:
    zope.testbrowser truncates document content after goBack().)
    #>>> user_browser.goBack()
    >>> user_browser.open(
    ...     'http://launchpad.dev/products/firefox/+ticket/2/+linkbug')

The user now enters the correct bug number and after clicking the
'Link' button, the bug will now be listed under the 'Related Bugs'
portlet:

    >>> user_browser.getControl('Bug ID').value = '1'
    >>> user_browser.getControl('Link').click()
    >>> soup = BeautifulSoup(user_browser.contents)
    >>> soup.first('li', 'bug')
    <li class="bug">
      <a href=".../bugs/1">#1: Firefox does not support SVG</a>
    </li>

A notification is also displayed.

    >>> soup.first('div', 'informational message')
    <div class="informational message">Added link to bug #1:
    ...Firefox does not support SVG...</div>


Removing Links
--------------

To remove bug links, the user uses the 'Remove Bug Link' action.

    >>> user_browser.getLink('Remove Bug Link').click()
    >>> user_browser.title
    'Remove bug links from request #2'

The list of linked bugs is displayed. The user selects the link to
remove and clicks the 'Remove' button.

    >>> user_browser.getControl('#1: Firefox').selected = True
    >>> user_browser.getControl('Remove').click()

The user is redirected to the support request page and a confirmation
message is displayed:

    >>> user_browser.url
    '.../products/firefox/+ticket/2'
    >>> soup = BeautifulSoup(user_browser.contents)
    >>> soup.first('div', 'informational message')
    <div class="informational message">Removed link to bug #...</div>
    >>> soup.first('div', {'id': 'portlet-related-bugs'})
    Null


Link to Private Bugs
--------------------

    (Let's mark bug #6 as private and only accessible by an
    administrator.
    XXX flacoste 2006/08/22 This should use a private bug in our
    sample data, see bug #57307.)
    >>> from zope.component import getUtility
    >>> from canonical.launchpad.ftests import login, logout
    >>> from canonical.launchpad.interfaces import IBugSet
    >>> from canonical.database.sqlbase import flush_database_updates
    >>> login('foo.bar@canonical.com')
    >>> private_bug = getUtility(IBugSet).get(6)
    >>> private_bug.private = 6
    >>> flush_database_updates()
    >>> logout()

A regular user shouldn't be able to link to a private bug he doesn't
have access to:

    (We use the no-priv user here because sample person is subscribed
    and thus has access to the private bug.)
    >>> browser.addHeader('Authorization',
    ...     'Basic no-priv@canonical.com:test')
    >>> browser.open('http://launchpad.dev/products/firefox/+ticket/2')
    >>> browser.getLink('Link Existing Bug').click()
    >>> browser.getControl('Bug ID').value = '6'
    >>> browser.getControl('Link').click()
    >>> soup = BeautifulSoup(browser.contents)
    >>> soup.first('div', 'error').first('div', 'message')
    <div class="message">You are not allowed to link to private bug #6.</div>

An administrator (or another user having access to the bug) should be
able to link to that bug.

    >>> admin_browser.open(
    ...     'http://launchpad.dev/products/firefox/+ticket/2')
    >>> admin_browser.getLink('Link Existing Bug').click()
    >>> admin_browser.getControl('Bug ID').value = '6'
    >>> admin_browser.getControl('Link').click()
    >>> soup = BeautifulSoup(admin_browser.contents)
    >>> soup.first('li', 'bug')
    <li class="bug">
      <a href=".../bugs/6">#6: Firefox crashes when Save As dialog
        for a nonexistent window is closed</a>
    </li>

An anonymous visitor (or a user that doesn't have access to the bug)
will only see that a private bug is linked.

    >>> anon_browser.open(
    ...     'http://launchpad.dev/products/firefox/+ticket/2')
    >>> soup = BeautifulSoup(anon_browser.contents)
    >>> soup.first('li', 'bug')
    <li class="bug">
      <a href=".../bugs/6">#6: private bug</a>
    </li>

Only the administrator will be able to unlink the bug.

    >>> browser.open('http://launchpad.dev/products/firefox/+ticket/2')
    >>> browser.getLink('Remove Bug Link').click()
    >>> soup = BeautifulSoup(browser.contents)
    >>> soup.first('p', 'informational message')
    <p class="informational message">
      There are no links that you are allowed to remove.
    </p>

    >>> admin_browser.getLink('Remove Bug Link').click()
    >>> admin_browser.getControl('#6: Firefox').selected = True
    >>> admin_browser.getControl('Remove').click()
