#!/usr/bin/python2.4
# Copyright 2007 Canonical Ltd.  All rights reserved.

__metaclass__ = type

import logging
import sys

import _pythonpath

from canonical.config import config

from canonical.launchpad.scripts import execute_zcml_for_scripts
from canonical.launchpad.scripts.base import LaunchpadScript
from lp.registry.scripts.listteammembers import process_team, NoSuchTeamError


class ListTeamMembersScript(LaunchpadScript):

    description = "Create a list of members of a team."
    usage = "usage: %s [-e|--email-only|-f|--full-details] team-name [team-name-2] .. [team-name-n]" % sys.argv[0]
    loglevel = logging.INFO

    def add_my_options(self):
        self.parser.set_defaults(format='simple')
        self.parser.add_option(
            '-e', '--email-only', action='store_const', const='email',
            help='Only print email addresses', dest='format')
        self.parser.add_option(
            '-f', '--full-details', action='store_const', const='full',
            help='Print full details', dest='format')
        self.parser.add_option(
            '-s', '--ssh-keys', action='store_const', const='sshkeys',
            help='Print sshkeys', dest='format')

    def main(self):

        display_option = self.options.format
        teamnames = self.args

        if not teamnames:
            self.parser.error('No team specified')

        member_details = []
        for teamname in teamnames:
            try:
                member_details.extend(process_team(teamname, display_option))
            except NoSuchTeamError:
                print "Error, no such team: %s" % teamname
                return 1
        # We don't want duplicates, so use "set" get unique only
        print "\n".join(sorted(list(set(member_details))))
        return 0

if __name__ == '__main__':
    script = ListTeamMembersScript('canonical.launchpad.scripts.listteammembers', dbuser='listteammembers')
    script.run()
