= Derive Distributions =

Using the DistroSeries.deriveDistroSeries() function, we can call it with the
parent distroseries. We can call it with the distroseries already created,
or it can create it for the user.

== Set Up ==

 >>> login('admin@canonical.com')
 >>> soyuz = factory.makeTeam(name='soyuz-team')
 >>> distroseries = factory.makeDistroSeries()
 >>> child = factory.makeDistroSeries(parent_series=distroseries)
 >>> other = factory.makeDistroSeries()
 >>> logout()
 >>> from canonical.launchpad.testing.pages import webservice_for_person
 >>> from canonical.launchpad.webapp.interfaces import OAuthPermission
 >>> from canonical.launchpad.webapp.interaction import ANONYMOUS
 >>> soyuz_webservice = webservice_for_person(
 ...     soyuz.teamowner, permission=OAuthPermission.WRITE_PUBLIC)

== Calling ==

We can't call .deriveDistroSeries() with a distroseries that isn't the 
child's parent

 >>> series_url = '/%s/%s' % (distroseries.parent.name, distroseries.name)
 >>> other_series_url = '/%s/%s' % (
 ...    other.parent.name, other.name)
 >>> series = webservice.get(series_url).jsonBody()
 >>> other_series = webservice.get(other_series_url).jsonBody()
 >>> derived = soyuz_webservice.named_post(
 ...     other_series['self_link'], 'deriveDistroSeries', {},
 ...     name=child.name)
 >>> print derived
 ...
 HTTP/1.1 500 Internal Server Error
 ...

If we call it correctly, it works.

 >>> derived = soyuz_webservice.named_post(
 ...     series['self_link'], 'deriveDistroSeries', {}, name=child.name)
 >>> print derived
 ...
 HTTP/1.1 200 OK
 ...

