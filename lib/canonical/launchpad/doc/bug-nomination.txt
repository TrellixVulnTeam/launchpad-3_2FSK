Bug Nomination
==============

Any logged-in user can nominate a bug to be fixed in a specific
distribution release or product series. Nominations are created by
calling IBug.addNomination.

    >>> from zope.component import getUtility
    >>> from zope.interface.verify import verifyClass
    >>> from canonical.launchpad.database import BugNomination
    >>> from canonical.launchpad.interfaces import (
    ...     IBugNomination, IBugSet, IDistributionSet, IPersonSet)

    >>> login("no-priv@canonical.com")

The BugNomination class implements IBugNomination.

    >>> verifyClass(IBugNomination, BugNomination)
    True

    >>> bug_one = getUtility(IBugSet).get(1)

    >>> ubuntu = getUtility(IDistributionSet).getByName("ubuntu")
    >>> ubuntu_hoary = ubuntu.getRelease("hoary")
    >>> personset = getUtility(IPersonSet)
    >>> no_privs = personset.getByName("no-priv")

    >>> hoary_nomination = bug_one.addNomination(
    ...     distrorelease=ubuntu_hoary, owner=no_privs)

The nomination records the distro release or series for which the bug
was nominated and the user that submitted the nomination (the "owner".)

    >>> print hoary_nomination.owner.name
    no-priv

    >>> print hoary_nomination.distrorelease.fullreleasename
    Ubuntu Hoary

Let's create another nomination, this time on a product series.

    >>> from canonical.launchpad.interfaces import IProductSet

    >>> firefox = getUtility(IProductSet).getByName("firefox")

    >>> firefox_1_0 = firefox.getSeries("1.0")

    >>> no_privs = personset.getByName("no-priv")

    >>> firefox_nomination = bug_one.addNomination(
    ...     productseries=firefox_1_0, owner=no_privs)

    >>> print firefox_nomination.owner.name
    no-priv

    >>> print firefox_nomination.productseries.title
    Mozilla Firefox Series: 1.0

The target of a nomination can also be accessed through its target
attribute.

    >>> print hoary_nomination.target.bugtargetname
    Ubuntu Hoary

    >>> print firefox_nomination.target.bugtargetname
    firefox 1.0 (upstream)

Use IBug.isNominatedFor to see if a bug is nominated for a particular
distrorelease or productseries.

    >>> firefox_milestones = firefox.getSeries("milestones")

    >>> bug_one.isNominatedFor(firefox_1_0)
    True

    >>> bug_one.isNominatedFor(ubuntu_hoary)
    True

    >>> bug_one.isNominatedFor(firefox_milestones)
    False

IBug.getNominations returns a list of all IBugNominations for a bug,
ordered by IBugTarget.bugtargetname.

    >>> nominations = bug_one.getNominations()

    >>> [nomination.target.bugtargetname for nomination in nominations]
    [u'firefox 1.0 (upstream)', u'Ubuntu Hoary']

Nomination Status
-----------------

A nomination is created with an initial status of "Pending".

    >>> milestones_nomination = bug_one.addNomination(
    ...     productseries=firefox_milestones, owner=no_privs)

    >>> print milestones_nomination.status.title
    Pending

Nomination status changes have an associated workflow. For this reason,
setting status directly is not possible.

    >>> from canonical.lp.dbschema import BugNominationStatus

    >>> nomination.status = BugNominationStatus.APPROVED
    Traceback (most recent call last):
      ...
    ForbiddenAttribute: ...

The status of a nomination is changed by calling either the approve() or
decline() method. Only drivers of the nomination target can approve or
decline nominations.

    >>> from canonical.launchpad.interfaces import ILaunchBag

    >>> current_user = getUtility(ILaunchBag).user

    >>> current_user == no_privs
    True
    >>> current_user.inTeam(ubuntu.driver)
    False
    >>> current_user.inTeam(firefox.driver)
    False

    >>> milestones_nomination.approve(no_privs)
    Traceback (most recent call last):
      ..
    Unauthorized: ...

    >>> hoary_nomination.decline(no_privs)
    Traceback (most recent call last):
      ..
    Unauthorized: ...

(Login as an admin to set the driver.)

    >>> login("foo.bar@canonical.com")

    >>> ubuntu.driver = no_privs
    >>> firefox.driver = no_privs

    >>> login("no-priv@canonical.com")

Approving a nomination
----------------------

When a nomination is approved, the appropriate bugtask(s) are created on
the target of the nomination and the status is set to APPROVED.

For example, there are currently no bugtasks on the firefox_milestones
productseries.

    >>> from canonical.launchpad.interfaces import BugTaskSearchParams

    >>> params = BugTaskSearchParams(user=no_privs, bug=bug_one)
    >>> found_tasks = firefox_milestones.searchTasks(params)
    >>> found_tasks.count()
    0

When a nomination is approved, one task is created, targeted at
firefox_milestones.

    >>> milestones_nomination.approve(no_privs)
    >>> print milestones_nomination.status.title
    Approved

    >>> found_tasks.count()
    1
    >>> bugtask = found_tasks[0]
    >>> bugtask.target == firefox_milestones
    True
    >>> print bugtask.owner.name
    no-priv

When a distribution bug nomination is approved, a task is created for
each package the bug affects in that distro. For example, let's ensure
bug #1 affects more than one Ubuntu package.

    >>> from operator import attrgetter
    >>> from canonical.launchpad.interfaces import IBugTaskSet

    >>> ubuntu_tbird = ubuntu.getSourcePackage("thunderbird")

    >>> getUtility(IBugTaskSet).createTask(
    ...     bug=bug_one, owner=no_privs,
    ...     distribution=ubuntu,
    ...     sourcepackagename=ubuntu_tbird.sourcepackagename)
    <BugTask ...>

    >>> def by_bugtargetname(bugtask):
    ...     return bugtask.target.bugtargetname

    >>> tasks = sorted(
    ...     bug_one.bugtasks, key=by_bugtargetname)

    >>> for task in tasks:
    ...     print task.target.bugtargetname
    firefox (upstream)
    firefox milestones (upstream)
    mozilla-firefox (Debian)
    mozilla-firefox (Ubuntu)
    thunderbird (Ubuntu)

When we approve the nomination, two more Ubuntu tasks are added for the
Hoary release. The user that made the decision is stored in the decider
attribute. The date on which the decision was made is stored in the
datedecided attribute.

    >>> hoary_nomination.datedecided is None
    True
    >>> hoary_nomination.approve(no_privs)
    >>> print hoary_nomination.status.title
    Approved
    >>> print hoary_nomination.decider.name
    no-priv
    >>> hoary_nomination.datedecided
    datetime...

    >>> tasks = sorted(
    ...     bug_one.bugtasks, key=by_bugtargetname)

    >>> for task in tasks:
    ...     print task.target.bugtargetname
    firefox (upstream)
    firefox milestones (upstream)
    mozilla-firefox (Debian)
    mozilla-firefox (Ubuntu Hoary)
    mozilla-firefox (Ubuntu)
    thunderbird (Ubuntu Hoary)
    thunderbird (Ubuntu)

Declining a nomination
----------------------

Declining a nomination simply sets its status to DECLINED. No tasks are
created.

    >>> firefox_nomination.datedecided is None
    True
    >>> print firefox_nomination.status.title
    Pending

    >>> firefox_nomination.decline(no_privs)

    >>> print firefox_nomination.status.title
    Declined
    >>> print firefox_nomination.decider.name
    no-priv
    >>> firefox_nomination.datedecided
    datetime...


Error Handling
--------------

Adding a duplicate nomination raises a DuplicateNominationError.

    >>> bug_one.addNomination(
    ...     distrorelease=ubuntu_hoary, owner=no_privs)
    Traceback (most recent call last):
      ..
    DuplicateNominationError: ...

    >>> bug_one.addNomination(
    ...     productseries=firefox_1_0, owner=no_privs)
    Traceback (most recent call last):
      ..
    DuplicateNominationError: ...

Nominating a bug for an obsolete distrorelease raises a
NominationReleaseObsoleteError. Let's mark warty obsolete to
demonstrate.

    >>> from canonical.lp.dbschema import DistributionReleaseStatus

    >>> ubuntu_warty = ubuntu.getRelease("warty")

(Temporarily log in as an admin user to change the release status.)

    >>> login("foo.bar@canonical.com")
    >>> ubuntu_warty.releasestatus = DistributionReleaseStatus.OBSOLETE
    >>> login("no-priv@canonical.com")

    >>> bug_one.addNomination(
    ...     distrorelease=ubuntu_warty, owner=no_privs)
    Traceback (most recent call last):
      ..
    NominationReleaseObsoleteError: ...

    >>> logout()
