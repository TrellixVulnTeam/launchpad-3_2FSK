= Email Notifications for Branch Merge Proposals =

Subscribers to any of the branches involved in the merge proposal get
notifications.


== Subscription ==

When subscribers subscribe to branches, they can specify what level of
notification they would like to receive.

    >>> from canonical.launchpad.testing import LaunchpadObjectFactory
    >>> from canonical.launchpad.interfaces import (
    ...     BranchSubscriptionDiffSize, BranchSubscriptionNotificationLevel,
    ...     CodeReviewNotificationLevel)
    >>> from canonical.launchpad.tests.mail_helpers import pop_notifications
    >>> factory = LaunchpadObjectFactory()
    >>> login('test@canonical.com')
    >>> bmp = factory.makeBranchMergeProposal()
    >>> source_subscriber = factory.makePerson(email='foo@bar.com',
    ...     password='baz')
    >>> _unused = bmp.source_branch.subscribe(source_subscriber,
    ...     BranchSubscriptionNotificationLevel.NOEMAIL,
    ...     BranchSubscriptionDiffSize.NODIFF,
    ...     CodeReviewNotificationLevel.STATUS)
    >>> target_subscriber = factory.makePerson()
    >>> target_subscription = bmp.target_branch.subscribe(target_subscriber,
    ...     BranchSubscriptionNotificationLevel.NOEMAIL,
    ...     BranchSubscriptionDiffSize.NODIFF,
    ...     CodeReviewNotificationLevel.FULL)


== Notification Recipients ==

Recipients are determined using getNotificationRecipients.

    >>> recipients = bmp.getNotificationRecipients(
    ...     CodeReviewNotificationLevel.STATUS)

Subscribers to all related branches are candidates.

    >>> set([target_subscriber, source_subscriber]) == set(recipients.keys())
    True

Only subscribers whose level is >= the minimum level are selected.

    >>> recipients = bmp.getNotificationRecipients(
    ...     CodeReviewNotificationLevel.FULL)
    >>> [target_subscriber] == recipients.keys()
    True

The value assigned to the recipient is a machine-readable explanation why they
were chosen, and their subscription

    >>> from zope.security.proxy import removeSecurityProxy
    >>> naked_recipients = removeSecurityProxy(recipients)
    >>> [notification_reason] = naked_recipients.values()
    >>> (target_subscription, 'Subscriber') == \
    ...     (notification_reason.subscription, notification_reason.rationale)
    True


== E-mail ==

Notifications are automagically generated by creating a branch merge
proposal.

    >>> #clear any existing notifications
    >>> notifications = pop_notifications()
    >>> bmp = factory.makeBranchMergeProposal(
    ...     dependent_branch=bmp.source_branch)
    >>> [notification] = pop_notifications()
    >>> print notification['To']
    Person-... <foo@bar.com>
    >>> print notification['From']
    Sample Person <test@canonical.com>
    >>> print notification['Subject']
    Merge of ~person-name... into ~person-name... proposed
    >>> print notification['X-Launchpad-Branch']
    ~person-name...
    >>> print notification['X-Launchpad-Message-Rationale']
    Subscriber
    >>> body = notification.get_payload()
    >>> print body.replace('=\n', '')
    Person-name... has proposed merging ~person-name... into ~person-name...
    --
    http://code.launchpad.dev/~person-name...
    You are subscribed to branch ...
