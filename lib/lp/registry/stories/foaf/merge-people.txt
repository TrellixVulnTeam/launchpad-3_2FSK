Merging people
==============

Since we may create Launchpad profiles automatically sometimes, we allow
people to merge two profiles into a single one, if they find there's more
than one profile representing themselves.

Here we will merge the profile named 'foo' into the one named 'no-priv'.

    # First we'll create the 'foo' profile because it doesn't exist yet.
    >>> login('foo.bar@canonical.com')
    >>> foo = factory.makePerson(name='foo', email='foo@baz.com')
    >>> logout()

Workaround while https://launchpad.net/launchpad/+bug/39016 is not
fixed.

    >>> from lp.services.mail import stub
    >>> stub.test_emails[:] = []

First we have to go to the +requestmerge page.

    >>> browser.addHeader('Authorization', 'Basic no-priv@canonical.com:test')
    >>> browser.open('http://launchpad.dev/people/+requestmerge')
    >>> print_location(browser.contents)
    Hierarchy: Launchpad
    Tabs:
    * Launchpad Home (selected) - http://launchpad.dev/
    * Code - http://code.launchpad.dev/
    * Bugs - http://bugs.launchpad.dev/
    * Blueprints - http://blueprints.launchpad.dev/
    * Translations - http://translations.launchpad.dev/
    * Answers - http://answers.launchpad.dev/
    Main heading: Merge Launchpad accounts

If we try to merge a nonexistent account, we'll get an error page.

    >>> browser.getControl('Duplicated Account').value = 'bar'
    >>> browser.getControl('Continue').click()
    >>> print "\n".join(get_feedback_messages(browser.contents))
    There is 1 error.
    Invalid value

The same will happen if we try to merge a team.

    >>> browser.getControl(
    ...     'Duplicated Account').value = 'support@canonical.com'
    >>> browser.getControl('Continue').click()
    >>> print "\n".join(get_feedback_messages(browser.contents))
    There is 1 error.
    Invalid value

In preparation for the actual merge (below), we add an extra email
address to the 'foo' account, to show how things work when the dupe
account has more than one email address.

    >>> from canonical.launchpad.database.emailaddress import EmailAddressSet
    >>> from lp.registry.model.person import PersonSet
    >>> from canonical.launchpad.interfaces.emailaddress import (
    ...     EmailAddressStatus)
    >>> foo = PersonSet().getByName('foo')
    >>> email = EmailAddressSet().new(
    ...     'bar.foo@canonical.com', person=foo,
    ...     status=EmailAddressStatus.VALIDATED,
    ...     account=foo.account)

Then we find the duplicate account and request the merge.
This redirects to the page which displays all email addresses owned by the
duplicate account. Here the user choses the ones which he want to claim.

    >>> browser.getControl(
    ...     'Duplicated Account').value = 'foo'
    >>> browser.getControl('Continue').click()
    >>> 'has more than one registered e-mail address' in browser.contents
    True

Make sure we haven't got leftovers from a previous test

    >>> len(stub.test_emails)
    0

Claim all the email addresses

    >>> email_select_control = browser.getControl(name='selected')
    >>> for ctrl in email_select_control.controls:
    ...     ctrl.selected = True
    >>> browser.getControl('Submit').click()
    >>> 'Individual email messages were sent to' in browser.contents
    True
    >>> 'foo@baz.com' in browser.contents
    True
    >>> 'bar.foo@canonical.com' in browser.contents
    True

Get the token we'll have to use to finish the registration process.

    >>> len(stub.test_emails) == 2
    True
    >>> emails = []
    >>> emails.append(stub.test_emails.pop())
    >>> emails.append(stub.test_emails.pop())
    >>> emails.sort()
    >>> from_addr1, to_addrs1, raw_msg1 = emails.pop()
    >>> from_addr2, to_addrs2, raw_msg2 = emails.pop()

    >>> from canonical.launchpad.ftests.logintoken import (
    ...     get_token_url_from_email)
    >>> token_url = get_token_url_from_email(raw_msg1)

Now the user goes to the page we sent a link via email to validate the first
claimed email address.

    >>> browser.open(token_url)
    >>> 'trying to merge the Launchpad account' in browser.contents
    True

User confirms the merge request submitting the form, but the merge wasn't
finished because the duplicate account still have a registered email adresses.

    >>> browser.getControl('Confirm').click()
    >>> 'has other registered e-mail addresses too' in browser.contents
    True

    >>> token_url = get_token_url_from_email(raw_msg2)

Now the user proves that he's the owner of the second email address of the
dupe account. And now the merge is completed successfully.

    >>> browser.open(token_url)
    >>> 'trying to merge the Launchpad account' in browser.contents
    True
    >>> browser.getControl('Confirm').click()
    >>> 'The accounts have been merged successfully' in browser.contents
    True


If the account we were trying to merge had a single email address, the
process would be a little simpler.

To demonstrate that, now we'll merge marilize@hbd.com into
no-priv@canonical.com.

    >>> len(stub.test_emails)
    0

    >>> browser.open('http://launchpad.dev/people/+requestmerge')
    >>> browser.getControl('Duplicated Account').value = 'marilize@hbd.com'
    >>> browser.getControl('Continue').click()
    >>> browser.url
    'http://launchpad.dev/people/+mergerequest-sent?dupe=55'
    >>> len(stub.test_emails)
    1
    >>> 'An email message was sent to' in browser.contents
    True
    >>> '<strong>marilize@hbd.com</strong' in browser.contents
    True

Revisiting that page gives the same results:

    >>> browser.open('http://launchpad.dev/people/+mergerequest-sent?dupe=55')
    >>> 'An email message was sent to' in browser.contents
    True
    >>> '<strong>marilize@hbd.com</strong' in browser.contents
    True

Get the token we'll have to use to finish the registration process.

    >>> from_addr, to_addrs, raw_msg = stub.test_emails.pop()
    >>> assert not stub.test_emails
    >>> token_url = get_token_url_from_email(raw_msg)

    # XXX: Steve Alexander 2006-10-21: To prevent spurious failures in PQM.
    #>>> browser.open(token_url)
    #>>> browser.getControl('Confirm').click()
    #>>> 'The accounts have been merged successfully' in browser.contents
    #True

Revisiting the mergerequest-sent page now safely redirects the user:

    #>>> browser.open('http://launchpad.dev/people/+mergerequest-sent?dupe=55')
    #>>> browser.url
    #'http://launchpad.dev/~no-priv'
