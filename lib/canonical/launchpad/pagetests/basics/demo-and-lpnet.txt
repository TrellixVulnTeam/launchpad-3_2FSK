= Demo and launchpad.net =

== Demo sites ==

Launchpad can brand instances as 'demo' instances to make it obvious to
users that they are working in a playpen and changes they make do not
affect the launchpad.net database.

This is controlled by a pair of config variables.

    >>> from canonical.config import config
    >>> config.launchpad.is_demo
    False
    >>> config.launchpad.site_message
    ''

(We could hard-code database names rather than using config variables.
But using config variables future-proofs us against changes such as
using multiple launchpad databases. It also makes testing and examining
instance-specific customizations much easier.)

When you are on a demo site, the is_demo setting is advertised by both
the page background, and the text "demo site" in the page footer.

Note: during the transition to 3.0 we test a non-3-0 page as well as
a 3-0 page to ensure that both display the correct demo/lp-net
information and styles.

    # Set config to pretend we're on a demo site:
    >>> from textwrap import dedent
    >>> test_data = dedent("""
    ...     [launchpad]
    ...     is_demo: True
    ...     site_message: This is a demo site mmk
    ...     """)
    >>> config.push('test_data', test_data)
    >>> print config.launchpad.is_demo
    True

The demo style is applied and the site_message is also included as part
 of the header.

For a 3-0 page:

    >>> browser.open('http://launchpad.dev/ubuntu')
    >>> print browser.contents
    <...
    <style...url(/@@/demo)...</style>
    ...
    >>> print extract_text(find_tag_by_id(browser.contents, 'lp-version'))
    &bull;...Launchpad...) devmode demo site

    >>> print extract_text(find_tag_by_id(browser.contents, 'globalheader'))
    This is a demo site mmk

And for a non-3-0 page:

    >>> browser.open('http://launchpad.dev/')
    >>> print browser.contents
    <...
    <style...url(/@@/demo)...</style>
    ...
    >>> print extract_text(find_tag_by_id(browser.contents, 'lp-version'))
    |...Launchpad...) devmode demo site

    >>> print extract_text(find_tag_by_id(browser.contents, 'globalheader'))
    This is a demo site mmk


When you are not on a demo site, the text no longer appears.

    >>> # Restore the previous config:
    >>> config_data = config.pop('test_data')
    >>> print config.launchpad.is_demo
    False

First for a 3-0 page:

    >>> browser.open('http://launchpad.dev/ubuntu')
    >>> print extract_text(find_tag_by_id(browser.contents, 'lp-version'))
    &bull;...Launchpad...) devmode
    >>> print find_tag_by_id(browser.contents, 'globalheader')
    None

And for a non-3-0 page:

    >>> browser.open('http://launchpad.dev/')
    >>> print extract_text(find_tag_by_id(browser.contents, 'lp-version'))
    |...Launchpad...) devmode
    >>> print find_tag_by_id(browser.contents, 'globalheader')
    None


== Launchpad.net ==

On every instance except launchpad.net, Launchpad's version and
revision numbers are displayed in the page footer.

    >>> print config.launchpad.is_lpnet
    False
    >>> browser.open('http://launchpad.dev/ubuntu')
    >>> print extract_text(find_tag_by_id(browser.contents, 'lp-version'))
    &bull;...Launchpad ... (r...)...

On launchpad.net, however, the version and revision numbers are
presented only in an HTML comment.

    >>> # Pretend that we're on launchpad.net:
    >>> test_data = dedent("""
    ...     [launchpad]
    ...     is_lpnet: True
    ...     """)
    >>> config.push('test_data', test_data)

    >>> browser.open('http://launchpad.dev/ubuntu')
    >>> print find_tag_by_id(browser.contents, 'lp-version')
    None
    >>> print browser.contents
    <...
    <!--
      Facet name: overview
      ...
      Launchpad ... (...)
    -->

    >>> # Restore the previous config:
    >>> config_data = config.pop('test_data')
    >>> print config.launchpad.is_lpnet
    False
