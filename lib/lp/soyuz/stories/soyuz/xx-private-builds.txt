= Private Builds =

A build is considered private if it is a build being done in an IArchive that
is marked as private.  Private builds will not be apparent anywhere in the
UI.  There are several places where information can be presented
differently depending on whether the user is permitted to see the build
or not.  A permitted user is one who is the archive's owner, a member of
its team, a BuilddAdministrator or a Launchpad administrator.


== Builder portlet details and builder index page ==

The builder's current status appears on the builder +index page (see
xx-builder-index.txt). This status information is changed to not reveal
build details if a private build is taking place. Instead the builder is
reported as NOT OK (meaning it's unavailable).

We'll make a private archive and add a new build to it to demonstrate this.

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.interfaces import (
    ...     IBuilderSet, IPersonSet)
    >>> from lp.soyuz.tests.test_publishing import (
    ...      SoyuzTestPublisher)
    >>> from lp.soyuz.interfaces.publishing import (
    ...     PackagePublishingStatus)
    >>> from canonical.launchpad.ftests import login, logout
    >>> from canonical.database.sqlbase import flush_database_updates

    >>> login("foo.bar@canonical.com")
    >>> cprov = getUtility(IPersonSet).getByName("cprov")
    >>> cprov.archive.buildd_secret = "secret"
    >>> cprov.archive.private = True
    >>> test_publisher = SoyuzTestPublisher()
    >>> test_publisher.prepareBreezyAutotest()
    >>> private_source_pub = test_publisher.getPubSource(
    ...     status=PackagePublishingStatus.PUBLISHED,
    ...     sourcename='privacy-test',
    ...     archive=cprov.archive)
    >>> [private_build] = private_source_pub.createMissingBuilds()
    >>> frog = getUtility(IBuilderSet)['frog']
    >>> frog.builderok = True
    >>> private_build.builder = frog
    >>> private_build.buildqueue_record.builder = frog

We'll also make name12 a member of the launchpad-buildd-admins team, so we
can use him to see builds from a buildd-admin perspective.

    >>> name12 = getUtility(IPersonSet).getByName("name12")
    >>> buildd_admins = getUtility(
    ...     IPersonSet).getByName("launchpad-buildd-admins")
    >>> from lp.registry.interfaces.person import (
    ...     TeamMembershipStatus)
    >>> buildd_admins.addMember(
    ...     name12, reviewer=name12, status=TeamMembershipStatus.APPROVED)

    >>> flush_database_updates()
    >>> logout()

So now we can go to frog's builder page and see what the page shows us.
The status shown to an anonymous user hides the fact that it's building a
private build:

    >>> anon_browser.open("http://launchpad.dev/+builds/frog")
    >>> print extract_text(find_main_content(anon_browser.contents))
    The frog builder...
    Current status
    Disabled
    ...


Launchpad Administrators are allowed to see the build:

    >>> admin_browser.open("http://launchpad.dev/+builds/frog")
    >>> print extract_text(find_main_content(admin_browser.contents))
    The frog builder...
    Current status
    Building
    i386 build of privacy-test 666 in ubuntutest breezy-autotest RELEASE
    ...

Buildd Administrators are not allowed to see the build in the portlet:

    >>> name12_browser = setupBrowser(auth="Basic test@canonical.com:test")
    >>> name12_browser.open("http://launchpad.dev/+builds/frog")
    >>> print extract_text(find_main_content(name12_browser.contents))
    The frog builder...
    Current status
    Disabled
    ...

cprov is also allowed to see his own build:

    >>> cprov_browser = setupBrowser(
    ...     auth="Basic celso.providelo@canonical.com:cprov")
    >>> cprov_browser.open("http://launchpad.dev/+builds/frog")
    >>> print extract_text(find_main_content(cprov_browser.contents))
    The frog builder...
    Current status
    Building
    i386 build of privacy-test 666 in ubuntutest breezy-autotest RELEASE
    ...

IBuild is also wrapped in a Zope security proxy to prevent unauthorised
access.  This prevents direct access to the build URL by unauthorised
users:

    >>> anon_browser.open(
    ...     "http://launchpad.dev/~cprov/+archive/ppa/+build/%s" %
    ...     private_build.id)
    Traceback (most recent call last):
    ...
    Unauthorized...

But it is fine for authorised users:

    >>> cprov_browser.open(
    ...     "http://launchpad.dev/~cprov/+archive/ppa/+build/%s" %
    ...     private_build.id)
    >>> print cprov_browser.url
    http://launchpad.dev/~cprov/+archive/ppa/+build/...


== Builder history page ==

The builder history page (+builds/<builder>/+history) shows all the builds
that the builder has done, with filtering on a user-selected build state
(see 20-builder-index.txt).

This list does not include builds that are private if a non-privileged
user is viewing it.

The builder "bob" has lots of builds in the sample data, including some
for cprov's private archive.  We can visit bob's history page and see
what it shows a non-privileged user:

    >>> anon_browser.open("http://launchpad.dev/+builds/bob/+history")
    >>> [builds_list] = find_tags_by_class(
    ...     anon_browser.contents, 'builds_list')
    >>> print extract_text(builds_list)
    Package:
    ...
    hppa build of mozilla-firefox 0.9 in ubuntu warty RELEASE
    ...
    i386 build of cdrkit 1.0 in ubuntu warty RELEASE
    ...
    i386 build of cdrkit 1.0 in ubuntu breezy-autotest RELEASE
    ...
    i386 build of foobar 1.0 in ubuntu warty RELEASE
    ...
    i386 build of netapplet 0.99.6-1 in ubuntu warty RELEASE
    ...
    5 of 14 results
    ...

Now visit the same page as an admin we can see that there are four more
results in the total set of results with an extra "mozilla-firefox"
build at the top of the first batch.

    >>> admin_browser.open("http://launchpad.dev/+builds/bob/+history")
    >>> [builds_list] = find_tags_by_class(
    ...     admin_browser.contents, 'builds_list')
    >>> print extract_text(builds_list)
    Package:
    ...
    hppa build of mozilla-firefox 0.9 in ubuntu warty RELEASE
    ...
    hppa build of mozilla-firefox 0.9 in ubuntu warty RELEASE
    ...
    i386 build of pmount 0.1-1 in ubuntu warty RELEASE
    ...
    i386 build of cdrkit 1.0 in ubuntu breezy-autotest RELEASE
    ...
    i386 build of cdrkit 1.0 in ubuntu warty RELEASE
    ...
    5 of 17 results
    ...

If cprov browses the list he will also see his own builds in the list.

    >>> cprov_browser.open("http://launchpad.dev/+builds/bob/+history")
    >>> [builds_list] = find_tags_by_class(
    ...     cprov_browser.contents, 'builds_list')
    >>> print extract_text(builds_list)
    Package:
    ...
    hppa build of mozilla-firefox 0.9 in ubuntu warty RELEASE
    ...
    hppa build of mozilla-firefox 0.9 in ubuntu warty RELEASE
    ...
    i386 build of pmount 0.1-1 in ubuntu warty RELEASE
    ...
    i386 build of cdrkit 1.0 in ubuntu breezy-autotest RELEASE
    ...
    i386 build of cdrkit 1.0 in ubuntu warty RELEASE
    ...
    5 of 17 results
    ...

"Frog" is currently building a private build but again the unauthorised user
cannot see any of the private details.

    >>> anon_browser.open("http://launchpad.dev/+builds/frog/+history")
    >>> [builds_list] = find_tags_by_class(
    ...     anon_browser.contents, 'builds_list')
    >>> print extract_text(builds_list)
    Package:
    ...
    No build records.

An authorised user will see the build however:

    >>> cprov_browser.open("http://launchpad.dev/+builds/frog/+history")
    >>> [builds_list] = find_tags_by_class(
    ...     cprov_browser.contents, 'builds_list')
    >>> print extract_text(builds_list)
    Package:
    ...
    i386 build of privacy-test 666 in ubuntutest breezy-autotest RELEASE
    ...


== Build farm index page ==

The build farm index page at /+builds is described in detail at
xx-buildfarm-index.txt.  However, if a private build is running on
a builder then it is hidden as in the examples above.

An admin user can see builds even if they are private:

    >>> admin_browser.open("http://launchpad.dev/+builds")
    >>> print extract_text(find_main_content(admin_browser.contents))
    Register a new build machine
    ...
    Name  Processor  Status
    bob   386        Building i386 build of mozilla-firefox ...
    frog  386        Building i386 build of privacy-test ... [cprov/ppa]
    ...

Launchpad Buildd admins cannot see private builds.

    >>> name12_browser.open("http://launchpad.dev/+builds")
    >>> print extract_text(find_main_content(name12_browser.contents))
    Register a new build machine
    ...
    Name  Processor  Status
    bob   386        Building i386 build of mozilla-firefox ...
    frog  386        Disabled
    ...

cprov can see his own private build:

    >>> cprov_browser.open("http://launchpad.dev/+builds")
    >>> print extract_text(find_main_content(cprov_browser.contents))
    Register a new build machine
    ...
    Name  Processor  Status
    bob   386        Building i386 build of mozilla-firefox ...
    frog  386        Building i386 build of privacy-test ... [cprov/ppa]
    Updated on ...

Anonymous users cannot see the private build:

    >>> anon_browser.open("http://launchpad.dev/+builds")
    >>> print extract_text(find_main_content(anon_browser.contents))
    1 available build machine, ...
    ...
    Name  Processor  Status
    bob   386        Building i386 build of mozilla-firefox ...
    frog  386        Disabled
    ...


== Unembargoed builds ==

When private packages are copied to a non-private archive, the build
becomes unembargoed and is accessible by any user.

Currently, browsing to the build page is forbidden for unauthorised
users:

    >>> from zope.security.interfaces import Unauthorized
    >>> try:
    ...     anon_browser.open(
    ...         "http://launchpad.dev/~cprov/+archive/ppa/+build/%s" %
    ...         private_build.id)
    ... except Unauthorized:
    ...     print "Got expected exception"
    ... else:
    ...     print "Did not get expected exception"
    Got expected exception

    >>> browser = setupBrowser(auth="Basic no-priv@canonical.com:test")
    >>> try:
    ...     browser.open(
    ...         "http://launchpad.dev/~cprov/+archive/ppa/+build/%s" %
    ...         private_build.id)
    ... except Unauthorized:
    ...     print "Got expected exception"
    ... else:
    ...     print "Did not get expected exception"
    Got expected exception

Let's make the iceweasel package available in breezy-autotest.
First log in as an admin to be able to manipulate the source publishing.

    >>> login("foo.bar@canonical.com")
    >>> from canonical.launchpad.webapp.dbpolicy import MasterDatabasePolicy
    >>> from canonical.launchpad.webapp.interfaces import IStoreSelector
    >>> getUtility(IStoreSelector).push(MasterDatabasePolicy())
    >>> from lp.registry.interfaces.distribution import (
    ...     IDistributionSet)
    >>> ubuntutest = getUtility(IDistributionSet)['ubuntutest']
    >>> breezy_autotest = ubuntutest['breezy-autotest']
    >>> new_pub = private_source_pub.copyTo(
    ...     breezy_autotest, private_source_pub.pocket, ubuntutest.main_archive)
    >>> binary_pkg_release = test_publisher.uploadBinaryForBuild(
    ...     private_build, 'privacy-test-bin')
    >>> binary_pkg_pub_history = test_publisher.publishBinaryInArchive(
    ...     binary_pkg_release, ubuntutest.main_archive)
    >>> flush_database_updates()
    >>> policy = getUtility(IStoreSelector).pop()
    >>> logout()

Now the anonymous user can see the build:

    >>> anon_browser = setupBrowser()
    >>> anon_browser.open("http://launchpad.dev/+builds")
    >>> print extract_text(find_main_content(anon_browser.contents))
    2 available build machines, ...
    ...
    Name  Processor Status
    bob   386       Building i386 build of mozilla-firefox ...
    frog  386       Building i386 build of privacy-test 666 ... [cprov/ppa]
    ...

Any other logged-in user will also see the build:

    >>> browser.open("http://launchpad.dev/+builds")
    >>> print extract_text(find_main_content(browser.contents))
    2 available build machines, ...
    ...
    Name  Processor Status
    bob   386       Building i386 build of mozilla-firefox ...
    frog  386       Building i386 build of privacy-test 666 ... [cprov/ppa]
    ...

Accessing the build page will now also work:

    >>> anon_browser.open(
    ...     "http://launchpad.dev/~cprov/+archive/ppa/+build/%s" %
    ...     private_build.id)
    >>> print anon_browser.title
    PPA for Celso Providelo : Celso Providelo

    >>> browser.open(
    ...     "http://launchpad.dev/~cprov/+archive/ppa/+build/%s" %
    ...     private_build.id)
    >>> print browser.title
    PPA for Celso Providelo : Celso Providelo

When accessing the distroseries source package release page, the builds
portlet will display a link to the newly unembargoed build:

    >>> browser.open(
    ...     "http://launchpad.dev/ubuntutest/breezy-autotest/"
    ...     "+source/privacy-test/666")
    >>> portlet = find_portlet(browser.contents, 'Builds')
    >>> print extract_text(portlet)
    Builds
    breezy-autotest i386 Successfully built

    >>> print browser.getLink('i386').url
    http://launchpad.dev/~cprov/+archive/ppa/+build/...

Similarly, when accessing the distribution source package release page,
the main content will display a link to the newly unembargoed build:

    >>> browser.open(
    ...     "http://launchpad.dev/ubuntutest/+source/privacy-test/666")
    >>> portlet = find_portlet(browser.contents, 'Builds')
    >>> print extract_text(portlet)
    Builds
    Breezy Badger Autotest: i386

    >>> print browser.getLink('i386').url
    http://launchpad.dev/~cprov/+archive/ppa/+build/...
