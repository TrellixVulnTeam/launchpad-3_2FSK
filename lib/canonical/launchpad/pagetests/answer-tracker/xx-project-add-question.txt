= Asking a New Quesiton from a Project =

Even if projects are not QuestionTargets, it is still possible to create a
question from a project.

The user must login to proceed:

    # XXX flacoste 2006/12/13 Update this test to use the link that
    # will be present on the 1.0 UI.
    # >>> browser.open('http://launchpad.dev/mozilla')
    # >>> browser.getLink('Ask Question').click()
    >>> browser.open('http://launchpad.dev/mozilla/+addticket')
    Traceback (most recent call last):
      ...
    Unauthorized...

    # >>> user_browser.open('http://launchpad.dev/mozilla')
    # >>> user_browser.getLink('Request Support').click()
    >>> user_browser.open('http://launchpad.dev/mozilla/+addticket')
    >>> print user_browser.title
    Ask a question about a product from the Mozilla Project

The workflow is identical to the regular one, except that the user has
to select the project's product for which a quesiton is asked .

    >>> print user_browser.getControl('Product').displayValue
    ['Mozilla Firefox']

Like for the regular workflow, the user enter a short summary of his
problem in the language of his choice:

    >>> print user_browser.getControl('Language').displayValue
    ['English (en)']
    >>> user_browser.getControl('Summary').value = (
    ...     'Problem displaying complex SVG')
    >>> user_browser.getControl('Continue').click()

He's shown a list of similar questions in the product selected:

    >>> similar_tickets = find_tag_by_id(
    ...     user_browser.contents, 'similar-tickets')
    >>> for row in similar_tickets.fetch('tr', 'noted'):
    ...     print row.a.renderContents()
    Problem showing the SVG demo on W3C site

The user can still change the product against which he's asking the
question.

    >>> user_browser.getControl('Mozilla Thunderbird').selected = True

If he empties the title, he'll get redirected to the first page.

    >>> user_browser.getControl('Summary').value = ''
    >>> user_browser.getControl('Add').click()

An error will inform him that the summary is missing:

    >>> from BeautifulSoup import BeautifulSoup
    >>> soup = BeautifulSoup(user_browser.contents)
    >>> print soup.first('div', 'message').renderContents()
    You must enter a summary of your problem.

The newly selected product is still selected, and when the user enters
his problem again, similar questions against that product will be shown.

    >>> print user_browser.getControl('Product').displayValue
    ['Mozilla Thunderbird']
    >>> user_browser.getControl('Summary').value = (
    ...     'Problem displaying complex SVG')
    >>> user_browser.getControl('Continue').click()

Since there are no similar questions against Thunderbird, an appropriate
message is displayed:

    >>> soup = BeautifulSoup(user_browser.contents)
    >>> print soup.first('p').renderContents()
    There are no existing questions similar to the summary you entered.

Entering a description and clicking the 'Add' button will create the
question.

    >>> user_browser.getControl('Description').value = (
    ... "I received an HTML message containing an inlined SVG\n"
    ... "representation of a chessboard. It didn't displayed properly.\n"
    ... "Is there a way to configure Thunderbird to display SVG properly?\n")
    >>> user_browser.getControl('Add').click()
    >>> user_browser.url
    '.../thunderbird/+ticket/...'
    >>> print user_browser.title
    Mozilla Thunderbird question #...Problem displaying complex...
