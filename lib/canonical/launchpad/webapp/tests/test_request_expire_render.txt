= Rendering timeout exceptions =

When a page takes too long to render, a timeout exception is raised. A
timeout exception should provide IRequestExpired.

    >>> from zope.interface import implements
    >>> from canonical.database.interfaces import IRequestExpired
    >>> class TimeoutException:
    ...     implements(IRequestExpired)

After a timeout has happened, we can no longer do any more db queries,
since get_request_remaining_seconds will raise. However, if the user is logged
in, a query will be issued to render the "Logged in as No Privileges Person".

    >>> from canonical.config import config
    >>> from textwrap import dedent
    >>> test_data = dedent("""
    ...     [database]
    ...     db_statement_timeout: 10000
    ...     """)
    >>> config.push('test_data', test_data)

    >>> from time import time
    >>> from canonical.launchpad.webapp.adapter import (
    ...     get_request_remaining_seconds, set_request_started)
    >>> login('no-priv@canonical.com')
    >>> too_early = time() - (config.database.db_statement_timeout / 1000 + 1)
    >>> set_request_started(too_early)
    >>> get_request_remaining_seconds()
    Traceback (most recent call last):
    ...
    RequestExpired: request expired.

Before the OOPS page is rendered, the timeout is reset, so that we can
issue the DB query and render the page, showing the OOPS id to the user.

    >>> from canonical.launchpad.webapp.interaction import (
    ...     get_current_principal)
    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest
    >>> request = LaunchpadTestRequest(environ={'PATH_INFO': '/'})
    >>> request.oopsid = 'OOPS_ID_MARKER'
    >>> request.setPrincipal(get_current_principal())

    >>> from zope.component import getMultiAdapter
    >>> timeout_exception = TimeoutException()
    >>> exception_view = getMultiAdapter(
    ...     (timeout_exception, request), name="index.html")
    >>> get_request_remaining_seconds() > 0
    True
    >>> print exception_view()
    <...OOPS_ID_MARKER...

    >>> test_config_data = config.pop('test_data')
    >>> from canonical.launchpad.webapp.adapter import clear_request_started
    >>> clear_request_started()
