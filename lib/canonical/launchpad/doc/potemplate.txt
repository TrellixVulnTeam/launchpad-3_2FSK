= POTemplateSet =

Test that the security setup for IPOTemplateSet is working

  >>> from zope.component import getUtility
  >>> from canonical.launchpad.interfaces import IPOTemplateSet
  >>> potemplate_set = getUtility(IPOTemplateSet)

== getAllByName ==

This method will return all IPOTemplate that have a given name.

  >>> evolution_templates = potemplate_set.getAllByName('evolution-2.2')
  >>> len(evolution_templates)
  2
  >>> titles = [potemplate.title
  ...           for potemplate in evolution_templates
  ...          ]
  >>> 'Template "evolution-2.2" in Ubuntu Hoary package "evolution"' in titles
  True
  >>> 'Template "evolution-2.2" in Evolution trunk' in titles
  True

== getAllOrderByDateLastUpdated ==

This method will give us all available IPOTemplate sorted by their
modification date.

  >>> templates = list(potemplate_set.getAllOrderByDateLastUpdated())
  >>> len(templates)
  9
  >>> templates[0].date_last_updated >= templates[5].date_last_updated
  True
  >>> templates[1].date_last_updated >= templates[5].date_last_updated
  True
  >>> templates[2].date_last_updated >= templates[5].date_last_updated
  True
  >>> templates[3].date_last_updated >= templates[5].date_last_updated
  True
  >>> templates[4].date_last_updated >= templates[5].date_last_updated
  True


= POTemplateSubset= 

== getPOTemplateByName ==

This method gives us the IPOTemplate that belongs to this subset and its name
is the given one.

  >>> from canonical.launchpad.database import ProductSeries
  >>> productseries = ProductSeries.get(3)
  >>> potemplatesubset = potemplate_set.getSubset(
  ...     productseries=productseries)
  >>> potemplate = potemplatesubset.getPOTemplateByName(
  ...     'evolution-2.2')
  >>> print potemplate.title
  Template "evolution-2.2" in Evolution trunk

== getPOTemplateByPath ==

This method gives us the IPOTemplate that belongs to this subset and its path
in the source code is the given one.

  >>> potemplate = potemplatesubset.getPOTemplateByPath(
  ...     'po/evolution-2.2-test.pot')
  >>> print potemplate.title
  Template "evolution-2.2-test" in Evolution trunk

== getAllOrderByDateLastUpdated ==

This method will give us all available IPOTemplate for this subset sorted
by their modification date.

  >>> templates = list(potemplatesubset.getAllOrderByDateLastUpdated())
  >>> len(templates)
  2
  >>> templates[0].date_last_updated >= templates[1].date_last_updated
  True

== getPOTemplateByTranslationDomain ==

This method gives us the IPOTemplate that belongs to this subset and its
translation domain is the given one.

  >>> productseries = ProductSeries.get(5)
  >>> potemplatesubset = potemplate_set.getSubset(
  ...     productseries=productseries)
  >>> potemplate = potemplatesubset.getPOTemplateByTranslationDomain(
  ...     'NetApplet')
  >>> print potemplate.title
  Template "netapplet" in NetApplet trunk

== getClosestPOTemplate ==

With this method, we get the IPOTemplate from this Subset that has the bigger
part of the path in common.

To do this test, first we check the evolution product, it has two potemplates
in the same path and thus, this method should not get any value.

  >>> productseries = ProductSeries.get(3)
  >>> potemplatesubset = potemplate_set.getSubset(
  ...     productseries=productseries)

  >>> for template in potemplatesubset:
  ...    print template.path
  po/evolution-2.2-test.pot
  po/evolution-2.2.pot

  >>> potemplatesubset.getClosestPOTemplate('po') is None
  True

Now, we move to the NetApplet product, we should detect it.

  >>> productseries = ProductSeries.get(5)
  >>> potemplatesubset = potemplate_set.getSubset(
  ...     productseries=productseries)

  >>> for template in potemplatesubset:
  ...    print template.path
  po/netapplet.pot

  >>> potemplatesubset.getClosestPOTemplate('po') is None
  False

But if we give the empty string or None, we get nothing

  >>> potemplatesubset.getClosestPOTemplate('') is None
  True
  >>> potemplatesubset.getClosestPOTemplate('') is None
  True

= POTemplate =

Check that we can get IPOFile based on its path.

  >>> from canonical.launchpad.database import POTemplate
  >>> potemplate = POTemplate.get(1)
  >>> pofile = potemplate.getPOFileByPath('es.po')
  >>> print pofile.title
  Spanish (es) translation of evolution-2.2 in Evolution trunk


== newPOFile ==

The Portuguese translation has not been started yet; therefore,
when we call IPOTemplate.newPOFile() a POFile instance will
be created.

  >>> pofile = potemplate.newPOFile('pt')

By default, we should get a path for this pofile, that has some information
about its potemplate's filename so we don't have conflicts with other pofiles.

  >>> pofile.path
  u'po/evolution-2.2-pt.po'

Lets try to access untranslated entries here.

  >>> potmsgsets = list(pofile.getPOTMsgSetUntranslated())
  >>> len(potmsgsets) == potemplate.getPOTMsgSetsCount(current=True)
  True

And there shouldn't be any translated entries

  >>> potmsgsets = list(pofile.getPOTMsgSetTranslated())
  >>> len(potmsgsets)
  0

Or any fuzzy (need-review) entries:

  >>> potmsgsets = list(pofile.getPOTMsgSetFuzzy())
  >>> len(potmsgsets)
  0
  >>> pofile.fuzzy_count
  0

== relatives_by_name ==

This property gives us an iterator of IPOTemplate objects that have the
same IPOTemplateName and are 'current'.

This is the template we are working with:

  >>> potemplate.title
  u'Template "evolution-2.2" in Evolution trunk'

And this is the list of templates related with this one based on its
IPOTemplateName:

  >>> for relative_potemplate in potemplate.relatives_by_name:
  ...     assert relative_potemplate.iscurrent
  ...     print relative_potemplate.title
  Template "evolution-2.2" in Ubuntu Hoary package "evolution"

== relatives_by_source ==

This property gives us an iterator of IPOTemplate objects that are in the
same context IProductSeries or IDistroRelease/ISourcePackageName and are
'current'.

First, we can see the relatives in a IProductSeries context.

  >>> for relative_potemplate in potemplate.relatives_by_source:
  ...     assert relative_potemplate.iscurrent
  ...     print relative_potemplate.title
  Template "evolution-2.2-test" in Evolution trunk

Let's get a new IPOTemplate that belongs to an IDistroRelease:

  >>> potemplate = POTemplate.get(4)
  >>> print potemplate.title
  Template "evolution-2.2" in Ubuntu Hoary package "evolution"

And this is the list of templates related with this one based on its
context:

  >>> for relative_potemplate in potemplate.relatives_by_source:
  ...     assert relative_potemplate.iscurrent
  ...     print relative_potemplate.title
  Template "man" in Ubuntu Hoary package "evolution"

But we can see that there is a third template in this context:

  >>> not_current_template = POTemplate.get(9)
  >>> not_current_template.productseries == potemplate.productseries
  True
  >>> not_current_template.distrorelease == potemplate.distrorelease
  True
  >>> not_current_template.sourcepackagename == potemplate.sourcepackagename
  True
  >>> not_current_template.iscurrent
  False
