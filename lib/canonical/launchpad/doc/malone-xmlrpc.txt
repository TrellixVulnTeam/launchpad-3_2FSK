XML-RPC Integration with Malone
===============================

Malone provides an XML-RPC interface for filing bugs.

    >>> from canonical.launchpad.xmlrpc import FileBugAPI

    >>> filebug_api = FileBugAPI(None, None)

The filebug API
------------------

The filebug API is:

    filebug_api.filebug(
        product, distro, package, title, comment, status,
        assignee_email, security_related, private, subscribers)

REQUIRED ARGS: product: the product name, as a string
               distro: the distro name, as a string
               title: a string
               comment: a string

(Only one of product or distro may be provided.)

OPTIONAL ARGS: package: a string, allowed only if distro is specified
               status: a string, identical to the email interface values
               assignee_email: a string
               security_related: a boolean
               private: a boolean
               subscribers: a list of email addresses

The bug owner is the currently authenticated user, taken from the
request.

The return value is the bug URL, in short form, e.g.:

    http://launchpad.net/bugs/42

Examples
--------

Reporting a product bug.

    >>> login("test@canonical.com")

    >>> filebug_api.filebug(
    ...     'firefox', '', '', 'the title', 'the comment',
    ...     '', '', '', '', [])
    u'http://localhost:8086/bugs/11'

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.interfaces import IBugSet

    >>> bugset = getUtility(IBugSet)
    >>> bug = bugset.get(11)

    >>> print bug.title
    the title
    >>> print bug.description
    the comment
    >>> print bug.owner.name
    name12

    >>> firefox_bug = bug.bugtasks[0]

    >>> print firefox_bug.product.name
    firefox

Reporting a distro bug.

    >>> filebug_api.filebug(
    ...     '', 'ubuntu', '', 'another bug', 'another comment',
    ...     'confirmed', 'foo.bar@canonical.com', '', '', [])
    u'http://localhost:8086/bugs/12'

    >>> bug = bugset.get(12)

    >>> print bug.title
    another bug
    >>> print bug.description
    another comment
    >>> print bug.owner.name
    name12

    >>> ubuntu_bug = bug.bugtasks[0]

    >>> print ubuntu_bug.distribution.name
    ubuntu
    >>> ubuntu_bug.sourcepackagename is None
    True
    >>> print ubuntu_bug.status.title
    Confirmed
    >>> print ubuntu_bug.assignee.name
    name16

Reporting a package bug.

    >>> filebug_api.filebug(
    ...     '', 'ubuntu', 'evolution', 'email is cool', 'email is nice',
    ...     'inprogress', '', True, True, ["no-priv@canonical.com"])
    u'http://localhost:8086/bugs/13'

    >>> bug = bugset.get(13)

    >>> print bug.title
    email is cool
    >>> print bug.description
    email is nice
    >>> bug.security_related
    True
    >>> bug.private
    True
    >>> sorted(p.name for p in bug.getDirectSubscribers())
    [u'name12', u'no-priv']
    >>> bug.getIndirectSubscribers()
    []

    >>> evolution_bug = bug.bugtasks[0]

    >>> print evolution_bug.distribution.name
    ubuntu
    >>> print evolution_bug.sourcepackagename.name
    evolution
    >>> print evolution_bug.status.title
    In Progress

Error Handling
--------------

Malone's xmlrpc interface provides extensive error handling. The various
error conditions it recognizes are:

Failing to specify a product or distribution.

    >>> filebug_api.filebug()
    <Fault 60: 'Required arguments missing. You must specify either a product or distrubtion in which the bug exists.'>

Specifying *both* a product and distribution.

    >>> filebug_api.filebug('firefox', 'ubuntu')
    <Fault 70: 'Too many arguments. You may specify either a product or a distribution, but not both.'>

Specifying a non-existent product.

    >>> filebug_api.filebug('nosuchproduct')
    <Fault 10: 'No such product: nosuchproduct'>

Specifying a non-existent distribution.

    >>> filebug_api.filebug('', 'nosuchdistro')
    <Fault 80: 'No such distribution: nosuchdistro'>

Specifying a non-existent package.

    >>> filebug_api.filebug('', 'ubuntu', 'nosuchpackage')
    <Fault 90: 'No such package: nosuchpackage'>

Missing title.

    >>> filebug_api.filebug('firefox', '', '', '')
    <Fault 100: 'Required parameter missing: title'>

Missing comment.

    >>> filebug_api.filebug('firefox', '', '', 'the title', '')
    <Fault 100: 'Required parameter missing: comment'>

Invalid status.

    >>> filebug_api.filebug(
    ...     'firefox', '', '', 'title', 'comment', 'nosuchstatus')
    <Fault 110: 'Unknown value for status: nosuchstatus. Allowed values:
    unconfirmed, needsinfo, rejected, confirmed, inprogress, fixcommitted,
    fixreleased'>

Invalid assignee.

    >>> filebug_api.filebug(
    ...     'firefox', '', '', 'title', 'comment', '',
    ...     'nosuch@assignee.com')
    <Fault 20: 'Invalid assignee: No user with the email address
    "nosuch@assignee.com" was found'>

Invalid subscriber.

    >>> filebug_api.filebug(
    ...     'firefox', '', '', 'title', 'comment', '',
    ...     'test@canonical.com', '', '',
    ...     ["foo.bar@canonical.com", "nosuch@subscriber.com"])
    <Fault 20: 'Invalid subscriber: No user with the email address
    "nosuch@subscriber.com" was found'>
