= Decorations =

Messages sent by Mailman to team mailing list recipients have a number of
decorations that help users interact better with the list, and its archive.
These decorations live in the message headers, and in the text footer that
Mailman adds to the bottom of very message.

First, create the mailing list, which will send a notification messages
to all the members of the mailing list.  We can ignore these messages.

    >>> from canonical.launchpad.mailman.testing import helpers
    >>> list_one = helpers.create_list('itest-one')

    # Ignore the list creation message.
    >>> smtpd.reset()

Add a member of the mailing list so that we can post messages to the list.

    >>> import transaction
    >>> from operator import itemgetter
    >>> from canonical.launchpad.ftests import login, logout
    >>> from canonical.launchpad.ftests.mailinglists_helper import new_person
    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> from zope.component import getUtility

    >>> login('foo.bar@canonical.com')
    >>> team_one = getUtility(IPersonSet).getByName('itest-one')
    >>> anne = new_person('Anne')
    >>> anne.join(team_one)
    >>> list_one.subscribe(anne)
    >>> logout()

    >>> from canonical.launchpad.mailman.testing import logwatcher
    >>> serial_watcher = logwatcher.LogWatcher('serial')
    >>> transaction.commit()
    >>> serial_watcher.wait()

    >>> from Mailman.MailList import MailList
    >>> m = MailList('itest-one', lock=False)
    >>> sorted(m.getMembers())
    ['anne.person@example.com', 'aperson@example.org',
     'archive@mail-archive.dev']

Send a message to the list, then retrieve it from the mbox.  We'll examine its
contents below.

    >>> login('foo.bar@canonical.com')
    >>> anne.preferredemail.email
    u'anne.person@example.com'
    >>> logout()

    >>> smtp_watcher = logwatcher.LogWatcher('smtp')
    >>> from Mailman.Post import inject
    >>> inject('itest-one', """\
    ... From: anne.person@example.com
    ... To: itest-one@lists.launchpad.dev
    ... Subject: A member post
    ... Message-ID: <first-injection>
    ...
    ... Hi, I am a member of this team's list.
    ... """)
    >>> smtp_watcher.wait()


== VERP headers ==

VERP stands for Variable Envelope Return Path and it is a technique used to
track users for bounce processing.  The idea is that you encode the actual
subscribed address in the Sender and Errors-To headers so that they can be
extracted if a bounce is ever received.  This works because remote MTAs must
bounce to this address, regardless of how many intervening hops, forwards, or
rewrites there are.

(Technically, Mailman doesn't do VERP because that's defined as happening in
the MTA, but it's close enough in intent and exactly the same in
implementation so we use the same terminology in Mailman.)

    >>> messages = sorted(smtpd.getMessages(), key=itemgetter('sender'))
    >>> for message in messages:
    ...     print message['sender']
    ...     print message['errors-to']
    ...     print '---'
    itest-one-bounces+anne.person=example.com@lists.launchpad.dev
    itest-one-bounces+anne.person=example.com@lists.launchpad.dev
    ---
    itest-one-bounces+archive=mail-archive.dev@lists.launchpad.dev
    itest-one-bounces+archive=mail-archive.dev@lists.launchpad.dev
    ---

For the following discussion, it doesn't matter which message we look at in
detail, so the last one in the sorted sequence is just fine.


== RFC 2369 headers ==

RFC 2369 defines a set of headers for mailing lists, often called the List-*
headers due to the common prefix of these headers.


=== List-Help ===

The List-Help header points to "an instructive website" to provide help to
users.

    >>> message['list-help']
    '<http://help.launchpad.dev/ListHelp>'


=== List-Id ===

The List-Id header uniquely identifies the mailing list.  Mailman crafts the
List-Id header using the team name and the host name on which the lists
reside.

    >>> message['list-id']
    '<itest-one.lists.launchpad.dev>'


=== List-Subscribe and List-Unsubscribe ===

The List-Unsubscribe header points to the contact address of the mechanism the
user can access to unsubscribe from the mailing list.  Because we have not yet
enabled the email command robot for Launchpad, the only way to unsubscribe is
for a user to hit her email settings page.  The List-Subscribe header is
similar.

    >>> message['list-subscribe']
    '<http://launchpad.dev/~itest-one>'
    >>> message['list-unsubscribe']
    '<http://launchpad.dev/~itest-one>'


=== List-Archive ===

The List-Archive header describes how to access the archives for this mailing
list.  It is a list-wide url, not a url-specific to the individual message
(see draft RFC 5064 for that).

This url should exactly match the link given on the team's overview page.

    >>> browser = Browser('no-priv@canonical.com:test')
    >>> browser.open('http://launchpad.dev:8085/~itest-one')
    >>> browser.getLink(id='mailing-list-archive')
    <Link text='Mailing list archive'
          url='http://lists.launchpad.dev/itest-one'>
    >>> message['list-archive']
    '<http://lists.launchpad.dev/itest-one>'


=== List-Post ===

The List-Post header is a mailto url that tells people where they can post new
messages for this mailing list.

    >>> message['list-post']
    '<mailto:itest-one@lists.launchpad.dev>'


=== List-Owner ===

The List-Owner contains a url pointing to the human contact for the mailing
list.  This header may be omitted if it is the same as the postmaster, but in
our case, we point this at the team owning the mailing list.

    >>> message['list-owner']
    '<http://launchpad.dev/~itest-one>'


== Message footer ==

Mailman appends a footer of helpful text on each message.  This footer
contains a link to this message's archive (which should be the same as the RFC
5064 link), the message's posting address, the unsubscribe address, etc.
The easiest way to see the footer is to just scan the message body for the
separator.

    >>> body_lines = message.get_payload().splitlines(True)
    >>> for line_number, line in enumerate(body_lines):
    ...     if line.startswith('_____'):
    ...         break
    ... else:
    ...     raise AssertionError('No footer found')
    >>> print ''.join(body_lines[line_number + 1:])
    Mailing list: http://launchpad.dev/~itest-one
    Post to     : itest-one@lists.launchpad.dev
    Unsubscribe : http://launchpad.dev/~itest-one
    More help   : http://help.launchpad.dev/ListHelp
    <BLANKLINE>
    <BLANKLINE>
