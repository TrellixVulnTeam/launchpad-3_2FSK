# Copyright 2009 Canonical Ltd.  This software is licensed under the
# GNU Affero General Public License version 3 (see the file LICENSE).

# NOTE: This is a generated file.  The original is in
# buildout-templates/_pythonpath.py.in

__metaclass__ = type

import sys
import os
import site

def set_path():
    # Clean out sys.modules from site's processing of .pth files.
    # XXX This should come from z3c.recipe.filetemplate.
    clean_modules = [
        '_pythonpath',
        'sitecustomize',
        'UserDict',
        '__builtin__',
        '__main__',
        '_codecs',
        'codecs',
        'copy_reg',
        'encodings',
        'encodings.aliases',
        'encodings.codecs',
        'encodings.exceptions',
        'encodings.types',
        'encodings.utf_8',
        'exceptions',
        'linecache',
        'os',
        'os.path',
        'posix',
        'posixpath',
        'signal',
        'site',
        'stat',
        'sys',
        'types',
        'warnings',
        'zipimport'
        ]
    previously_imported = {}
    for k in sys.modules.keys():
        if k not in clean_modules:
            previously_imported[k] = sys.modules.pop(k)

    sys.path[:] = [
        ${string-egg-paths}
        ]
    sys.path.extend([
        ${string-stdlib-paths}
        ])
    site_dirs = [
        ${string-dir-paths}
        ]
    # Add the site_dirs before `addsitedir` in case it has setuptools.
    sys.path.extend(site_dirs)
    # Process all buildout-controlled eggs before site-packages by importing
    # pkg_resources.  This is only important for namespace packages, so it may
    # not have been added, so ignore import errors.
    try:
        import pkg_resources
    except ImportError:
        pass
    # Process .pth files.
    for p in site_dirs:
        site.addsitedir(p)

    # We don't want to have dropped any packages that weren't already added
    # back by what we just did.  If we did, there's a good chance that the
    # world will now be insane.  Quit now, and let's fix it.
    unexpected = set(previously_imported).difference(sys.modules)
    if unexpected:
        raise RuntimeError(
            'Found unexpected module(s): %s\n\nImport _pythonpath earlier!' %
            (', '.join(sorted(unexpected)),))

    sys.path[0:0] = [${string-paths}]
    # Enable Storm's C extensions
    os.environ['STORM_CEXTENSIONS'] = '1'

    # We don't want to bother tests or logs with these.
    import warnings
    warnings.filterwarnings(
        'ignore',
        'Module .+ was already imported from .+, but .+ is being added.*',
        UserWarning)

try:
    import canonical
except ImportError:
    set_path()
