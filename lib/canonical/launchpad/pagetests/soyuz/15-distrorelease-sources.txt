= DistroRelease Source Package Pages =

In Launchpad, SourcePackageReleases are directly attached to a
DistroRelease by a publication record (see doc/publishing.txt).

A SourcePackage, or better named DistroReleaseSourcePackage, is a
collection of SourcePackageReleases once published in a given
DistroRelease.

SourcePackages are available through the web UI after traversing
through a DistroRelease and SourceName. The URL schema is:

$LP/ubuntu/$DISTRORELEASE/+source/$SOURCENAME

A SourcePackageRelease once published in a DistroRelease is
represented by a DistroReleaseSourcePackageRelease and easily reached
by traversing a SourcePackage instance with a valid version, like:

$LP/ubuntu/$DISTRORELEASE/+source/$SOURCENAME/$VERSION

The path to click here is a bit involved, since the source package
page can only be reached by searching or getting a list of all
published packages. We will do the last:

Starting from distribution page:

  >>> browser.open(
  ...     'http://localhost/ubuntu')

We get a list of all published packages:

  >>> browser.getLink("List all packages").click()

Click on the respective name to get in the DistributionSourcePackage:
Let's have a look at the firefox DistributionSourcePackage.

  # But mozilla-firefox is not on the current batch of results
  >>> browser.getLink("mozilla-firefox").click()
  Traceback (most recent call last):
  ...
  LinkNotFoundError

  # Let's go to the next batch, where we can see it.
  >>> browser.getLink("Next").click()
  >>> browser.getLink("mozilla-firefox").click()


There we can see the entire publishing history for the source and
links to the pages with more specific (useful) information. By
clicking in the 'target' distrorelease we will get to the
SourcePackage page:

  >>> browser.getLink("warty").click()
  >>> browser.url
  'http://localhost/ubuntu/warty/+source/mozilla-firefox'

This page provides its versions publications organised by pocket.
We can see 'mozilla-firefox' is published once in pocket RELEASE:

  >>> print find_tag_by_id(browser.contents, 'publishings')
  <dl id="publishings">
    <dt><dfn>Release</dfn></dt>
    <dd>
      <p>The package versions that were published
         when the distribution release was made.
         For releases that are still under development,
         packages are published here only.
      </p>
      <ul>
        <li>
         <a href="/ubuntu/warty/+source/mozilla-firefox/0.9">mozilla-firefox 0.9</a>
        </li>
      </ul>
    </dd>
  </dl>

It also provides the upstream relationships for this source, Project,
Product and Branches:

  >>> print find_tag_by_id(browser.contents, 'upstreams')
  <ul id="upstreams">
    <li>
      <b>Project Group:</b>
      <a href="/mozilla">the Mozilla Project</a>
    </li>
    <li><b>Project:</b>
      <a href="/firefox">Mozilla Firefox</a>
    </li>
    <li><b>Branch: </b>
      <a href="/firefox/trunk">trunk</a><br />
    </li>
    <small>(<a href="/ubuntu/warty/+source/mozilla-firefox/+packaging">update</a>)</small>
  </ul>

The user can also download the files for the "currentrelease" (last
published version) if they are available:

  >>> print find_tag_by_id(browser.contents, 'files')
  <div id="files">
    <ul class="download">
      <li>
        <a href="http://localhost:58000/3/firefox-0.9.2.orig.tar.gz">firefox-0.9.2.orig.tar.gz</a>
      (9.5 MiB)
      </li>
    </ul>
  </div>

This page also provides links to the binary packages generated by this
source in a specfic architecture:

  >>> print find_tag_by_id(browser.contents, 'binaries')
  <div id="binaries">
    <ul>
      <li>
        mozilla-firefox
        <span>
        (<a href="../../i386/mozilla-firefox">i386</a>)</span>
      </li>
    </ul>
  </div>

Let's check the link to the binary package built on i386 architecture,
a DistroArchReleaseBinaryPackage:

  >>> browser.getLink("i386").click()
  >>> browser.url
  'http://localhost/ubuntu/warty/i386/mozilla-firefox'

More information about this page can be found at
17-distroarchrelease-binpackages.txt.

Move back to the SourcePackage page to continue the tests:

  >>> browser.open(
  ...     'http://localhost/ubuntu/warty/+source/mozilla-firefox')


PackageRelationships, 'builddepends' & 'builddependsindep', for the
source in question are provided is this page:

  >>> depends_section = find_tag_by_id(browser.contents, 'depends')

  >>> parse_relationship_section(str(depends_section))
  TEXT: "gcc-3.4 (&gt;= 3.4.1-4sarge1)"
  TEXT: "gcc-3.4 (&lt;&lt; 3.4.2)"
  TEXT: "gcc-3.4-base"
  TEXT: "libc6 (&gt;= 2.3.2.ds1-4)"
  TEXT: "libstdc++6-dev (&gt;= 3.4.1-4sarge1)"
  LINK: "pmount" -> http://localhost/ubuntu/warty/+package/pmount

  >>> dependsindep_section = find_tag_by_id(browser.contents, 'dependsindep')

  >>> parse_relationship_section(str(dependsindep_section))
  TEXT: "bacula-common (= 1.34.6-2)"
  TEXT: "bacula-director-common (= 1.34.6-2)"
  LINK: "pmount" -> http://localhost/ubuntu/warty/+package/pmount
  TEXT: "postgresql-client (&gt;= 7.4)"


The '+changelog' page provides an aggregation of the changelogs for
SourcePackageReleases published in this DistroRelease.

The text is generated automatically by appending:

{{{
  SOURCENAME (VERSION) UPLOADDISTRORELEASE; urgency=URGENCY

  CHANGELOG

  -- UPLOADER-RFC-822 TIMESTAMP
}}}

for each published version.

  >>> browser.getLink("View changelog").click()
  >>> browser.url
  'http://localhost/ubuntu/warty/+source/mozilla-firefox/+changelog'

  >>> print find_tag_by_id(browser.contents, 'changelog')
  <pre id="changelog">
  Mozilla dummy Changelog......
  <BLANKLINE>
  Mozilla dummy Changelog......
  <BLANKLINE>
  <BLANKLINE>
  </pre>


Back to the SourcePackage page:

  >>> browser.open(
  ...     'http://localhost/ubuntu/warty/+source/mozilla-firefox')

We can visit a specific published release of "mozilla-firefox", this
page is provided by an DistroReleaseSourcePackageRelease instance:

  >>> browser.getLink("mozilla-firefox 0.9").click()
  >>> browser.url
  'http://localhost/ubuntu/warty/+source/mozilla-firefox/0.9'

There we can see the respective 'changelog' content for this version:

  >>> print find_tag_by_id(browser.contents, 'changelog')
  <div id="changelog">
    <pre>Mozilla dummy Changelog......</pre>
  </div>

With the possibility to download the entire changesfile (if available):

  >>> print find_tag_by_id(browser.contents, 'changesfile')
  <div id="changesfile">
    <p>
      <a href="http://localhost:58000/52/mozilla-firefox_0.9_i386.changes">
         View changesfile
      </a>
    </p>
  </div>

And also download the files contained in this source, like '.orig',
'.diff' and the DSC:

  >>> print find_tag_by_id(browser.contents, 'files')
  <div id="files">
    <ul class="download">
      <li>
        <a href="http://localhost:58000/3/firefox-0.9.2.orig.tar.gz">firefox-0.9.2.orig.tar.gz</a>
        (9.5 MiB)
      </li>
    </ul>
  </div>

Let's check how the page behaves if we no files are present:

  >>> browser.open(
  ...     'http://launchpad.dev/ubuntu/hoary/+source/cnews')
  >>> browser.getLink("cnews cr.g7-37").click()

A string is presented in both 'changesfile' and 'files' sections,
warning the user that no file is available:

  >>> print find_tag_by_id(browser.contents, 'changesfile')
  <div id="changesfile">
    <p>No changesfile available.</p>
  </div>

  >>> print find_tag_by_id(browser.contents, 'files')
  <div id="files">
    <p>No files available for download.</p>
  </div>
