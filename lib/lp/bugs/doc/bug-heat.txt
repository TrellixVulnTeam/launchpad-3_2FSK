Calculating bug heat
====================

Launchpad bugs each have a 'hotness' rating. This is an indicator of how
problematic a given bug is to the community and can be used to determine
which bugs should be tackled first.

A new bug will have a hotness of zero.

    >>> from lp.testing.factory import LaunchpadObjectFactory

    >>> factory = LaunchpadObjectFactory()
    >>> bug_owner = factory.makePerson()
    >>> bug = factory.makeBug(owner=bug_owner)
    >>> bug.hotness
    0


The BugHeatCalculator class
---------------------------

To calculate the heat for a particular bug, we use the BugHeatCalculator
class. This class contains all the methods necessary to get the heat for
a particular bug.

    >>> from lp.bugs.scripts.bugheat import BugHeatCalculator
    >>> bug_heat_calculator = BugHeatCalculator(bug)

BugHeatCalculator has a number of private methods, each of which is
called in turn to get the heat generated by one of the bug's attributes.


BugHeatCalculator._getHeatFromDuplicates():
------------------------------------------

Each time a bug is duplicated its heat increases. The heat generated by
duplicates is calculated using _getHeatFromDuplicates().
_getHeatFromDuplicates() will return 0 for a bug with no duplicates.

    >>> bug_heat_calculator._getHeatFromDuplicates()
    0

The heat generated by duplicates is n*6, where n is the number of
duplicates that the bug has. With one duplicate,
_getHeatFromDuplicates() will return 6.

We need to use a transaction here because _getHeatFromDuplicates() uses
the bug's number_of_duplicates attribute, which is updated by a database
trigger when a new duplicate is added.

    >>> import transaction

    >>> dupe = factory.makeBug()
    >>> dupe.duplicateof = bug
    >>> transaction.commit()

    >>> bug_heat_calculator._getHeatFromDuplicates()
    6

With 5 duplicates, _getHeatFromDuplicates() will return 30.

    >>> for i in range(4):
    ...     dupe = factory.makeBug()
    ...     dupe.duplicateof = bug
    >>> transaction.commit()

    >>> bug_heat_calculator._getHeatFromDuplicates()
    30


BugHeatCalculator._getHeatFromAffectedUsers()
---------------------------------------------

The number of users affected by a bug also generates heat. The heat
generated is returned by BugHeatCalculator._getHeatFromAffectedUsers()
as n*4, where n is the number of affected users.

The heat returned by _getHeatFromAffectedUsers() for our bug will be 4,
since there is one affected user - the person who filed the bug.

    >>> bug_heat_calculator._getHeatFromAffectedUsers()
    4

Adding some more affected users will increase the bug's heat.

    >>> for i in range(4):
    ...     user = factory.makePerson()
    ...     bug.markUserAffected(user)
    >>> transaction.commit()

    >>> bug_heat_calculator._getHeatFromAffectedUsers()
    20


BugHeatCalculator._getHeatFromSubscribers()
-------------------------------------------

The number of subscribers a bug has generates heat, too. This heat is
calculated by BugHeatCalculator._getHeatFromSubscribers() and is
returned as n*2, where n is the number of subscribers the bug has.

The number of subscribers includes those subscribed to duplicates of the
bug. In the case of our bug, therefore, the initial subscriber-generated
heat will be 12 because there are six subscribers: the bug owner and
five subscribers-from-duplicates.

Note that indirect subscribers (assignees, structural subscribers, etc.)
aren't included when generating heat.

    >>> bug_heat_calculator._getHeatFromSubscribers()
    12

Adding some subscribers will increase the bug's heat.

    >>> for i in range(3):
    ...     user = factory.makePerson()
    ...     bug.subscribe(user, user)
    <BugSubscription...
    <BugSubscription...
    <BugSubscription...

    >>> bug_heat_calculator._getHeatFromSubscribers()
    18


BugHeatCalculator._getHeatFromPrivacy()
---------------------------------------

BugHeatCalculator._getHeatFromPrivacy() returns the heat generated by
the bug's private attribute. If the bug is public, this will be 0.

    >>> bug_heat_calculator._getHeatFromPrivacy()
    0

However, if the bug is private, _getHeatFromPrivacy() will return 150.

    >>> bug.setPrivate(True, bug_owner)
    True

    >>> bug_heat_calculator._getHeatFromPrivacy()
    150


BugHeatCalculator._getHeatFromSecurity()
----------------------------------------

BugHeatCalculator._getHeatFromSecurity() returns the heat generated by
the bug's security_related attribute. If the bug is not security
related, _getHeatFromSecurity() will return 0.

    >>> bug_heat_calculator._getHeatFromSecurity()
    0

If, on the other hand, the bug is security_related,
_getHeatFromSecurity() will return 250.

    >>> bug.security_related = True
    >>> bug_heat_calculator._getHeatFromSecurity()
    250


The BugHeatUpdater class
---------------------------

In order to calculate bug heat we need to use the BugHeatUpdater
class, which is designed precisely for that task.

    >>> from lp.bugs.scripts.bugheat import BugHeatUpdater
    >>> from canonical.launchpad.scripts import FakeLogger

    >>> bug_heat_updater = BugHeatUpdater(transaction, logger=FakeLogger)
