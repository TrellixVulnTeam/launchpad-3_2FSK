= Branch merge proposals =

Branch merge proposals are a way to show intent of one branch to land
code on another branch.  The database object is called a merge proposal
as it has a source branch and a target branch, but when looking at
branch merge proposals through the UI we are looking from a particular
context, and as such they are referred to as landing targets or landing
candidates.

  Landing Targets - these are the branches (or the merge proposals) for
  which the branch that is being looked at is the source branch.  It is
  called that due to the idea that the target branch is where the code
  intentds to 'land' or 'merge'.

  Landing Candidates - these are the branches (or the merge proposals)
  that want to land on the branch being looked at.

Branch merge proposals are created by calling the `addLandingTarget`
method on a branch.  Junk branches cannot have landing targets.

  * The target branch and dependent branch (if it has one) must both
    have the same product as the source branch.

  * There must not already exist a branch merge proposal for the source
    branch and target branch pair.


== Registering a landing target ==

All merge proposals have to be registered by a Person.

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.interfaces import (
    ...     IBranchSet, IBranchMergeProposalSet, IPersonSet)
    >>> person_set = getUtility(IPersonSet)
    >>> sample_person = person_set.getByEmail('test@canonical.com')

In order to register a merge proposal there has to be a source branch
and a target branch.

    >>> branch_set = getUtility(IBranchSet)
    >>> source_branch = branch_set.getByUniqueName(
    ...     '~name12/gnome-terminal/klingon')
    >>> target_branch = branch_set.getByUniqueName(
    ...     '~name12/gnome-terminal/main')

    >>> merge_proposal = source_branch.addLandingTarget(
    ...     sample_person, target_branch, None)

This merge proposal is now listing against both the source and target
branches.

    >>> for proposal in source_branch.landing_targets:
    ...     print proposal.target_branch.unique_name
    ~name12/gnome-terminal/main

    >>> for proposal in target_branch.landing_candidates:
    ...     print proposal.source_branch.unique_name
    ~name12/gnome-terminal/klingon


== Interfaces ==

The BranchMergeProposal must implement the IBranchMergeProposal interface.

    >>> from zope.interface.verify import verifyObject
    >>> from canonical.launchpad.interfaces import IBranchMergeProposal
    >>> verifyObject(IBranchMergeProposal, merge_proposal)
    True
    >>> verifyObject(IBranchMergeProposalSet, branch_merge_proposal_set)
    True


== Canonical URL ==

The URL of a branch merge proposal is based on the source branch.
In order to keep the URL managable, the database ID of the merge
proposal is used.

    >>> login('test@canonical.com')
    >>> from canonical.launchpad.webapp import canonical_url
    >>> url = canonical_url(merge_proposal)
    >>> url[url.rfind('/')+1:] == str(merge_proposal.id)
    True
    >>> print url
    http://code.launchpad.dev/~name12/gnome-terminal/klingon/+merge/...


== Creation constraints ==

The BranchMergeProposalSet.new method raises exceptions for invalid parameters.

    >>> junk_branch = branch_set.getByUniqueName('~name12/+junk/junk.dev')
    >>> branch_merge_proposal_set.new(
    ...     sample_person, junk_branch, target_branch)
    Traceback (most recent call last):
    ...
    InvalidBranchMergeProposal: Junk branches cannot be used as source branches.

    >>> branch_merge_proposal_set.new(
    ...     sample_person, source_branch, junk_branch)
    Traceback (most recent call last):
    ...
    InvalidBranchMergeProposal: Junk branches cannot be used as target branches.

    >>> branch_merge_proposal_set.new(
    ...     sample_person, source_branch, source_branch)
    Traceback (most recent call last):
    ...
    InvalidBranchMergeProposal: Source and target branches must be different.

    >>> firefox_branch = branch_set.getByUniqueName('~name12/firefox/main')
    >>> branch_merge_proposal_set.new(
    ...     sample_person, firefox_branch, target_branch)
    Traceback (most recent call last):
    ...
    InvalidBranchMergeProposal: The source branch and target branch must be
    branches of the same project.
