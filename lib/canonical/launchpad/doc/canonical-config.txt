= Canonical Config =

`canonical.config` provides singleton access to the Launchpad
configuration, accessed via the `config` module global. It is
responsible for loading the Launchpad schema and the environment's
correct config.


== CanonicalConfig AKA config ==

CanonicalConfig is a singleton that manages access to the config.
Cached copies are kept in thread locals ensuring the configuration
is thread safe (not that this will be a problem if we stick with
simple configuration).

    >>> from canonical.config import config
    >>> print config.database.dbhost
    localhost
    >>> config.database.db_statement_timeout is None
    True
    >>> config.launchpad.dbuser
    'launchpad'
    >>> config.librarian.dbuser
    'librarian'
    >>> config.librarian.upload_host
    'localhost'
    >>> config.librarian.upload_port
    59090
    >>> config.librarian.download_host
    'localhost'
    >>> config.librarian.download_port
    58000

Configs are kept from the 'configs' directory.

    >>> import os.path, canonical
    >>> os.path.join(config.root, 'lib', 'canonical') == os.path.dirname(
    ...     canonical.__file__)
    True

CanonicalConfig loads the conf file from the directory that matches its
instance_name. The instance name is often the same as the LPCONFIG
environment variable (scripts can override this using setInstance()). It
will choose the conf file that matches its process_name if it exists,
otherwise it loads launchpad-lazr.conf. The general rule is
configs/<instance_name>/<process_name>.conf. The testrunner sets the
instance_name to 'testrunner' to select testrunner/launchpad-lazr.conf,
which extends default/launchpad-lazr.conf.

    >>> config.instance_name
    'testrunner'
    >>> config.process_name
    'test'

    >>> config.filename
    '.../configs/testrunner/launchpad-lazr.conf'
    >>> config.extends.filename
    '.../configs/default/launchpad-lazr.conf'

CanonicalConfig provides __contains__ and __getitem__ to check and
access lazr.config sections and keys.

    >>> 'launchpad' in config
    True

    >>> config['launchpad']['default_batch_size']
    5


== Transition from ZConfig to LAZR ==

XXX sinzui 2008-02-11: This feature must be removed when all
launchpad callsites use lazr.config.

During the transition from `ZConfig` to `canonical.lazr.config`,
`canonical.config` will load both config systems. When the
section and key are not found in the lazr.config instance,
canonical.config will failover to the ZConfig instance.


=== There are three states that govern the returned value ===

There are three states that `canonical.config` recognizes:

1. When the section or key does not exist in either ZConfig or
lazr.config, an error is raised. This state implies that the callsite
was updated to lazr.config, but there is an error with the callsite
or the schema. Neither the lazr.config or the ZConfig instances have
a value for answertracker.bad_key. An AttributeError is raised stating
the fact.

Note that the ZConfig instance is stored in config._cache, while the
lazr.config instance is stored in config._config.

    >>> config._config.answertracker['bad_key']
    Traceback (most recent call last):
      ...
    KeyError: 'bad_key'

    >>> config._cache.testrunner.answertracker.bad_key
    Traceback (most recent call last):
     ...
    AttributeError: SectionValue instance has no attribute 'bad_key'

    >>> config.answertracker.bad_key
    Traceback (most recent call last):
     ...
    AttributeError: ZConfig or lazr.config instances have no attribute
    answertracker.bad_key.

2. When the key is found in the lazr.config instance, the
lazr.config value is returned. It is assumed that the callsite
was updated to lazr.conf. For example, The lazr.config schema has
a database category, and the ZConfig does not.

    >>> config._config.launchpad_session.cookie
    'launchpad_tests'

    >>> config._cache.testrunner.launchpad_session.cookie
    Traceback (most recent call last):
     ...
    AttributeError: SectionValue instance has no attribute 'launchpad_session'

    >>> config.launchpad_session.cookie
    'launchpad_tests'

3. When the key is found in ZConfig, only, the ZConfig value is
returned. The key was probably a ZConfig section; lazr.config does not
support multi-sections. For example, the ZConfig instance has nested
launchpad_session as sesson in launchpad: 'launchpad.session.dbuser'.

    >>> config._config.launchpad['session'].dbuser
    Traceback (most recent call last):
      ...
    KeyError: 'session'

    >>> config._cache.testrunner.launchpad.session.dbuser
    'session'

    >>> config.launchpad.session.dbuser
    'session'


=== UnconvertedConfigWarning ===

To support the developer, migrating to lazr.config, warnings can
be emitted when ZConfig values are returned. When the
ENABLE_DEPRECATED_ZCONFIG_WARNINGS is set to true in the
environment, a warning is raised when canonical.config fails over
to ZConfig.

Note, the testrunner treats all warnings as errors, so we can
test this by by checking for a traceback. Adding:

{{{
import warnings
warnings.filterwarnings('default', '.*', UnconvertedConfigWarning)
}}}

will show all the warning emitted after the test completes.

Repeating the test for state 3, when the key is only found in ZConfig, a
warning is emitted to state that the callsite requested a non-existent
key.

    >>> import os
    >>> os.environ['ENABLE_DEPRECATED_ZCONFIG_WARNINGS'] = 'true'

    >>> config.launchpad.session.dbuser
    Traceback (most recent call last):
     ...
    UnconvertedConfigWarning: Callsite requests a nonexistent key:
    'launchpad.session'.

    >>> os.environ['ENABLE_DEPRECATED_ZCONFIG_WARNINGS'] = 'false'


== Working with test configurations ==

Tests can update the config with test data. For example, the domain
can be changed for a feature.

    >>> from textwrap import dedent
    >>> test_data = dedent("""
    ...     [answertracker]
    ...     email_domain: answers.launchpad.dev""")
    >>> config.push('test_data', test_data)
    >>> config.answertracker.email_domain
    'answers.launchpad.dev'

And the test can remove the data when it is done to restore the config.

    >>> config.pop('test_data')
    (<canonical.lazr.config.ConfigData ...>,)
    >>> config.answertracker.email_domain
    'answers.launchpad.net'


== Selecting the conf file with instance and process names ==

The name of the conf file, and the directory from which is resides,
is controlled by the config's process_name and instance_name. These
may be set by their corresponding methods, *before* accessing the
config, to set where the config values are loaded from. After the
config is loaded, changing the instance and process names will have
no affect.

Setting just the instance_name will change the directory from which the
conf file is loaded.

    # We must reset the lazr.config instance to test this.
    >>> config._config = None

    >>> config.setInstance('default')
    >>> config.instance_name
    'default'

    >>> config.filename
    '.../configs/default/launchpad-lazr.conf'
    >>> config.extends.filename
    '.../canonical/config/schema-lazr.conf'

    >>> config.answertracker.days_before_expiration
    15

Changing the instance_name and process_name changes the directory and
conf file name that is loaded.

    >>> config._config = None

    >>> config.setInstance('testrunner')
    >>> config.instance_name
    'testrunner'

    >>> config.setProcess('test-process')
    >>> config.process_name
    'test-process'

    >>> config.filename
    '.../configs/testrunner/test-process-lazr.conf'
    >>> config.extends.filename
    '.../configs/testrunner/launchpad-lazr.conf'

    >>> config.answertracker.days_before_expiration
    30

The default 'launchpad-lazr.conf' is loaded if no conf files match
the process's name.

    >>> config._config = None

    >>> config.setInstance('testrunner')
    >>> config.instance_name
    'testrunner'

    >>> config.setProcess('test_no_conf')
    >>> config.process_name
    'test_no_conf'

    >>> config.filename
    '.../configs/testrunner/launchpad-lazr.conf'
    >>> config.extends.filename
    '.../configs/default/launchpad-lazr.conf'

    >>> config.answertracker.days_before_expiration
    15

The initial instance_name is set via the LPCONFIG environment variable.
Because Config is designed to failover to the default development
environment, and the testrunner overrides the environment and config,
we need to reconfigure the environment and reload the canonical.config
module to test CanonicalConfig's behaviour.

    >>> true_config = config
    >>> import os
    >>> from canonical.config import LPCONFIG, DEFAULT_SECTION
    >>> os.environ[LPCONFIG] = 'staging'
    >>> os.environ[DEFAULT_SECTION] = 'default'

    # reload the CanonicalConfig class object.
    >>> config_module = reload(canonical.config)
    >>> from canonical.config import config

    >>> config.filename
    '.../configs/staging/launchpad-lazr.conf'
    >>> config.extends.filename
    '.../configs/staging-lazr.conf'
    >>> config.database.dbname
    'launchpad_staging'

And the staging ZConfig (that is deprecated) is also selected.

    >>> config.dbname
    'launchpad_staging'
    >>> config._cache.default
    <SectionValue for canonical 'default'>
    >>> config._cache.testrunner
    Traceback (most recent call last):
     ...
    AttributeError: 'zope.thread.local' object has no attribute 'testrunner'

We need to reset the config for the testrunner.

    >>> config = true_config
    >>> canonical.config.config = config
    >>> config.filename
    '.../configs/testrunner/launchpad-lazr.conf'
    >>> config.dbname
    'launchpad_ftest'
    >>> config._cache.testrunner
    <SectionValue for canonical 'testrunner'>

