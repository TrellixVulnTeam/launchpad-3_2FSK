= Profiling support =

Launchpad supports three modes of profiling.

== Profiling requests in pagetests ==

Our testing framework has support for profiling requests made in
pagetests.  When the PROFILE_PAGETESTS_REQUESTS environment variable is
set, it will save profiling information in the file specified in that
variable.

The pagetests profiler is created by the layer during its setUp.

    >>> from canonical.testing.layers import PageTestLayer

(Save the existing configuration.)

    >>> import os
    >>> import tempfile

    >>> old_profile_environ = os.environ.get(
    ...     'PROFILE_PAGETESTS_REQUESTS', '')

    >>> pagetests_profile_dir = tempfile.mkdtemp(prefix='pagetests_profile')
    >>> pagetests_profile = os.path.join(
    ...     pagetests_profile_dir, 'pagetests.prof')
    >>> os.environ['PROFILE_PAGETESTS_REQUESTS'] = pagetests_profile

    >>> PageTestLayer.setUp()
    >>> PageTestLayer.profiler
    <...Profile...>
    >>> len(PageTestLayer.profiler.getstats())
    0

The layer also replaces the standard HTTPCaller.__call__ by a wrapper
that takes care of profiling (among other things).

    >>> from zope.app.testing.functional import HTTPCaller

    # We need to close the default interaction.
    >>> logout()

    >>> http = HTTPCaller()
    >>> response = http('GET / HTTP/1.0')
    >>> profile_count = len(PageTestLayer.profiler.getstats())
    >>> profile_count > 0
    True

Requests made with a testbrowser will also be profiled.

    >>> from zope.testbrowser.testing import Browser
    >>> browser = Browser()
    >>> browser.open('http://launchpad.dev/')
    >>> len(PageTestLayer.profiler.getstats()) > profile_count
    True

Once the layer finishes, it saves the profile data in the requested file.

    >>> PageTestLayer.tearDown()
    >>> import pstats2
    >>> stats = pstats2.Stats(pagetests_profile)
    >>> os.remove(pagetests_profile)

When the environment isn't set, no profile is created.

    >>> del os.environ['PROFILE_PAGETESTS_REQUESTS']

    >>> PageTestLayer.setUp()
    >>> print PageTestLayer.profiler
    None

And no stats file is written when the layer is tore down.

    >>> PageTestLayer.tearDown()
    >>> os.path.exists(pagetests_profile)
    False


== Profiling request in the app server ==

It is also possible to get a profile of each request served by the app
server.

This is controlled by the [profiling] config section. Profiling is
controlled by the profile_requests configuration variable. When this is
True, each request will create a pstats file for the request in the
directory specified in the profile_dir variable.

By default profiling is turned off.

    >>> from canonical.config import config
    >>> config.profiling.profile_requests
    False

(Set the profile directory.)

    >>> from textwrap import dedent
    >>> profile_dir = tempfile.mkdtemp(prefix='profile')
    >>> config.push('profile_dir', dedent("""
    ...     [profiling]
    ...     profile_dir: %s""" % profile_dir))

So when making a request, no profile information is created.

    >>> response = http('GET / HTTP/1.0')

    >>> list(os.listdir(profile_dir))
    []

But if profiling is turned on, profiling data will be created in the
directory for the request.

    >>> config.push('profile_on', dedent("""\
    ...     [profiling]
    ...     profile_requests: True"""))

    >>> response = http('GET / HTTP/1.0')

The profile is named on the time of the request start, the pageid, and
the thread that processed it.

    >>> profiles = os.listdir(profile_dir)
    >>> print "\n".join(profiles)
    20...-RootObject:index.html-MainThread.prof

These profile can be loaded using the pstats2 module.

    >>> import pstats2
    >>> stats = pstats2.Stats(os.path.join(profile_dir, profiles[0]))

Making another request will create another profile.

    >>> response = http('GET / HTTP/1.0')

    >>> profiles = os.listdir(profile_dir)
    >>> print "\n".join(profiles)
    20...-RootObject:index.html-MainThread.prof
    20...-RootObject:index.html-MainThread.prof


== Profiling scripts ==

All scripts derived from LaunchpadScript support a --profile option.
The profile data is saved in the argument when the program exits.

    >>> from canonical.launchpad.scripts.base import LaunchpadScript
    >>> class ProfiledScript(LaunchpadScript):
    ...     def main(self):
    ...         pass
    ...     def _init_zca(self, use_web_security):
    ...         pass
    ...     def _init_db(self, implicit_begin, isolation):
    ...         pass

    >>> profile_file = os.path.join(profile_dir, 'myscript.prof')
    >>> script = ProfiledScript(
    ...     'test-script.py', test_args=[
    ...         'test-script.py', '--profile', profile_file])

    >>> script.run()
    >>> stats = pstats2.Stats(profile_file)


== Clean up ==

    >>> import shutil

    >>> os.environ['PROFILE_PAGETESTS_REQUESTS'] = old_profile_environ

    >>> shutil.rmtree(pagetests_profile_dir)
    >>> shutil.rmtree(profile_dir)

    >>> old_config = config.pop('profile_dir')
