In order to prepare the tests below some initialization is required.

    >>> from lp.archiveuploader.nascentupload import NascentUpload
    >>> from lp.archiveuploader.tests import (
    ...     datadir, getPolicy, mock_logger_quiet)
    >>> from canonical.database.sqlbase import commit
    >>> from canonical.launchpad.interfaces import (
    ...     ArchivePermissionType, IArchivePermissionSet, IPackagesetSet,
    ...     IPersonSet, ISourcePackageNameSet)
    >>> from canonical.testing import LaunchpadZopelessLayer

    >>> insecure_policy = getPolicy(
    ...     name='insecure', distro='ubuntu', distroseries='hoary')
    >>> ap_set = getUtility(IArchivePermissionSet)
    >>> name16 = getUtility(IPersonSet).getByName('name16')
    >>> bar_name = getUtility(ISourcePackageNameSet).getOrCreateByName("bar")
    >>> commit()

Let's modify the current ACL rules for ubuntu, moving the upload
rights to all components from 'ubuntu-team' to 'mark':

    >>> LaunchpadZopelessLayer.switchDbUser('launchpad')
    >>> from canonical.launchpad.database import ArchivePermission
    >>> new_uploader = getUtility(IPersonSet).getByName('mark')
    >>> for permission in ArchivePermission.select():
    ...     permission.person = new_uploader
    ...     permission.syncUpdate()
    >>> commit()
    >>> LaunchpadZopelessLayer.switchDbUser('uploader')

This time the upload will fail because the ACLs don't let
"name16", the key owner, upload a package.

    >>> bar_failed = NascentUpload(
    ...     datadir('suite/bar_1.0-1/bar_1.0-1_source.changes'),
    ...     insecure_policy, mock_logger_quiet)

    >>> bar_failed.process()
    >>> bar_failed.is_rejected
    True
    >>> print bar_failed.rejection_message
    The signer of this package has no upload rights to this distribution's
    primary archive.  Did you mean to upload to a PPA?


We can grant selective, package set based upload permissions to the user
in order to facilitate uploads.

    >>> commit()
    >>> LaunchpadZopelessLayer.switchDbUser('launchpad')
    >>> import operator
    >>> def print_permission(result_set):
    ...     for perm in result_set.order_by(
    ...         'person, permission, packageset, explicit'):
    ...         person = perm.person.name
    ...         pset = perm.packageset.name
    ...         if perm.permission == ArchivePermissionType.UPLOAD:
    ...             permission = 'UPLOAD'
    ...         elif perm.permission == ArchivePermissionType.QUEUE_ADMIN:
    ...             permission = 'QUEUE_ADMIN'
    ...         else:
    ...             permission = '???'
    ...         if perm.explicit == True:
    ...             ptype = 'explicit'
    ...         else:
    ...             ptype = 'implicit'
    ...         print(
    ...             '%12s: %18s -> %20s (%s)'
    ...             % (person, pset, permission, ptype))

name16 does not have any package set based upload permissions for 'bar'
at present.

    >>> from canonical.launchpad.interfaces import IDistributionSet
    >>> ubuntu = getUtility(IDistributionSet)['ubuntu']
    >>> ubuntu_archive = ubuntu.main_archive
    >>> print_permission(
    ...     ap_set.packagesetsForSourceUploader(
    ...         ubuntu_archive, 'bar', name16))

Now put in place a package set, add 'bar' to it and define a permission
for the former.

    >>> commit()
    >>> LaunchpadZopelessLayer.switchDbUser('launchpad')

    >>> def sort_by_id(iterable):
    ...     return sorted(iterable, key=operator.attrgetter('id'))
    >>> def print_data(iterable):
    ...     for datum in sort_by_id(iterable):
    ...          print('%3d -> %s' % (datum.id, datum.name))

    >>> ps_set = getUtility(IPackagesetSet)
    >>> foo_ps = ps_set.new(
    ...     u'foo-pkg-set', u'Packages that require special care.', name16)
    >>> commit()

Add 'bar' to the 'foo' package set.

    >>> foo_ps.add((bar_name,))

Now 'bar' is included by the 'foo' package set.
    >>> print_data(
    ...     ps_set.setsIncludingSource('bar',
    ...     direct_inclusion=True))
      1 -> foo-pkg-set

name16 has no package set based upload privileges for 'bar' yet.

    >>> ap_set.isSourceUploadAllowed(ubuntu_archive, 'bar', name16)
    False

Now we define a permission for name16 to upload to the 'foo' package set.

    >>> ignore_this = ap_set.newPackagesetUploader(
    ...     ubuntu_archive, name16, foo_ps)
    >>> print_permission(
    ...     ap_set.packagesetsForSourceUploader(
    ...         ubuntu_archive, 'bar', name16))
          name16:   foo-pkg-set ->               UPLOAD (implicit)

And, voila, name16 has a package set based upload authorization for 'bar'.

    >>> ap_set.isSourceUploadAllowed(ubuntu_archive, 'bar', name16)
    True

With the authorization above the upload should work again.

    >>> commit()
    >>> LaunchpadZopelessLayer.switchDbUser('uploader')
    >>> bar2 = NascentUpload(
    ...     datadir('suite/bar_1.0-1/bar_1.0-1_source.changes'),
    ...     insecure_policy, mock_logger_quiet)
    >>> bar2.process()
    >>> bar2.is_rejected
    False

    >>> print bar2.rejection_message

