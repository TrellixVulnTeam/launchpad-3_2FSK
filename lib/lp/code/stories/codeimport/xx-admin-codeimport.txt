= Adminstrating code imports =

The code import details are displayed on the main branch page for
imported branches.  If the logged in user is an import operator
(member of VCS imports or Launchpad admin) then they can see a link
to edit the details.

    >>> from canonical.launchpad.ftests import ANONYMOUS, login, logout
    >>> login('test@canonical.com')

    >>> svn_import = factory.makeCodeImport(
    ...     svn_branch_url='svn://svn.example.com/fooix/trunk')
    >>> from canonical.launchpad.webapp import canonical_url
    >>> svn_import_location = str(canonical_url(svn_import.branch))
    >>> svn_import_branch_unique_name = svn_import.branch.unique_name

    >>> cvs_import = factory.makeCodeImport(
    ...     cvs_root=":pserver:anonymous@cvs.example.com:/fooix",
    ...     cvs_module="fooix")
    >>> cvs_import_location = str(canonical_url(cvs_import.branch))
    >>> cvs_import_branch_unique_name = cvs_import.branch.unique_name

    >>> git_import = factory.makeCodeImport(
    ...     git_repo_url="git://git.example.org/fooix")
    >>> git_import_location = str(canonical_url(git_import.branch))
    >>> git_import_branch_unique_name = git_import.branch.unique_name

    >>> hosted_branch = factory.makeAnyBranch()
    >>> hosted_branch_location = str(canonical_url(hosted_branch))
    >>> logout()

    >>> import_browser = setupBrowser(
    ...     auth='Basic david.allouche@canonical.com:test')


== Import details on the branch page ==

Imported branches have a section with the title "Import details".
In this section the review state of the import is shown, along with
the location of the import.

People that are not VCS Imports members, nor Launchpad administrators
do not get an Edit link.

    >>> def print_import_details(browser):
    ...     div = find_tag_by_id(
    ...         browser.contents, 'branch-import-details').div.div
    ...     print extract_text(div)
    >>> anon_browser.open(svn_import_location)
    >>> print_import_details(anon_browser)
    Import Status: Pending Review
    This branch is an import of the Subversion branch
    from svn://svn.example.com/fooix/trunk.

Because it's an svn:// URL, it doesn't get linkified:

    >>> anon_browser.getLink("svn://svn.example.com/fooix/trunk")
    Traceback (most recent call last):
    ...
    LinkNotFoundError

Both VCS Imports members and Launchpad administrators can edit the
import, though:

    >>> import_browser.open(svn_import_location)
    >>> print_import_details(import_browser)
    Import Status: Pending Review
    This branch is an import of the Subversion branch
    from svn://svn.example.com/fooix/trunk.


== Editing details ==

There are a number of buttons shown on the editing page for
import operators.

    >>> import_browser.getLink('Edit import source or review import').click()
    >>> print_submit_buttons(import_browser.contents)
    Update
    Approve
    Mark Invalid
    Suspend
    Mark Failing

A cancel link is also shown next to the buttons, that takes the user
back to the main branch details page.

    >>> import_browser.getLink('Cancel').url == svn_import_location
    True

Only the fields that are relevant to the type of import are shown
in the form.

    >>> def print_form_fields(browser):
    ...     tags = find_tags_by_class(browser.contents, 'textType')
    ...     for tag in tags:
    ...         print '%s: %s' % (tag['name'], tag['value'])

    >>> print_form_fields(import_browser)
    field.svn_branch_url: svn://svn.example.com/fooix/trunk

    >>> import_browser.open(cvs_import_location)
    >>> import_browser.getLink('Edit import source or review import').click()
    >>> print_form_fields(import_browser)
    field.cvs_root: :pserver:anonymous@cvs.example.com:/fooix
    field.cvs_module: fooix

    >>> import_browser.open(git_import_location)
    >>> import_browser.getLink('Edit import source or review import').click()
    >>> print_form_fields(import_browser)
    field.git_repo_url: git://git.example.org/fooix

=== Editing the import location ===

The +edit-import page allows the import operator to edit the location
an import is from.

This is true for Subversion imports,

    >>> import_browser.open(svn_import_location + '/+edit-import')
    >>> import_browser.getControl('Branch URL').value = \
    ...     'svn://svn-new.example.com/fooix/trunk'
    >>> import_browser.getControl('Update').click()
    >>> for message in get_feedback_messages(import_browser.contents):
    ...     print extract_text(message)
    The code import has been updated.

CVS imports,

    >>> import_browser.open(cvs_import_location + '/+edit-import')
    >>> import_browser.getControl('Repository').value = \
    ...     ':pserver:anonymous@cvs-new.example.com:/fooix'
    >>> import_browser.getControl('Module').value = \
    ...     'fooix2'
    >>> import_browser.getControl('Update').click()
    >>> for message in get_feedback_messages(import_browser.contents):
    ...     print extract_text(message)
    The code import has been updated.

and Git imports.

    >>> import_browser.open(git_import_location + '/+edit-import')
    >>> import_browser.getControl('Repo URL').value = \
    ...     'git://git-new.example.org/fooix'
    >>> import_browser.getControl('Update').click()
    >>> for message in get_feedback_messages(import_browser.contents):
    ...     print extract_text(message)
    The code import has been updated.


=== Approving an import ===

When a code import is approved, a pending job is created for it.

    >>> import_browser.open(svn_import_location + '/+edit-import')
    >>> import_browser.getControl('Approve').click()
    >>> print_import_details(import_browser)
    Import Status: Reviewed
    ...
    The next import is scheduled to run as soon as possible.

    >>> for message in get_feedback_messages(import_browser.contents):
    ...     print extract_text(message)
    The code import has been approved.


=== Invalidating an import ===

    >>> import_browser.getLink('Edit import source or review import').click()
    >>> import_browser.getControl('Mark Invalid').click()
    >>> print_import_details(import_browser)
    Import Status: Invalid
    ...
    >>> for message in get_feedback_messages(import_browser.contents):
    ...     print extract_text(message)
    The code import has been set as invalid.


=== Suspending an import ===

    >>> import_browser.getLink('Edit import source or review import').click()
    >>> import_browser.getControl('Suspend').click()
    >>> print_import_details(import_browser)
    Import Status: Suspended
    ...
    >>> for message in get_feedback_messages(import_browser.contents):
    ...     print extract_text(message)
    The code import has been suspended.


=== Marking an import as failing ===

    >>> import_browser.getLink('Edit import source or review import').click()
    >>> import_browser.getControl('Mark Failing').click()
    >>> print_import_details(import_browser)
    Import Status: Failed
    ...
    >>> for message in get_feedback_messages(import_browser.contents):
    ...     print extract_text(message)
    The code import has been marked as failing.


== Import details for a running job ==

If the job for an approved import is running, then the import details
says how long ago since it started.

    >>> import_browser.getLink('Edit import source or review import').click()
    >>> import_browser.getControl('Approve').click()
    >>> print_import_details(import_browser)
    Import Status: Reviewed
    ...
    The next import is scheduled to run as soon as possible.

Now set the job as running.

    >>> login('david.allouche@canonical.com')
    >>> from canonical.launchpad.testing.codeimporthelpers import (
    ...     get_import_for_branch_name, make_running_import)
    >>> code_import = get_import_for_branch_name(
    ...     svn_import_branch_unique_name)

Set the started time to 2h 20m ago, and the approximate datetime
should show this as 2 hours.

    >>> from datetime import datetime, timedelta
    >>> import pytz
    >>> date_started = datetime.now(pytz.UTC) - timedelta(hours=2, minutes=20)
    >>> code_import = make_running_import(
    ...     code_import, date_started=date_started, factory=factory,
    ...     logtail="Changeset 1\nChangeset 2")
    >>> logout()

    >>> import_browser.open(svn_import_location)
    >>> print_import_details(import_browser)
    Import Status: Reviewed
    ...
    An import is currently running on machine-..., and was started 2 hours
    ago.  The last few lines of the job's output were:
        Changeset 1
        Changeset 2


== Import details for a import that has been imported successfully ==

If a branch has been successfully imported in the past, then the date
that it was last successful is shown, as well as when the next import
will be run -- which is, by default for Subversion, six hours after the
last import completed, and so in this case in about three hours.

    >>> login('david.allouche@canonical.com')
    >>> from canonical.launchpad.testing.codeimporthelpers import (
    ...     make_finished_import)
    >>> date_finished = datetime(2007,9,10,12, tzinfo=pytz.UTC)
    >>> code_import = get_import_for_branch_name(
    ...     svn_import_branch_unique_name)
    >>> code_import = make_finished_import(code_import, factory=factory,
    ...                                    date_finished=date_finished)
    >>> logout()

    >>> import_browser.open(svn_import_location)
    >>> print_import_details(import_browser)
    Import Status: Reviewed
    This branch is an import of the Subversion branch from
        svn://svn-new.example.com/fooix/trunk.
    The next import is scheduled to run in 3 hours.
    Last successful import was on 2007-09-10.
    ...


== Requesting an import ==

If an import is waiting for its next update, any logged in user can
click a button to request an immediate import.

    >>> sample_person_browser = setupBrowser(
    ...     auth='Basic test@canonical.com:test')
    >>> sample_person_browser.open(import_browser.url)
    >>> sample_person_browser.getControl('Import Now')
    <SubmitControl ...>

Anonymous users cannot see this button.

    >>> anon_browser.open(import_browser.url)
    >>> anon_browser.getControl('Import Now')
    Traceback (most recent call last):
      ...
    LookupError: label 'Import Now'

If the logged in user clicks this button, the import will be scheduled
to run ASAP and the fact that the import has been requested is
displayed.

    >>> sample_person_browser.getControl('Import Now').click()
    >>> for msg in get_feedback_messages(sample_person_browser.contents):
    ...     print msg
    Import will run as soon as possible.
    >>> print_import_details(sample_person_browser)
    Import Status: Reviewed
    This branch is an import of the Subversion branch from
        svn://svn-new.example.com/fooix/trunk.
    The next import is scheduled to run as soon as possible (requested
    by Sample Person).
    Last successful import was on 2007-09-10.
    ...
