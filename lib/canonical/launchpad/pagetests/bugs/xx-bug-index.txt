= Bug report index page =

The bug index is the main page of a bug report. It contains all sorts of
interesting things related to fixing a problem: the bug description,
comments, external references, details of places in which this bug needs
to be fixed, and so forth.

    >>> anon_browser.open(
    ...     "http://launchpad.dev/debian/+source/mozilla-firefox/+bug/2")
    >>> anon_browser.title
    '...Blackhole Trash folder...'

The bug id in the upper left corner of the page is linked to the bug itself.

    >>> anon_browser.getLink('Bug #2').click()
    >>> print anon_browser.title
    Bug #2 in Tomcat:...Blackhole Trash folder...

The page features a table of places where people have asked for the bug
to be fixed. The row for the current context (and not any other row) is
highlighted.

    >>> anon_browser.open('http://launchpad.dev/firefox/+bug/1')
    >>> print anon_browser.contents
    <!DOCTYPE...
    ...
    ...<tr class="highlight" id="...">
    ...Mozilla Firefox...
    ...
    ...<tr>
    ...mozilla-firefox (Debian)...
    ...
    ...<tr>
    ...mozilla-firefox (Ubuntu)...
    ...
    >>> anon_browser.contents.count('<tr class="highlight"')
    1

    >>> anon_browser.open(
    ...     'http://launchpad.dev/debian/+source/mozilla-firefox/+bug/1')
    >>> print anon_browser.contents
    <!DOCTYPE...
    ...
    ...<tr>
    ...Mozilla Firefox...
    ...
    ...<tr class="highlight" id="...">
    ...mozilla-firefox (Debian)...
    ...
    ...<tr>
    ...mozilla-firefox (Ubuntu)...
    ...
    >>> anon_browser.contents.count('<tr class="highlight"')
    1

If the context is a distribution package, the package name has a
tooltip containing the package details.

    >>> print anon_browser.getLink('mozilla-firefox (Ubuntu)').attrs['title']
    Latest release: 0.9, uploaded to main on 2004-09-27 11:57:13+00:00...
    by Mark Shuttleworth (sabdfl), maintained by Mark Shuttleworth (sabdfl)

    >>> print anon_browser.getLink('mozilla-firefox (Debian)').attrs['title']
    No current release for this source package in Debian

(XXX 20080623 mpt: Projects and distributions should similarly have a tooltip
listing their latest release. <http://launchpad.net/bugs/242491>)

If you are logged in, each "Affects" row contains a form for editing the
status in that context. The forms are hidden initially using CSS.

    >>> user_browser.open(
    ...     "http://launchpad.dev/debian/+source/mozilla-firefox/+bug/2")
    >>> print user_browser.contents
    <!DOCTYPE...
    ...
    ...Tomcat...
    ...Save Changes...
    ...
    ...Ubuntu...
    ...Save Changes...
    ...
    ...mozilla-firefox (Debian)...
    ...Save Changes...
    ...
    ...Woody...
    ...Save Changes...

Alongside the form is a table displaying details about the context,
including the latest release if it is a distribution package.

    >>> user_browser.open(
    ...     "http://launchpad.dev/ubuntu/+source/mozilla-firefox/+bug/1")
    >>> print extract_text(find_tag_by_id(user_browser.contents, 'task17'))
    Affecting: mozilla-firefox (Ubuntu)
    Filed here by: Foo Bar
    When: 2004-01-17
    Assigned: 2005-01-17
    ...

The bug page ends with links to report another bug, and to list open
bugs.

    >>> user_browser.open('http://bugs.launchpad.dev/firefox/+bug/1')
    >>> related = find_tags_by_class(user_browser.contents, 'related')[0]
    >>> print extract_text(related)
    What next?...
    >>> print user_browser.getLink('Report another bug').url
    http://bugs.launchpad.dev/firefox/+filebug
    >>> print user_browser.getLink('List open bugs').url
    http://bugs.launchpad.dev/firefox/+bugs

    >>> user_browser.open(
    ...     'http://launchpad.dev/ubuntu/+source/mozilla-firefox/+bug/1')
    >>> related = find_tags_by_class(user_browser.contents, 'related')[0]
    >>> print extract_text(related)
    What next?...
    >>> print user_browser.getLink('Report another bug').url
    http://launchpad.dev/ubuntu/+source/mozilla-firefox/+filebug
    >>> print user_browser.getLink('List open bugs').url
    http://launchpad.dev/ubuntu/+source/mozilla-firefox/+bugs

There's also a link on the page that will take the user to the "Add a
comment/attachment" page, for use when JavaScript isn't available.

    >>> print user_browser.getLink('Add a comment/attachment').url
    http://launchpad.dev/ubuntu/+source/.../+bug/1/+addcomment


== Bugs with lots of comments ==

When a bug has a very large number of comments, only some of them are
displayed. A notice is added at the end of the comment list to tell
the user about this.

Bug 11 has quite a few comments.

    >>> user_browser.open('http://launchpad.dev/bugs/11')
    >>> comments = find_tags_by_class(user_browser.contents, 'bug-comment')
    >>> len(comments)
    6

Let's briefly override the configuration to push bug 11 over the
threshold.

    >>> from canonical.config import config
    >>> config.push('malone', '''
    ... [malone]
    ... comments_list_max_length: 5
    ... comments_list_truncate_to: 3
    ... ''')

Now only 3 comments will be displayed.

    >>> user_browser.open('http://launchpad.dev/bugs/11')
    >>> comments = find_tags_by_class(user_browser.contents, 'bug-comment')
    >>> len(comments)
    3

With a warning telling the user where the comments have gone:

    >>> messages = find_tags_by_class(
    ...     user_browser.contents, 'warning message')
    >>> for message in messages:
    ...     print extract_text(message)
    Displaying first 3 comments. View all 6 comments.

Restore the configuration to its previous setting.

    >>> config.pop('malone')
    (...)
