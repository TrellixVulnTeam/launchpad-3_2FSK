XXX CarlosPerelloMarin 20070919: This test is not complete, we must add much
more tests and documentation. See bug #141052 for more information.

Check that the product main page works.

= Translation Pages =

    >>> user_browser.open('http://launchpad.dev/evolution')

The product page has a link to help translate it.

    >>> user_browser.getLink('Help translate').click()
    >>> print user_browser.title
    Translations of The Evolution Groupware Application in Launchpad

It has no external links:

    >>> print find_tag_by_id(user_browser.contents, 'external-links-heading')
    None

= Links and Programming languages =

Define a function to help find bits we are interested in:

    >>> def get_urls(content):
    ...     for name in [
    ...     'homepageurl-link',
    ...     'sourceforge-link',
    ...     'freshmeat-link',
    ...     'wikiurl-link',
    ...     'screenshotsurl-link',
    ...     'downloadurl-link',
    ...     ]:
    ...         tag = find_tag_by_id(content, name)
    ...         if tag:
    ...             print extract_text(tag), tag['href']

Now update Tomcat to actually have this data:

    >>> import transaction
    >>> from canonical.database.sqlbase import flush_database_updates
    >>> from canonical.launchpad.database import Product
    >>> from canonical.launchpad.ftests import ANONYMOUS, login, logout
    >>> login(ANONYMOUS)

    >>> tomcat = Product.selectOneBy(name="tomcat")
    >>> tomcat.homepageurl = "http://home.page/"
    >>> tomcat.freshmeatproject = "fm-tomcat"
    >>> tomcat.sourceforgeproject = "sf-tomcat"
    >>> tomcat.wikiurl = "http://wiki.url/"
    >>> tomcat.screenshotsurl = "http://screenshots.url/"
    >>> tomcat.downloadurl = "http://download.url/"
    >>> tomcat.programminglang = "C++,Xenon and Purple"

    >>> logout()
    >>> flush_database_updates()
    >>> transaction.commit()

Let's check it out:

    >>> browser.open('http://launchpad.dev/tomcat')
    >>> tag = find_tag_by_id(browser.contents, 'external-links-heading')
    >>> print extract_text(tag)
    External Resources

    >>> get_urls(browser.contents)
    Home page http://home.page/
    Sourceforge project http://sourceforge.net/projects/sf-tomcat
    Freshmeat record http://freshmeat.net/projects/fm-tomcat
    Wiki http://wiki.url/
    Screenshots http://screenshots.url/
    External downloads http://download.url/


    >>> print extract_text(find_tag_by_id(browser.contents, 'product-languages'))
    C++,Xenon and Purple

When the freshmeat or sourceforge URLs are identical to the homepage, we omit
the homepage:

    >>> login(ANONYMOUS)

    >>> tomcat = Product.selectOneBy(name="tomcat")
    >>> tomcat.homepageurl = "http://sourceforge.net/projects/sf-tomcat"

    >>> logout()
    >>> flush_database_updates()
    >>> transaction.commit()

    >>> browser.open('http://launchpad.dev/tomcat')
    >>> get_urls(browser.contents)
    Sourceforge project http://sourceforge.net/projects/sf-tomcat
    Freshmeat record http://freshmeat.net/projects/fm-tomcat
    Wiki http://wiki.url/
    Screenshots http://screenshots.url/
    External downloads http://download.url/

    >>> login(ANONYMOUS)

    >>> tomcat = Product.selectOneBy(name="tomcat")
    >>> tomcat.homepageurl = "http://freshmeat.net/projects/fm-tomcat"

    >>> logout()
    >>> flush_database_updates()
    >>> transaction.commit()

    >>> browser.open('http://launchpad.dev/tomcat')
    >>> get_urls(browser.contents)
    Sourceforge project http://sourceforge.net/projects/sf-tomcat
    Freshmeat record http://freshmeat.net/projects/fm-tomcat
    Wiki http://wiki.url/
    Screenshots http://screenshots.url/
    External downloads http://download.url/


= Bug subscriptions =

    >>> user_browser.open('http://launchpad.dev/firefox')
    >>> user_browser.getLink('Subscribe to bug mail').click()
    >>> print user_browser.url
    http://launchpad.dev/firefox/+subscribe


= Licensing alerts =

A project that has not set a license is marked as 'Unspecified'.

    >>> user_browser.open('http://launchpad.dev/firefox')
    >>> repr(find_tag_by_id(user_browser.contents, 'maincontent'))
    '<...This project&rsquo;s license has not been specified...

A project that includes a license of "Other/Open Source" that has not
been reviewed by a Launchpad administrator will be displayed as
'Unreviewed.'

    >>> owner_browser = setupBrowser(auth="Basic test@canonical.com:test")
    >>> owner_browser.open('http://launchpad.dev/thunderbird/+edit')
    >>> owner_browser.getControl(name='field.licenses').value = [
    ...     'OTHER_OPEN_SOURCE']
    >>> owner_browser.getControl(name='field.license_info').value = 'foo'
    >>> owner_browser.getControl('Change').click()

Any user can see that the project's license has not been reviewed.

    >>> user_browser.open('http://launchpad.dev/thunderbird')
    >>> repr(find_tag_by_id(user_browser.contents, 'maincontent'))
    '<...This project&rsquo;s license has not been reviewed...

When the project's license is reviewed and approved the status changes
to open source.

    >>> admin_browser.open('http://launchpad.dev/thunderbird/+review-license')
    >>> admin_browser.getControl(name='field.license_reviewed').value = True
    >>> admin_browser.getControl(name='field.license_approved').value = True
    >>> admin_browser.getControl('Change').click()

    >>> user_browser.open('http://launchpad.dev/thunderbird')
    >>> repr(find_tag_by_id(user_browser.contents, 'maincontent'))
    '<...This project&lsquo;s license is open source...

Changing the state to reviewed but not approved results in the project
being shown as proprietary.

    >>> admin_browser.open('http://launchpad.dev/thunderbird/+review-license')
    >>> admin_browser.getControl(name='field.license_reviewed').value = True
    >>> admin_browser.getControl(name='field.license_approved').value = False
    >>> admin_browser.getControl('Change').click()

    >>> user_browser.open('http://launchpad.dev/thunderbird')
    >>> repr(find_tag_by_id(user_browser.contents, 'maincontent'))
    '<...This project&lsquo;s license is proprietary...

If the project doesn't have a license, a portlet is displayed
to direct the owner to set a license.

    >>> from canonical.launchpad.interfaces import License
    >>> firefox = Product.selectOneBy(name="firefox")
    >>> owner_browser.open('http://launchpad.dev/firefox')
    >>> print find_tag_by_id(owner_browser.contents, 'license-status')
    <...This project&rsquo;s license has not been reviewed...
    >>> print find_tag_by_id(owner_browser.contents,
    ...                      'portlet-requires-subscription')
    None
    >>> print find_tag_by_id(owner_browser.contents,
    ...                      'portlet-missing-license')
    <div...Missing license information...</div>

A non-owner does not see the warning that the project
is missing licensing information.

    >>> user_browser.open('http://launchpad.dev/firefox')
    >>> print find_tag_by_id(user_browser.contents,
    ...                      'portlet-missing-license')
    None

If the project doesn't qualify for free hosting, or if it doesn't
have much time left on its commercial subscription, a portlet
is displayed to direct the owner to purchase a subscription.

    >>> firefox.licenses = [License.OTHER_PROPRIETARY]
    >>> flush_database_updates()
    >>> transaction.commit()
    >>> owner_browser.open('http://launchpad.dev/firefox')
    >>> print find_tag_by_id(owner_browser.contents, 'license-status')
    <...This project&rsquo;s license is proprietary...
    >>> print find_tag_by_id(owner_browser.contents,
    ...                      'portlet-requires-subscription')
    <div...Purchasing a subscription is required...</div>
    >>> print find_tag_by_id(owner_browser.contents,
    ...                      'portlet-missing-license')
    None
    >>> owner_browser.getLink('Purchase a subscription.').click()
    >>> owner_browser.url
    'http://launchpad.dev/firefox/+purchase-subscription'
    >>> print find_tags_by_class(owner_browser.contents, 'error message')
    []
    >>> owner_browser.getLink('Canonical Shop')
    <Link...url='http://ubuntu.recycledmania.com...'>
    >>> owner_browser.getLink('voucher management page')
    <Link...url='http://launchpad.dev/people/+me/+vouchers'...>

Any user can see that the project's license is proprietary.

    >>> user_browser.open('http://launchpad.dev/firefox')
    >>> repr(find_tag_by_id(user_browser.contents, 'maincontent'))
    '<...This project&rsquo;s license is proprietary...

A non-owner does not see that a commercial subscription is due,
and the +purchase-subscription page will display an error. A user would
have to load that page directly, since the link is not displayed.

    >>> print find_tag_by_id(user_browser.contents,
    ...                      'portlet-requires-subscription')
    None
    >>> user_browser.open(
    ...     'http://launchpad.dev/firefox/+purchase-subscription')
    >>> print find_tag_by_id(user_browser.contents, 'permission-error')
    <div...class="error message"...
    You do not have permission to purchase a subscription for this project...

If the project qualifies for free hosting, neither portlet
is displayed, and the +purchase-subscription page will display
an error.

    >>> firefox.licenses = [License.GNU_GPL_V2]
    >>> flush_database_updates()
    >>> transaction.commit()
    >>> owner_browser.open('http://launchpad.dev/firefox')
    >>> print find_tag_by_id(owner_browser.contents,
    ...                      'portlet-requires-subscription')
    None
    >>> print find_tag_by_id(owner_browser.contents,
    ...                      'portlet-missing-license')
    None
    >>> owner_browser.open(
    ...     'http://launchpad.dev/firefox/+purchase-subscription')
    >>> print find_tag_by_id(owner_browser.contents, 'free-hosting-error')
    <div...class="error message"...
    This project does not require a commercial subscription to be purchased...

If the project's license is open source, the license status is not displayed
on the index page, since most projects fall into this category.

    >>> user_browser.open('http://launchpad.dev/firefox')
    >>> print find_tag_by_id(owner_browser.contents, 'license-status')
    None

If the is_subscription_feature_active config variable is false,
then the owner will not get a warning that the subscription is due.
# XXX EdwinGrubbs 2008-05-22 bug=234070
# Remove this config when the feature is launched.

    >>> from canonical.config import config
    >>> from textwrap import dedent
    >>> test_data = dedent("""
    ...     [commercial]
    ...     is_subscription_feature_active: False
    ...     """)
    >>> config.push('test_data', test_data)
    >>> firefox.licenses = [License.OTHER_PROPRIETARY]
    >>> flush_database_updates()
    >>> transaction.commit()
    >>> owner_browser.open('http://launchpad.dev/firefox')
    >>> print find_tag_by_id(owner_browser.contents,
    ...                      'portlet-requires-subscription')
    None
    >>> test_config_data = config.pop('test_data')
