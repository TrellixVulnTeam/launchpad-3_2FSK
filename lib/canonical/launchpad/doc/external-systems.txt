External Systems
================

An ExternalSystem is used to talk to remote bug trackers and update bug
watches. This document describes how they work. Since we don't want to
depend on a working network connection, we use a slightly modified
implementation.

    >>> from canonical.launchpad.ftests.externalbugtracker import TestBugzilla
    >>> from canonical.launchpad.components.externalbugtracker import (
    ...     ExternalSystem)
    >>> from canonical.launchpad.interfaces import IBugTrackerSet
    >>> gnome_bugzilla = getUtility(IBugTrackerSet).getByName('gnome-bugzilla')
    >>> test_remote_bugzilla = TestBugzilla(gnome_bugzilla.baseurl)
    >>> version = test_remote_bugzilla._probe_version()
    >>> version
    u'2.20+'
    >>> external_bugzilla = ExternalSystem(gnome_bugzilla, version)
    >>> external_bugzilla.remotesystem = test_remote_bugzilla

It contains a function for converting one of its own status to a Malone
status. Bugzilla statuses consist of two parts, the status, and the
resolution, separated by a space character. The resolution only exists
if the bug is closed:

    >>> external_bugzilla.malonify_status('UNCONFIRMED')
    'Unconfirmed'
    >>> external_bugzilla.malonify_status('NEW')
    'Unconfirmed'
    >>> external_bugzilla.malonify_status('ASSIGNED')
    'Confirmed'
    >>> external_bugzilla.malonify_status('REOPENED')
    'Unconfirmed'
    >>> external_bugzilla.malonify_status('NEEDINFO')
    'Needs Info'
    >>> external_bugzilla.malonify_status('UPSTREAM')
    'Unconfirmed'
    >>> external_bugzilla.malonify_status('PENDINGUPLOAD')
    'Fix Committed'
    >>> external_bugzilla.malonify_status('RESOLVED FIXED')
    'Fix Released'
    >>> external_bugzilla.malonify_status('VERIFIED WONTFIX')
    'Rejected'
    >>> external_bugzilla.malonify_status('CLOSED INVALID')
    'Rejected'

If the status can't be converted, 'Unknown' is returned, and a warning
is logged.

    >>> external_bugzilla.malonify_status('FOO')
    WARNING:...:Unknown Bugzilla status 'FOO' at http://bugzilla.gnome.org
    'Unknown'

UNKNOWN maps to 'Unknown' without generating a warning.

    >>> external_bugzilla.malonify_status('UNKNOWN')
    'Unknown'


The main use of ExternalSystem is to update bug watches. This is done
through updateBugWatches(), which expects a list of bug watches to
update:

    >>> for bug_watch in gnome_bugzilla.watches:
    ...     print "%s: %s" % (bug_watch.remotebug, bug_watch.remotestatus)
    3224:
    >>> external_bugzilla.updateBugWatches(gnome_bugzilla.watches)
    >>> for bug_watch in gnome_bugzilla.watches:
    ...     print "%s: %s" % (bug_watch.remotebug, bug_watch.remotestatus)
    3224: RESOLVED FIXED

Let's add a few more watches:

    >>> from canonical.launchpad.interfaces import (
    ...     IBugSet, IBugWatchSet, IPersonSet)
    >>> sample_person = getUtility(IPersonSet).getByEmail('test@canonical.com')
    >>> bug_one = getUtility(IBugSet).get(1)
    >>> bug_watch_set = getUtility(IBugWatchSet)
    >>> expected_remote_statuses = dict(
    ...     [(int(bug_watch.remotebug), bug_watch.remotestatus)
    ...      for bug_watch in gnome_bugzilla.watches])
    >>> for remote_bug_id in range(100,300):
    ...     bug_watch = bug_watch_set.createBugWatch(
    ...         bug=bug_one, owner=sample_person, bugtracker=gnome_bugzilla,
    ...         remotebug=str(remote_bug_id))
    ...     external_bugzilla.remotesystem.bugzilla_bugs[remote_bug_id] = (
    ...         'ASSIGNED', '')
    ...     expected_remote_statuses[remote_bug_id] = 'ASSIGNED'

Instead of issuing one request per bug watch, like was done before,
updateBugWatches() issues only one request to update all watches:

    >>> external_bugzilla.remotesystem.trace_calls = True
    >>> external_bugzilla.updateBugWatches(gnome_bugzilla.watches)
    CALLED _postPage()

    >>> remote_statuses = dict(
    ...     [(int(bug_watch.remotebug), bug_watch.remotestatus)
    ...      for bug_watch in gnome_bugzilla.watches])
    >>> remote_statuses == expected_remote_statuses
    True

    >>> external_bugzilla.remotesystem.trace_calls = False

updateBugWatches() updates the lastchecked attribute on the watches, so
now no bug watches are in need of updating:

    >>> from canonical.database.sqlbase import flush_database_updates
    >>> flush_database_updates()
    >>> gnome_bugzilla.getBugWatchesNeedingUpdate(23).count()
    0
