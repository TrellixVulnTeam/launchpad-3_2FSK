= Creating Blueprints =

Blueprints can be created from multiple locations within Launchpad. In
particular, users can create blueprints from distributions, from projects and 
from project groups. It's also possible to create a blueprint from the 
Blueprints home page.

Let's make sure we can see the relevant page on a distribution.

  >>> user_browser.open('http://blueprints.launchpad.dev/ubuntu/+addspec')
  >>> user_browser.url
  'http://blueprints.launchpad.dev/ubuntu/+addspec'

Let's also validate that a new blueprint's form page has the appropriate default
blueprint status.

  >>> user_browser.getControl('Status').value
  ['New']

And now, on a project.

  >>> user_browser.open('http://blueprints.launchpad.dev/firefox/+addspec')
  >>> user_browser.url
  'http://blueprints.launchpad.dev/firefox/+addspec'
  >>> user_browser.getControl('Status').value
  ['New']

And finally, on a project group.

  >>> user_browser.open('http://blueprints.launchpad.dev/mozilla/+addspec')
  >>> user_browser.url
  'http://blueprints.launchpad.dev/mozilla/+addspec'
  >>> user_browser.getControl('Status').value
  ['New']

Let's go one step further and confirm that we can actually POST to that
form, to register a new blueprint. We'll do it on the Ubuntu distribution.

  >>> user_browser.open('http://blueprints.launchpad.dev/ubuntu/+addspec')
  >>> user_browser.getControl('Name').value = 'networkmagic'
  >>> user_browser.getControl(
  ...   'Title').value = ('Network Magic - Automatic Network'
  ...       'Detection')
  >>> user_browser.getControl(
  ...   'URL').value = ('http://wiki.ubuntu.com/NetworkMagic')
  >>> summary = (
  ...   "Users are increasingly using multiple"
  ...   "networks. Being able to seamlessly move between networks whilst"
  ...   "remembering the correct settings for each network would greatly"
  ...   "enhance Ubuntu's usability for mobile professionals. Many network"
  ...   "dependent services should only be run when the system is positive"
  ...   "that it has a network. This would greatly enhance the system's"
  ...   "flexibility and responsiveness.")
  >>> user_browser.getControl('Summary').value = summary
  >>> user_browser.getControl('Status').value = ['Approved']
  >>> user_browser.getControl(name='field.assignee').value = 'daf@canonical.com'
  >>> user_browser.getControl(name='field.drafter').value = 'carlos@canonical.com'
  >>> user_browser.getControl(name='field.approver').value = 'tsukimi@quaqua.net'
  >>> user_browser.getControl('Register Blueprint').click()
  >>> user_browser.url
  'http://blueprints.launchpad.dev/ubuntu/+spec/networkmagic'

OK, that created a new blueprint. Let's make sure we can see it.

  >>> url = 'http://blueprints.launchpad.dev/ubuntu/+spec/networkmagic'
  >>> user_browser.open(url)
  >>> user_browser.url
  'http://blueprints.launchpad.dev/ubuntu/+spec/networkmagic'

Now we test if the blueprint name validator is working trying to register a
blueprint with the same name.

  >>> user_browser.open('http://blueprints.launchpad.dev/ubuntu/+addspec')
  >>> user_browser.getControl('Name').value = 'networkmagic'
  >>> user_browser.getControl('Title').value = ('Network Magic'
  ...       '- Automatic Network Detection')
  >>> user_browser.getControl(
  ...   'URL').value = ('http://wiki.ubuntu.com/NetworkMagic')
  >>> user_browser.getControl('Summary').value = ("Users are"
  ...       "increasingly using multiple networks.")
  >>> user_browser.getControl('Status').value = ['Approved']
  >>> user_browser.getControl(name='field.assignee').value = 'daf@canonical.com'
  >>> user_browser.getControl(name='field.drafter').value = 'carlos@canonical.com'
  >>> user_browser.getControl(name='field.approver').value = 'tsukimi@quaqua.net'
  >>> user_browser.getControl('Register Blueprint').click()
  >>> user_browser.url
  'http://blueprints.launchpad.dev/ubuntu/+addspec'

Seeing that we were redirected again to the addspec page is a good sign
(something prevented the blueprint from being registered) however better make
sure this happened due to the right reason.

  >>> 'is already in use by another blueprint' in user_browser.contents
  True

We test the validator using an invalid name.

  >>> user_browser.open('http://blueprints.launchpad.dev/ubuntu/+addspec')
  >>> user_browser.getControl('Name').value = 'NetworkMagic!'
  >>> user_browser.getControl('Title').value = (
  ...   'Network Magic - Automatic Network Detection')
  >>> user_browser.getControl('URL').value = (
  ...   'http://wiki.ubuntu.com/NetworkMagicExclamation')
  >>> user_browser.getControl('Summary').value = (
  ...   "Users are increasingly using multiple networks.")
  >>> user_browser.getControl('Status').value = ['Approved']
  >>> user_browser.getControl(name='field.assignee').value = 'daf@canonical.com'
  >>> user_browser.getControl(name='field.drafter').value = 'carlos@canonical.com'
  >>> user_browser.getControl(name='field.approver').value = 'tsukimi@quaqua.net'
  >>> user_browser.getControl('Register Blueprint').click()
  >>> user_browser.url
  'http://blueprints.launchpad.dev/ubuntu/+addspec'
  >>> for message in find_tags_by_class(user_browser.contents, 'message'):
  ...      print message.renderContents()
  There is 1 error.
  <BLANKLINE>
  Invalid name ...

Some invalid names can be transformed into valid names. When it is clear that a
valid name can be produced by removing trailing spaces or by converting upper
case characters to their lower case equivalents, this is done automatically for
the user:

  >>> user_browser.open('http://blueprints.launchpad.dev/ubuntu/+addspec')
  >>> user_browser.getControl('Name').value = ' RecoverableNetworkMagic '
  >>> user_browser.getControl('Title').value = (
  ...   'Network Magic - Automatic Network Detection')
  >>> user_browser.getControl('URL').value = (
  ...   'http://wiki.ubuntu.com/RecoverableNetworkMagic')
  >>> user_browser.getControl('Summary').value = (
  ...   "Users are increasingly using multiple networks.")
  >>> user_browser.getControl('Status').value = ['Approved']
  >>> user_browser.getControl(name='field.assignee').value = 'daf@canonical.com'
  >>> user_browser.getControl(name='field.drafter').value = 'carlos@canonical.com'
  >>> user_browser.getControl(name='field.approver').value = 'tsukimi@quaqua.net'
  >>> user_browser.getControl('Register Blueprint').click()
  >>> user_browser.url
  'http://blueprints.launchpad.dev/ubuntu/+spec/recoverablenetworkmagic'
  >>> "Blueprint overview" in user_browser.contents
  True

Now we test the URL field validator trying to register a new blueprint with the
same URL.

  >>> user_browser.open('http://blueprints.launchpad.dev/ubuntu/+addspec')
  >>> user_browser.getControl('Name').value = 'dupenetworkmagic'
  >>> user_browser.getControl('Title').value = (
  ...   'This is a dupe Network Magic Spec')
  >>> user_browser.getControl('URL').value = (
  ...   'http://wiki.ubuntu.com/NetworkMagic')
  >>> user_browser.getControl('Summary').value = "Users are increasingly"
  >>> user_browser.getControl('Status').value = ['Approved']
  >>> user_browser.getControl(name='field.assignee').value = 'daf@canonical.com'
  >>> user_browser.getControl(name='field.drafter').value = 'carlos@canonical.com'
  >>> user_browser.getControl(name='field.approver').value = 'tsukimi@quaqua.net'
  >>> user_browser.getControl('Register Blueprint').click()
  >>> user_browser.url
  'http://blueprints.launchpad.dev/ubuntu/+addspec'
  >>> "is already registered by another blueprint" in user_browser.contents
  True


== Project blueprint registration ==

There is also a form which lets user create a new blueprint in an IProject
that first requires them to select an IProduct target, showing them only the
products in that IProject.

  >>> user_browser.open('http://blueprints.launchpad.dev/mozilla/+addspec')
  >>> user_browser.getControl(name='field.projecttarget').value = ['thunderbird']
  >>> user_browser.getControl('Name').value = 'gee-whizz-wotzit'
  >>> user_browser.getControl(
  ...   'Title').value = ('Grand amazing tool')
  >>> user_browser.getControl(
  ...   'URL').value = ('http://wiki.mozilla.org/WhizzWotzit')
  >>> summary = (
  ...   "This widget is the latest and greatest in a long range of wotzits. "
  ...   "All wotzits are known to be particularly resilient.")
  >>> user_browser.getControl('Summary').value = summary
  >>> user_browser.getControl('Status').value = ['Approved']
  >>> user_browser.getControl(name='field.assignee').value = 'daf@canonical.com'
  >>> user_browser.getControl(name='field.drafter').value = 'carlos@canonical.com'
  >>> user_browser.getControl(name='field.approver').value = 'tsukimi@quaqua.net'
  >>> user_browser.getControl('Register Blueprint').click()
  >>> user_browser.url
  'http://blueprints.launchpad.dev/thunderbird/+spec/gee-whizz-wotzit'


== System-wide blueprint registration ==

There is also a form which lets user create a new blueprint for any product
or distribution, from the Blueprints home page.

First, we try to create a blueprint that has the same name as an existing one.

  >>> user_browser.open('http://blueprints.launchpad.dev/specs/+new')
  >>> user_browser.getControl(name='field.target').value = 'ubuntu'
  >>> user_browser.getControl('Name').value = 'networkmagic'
  >>> user_browser.getControl(
  ...   'Title').value = ('Network Magic - Automatic Network'
  ...       'Detection')
  >>> user_browser.getControl(
  ...   'URL').value = ('http://wiki.ubuntu.com/NetworkMagic')
  >>> summary = (
  ...   "Users are increasingly using multiple"
  ...   "networks. Being able to seamlessly move between networks whilst"
  ...   "remembering the correct settings for each network would greatly"
  ...   "enhance Ubuntu's usability for mobile professionals. Many network"
  ...   "dependent services should only be run when the system is positive"
  ...   "that it has a network. This would greatly enhance the system's"
  ...   "flexibility and responsiveness.")
  >>> user_browser.getControl('Summary').value = summary
  >>> user_browser.getControl('Status').value = ['Approved']
  >>> user_browser.getControl(name='field.assignee').value = 'daf@canonical.com'
  >>> user_browser.getControl(name='field.drafter').value = 'carlos@canonical.com'
  >>> user_browser.getControl(name='field.approver').value = 'tsukimi@quaqua.net'
  >>> user_browser.getControl('Register Blueprint').click()
  >>> user_browser.url
  'http://blueprints.launchpad.dev/specs/+new'

So, we were not redirected to the blueprint page, because the blueprint was not
created. Let's check that this happened because the name is taken:

  >>> 'is already in use by another blueprint' in user_browser.contents
  True


Now, we'll register a blueprint with a unique name and it should go straight
through.

  >>> user_browser.open('http://blueprints.launchpad.dev/specs/+new')
  >>> user_browser.getControl(name='field.target').value = 'ubuntu'
  >>> user_browser.getControl('Name').value = 'brandnewspec'
  >>> user_browser.getControl(
  ...   'Title').value = ('Network Voodoo - Automatic Network'
  ...       'Detection')
  >>> user_browser.getControl(
  ...   'URL').value = ('http://wiki.ubuntu.com/NetworkVoodoo')
  >>> summary = (
  ...   "Users are increasingly using multiple"
  ...   "networks. Being able to seamlessly move between networks whilst"
  ...   "that it has a network. This would greatly enhance the system's"
  ...   "flexibility and responsiveness.")
  >>> user_browser.getControl('Summary').value = summary
  >>> user_browser.getControl('Status').value = ['Approved']
  >>> user_browser.getControl(name='field.assignee').value = 'daf@canonical.com'
  >>> user_browser.getControl(name='field.drafter').value = 'carlos@canonical.com'
  >>> user_browser.getControl(name='field.approver').value = 'tsukimi@quaqua.net'
  >>> user_browser.getControl('Register Blueprint').click()
  >>> user_browser.url
  'http://blueprints.launchpad.dev/ubuntu/+spec/brandnewspec'


= TODO =
There are many blueprint doctests with the following type of test:

"  >>> 'Invalid name' in browser.contents                              "

If such tests fail, they can be a little difficult to debug, because the
failure messages do not specify the resulting string. Instead, we could
use the following pattern to get more information in case of failure:

"  >>> for message in find_tags_by_class(browser.contents, 'message'): "
"  ...     print message.renderContents()                              "
"  There is 1 error.                                                   "
"  <BLANKLINE>                                                         "
"  Invalid name ...                                                    "
