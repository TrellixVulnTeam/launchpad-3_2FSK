= Code Import Machines =

There is a simple CodeImportMachine table in the database that records
the machines that can perform imports and whether they are online (that
is, currently capable of performing imports).

    >>> from canonical.launchpad.interfaces import (
    ...     ICodeImportMachine, ICodeImportMachineSet, CodeImportMachineState)

Adding new machines is considered an admin task, so requires that we switch to
a database administrator.

Adding a machine is very simple SQL, for which there will probably be a
shell script.

    >>> from canonical.database.sqlbase import connect, quote
    >>> connection = connect('testadmin')
    >>> cur = connection.cursor()
    >>> cur.execute("""
    ...     INSERT INTO CodeImportMachine (hostname, state)
    ...     VALUES ('frobisher.example.com', %s)
    ...     """ % quote(CodeImportMachineState.OFFLINE))
    >>> connection.commit()

The webapp only has rights to examine, not modify, the CodeImportMachine
table.  The table is represented by an utility that provides the
ICodeImportMachineSet interface.  Currently we hide all aspects of the
new system from anonymous and regular users.

    >>> machine_set = getUtility(ICodeImportMachineSet)
    >>> machine_set.getAll()
    Traceback (most recent call last):
      ...
    Unauthorized: ...

    >>> login('test@canonical.com')
    >>> machine_set = getUtility(ICodeImportMachineSet)
    >>> machine_set.getAll()
    Traceback (most recent call last):
      ...
    Unauthorized: ...

Once we've logged in as David Allouche, a member of vcs-imports, the
object that provides ICodeImportMachineSet allows access to machines by
hostname and to all machines.

    >>> login('david.allouche@canonical.com')
    >>> from canonical.launchpad.interfaces import ILaunchpadCelebrities
    >>> ddaa = getUtility(ILaunchBag).user
    >>> ddaa.inTeam(getUtility(ILaunchpadCelebrities).vcs_imports)
    True

    >>> machine_set = getUtility(ICodeImportMachineSet)
    >>> from zope.interface.verify import verifyObject
    >>> from zope.security.proxy import removeSecurityProxy
    >>> verifyObject(ICodeImportMachineSet, removeSecurityProxy(machine_set))
    True
    >>> machine = machine_set.getByHostname('frobisher.example.com')
    >>> machine in machine_set.getAll()
    True

getByHostname returns None if there is no machine by that name in the
database.

    >>> print machine_set.getByHostname('unlikely.example.com')
    None

Machine objects themselves provide ICodeImportMachine, which includes
hostname and online state information.

    >>> verifyObject(ICodeImportMachine, removeSecurityProxy(machine))
    True
    >>> machine.hostname
    u'frobisher.example.com'
    >>> print machine.state.name
    OFFLINE

The web app cannot edit this information.

    >>> from canonical.launchpad.interfaces import CodeImportMachineState
    >>> machine.state = CodeImportMachineState.ONLINE
    Traceback (most recent call last):
      ...
    ForbiddenAttribute: ...

Jobs running on the machine itself will connect as the 'importd' user,
which has rights to update the table so it can update the machine state.

XXX: MichaelHudson 2007-07-03, it would be nice to be able to use
SQLObject here.  But the test framework doesn't appear to support this
(see bug #123785).

    >>> connection = connect('importd')
    >>> cur = connection.cursor()
    >>> cur.execute("""
    ...     UPDATE CodeImportMachine SET state=%s
    ...     WHERE hostname='frobisher.example.com'
    ...     """ % quote(CodeImportMachineState.ONLINE))
    >>> connection.commit()

Now we abort the implicit transaction and flush SQLObject's caches so
we can see the above changes.

    >>> import transaction
    >>> transaction.abort()
    >>> from canonical.database.sqlbase import flush_database_caches
    >>> flush_database_caches()

So when we check again from the web apps point of view, we see that
the status is indeed updated.

    >>> machine_set = getUtility(ICodeImportMachineSet)
    >>> machine = machine_set.getByHostname('frobisher.example.com')
    >>> print machine.state.name
    ONLINE

