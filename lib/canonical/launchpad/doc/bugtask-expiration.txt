= Bugtask Expiration =

Old unattended Incomplete bugtasks clutter Malone's search results,
making the bug staff's job difficult. A script is run daily to
locate unattended Incomplete bugtasks that have not been updated in
2 months, and sets their status to INVALID. Only bugtasks for projects
that use Malone will be expired; this rule does not apply to Bugs
imported from upstream bug trackers. The preconditions are:

1. The bugtask belongs to a project that uses Malone to track bugs.
2. The bugtask has the status Incomplete.
3. The last message on the bug is older than 60 days.
4. The bug is not a duplicate.
5. The bug has at least one message (a request for more information).
6. The bug does not have any other valid bugtasks.
7. The bugtask is not assigned to anyone.
8. The bugtask does not have a milestone. 

Bugtasks cannot transition to Invalid automatically unless they meet
all the rules stated above.


== Setup ==

The test harness provides create_old_bug() and summarize_bugtask()
for creating old bugs and printing a summary of their state. It
also provides ubuntu, hoary, and jokosher for our test.

BugTaskSet provides methods for locating bugtasks. We also need
BugTaskStatus for checking the status of bugtasks.

    >>> from canonical.launchpad.interfaces import (
    ...     BugTaskStatus, IBugTaskSet)
    >>> bugtaskset = getUtility(IBugTaskSet)


== findExpirableBugTasks ==

BugTaskSet provides findExpirableBugTasks to find bugtasks that
qualify for expiration. The bugtasks must must meet all the
preconditions stated in this tests introduction.

findExpirableBugTasks requires a parameter for the minimum days old
(min_days_old) that the bugtask has been in the unattended Incomplete
status.

    >>> expirable_bugtasks = bugtaskset.findExpirableBugTasks()
    Traceback (most recent call last):
    ...
    TypeError: findExpirableBugTasks() takes exactly 2 arguments (1 given)

Looking back 9,999 days, findExpirableBugTasks reports that there are no
expirable bugtasks in the sampledata.

    >>> expirable_bugtasks = bugtaskset.findExpirableBugTasks(9999)
    >>> len(expirable_bugtasks)
    0

Let's make some bugtasks that qualify for expiration. A Jokosher
bugtask and a conjoined pair of ubuntu_hoary and ubuntu bugtasks
will suffice.

    # A expirable bugtask. It will be expired because its conjoined
    # master can be expired.
    >>> ubuntu_bugtask = create_old_bug(
    ...     'expirable_distro', 351, ubuntu)

    # An expirable bugtask, a distroseries. The ubuntu  bugtask is its
    # conjoined slave.
    >>> hoary_bugtask = bugtaskset.createTask(
    ...     bug=ubuntu_bugtask.bug, owner=sample_person,
    ...     distroseries=ubuntu.currentseries)

    # A bugtask for a product that is expirable.
    >>> jokosher_bugtask = create_old_bug(
    ...     'jokosher', 61, jokosher)

Lets also make some bugs that almost qualify for expiration.

    # A bugtask that is not expirable because it is assigned.
    >>> assigned_bugtask = create_old_bug('assigned', 61, ubuntu)
    >>> assigned_bugtask.transitionToAssignee(sample_person)

    # A bugtask that is not expirable because its status is CONFIRMED.
    >>> confirmed_bugtask = create_old_bug(
    ...     'confirmed', 61, ubuntu, status=BugTaskStatus.CONFIRMED)

    # A bugtask that is not expirable because it is a duplicate.
    >>> duplicate_bugtask = create_old_bug('duplicate', 61, ubuntu)
    >>> duplicate_bugtask.bug.duplicateof = confirmed_bugtask.bug

    # A bugtask that is not expirable because it does not use Malone.
    >>> external_bugtask = create_old_bug('external', 61, thunderbird)

    # A bugtask that is not expirable because it has a milestone.
    >>> milestone_bugtask = create_old_bug('milestone', 61, ubuntu)
    >>> milestone_bugtask.milestone = ubuntu.currentseries.newMilestone("0.1")

    # An New bugtask that is not expirable, on a bug with many bugtasks.
    >>> new_bugtask = bugtaskset.createTask(
    ...     bug=ubuntu_bugtask.bug, owner=sample_person,
    ...     product=thunderbird)

    # A bugtask that is not expirable because it has no reply messages.
    >>> no_replys_bugtask = create_old_bug(
    ...     'no_replys', 61, ubuntu, with_message=False)

    # A bugtask that is not expirable because it less than the min_days_old.
    >>> recent_bugtask = create_old_bug('recent', 31, ubuntu)

    >>> bugtasks = [ubuntu_bugtask, hoary_bugtask,
    ...     new_bugtask, jokosher_bugtask, assigned_bugtask,
    ...     confirmed_bugtask, duplicate_bugtask, external_bugtask,
    ...     milestone_bugtask, no_replys_bugtask, recent_bugtask]

    >>> summarize_bugtasks(bugtasks)
    ROLE         MALONE  AGE  STATUS      ASSIGNED  DUP    MILE   REPLY?
    ubuntu       True    351  Incomplete  False     False  False  False
    hoary        True    351  Incomplete  False     False  False  False
    thunderbird  False   351  New         False     False  False  False
    jokosher     True     61  Incomplete  False     False  False  False
    assigned     True     61  Incomplete  True      False  False  False
    confirmed    True     61  Confirmed   False     False  False  False
    duplicate    True     61  Incomplete  False     True   False  False
    external     False    61  Incomplete  False     False  False  False
    milestone    True     61  Incomplete  False     False  True   False
    no_replys    True     61  Incomplete  False     False  False  True
    recent       True     31  Incomplete  False     False  False  False

    # Flush the caches so that the bugtasks defined above get
    # their content from the modified DB.
    >>> flush_database_caches()

The value of the min_days_old controls the bugtasks that are returned.

    # No bugtask is older than 352 days.
    >>> expirable_bugtasks = bugtaskset.findExpirableBugTasks(352)
    >>> len(expirable_bugtasks)
    0

The ubuntu_hoary_bugtask does not display because its bug has other
bugtasks that are valid.

    # There are bugs older than 350 days, yet none are expirable.
    >>> expirable_bugtasks = bugtaskset.findExpirableBugTasks(350)
    >>> len(expirable_bugtasks)
    0

    >>> for bt in hoary_bugtask.bug.bugtasks:
    ...         print bt.bugtargetdisplayname, bt.status.title
    Mozilla Thunderbird   New
    Ubuntu                Incomplete
    Ubuntu Hoary          Incomplete

If the valid bugtask becomes Invalid or Won't Fix, the Hoary bugtask
will be displayed The ubuntu_bugtask is never returned; it is a
conjoined slave to the ubuntu_hoary_bugtask. Slave bugtasks cannot be
directly expired because only the master bugtask can change the status.

    >>> new_bugtask.transitionToStatus(
    ...     BugTaskStatus.WONTFIX, sample_person)
    >>> for bt in hoary_bugtask.bug.bugtasks:
    ...         print bt.bugtargetdisplayname, bt.status.title
    Mozilla Thunderbird   Won't Fix
    Ubuntu                Incomplete
    Ubuntu Hoary          Incomplete

    >>> expirable_bugtasks = bugtaskset.findExpirableBugTasks(350)
    >>> summarize_bugtasks(expirable_bugtasks)
    ROLE         MALONE  AGE  STATUS      ASSIGNED  DUP    MILE   REPLY?
    hoary        True    351  Incomplete  False     False  False  False

Reducing the age to 60 days old, both hoary and jokosher bugtasks
are returned.

    >>> expirable_bugtasks = bugtaskset.findExpirableBugTasks(60)
    >>> summarize_bugtasks(expirable_bugtasks)
    ROLE         MALONE  AGE  STATUS      ASSIGNED  DUP    MILE   REPLY?
    jokosher     True     61  Incomplete  False     False  False  False
    hoary        True    351  Incomplete  False     False  False  False


== The default expirtation age ==

The expiration age is set using the
config.malone.days_before_expiration configuration variable. It
defaults to 60 days. The period is measured from the date_incomplete
field. We expire bugtasks that are Incomplete and unattended for 60
days or more.

    >>> from canonical.config import config
    >>> old_age_days = config.malone.days_before_expiration
    >>> old_age_days
    60


== Running the script ==

There are no INVALID Bugtasks in sampledata.

    >>> from canonical.launchpad.database import BugTask
    >>> BugTask.selectBy(status=BugTaskStatus.INVALID).count()
    0

    >>> # We want to check the hoary_bugtask messags later.
    >>> starting_bug_messages_count = (
    ...     hoary_bugtask.bug.messages.count())

The script 'expire-bugs.py' writes its report to stdout. It makes its
database changes as the Bug Watch Updater user.

    # Commit the current transaction because the script will run in
    # another transaction, and thus it won't see the changes done on
    # this test unless we commit.
    >>> from canonical.database.sqlbase import commit
    >>> commit()

    >>> import subprocess
    >>> process = subprocess.Popen(
    ...     'cronscripts/expire-bugtasks.py', shell=True,
    ...     stdin=subprocess.PIPE, stdout=subprocess.PIPE,
    ...     stderr=subprocess.PIPE)
    >>> (out, err) = process.communicate()
    >>> print err
    INFO    creating lockfile
    INFO    Expiring unassigned, INCOMPLETE bugtask without activity for
            the last 60 days for projects that use Malone.
    INFO    Found 2 bugtasks to expire.
    INFO    Expired 2 bugtasks.
    INFO    Finished expiration run.
    <BLANKLINE>
    >>> print out
    <BLANKLINE>
    >>> process.returncode
    0

    # Flush the caches so that the bugtasks defined above get
    # their content from the modified DB.
    >>> from canonical.database.sqlbase import flush_database_caches
    >>> flush_database_caches()


== After the script has run ==

There are three Invalid bugtasks. Jokosher, hoary and ubuntu were
expired by the expiration process. Although ubuntu was never returned
by findExpirableBugTasks, it was expired because its master (hoary) was
expired.

    >>> summarize_bugtasks(bugtasks)
    ROLE         MALONE  AGE  STATUS      ASSIGNED  DUP    MILE   REPLY?
    ubuntu       True      0  Invalid     False     False  False  False
    hoary        True      0  Invalid     False     False  False  False
    thunderbird  False     0  Won't Fix   False     False  False  False
    jokosher     True      0  Invalid     False     False  False  False
    assigned     True     61  Incomplete  True      False  False  False
    confirmed    True     61  Confirmed   False     False  False  False
    duplicate    True     61  Incomplete  False     True   False  False
    external     False    61  Incomplete  False     False  False  False
    milestone    True     61  Incomplete  False     False  True   False
    no_replys    True     61  Incomplete  False     False  False  True
    recent       True     31  Incomplete  False     False  False  False

The remaining Incomplete bugtasks are unchanged.

    >>> invalid_bugtasks = BugTask.selectBy(status=BugTaskStatus.INVALID)
    >>> invalid_bugtasks.count()
    3
    >>> for bugtask in invalid_bugtasks:
    ...     print bugtask.bugtargetdisplayname
    Ubuntu
    Jokosher
    Ubuntu Hoary

The bugtasks statusexplaination was updated to explain the change in
status.

    >>> print hoary_bugtask.statusexplanation
    [Expired for Ubuntu Hoary because there has been no activity for 60 days.]

The message explaining the reason for the expiration was posted by the
Launchpad Janitor celebrity. Only one message was created for when the
master and slave bugtasks were expired.

    >>> starting_bug_messages_count
    2
    >>> hoary_bugtask.bug.messages.count()
    3

    >>> message =  hoary_bugtask.bug.messages[-1]
    >>> print message.owner.name
    janitor

    >>> print message.text_contents
    [Expired for Ubuntu Hoary because there has been no activity for 60 days.]

The bug's activity log was updated too.

