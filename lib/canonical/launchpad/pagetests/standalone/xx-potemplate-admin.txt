The POTemplate admin page lets us to edit any aspect of that object, that's
why we need to be a Rosetta Expert or a Launchpad admin to use it.

Check to be sure that an unpriviledged user cannot reach this page

  >>> browser.addHeader('Authorization', 'Basic no-priv@canonical.com:test')
  >>> browser.open('http://localhost/products/evolution/trunk/+pots/evolution-2.2/+admin')
  Traceback (most recent call last):
  ...
  Unauthorized:...

XXX: CarlosPerelloMarin 20060517: We need to reset the Browser object due the
error we forced before. See bug #45226 for more information.

  >>> from zope.testbrowser import Browser
  >>> browser = Browser()
  >>> browser.handleErrors = False

Check to be sure that a Rosetta expert (Jordi) can reach the POTemplate admin
page.

  >>> browser.addHeader('Authorization', 'Basic jordi@ubuntu.com:test')
  >>> browser.open('http://localhost/products/evolution/trunk/+pots/evolution-2.2/+admin')
  >>> print browser.url
  http://localhost/products/evolution/trunk/+pots/evolution-2.2/+admin

Now, we should be sure that the admin form gets all required fields to allow
a Rosetta Expert to administrate it.

  >>> 'field.potemplatename' in browser.contents
  True
  >>> 'field.description' in browser.contents
  True
  >>> 'field.header' in browser.contents
  True
  >>> 'field.iscurrent' in browser.contents
  True
  >>> 'field.owner' in browser.contents
  True
  >>> 'field.productseries' in browser.contents
  True
  >>> 'field.distrorelease' in browser.contents
  True
  >>> 'field.sourcepackagename' in browser.contents
  True
  >>> 'field.sourcepackageversion' in browser.contents
  True
  >>> 'field.binarypackagename' in browser.contents
  True
  >>> 'field.languagepack' in browser.contents
  True
  >>> 'field.path' in browser.contents
  True

Check to be sure that an admin can reach the POTemplate admin page.

  >>> browser.addHeader('Authorization', 'Basic carlos@canonical.com:test')
  >>> browser.open('http://localhost/products/evolution/trunk/+pots/evolution-2.2/+admin')
  >>> print browser.url
  http://localhost/products/evolution/trunk/+pots/evolution-2.2/+admin

Now, we should be sure that the admin form gets all required fields to allow
an admin to administrate it.

  >>> 'field.potemplatename' in browser.contents
  True
  >>> 'field.description' in browser.contents
  True
  >>> 'field.header' in browser.contents
  True
  >>> 'field.iscurrent' in browser.contents
  True
  >>> 'field.owner' in browser.contents
  True
  >>> 'field.productseries' in browser.contents
  True
  >>> 'field.distrorelease' in browser.contents
  True
  >>> 'field.sourcepackagename' in browser.contents
  True
  >>> 'field.sourcepackageversion' in browser.contents
  True
  >>> 'field.binarypackagename' in browser.contents
  True
  >>> 'field.languagepack' in browser.contents
  True
  >>> 'field.path' in browser.contents
  True

And that we are able to POST it.

The system has this template as not belonging to a language pack.

  >>> browser.getControl(name='field.languagepack').value
  False

And we set it.

  >>> browser.getControl(name='field.languagepack').value = True
  >>> browser.getControl(name='UPDATE_SUBMIT').click()
  >>> print browser.url
  http://localhost/products/evolution/trunk/+pots/evolution-2.2/+admin

And the changed value is stored.

  >>> browser.open('http://localhost/products/evolution/trunk/+pots/evolution-2.2/+admin')
  >>> print browser.url
  http://localhost/products/evolution/trunk/+pots/evolution-2.2/+admin
  >>> browser.getControl(name='field.languagepack').value
  True

