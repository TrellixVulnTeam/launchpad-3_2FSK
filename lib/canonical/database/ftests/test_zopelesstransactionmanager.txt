= ZopelessTransactionManager =

The ZopelessTransactionManager used to be an alternative to the Zope
transaction manager and SQLOS database adapter.

With the move to Storm, it was converted to a small compatibility shim
used to configure the database adapter.

== Initialisation ==

The ZopelessTransactionManager is initialised with the initZopeless()
function.

    >>> from canonical.lp import initZopeless
    >>> ztm = initZopeless()

The returned transaction manager happens to be the same as the
ZopelessTransactionManager class:

    >>> from canonical.database.sqlbase import ZopelessTransactionManager
    >>> ztm is ZopelessTransactionManager
    True

After initZopeless() has been called, the '_installed' attribute of
ZopelessTransactionManager will be set to the transaction manager:

    >>> ZopelessTransactionManager._installed is ztm
    True

The initZopeless() call defaults to read committed isolation:

    >>> from canonical.database.sqlbase import cursor
    >>> c = cursor()
    >>> c.execute("SHOW transaction_isolation")
    >>> print c.fetchone()[0]
    read committed

We can commit transactions:

    >>> c.execute("UPDATE person SET name = 'something' WHERE id = 1")
    >>> ztm.commit()

We can also explicitly start transactions with begin(), and abort
transactions:

    >>> ztm.begin()
    >>> c = cursor()
    >>> c.execute("UPDATE person SET name = 'blah' WHERE id = 1")
    >>> ztm.abort()
    >>> c = cursor()
    >>> c.execute("SELECT name FROM person WHERE id = 1")
    >>> print c.fetchone()[0]
    something

The uninstall() method can be used to uninstall the transaction
manager:

    >>> ztm.uninstall()
    >>> print ZopelessTransactionManager._installed
    None

We can log in as alternative users with initZopeless():

    >>> ztm = initZopeless(dbuser='testadmin')
    >>> c = cursor()
    >>> c.execute("SELECT current_user")
    >>> print c.fetchone()[0]
    testadmin
    >>> ztm.uninstall()

Or we can specify other transaction isolation modes:

    >>> from canonical.database.sqlbase import (
    ...     ISOLATION_LEVEL_SERIALIZABLE)
    >>> ztm = initZopeless(dbuser='librarian',
    ...                    isolation=ISOLATION_LEVEL_SERIALIZABLE)
    >>> c = cursor()
    >>> c.execute("SHOW transaction_isolation")
    >>> print c.fetchone()[0]
    serializable

It is also possible to change the isolation level while leaving the
remaining settings as is:

    >>> from canonical.database.sqlbase import (
    ...     ISOLATION_LEVEL_READ_COMMITTED)
    >>> ztm.set_isolation_level(ISOLATION_LEVEL_READ_COMMITTED)
    >>> c = cursor()
    >>> c.execute("SHOW transaction_isolation")
    >>> print c.fetchone()[0]
    read committed
    >>> ztm.uninstall()
