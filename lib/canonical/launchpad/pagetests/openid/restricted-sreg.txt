= Restricted OpenID Simple Registration Extension support =

The Launchpad OpenID server has restricted support for the OpenID
Simple Registration Extension.  It will only provide registration
details to certain known trust roots.

This is done in order to share the user details among the various
Canonical/Ubuntu sites participating in single sign-on.


== Behaviour for unknown trust roots ==

If a relying party attempts to request user details via the
openid.sreg extension and Launchpad does not have a particular policy
configured, then no details are disclosed in the response.

We will perform an OpenID authentication request asking for a few user
details:

    >>> from openid.fetchers import setDefaultFetcher
    >>> from canonical.launchpad.ftests.openidhelpers import (
    ...     install_consumer, make_endpoint, uninstall_consumer,
    ...     PublisherFetcher)
    >>> install_consumer()
    >>> setDefaultFetcher(PublisherFetcher())

    >>> from openid.consumer.consumer import Consumer
    >>> from openid.consumer.discover import OPENID_1_1_TYPE
    >>> from openid.sreg import SRegRequest, SRegResponse
    >>> from openid.store.memstore import MemoryStore

    >>> openid_store = MemoryStore()
    >>> consumer = Consumer(session={}, store=openid_store)

    >>> endpoint = make_endpoint(
    ...     OPENID_1_1_TYPE, 'http://openid.launchpad.dev/+id/sabdfl_oid')

    >>> request = consumer.beginWithoutDiscovery(endpoint)
    >>> request.addExtension(SRegRequest(
    ...     required=['email', 'country'],
    ...     optional=['fullname', 'nickname']))

    >>> return_to = 'http://launchpad.dev/+openid-consumer'
    >>> redirect_url = request.redirectURL(
    ...     'http://launchpad.dev/', 'http://launchpad.dev/+openid-consumer')
    >>> print redirect_url
    http://openid.launchpad.dev/+openid?...

    >>> sabdfl_browser = setupBrowser('Basic mark@hbd.com:test')
    >>> sabdfl_browser.open(redirect_url)
    >>> sabdfl_browser.getControl('Sign In', index=0).click()
    >>> print sabdfl_browser.url
    http://launchpad.dev/+openid-consumer?...
    >>> print sabdfl_browser.contents
    Consumer received GET
    ...

We have authenticated successfully:

    >>> query = dict(line.split(':', 1)
    ...              for line in sabdfl_browser.contents.splitlines()[1:])
    >>> info = consumer.complete(query)
    >>> print info.status
    success
    >>> print info.identity_url
    http://openid.launchpad.dev/+id/sabdfl_oid

But no user details are returned:

    >>> sreg_response = SRegResponse.fromSuccessResponse(info)
    >>> print sreg_response.items()
    []


== Behaviour for known trust roots ==

If we create a Relying Party configuration for the trust root, things
play out a bit differently:

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.ftests import login, logout
    >>> from canonical.launchpad.interfaces import IOpenIDRPConfigSet

    >>> login('foo.bar@canonical.com')
    >>> rpconfig = getUtility(IOpenIDRPConfigSet).new(
    ...     trust_root='http://launchpad.dev/',
    ...     displayname='Test RP', description='A test RP',
    ...     allowed_sreg=['fullname', 'nickname', 'email', 'timezone'])
    >>> logout()

Now begin another identical OpenID authentication request:

    >>> consumer = Consumer(session={}, store=openid_store)
    >>> request = consumer.beginWithoutDiscovery(endpoint)
    >>> request.addExtension(SRegRequest(
    ...     required=['email', 'country'],
    ...     optional=['fullname', 'nickname']))

    >>> return_to = 'http://launchpad.dev/+openid-consumer'
    >>> redirect_url = request.redirectURL(
    ...     'http://launchpad.dev/', 'http://launchpad.dev/+openid-consumer')
    >>> print redirect_url
    http://openid.launchpad.dev/+openid?...

    >>> sabdfl_browser.open(redirect_url)
    >>> sabdfl_browser.getControl('Sign In', index=0).click()
    >>> print sabdfl_browser.url
    http://launchpad.dev/+openid-consumer?...
    >>> print sabdfl_browser.contents
    Consumer received GET
    ...

Again, the authentication request is successful:

    >>> query = dict(line.split(':', 1)
    ...              for line in sabdfl_browser.contents.splitlines()[1:])
    >>> info = consumer.complete(query)
    >>> print info.status
    success
    >>> print info.identity_url
    http://openid.launchpad.dev/+id/sabdfl_oid

But now we have some user details.  Note that the user's country is
not returned because it was not permitted by the RP configuration.
Also, while the RP was allowed to request the time zone, it was not
sent:

    >>> sreg_response = SRegResponse.fromSuccessResponse(info)
    >>> for key, value in sorted(sreg_response.items()):
    ...     print '%s:%s' % (key, value)
    email:mark@hbd.com
    fullname:Mark Shuttleworth
    nickname:sabdfl


== Cleanup ==

    >>> login('foo.bar@canonical.com')
    >>> rpconfig = getUtility(IOpenIDRPConfigSet).getByTrustRoot(
    ...     'http://launchpad.dev/')
    >>> rpconfig.destroySelf()
    >>> logout()

    >>> setDefaultFetcher(None)
    >>> uninstall_consumer()
