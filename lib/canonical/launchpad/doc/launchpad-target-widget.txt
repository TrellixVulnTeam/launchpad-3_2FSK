= The Launchpad Target Widget =

The general +filebug allows bugs to be filed on any product or package,
and to help with this, the LaunchpadTargetWidget is used.

    >>> from canonical.launchpad.webapp.testing import verifyObject
    >>> from lp.bugs.interfaces.bug import IFrontPageBugAddForm
    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest
    >>> from canonical.widgets.launchpadtarget import LaunchpadTargetWidget

    >>> empty_request = LaunchpadTestRequest()
    >>> widget = LaunchpadTargetWidget(
    ...     IFrontPageBugAddForm['bugtarget'], empty_request)

The widget complies to both IInputWidget and IBrowserWidget.

    >>> from zope.app.form.interfaces import IInputWidget
    >>> from zope.app.form.browser.interfaces import IBrowserWidget
    >>> verifyObject(IInputWidget, widget)
    True
    >>> verifyObject(IBrowserWidget, widget)
    True

When the request is empty, the widget doesn't have any input:

    >>> widget.hasInput()
    False
    >>> widget.hasValidInput()
    False
    >>> widget.error()
    ''

It's a radio widget, so it assumes that it always will have input, so if
it doesn't it raises UnexpectedFormData:

    >>> widget.getInputValue()
    Traceback (most recent call last):
    ...
    UnexpectedFormData: No valid option was selected.

By default the first option is selected:

    >>> print widget()
    <table>
      <tr>
        <td>
          <label>
            <input class="radioType" checked="checked"
                   id="field.bugtarget.option.package" name="field.bugtarget"
                   type="radio" value="package" />
    ...
            <input class="radioType" id="field.bugtarget.option.product"
                   name="field.bugtarget" type="radio" value="product" />
    ...

== Selecting a distribution ==

If we select a distribution, the distribution with that name is returned
by getInputValue().

    >>> from lp.registry.interfaces.distribution import IDistribution
    >>> form = {'field.bugtarget': 'package',
    ...         'field.bugtarget.distribution': 'ubuntu'}
    >>> widget = LaunchpadTargetWidget(
    ...     IFrontPageBugAddForm['bugtarget'], LaunchpadTestRequest(form=form))
    >>> widget.hasInput()
    True
    >>> widget.error()
    ''
    >>> selected_distribution = widget.getInputValue()
    >>> IDistribution.providedBy(selected_distribution)
    True
    >>> selected_distribution.name
    u'ubuntu'

If a non-existent distribution name is provided, a widget error is
raised.

    >>> form['field.bugtarget.distribution'] = 'invalid'
    >>> widget = LaunchpadTargetWidget(
    ...     IFrontPageBugAddForm['bugtarget'], LaunchpadTestRequest(form=form))
    >>> widget.hasInput()
    True
    >>> selected_distribution = widget.getInputValue()
    Traceback (most recent call last):
    ...
    LaunchpadValidationError: There is no distribution named 'invalid'
                              registered in Launchpad
    >>> print widget.error()
    There is no distribution named 'invalid' registered in Launchpad

If no distribution name is given at all, a MissingInput error is raised.

    >>> del form['field.bugtarget.distribution']
    >>> widget = LaunchpadTargetWidget(
    ...     IFrontPageBugAddForm['bugtarget'], LaunchpadTestRequest(form=form))
    >>> widget.hasInput()
    True
    >>> selected_distribution = widget.getInputValue()
    Traceback (most recent call last):
    ...
    MissingInputError:...
    >>> widget.error()
    u''

== Selecting a package ==

If both a distribution and a source package are specified, a distribution
source package is returned.

    >>> from lp.registry.interfaces.distributionsourcepackage import IDistributionSourcePackage
    >>> form = {'field.bugtarget': 'package',
    ...         'field.bugtarget.distribution': 'ubuntu',
    ...         'field.bugtarget.package': 'evolution'}
    >>> widget = LaunchpadTargetWidget(
    ...     IFrontPageBugAddForm['bugtarget'], LaunchpadTestRequest(form=form))
    >>> widget.hasInput()
    True
    >>> widget.error()
    ''
    >>> selected_package = widget.getInputValue()
    >>> IDistributionSourcePackage.providedBy(selected_package)
    True
    >>> selected_package.distribution.name
    u'ubuntu'
    >>> selected_package.name
    u'evolution'

If both a distribution and a binary package are specified, the distribution
source package from which the given binary package is built is returned.

    >>> binary_package_name = 'linux-2.6.12'
    >>> form = {'field.bugtarget': 'package',
    ...         'field.bugtarget.distribution': 'ubuntu',
    ...         'field.bugtarget.package': binary_package_name}
    >>> widget = LaunchpadTargetWidget(
    ...     IFrontPageBugAddForm['bugtarget'], LaunchpadTestRequest(form=form))
    >>> widget.hasInput()
    True
    >>> widget.error()
    ''
    >>> selected_package = widget.getInputValue()
    >>> IDistributionSourcePackage.providedBy(selected_package)
    True
    >>> selected_package.distribution.name
    u'ubuntu'
    >>> selected_package.name
    u'linux-source-2.6.15'
    
The distribution source package corresponds to the specified binary package
name:
    
    >>> print [package.name for release in selected_package.releases 
    ...                     for package in release.binary_package_names]
    [...'linux-2.6.12'...]
    
If a non-existent package is selected, a widget error is raised.

    >>> form['field.bugtarget.package'] = 'non-existent'
    >>> widget = LaunchpadTargetWidget(
    ...     IFrontPageBugAddForm['bugtarget'], LaunchpadTestRequest(form=form))
    >>> widget.hasInput()
    True
    >>> selected_package = widget.getInputValue()
    Traceback (most recent call last):
    ...
    LaunchpadValidationError: There is no package name 'non-existent'
                              published in Ubuntu
    >>> print widget.error()
    There is no package name 'non-existent' published in Ubuntu

The same error is displayed when an existing package name that
isn't published is selected.

    >>> form['field.bugtarget.package'] = 'thunderbird'
    >>> widget = LaunchpadTargetWidget(
    ...     IFrontPageBugAddForm['bugtarget'], LaunchpadTestRequest(form=form))
    >>> widget.hasInput()
    True
    >>> selected_package = widget.getInputValue()
    Traceback (most recent call last):
    ...
    LaunchpadValidationError: There is no package name 'thunderbird'
                              published in Ubuntu
    >>> print widget.error()
    There is no package name 'thunderbird' published in Ubuntu

== Selecting a product ==

If a product is selected, the product with the given name is returned.

    >>> from lp.registry.interfaces.product import IProduct
    >>> form = {'field.bugtarget': 'product',
    ...         'field.bugtarget.product': 'firefox'}
    >>> widget = LaunchpadTargetWidget(
    ...     IFrontPageBugAddForm['bugtarget'], LaunchpadTestRequest(form=form))
    >>> widget.hasInput()
    True
    >>> widget.error()
    ''
    >>> selected_product = widget.getInputValue()
    >>> IProduct.providedBy(selected_product)
    True
    >>> selected_product.name
    u'firefox'

If a non-existent product name is entered, a widget error is raised.

    >>> form['field.bugtarget.product'] = u'non-existent'
    >>> widget = LaunchpadTargetWidget(
    ...     IFrontPageBugAddForm['bugtarget'], LaunchpadTestRequest(form=form))
    >>> widget.hasInput()
    True
    >>> selected_product = widget.getInputValue()
    Traceback (most recent call last):
    ...
    LaunchpadValidationError: There is no project named 'non-existent'
                              registered in Launchpad
    >>> print widget.error()
    There is no project named 'non-existent' registered in Launchpad

If no product name is given at all, a widget error is raised.

    >>> del form['field.bugtarget.product']
    >>> widget = LaunchpadTargetWidget(
    ...     IFrontPageBugAddForm['bugtarget'], LaunchpadTestRequest(form=form))
    >>> widget.hasInput()
    True
    >>> selected_distribution = widget.getInputValue()
    Traceback (most recent call last):
    ...
    LaunchpadValidationError: Please enter a project name
    >>> print widget.error()
    Please enter a project name

== setRenderedValue() ==

In order to initialize the widget with a value, setRenderedValue() is
used. Passing a product to it will select the 'product' radio button, 
as well as displaying the product name in the product widget. The 
distribution widget is set to 'ubuntu' because it is the default
value when there is no distribution.

    >>> from lp.registry.interfaces.product import IProductSet
    >>> widget = LaunchpadTargetWidget(
    ...     IFrontPageBugAddForm['bugtarget'], empty_request)
    >>> widget.setRenderedValue(getUtility(IProductSet).getByName('firefox'))
    >>> print widget()
    <table>
    ...
      <input class="radioType"
             id="field.bugtarget.option.package" name="field.bugtarget"
             type="radio" value="package" />
    ...
      <option selected="selected" value="ubuntu">Ubuntu Linux</option>
    ...
      <input class="radioType" checked="checked"
             id="field.bugtarget.option.product"
             name="field.bugtarget" type="radio" value="product" />
    ...
      <input type="text" value="firefox" id="field.bugtarget.product"
             name="field.bugtarget.product" size="20"
             maxlength=""
             onKeyPress="selectWidget('field.bugtarget.option.product', event)"
             style="" class="" />
    ...

Passing a distribution will select the 'package' radio button and select
the distribution in the drop-down list.

    >>> from lp.registry.interfaces.distribution import IDistributionSet
    >>> widget = LaunchpadTargetWidget(
    ...     IFrontPageBugAddForm['bugtarget'], empty_request)
    >>> debian = getUtility(IDistributionSet).getByName('debian')
    >>> widget.setRenderedValue(debian)
    >>> print widget()
    <table>
    ...
      <input class="radioType" checked="checked"
             id="field.bugtarget.option.package" name="field.bugtarget"
             type="radio" value="package" />
    ...
      <option selected="selected" value="debian">Debian GNU/Linux</option>
    ...
      <input class="radioType"
             id="field.bugtarget.option.product"
             name="field.bugtarget" type="radio" value="product" />
    ...

Passing in a distribution package will select the 'package'
radio button, select the distribution in the drop-down list, and set the
package widget to the package name.

    >>> widget = LaunchpadTargetWidget(
    ...     IFrontPageBugAddForm['bugtarget'], empty_request)
    >>> debian_evolution = debian.getSourcePackage('evolution')
    >>> widget.setRenderedValue(debian_evolution)
    >>> print widget()
    <table>
    ...
      <input class="radioType" checked="checked"
             id="field.bugtarget.option.package" name="field.bugtarget"
             type="radio" value="package" />
    ...
      <option selected="selected" value="debian">Debian GNU/Linux</option>
    ...
      <input type="text" value="evolution" id="field.bugtarget.package"
             name="field.bugtarget.package" size="20"
             maxlength=""
             onKeyPress="selectWidget('field.bugtarget.option.package', event)"
             style="" class="" />
    ...
      <input class="radioType"
             id="field.bugtarget.option.product"
             name="field.bugtarget" type="radio" value="product" />
    ...
