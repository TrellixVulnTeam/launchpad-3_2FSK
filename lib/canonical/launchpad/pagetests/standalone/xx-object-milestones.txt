= Milestones =


== Milestone listings ==

Products, distributions, product series, distribution series and projects have
a page in which all of their milestones are listed.


=== Distributions ===

    >>> anon_browser.open('http://launchpad.dev/debian/+milestones')
    >>> anon_browser.url
    'http://launchpad.dev/debian/+milestones'

    >>> for li in find_tags_by_class(anon_browser.contents, 'milestone'):
    ...     print extract_text(li)
    3.1-rc1 Expected for 2056-02-16 For WOODY
    3.1 Expected for 2056-05-16 For WOODY


=== Distribution Series ===

    >>> anon_browser.open('http://launchpad.dev/debian/woody/+milestones')
    >>> for li in find_tags_by_class(anon_browser.contents, 'milestone'):
    ...     print extract_text(li)
    3.1-rc1 Expected for 2056-02-16 For WOODY
    3.1 Expected for 2056-05-16 For WOODY

    >>> anon_browser.open('http://launchpad.dev/debian/sarge/+milestones')
    >>> for li in find_tags_by_class(anon_browser.contents, 'milestone'):
    ...     print extract_text(li)


=== Products ===

    >>> anon_browser.open('http://launchpad.dev/firefox/+milestones')
    >>> anon_browser.url
    'http://launchpad.dev/firefox/+milestones'

    >>> for li in find_tags_by_class(anon_browser.contents, 'milestone'):
    ...     print extract_text(li)
    1.0 Expected for 2056-10-16 For Mozilla Firefox Series: trunk


=== Product Series ===

    >>> anon_browser.open('http://launchpad.dev/firefox/trunk/+milestones')
    >>> for li in find_tags_by_class(anon_browser.contents, 'milestone'):
    ...     print extract_text(li)
    1.0 Expected for 2056-10-16 For Mozilla Firefox Series: trunk

    >>> anon_browser.open('http://launchpad.dev/firefox/1.0/+milestones')
    >>> for li in find_tags_by_class(anon_browser.contents, 'milestone'):
    ...     print extract_text(li)


=== Projects ===

The main project page has a portlet "Active milestones":

    >>> from canonical.launchpad.ftests import login, logout
    >>> from canonical.launchpad.ftests.test_project_milestone import (
    ...     ProjectMilestoneTest)
    >>> login('foo.bar@canonical.com')
    >>> test_helper = ProjectMilestoneTest(helper_only=True)
    >>> test_helper.setUpProjectMilestoneTests()
    >>> logout()
    >>> anon_browser.open('http://launchpad.dev/gnome')
    >>> milestones = find_portlet(anon_browser.contents, 'Active milestones')
    >>> print extract_text(milestones)
    Active milestones
    1.1
    1.1.
    1.2
    All milestones

The page "All milestones" lists all milestones, including the inactive ones:

    >>> anon_browser.getLink('All milestones').click()
    >>> for milestone in find_tags_by_class(
    ...     anon_browser.contents, 'milestone'):
    ...     print extract_text(milestone)
    1.1 Expected for 2010-04-01
    1.1. Expected for 2010-04-02
    1.2 Expected for 2011-04-01
    1.3 (Inactive) Expected for 2012-04-01


== Individual milestones ==

Pages for the individual milestones show all specifications and bugtasks
associated with that milestone for products of this project:

    >>> anon_browser.getLink('1.1').click()
    >>> specs = find_tag_by_id(anon_browser.contents, 'milestone_specs')
    >>> print extract_text(specs)
    Priority Product Specification Assignee Delivery ...
    High Evolution Title evolution specification ... Unknown ...
    High gnomebaker Title gnomebaker specification ... Unknown

    >>> bugtasks = find_tag_by_id(anon_browser.contents, 'milestone_bugtasks')
    >>> print extract_text(bugtasks)
    Report Product Importance Assignee Status ...
    Milestone test bug for evolution Evolution ... Undecided ... Confirmed ...
    Milestone test bug for gnomebaker gnomebaker ... Undecided ... Confirmed


=== Duplicate bugs ===

Milestone bug listings do not show bugs that are marked as duplicates of other
bugs.

To demonstrate this, we'll begin by filing a couple of bugs for the Mozilla
Firefox product:

    >>> file_bug_url = 'http://bugs.launchpad.dev/firefox/+filebug-advanced'
    >>> admin_browser.open(file_bug_url)
    >>> admin_browser.getControl('Summary').value = 'Test Bug 1'
    >>> admin_browser.getControl('Further information').value = 'Test Bug 1'
    >>> admin_browser.getControl('Submit').click()
    >>> print admin_browser.url
    http://bugs.launchpad.dev/firefox/+bug/15

    >>> admin_browser.open(file_bug_url)
    >>> admin_browser.getControl('Summary').value = 'Test Bug 2'
    >>> admin_browser.getControl('Further information').value = 'Test Bug 2'
    >>> admin_browser.getControl('Submit').click()
    >>> print admin_browser.url
    http://bugs.launchpad.dev/firefox/+bug/16

Next, we'll target each bug to the 1.0 milestone:

    >>> milestone_value = ['Mozilla Firefox: 1.0']

    >>> edit_url = 'http://bugs.launchpad.dev/firefox/+bug/15/+editstatus'
    >>> admin_browser.open(edit_url)
    >>> admin_browser.getControl('Milestone').displayValue = milestone_value
    >>> admin_browser.getControl('Save Changes').click()

    >>> edit_url = 'http://bugs.launchpad.dev/firefox/+bug/16/+editstatus'
    >>> admin_browser.open(edit_url)
    >>> admin_browser.getControl('Milestone').displayValue = milestone_value
    >>> admin_browser.getControl('Save Changes').click()

Observe that both bugs are listed in the 1.0 milestone listing:

    >>> admin_browser.open('http://launchpad.dev/firefox/+milestone/1.0')

    >>> print admin_browser.getLink('Test Bug 1')
    <Link text='Test Bug 1' url='http://bugs.launchpad.dev/bugs/15'>

    >>> print admin_browser.getLink('Test Bug 2')
    <Link text='Test Bug 2' url='http://bugs.launchpad.dev/bugs/16'>

We'll mark the second bug as a duplicate of the first:

    >>> duplicate_url = 'http://bugs.launchpad.dev/firefox/+bug/16/+duplicate'
    >>> admin_browser.open(duplicate_url)
    >>> admin_browser.getControl('Duplicate').value = '15'
    >>> admin_browser.getControl('Change').click()

Now observe that only the first bug is listed in the 1.0 milestone listing:

    >>> admin_browser.open('http://launchpad.dev/firefox/+milestone/1.0')

    >>> print admin_browser.getLink('Test Bug 1')
    <Link text='Test Bug 1' url='http://bugs.launchpad.dev/bugs/15'>

    >>> print admin_browser.getLink('Test Bug 2')
    Traceback (most recent call last):
        ...
    LinkNotFoundError

