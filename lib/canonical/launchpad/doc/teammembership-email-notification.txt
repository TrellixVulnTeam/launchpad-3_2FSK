= Mail notifications for membership changes =

Whenever a membership status is changed, we should notify the team admins and
the member whose membership changed. There's a few cases where we might want
to notify only the team admins, but in most of the cases we'll be sending two
similar (but not identical) notifications: one for all team admins and another
for the member.

    >>> def by_to_addrs(a, b):
    ...     return cmp(a[1], b[1])

    >>> def setStatus(membership, status, reviewer=None, comment=None):
    ...     membership.setStatus(status, reviewer=reviewer,
    ...     reviewercomment=comment)
    ...     flush_database_updates()
    ...     transaction.commit()

    >>> import email
    >>> def pop_notifications():
    ...     stub.test_emails.sort(by_to_addrs)
    ...     notifications = [
    ...         email.message_from_string(raw_message)
    ...         for fromaddr, toaddrs, raw_message in stub.test_emails]
    ...     stub.test_emails = []
    ...     return notifications

    >>> from zope.component import getUtility
    >>> from zope.event import notify
    >>> from canonical.launchpad.event.team import JoinTeamRequestEvent
    >>> from canonical.launchpad.interfaces import (
    ...     IPersonSet, ITeamMembershipSet)
    >>> from canonical.launchpad.mail import stub
    >>> from canonical.lp.dbschema import TeamMembershipStatus
    >>> personset = getUtility(IPersonSet)
    >>> membershipset = getUtility(ITeamMembershipSet)
    >>> sabdfl = personset.getByName('sabdfl')
    >>> sampleperson = personset.getByName('name12')
    >>> ubuntu_team = personset.getByName('ubuntu-team')

Now Sample Person proposes himself as a member of the Ubuntu Team. This
generates a notification email only Ubuntu Team administrators.

    >>> sampleperson.join(ubuntu_team)
    True
    >>> membership = membershipset.getByPersonAndTeam(sampleperson, ubuntu_team)
    >>> membership.status.title
    'Proposed'

    >>> notify(JoinTeamRequestEvent(membership.person, membership.team))
    >>> flush_database_updates()
    >>> transaction.commit()
    >>> len(stub.test_emails)
    1
    >>> [admins_notification] = pop_notifications()
    >>> admins_notification['To']
    'foo.bar@canonical.com,jeff.waugh@ubuntulinux.com,mark@hbd.com'
    >>> admins_notification['Subject']
    'Launchpad: name12 wants to be a member of ubuntu-team'
    >>> print admins_notification.get_payload() #doctest: -NORMALIZE_WHITESPACE
    Hello
    <BLANKLINE>
    Sample Person (name12) wants to be a member of Ubuntu Team (ubuntu-team),
    but this is a moderated team, so that membership has to be approved.
    You can approve, decline or leave it as proposed by following the link
    below.
    <BLANKLINE>
        http://launchpad.dev/~ubuntu-team/+member/name12
    <BLANKLINE>
    Regards,
    The Launchpad team
    <BLANKLINE>


Declining a proposed member should generate notifications for both the member
and team admins.

    >>> stub.test_emails = []
    >>> setStatus(membership, TeamMembershipStatus.DECLINED, reviewer=sabdfl)
    >>> len(stub.test_emails)
    2

    >>> admins_notification, member_notification = pop_notifications()
    >>> admins_notification['To']
    'foo.bar@canonical.com,jeff.waugh@ubuntulinux.com,mark@hbd.com'
    >>> admins_notification['Subject']
    'Launchpad: Membership change: name12 in ubuntu-team'
    >>> print admins_notification.get_payload() #doctest: -NORMALIZE_WHITESPACE
    Hello,
    <BLANKLINE>
    The membership status of Sample Person (name12) in the team
    Ubuntu Team (ubuntu-team) was changed by Mark Shuttleworth (sabdfl)
    from Proposed to Declined.
    <BLANKLINE>
    <BLANKLINE>
    Regards,
    The Launchpad team
    <BLANKLINE>

    >>> member_notification['To']
    'test@canonical.com' 
    >>> member_notification['Subject']
    'Launchpad: Membership change: name12 in ubuntu-team'
    >>> print member_notification.get_payload() #doctest: -NORMALIZE_WHITESPACE
    Hello,
    <BLANKLINE>
    The status of your membership in the team Ubuntu Team (ubuntu-team)
    was changed by Mark Shuttleworth (sabdfl) from Proposed to Declined.
    <BLANKLINE>
    <BLANKLINE>
    Regards,
    The Launchpad team
    <BLANKLINE>


The same goes for approving a proposed member.
    
    >>> daf = getUtility(IPersonSet).getByName('daf')
    >>> daf.join(ubuntu_team)
    True
    >>> daf_membership = membershipset.getByPersonAndTeam(daf, ubuntu_team)
    >>> daf_membership.status.title
    'Proposed'

    >>> setStatus(daf_membership, TeamMembershipStatus.APPROVED, 
    ...           reviewer=sabdfl, comment='This is a nice guy; I like him')
    >>> stub.test_emails.sort(by_to_addrs)
    >>> len(stub.test_emails)
    2
    >>> member_notification, admins_notification = pop_notifications()
    >>> admins_notification['To']
    'foo.bar@canonical.com,jeff.waugh@ubuntulinux.com,mark@hbd.com'
    >>> admins_notification['Subject']
    'Launchpad: Membership change: daf in ubuntu-team'
    >>> print admins_notification.get_payload() #doctest: -NORMALIZE_WHITESPACE
    Hello,
    <BLANKLINE>
    The membership status of Dafydd Harries (daf) in the team
    Ubuntu Team (ubuntu-team) was changed by Mark Shuttleworth (sabdfl)
    from Proposed to Approved.
    <BLANKLINE>
    Comment: =
    <BLANKLINE>
    This is a nice guy; I like him
    <BLANKLINE>
    <BLANKLINE>
    Regards,
    The Launchpad team
    <BLANKLINE>

    >>> member_notification['To']
    'daf@canonical.com'
    >>> member_notification['Subject']
    'Launchpad: Membership change: daf in ubuntu-team'
    >>> print member_notification.get_payload() #doctest: -NORMALIZE_WHITESPACE
    Hello,
    <BLANKLINE>
    The status of your membership in the team Ubuntu Team (ubuntu-team)
    was changed by Mark Shuttleworth (sabdfl) from Proposed to Approved.
    <BLANKLINE>
    Comment: =
    <BLANKLINE>
    This is a nice guy; I like him
    <BLANKLINE>
    <BLANKLINE>
    Regards,
    The Launchpad team
    <BLANKLINE>


The same for deactivating a membership.

    >>> stub.test_emails = []
    >>> setStatus(daf_membership, TeamMembershipStatus.DEACTIVATED,
    ...           reviewer=sabdfl)
    >>> stub.test_emails.sort(by_to_addrs)
    >>> len(stub.test_emails)
    2
    >>> member_notification, admins_notification = pop_notifications()
    >>> admins_notification['To']
    'foo.bar@canonical.com,jeff.waugh@ubuntulinux.com,mark@hbd.com'
    >>> admins_notification['Subject']
    'Launchpad: Membership change: daf in ubuntu-team'
    >>> print admins_notification.get_payload() #doctest: -NORMALIZE_WHITESPACE
    Hello,
    <BLANKLINE>
    The membership status of Dafydd Harries (daf) in the team
    Ubuntu Team (ubuntu-team) was changed by Mark Shuttleworth (sabdfl)
    from Approved to Deactivated.
    <BLANKLINE>
    <BLANKLINE>
    Regards,
    The Launchpad team
    <BLANKLINE>

    >>> member_notification['To']
    'daf@canonical.com'
    >>> member_notification['Subject']
    'Launchpad: Membership change: daf in ubuntu-team'
    >>> print member_notification.get_payload() #doctest: -NORMALIZE_WHITESPACE
    Hello,
    <BLANKLINE>
    The status of your membership in the team Ubuntu Team (ubuntu-team)
    was changed by Mark Shuttleworth (sabdfl) from Approved to Deactivated.
    <BLANKLINE>
    <BLANKLINE>
    Regards,
    The Launchpad team
    <BLANKLINE>


== Some special cases ==

When creating a new team, the owner has his membership's status changed from
approved to admin, but he won't get a notification of that.

    >>> team = personset.newTeam(sabdfl, 'testteam', 'Test')
    >>> transaction.commit()
    >>> len(stub.test_emails)
    0

    # Other tests expect an empty stub.test_emails, but if this one above
    # fails, I don't want a non-empty stub.test_emails to cause the tests
    # below to fail too.
    >>> stub.test_emails = []

If member named 'name16' has his membership's status changed for team
'ubuntu-team', in which he's also an administrator, he'll only get one email
notification.

    >>> cprov = personset.getByName('cprov')
    >>> cprov_membership = membershipset.getByPersonAndTeam(cprov, ubuntu_team)
    >>> setStatus(cprov_membership, TeamMembershipStatus.ADMIN, reviewer=sabdfl)
    >>> len(stub.test_emails)
    2
    >>> member_notification, admins_notification = pop_notifications()
    >>> admins_notification['To']
    'foo.bar@canonical.com,jeff.waugh@ubuntulinux.com,mark@hbd.com'
    >>> member_notification['To']
    'celso.providelo@canonical.com'

If member is actually a team, we should use a different email template because
it doesn't make sense to talk about "your membership" or things like that.


When an expiration date is changed, we also need to use a separate template
because the status wasn't actually changed.
