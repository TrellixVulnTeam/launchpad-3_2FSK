= ProductSeries translations =

This page shows a list of PO templates contained within a given
product series.

In this case, we're asking for the translation template list for Mozilla
Firefox 0.9.  (This series is translatable, so we are not forwarded to
its upload page).

    >>> anon_browser.open('http://translations.launchpad.dev/firefox/trunk')
    >>> print anon_browser.title
    Translation templates for trunk

    >>> print find_main_content(anon_browser.contents).findAll('h1')[0]
    <h1> Translation templates for Mozilla Firefox Series: trunk </h1>

Check to be sure that listing available resources to translate for a product
series is working.

    >>> anon_browser.open('http://translations.launchpad.dev/evolution/trunk')
    >>> print anon_browser.title
    Translation templates for trunk

    >>> print anon_browser.title
    Translation templates for trunk

    >>> print anon_browser.contents
    <...
    <tr id="evolution-2.2_af">
    <BLANKLINE>
    <td>
    <a href="/evolution/trunk/+pots/evolution-2.2/af/+translate">Afrikaans</a>
    </td>
    ...
    <td> <span class="sortkey">22</span>
    ...


== Upload page and Translations use ==

If the product a series belongs to is not configured to use Launchpad
for Translations, the distroseries translations upload page will say so.
Otherwise, people may keep trying to upload their files rather than
finding and throwing the switch.

    >>> owner_browser = setupBrowser('Basic test@canonical.com:test')

    >>> def find_notice(contents):
    ...     """Find & return "not set up to use Translations" notice.
    ...
    ...     :return: notice text, or None.
    ...     """
    ...     output = None
    ...     notices = find_tags_by_class(
    ...         contents, 'not-translated-in-launchpad')
    ...     for tag in notices:
    ...         if output is None:
    ...             output = ''
    ...         output += tag.renderContents()
    ...     return output

Evolution is set up to use Launchpad Translations, so the notice does
not appear there.

    >>> owner_browser.open(
    ...     'http://translations.launchpad.dev/'
    ...     'evolution/trunk/+translations-upload')
    >>> print find_notice(owner_browser.contents)
    None

Nor does it appear on the template upload pages.

    >>> owner_browser.open(
    ...     'http://translations.launchpad.dev/'
    ...     'evolution/trunk/+pots/evolution-2.2/+upload')
    >>> print find_notice(owner_browser.contents)
    None

Now this is changed: Evolution's owner configures it not to use
Launchpad Translations.

    # Use the raw DB object to bypass the security proxy.
    >>> from canonical.launchpad.database.product import Product
    >>> Product.byName('evolution').official_rosetta = False

When the owner now visits the upload page for trunk, there's a notice.

    >>> owner_browser.open(
    ...     'http://translations.launchpad.dev/'
    ...     'bazaar/trunk/+translations-upload')
    >>> print find_notice(owner_browser.contents)
    <...>
    This project is not configured to use Launchpad for translations.
    </...>
    You can change this in the
    <a...> project settings</a>.

The notice links to the project settings where the option can be set.

    >>> owner_browser.getLink('project settings').click()
    >>> print owner_browser.url
    http://.../bazaar/+edit

An administrator also sees the notice.

    >>> admin_browser.open(
    ...     'http://translations.launchpad.dev/'
    ...     'bazaar/trunk/+translations-upload')
    >>> print find_notice(admin_browser.contents)
    <...>
    This project is not configured to use Launchpad for translations.
    </...>
    You can change this in the
    <a...> project settings</a>.

A Translations admin who is neither a Launchpad admin nor the project
owner (and so won't be able to change the project's settings) sees the
notice but not the link to the project's settings.

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.interfaces import (
    ...     ILaunchpadCelebrities, IPersonSet, ITeamMembershipSet,
    ...     TeamMembershipStatus)
    >>> from canonical.launchpad.testing.factory import (
    ...     LaunchpadObjectFactory)

    # Log in so as to be able to create objects
    >>> admin_email = 'foo.bar@canonical.com'
    >>> login(admin_email)
    >>> admin_user = getUtility(IPersonSet).getByEmail(admin_email)
    >>> factory = LaunchpadObjectFactory()

    >>> jtv = factory.makePerson(
    ...     email='jtv-sample@canonical.com', password='test')
    >>> celebs = getUtility(ILaunchpadCelebrities)
    >>> membership = getUtility(ITeamMembershipSet).new(
    ...     jtv, celebs.rosetta_experts, TeamMembershipStatus.APPROVED,
    ...     admin_user)
    >>> from storm.store import Store
    >>> Store.of(membership).flush()
    >>> logout()

    >>> jtv_browser = setupBrowser('Basic jtv-sample@canonical.com:test')
    >>> jtv_browser.open(
    ...     'http://translations.launchpad.dev/'
    ...     'bazaar/trunk/+translations-upload')

    >>> print find_notice(jtv_browser.contents)
    <...>
    This project is not configured to use Launchpad for translations.
    </strong>

