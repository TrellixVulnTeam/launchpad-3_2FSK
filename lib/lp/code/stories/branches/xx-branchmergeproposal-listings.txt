==================================
Listings of branch merge proposals
==================================

From both the main code page for a person or team, or a product, it is
possible to go to a listing of merge proposals that are either needing a
review, or have been approved for landing.


Create a new product and merge proposals for it
===============================================

Log-in an administrator to avoid permission problems.

    >>> login('foo.bar@canonical.com')
    >>> fooix = factory.makeProduct(name='fooix')

Make a trunk branch and set as the development focus branch.

    >>> trunk = factory.makeProductBranch(product=fooix)
    >>> fooix.development_focus.branch = trunk

Make a single proposal for albert that is needing review by robert.

    >>> albert = factory.makePerson(
    ...     name='albert', email="albert@example.com", password="test")
    >>> robert = factory.makePerson(name='robert')
    >>> branch = factory.makeProductBranch(
    ...     owner=albert, product=fooix, name='review')
    >>> proposal = branch.addLandingTarget(albert, trunk)
    >>> proposal.requestReview()
    >>> _unused_vote = proposal.nominateReviewer(robert, albert,
    ...                                          review_type='ui')

Make two proposals for bob, one needing review, and one approved.

    >>> bob = factory.makePerson(name='bob')
    >>> branch = factory.makeProductBranch(
    ...     owner=bob, product=fooix, name='review')
    >>> proposal = branch.addLandingTarget(bob, trunk)
    >>> proposal.requestReview()
    >>> # Ensure the date_created is later to ensure stable ordering.
    >>> from datetime import timedelta
    >>> from zope.security.proxy import removeSecurityProxy
    >>> removeSecurityProxy(proposal).date_created += timedelta(1)

    >>> branch = factory.makeProductBranch(
    ...     owner=bob, product=fooix, name='approved')
    >>> proposal = branch.addLandingTarget(bob, trunk)
    >>> proposal.approveBranch(trunk.owner, 'some-revision')
    >>> removeSecurityProxy(proposal).date_created += timedelta(2)
    >>> logout()

    >>> import transaction
    >>> transaction.commit()


Listings from the main product code page
========================================

Below the branch counts in the main content, there is a paragraph that lists
the number of active reviews and approved merges.

    >>> browser.open('http://code.launchpad.dev/fooix')
    >>> print_tag_with_id(browser.contents, 'merge-counts')
    3 active reviews or unmerged proposals

The 'active reviews or unmerged proposals' text links to the active reviews page.

    >>> browser.getLink('active reviews or unmerged proposals').click()
    >>> print browser.title
    +activereviews : Fooix

The proposals are listed in a table that shows the source and target branches,
who requested the merge, the date the review was requested, and the vote
summary.

    >>> print_tag_with_id(browser.contents, "proposals")
    Approved reviews ready to land
    Branch Merge Proposal   Requested By          Activity
    lp://dev/~bob/fooix/approved &rArr; lp://dev/fooix
            Bob                                   None
    Reviews requested or in progress
    Branch Merge Proposal   Requested By          Activity
    lp://dev/~bob/fooix/review  &rArr; lp://dev/fooix
            Bob           ...                     None
    lp://dev/~albert/fooix/review &rArr; lp://dev/fooix
            Albert        ...                     None


Listings from the main person code page
=======================================

The summary before the branch listings also shows the number of active reviews
and approved merges.

    >>> browser.open('http://code.launchpad.dev/~albert')
    >>> print_tag_with_id(browser.contents, 'page-summary')
    1 owned branch, 1 registered branch, 1 subscribed branch
    1 active review or unmerged proposal

The person's active reviews also lists all of their currently requested
reviews.

    >>> browser.open('http://code.launchpad.dev/~robert/+activereviews')
    >>> print_tag_with_id(browser.contents, 'proposals')
    Reviews Robert has to do
    Branch Merge Proposal             Requested By    Activity
    lp://dev/~albert/fooix/review ... Albert ...      None

The requested reviews for a team will only ever show pending reviews, as a
team cannot approve a review, only a person can.

    >>> login('foo.bar@canonical.com')
    >>> team = factory.makeTeam(
    ...     owner=albert, name="a-team", displayname="A-Team")
    >>> logout()

    >>> browser = setupBrowser(auth='Basic albert@example.com:test')
    >>> browser.open('http://code.launchpad.dev/~albert/fooix/review')
    >>> browser.getLink('Ready for review').click()
    >>> browser.getLink('Request another review').click()
    >>> browser.getControl('Reviewer').value = 'a-team'
    >>> browser.getControl('Review type').value = 'tag'
    >>> browser.getControl('Request Review').click()

Since Albert is in the A-Team, he can do the pending review.

    >>> browser.open('http://code.launchpad.dev/~a-team')
    >>> browser.getLink('active review').click()
    >>> print_tag_with_id(browser.contents, 'proposals')
    Requested reviews I can do
    Branch Merge Proposal             Requested By    Activity
    lp://dev/~albert/fooix/review ... Albert ...      None
