== Mailing list subscription management ==

==Setup==

Carlos has one email address registered with the site. We need to give
him another one so we can test switching between them.

    >>> browser = setupBrowser(auth='Basic carlos@canonical.com:test')
    >>> browser.open('http://launchpad.dev/~carlos/+editemails')
    >>> browser.getControl('Add a new address').value = 'carlos@test.com'
    >>> browser.getControl('Add', index=1).click()

Carlos receives an email containing a login token URL.

    >>> from canonical.launchpad.mail import stub
    >>> from canonical.launchpad.ftests.logintoken import (
    ...     get_token_url_from_email)
    >>> from_addr, to_addrs, raw_msg = stub.test_emails.pop()
    >>> to_addrs
    ['carlos@test.com']
    >>> token_url = get_token_url_from_email(raw_msg)
    >>> token_url
    'http://launchpad.dev/token/...'

He follows the link to confirm his second email address.

    >>> browser.open(token_url)
    >>> browser.title
    'Confirm e-mail address'
    >>> browser.getControl('Continue').click()
    >>> browser.title
    'Carlos Perell\xc3\xb3 Mar\xc3\xadn in Launchpad'
    >>> for msg in get_feedback_messages(browser.contents):
    ...     print msg
    Email address successfully confirmed.

Now he's got a confirmed address in addition to his preferred address:

    >>> browser.getLink('Change e-mail settings').click()
    >>> confirmed = browser.getControl(name="field.VALIDATED_SELECTED")
    >>> confirmed.displayOptions
    ['\xa0carlos@canonical.com', '\xa0carlos@test.com']

Okay, that's the email setup. Now the teams. Carlos belongs to four
teams: `admins`, `rosetta-admins`, `testing-spanish-team`, and
`ubuntu-translators`. We're going to give mailing lists to `admins`
and `rosetta-admins`, but only `admins` will actually have its mailing
list used as its contact address. We're also going to create a mailing
list for `testing-spanish-team`, but not approve it.

    >>> from canonical.launchpad.database import MailingListSet, Person
    >>> from canonical.launchpad.interfaces import (MailingListStatus,
    ...      ILaunchpadCelebrities)
    >>> from canonical.launchpad.ftests import login, logout
    >>> from zope.component import getUtility
    >>> def setup_list_for(team_name, make_contact_address):
    ...     browser.open('http://launchpad.dev/~%s' % team_name)
    ...     browser.getLink('Configure mailing list').click()
    ...     browser.getControl('Apply for Mailing List').click()
    ...
    ...     list_set = MailingListSet()
    ...     mailing_list = list_set.get(team_name)
    ...     login('foo.bar@canonical.com')
    ...     experts = getUtility(ILaunchpadCelebrities).mailing_list_experts
    ...     admin = list(experts.allmembers)[0]
    ...     mailing_list.review(admin, MailingListStatus.APPROVED)
    ...     mailing_list.syncUpdate()
    ...     mailing_list.startConstructing()
    ...     mailing_list.syncUpdate()
    ...     mailing_list.transitionToStatus(MailingListStatus.ACTIVE)
    ...     mailing_list.syncUpdate()
    ...     logout()
    ...
    ...     if make_contact_address:
    ...        browser.getLink('Change contact address').click()
    ...        browser.getControl('The Launchpad mailing list').selected = True
    ...        browser.getControl('Change').click()

    >>> setup_list_for('admins', True)
    >>> setup_list_for('rosetta-admins', False)
    >>> browser.open('http://launchpad.dev/~testing-spanish-team')
    >>> browser.getLink('Configure mailing list').click()
    >>> browser.getControl('Apply for Mailing List').click()

==Subscription management==

To subscribe to a mailing list, Carlos needs to use his subscription
management screen, which shows a subscription control for every
mailing list.

    >>> browser.open('http://launchpad.dev/~carlos/+editemails')
    >>> control = browser.getControl(name='field.subscription.admins')
    >>> control2 = browser.getControl(name='field.subscription.rosetta-admins')

    >>> for t in find_tags_by_class(browser.contents, 'subscription'):
    ...     print t.name, t.value
    >>> print control.value
    ["Don't subscribe"]
    >>> print control2.value
    ["Don't subscribe"]

Note that a mailing list shows up whether or not it's currently the
team contact method. Also note that the not-fully-created mailing list
doesn't show up.

Carlos can subscribe to a list under his preferred email address:

    >>> control = browser.getControl(name='field.subscription.admins')
    >>> control.value = ['Preferred address']
    >>> browser.getControl('Update Subscriptions').click()

    >>> for msg in get_feedback_messages(browser.contents):
    ...     print msg
    Subscriptions updated.

    >>> control = browser.getControl(name='field.subscription.admins')
    >>> control2 = browser.getControl(name='field.subscription.rosetta-admins')
    >>> print control.value
    ['Preferred address']
    >>> print control2.value
    ["Don't subscribe"]

He can subscribe to a list under one or the other of his
addresses. Note that having mail delivered to the address that happens
to be your preferred address right now, is *not* the same as having
mail delivered to whatever your preferred address is at the time of
delivery.

    >>> control.value = ['carlos@canonical.com']
    >>> control2.value = ['carlos@test.com']
    >>> browser.getControl('Update Subscriptions').click()

    >>> control = browser.getControl(name='field.subscription.admins')
    >>> control2 = browser.getControl(name='field.subscription.rosetta-admins')
    >>> print control.value
    ['carlos@canonical.com']
    >>> print control2.value
    ['carlos@test.com']

He can switch from one address to another, or from a specific address
to the preferred address.

    >>> control.value = ['Preferred address']
    >>> control2.value = ['carlos@canonical.com']
    >>> browser.getControl('Update Subscriptions').click()

    >>> control = browser.getControl(name='field.subscription.admins')
    >>> control2 = browser.getControl(name='field.subscription.rosetta-admins')
    >>> print control.value
    ['Preferred address']
    >>> print control2.value
    ['carlos@canonical.com']

Finally, he can unsubscribe from lists.

    >>> control = browser.getControl(name='field.subscription.admins')
    >>> control2 = browser.getControl(name='field.subscription.rosetta-admins')
    >>> control.value = ["Don't subscribe"]
    >>> control2.value = ["Don't subscribe"]
    >>> browser.getControl('Update Subscriptions').click()

    >>> control = browser.getControl(name='field.subscription.admins')
    >>> control2 = browser.getControl(name='field.subscription.rosetta-admins')
    >>> print control.value
    ["Don't subscribe"]
    >>> print control2.value
    ["Don't subscribe"]
