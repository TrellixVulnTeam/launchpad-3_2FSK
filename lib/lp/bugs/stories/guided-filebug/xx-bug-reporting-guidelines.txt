= Bug Reporting Guidelines =

Some helpful explanatory text - guidelines - can be set for
distributions, product groups, products, and source packages.

    >>> contexts = [
    ...     ('Ubuntu', 'ubuntu'),
    ...     ('Mozilla', 'mozilla'),
    ...     ('Firefox', 'firefox'),
    ...     ('alsa-utils in Ubuntu', 'ubuntu/+source/alsa-utils'),
    ...     ]

    >>> for context_name, context_path in contexts:
    ...     edit_url = 'http://launchpad.dev/%s/+edit' % (context_path,)
    ...     admin_browser.open(edit_url)
    ...     admin_browser.getControl(
    ...         name='field.bug_reporting_guidelines').value = (
    ...         "The version of %s you're using." % (context_name,))
    ...     if context_path == 'ubuntu':
    ...         admin_browser.getControl('Change', index=3).click()
    ...     else:
    ...         admin_browser.getControl('Change').click()

The guidelines are not displayed on the initial basic bug-reporting
page, because that page does not include a bug description field.

    >>> def print_guidelines(name, browser):
    ...     print '*'
    ...     print name
    ...     print '  <%s>' % user_browser.url
    ...     print extract_text(find_tag_by_id(
    ...         user_browser.contents, 'bug-reporting-guidelines'))

    >>> for context_name, context_path in contexts:
    ...     filebug_url = (
    ...         'http://launchpad.dev/%s/+filebug' % (context_path,))
    ...     user_browser.open(filebug_url)
    ...     guidelines = find_tag_by_id(
    ...         user_browser.contents, 'bug-reporting-guidelines')
    ...     if guidelines is not None:
    ...         print 'Found %s guidelines: %s' % (context_path, guidelines)

But they are displayed on the advanced bug-reporting page, which does
include a bug description field.

    >>> for context_name, context_path in contexts:
    ...     filebug_url = (
    ...         'http://launchpad.dev/%s/+filebug-advanced' % (context_path,))
    ...     user_browser.open(filebug_url)
    ...     print_guidelines(context_name, user_browser)
    *
    Ubuntu
      <http://launchpad.dev/ubuntu/+filebug-advanced>
    Ubuntu guidelines:
    The version of Ubuntu you're using.
    *
    Mozilla
      <http://launchpad.dev/mozilla/+filebug-advanced>
    The Mozilla Project guidelines:
    The version of Mozilla you're using.
    *
    Firefox
      <http://launchpad.dev/firefox/+filebug-advanced>
    Mozilla Firefox guidelines:
    The version of Firefox you're using.
    *
    alsa-utils in Ubuntu
      <http://launchpad.dev/ubuntu/+source/alsa-utils/+filebug-advanced>
    alsa-utils (Ubuntu) guidelines:
    The version of alsa-utils in Ubuntu you're using.
    Ubuntu guidelines:
    The version of Ubuntu you're using.

Note how the alsa-utils in Ubuntu specific guidelines were displayed
followed by the general Ubuntu guidelines.

The guidelines are also displayed on the basic bug-reporting page,
once you've got to the step of entering a bug description.

    >>> user_browser.open('http://launchpad.dev/firefox/+filebug')
    >>> user_browser.getControl('Summary').value = "It doesn't work"
    >>> user_browser.getControl('Continue').click()
    >>> print extract_text(find_tag_by_id(
    ...     user_browser.contents, 'bug-reporting-guidelines'))
    Mozilla Firefox guidelines:
    The version of Firefox you're using.

Bugs can also be reported directly against a distribution series, for
which the guidelines are taken from the respective distribution.

    >>> user_browser.open(
    ...     'http://launchpad.dev/ubuntu/warty/+filebug')
    >>> user_browser.getControl('Summary').value = "It doesn't work"
    >>> user_browser.getControl('Continue').click()
    >>> print extract_text(find_tag_by_id(
    ...     user_browser.contents, 'bug-reporting-guidelines'))
    Ubuntu guidelines:
    The version of Ubuntu you're using.


== Other contexts ==

When filing a bug through the bugs front page the guidelines are also
shown.

    >>> user_browser.open(
    ...     'http://launchpad.dev/bugs/+filebug')
    >>> user_browser.getControl('Distribution').selected = True
    >>> user_browser.getControl(
    ...     name='field.bugtarget.distribution').value = ['ubuntu']
    >>> user_browser.getControl(
    ...     name='field.bugtarget.package').value = "alsa-utils"
    >>> user_browser.getControl('Summary').value = "It doesn't work"
    >>> user_browser.getControl('Continue').click()
    >>> print extract_text(find_tag_by_id(
    ...     user_browser.contents, 'bug-reporting-guidelines'))
    alsa-utils (Ubuntu) guidelines:
    The version of alsa-utils in Ubuntu you're using.
    Ubuntu guidelines:
    The version of Ubuntu you're using.

    >>> user_browser.open(
    ...     'http://launchpad.dev/bugs/+filebug')
    >>> user_browser.getControl('Project').selected = True
    >>> user_browser.getControl(
    ...     name='field.bugtarget.product').value = "firefox"
    >>> user_browser.getControl('Summary').value = "It doesn't work"
    >>> user_browser.getControl('Continue').click()
    >>> print extract_text(find_tag_by_id(
    ...     user_browser.contents, 'bug-reporting-guidelines'))
    Mozilla Firefox guidelines:
    The version of Firefox you're using.


== Limitations ==

There are some limitations to where we can show guidelines, because
it's not always possible to know what the current context is. The
following pages are known to be affected:

    /bugs/+filebug
    /bugs/+filebug-advanced
    /<distro>/+filebug
    /<distro>/+filebug-advanced
    /<distro>/<distroseries>/+filebug
    /<distro>/<distroseries>/+filebug-advanced
    /<project-group>/+filebug
    /<project-group>/+filebug-advanced

In all cases, the problem is that the user can change the context
(i.e. distro, package, project) without having to advance a page. This
may mean that no guidelines are shown or the wrong guidelines are
shown.

    >>> user_browser.open(
    ...     'http://launchpad.dev/ubuntu/+filebug-advanced')
    >>> print extract_text(find_tag_by_id(
    ...     user_browser.contents, 'bug-reporting-guidelines'))
    Ubuntu guidelines:
    The version of Ubuntu you're using.

Changing the package to alsa-utils does not make the alsa-utils
guidelines appear.

    >>> user_browser.getControl(
    ...     name='packagename_option').value = ['choose']
    >>> user_browser.getControl(
    ...     name='field.packagename').value = "alsa-utils"
    >>> print extract_text(find_tag_by_id(
    ...     user_browser.contents, 'bug-reporting-guidelines'))
    Ubuntu guidelines:
    The version of Ubuntu you're using.

XXX: allenap 2008-11-14 bug=297743: These limitations have been filed
as bug #297743, "When filing a bug always display the appropriate
reporting guidelines".


== Editing the guidelines ==

Unprivileged Launchpad users do not see the link to the page where the
bug reporting guidelines can be changed, but admins do.

    >>> import re
    >>> import sys

    >>> def extract_text_from_link(link):
    ...     pass

    >>> edit_url_re = re.compile('/[+]edit$')
    >>> for context_name, context_path in contexts:
    ...     overview_url = 'http://launchpad.dev/%s' % (context_path,)
    ...     print '* ' + context_name
    ...     print '  - User:',
    ...     user_browser.open(overview_url)
    ...     try:
    ...         user_browser.getLink(url=edit_url_re)
    ...     except (SystemExit, KeyboardInterrupt):
    ...         raise
    ...     except:
    ...         print sys.exc_info()[0].__name__
    ...     print '  - Admin:',
    ...     admin_browser.open(overview_url)
    ...     print admin_browser.getLink(url=edit_url_re).text
    * Ubuntu
      - User: LinkNotFoundError
      - Admin: Change distribution details
    * Mozilla
      - User: LinkNotFoundError
      - Admin: Change details
    * Firefox
      - User: LinkNotFoundError
      - Admin: Change details
    * alsa-utils in Ubuntu
      - User: LinkNotFoundError
      - Admin: Edit bug reporting guidelines

Unprivileged cannot access the page for changing bug reporting
guidelines.

    >>> for context_name, context_path in contexts:
    ...     edit_url = 'http://launchpad.dev/%s/+edit' % (context_path,)
    ...     print '* ' + context_name
    ...     try:
    ...         user_browser.open(edit_url)
    ...     except (SystemExit, KeyboardInterrupt):
    ...         raise
    ...     except:
    ...         print sys.exc_info()[0].__name__
    * Ubuntu
      Unauthorized
    * Mozilla
      Unauthorized
    * Firefox
      Unauthorized
    * alsa-utils in Ubuntu
      Unauthorized
