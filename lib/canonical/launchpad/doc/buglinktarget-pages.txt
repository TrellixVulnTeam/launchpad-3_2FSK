IBugLinkTarget Views
====================

The +linkbug and +unlinkbug views operates on IBugLinkTarget.

    >>> from zope.component import getView
    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest
    >>> from canonical.launchpad.interfaces import (
    ...     IBugLinkTarget, IBugSet, ICveSet)
    >>> from canonical.launchpad.event import SQLObjectModifiedEvent

    >>> bugset = getUtility(IBugSet)
    >>> cve = getUtility(ICveSet)['2005-2730']

    (Login because bug link management is only available to registered users.)
    >>> login('no-priv@canonical.com')


Unlink Bugs View
----------------

    (Link some bugs first.)
    >>> link = cve.linkBug(bugset.get(1))
    >>> link = cve.linkBug(bugset.get(2))
    >>> link = cve.linkBug(bugset.get(3))

    (Setup an event listener.)
    >>> from canonical.launchpad.ftests.event import TestEventListener
    >>> collected_events = []
    >>> modified_listener = TestEventListener(
    ...     IBugLinkTarget, SQLObjectModifiedEvent,
    ...     lambda object, event: collected_events.append(event))

The +unlinkbug view unlinks the selected bugs and sends a
SQLObjectModified event.

    >>> request = LaunchpadTestRequest(
    ...     form={'form.actions.remove':'Remove', 'form.bugs' : ['1', '2']})
    >>> unlinkView = getView(cve, '+unlinkbug', request)
    >>> unlinkView.update()

One notification by removed bugs should have been added to the response.

    >>> len(request.response.notifications)
    2

The two bugs were removed and only bug #3 should still be present:

    >>> print [bug.id for bug in cve.bugs]
    [3]

A SQLObjectModifiedEvent was sent:

    >>> len(collected_events)
    1
    >>> event = collected_events[0]
    >>> event
    <...SQLObjectModifiedEvent...>
    >>> event.object == cve
    True
    >>> event.edited_fields
    ['bugs']
    >>> print [bug.id for bug in event.object_before_modification.bugs]
    [1, 2, 3]
