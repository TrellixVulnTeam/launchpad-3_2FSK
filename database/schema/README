How to make database schema changes
===================================

First - don't. Unless there is a problem doing so, get Stuart
or the acting DBA to do it by emailing the launchpad@ mailing list
with your request. The reason we are currently using launchpad@ is so that
other launchpad team members can see what the requests are and have a
chance to comment if it affects their work in any way.

The rest of these instructions are for the acting DBA or for 'we have 
to do this now' work.

1. `cd launchpad/database/schema; make`

    This is the simplest way of making sure your database is clean.
    Failing to drop your database risks a bad sampledata export.

2.  Create a file launchpad/database/schema/patch-x-yy-0.sql, where
    'x' is the current major database revision number (and should not be
    changed except after a push to production) and yy is the next available
    number. It is important that yy is two digits, as otherwise the patch
    will be applied in the wrong order.

3.  Put the necessary commands in patch-x-yy-0.sql

4.  Inspect the launchpad_prod database on emperor. Check all affected tables
    to see if they contain data. If they do, it may be necessary to add extra
    commands to the patch to ensure data is migrated or else the patch will fail
    when applied to production.

5.  Run the commands in patch-x-yy-0.sql one at a time in an interactive
    session. This lets you catch errors and cases where the sample data
    needs to be migrated. Issue SQL commands as necessary o port sample
    data to the new schema.

6.  Run `make newsampledata` in launchpad/database/schema.

7.  Run `diff current.sql newsampledata.sql` in launchpad/database/sampledata
    to confirm the changes are sane

8.  Move newsampledata.sql to current.sql

9.  Run `make` in launchpad/database/schema. Alter patch as necessary
    to minimize noise.

10. Commit

11. Respond to message in launchpad@ informing the group the modification has
    been made.

Steps 6, 7 & 8 can be ommitted of course if no table modifications are being
made (eg. just indexes being added).


Production Database Upgrades
============================

First get a copy of the Launchpad source built and ready on emperor, readable
by the postgres user.

Then, before you do anything else, inform #canonical, #launchpad and
#ubuntu-devel that Launchpad and the Wiki authentication systems will be
offline for 30 minutes (or longer if there is data migration to do).

Stop PostgreSQL:

    % pg_ctl -m fast stop

Start PostgreSQL without external connections

    % pg_ctl start -o '--tcpip-socket=false' -o '--ssl=false' \
        -l /var/log/postgresql/postgres.log

As user postgres, run the upgrade.py, fti.py and security.py scripts.
fti.py can be skipped if you are sure no changes need to be made to the
full text indexes (ie. fti.py has not been modified and no patches affect
the tables being indexed). This process should work without issues, as any
issues (such as DB patches not working on production data) will have been
picked up from the daily updates to the staging environment. Do not run
update.py using the --partial option to ensure that changes will be rolled
back on failure.

    % cd dists/launchpad/database/schema
    % env LPCONFIG=production \
        python upgrade.py -d launchpad_prod -U postgres -H ''
    % env LPCONFIG=production \
        python fti.py -d launchpad_prod -U postgres -H ''
    % env LPCONFIG=production \
        python security.py -d launchpad_prod -U postgres -H ''

Restart PostgreSQL with external connections

    % pg_ctl -m fast stop
    % pg_ctl start -l /var/log/postgresql/postgres.log

At this point, services should  be restarted that don't automatically
reconnect, such as the Launchpad web application servers and the Librarian.

Create a new development baseline
---------------------------------

After a production update, you should occasionally copy the live schema
back into the development tree. This ensures that any differences that have
crept in between the development database and reality are fixed.
The new baseline dump (launchpad-XX-0-0.sql in this directory) can
be generated on production using the following::

    pg_dump -Fc --schema-only --no-owner --no-acl --schema=public \
        launchpad_prod > launchpad.dump
    pg_restore -l launchpad.dump | \
        grep -v PROCEDURAL | grep -v COMMENT | \
        grep -v FUNCTION | grep -v VIEW > launchpad.list
    pg_restore -l launchpad.dump | grep VIEW >> launchpad.list
    echo "-- Generated `date`" > launchpad.sql
    echo 'SET client_min_messages=ERROR;' >> launchpad.sql
    pg_restore --no-owner --no-acl -L launchpad.list launchpad.dump | \
        grep -v '^--' >> launchpad.sql

Move all the existing patches and the old baseline to the archive directory.
Add the new baseline using the next revision number (should be in sync
with the production release version). Create a patch-XX-0-0.sql patch
to populate the LaunchpadDatabaseRevision table with the correct value
so the tests pass.


Notes
=====

There is a Makefile in launchpad/database/schema that will
create the launchpad_test database (if it doesn't already exist),
drop all your tables and create the current schema with all patches
applied.

If you want to check anything into the launchpad/database/schema
directory, please do not give it a .sql extension or you will might
confuse the simple Makefile.

