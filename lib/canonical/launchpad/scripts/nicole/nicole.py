from string import split
from time import sleep
from re import sub
from sourceforge import getProjectSpec
from database import Doap
from datetime import datetime

from apt_pkg import ParseTagFile

## DOAP is inside our current Launchpad production DB
DOAPDB = "launchpad_dev"

## Update mode
## Query about new info even if there is already a project
## and UPDATE the info OR just skip
UPDATE = False

## Web search interval avoiding to be blocked by high threshould
## of requests reached by second
SLEEP = 20

PACKAGES = 'Sources'

## Projects not found
LIST = 'nicole_notfound'

def clean_list():
    print """Cleaning 'Not Found' File List"""
    f = open(LIST, 'w')
    timestamp = datetime.isoformat(datetime.utcnow())
    f.write('Generated by Nicole at UTC %s\n' % timestamp)
    f.close()

def append_list(data):
    print """@\tAppending %s in 'Not Found' File List""" % data
    f = open(LIST, 'a')
    f.write('%s\n' % data)
    f.close()


def get_current_packages(source):
    packagenames = []

    print '@ Retrieve SourcePackage Information From Soyuz'

    index = 0
    
    ## get all project names from doap
    ##packages = source.getSourcePackageNames()
    ##    for package in packages:
    ##        ## Anyway, I can't discard any name, since multiple names
    ##        ##  means multiple products
    ##        name = package['name']
    ##        ##print '@      Getting %s' % name
    ##        packagenames.append(name)
    ##        index += 1

    ## Get SourceNames from Sources file (MAIN)
    sources = ParseTagFile(open(source))
    while sources.Step():        
        packagenames.append(sources.Section['Package'])
        index += 1

    print '@ %d SourcePackages from Soyuz' % index        
    return index, packagenames


def grab_project_info(name):
    print '@ Looking for %s on Sourceforge' % name    
    try:
        data_sf = getProjectSpec(name)
        print '@\tFound at Sourceforge'        
    except:
        print '@\tNot Found'
        data_sf = None

    print '@ Looking for %s on FreshMeat' % name        
    try:
        data_fm = getProjectSpec(name, 'fm')
        print '@\tFound at FreshMeat'
    except:
        print '@\tNot Found'
        data_fm = None
            
    return data_sf, data_fm

def grab_for_product(data, project, name):
    if project == name:
        doap.ensureProduct(project, data, name)
        print '@\tCreating a Default Product'
        return

    data_sf, data_fm = grab_project_info(name)        

    if data_sf:
        doap.ensureProduct(project, data_sf, name)
        print '@\tCreating Sourceforge Product'        
    elif data_fm:
        doap.ensureProduct(project, data_fm, name)
        print '@\tCreating a FreshMeat Product'
    else:
        print '@\tNo Product Found for %s' % name
        ##XXX: (product+notfound) cprov 20041014
        ## Insert a product anyway !!! see alsa-xxx for futher
        ## result feedback
        ##data_dummy={"project":      name,
        ##            "projectname":  name,
        ##            "description": 'Nicole Dummy Product Description.'
        ##            }
        ##doap.ensureProduct(project, data_dummy, name)
        ##print '@\tCreating a Dummy Product'

def present_data(data):
    print '========================================================'
    for item in data.keys():
        print item + ':', data[item] 
    print '========================================================'


if __name__ == "__main__":
    # get the DB abstractors
    doap = Doap(DOAPDB)

    print '\t\tWelcome to Nicole'
    print 'An Open Source Project Information Finder'

    index = 0

    sf = 0
    fm = 0
    both = 0
    skip = 0
    
    clean_list()
    
    ##tries, packages = get_current_packages(doap)
    tries, packages = get_current_packages(PACKAGES)
    
    for package in packages:
        index += 1
        print ' '
        print '@ Grabbing Information About the %s (%d/%d)'% (package, index,
                                                              tries)

        ## split the package name by '-' and use just the first part
        name = split(package, '-')[0]        

        ## XXX (project+valid_name) cprov 20041013
        ## for god sake !!! we should avoid names shorter than 3 (!!)
        ## chars 
        if len(name) < 3:
            name = package.replace('-', '')

        ## clean the version tag    
        #name = sub('[0-9._]', '', name)    

        print '@ Proposed Project name %s'% name

        if not doap.getProject(name):
            
            data_sf, data_fm = grab_project_info(name)        
            
            if data_sf and not data_fm:
                ##present_data(data_sf)            
                sf +=1            
                doap.ensureProject(data_sf)
                ## Partially Commit DB Project Info
                doap.commit()
                grab_for_product(data_sf, name, package)
                
            elif data_fm and not data_sf:
                ##present_data(data_fm)
                fm += 1
                doap.ensureProject(data_fm)
                ## Partially Commit DB Project Info
                doap.commit()
                grab_for_product(data_fm, name, package)

            elif data_sf and data_fm:
                ##present_data(data_sf)
                ##present_data(data_fm)
                both += 1
                doap.ensureProject(data_sf)
                ## Partially Commit DB Project Info
                doap.commit()
                grab_for_product(data_fm, name, package)    

            else:
                print '@\tNo Product Found for %s' % name
                append_list(package)                
                ##XXX: (project+notfound) cprov 20041014
                ## Insert a product anyway !!! see alsa-xxx for futher
                ## result feedback
                ##data_dummy={"project":      name,
                ##            "projectname":  name,
                ##           "description": 'Nicole Dummy Project Description.'
                ##           } 
                ##doap.ensureProject(data_dummy)
                ## Partially Commit DB Project Info
                ##doap.commit()
                ##grab_for_product(data_dummy, name, package)
                ##print '@\tDummy Project/Product Created'


            
            ## Partially Commit DB Product Info
            doap.commit()
            
            ##It should prevent me to be blocked again by SF
            ##
            sleep(SLEEP)
        else:
            print '@\tSkipping it, Already included'
            skip += 1
            

    fail = tries - (sf + fm + both + skip)

    doap.close()

    print '@\t\tSourceforge (only) %d' % sf
    print '@\t\tFreshMeat (only)   %d' % fm
    print '@\t\tBoth               %d' % both
    print '@\t\tFailures           %d' % fail
    print '@\t\tSkips:             %d' % skip
    print '@\t\tTries:             %d' % tries
    print '@ Thanks for using Nicole'
