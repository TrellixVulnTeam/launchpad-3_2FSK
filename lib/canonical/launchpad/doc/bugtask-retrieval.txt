= Retrieving bug tasks =

The IBugTaskSet interface provide a couple of methods for retrieving
IBugTask instances. For convenience, Launchpad provides a default
implementation of IBugTaskSet, allowing retrieval of any bug task in
Launchpad. We'll use this implementation for demonstration purposes:

    >>> from canonical.launchpad.interfaces import (
    ...     IBugTask, IBugTaskSet, NotFoundError)
    >>> task_set = getUtility(IBugTaskSet)


== Retrieving a single bug task ==

The IBugTaskSet get method retrieves a single bug task matching a given
ID:

    >>> retrieved_task = task_set.get(2)
    >>> retrieved_task
    <BugTask at ...>

    >>> from canonical.launchpad.webapp.testing import verifyObject 
    >>> verifyObject(IBugTask, retrieved_task)
    True

    <<< retrieved_task.id
    2

When given a bug task ID that doesn't exist in the database, the method
raises a NotFoundError:

    >>> no_such_task = task_set.get(0)
    Traceback (most recent call last):
    ...
    NotFoundError: ...


== Retrieving multiple bug tasks ==

The IBugTaskSet getMultiple method can retrieve multiple bug tasks in a
single operation. To demonstrate, we'll begin by generating a list of
sample bug tasks:

    >>> from canonical.launchpad.database import BugTask
    >>> sample_task_count = 10
    >>> sample_tasks = BugTask.select(limit=sample_task_count)
    >>> sample_task_ids = [task.id for task in sample_tasks]

When given a sequence of bug task IDs, the method returns a dictionary
of bug tasks indexed by bug task ID. The dictionary contains an entry
for every bug task ID from the given sequence that also matches a bug
task in the database:

    >>> retrieved_tasks = task_set.getMultiple(sample_task_ids)
    >>> assert len(retrieved_tasks) == sample_task_count
    >>> for task in sample_tasks:
    ...     assert retrieved_tasks[task.id].id == task.id

When given a singleton sequence containing a valid bug task ID, the
method returns a singleton dictionary:

    >>> sample_task = sample_tasks[0]
    >>> sample_task_id = sample_task_ids[0]
    >>> retrieved_tasks = task_set.getMultiple([sample_task_id])
    >>> assert len(retrieved_tasks) == 1
    >>> assert retrieved_tasks[sample_task_id].id == sample_task_id

When given an empty sequence, the method returns an empty dictionary:

    >>> task_set.getMultiple([])
    {}

When given a sequence containing some bug task IDs not present in the
database, the method returns a dictionary containing entries only for
those bug task IDs that are present in the database:

    >>> retrieved_tasks = task_set.getMultiple([0, sample_task_id])
    >>> assert retrieved_tasks[sample_task_id].id == sample_task_id
    
The dictionary does not contain entries for bug task IDs not present
in the database:

    >>> no_such_task = retrieved_tasks[0]
    Traceback (most recent call last):
    ...
    KeyError: 0

When given an argument that isn't a valid sequence, the method raises
a TypeError:

    >>> task_set.getMultiple('This is not a bug task ID.')
    Traceback (most recent call last):
    ...
    TypeError: Sequence of bug task IDs expected.

    >>> task_set.getMultiple(None)
    Traceback (most recent call last):
    ...
    TypeError: Sequence of bug task IDs expected.

When given a sequence containing one or more entries that are not valid
bug task IDs, the method also raises a TypeError:

    >>> print task_set.getMultiple(['This is not a bug task ID.'])
    Traceback (most recent call last):
    ...
    TypeError: Sequence of bug task IDs expected.

    >>> print task_set.getMultiple([None])
    Traceback (most recent call last):
    ...
    TypeError: Sequence of bug task IDs expected.