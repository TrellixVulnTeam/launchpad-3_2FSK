= Introduction =

Bugs are some of the more complex objects in Launchpad. They have a
lot of state and many relationships to other objects.


== Bugs themselves ==

At the top level we provide a collection of bugs.

  >>> import operator
  >>> bugs = webservice.get("/beta/bugs").jsonBody()
  >>> bugs['total_size']
  14
  >>> bug_entries = sorted(bugs['entries'], key=operator.itemgetter('id'))
  >>> from pprint import pprint
  >>> pprint(sorted(bug_entries[0].items()))
  [(u'bugtasks_collection_link',
    u'http://api.launchpad.dev/beta/bugs/10/bugtasks'),
   (u'can_expire', False),
   (u'date_created', u'2004-01-10T19:42:21.890299+00:00'),
   (u'date_last_message', None),
   (u'date_last_updated', u'2006-07-14T08:54:19.453881+00:00'),
   (u'date_made_private', None),
   (u'description', u'test bug'),
   (u'duplicate_of_link', None),
   (u'duplicates_collection_link',
    u'http://api.launchpad.dev/beta/bugs/10/duplicates'),
   (u'id', 10),
   (u'is_complete', False),
   (u'messages_collection_link',
    u'http://api.launchpad.dev/beta/bugs/10/messages'),
   (u'name', None),
   (u'owner_link', u'http://api.launchpad.dev/beta/~name16'),
   (u'permits_expiration', False),
   (u'private', False),
   (u'security_related', False),
   (u'self_link', u'http://api.launchpad.dev/beta/bugs/10'),
   (u'tags', [u'crash']),
   (u'title', u'another test bug'),
   (u'who_made_private_link', None)]

Bugs are indexed by number beneath the top-level collection.

  >>> bug_one = webservice.get("/beta/bugs/1").jsonBody()
  >>> bug_one['id']
  1

Bugs have relationships to other bugs, like "duplicate_of".

  >>> duplicates_of_five = webservice.get(
  ...     "/beta/bugs/5/duplicates").jsonBody()['entries']
  >>> len(duplicates_of_five)
  1
  >>> duplicates_of_five[0]['id']
  6

  >>> from urlparse import urlsplit
  >>> bug_six_url = urlsplit(duplicates_of_five[0]['self_link'])[2]
  >>> bug_six = webservice.get(bug_six_url).jsonBody()
  >>> bug_six['duplicate_of_link']
  u'http://api.launchpad.dev/beta/bugs/5'


== Bugs as message targets ==

Each bug has a collection of messages.

  >>> messages = webservice.get("/beta/bugs/5/messages").jsonBody()['entries']
  >>> sorted(messages[0].items())
  [(u'content',
      u'All ways of downloading firefox should provide...'),
   (u'datecreated', u'2005-01-14T17:27:03.702622+00:00'),
   (u'owner_link', u'http://api.launchpad.dev/beta/~name12'),
   (u'parent_link', None),
   (u'self_link', u'http://api.launchpad.dev/beta/firefox/+bug/5/comments/0'),
   (u'subject', u'Firefox install instructions should be complete')]

The messages are stored beneath the bug-specific collection. Their
URLs are based on their position with respect to the
bug. /firefox/+bug/5/comments/0 is the first message for bug 5, and it's
different from /firefox/+bug/1/comments/0.

  >>> message_path = urlsplit(messages[0]['self_link'])[2]
  >>> message_path
  u'/beta/firefox/+bug/5/comments/0'

  >>> message = webservice.get(message_path).jsonBody()
  >>> message == messages[0]
  True

There is no top-level collection of messages; they only exist in
relation to some bug.

  >>> webservice.get("/beta/messages").getStatus()
  404


== Bug tasks ==

Each bug may be associated with one or more bug tasks. Much of the
data in a bug task is derived from the bug.

  >>> bug_one_bugtasks_url = urlsplit(bug_one['bugtasks_collection_link'])[2]
  >>> bug_one_bugtasks = sorted(webservice.get(
  ...     bug_one_bugtasks_url).jsonBody()['entries'])
  >>> len(bug_one_bugtasks)
  3

  >>> pprint(sorted(bug_one_bugtasks[0].items()))
  [(u'assignee_link', None),
   (u'bug_link', u'http://api.launchpad.dev/beta/bugs/1'),
   (u'bug_target_display_name', u'mozilla-firefox (Debian)'),
   (u'bug_target_name', u'mozilla-firefox (Debian)'),
   (u'date_assigned', u'2005-01-04T11:07:20.584746+00:00'),
   (u'date_closed', None),
   (u'date_confirmed', None),
   (u'date_created', u'2004-01-04T03:49:22.790240+00:00'),
   (u'date_fix_committed', None),
   (u'date_fix_released', None),
   (u'date_in_progress', None),
   (u'date_left_new', None),
   (u'date_triaged', None),
   (u'id', 4),
   (u'importance', u'Low'),
   (u'is_complete', False),
   (u'owner_link', u'http://api.launchpad.dev/beta/~name12'),
   (u'related_tasks_collection_link',
    u'http://api.../debian/+source/mozilla-firefox/+bug/1/related_tasks'),
   (u'self_link',
    u'http://api.../debian/+source/mozilla-firefox/+bug/1'),
   (u'status', u'Confirmed'),
   (u'status_explanation', u''),
   (u'title',
    u'Bug #1 in mozilla-firefox (Debian): "Firefox does not support SVG"')]

  >>> bugtask_path = str(urlsplit(bug_one_bugtasks[0]['self_link'])[2])
  >>> bugtask = webservice.get(bugtask_path).jsonBody()
  >>> bugtask == bug_one_bugtasks[0]
  True

The collection of bug tasks is not exposed as a resource:

  >>> webservice.get("/beta/bugtasks").getStatus()
  404

It's possible to change the task's assignee.

  >>> print webservice.named_post(
  ...     bugtask_path, 'change_assignee', {}, assignee='http://api.launchpad.dev/beta/~cprov')
  HTTP/1.1 200 Ok
  ...
  Content-Type: application/json
  <BLANKLINE>
  null

  >>> print webservice.get(bugtask_path).jsonBody()['assignee_link']
  http://api.launchpad.dev/beta/~cprov

Let's try modifying the importance of a task.

  >>> body = webservice.get(bugtask_path).jsonBody()
  >>> body['importance']
  u'Low'
  >>> body = {'importance': 'High'}
  >>> from simplejson import dumps
  >>> response = webservice.patch(
  ...     bugtask_path, 'application/json', dumps(body))
  >>> body = webservice.get(bugtask_path).jsonBody()
  >>> body['importance']
  u'High'

