= OpenID Discovery =

Launchpad provides a number of pages that can be used as OpenID URLs.
The OpenID discovery process can be run on them to discover the
endpoints.

To test this, we will set up the python-openid to talk directly to the
Zope publisher:

    >>> from openid.fetchers import setDefaultFetcher
    >>> from canonical.launchpad.testing.openidhelpers import PublisherFetcher
    >>> setDefaultFetcher(PublisherFetcher())

We'll also define a helper that will print out the discovered
endpoints for a URL:

    >>> from openid.consumer.discover import discover
    >>> def print_endpoints(url):
    ...     claimed_id, services = discover(url)
    ...     print 'Claimed ID:', claimed_id
    ...     print '----'
    ...     if not services:
    ...         print 'No services discovered'
    ...     for service in services:
    ...         print 'Local ID:', service.getLocalID()
    ...         print 'Server URL:', service.server_url
    ...         print 'Supports:'
    ...         for type_uri in service.type_uris:
    ...             print '  ' + type_uri
    ...         print '----'


== Persistent User Identity URLs ==

Launchpad assigns a persistent identifier to each user:

    >>> print_endpoints('http://id.launchpad.dev/123/sabdfl')
    Claimed ID: http://id.launchpad.dev/123/sabdfl
    ----
    Local ID: http://id.launchpad.dev/123/sabdfl
    Server URL: http://id.launchpad.dev/+openid
    Supports:
      http://specs.openid.net/auth/2.0/signon
    ----
    Local ID: http://id.launchpad.dev/123/sabdfl
    Server URL: http://id.launchpad.dev/+openid
    Supports:
      http://openid.net/signon/1.1
    ----
    Local ID: http://id.launchpad.dev/123/sabdfl
    Server URL: http://id.launchpad.dev/+openid
    Supports:
      http://openid.net/signon/1.0
    ----

If the user enters a non-canonical form of the identifier, it is
normalised to the standard form:

    >>> print_endpoints(
    ...     'http://id.launchpad.dev/123/sabdfl/+index?foo=bar')
    Claimed ID: http://id.launchpad.dev/123/sabdfl
    ...

The endpoint only supports the URL path assigned to the vhost; the vhost
does not support the old URL path (+id).

    >>> print_endpoints('http://id.launchpad.dev/+id/sabdfl_oid')
    Traceback (most recent call last):
      ...
    DiscoveryFailure: ...

    >>> anon_browser.open('http://id.launchpad.dev/+id/sabdfl_oid')
    Traceback (most recent call last):
      ...
    NotFound: ...


== Non-persistent User Identity URLs ==

Launchpad supports discovery on a user's profile page. When a Replying
Party requests the user's profile page, the response provides the
OpenID Authentication Server URL. The user's Local Identifier
will be used in for Identity Selection.

Currently this is only done for users who are members of the team
identified by the openid_users configuration value.  For the tests,
this means the admins team, which Mark Shuttleworth is a member of:

    >>> print_endpoints('http://launchpad.dev/~sabdfl')
    Claimed ID: http://launchpad.dev/~sabdfl
    ----
    Local ID: None
    Server URL: http://id.launchpad.dev/+openid
    Supports:
      http://specs.openid.net/auth/2.0/server
    ----

Discovery fails for users who are not members of the team:

    >>> print_endpoints('http://launchpad.dev/~name12')
    Claimed ID: http://launchpad.dev/~name12
    ----
    No services discovered

Such users still have a usable persistent identity URL though.  This
allows the user to log in using the directed identity mode.

    >>> print_endpoints('http://openid.launchpad.dev/+id/name12_oid')
    Claimed ID: http://openid.launchpad.dev/+id/name12_oid
    ----
    Local ID: http://openid.launchpad.dev/+id/name12_oid
    Server URL: http://openid.launchpad.dev/+openid
    Supports:
      http://specs.openid.net/auth/2.0/signon
    ...


== Old persistent User Identity URLs ==

Launchpad supports the old, deprecated identity URLs.

    >>> print_endpoints('http://openid.launchpad.dev/+id/sabdfl_oid')
    Claimed ID: http://openid.launchpad.dev/+id/sabdfl_oid
    ----
    Local ID: http://openid.launchpad.dev/+id/sabdfl_oid
    Server URL: http://openid.launchpad.dev/+openid
    Supports:
      http://specs.openid.net/auth/2.0/signon
    ...


== OP Identifier Discovery ==

It is also possible to run discovery on the root directory as an OP
identifier.  This allows any Launchpad user to log in by entering this
URL.

    >>> print_endpoints('http://id.launchpad.dev/')
    Claimed ID: http://id.launchpad.dev/
    ----
    Local ID: None
    Server URL: http://id.launchpad.dev/+openid
    Supports:
      http://specs.openid.net/auth/2.0/server
    ----

    >>> print_endpoints('http://openid.launchpad.dev/')
    Claimed ID: http://openid.launchpad.dev/
    ----
    Local ID: None
    Server URL: http://openid.launchpad.dev/+openid
    Supports:
      http://specs.openid.net/auth/2.0/server
    ----


== Invalid Persistent Identifiers ==

Discovery is not possible on non-existent persistent identifiers:

    >>> anon_browser.open('http://id.launchpad.dev/456/no-such-id')
    Traceback (most recent call last):
      ...
    NotFound: ...

    >>> print_endpoints('http://id.launchpad.dev/456/no-such-id')
    Traceback (most recent call last):
      ...
    DiscoveryFailure: ...


== No OpenID for Teams ==

Launchpad teams do not have OpenID identifiers:

    >>> print_endpoints('http://id.launchpad.dev/123/simple-team')
    Traceback (most recent call last):
      ...
    DiscoveryFailure: ...


== No OpenID for Invalid Users ==

People who are not valid Launchpad users do not have OpenID
identifiers:

    >>> print_endpoints('http://id.launchpad.dev/456/matsubara_oid')
    Traceback (most recent call last):
      ...
    DiscoveryFailure: ...


== Cleanup ==

    >>> setDefaultFetcher(None)

