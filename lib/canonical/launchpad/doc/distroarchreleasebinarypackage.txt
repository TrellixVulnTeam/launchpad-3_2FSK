Distro Arch Release Binary Package
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  >>> from canonical.launchpad.database.binarypackagename import (
  ...     BinaryPackageName)
  >>> from canonical.launchpad.database.distroarchrelease import (
  ...     DistroArchRelease)
  >>> from canonical.launchpad.database.distroarchreleasebinarypackage import (
  ...     DistroArchReleaseBinaryPackage)
  >>> hoary_i386 = DistroArchRelease.get(6)
  >>> pmount_name = BinaryPackageName.selectOneBy(name="pmount")
  >>> firefox_name = BinaryPackageName.selectOneBy(name="mozilla-firefox")
  >>> pmount_hoary_i386 = DistroArchReleaseBinaryPackage(hoary_i386,
  ...                                                    pmount_name)

First, we create a new version of pmount, and a version of
mozilla-firefox that coincides with pmount's. We're hitch-hiking on two
existing builds that are in sampledata!

  >>> from canonical.launchpad.database.binarypackagerelease import (
  ...     BinaryPackageRelease)
  >>> from canonical.launchpad.database.publishing import (
  ...     SecureBinaryPackagePublishingHistory)
  >>> from canonical.launchpad.database.build import Build
  >>> from canonical.launchpad.database.component import Component
  >>> from canonical.launchpad.database.section import Section
  >>> from canonical.lp import dbschema
  >>> from canonical.database.constants import nowUTC

  >>> main_component = Component.selectOneBy(name="main")
  >>> misc_section = Section.selectOneBy(name="base")
  >>> binpackageformat = dbschema.BinaryPackageFormat.DEB
  >>> priority = dbschema.PackagePublishingPriority.STANDARD

  >>> bpr = Build.get(8).createBinaryPackageRelease(
  ...   binarypackagename=pmount_name.id,
  ...   version="cr98.34",
  ...   summary="Pmount bakes cakes",
  ...   description="Phat cake-baker application",
  ...   binpackageformat=binpackageformat,
  ...   component=main_component.id,
  ...   section=misc_section.id,
  ...   priority=priority,
  ...   shlibdeps=None,
  ...   depends=None,
  ...   recommends=None,
  ...   suggests=None,
  ...   conflicts=None,
  ...   replaces=None,
  ...   provides=None,
  ...   essential=False,
  ...   installedsize=0,
  ...   copyright=None,
  ...   licence=None,
  ...   architecturespecific=False)

  >>> pe = SecureBinaryPackagePublishingHistory(
  ...   binarypackagerelease=bpr.id,
  ...   component=main_component.id,
  ...   section=misc_section.id,
  ...   priority=priority,
  ...   distroarchrelease=hoary_i386.id,
  ...   status=dbschema.PackagePublishingStatus.PUBLISHED,
  ...   datecreated=nowUTC,
  ...   datepublished=nowUTC,
  ...   pocket=dbschema.PackagePublishingPocket.RELEASE,
  ...   datesuperseded=None,
  ...   supersededby=None,
  ...   datemadepending=None,
  ...   dateremoved=None)


  >>> bpr = Build.get(9).createBinaryPackageRelease(
  ...   binarypackagename=firefox_name.id,
  ...   version="120.6-0",
  ...   summary="Firefox loves lollies",
  ...   description="Lolly-pop loving application",
  ...   binpackageformat=binpackageformat,
  ...   component=main_component.id,
  ...   section=misc_section.id,
  ...   priority=priority,
  ...   shlibdeps=None,
  ...   depends=None,
  ...   recommends=None,
  ...   suggests=None,
  ...   conflicts=None,
  ...   replaces=None,
  ...   provides=None,
  ...   essential=False,
  ...   installedsize=0,
  ...   copyright=None,
  ...   licence=None,
  ...   architecturespecific=False)

  >>> pe = SecureBinaryPackagePublishingHistory(
  ...   binarypackagerelease=bpr.id,
  ...   component=main_component.id,
  ...   section=misc_section.id,
  ...   priority=priority,
  ...   distroarchrelease=hoary_i386.id,
  ...   status=dbschema.PackagePublishingStatus.PUBLISHED,
  ...   datecreated=nowUTC,
  ...   datepublished=nowUTC,
  ...   pocket=dbschema.PackagePublishingPocket.RELEASE,
  ...   datesuperseded=None,
  ...   supersededby=None,
  ...   datemadepending=None,
  ...   dateremoved=None)

Then, we ensure that grabbing the current release of pmount and the old release
both are sane.

  >>> current_release = pmount_hoary_i386.currentrelease
  >>> current_release.version
  u'cr98.34'
  >>> current_release.name
  u'pmount'

  >>> old_release = pmount_hoary_i386['0.1-1']
  >>> old_release.version
  u'0.1-1'
  >>> old_release.name
  u'pmount'

Check the publishing record of packages returned by 'currentrelease'
and '__getitem__', they are different and in 'Published' state:

  >>> current_pubrec = current_release.current_publishing_record
  >>> (current_pubrec.id, current_pubrec.status.title,
  ...  current_pubrec.distroarchrelease.architecturetag)
  (19, 'Published', u'i386')

  >>> old_pubrec = old_release.current_publishing_record
  >>> (old_pubrec.id , old_pubrec.status.title,
  ...  old_pubrec.distroarchrelease.architecturetag)
  (12, 'Published', u'i386')

