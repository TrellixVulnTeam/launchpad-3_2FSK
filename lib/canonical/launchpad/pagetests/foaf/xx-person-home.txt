= Personal Home Pages =

    >>> from canonical.launchpad.database import Person

Carlos can never see name12's email addresses: he has chosen not to disclose
them.

    >>> browser = setupBrowser(auth='Basic marilize@hbd.com:test')
    >>> browser.open('http://launchpad.dev/~name12')

    >>> name12 = Person.get(12)
    >>> name12.preferredemail.email
    u'test@canonical.com'
    >>> name12.hide_email_addresses
    True

    >>> str(name12.preferredemail.email) in browser.contents
    False

Launchpad creates profiles for people that have contributed to free software
(e.g. in a bug import or a translation template upload). It's clearly
stated that those people don't use Launchpad and why there's a profile for
them.

    >>> browser.open('http://launchpad.dev/~limi')
    >>> browser.title
    'Alexander Limi does not use Launchpad'

    >>> content = find_main_content(browser.contents).find('p')
    >>> print extract_text(content)
    Alexander Limi does not use Launchpad. This page was created on 2005-06-06
    when importing bugs from http://bugzilla.ubuntu.com/.


== Email address disclosure ==

Mark has a registered email address, and he has chosen to disclose it to
the world.

    >>> mark = Person.get(1)
    >>> mark.preferredemail.email
    u'mark@hbd.com'
    >>> mark.hide_email_addresses
    False

If you are not logged in, you will not be able to see it:

    >>> anon_browser.open('http://launchpad.dev/~sabdfl')
    >>> print extract_text(find_tag_by_id(anon_browser.contents, 'contact-details'))
    Contact details
    Email: Log in for email information.
    ...

If you log in, however, you will:

    >>> browser = setupBrowser(auth='Basic test@canonical.com:test')
    >>> browser.open('http://launchpad.dev/~sabdfl')
    >>> print extract_text(find_tag_by_id(browser.contents, 'contact-details'))
    Contact details
    Email: mark@hbd.com
    ...

As for Sample Person, he has chosen not to disclose his email address.
Anonymous users can't see it:

    >>> anon_browser.open('http://launchpad.dev/~name12')
    >>> print extract_text(find_tag_by_id(anon_browser.contents, 'contact-details'))
    Contact details
    Email: Log in for email information.
    ...

And neither can unprivileged users:

    >>> browser = setupBrowser(auth='Basic no-priv@canonical.com:test')
    >>> browser.open('http://launchpad.dev/~name12')
    >>> print extract_text(find_tag_by_id(browser.contents, 'contact-details'))
    Contact details
    Email: No public address provided.
    ...

But good ole Foo Bar can:

    >>> admin_browser.open('http://launchpad.dev/~name12')
    >>> print extract_text(find_tag_by_id(admin_browser.contents, 'contact-details'))
    Contact details
    Email: test@canonical.com
    ...

And so can the Commercial Admins team:

    >>> commercial_browser = setupBrowser(
    ...     auth='Basic commercial-member@canonical.com:test')
    >>> commercial_browser.open('http://launchpad.dev/~name12')
    >>> print extract_text(find_tag_by_id(commercial_browser.contents,
    ...                    'contact-details'))
    Contact details
    Email: test@canonical.com
    ...

In the case of teams, it works similarly. No email address is disclosed if
you're not logged in:

    >>> anon_browser.open('http://launchpad.dev/~ubuntu-team')
    >>> print extract_text(find_tag_by_id(anon_browser.contents, 'contact-details'))
    Contact details
    Email: Log in for email information.
    ...

But if you are, you can:

    >>> browser.open('http://launchpad.dev/~ubuntu-team')
    >>> print extract_text(find_tag_by_id(browser.contents, 'contact-details'))
    Contact details
    Email: support@ubuntu.com
    ...

That is, of course, unless the team doesn't have one:

    >>> browser.open('http://launchpad.dev/~landscape-developers')
    >>> print extract_text(find_tag_by_id(browser.contents, 'contact-details'))
    Contact details
    Email: No contact address
      (Launchpad notifications are sent to all team members)


== OpenID login URL ==

Launchpad.net can be used as an OpenID login provider.  Users may
enter a Launchpad.net URL in order to log in to services that accept
OpenID.

The persistant OpenID URL is displayed privately in the Contact
Details portlet.

    # XXX mars 2008-03-18
    # Remove these tests after the beta program is done.
    # See bug #201963.
    #
    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> from zope.component import getUtility
    >>> from canonical.launchpad.ftests import login, logout
    >>> from canonical.config import config
    >>> login('foo.bar@canonical.com')   # Needed for PersonSet.getByName().
    >>> person_set = getUtility(IPersonSet)
    >>> jdub = person_set.getByName('jdub')
    >>> openid_testers = getUtility(IPersonSet).getByName(
    ...     config.launchpad.openid_users)
    >>> openid_testers is not None
    True
    >>> openid_testers in jdub.teams_participated_in
    False
    >>> logout()
    >>> browser = setupBrowser(auth='Basic mark@hbd.com:test')
    >>> browser.open('http://launchpad.dev/~jdub')
    >>> portlet = extract_text(
    ...     find_tag_by_id(browser.contents, 'contact-details'))
    >>> print ('OpenID login:' not in portlet) or portlet
    True
    >>> login('foo.bar@canonical.com')   # Needed for PersonSet.getByName().
    >>> name16 = getUtility(IPersonSet).getByName('name16')
    >>> openid_testers in name16.teams_participated_in
    True
    >>> logout()

    >>> admin_browser.open('http://launchpad.dev/~name16')
    >>> print extract_text(find_tag_by_id(
    ...     admin_browser.contents, 'contact-details'))
    Contact details
    ...
    OpenID login: http://openid.launchpad.dev/+id/name16_oid
    (What&rsquo;s this?)

Foo Bar can learn about OpenID from the 'What's this?' link.

    >>> admin_browser.open('http://launchpad.dev/~name16')
    >>> admin_browser.getLink(u"What&#8217;s\xa0this?").url
    'https://help.launchpad.net/OpenID'

Other users who visit the page do not see the URL.

    >>> browser = setupBrowser(auth='Basic no-priv@canonical.com:test')
    >>> browser.open('http://launchpad.dev/~name16')
    >>> portlet = extract_text(
    ...     find_tag_by_id(browser.contents, 'contact-details'))
    >>> print ('OpenID login:' not in portlet) or portlet
    True


== Summary Pagelets ==

A person's homepage also lists time zone, Karma and status information:

    >>> browser.open('http://launchpad.dev/~sabdfl')
    >>> print extract_text(find_tag_by_id(browser.contents, 'portlet-details'))
    Bragging rights
    Member since: 2005-06-06
    Karma: 130
    Timezone: None given

Negative Ubuntero status is only displayed for yourself; others won't
see it:

    >>> "Ubuntero:" in browser.contents
    False

    >>> browser = setupBrowser(auth='Basic mark@hbd.com:test')
    >>> browser.open('http://launchpad.dev/~sabdfl')
    >>> print extract_text(find_tag_by_id(browser.contents, 'portlet-details'))
    Bragging rights
    ...
    Ubuntero: No

You can grab certain bits of information programatically:

    >>> print extract_text(find_tag_by_id(browser.contents, 'karma-total'))
    130
    >>> print extract_text(find_tag_by_id(browser.contents, 'member-since'))
    2005-06-06

Teams don't have member-since; they have created-date:

    >>> browser.open('http://launchpad.dev/~guadamen')
    >>> print extract_text(find_tag_by_id(browser.contents, 'created-date'))
    2005-06-06


== Table of contributions ==

A person's home page also displays a table with the contributions made by that
person. This table includes 5 projects in which this person is most active
and also the areas in which (s)he worked on each project.

    >>> anon_browser.open('http://launchpad.dev/~name16')
    >>> table = find_tag_by_id(anon_browser.contents, 'contributions')
    >>> for tr in table.findAll('tr'):
    ...     print tr.find('th').find('a').renderContents()
    ...     for td in tr.findAll('td'):
    ...         img = td.find('img')
    ...         if img is not None:
    ...             print "\t", img['title']
    The Evolution Groupware ...
       Bug Management
       Translations in Rosetta
    Ubuntu Linux
       Bug Management
    Gnome Baker
       Bug Management
    Mozilla Thunderbird
       Bug Management
    Mozilla Firefox
       Bug Management

If the person hasn't made any contributions, the table is not present in its
page.

    >>> anon_browser.open('http://launchpad.dev/~jdub')
    >>> print find_tag_by_id(anon_browser.contents, 'contributions')
    None

The same for teams.

    >>> anon_browser.open('http://launchpad.dev/~ubuntu-team')
    >>> print find_tag_by_id(anon_browser.contents, 'contributions')
    None
