= This bug is a question =

Some bugs that are filed, aren't really bugs, they are questions.
When the bug target's pillar uses Launchpad to track bugs, the
bug can be converted to a question. The process creates a new
question using the bug's owner, title, and description. The bug's
status is set to Invalid in every location that it affects.

A user with permission to edit a bug may create a question from
a bug. An anonymous user cannot create a question.

    >>> anon_browser.open(
    ...     'http://bugs.launchpad.dev'
    ...     '/ubuntu/+source/linux-source-2.6.15/+bug/10')
    >>> anon_browser.title
    'Bug #10 in linux-source-2.6.15 (Ubuntu): ...another test bug...'
    >>> anon_browser.getLink('This is a question').click()
    Traceback (most recent call last):
    ...
    Unauthorized: ...

No Privileges Person is doing triage for Ubuntu. He recognizes bug 10
is really a question. He chooses to make a question from it.

    >>> user_browser.open(
    ...     'http://bugs.launchpad.dev'
    ...     '/ubuntu/+source/linux-source-2.6.15/+bug/10')
    >>> user_browser.title
    'Bug #10 in linux-source-2.6.15 (Ubuntu): ...another test bug...'
    >>> user_browser.getLink('This is a question').click()
    >>> user_browser.title
    'Bug #10 - This is a question'

The 'This is a question' page explains what will happen if No
Privileges Person chooses to make the bug into a question. There is a
required field for a comment. No other input is needed. No Privileges
Person must choose between the 'Cancel' button and the 'This is not a
question' button. He decides to create the question.

    >>> find_main_content(user_browser.contents).p
    <p>... the bug's status is set to Invalid. The new question
    will be linked to the bug. ...

    >>> user_browser.getControl('Cancel').type
    'submit'

    >>> user_browser.getControl('Comment').value = 'This bug is a question.'
    >>> user_browser.getControl('This is a Question').click()

No Privileges Person is shown the bug page again. There is a permanent
informational message stating that a question was was created from the
bug.

    >>> user_browser.title
    'Bug #10 in linux-source-2.6.15 (Ubuntu): ...another test bug...'

    >>> content = find_main_content(user_browser.contents)
    >>> content.find(id="bug-is-question")
    <p...This report is a question:
     Question #...: <a ...>another test bug</a>. </p>

The bug status is Invalid for 'linux-source-2.6.15 (Ubuntu)'--It
cannot be edited.

    >>> print extract_text(content(['table'], {'class' : 'listing'})[0])
    Affects                       Status   Importance  Assigned to
    linux-source-2.6.15 (Ubuntu)  Invalid  Medium      &mdash;

No Privileges Person looks at the page heading and sees that Foo Bar
is the bu owner. He sees the link to the question in the 'Related
questions' portlet, and uses it to go to the question page.

    >>> print extract_text(content(['img'], src='/@@/bug-medium')[0].parent)
    Bug #10, first reported on 2004-01-10 by Foo Bar

    >>> portlet = find_portlet(user_browser.contents, 'Related questions')
    >>> question_anchor = portlet.div.a
    >>> question_anchor
    <a href=".../ubuntu/+source/linux-source-2.6.15/+question/...">another
    test bug</a>

    >>> user_browser.getLink('another test bug').click()
    >>> user_browser.title
    'linux-source-2.6.15 in ubuntu question #...: ...another test bug...'

No Privileges Person sees that the question status is Open and that is
was asked by Foo Bar in the page heading. Foo Bar is the only
subscriber to this question (a question in Ubuntu would have many
indirect subscribers in the real world). As No Privileges Person is not
the question owner, he is invited to help answer the problem. He uses
the link to Related bug to return to the bug.

    >>> content = find_main_content(user_browser.contents)
    >>> print extract_text(content(['img'], src='/@@/question')[0].parent)
    Open Question #..., asked ... by Foo Bar

    >>> question_id = user_browser.url.split('/')[-1]
    >>> portlet_heading = 'Subscribers to question #%s' % question_id
    >>> portlet = find_portlet(user_browser.contents, portlet_heading)
    >>> portlet.a
    <a href="/~name16">Foo Bar</a>

    >>> content.h2
    <h2>...Can you help with this problem?...</h2>

    >>> user_browser.getControl("Add Answer").type
    'submit'

    >>> portlet = find_portlet(user_browser.contents, 'Related bugs')
    >>> portlet.a
    <a href="http://bugs.launchpad.dev/bugs/10">#10: another test bug</a>

    >>> user_browser.getLink('#10: another test bug').click()
    >>> user_browser.title
    'Bug #10 in linux-source-2.6.15 (Ubuntu): ...another test bug...'

Foo Bar received an email informing him that he asked a question. He
used the link the email to view the page in his browser.

    >>> admin_browser.open(question_anchor['href'])
    >>> admin_browser.title
    'linux-source-2.6.15 in ubuntu question #...: ...another test bug...'

    >>> admin_browser.getControl('Problem Solved').type
    'submit'
    >>> admin_browser.getControl("I'm Providing More Information").type
    'submit'


== When a question cannot be created from a bug  ==

Thunderbird does not use Launchpad to track bugs. Questions cannot
be made from its bugs. When No Privileges Person uses the link in
the Bug Actions menu, the page explains why he cannot make the bug
into a question.

    >>> user_browser.open('http://bugs.launchpad.dev/thunderbird/+bug/9')
    >>> user_browser.title
    'Bug #9 in Mozilla Thunderbird: ...Thunderbird crashes...'
    >>> user_browser.getLink('This is a question').click()
    >>> user_browser.title
    'Bug #9 - This is a question'
    >>> find_main_content(user_browser.contents).p
    <p>
    A question cannot be created from this bug.
    Mozilla Thunderbird does not use Launchpad to track bugs. ...

The form is present, but without a button to create the question.
No Privileges Person chooses the Cancel button.

    >>> user_browser.getControl('This is a Question').click()
    Traceback (most recent call last):
    ...
    LookupError: ...

    >>> user_browser.getControl('Cancel').click()
    >>> user_browser.title
    'Bug #9 in Mozilla Thunderbird: ...Thunderbird crashes...'

IF No Privileges Person were to create a question from a bug, then
return to the create a question from a bug page using his back button
or a bookmark, he sees that he cannot create the question again.

    >>> user_browser.open(
    ...     'http://bugs.launchpad.dev'
    ...     '/ubuntu/+source/linux-source-2.6.15/+bug/10/+create-question')
    >>> user_browser.title
    'Bug #10 - This is a question'
    >>> find_main_content(user_browser.contents).p
    <p>
    A question cannot be created from this bug.
    A question was already created from this bug. ...

    >>> user_browser.getControl('Create a Question from this Bug').click()
    Traceback (most recent call last):
    ...
    LookupError: ...

Most browsers cache pages. When No Privileges Person uses his his
browser's back button, after creating a question, he is re-shown the
form as it was. He resubmit the form, and is notified that a question
could not be created.

    >>> user_browser.open(
    ...     'http://bugs.launchpad.dev/jokosher/+bug/12')
    >>> user_browser.title
    'Bug #12 in Jokosher: ...Copy, Cut and Delete operations should work...'
    >>> user_browser.getLink('This is a question').click()
    >>> user_browser.getControl('Comment').value = 'This will succeed.'
    >>> user_browser.getControl('This is a Question').click()
    >>> user_browser.title
    'Bug #12 in Jokosher: ...Copy, Cut and Delete operations should work...'
    >>> get_feedback_messages(user_browser)[0]
    u'This report is a question:...Question #16:\nCopy, Cut and Delete...'

    >>> user_browser.goBack(count=1)
    >>> user_browser.getControl('Comment').value = 'This will fail.'
    >>> user_browser.getControl('This is a Question').click()
    >>> get_feedback_messages(user_browser)[0]
    u'A question could not created from this bug.'


== This is not a question ==

After a question is created from a bug, the bug's Action menu displays
the 'This is not a question' link. No Privileges Person decides to
reactivate a bug report.

    >>> user_browser.title
    'Bug #12 in Jokosher: ...Copy, Cut and Delete operations should work...'
    >>> user_browser.getLink('This is not a question').click()
    >>> user_browser.title
    'Bug #12 - This is not a question'

The 'This is not a question' page explains what will happen if No
Privileges Person chooses to reactivate the bug. There is a required
field for a comment. No other input is needed. No Privileges Person
must choose between the 'Cancel' button and the 'This is not a
question' button. He decides to create the question.

    >>> find_main_content(user_browser.contents).p
    <p>... Reactivate this bug report by removing the question created
    from the bug. ...

    >>> user_browser.getControl('Cancel').type
    'submit'

    >>> user_browser.getControl('Comment').value = 'I misunderstood.'
    >>> user_browser.getControl('This is Not a Question').click()

No Privileges Person is shown the bug page again. There is a notice
stating that a question was removed from the bug. The Related
Questions portlet is gone too. He views the question and sees that
it is still in the Open status.

    >>> user_browser.title
    'Bug #12 in Jokosher: ...Copy, Cut and Delete operations should work...'

    >>> get_feedback_messages(user_browser)
    [u'Removed Question #...: Copy, Cut and Delete operations should work...']

    >>> portlet = find_portlet(user_browser.contents, 'Related questions')
    >>> portlet == None
    True

    >>> user_browser.getLink(
    ...     'Copy, Cut and Delete operations should work on '
    ...     'selections').click()
    >>> user_browser.title
    'Jokosher question #16: ...Copy, Cut and Delete operations should work...'

    >>> content = find_main_content(user_browser.contents)
    >>> print extract_text(content(['img'], src='/@@/question')[0].parent)
    Open Question #..., asked ... by Foo Bar

No Privileges Person uses his browser's back button to view the bug
again. The bug status is sill Invalid for Jokosher, but he can edit it.

    >>> user_browser.goBack(count=1)
    >>> content = find_main_content(user_browser.contents)
    >>> print extract_text(content(['table'], {'class' : 'listing'})[0])
    Affects                       Status   Importance  Assigned to
    Jokosher                      Invalid  Critical     &mdash;
    Affecting: Jokosher
    Filed here by: Foo Bar...
