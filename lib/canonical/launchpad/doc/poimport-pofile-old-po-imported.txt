PO Import test with a .po file that has a PO-Revision-Date not updated
----------------------------------------------------------------------

When we import a .po file with a 'PO-Revision-Date' that has an older value
that the one stored in IPOFile.header, we should detect it and notify the user
that they should update that field or we assume that such file is an old
version that should not be imported. That way, they have a chance to fix it.

In this test, we are going to check that we detect and notify it.

Here are some imports we need to get this test running.

  >>> from canonical.database.sqlbase import flush_database_updates
  >>> from canonical.launchpad.interfaces import IPersonSet
  >>> from canonical.launchpad.interfaces import IPOTemplateNameSet
  >>> from canonical.launchpad.interfaces import ITranslationImportQueue
  >>> from canonical.launchpad.database import POTemplateSubset
  >>> import datetime
  >>> import pytz
  >>> UTC = pytz.timezone('UTC')
  >>> translation_import_queue = getUtility(ITranslationImportQueue)

We need this for the Librarian to work properly.

  >>> import transaction

And also, the DBSchema to change the imports status

  >>> from canonical.lp.dbschema import RosettaImportStatus

Then, let's get a handle to our mailer. This is the thing we'll examine to show
what email has been sent, to whom, and what the body of the message contains:

  >>> import email
  >>> from canonical.launchpad.mail import stub

Login as an admin to be able to do changes to the import queue.

  >>> login('carlos@canonical.com')

Here's the person who'll be doing the import.

  >>> person_set = getUtility(IPersonSet)
  >>> person = person_set.getByName('sabdfl')

Now, is time to create the new potemplate

  >>> from canonical.launchpad.database import ProductRelease
  >>> release = ProductRelease.get(3)
  >>> release.productseries.product.name
  u'firefox'
  >>> series = release.productseries
  >>> ptn = getUtility(IPOTemplateNameSet).new('firefox', 'Whatever')
  >>> subset = POTemplateSubset(productseries=series)
  >>> potemplate = subset.new(
  ...     potemplatename=ptn,
  ...     path='po/firefox.pot',
  ...     owner=person)

We create the POFile object where we are going to attach the .po file.

  >>> pofile = potemplate.newPOFile('cy')

First, we do a valid import.

  >>> pofile_contents = r'''
  ... msgid ""
  ... msgstr ""
  ... "PO-Revision-Date: 2005-05-03 20:41+0100\n"
  ... "Last-Translator: Carlos Perello Marin <carlos@canonical.com>\n"
  ... "Content-Type: text/plain; charset=UTF-8\n"
  ... "Plural-Forms: nplurals=4; plural=n==1) ? 0 : n==2 ? 1 : (n != 8 || n != 11) ? 2 : 3;\n"
  ... "X-Rosetta-Export-Date: %s\n"
  ...
  ... msgid "foo"
  ... msgstr "blah"
  ... ''' % datetime.datetime.now(UTC).isoformat()
  >>> published = True
  >>> entry = translation_import_queue.addOrUpdateEntry(
  ...     pofile.path, pofile_contents, published, person,
  ...     productseries=series, potemplate=potemplate, pofile=pofile)
  >>> transaction.commit()

We must approve the entry to be able to import it.

  >>> entry.status = RosettaImportStatus.APPROVED
  >>> flush_database_updates()

We do the import.

  >>> pofile.importFromQueue()

The status is now IMPORTED:

  >>> entry.status == RosettaImportStatus.IMPORTED
  True

We can see that the header has the same 'PO-Revision-Date' than the file we
just imported.

    >>> print pofile.header
    PO-Revision-Date: 2005-05-03 20:41+0100
    ...

And we sent an email with the notification of the error.

We need to commit the transaction to get the email.

  >>> transaction.commit()

There is one email.

  >>> len(stub.test_emails)
  1

Let's remove it from the queue.

  >>> from_addr, to_addrs, raw_message = stub.test_emails.pop()

Now, we are going to import a .po file that has a 'PO-Revision-Date' field
with a date older than a previous .po import.

  >>> pofile_contents = r'''
  ... msgid ""
  ... msgstr ""
  ... "PO-Revision-Date: 2005-05-03 19:41+0100\n"
  ... "Last-Translator: Carlos Perello Marin <carlos@canonical.com>\n"
  ... "Content-Type: text/plain; charset=UTF-8\n"
  ... "Plural-Forms: nplurals=4; plural=n==1) ? 0 : n==2 ? 1 : (n != 8 || n != 11) ? 2 : 3;\n"
  ... "X-Rosetta-Export-Date: %s\n"
  ...
  ... msgid "foo"
  ... msgstr "blah"
  ... ''' % datetime.datetime.now(UTC).isoformat()
  >>> published = True
  >>> entry = translation_import_queue.addOrUpdateEntry(
  ...     pofile.path, pofile_contents, published, person,
  ...     productseries=series, potemplate=potemplate, pofile=pofile)
  >>> transaction.commit()

We must approve the entry to be able to import it.

  >>> entry.status = RosettaImportStatus.APPROVED
  >>> flush_database_updates()

We do the import.

  >>> pofile.importFromQueue()

The status is now FAILED:

  >>> entry.status == RosettaImportStatus.FAILED
  True

We can see that the header remains unchanged

    >>> print pofile.header
    ...
    PO-Revision-Date: 2005-05-03 20:41+0100
    ...

And we sent an email with the notification of the error.

We need to commit the transaction to get the email.

  >>> transaction.commit()

There is one email and it's for the error we produced.

  >>> len(stub.test_emails)
  1
  >>> from_addr, to_addrs, raw_message = stub.test_emails.pop()
  >>> msg = email.message_from_string(raw_message)
  >>> msg["Subject"]
  'Import problem - Welsh (cy) - firefox in Mozilla Firefox trunk'
  >>> print msg.get_payload(decode=True)
  Hello Mark Shuttleworth,
  <BLANKLINE>
  On ..., you uploaded a file with
  Welsh (cy) translations for firefox in Mozilla Firefox trunk in Rosetta.
  <BLANKLINE>
  We didn't import it because you didn't update its header to note
  the time stamp when you added your translations.
  <BLANKLINE>
  To fix this problem, please upload again this file with the
  'PO-Revision-Date' field updated.
  <BLANKLINE>
  For your convenience, you can get the file you uploaded at:
  http://localhost:58000/54/cy.po
  <BLANKLINE>
  Thanks for using Rosetta.
  <BLANKLINE>
  The Rosetta SWAT Team
  <BLANKLINE>
