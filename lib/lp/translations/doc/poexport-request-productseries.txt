= Product Series Translation Exports =


    >>> from zope.component import getUtility
    >>> from lp.translations.interfaces.poexportrequest import (
    ...     IPOExportRequestSet)

This is a dummy logger class to capture the export's log messages.

    >>> from canonical.launchpad.ftests.logger import MockLogger
    >>> from lp.registry.model.person import Person
    >>> person = Person.selectOneBy(name='name12')

An arbitrary logged-in user requests an export of all translations for
Evolution series trunk.

At the UI level, this is easy.  At the level we are looking at now, this
consists of a series of requests for all templates and translations attached
to the product series.

    >>> from lp.registry.model.product import Product
    >>> from lp.registry.model.productseries import ProductSeries
    >>> from lp.translations.model.potemplate import POTemplate
    >>> evolution_product = Product.selectOneBy(name='evolution')
    >>> evolution_trunk = ProductSeries.selectOneBy(
    ...     product=evolution_product, name='trunk')
    >>> potemplates = list(POTemplate.selectBy(productseries=evolution_trunk))
    >>> pofiles = []
    >>> for template in potemplates:
    ...     pofiles += template.pofiles

    >>> request_set = getUtility(IPOExportRequestSet)
    >>> request_set.addRequest(person, potemplates, pofiles)

Now we request that the queue be processed.

    >>> class MockTransactionManager:
    ...     def commit(self):
    ...         pass

    >>> import logging
    >>> from lp.translations.scripts.po_export_queue import process_queue
    >>> logger = MockLogger()
    >>> logger.setLevel(logging.DEBUG)
    >>> process_queue(MockTransactionManager(), logger)
    log> Exporting objects for ..., related to template evolution-2.2 in
    Evolution trunk
    log> Exporting objects for ..., related to template evolution-2.2-test in
    Evolution trunk
    log> Stored file at http://.../launchpad-export.tar.gz

We need to make sure the Librarian data has settled into place.

    >>> import transaction
    >>> transaction.commit()

The user receives a confirmation email.

    >>> def print_mail_body(body):
    ...     lines = body[body.index('\n\n')+2:].split('\n')
    ...     for line in lines:
    ...         print ">", line

    >>> from lp.services.mail.stub import test_emails
    >>> len(test_emails)
    1
    >>> from_addr, to_addrs, body = test_emails.pop()
    >>> print_mail_body(body)
    >
    > Hello ...,
    >
    > The translation files you requested from Launchpad are ready for
    > download from the following location:
    >
    >     http://localhost:58000/.../launchpad-export.tar.gz

The email contains a URL linking to where the exported file can be downloaded.

    >>> import re

    >>> def extract_url(text):
    ...     urls = re.compile(r'^ *(http://.*)$', re.M).findall(text)
    ...     return urls[0]

    >>> url = extract_url(body)

Let's download it and make sure the contents look ok.

    >>> import urllib2
    >>> from canonical.launchpad.helpers import string_to_tarfile
    >>> tarball = string_to_tarfile(urllib2.urlopen(url).read())
    >>> for name in sorted(tarball.getnames()):
    ...   print name
    evolution-2.2/
    evolution-2.2/evolution-2.2-es.po
    po/
    po/evolution-2.2-test-pt_BR.po
    po/evolution-2.2-test.pot
    po/evolution-2.2.pot
