POFile View
===========

On this section, we are going to test the view class for an IPOFile.

First, we need some imports.

    >>> from StringIO import StringIO
    >>> from zope.component import getView
    >>> from zope.publisher.browser import FileUpload
    >>> from canonical.launchpad.interfaces import (
    ...     ITranslationImportQueue, IPOTemplateSet, IDistributionSet,
    ...     ISourcePackageNameSet)
    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest

All the tests will be submitted as comming from the No Privilege person.

    >>> login('no-priv@canonical.com')

Now it's time to test the initialisation of the view class.

    >>> sourcepackagenameset = getUtility(ISourcePackageNameSet)
    >>> sourcepackagename = sourcepackagenameset['evolution']
    >>> distributionset = getUtility(IDistributionSet)
    >>> distribution = distributionset['ubuntu']
    >>> release = distribution['hoary']
    >>> potemplateset = getUtility(IPOTemplateSet)
    >>> potemplatesubset = potemplateset.getSubset(
    ...     distrorelease=release, sourcepackagename=sourcepackagename)
    >>> potemplate = potemplatesubset['evolution-2.2']
    >>> pofile_es = potemplate.getPOFileByLang('es')
    >>> request = LaunchpadTestRequest(form={'show': 'all' })
    >>> pofile_view = getView(pofile_es, '+translate', request)
    >>> pofile_view.initialize()

Check to know the plural forms that this IPOFile has.

    >>> pofile_es.language.pluralforms
    2

And thus, the view class should know that it doesn't lacks the plural forms
information.

    >>> pofile_view.has_plural_form_information
    True

We know that we want all messages.

    >>> pofile_view.show
    'all'

This time, we are going to see what happens if we get an IPOFile without
the plural form information.

    >>> pofile_tlh = potemplate.getDummyPOFile('tlh')
    >>> request = LaunchpadTestRequest(form={'show': 'all' })
    >>> pofile_view = getView(pofile_tlh, '+translate', request)
    >>> pofile_view.initialize()

Here we can see that it's lacking that information.

    >>> pofile_tlh.language.pluralforms is None
    True

And the view class detects it correctly.

    >>> pofile_view.has_plural_form_information
    False

Check the argument to filter messagesets.

    >>> request = LaunchpadTestRequest(form={
    ...     'show': 'translated'})
    >>> pofile_view = getView(pofile_es, '+translate', request)
    >>> pofile_view.initialize()

Yeah, it detects it correctly and stores the attribute as it should be.

    >>> pofile_view.show
    'translated'

Let's move to the navigation URLS testing.

We get a request without any argument.

    >>> request = LaunchpadTestRequest(form={'show': 'all' })
    >>> pofile_view = getView(pofile_es, '+translate', request)
    >>> pofile_view.initialize()

It's time to test that we get the right message sets from the submitted form.

    >>> request = LaunchpadTestRequest(form={'show': 'all' })
    >>> pofile_view = getView(pofile_es, '+translate', request)
    >>> pofile_view.initialize()

We get the first entry that should be in the form, the one with id == 130.

    >>> for potmsgset in pofile_view._getSelectedPOTMsgSets():
    ...     if potmsgset.id == 130:
    ...         break

The id for this message set is the one we expected.

    >>> potmsgset.id
    130

And as it's the first entry, its sequence number is also the right one.

    >>> potmsgset.sequence
    1

Test that the associated msgid is the one we want.

    >>> pomsgset_view = pofile_view._buildPOMsgSetView(potmsgset)
    >>> pomsgset_view.initialize()
    >>> pomsgset_view.msgid
    u'evolution addressbook'

It does not have a plural msgid.

    >>> pomsgset_view.msgid_plural is None
    True

And thus, it only has one translation.

    >>> pomsgset_view.pluralform_indices
    [0]

Which is the one we wanted.

    >>> pomsgset_view.getActiveTranslation(0)
    u'libreta de direcciones de Evolution'

It's time to check the submission of translations and the IPOFile statistics
update.

But first, let's see current values.

    >>> pofile_es.updateStatistics()
    (7, 1, 0)
    >>> pofile_es.currentCount()
    7
    >>> pofile_es.updatesCount()
    1
    >>> pofile_es.rosettaCount()
    0

Now we do the submit

    >>> request = LaunchpadTestRequest(form={
    ...     'batch': '10',
    ...     'start': '10',
    ...     'show': 'untranslated',
    ...     'msgset_130': None,
    ...     'msgset_130_es_translation_0_new_checkbox': True,
    ...     'msgset_130_es_translation_0_new': 'Foo',
    ...     'msgset_138': None,
    ...     'msgset_138_es_translation_0_new_checkbox': True,
    ...     'msgset_138_es_translation_0': 'Bar',
    ...     'submit_translations': 'Save &amp; Continue'})
    >>> request.method = 'POST'
    >>> pofile_view = getView(pofile_es, '+translate', request)
    >>> pofile_view.initialize()

And check again.

    >>> pofile_es.currentCount()
    7
    >>> pofile_es.updatesCount()
    2
    >>> pofile_es.rosettaCount()
    1

Also, we can see that we got redirected to next batch, that is the first one.

    >>> pofile_view.request.response.getHeader('Location')
    'http://127.0.0.1?start=0&show=untranslated'

The messsage's sequence is the position of that message in latest imported
template. We are going to test now what happens when we submit a potmsgset
that has a sequence == 0. It means that that msgset is disabled and we don't
serve such messages in our translation form, but we could get it in some
situations, like when this set of actions happen:

 - A user gets a translation form for the template X.
 - A new template X is imported into the system that removes some messages
   from the previous import.
 - Previous user, submits the translation form he got for the old template X.

The problem here is that some of the messages on that form are disabled so
their sequence is 0.

    >>> from canonical.launchpad.database import POTMsgSet
    >>> potmsgset = POTMsgSet.get(161)
    >>> potmsgset.sequence
    0
    >>> request = LaunchpadTestRequest(form={
    ...     'batch': '10',
    ...     'start': '0',
    ...     'show': 'untranslated',
    ...     'msgset_161': None,
    ...     'msgset_161_es_translation_0_new_checkbox': True,
    ...     'msgset_161_es_translation_0_new': 'Foo',
    ...     'submit_translations': 'Save &amp; Continue'})
    >>> request.method = 'POST'
    >>> pofile_view = getView(pofile_es, '+translate', request)
    >>> pofile_view.initialize()

And we can see that we didn't get errors.

    >>> pomsgset = potmsgset.getPOMsgSet(
    ...     pofile_es.language.code, pofile_es.variant)
    >>> pomsgset.active_texts
    [u'Foo']
    >>> pofile_view.errors
    {}

Now, we are going to check the alternative language submission.

    >>> request = LaunchpadTestRequest(form={
    ...     'show': 'all',
    ...     'batch': '10',
    ...     'start': '10',
    ...     'field.alternative_language': 'fr',
    ...     'select_alternate_language': 'Change'})
    >>> request.method = 'get'
    >>> pofile_view = getView(pofile_es, '+translate', request)
    >>> pofile_view.initialize()
    >>> pofile_view.second_lang_code
    'fr'

Let's check that the upload form sets the right fields.

To be sure that we are using the right entry from the import queue,
we check that it's empty atm.

    >>> translationimportqueue = getUtility(ITranslationImportQueue)
    >>> len(translationimportqueue) == 0
    True

The FileUpload class needs a class with the attributes: filename, file and
headers.

    >>> class FileUploadArgument:
    ...     filename='po/es.po'
    ...     file=StringIO('foos')
    ...     headers=''

Now, we do the upload.

    >>> request = LaunchpadTestRequest(form={
    ...     'file': FileUpload(FileUploadArgument()),
    ...     'upload_type': 'upstream',
    ...     'pofile_upload': 'Upload'})
    >>> request.method = 'POST'
    >>> pofile_view = getView(pofile_es, '+upload', request)
    >>> pofile_view.initialize()

As we can see, we have now one entry in our queue.

    >>> len(translationimportqueue) == 1
    True

Get it and check that some attributes are set as they should.

    >>> entry = translationimportqueue.get(1)
    >>> entry.pofile == pofile_es
    True

And for the path, we are going to use the one we already have for the
given POFile instead of the one given with the submit.

    >>> entry.path == pofile_es.path
    True
    >>> pofile_es.path
    u'es.po'

Let's check the traversal code.

    >>> from zope.security.proxy import isinstance
    >>> from canonical.launchpad.browser.pofile import POFileNavigation
    >>> from canonical.launchpad.database import POMsgSet, DummyPOMsgSet

First, what happens if we get any method that is not supported?

    >>> request = LaunchpadTestRequest(form={'show': 'all' })
    >>> request.method = 'PUT'
    >>> navigation = POFileNavigation(pofile_es, request)
    >>> navigation.traverse('1')
    Traceback (most recent call last):
    ...
    AssertionError: We only know about GET, HEAD, and POST

The traversal value should be an integer.

    >>> request.method = 'GET'
    >>> navigation.traverse('foo')
    Traceback (most recent call last):
    ...
    NotFoundError:...

Also, pomsgset sequence numbers are always >= 1.

    >>> navigation.traverse('0')
    Traceback (most recent call last):
    ...
    NotFoundError:...

The given sequence number, we also need that is part of the available ones,
if we use a high one, we should detect it.

    >>> navigation.traverse('30')
    Traceback (most recent call last):
    ...
    NotFoundError:...

But if we have a right sequence number, we will get a valid pomsgset.

    >>> isinstance(navigation.traverse('1'), POMsgSet)
    True

Now, we are going to select a POMsgSet that doesn't exist yet in our database.

    >>> isinstance(navigation.traverse('22'), DummyPOMsgSet)
    True

But if we do a POST, instead of getting a DummyPOMsgSet object, we will get a
POMsgSet.

    >>> request.method = 'POST'
    >>> isinstance(navigation.traverse('22'), POMsgSet)
    True

And that's all, folks!
