= PO Import test with a .pot file that has a syntax error =

When we import a .pot file with a syntax error, we should notify
the user about that error so they have a chance to fix it.

In this test, we are going to check that we detect and notify the error.

Here are some imports we need to get this test running.

    >>> from canonical.database.sqlbase import flush_database_updates
    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> from canonical.launchpad.interfaces import ITranslationImportQueue
    >>> from canonical.launchpad.database import POTemplateSubset
    >>> import datetime
    >>> import pytz
    >>> UTC = pytz.timezone('UTC')
    >>> translation_import_queue = getUtility(ITranslationImportQueue)

We need this for the Librarian to work properly.

    >>> import transaction

And also, the DBSchema to change the imports status

    >>> from canonical.launchpad.interfaces import RosettaImportStatus

Login as an admin to be able to do changes to the import queue.

    >>> login('carlos@canonical.com')

Here's the person who'll be doing the import.

    >>> person_set = getUtility(IPersonSet)
    >>> person = person_set.getByName('sabdfl')

Now, is time to create the new potemplate

    >>> from canonical.launchpad.database import ProductRelease
    >>> release = ProductRelease.get(3)
    >>> release.productseries.product.name
    u'firefox'
    >>> series = release.productseries
    >>> subset = POTemplateSubset(productseries=series)
    >>> potemplate = subset.new(
    ...     name='firefox',
    ...     translation_domain='firefox',
    ...     path='po/firefox.pot',
    ...     owner=person)

Let's import a .pot file that is missing its header. That's a
TranslationFormatSyntaxError

    >>> potemplate_contents = r'''
    ... msgid "foo"
    ... msgstr ""
    ... '''
    >>> published = True
    >>> entry = translation_import_queue.addOrUpdateEntry(
    ...     potemplate.path, potemplate_contents, published, person,
    ...     productseries=series, potemplate=potemplate)
    >>> transaction.commit()
    >>> entry.status = RosettaImportStatus.APPROVED
    >>> (subject, message) = potemplate.importFromQueue(entry)

The status is now FAILED:

    >>> entry.status == RosettaImportStatus.FAILED
    True

And the code composed email with a notification of the error.

    >>> subject
    u'Import problem - firefox in Mozilla Firefox trunk'
    >>> print message
    Hello Mark Shuttleworth,
    <BLANKLINE>
    On ..., you uploaded a file with translation templates for firefox in
    Mozilla Firefox trunk to Launchpad.
    <BLANKLINE>
    We were unable to import the file because of errors in its format:
    <BLANKLINE>
    No header found in this pofile
    <BLANKLINE>
    If you use gettext, you can check your file for correct formatting with
    the 'msgfmt -c' command.
    Please fix any errors raised by msgfmt and upload the file again. If you
    check the file and you don't find any error in it, please look for an
    answer or file a question at https://answers.launchpad.net/rosetta/
    <BLANKLINE>
    For your convenience, you can get the file you uploaded at:
    http://localhost:58000/.../firefox.pot
    <BLANKLINE>
    Thank you,
    <BLANKLINE>
    The Launchpad team
    <BLANKLINE>
