= BinaryPackageRelease Pages =

The page for a 'successfully built' build provides link(s) to the produced
binaries independent of their context, the raw IBinaryPackageRelease
content class/page.

Let's find a build that produced some binaries:

  >>> browser.open("http://launchpad.dev/ubuntu/+builds")
  >>> browser.getControl(name="build_state").value = ['built']
  >>> browser.getControl("Update").click()
  >>> browser.getLink(
  ...     'i386 build of mozilla-firefox 0.9 in ubuntu '
  ...     'warty RELEASE').click()
  >>> browser.url
  'http://launchpad.dev/+builds/+build/2'

This build produced one BinaryPackage, called 'mozilla-firefox 0.9',
which is presented in the right portlet, called 'Resulting Binaries'.
Let's just check if the page is presented without errors (see bug
#76163):

  >>> browser.getLink('mozilla-firefox 0.9').click()
  >>> browser.url
  'http://launchpad.dev/+builds/+build/2/mozilla-firefox'

When rendering package relationships only existent packages contain
links to within LP application, not found packages are rendered as
simple text.

This "Provides" section contains one link to the 'mozilla-firefox'
binary in the context in question, i.e., 'warty i386':

  >>> provides_section = find_tag_by_id(browser.contents, 'provides')
  >>> parse_relationship_section(str(provides_section))
  LINK: "mozilla-firefox" -> http://launchpad.dev/ubuntu/warty/i386/mozilla-firefox

This "Depends" section contains only unsatisfied dependencies, which
is rendered as text:

  >>> depends_section = find_tag_by_id(browser.contents, 'depends')
  >>> parse_relationship_section(str(depends_section))
  TEXT: "gcc-3.4(&gt;=3.4.1-4sarge1)"
  TEXT: "gcc-3.4(&lt;&lt;3.4.2)"
  TEXT: "gcc-3.4-base"
  TEXT: "libc6(&gt;=2.3.2.ds1-4)"
  TEXT: "libstdc++6-dev(&gt;=3.4.1-4sarge1)"
