= Team contact address =

Team admins are allowed to set the contact method used by Launchpad to
send notifications to that team.  The possible contact methods are:

    - None:  There's no way to contact the team as a whole, so any
             notification is sent to every member of the team.

    - External address:  All notifications are sent to the given email
                         address (stored as the team's preferredemail).

    - Hosted mailing list:  Notifications are sent to this team's mailing
                            list hosted on Launchpad.

    >>> browser = setupBrowser(auth='Basic test@canonical.com:test')
    >>> browser.open('http://launchpad.dev/~landscape-developers')
    >>> browser.getLink('Change contact address').click()
    >>> browser.url
    'http://launchpad.dev/~landscape-developers/+contactaddress'

As we can see, the landscape-developers team has no contact address.

    >>> browser.getControl(name='field.contact_method').displayValue
    ['\xa0Each member individually']

Changing it to an external address will require the user to go through
the email address confirmation process.

    >>> browser.getControl('Another e-mail address').selected = True
    >>> browser.getControl(name='field.contact_address').value = 'foo@baz.com'
    >>> browser.getControl('Change').click()

    >>> browser.url
    'http://launchpad.dev/~landscape-developers'
    >>> for msg in get_feedback_messages(browser):
    ...     print msg
    A confirmation message has been sent to...

    >>> from canonical.launchpad.mail import stub
    >>> from_addr, to_addrs, raw_msg = stub.test_emails.pop()
    >>> assert not stub.test_emails

    # Extract the link (from the email we just sent) the user will have to
    # use to finish the registration process.
    >>> from canonical.launchpad.ftests.logintoken import (
    ...     get_token_url_from_email)
    >>> token_url = get_token_url_from_email(raw_msg)
    >>> token_url
    'http://launchpad.dev/token/...'
    >>> to_addrs
    ['foo@baz.com']

Follow the token link, to confirm the new email address.

    >>> browser.open(token_url)
    >>> browser.url
    'http://launchpad.dev/token/.../+validateteamemail'
    >>> browser.getControl('Continue').click()

    >>> browser.url
    'http://launchpad.dev/~landscape-developers'
    >>> for msg in get_feedback_messages(browser):
    ...     print msg
    Email address successfully confirmed.

    >>> browser.getLink('Change contact address').click()
    >>> browser.url
    'http://launchpad.dev/~landscape-developers/+contactaddress'
    >>> browser.getControl(name='field.contact_method').displayValue
    ['\xa0Another e-mail address']
    >>> browser.getControl(name='field.contact_address').value
    'foo@baz.com'

To change that to a hosted mailing list, we first need to request the
mailing list to be activated.

    >>> browser.getControl('The Launchpad mailing list').disabled
    True
    >>> browser.getControl('The Launchpad mailing list').selected = True
    Traceback (most recent call last):
    ...
    AttributeError: item is disabled

    >>> browser.getControl('Apply for Mailing List').click()
    >>> browser.url
    'http://launchpad.dev/~landscape-developers'
    >>> for msg in get_feedback_messages(browser):
    ...     print msg
    Mailing list requested and queued for approval.

    >>> from canonical.launchpad.database import MailingList, Person
    >>> mailing_list = MailingList.selectOneBy(
    ...     team=Person.byName('landscape-developers'))
    >>> mailing_list.status
    <...MailingListStatus.REGISTERED...>

    >>> browser.getLink('Change contact address').click()
    >>> browser.getControl(name='field.contact_method').displayValue
    ['\xa0Another e-mail address']
    >>> browser.getControl('The Launchpad mailing list').disabled
    True
    >>> for msg in get_feedback_messages(browser):
    ...     print msg
    Not available because the application for a mailing list is pending
    approval.

Once the mailing list is requested, the button to request its activation is
not shown anymore.

    >>> browser.getControl('Apply for Mailing List')
    Traceback (most recent call last):
    ...
    LookupError: ...

The mailing list can be used as the team's contact address only when its
status is ACTIVE.

    >>> from canonical.launchpad.interfaces import MailingListStatus
    >>> from canonical.launchpad.ftests import login, logout
    >>> login('foo.bar@canonical.com')
    >>> mailing_list.review(
    ...     Person.byName('name16'), MailingListStatus.APPROVED)
    >>> mailing_list.syncUpdate()
    >>> logout()
    >>> browser.reload()
    >>> browser.getControl('The Launchpad mailing list').disabled
    True
    >>> browser.getControl('Apply for Mailing List')
    Traceback (most recent call last):
    ...
    LookupError: ...

    >>> for msg in get_feedback_messages(browser):
    ...     print msg
    Not available because mailing list is being constructed.

    >>> mailing_list.startConstructing()
    >>> browser.reload()
    >>> browser.getControl('The Launchpad mailing list').disabled
    True
    >>> browser.getControl('Apply for Mailing List')
    Traceback (most recent call last):
    ...
    LookupError: ...

    >>> for msg in get_feedback_messages(browser):
    ...     print msg
    Not available because mailing list is being constructed.

When the mailing list is constructed and made active, it can be used as
the team's contact address.

    >>> login('foo.bar@canonical.com')
    >>> mailing_list.transitionToStatus(MailingListStatus.ACTIVE)
    >>> mailing_list.syncUpdate()
    >>> logout()

    >>> browser.reload()
    >>> browser.getControl('Apply for Mailing List')
    Traceback (most recent call last):
    ...
    LookupError: ...

    >>> browser.getControl('The Launchpad mailing list').disabled
    False
    >>> browser.getControl('The Launchpad mailing list').selected = True
    >>> browser.getControl('Change').click()

    >>> browser.getLink('Change contact address').click()
    >>> browser.getControl(name='field.contact_method').displayValue
    ['\xa0The Launchpad mailing list for this team...]

XXX: We don't really want all this functionality to be visible to users
when this code lands on mainline, so there's a config variable which
control its visibility.  That variable is named expose_hosted_mailing_lists
and if it's set to False the option to use a hosted mailing list is not
visible.  This test will go away as soon as we decide to deploy that
functionality on production. -- Guilherme Salgado 2007-09-20

    >>> from canonical.config import config
    >>> config.mailman.expose_hosted_mailing_lists
    True

    >>> radio = browser.getControl(name='field.contact_method')
    >>> radio.displayOptions
    ['\xa0Each member individually',
     '\xa0The Launchpad mailing list for this team -
      landscape-developers@lists.launchpad.net',
     '\xa0Another e-mail address']

    >>> config.mailman.expose_hosted_mailing_lists = False
    >>> browser.reload()
    >>> radio = browser.getControl(name='field.contact_method')
    >>> radio.displayOptions
    ['\xa0Each member individually',
     '\xa0Another e-mail address']

