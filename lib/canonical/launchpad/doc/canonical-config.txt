= Canonical Config =

`canonical.config` provides singleton access to the Launchpad
configuration, accessed via the `config` module global. It is
responsible for loading the Launchpad schema and the environment's
correct config.


== CanonicalConfig AKA config ==

CanonicalConfig is a singleton that manages access to the config.
Cached copies are kept in thread locals ensuring the configuration
is thread safe (not that this will be a problem if we stick with
simple configuration).

    >>> from canonical.config import config
    >>> config.dbhost
    'localhost'
    >>> config.launchpad.db_statement_timeout is None
    True
    >>> config.launchpad.dbuser
    'launchpad'
    >>> config.librarian.dbuser
    'librarian'
    >>> config.librarian.upload_host
    'localhost'
    >>> config.librarian.upload_port
    59090
    >>> config.librarian.download_host
    'localhost'
    >>> config.librarian.download_port
    58000

There are also some automatically generated config items.

    >>> import os.path, canonical
    >>> from canonical.config import DEFAULT_SECTION
    >>> os.path.join(config.root, 'lib', 'canonical') == os.path.dirname(
    ...     canonical.__file__)
    True
    >>> config.name == os.environ.get('LPCONFIG', DEFAULT_SECTION)
    True


== Transition from ZConfig to LAZR ==

XXX sinzui 2008-02-11: This feature is deprecated.

During the transition from `ZConfig` to `canonical.lazr.config`,
`canonical.config` will load both config systems. When the
section and key are not found in the lazr.config instance,
canonical.config will failover to the ZConfig instance.

For example, ZConfig data is stored in the _cache attribute, lazr.config
data is stored in _config. ZConfig stores the value as an int in this
example, where lazr.config values are always strings. Data from the
lazr.config instance takes precedence over ZConfig when data is accessed
as attributes of canonical.config.

    >>> config._config.answertracker.days_before_expiration
    '15'
    >>> config._cache.testrunner.answertracker.days_before_expiration
    15
    >>> config.answertracker.days_before_expiration
    '15'

lazr.config does not support multi-sections unlike ZConfig. Code that
access launchpad.vhosts.blueprints.hostname will failover to the ZConfig
instance.

    >>> config._config.launchpad.vhosts.blueprints.hostname
    Traceback (most recent call last):
      ...
    AttributeError: ...
    >>> config._cache.testrunner.launchpad.vhosts.blueprints.hostname
    'blueprints.launchpad.dev'
    >>> config.launchpad.vhosts.blueprints.hostname
    'blueprints.launchpad.dev'

When the ENABLE_DEPRECATED_ZCONFIG_WARNINGS is set to true in the
environment, a warning is raised when canonical.config fails over
to ZConfig. The previous example will raise a warning after the
variable is set.

    >>> import os
    >>> os.putenv('ENABLE_DEPRECATED_ZCONFIG_WARNINGS', 'true')
    >>> config.launchpad.vhosts.blueprints.hostname
    'blueprints.launchpad.dev'

    >>> os.putenv('ENABLE_DEPRECATED_ZCONFIG_WARNINGS', 'false')


== DatabaseConfig AKA dbconfig ==

XXX sinzui 2008-02-11: This feature is deprecated.

The dbconfig option overlays the database configurations of a
chosen config section over the base section:

    >>> from canonical.config import dbconfig
    >>> print config.dbhost
    localhost
    >>> print config.dbuser
    Traceback (most recent call last):
      ...
    AttributeError: ...
    >>> print config.launchpad.dbhost
    None
    >>> print config.launchpad.dbuser
    launchpad
    >>> print config.librarian.dbuser
    librarian

    >>> dbconfig.setConfigSection('librarian')
    >>> print dbconfig.dbhost
    localhost
    >>> print dbconfig.dbuser
    librarian

    >>> dbconfig.setConfigSection('launchpad')
    >>> print dbconfig.dbhost
    localhost
    >>> print dbconfig.dbuser
    launchpad

Some values are required to have a value, such as dbuser.  So we
get an exception if they are not set:

    >>> config.launchpad.dbuser = None
    >>> print dbconfig.dbuser
    Traceback (most recent call last):
      ...
    ValueError: dbuser must be set
    >>> config.launchpad.dbuser = 'launchpad'

