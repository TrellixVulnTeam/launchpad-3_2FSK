= ExternalBugTracker comment imports =

Some ExternalBugTrackers support the importing of comments from the
remote bug tracker into Launchpad.

In order to demonstrate this we need to create example Bug, BugTracker
and BugWatch instances with which to work.

    >>> from zope.interface import implements
    >>> from canonical.config import config
    >>> from canonical.database.sqlbase import commit
    >>> from canonical.launchpad.ftests.externalbugtracker import (
    ...     new_bugtracker)
    >>> from canonical.launchpad.interfaces import (
    ...     BugTrackerType, CreateBugParams, IBugMessageSet,
    ...     IBugWatchSet, IMessageSet, IPersonSet, IProductSet)
    >>> from canonical.testing import LaunchpadZopelessLayer

    >>> bug_tracker = new_bugtracker(BugTrackerType.BUGZILLA)

    >>> LaunchpadZopelessLayer.switchDbUser('launchpad')
    >>> sample_person = getUtility(IPersonSet).getByEmail(
    ...     'test@canonical.com')
    >>> firefox = getUtility(IProductSet).getByName('firefox')
    >>> bug = firefox.createBug(
    ...     CreateBugParams(sample_person, "Yet another test bug",
    ...         "Yet another test description.",
    ...         subscribe_reporter=False))

    >>> bug_watch = bug.addWatch(bug_tracker, '123456', sample_person)

    >>> commit()
    >>> LaunchpadZopelessLayer.switchDbUser(config.checkwatches.dbuser)

The ISupportsCommentImport interface defines the methods that external
bug trackers which support comment imports must provide. This interface
defines three methods: getCommentIds(), getPosterForComment() and
getMessageForComment().

In order to test the importing of comments we will create a new
ExternalBugTracker class which implements these three methods.

    >>> from canonical.launchpad.components.externalbugtracker import (
    ...     ExternalBugTracker)
    >>> from canonical.launchpad.interfaces import (
    ...     ISupportsCommentImport)
    >>> class CommentImportingExternalBugTracker(ExternalBugTracker):
    ...     implements(ISupportsCommentImport)
    ...
    ...     comment_dict = {
    ...         '1': "Example comment the first",
    ...         '2': "Example comment the second",
    ...         '3': "Example comment the third"}
    ...
    ...     def getCommentIds(self, bug_watch):
    ...         return sorted(self.comment_dict.keys())
    ...
    ...     def getPosterForComment(self, bug_watch, comment_id):
    ...         """Return a tuple of (displayname, email)."""
    ...         return "Joe Bloggs", "joe.bloggs@example.com"
    ...
    ...     def getMessageForComment(self, bug_watch, comment_id, poster):
    ...         """Return a Message object for a comment."""
    ...         message = getUtility(IMessageSet).fromText(
    ...             "Some subject or other",
    ...             self.comment_dict[comment_id], owner=poster,
    ...             rfc822msgid=comment_id)
    ...         return message

    >>> external_bugtracker = CommentImportingExternalBugTracker(
    ...     None, new_bugtracker(BugTrackerType.BUGZILLA))

The BugWatchUpdater method importBugComments() is responsible for
calling the three methods of ISupportsCommentImport in turn to import
comments. Calling importBugComments() and passing it our new
comment-importing ExternalBugTracker instance will result in the three
comments in the comment_dict being imported into Launchpad.

    >>> from canonical.launchpad.scripts.checkwatches import BugWatchUpdater
    >>> bugwatch_updater = BugWatchUpdater(LaunchpadZopelessLayer.txn)
    >>> bugwatch_updater.importBugComments(bug_watch, external_bugtracker)
    INFO:...:Imported 3 comments for remote bug 123456 on ...

These three comments will be linked to the bug watch from which they
were imported.

    >>> bug_watch = getUtility(IBugWatchSet).get(bug_watch.id)
    >>> for message in bug.messages[1:]:
    ...     bug_message = getUtility(IBugMessageSet).getByBugAndMessage(
    ...         bug, message)
    ...     bug_message.bugwatch == bug_watch
    ...     print bug_message.message.text_contents
    True
    Example comment the first
    True
    Example comment the second
    True
    Example comment the third

If another comment is added on the remote tracker and the comment import
process is run again only the new comment will be imported.

    >>> external_bugtracker.comment_dict['4'] = "Yet another comment."
    >>> bugwatch_updater.importBugComments(bug_watch, external_bugtracker)
    INFO:...:Imported 1 comments for remote bug 123456 on ...

Once again, the newly-imported comment will be linked to the bug watch
form which it was imported.

    >>> for message in bug.messages[1:]:
    ...     bug_message = getUtility(IBugMessageSet).getByBugAndMessage(
    ...         bug, message)
    ...     bug_message.bugwatch == bug_watch
    ...     print bug_message.message.text_contents
    True
    Example comment the first
    True
    Example comment the second
    True
    Example comment the third
    True
    Yet another comment.

== BugWatch comment importing functionality ==

The IBugWatch interface provides methods for linking imported comments
to bug watches and for checking whether an imported comment is already
linked to a bug watch.

The method IBugWatch.hasComment() can be used to check whether a comment
has been linked to a bug watch. If we create an example comment without
linking it to the bug watch this method will, of course, return False.

    >>> message = getUtility(IMessageSet).fromText(
    ...     "Example Message", "With example content for you to read.")

    >>> comment_id = message.rfc822msgid

    >>> bug_watch = getUtility(IBugWatchSet).get(bug_watch.id)

    >>> bug_watch.hasComment(comment_id)
    False

IBugWatch provides an addComment() method by which comments can be
linked to a bug watch. This method accepts a Launchpad Message object
representing the comment itself and a comment_id paramter, which can be
used to pass the ID of the comment on the remote bug tracker from which
the comment was imported.

    >>> bug_watch.addComment(comment_id, message)

After using addComment() to add a comment, hasComment() will return True
for that comment.

    >>> bug_watch.hasComment(comment_id)
    True

We can also see that the message we passed to addComment() has been
linked to the bug watch by examining the BugMessage which links the
message and the bug to which the watch belongs.

    >>> bug_message = getUtility(IBugMessageSet).getByBugAndMessage(
    ...     bug, message)

    >>> bug_message.bugwatch == bug_watch
    True

    >>> commit()


== Importing two messages with the same ID ==

It is possible for two Messages with the same ID to coexist within
Launchpad, for example if a comment on a bug was sent to both Launchpad
and to DebBugs and the subsequently imported into Launchpad from the
DebBugs database.

We can demonstrate this by creating two messages with the same message
ID.

    >>> LaunchpadZopelessLayer.switchDbUser('launchpad')
    >>> message_one = getUtility(IMessageSet).fromText(
    ...     "Example Message", "With example content for you to read.")
    >>> message_two = getUtility(IMessageSet).fromText(
    ...     "Example Message", "With example content for you to read.",
    ...     rfc822msgid=message_one.rfc822msgid)

    >>> message_one.rfc822msgid == message_two.rfc822msgid
    True

    >>> commit()
    >>> LaunchpadZopelessLayer.switchDbUser(config.checkwatches.dbuser)

We will use message_one to represent a message which was sent directly
to Launchpad. Since it was a comment on a bug, we link it to that bug.

    >>> bug.linkMessage(message_one)
    <BugMessage...>

The bug watch which we created earlier will not be linked to the message
since it was not imported for that bug watch.

    >>> bug_watch = getUtility(IBugWatchSet).get(bug_watch.id)
    >>> bug_watch.hasComment(message_one.rfc822msgid)
    False

Now the comment import process runs and the message is imported from the
DebBugs database. The message is linked to the bug watch for which it
was imported.

    >>> bug_watch.addComment(message_two.rfc822msgid, message_two)
    >>> bug_watch.hasComment(message_two.rfc822msgid)
    True

We can see that only the second message is linked to the bug watch by
examining the BugMessages which link the messages to the bug.

    >>> bug_message_one = getUtility(IBugMessageSet).getByBugAndMessage(
    ...     bug, message_one)
    >>> bug_message_two = getUtility(IBugMessageSet).getByBugAndMessage(
    ...     bug, message_two)

    >>> print bug_message_one.bugwatch
    None

    >>> bug_message_two.bugwatch == bug_watch
    True

No notifications will be generated for the imported comments:

    >>> from canonical.launchpad.interfaces import IBugNotificationSet
    >>> pending_notifications = getUtility(
    ...     IBugNotificationSet).getNotificationsToSend()
    >>> len(pending_notifications)
    0
