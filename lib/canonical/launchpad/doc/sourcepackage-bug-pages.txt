Source Package Bug Views
========================

The source package bug listing, "+bugs", is driven by the view class
SourcePackageBugsView.

To describe the API, let's use the following URL path for reference in
the examples:

  /distros/debian/sarge/+sources/mozilla-firefox/+bugs

Next, let's initialize the view:

  >>> from zope.component import getView, getUtility
  >>> from zope.publisher.browser import TestRequest
  >>> from canonical.launchpad.interfaces import (
  ...     ISourcePackageNameSet, IDistroReleaseSet)
  >>> from canonical.launchpad.database import SourcePackage

  >>> mozilla_firefox = getUtility(ISourcePackageNameSet).get(1)
  >>> sarge = getUtility(IDistroReleaseSet).get(7)

  >>> context = SourcePackage(
  ...     sourcepackagename=mozilla_firefox, distrorelease=sarge)
  >>> request = TestRequest()

  >>> sourcepackage_bugs_view = getView(context, "+bugs", request)

Unresolved Release Bugs
-----------------------

By default, task lists are returned ordered by priority,
highest-to-lowest, then severity, highest-to-lowest:

  >>> sourcepackage_bugs_view.DEFAULT_ORDER
  ['-priority', '-severity']

Given the above URL, the unresolved_release_bugs property of the view
will return all IBugTasks whose status is "New" or "Accepted", and
whose .distrorelease is Debian sarge.

  >>> unresolved_release_bugs = sourcepackage_bugs_view.unresolved_release_bugs

  >>> unresolved_release_bugs.count()
  1
  >>> unresolved_release_bugs[0].id
  19

Other Releases Unresolved Bugs
------------------------------

other_releases_unresolved_bugs returns a dict whose keys are release
names, and whose values are lists of IDistroBugTasks that are in "New"
or "Accepted" state. Let's take a look at an example:

  >>> other_releases_unresolved_bugs = \
  ...     sourcepackage_bugs_view.other_releases_unresolved_bugs

With the sample data, there is exactly one other distrorelease on
which unresolved bug tasks exist.

  >>> len(other_releases_unresolved_bugs.keys())
  1

  >>> other_releases_unresolved_bugs["woody"][0].id
  18

General Unresolved Bugs
-----------------------

general_unresolved_bugs is a view property that returns a list of
IDistroBugTasks for the relevant distro, i.e., this is the list of
bugs filed in this distribution, but not targeted to be fixed in a
specific release.

  >>> general_unresolved_bugs = sourcepackage_bugs_view.general_unresolved_bugs

  >>> len(general_unresolved_bugs)
  3

  >>> taskids = [task.id for task in general_unresolved_bugs]
  >>> taskids
  [4, 5, 6]

Searching
---------

The SourcePackageBugsView methods are search aware.

  >>> request = TestRequest(
  ...     form={'field.searchtext': 'test', 'search': 'Search'})
  >>> sourcepackage_bugs_view = getView(context, "+bugs", request)
  >>> [task.bug.id for task in sourcepackage_bugs_view.unresolved_release_bugs]
  [3]
  >>> other_releases_bugs = sourcepackage_bugs_view.other_releases_unresolved_bugs
  >>> other_releases_bugs.keys()
  [u'woody']
  >>> woody_bugs = other_releases_bugs['woody']
  >>> [task.bug.id for task in woody_bugs]
  [3]
  >>> [task.bug.id for task in sourcepackage_bugs_view.general_unresolved_bugs]
  [3]

Listing Columns
---------------

The listing_columns property defines the columns we want to show in
the source package bug listing:

  >>> sorted(sourcepackage_bugs_view.listing_columns)
  ['assignedto', 'id', 'priority', 'severity', 'status', 'title']
