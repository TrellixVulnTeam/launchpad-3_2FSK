
Browsing and Searching Tickets
==============================

This story describes some common use cases about using the browsing and
searching features of the support tracker.

    (We want 5 item per page for these tests.)
    >>> from canonical.config import config
    >>> config.launchpad.default_batch_size = 5


When Nobody Uses the Support Tracker
------------------------------------

Average Joe has recently installed Kubuntu. He has a problem with his
system and goes to the Kubuntu's support page in Launchpad to see if
somebody had a similar problem.

    >>> browser.open('http://launchpad.dev/distros/kubuntu')
    >>> browser.getLink('Support').click()

He discovers that there are no tickets on the Kubuntu support page:

    >>> browser.title
    'Support requests for Kubuntu'

    >>> from BeautifulSoup import BeautifulSoup
    >>> soup = BeautifulSoup(browser.contents)
    >>> soup('p')
    [...No active support requests for Kubuntu...]


Browsing Support Requests
-------------------------

He realises that support for Kubuntu is probably going on in the Ubuntu
support page and goes there to check.

    >>> browser.open('http://launchpad.dev/distros/ubuntu/+tickets')
    >>> browser.title
    'Support requests for Ubuntu'

He sees a listing of the current tickets posted on Ubuntu:

    >>> soup = BeautifulSoup(browser.contents)
    >>> soup('td', 'ticket')
    [...
      <a href=".../ubuntu/+ticket/11">Continue playing after shutdown</a>
    ...
      <a href=".../ubuntu/+ticket/10">Play DVDs in Totem</a>
    ...]

None of the listed ticket titles quite match his problem. He sees that
there is another page of tickets, so he goes to the next page of
results. He see only one other ticket:

    >>> browser.getLink('Next').click()
    >>> browser.title
    'Support requests for Ubuntu'
    >>> soup = BeautifulSoup(browser.contents)
    >>> soup('td', 'ticket')
    [<td class="ticket">
      <a href=".../ubuntu/+ticket/5">Installation failed</a>
     </td>]

This is the last results page, so the next and last links are greyed
out.

    >>> 'Next' in browser.contents
    True
    >>> browser.getLink('Next')
    Traceback (most recent call last):
      ..
    LinkNotFoundError...
    >>> 'Last' in browser.contents
    True
    >>> browser.getLink('Last')
    Traceback (most recent call last):
      ..
    LinkNotFoundError...

He decides to go the first page. He remembered one ticket title that
might have been remotely related to his problem.

    >>> browser.getLink('First').click()

Since he is on the first page, the 'First' and 'Previous' links are
greyed out:

    >>> 'Previous' in browser.contents
    True
    >>> browser.getLink('Previous')
    Traceback (most recent call last):
      ..
    LinkNotFoundError...
    >>> 'First' in browser.contents
    True
    >>> browser.getLink('First')
    Traceback (most recent call last):
      ..
    LinkNotFoundError...

He clicks on the ticket title to obtain the ticket page where the
details of the ticket are available.

    >>> browser.getLink('Slow system').click()
    >>> browser.title
    'Ubuntu support request #7: ...Slow system...'
    >>> soup = BeautifulSoup(browser.contents)
    >>> soup('div', 'highlighted')
    [<div class="highlighted">
    <p>I get really poor hard drive performance.</p>
    </div>]


Searching Support Requests
--------------------------

Browsing is fine when the number of tickets is small, but searching is
more convenient as the number of tickets grow larger.

This time, it's Firefox that brings Average Joe to the Ubuntu support
tracker. He finds that his machine becomes really slow
whenever he has Firefox open. Luckily for Average Joe, searching for
similar support requests is easy: on the ticket listing page, he just
enters his search key and hit the 'Search' button.

    >>> browser.open('http://launchpad.dev/distros/ubuntu/+tickets')
    >>> browser.getControl(name='form.search_text').value = 'firefox is slow'
    >>> browser.getControl('Search').click()

Unfortunately, the search doesn't return any similar requests:

    >>> browser.title
    'Support requests for Ubuntu'
    >>> soup = BeautifulSoup(browser.contents)
    >>> soup('p')
    [...No results for search <strong>firefox is slow</strong>...]

Joe observes under the search widget that there are checkboxes to select
the ticket status to search. He notices that only 'Open' and
'Answered' are selected. He selects 'Rejected, and run his search again.

    >>> browser.getControl(name='form.status').displayValue
    ['Open', 'Answered']
    >>> browser.getControl('Rejected').selected = True
    >>> browser.getControl('Search').click()

This time, the search returns one item.

    >>> soup = BeautifulSoup(browser.contents)
    >>> soup('td', 'ticket')
    [<td class="ticket">
      <a href=".../ubuntu/+ticket/3">Firefox is slow and consumes too much RAM</a>
     </td>]

He clicks on the link to read the ticket description.

    >>> browser.getLink('Firefox is slow').click()
    >>> browser.title
    'Ubuntu support request #3:...Firefox is slow...'


Controlling the Sort Order
--------------------------

That ticket isn't exactly what Average Joe was looking for. Now, he'd
like to see all the tickets that were related to the firefox package.
The ticket listing page for distribution displays the source package
related to the ticket. The source package name is a link to the source
package's ticket listing.

    (We should use goBack() here but can't because of ZC #645:
    zope.testbrowser truncates document content after goBack().)
    #>>> browser.goBack()
    >>> browser.open('http://launchpad.dev/distros/ubuntu/+tickets')
    >>> browser.getLink('mozilla-firefox').click()
    >>> browser.title
    'Support requests for mozilla-firefox in ubuntu'
    >>> soup = BeautifulSoup(browser.contents)
    >>> soup('table', 'listing')
    [<table...
    ...mailto: problem in webpage...2006-07-20...
    ...Installation of Java Runtime Environment for Mozilla...2006-07-20...
    </table>]

Average Joe wants to see all tickets but listed from the oldest to the
newest. Again, he adds the 'Rejected' status to the selection and
selects the 'oldest first' sort order.

    >>> browser.getControl('Rejected').selected = True
    >>> browser.getControl('oldest first').selected = True
    >>> browser.getControl('Search').click()

    >>> soup = BeautifulSoup(browser.contents)
    >>> soup('table', 'listing')
    [<table...
    ...Firefox is slow and consumes too much RAM...2005-09-05...
    ...Installation of Java Runtime Environment for Mozilla...2006-07-20...
    ...mailto: problem in webpage...2006-07-20...
    </table>]
