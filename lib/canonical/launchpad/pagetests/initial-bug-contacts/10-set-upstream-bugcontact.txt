== Setting Upstream Bug Supervisor ==

Setting the bug supervisor for an upstream requires launchpad.Edit
permission on the product.

    >>> browser.addHeader("Authorization", "Basic mark@hbd.com:test")

    >>> browser.open("http://localhost:9000/firefox/+bugsupervisor")
    >>> browser.getControl(name="field.bug_supervisor").value = (
    ...     "robertc@robertcollins.net")
    >>> browser.getControl("Change").click()

Another example, this time with a team that has no "preferred email" set.

    >>> browser.open("http://localhost:9000/firefox/+bugsupervisor")
    >>> browser.getControl(name="field.bug_supervisor").value = "guadamen"
    >>> browser.getControl("Change").click()


= Teams as Bug Supervisors =

First, some setup. We create a new product owned by "Sample Person", using a
separate browser instance to avoid breaking the other page tests.

    >>> sample_browser = setupBrowser()
    >>> sample_browser.addHeader("Authorization",
    ...                          "Basic test@canonical.com:test")
    >>> sample_browser.open('http://launchpad.dev/projects/+new')
    >>> sample_browser.getControl('URL').value = 'testy'
    >>> sample_browser.getControl('Name').value = 'Test Product'
    >>> sample_browser.getControl('Title').value = (
    ...     'A product for testing things')
    >>> sample_browser.getControl('Summary').value = (
    ...     'Testing team bug supervisors')
    >>> sample_browser.getControl('Continue').click()

    # XXX Add Description: field
    >>> #sample_browser.getControl('Description').value = 'See bug 109652'
    >>> sample_browser.getControl(name='field.licenses').value = ['GNU_GPL_V2']
    >>> sample_browser.getControl(name='field.license_info').value = 'foo'
    >>> sample_browser.getControl('Complete Registration').click()
    >>> sample_browser.url
    'http://launchpad.dev/testy'

Sample Person is a member of "Warty Security Team". He however should not be
able to set Warty Security Team as a bug supervisor for Test Project as he's
not an admin of that team.

    >>> sample_browser.getLink('Bugs').click()
    >>> sample_browser.getLink('Change bug supervisor').click()
    >>> sample_browser.url
    'http://bugs.launchpad.dev/testy/+bugsupervisor'

    >>> sample_browser.getControl('Bug Supervisor').value = 'name20'
    >>> sample_browser.getControl('Change').click()
    >>> 'Successfully changed the bug supervisor' not in sample_browser.contents
    True

    >>> print sample_browser.contents
    <!DOCTYPE...
    ...You cannot set Warty Security Team as the bug supervisor...
    ...you are not an administrator of that team...

In the warning, the user will be pointed to the Warty Security Team's
membership page and advised to contact an administrator if she believes that
the team should be a bug supervisor.

    >>> sample_browser.getLink('Warty Security Team administrators').click()
    >>> sample_browser.url
    'http://launchpad.dev/~name20/+members'

Launchpad admins can set a team as bug supervisor without any warnings,
however, whether they're in the team or not.

    >>> login('test@canonical.com')

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.interfaces import (
    ...     IPersonSet)
    >>> security_team = getUtility(IPersonSet).getByName('name20')
    >>> foo_bar = getUtility(IPersonSet).getByName('name16')
    >>> foo_bar.inTeam(security_team)
    False

    >>> logout()

    >>> admin_browser.open('http://bugs.launchpad.dev/testy/+bugsupervisor')
    >>> admin_browser.getControl('Bug Supervisor').value = 'name20'
    >>> admin_browser.getControl('Change').click()
    >>> 'Successfully changed the bug supervisor' in admin_browser.contents
    True

