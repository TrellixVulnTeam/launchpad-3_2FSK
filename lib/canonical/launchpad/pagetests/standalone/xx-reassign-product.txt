  This test demonstrates the product re-assignment workflow.
  When a product is re-assigned to another person, objects related to that
  product (product series, product releases and translations in the import 
  queue) owned by the same registrant are also re-assigned to the new registrant.

  First check the ownership of the mozilla firefox product and its
  related dependecies.

  >>> from zope.component import getUtility 
  >>> from canonical.launchpad.ftests import login, logout
  >>> from canonical.launchpad.interfaces import (
  ...     IProductSet, ITranslationImportQueue)
  >>> login('test@canonical.com')
  >>> productset = getUtility(IProductSet)
  >>> firefox = productset.getByName('firefox')
  >>> firefox.owner.name
  u'name12'

  >>> [series.name for series in firefox.serieses]
  [u'1.0', u'trunk']
  >>> [series.owner.name for series in firefox.serieses]
  [u'name12', u'name12']
  >>> [release.version for release in firefox.releases]
  [u'0.9', u'0.9.1', u'0.9.2', u'1.0.0']
  >>> [release.owner.name for release in firefox.releases]
  [u'name16', u'name16', u'name16', u'name12']

  Add a TranslationImportQueueEntry owned by Sample Person.

  >>> firefox_productseries = firefox.serieses[0]
  >>> sample_person = firefox.owner
  >>> translationimportqueue = getUtility(ITranslationImportQueue)
  >>> entry = translationimportqueue.addOrUpdateEntry(
  ...     'po/sr.po', 'foo', True, sample_person,
  ...     productseries=firefox_productseries)
  >>> entry.importer.name
  u'name12'

  >>> logout()

  Logged in as no-priv@canonical.com we can't access the +reassign page,
  because he's not the owner of the product nor a member of admins.

  >>> browser.addHeader('Authorization', 'Basic no-priv@canonical.com:test')
  >>> browser.open('http://launchpad.dev/firefox/+reassign')
  Traceback (most recent call last):
  ...
  Unauthorized...

  Now we're logged in as FooBar and he's an LP admin, so he can do everything.

  >>> admin_browser.open('http://launchpad.dev/firefox')
  >>> admin_browser.getLink('Change maintainer').click()
  >>> admin_browser.url
  'http://launchpad.dev/firefox/+reassign'

  >>> admin_browser.title
  'Reassign Mozilla Firefox'

  Trying to change the owner to a new team with an invalid name is not
  allowed.

  >>> admin_browser.getControl(name='field.owner').value = 'foo bar'
  >>> admin_browser.getControl(name='existing').value = ['new']
  >>> admin_browser.getControl('Change Registrant').click()

  >>> message = ("'foo bar' is not a valid name for a team. Please make "
  ...            "sure it contains only the allowed characters and no spaces.")
  >>> message in admin_browser.contents
  True

  Chaging the registrant to No privileges person.

  >>> admin_browser.getControl(name='field.owner').value = 'no-priv'
  >>> admin_browser.getControl(name='existing').value = ['existing']
  >>> admin_browser.getControl('Change Registrant').click()

  >>> admin_browser.url
  'http://launchpad.dev/firefox/'

  Here we see the new registrant: No Privileges person. 

  >>> portlet = find_portlet(admin_browser.contents, 'Lifecycle')
  >>> portlet.fetchText('Registered by:')[0].findNext('a').string
  u'No Privileges Person'

  >>> login('no-priv@canonical.com')

  >>> firefox = productset.getByName('firefox')
  >>> firefox.owner.name
  u'no-priv'

  The dependencies are also correctly re-assigned.

  >>> [series.name for series in firefox.serieses]
  [u'1.0', u'trunk']
  >>> [series.owner.name for series in firefox.serieses]
  [u'no-priv', u'no-priv']
  >>> [release.version for release in firefox.releases]
  [u'0.9', u'0.9.1', u'0.9.2', u'1.0.0']
  >>> [release.owner.name for release in firefox.releases]
  [u'name16', u'name16', u'name16', u'no-priv']

  >>> firefox_productseries = firefox.serieses[0]
  >>> translationimportqueue = getUtility(ITranslationImportQueue)
  >>> entry = translationimportqueue.getAllEntries(
  ...     target=firefox_productseries)
  >>> entry[0].importer.name
  u'no-priv'

  >>> logout()

  Now that no-priv is the registrant of the product, he can transfer ownership
  to another person.

  >>> browser.open('http://launchpad.dev/firefox')
  >>> browser.getLink('Change maintainer').click()
  >>> browser.url
  'http://launchpad.dev/firefox/+reassign'

  >>> browser.getControl(name='field.owner').value = 'name12'
  >>> browser.getControl(name='existing').value = ['existing']
  >>> browser.getControl('Change Registrant').click()

  >>> portlet = find_portlet(browser.contents, 'Lifecycle')
  >>> portlet.fetchText('Registered by:')[0].findNext('a').string
  u'Sample Person'
