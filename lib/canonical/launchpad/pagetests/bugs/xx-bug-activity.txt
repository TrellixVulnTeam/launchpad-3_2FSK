= Bug Activity =

The bug activity page is where you find the "changelog" of a bug.

    >>> anon_browser.open(
    ...     'http://bugs.launchpad.dev/debian/+source/'
    ...     'mozilla-firefox/+bug/3/+activity')
    >>> main_content = find_main_content(anon_browser.contents)

The page heading contains a link back to the bug page.

    >>> bug_link = main_content.p.a
    >>> print '%s --> %s' % (extract_text(bug_link), bug_link['href'])
    Bug #3: Bug Title Test --> /debian/+source/mozilla-firefox/+bug/3

The title repeats the bug number for clarity.

    >>> print extract_text(main_content.h1)
    Activity log for bug #3

The activity log itself is presented as a table.

    >>> def print_row(row):
    ...     print ' | '.join(
    ...         extract_text(cell) for cell in row(('th', 'td')))

    >>> for row in main_content.table('tr'):
    ...     print_row(row)
    Date | Who | What changed | Old value | New value | Message
    10 Aug 05 16:30 | Sample Person | bug |  |  | assigned to source ...
    10 Aug 05 16:30 | Sample Person | bug |  |  | assigned to source ...
    24 Feb 06 21:34 | Foo Bar | mozilla-firefox: statusexplanation |  |  |


== Activity interleaved with comments ==

Some bug activity is show interleaved with comments on a bug's main
page.

    >>> def print_comments(page):
    ...     """Print all the comments on the page."""
    ...     comment_divs = find_tags_by_class(page, 'boardComment')
    ...     for div_tag in comment_divs:
    ...         print extract_text(div_tag)
    ...         print '-' * 8

    >>> user_browser.open(
    ...     'http://bugs.launchpad.dev/redfish/+bug/15/+addcomment')
    >>> user_browser.getControl(name='field.comment').value = (
    ...     "Here's a comment for testing, like.")
    >>> user_browser.getControl('Save Changes').click()
    >>> print_comments(user_browser.contents)
    Bug Watch Updater
    on 2007-12-18
    thunderbird status: Unknown &#8594; New
    --------
    No Privileges Person wrote ...
    Here's a comment for testing, like.
    --------

    >>> admin_browser.open(
    ...     'http://bugs.launchpad.dev/redfish/+bug/15/+edit')
    >>> admin_browser.getControl('Summary').value = (
    ...     "A new title for this bug")
    >>> admin_browser.getControl('Change').click()

Alterations to the summary of a bug will show up along with any comments
that have been added.

    >>> user_browser.open('http://launchpad.dev/bugs/15')
    >>> print_comments(user_browser.contents)
    Bug
    ...
    --------
    Foo Bar ... ago
    summary:
    - Nonsensical bugs are useless
    + A new title for this bug
    --------

Alterations to a bug's privacy will show up as 'visibility' changes.

    >>> admin_browser.open(
    ...     'http://bugs.launchpad.dev/redfish/+bug/15/+secrecy')
    >>> admin_browser.getControl(
    ...     "This bug report should be private").selected = True
    >>> admin_browser.getControl("Change").click()

    >>> admin_browser.open('http://launchpad.dev/bugs/15')
    >>> print_comments(admin_browser.contents)
    Bug
    ...
    --------
    Foo Bar ... ago
    visibility: public  &#8594; private
    --------

Changes to a bug's security_related field will be displayed as 'security
vulnerability' changes, with values of 'yes' or 'no'.

    >>> admin_browser.open(
    ...     'http://bugs.launchpad.dev/redfish/+bug/15/+secrecy')
    >>> admin_browser.getControl(
    ...     "This bug is a security vulnerability").selected = True
    >>> admin_browser.getControl("Change").click()

    >>> admin_browser.open('http://launchpad.dev/bugs/15')
    >>> print_comments(admin_browser.contents)
    Bug
    ...
    --------
    Foo Bar ... ago
    security vulnerability: no  &#8594; yes
    --------

Changes will be grouped together if they occur at the same time.

    >>> admin_browser.open(
    ...     'http://bugs.launchpad.dev/redfish/+bug/15/+secrecy')
    >>> admin_browser.getControl(
    ...     "This bug is a security vulnerability").selected = False
    >>> admin_browser.getControl(
    ...     "This bug report should be private").selected = False
    >>> admin_browser.getControl("Change").click()

    >>> admin_browser.open('http://launchpad.dev/bugs/15')
    >>> print_comments(admin_browser.contents)
    Bug
    ...
    --------
    Foo Bar ... ago
    security vulnerability: yes &#8594; no
    visibility: private  &#8594; public
    --------

Changes to the bug's description will be shown as a unified diff.

    >>> admin_browser.open(
    ...     'http://bugs.launchpad.dev/redfish/+bug/15/+edit')
    >>> admin_browser.getControl("Description").value = (
    ...     "I've changed the description, isn't that excellent?")
    >>> admin_browser.getControl("Change").click()

    >>> admin_browser.open('http://launchpad.dev/bugs/15')
    >>> print_comments(admin_browser.contents)
    Bug
    ...
    --------
    Foo Bar ... ago
    description:
    - Like this one, natch.
    + I've changed the description, isn't that excellent?
    --------

Changes to the bug's tags will be show in the form tags removed or tags
added.

    >>> admin_browser.open(
    ...     'http://bugs.launchpad.dev/redfish/+bug/15/+edit')
    >>> admin_browser.getControl("Tags").value = "tag1 tag2 tag3"
    >>> admin_browser.getControl("Change").click()
    >>> admin_browser.getControl('Yes, define new tag', index=0).click()

    >>> admin_browser.open('http://launchpad.dev/bugs/15')
    >>> print_comments(admin_browser.contents)
    Bug
    ...
    --------
    Foo Bar ... ago
    tags: added: tag1 tag2 tag3
    --------

    >>> admin_browser.open(
    ...     'http://bugs.launchpad.dev/redfish/+bug/15/+edit')
    >>> admin_browser.getControl("Tags").value = "tag1 tag2 tag4"
    >>> admin_browser.getControl("Change").click()
    >>> admin_browser.getControl('Yes, define new tag', index=0).click()

    >>> admin_browser.open('http://launchpad.dev/bugs/15')
    >>> print_comments(admin_browser.contents)
    Bug
    ...
    --------
    Foo Bar ... ago
    tags: added: tag4
          removed: tag3
    --------

Changes to a BugTask's attributes will show up with the task's target
name next to them to differentiate one from another.

We'll add a milestone to Redfish to demonstrate this.

    >>> admin_browser.open(
    ...     'http://launchpad.dev/redfish/trunk/+addmilestone')
    >>> admin_browser.getControl('Name').value = 'foo'
    >>> admin_browser.getControl('Register milestone').click()

    >>> admin_browser.open(
    ...     'http://bugs.launchpad.dev/redfish/+bug/15/+editstatus')
    >>> admin_browser.getControl('Status').value = ['Confirmed']
    >>> admin_browser.getControl('Importance').value = ['High']
    >>> admin_browser.getControl(
    ...     'Milestone').displayValue = ['Redfish: foo']

    >>> admin_browser.getControl(
    ...     name='redfish.assignee.option').value = [
    ...         'redfish.assignee.assign_to_me']
    >>> admin_browser.getControl("Save Changes").click()

    >>> print_comments(admin_browser.contents)
    Bug
    ...
    --------
    Foo Bar ... ago
    redfish assignee: nobody &#8594; name16
    redfish importance: Undecided &#8594; High
    redfish milestone: none &#8594; foo
    redfish status: New &#8594; Confirmed
    --------

If a change is made to a bug task which is targeted to a distro source
package, the name of the package and the distro will be included in the
activity item.

    >>> admin_browser.open(
    ...     'http://bugs.launchpad.dev/ubuntu/+source/mozilla-firefox/+bug/'
    ...     '1/+editstatus')
    >>> admin_browser.getControl('Status').value = ['Confirmed']
    >>> admin_browser.getControl("Save Changes").click()
    >>> print_comments(admin_browser.contents)
    Sample Person
    ...
    --------
    Foo Bar ... ago
    mozilla-firefox (Ubuntu) status: New &#8594; Confirmed
    --------

