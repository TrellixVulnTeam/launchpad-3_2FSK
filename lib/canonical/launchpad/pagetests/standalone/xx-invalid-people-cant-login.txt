We need to ensure that an invalid account, such as the result of an
account merge, can no longer authenticate using their existing
credentials. See Bug #33427

First we log in via cookie

>>> browser.open('http://localhost:9000/+login')
>>> browser.url
'http://localhost:9000/+login'
>>> browser.getControl('E-mail').value = 'foo.bar@canonical.com'
>>> browser.getControl('Password').value = 'test'
>>> browser.getControl('Log In').click()
>>> browser.url
'http://localhost:9000'
>>> 'Logged in as' in browser.contents
True

Now invalidate that person

>>> from canonical.launchpad.database import Person
>>> foobar = Person.byName('name16')
>>> original_password = foobar.password
>>> foobar.password = None
>>> foobar.sync()

Now if we reload the front page, we should be logged out.

>>> browser.open('http://localhost:9000')
>>> browser.url
'http://localhost:9000'
>>> 'Logged in as' in browser.contents
False

We also can only connect via Basic auth when then user is valid

>>> foobar.password = original_password
>>> foobar.sync()

>>> from zope.testbrowser import Browser
>>> browser = Browser()
>>> browser.addHeader('Authorization', 'Basic foo.bar@canonical.com:test')
>>> browser.open('http://localhost:9000')
>>> browser.url
'http://localhost:9000'
>>> 'Logged in as' in browser.contents
True

>>> foobar.password = None
>>> foobar.sync()

>>> browser = Browser()
>>> browser.addHeader('Authorization', 'Basic foo.bar@canonical.com:test')
>>> browser.open('http://localhost:9000')
>>> browser.url
'http://localhost:9000'
>>> 'Logged in as' in browser.contents
False

