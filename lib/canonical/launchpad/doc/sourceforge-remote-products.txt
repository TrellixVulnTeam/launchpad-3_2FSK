= Getting remote products from SourceForge projects =

Launchpad Products can be linked to SourceForge projects by setting
their 'sourceforgeproject' attribute.

It's possible to get a list of the Products that are linked to a
SourceForge project but which have no remote_product set by calling
IProductSet.getSFLinkedProductsWithNoneRemoteProduct().

There are currently no Products in the database linked to a SourceForge
project without a remote_product set.

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.interfaces.product import IProductSet
    >>> products = getUtility(
    ...     IProductSet).getSFLinkedProductsWithNoneRemoteProduct()

    >>> print products.count()
    0

If we add a Product and link it to a SourceForge project,
getSFLinkedProductsWithNoneRemoteProduct() will return it.

    >>> from canonical.launchpad.testing.factory import (
    ...     LaunchpadObjectFactory)
    >>> factory = LaunchpadObjectFactory()

    >>> product_1 = factory.makeProduct(name='my-first-product')
    >>> product_1.sourceforgeproject = 'fronobulator'

    >>> products = getUtility(
    ...     IProductSet).getSFLinkedProductsWithNoneRemoteProduct()

    >>> for product in products:
    ...     print product.name, product.sourceforgeproject
    my-first-product fronobulator

We'll create a test version of SourceForgeRemoteProductFinder that won't
try to access the interwubs.

    >>> import os
    >>> import re
    >>> from canonical.launchpad.scripts.sfremoteproductfinder import (
    ...     SourceForgeRemoteProductFinder)

    >>> class TestSFRemoteProductFinder(SourceForgeRemoteProductFinder):
    ...
    ...     def _getPage(self, page):
    ...         self.logger.info("Getting page %s" % page)
    ...         project_re = re.compile('projects/([a-z]+)')
    ...         match = project_re.match(page)
    ...
    ...         if match is not None:
    ...             project = match.groups()[0]
    ...             file_path = os.path.join(
    ...                 os.path.dirname(__file__), 'testfiles',
    ...                 'sourceforge-project-%s.html' % project)
    ...         return open(file_path, 'r').read()

    >>> from canonical.testing import LaunchpadZopelessLayer
    >>> finder = TestSFRemoteProductFinder(txn=LaunchpadZopelessLayer.txn)

SourceForgeRemoteProductFinder has a method,
getRemoteProductFromSourceForge(), which does all the heavy lifting of finding
the bug tracker for a given SourceForge project. It does this by fetching the
SourceForge project page about each of them. It then finds the link to the
project's 'Tracker' index within that page and follows it. Finally, it
extracts the URL of the project's bug tracker and returns the group_id and
atid therein as an ampersand-separated string.

    >>> print finder.getRemoteProductFromSourceForge('fronobulator')
    INFO...Getting page projects/fronobulator

We'll add a few more SourceForge-linked products for the purposes of
demonstration.

    >>> for i in range(3):
    ...     product = factory.makeProduct(name="product-%s" % i)
    ...     product.sourceforgeproject = "sfproject-%s" % i

SourceForgeRemoteProductFinder.setRemoteProductsFromSourceForge()
iterates over the list of products returned by
getSFLinkedProductsWithNoneRemoteProduct() and 

    >>> finder.setRemoteProductsFromSourceForge()
    INFO...Updating 4 Products using SourceForge project data
