= TranslationMessage View =

On this section, we are going to test the view class for an
ITranslationMessage object.

    >>> from canonical.database.sqlbase import flush_database_updates
    >>> from canonical.launchpad.database import TranslationMessage
    >>> from canonical.launchpad.interfaces import TranslationConstants
    >>> from canonical.launchpad.layers import TranslationsLayer
    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest
    >>> from canonical.launchpad.webapp import canonical_url

All the tests will be submitted as comming from Kurem, an editor for the POFile
that we are going to edit.

    >>> login('kurem@debian.cz')


== No plural forms ==

We are going to see what happens if we get an entry for a language
without the plural form information.

    >>> translationmessage = TranslationMessage.get(1)
    >>> pofile_tlh = translationmessage.pofile.potemplate.getDummyPOFile(
    ...     'tlh')
    >>> potmsgset = pofile_tlh.potemplate.getPOTMsgSetByMsgIDText(
    ...     u'evolution addressbook')
    >>> current_translationmessage = (
    ...     potmsgset.getCurrentDummyTranslationMessage(pofile_tlh.language))
    >>> translationmessage_page_view = create_view(
    ...     current_translationmessage, "+translate", layer=TranslationsLayer)
    >>> translationmessage_page_view.initialize()

Here we can see that it's lacking that information.

    >>> print translationmessage_page_view.context.pofile.language.pluralforms
    None

And the view class detects it correctly.

    >>> translationmessage_page_view.has_plural_form_information
    False


== Basic checks ==

Now, we will use objects that we have in our database, instead of
dummy ones.

    >>> server_url = '/'.join(
    ...     [canonical_url(current_translationmessage), '+translate'])
    >>> translationmessage_page_view = create_view(
    ...     translationmessage, "+translate", layer=TranslationsLayer,
    ...     server_url=server_url)
    >>> translationmessage_page_view.initialize()

We have the plural form information for this language.

    >>> print translationmessage_page_view.context.pofile.language.pluralforms
    2

And thus, the view class should know that it doesn't lacks the plural forms
information.

    >>> translationmessage_page_view.has_plural_form_information
    True

Also, we should get the timestamp when we started so we can detect changes
done when we started this request. We cannot check for its concrete value
or we could introduce a time bomb in the system so we check that it's not
None.

    >>> translationmessage_page_view.lock_timestamp is None
    False


== The subview: TranslationMessageView ==

For the next tests, we grab the subview which is what holds information
that pertains to the POMsgSet rendering itself:

    >>> subview = translationmessage_page_view.translationmessage_view
    >>> subview.initialize()

The request didn't get any argument, and because that, we should get the
default values for the alternative language.

    >>> subview.sec_lang is None
    True

We are at the beginning because this subview is being used for the first
item.

    >>> subview.context.potmsgset.sequence == 1
    True

It does not have a plural message

    >>> subview.plural_text is None
    True

And thus, it only has one translation.

    >>> subview.pluralform_indices
    [0]

Which is the one we wanted.

    >>> subview.getCurrentTranslation(0)
    u'libreta de direcciones de Evolution'

As we didn't submit the form, the getSubmittedTranslation method will
return None.

    >>> print subview.getSubmittedTranslation(0)
    None

If we request a plural form that is not valid, we get an AssertionError.

    >>> subview.getCurrentTranslation(1)
    Traceback (most recent call last):
    ...
    AssertionError: There is no plural form #1 for Spanish (es) language

    >>> subview.getSubmittedTranslation(1)
    Traceback (most recent call last):
    ...
    AssertionError: There is no plural form #1 for Spanish (es) language

Published translation is defined and same as the active one.

    >>> subview.getImportedTranslation(0)
    u'libreta de direcciones de Evolution'

However, if we ask for incorrect plural form, we get an AssertionError.

    >>> subview.getImportedTranslation(1)
    Traceback (most recent call last):
    ...
    AssertionError: There is no plural form #1 for Spanish (es) language

Web presentation
----------------

Some characters are presented specially in the Web interface, and there are
functions to determine whether to advise translators about their presence.

We will use this helper function to simplify the test:

    # This is just an easy way to get different messages for all
    # available options to test.
    >>> from sqlobject import SQLObjectNotFound
    >>> from zope.security.proxy import removeSecurityProxy
    >>> from canonical.launchpad.database import POMsgID
    >>> def changeMsgID(new_msgid):
    ...     potmsgset = removeSecurityProxy(subview.context.potmsgset)
    ...     try:
    ...         msgid = POMsgID.byMsgid(new_msgid)
    ...     except SQLObjectNotFound:
    ...         msgid = POMsgID(msgid=new_msgid)
    ...     potmsgset.msgid_singular = msgid
    ...     flush_database_updates()

First, text_has_tab() determines whether a message set contains any tabs.

    >>> subview.text_has_tab
    False

When we change the set to include a tab character, the function detects it.

    >>> changeMsgID(u'Foo\tBar')
    >>> subview.text_has_tab
    True

Similarly, text_has_newline() determines whether a message contains newlines.

    >>> changeMsgID(u'Foo Bar')
    >>> subview.text_has_newline
    False

    >>> changeMsgID(u'Foo\nBar')
    >>> subview.text_has_newline
    True

And text_has_leading_or_trailing_space() determines ... well, you can guess.

    >>> changeMsgID(u'Foo Bar')
    >>> subview.text_has_leading_or_trailing_space
    False

    >>> changeMsgID(u' Leading space')
    >>> subview.text_has_leading_or_trailing_space
    True

    >>> changeMsgID(u'  Leading space')
    >>> subview.text_has_leading_or_trailing_space
    True

    >>> changeMsgID(u'Trailing space ')
    >>> subview.text_has_leading_or_trailing_space
    True

    >>> changeMsgID(u'Trailing space  ')
    >>> subview.text_has_leading_or_trailing_space
    True

    >>> changeMsgID(u'Leading\n Space  ')
    >>> subview.text_has_leading_or_trailing_space
    True

    >>> changeMsgID(u'Trailing \nSpace  ')
    >>> subview.text_has_leading_or_trailing_space
    True

    >>> changeMsgID(u'Trailing \r\nspace')
    >>> subview.text_has_leading_or_trailing_space
    True

    >>> import transaction
    >>> transaction.commit()


Submitting translations
-----------------------

It's time to check the submission of translations and the IPOFile statistics
update.

But first, let's see current values.

    >>> translationmessage = TranslationMessage.get(1)
    >>> pofile = translationmessage.pofile
    >>> pofile.updateStatistics()
    (6, 0, 1, 2)
    >>> pofile.currentCount()
    6
    >>> pofile.updatesCount()
    0
    >>> pofile.rosettaCount()
    1
    >>> pofile.unreviewedCount()
    2

Now we do the submit.

    >>> server_url = '/'.join(
    ...     [canonical_url(translationmessage), '+translate'])
    >>> form = {
    ...     'alt': None,
    ...     'msgset_1': None,
    ...     'msgset_1_es_translation_0_new_checkbox': True,
    ...     'msgset_1_es_translation_0_new': 'Foo',
    ...     'submit_translations': 'Save &amp; Continue'}
    >>> translationmessage_page_view = create_view(
    ...     translationmessage, "+translate", form=form,
    ...     layer=TranslationsLayer, server_url=server_url)
    >>> translationmessage_page_view.request.method = 'POST'

And when we initialise the view class, we detect that we missed the timestamp
that allow us to know whether we are working with latest submitted value or
someone updated the database while we were working on those translations.

    >>> translationmessage_page_view.initialize()
    Traceback (most recent call last):
    ...
    UnexpectedFormData: We didn't find the timestamp...

We do a new submit, but this time including a lock_timestamp field.

    >>> form = {
    ...     'lock_timestamp': '2006-11-28T13:00:00+00:00',
    ...     'alt': None,
    ...     'msgset_1': None,
    ...     'msgset_1_es_translation_0_radiobutton':
    ...         'msgset_1_es_translation_0_new',
    ...     'msgset_1_es_translation_0_new': 'Foo',
    ...     'submit_translations': 'Save &amp; Continue'}
    >>> translationmessage_page_view = create_view(
    ...     translationmessage, "+translate", form=form,
    ...     layer=TranslationsLayer, server_url=server_url)
    >>> translationmessage_page_view.request.method = 'POST'
    >>> translationmessage_page_view.initialize()
    >>> transaction.commit()

This time we didn't get any problem with the submission, and we can see that
statistics were updated accordly.

    >>> pofile.currentCount()
    6
    >>> pofile.updatesCount()
    1
    >>> pofile.rosettaCount()
    1
    >>> pofile.unreviewedCount()
    2

Now, let's see how the system prevents a submission that has a timestamp older
than when last current translation was submitted.

    >>> from zope.app import datetimeutils
    >>> from canonical.launchpad.interfaces import TranslationConstants
    >>> old_timestamp_text = '2006-11-28T12:30:00+00:00'
    >>> old_timestamp = datetimeutils.parseDatetimetz(old_timestamp_text)

We can see here that translation in pomsgset is newer than old_timestamp.

    >>> potmsgset.isTranslationNewerThan(pofile, old_timestamp)
    True

And current value

    >>> potmsgset.getCurrentTranslationMessage(pofile.language).translations
    [u'Foo']

We do the submission with that lock_timestamp.

    >>> server_url = '/'.join(
    ...     [canonical_url(translationmessage), '+translate'])
    >>> form = {
    ...     'lock_timestamp': old_timestamp_text,
    ...     'alt': None,
    ...     'msgset_1': None,
    ...     'msgset_1_es_translation_0_radiobutton':
    ...         'msgset_1_es_translation_0_new',
    ...     'msgset_1_es_translation_0_new': 'Foos',
    ...     'submit_translations': 'Save &amp; Continue'}
    >>> translationmessage_page_view = create_view(
    ...     translationmessage, "+translate", form=form,
    ...     layer=TranslationsLayer, server_url=server_url)
    >>> translationmessage_page_view.request.method = 'POST'
    >>> translationmessage_page_view.initialize()
    >>> for notification in (
    ...     translationmessage_page_view.request.notifications):
    ...     print notification.message
    There is an error in the translation you provided. Please correct it
    before continuing.
    >>> print translationmessage_page_view.error
    Somebody else changed this translation since you started. To avoid
    accidentally reverting work done by others, we added your translations
    as suggestions, so please review current values.
    >>> transaction.commit()

This submission is not saved because there is another modification, this
means that timestamps remain unchanged.

    >>> potmsgset.isTranslationNewerThan(pofile, old_timestamp)
    True

And active text too

    >>> potmsgset.getCurrentTranslationMessage(pofile.language).translations
    [u'Foo']


Bogus translation submission
----------------------------

What would happen if we get a submit for another msgset that isn't being
considered?

    >>> server_url = '/'.join(
    ...     [canonical_url(translationmessage), '+translate'])
    >>> form = {
    ...     'lock_timestamp': '2006-11-28 13:00:00 UTC',
    ...     'alt': None,
    ...     'msgset_2': None,
    ...     'msgset_2_es_translation_0_new': 'Foo',
    ...     'msgset_2_es_translation_0_new_checkbox': True,
    ...     'submit_translations': 'Save &amp; Continue'}
    >>> translationmessage_page_view = create_view(
    ...     translationmessage, "+translate", form=form,
    ...     layer=TranslationsLayer, server_url=server_url)
    >>> translationmessage_page_view.request.method = 'POST'
    >>> translationmessage_page_view.initialize()

The list of translations parsed will be empty because the submission is
ignored:

    >>> translationmessage_page_view.form_posted_translations
    {}

And since this was a POST, we don't even build the subview:

    >>> translationmessage_page_view.translationmessage_view is None
    True
