= LAZR's field marshallers =

LAZR defines an interface for converting between the string values
that come in on an HTTP request, and the object values appropriate for
schema fields. This is similar to Zope's widget interface, but much
smaller.

To test the various marshallers we create a dummy request and
application root.

    >>> from canonical.launchpad.webapp.servers import WebServiceTestRequest
    >>> from canonical.launchpad.webapp.servers import WebServicePublication
    >>> request = WebServiceTestRequest(method='GET')
    >>> request.setPublication(WebServicePublication(None))
    >>> login(ANONYMOUS, request)
    >>> request.processInputs()

    >>> from canonical.launchpad.systemhomes import WebServiceApplication
    >>> root = WebServiceApplication()
    >>> from canonical.launchpad.interfaces import IOpenLaunchBag
    >>> getUtility(IOpenLaunchBag).add(root)


== Basic data structure marshallers ==

The marshaller for a TextLine field returns a string as-is, except
that the empty string is marshalled as None.

    >>> from zope.component import getMultiAdapter
    >>> from canonical.lazr.interfaces import IFieldMarshaller
    >>> from zope.schema import TextLine
    >>> field = TextLine(__name__='field_name')
    >>> marshaller = getMultiAdapter((field, request), IFieldMarshaller)
    >>> marshaller.marshall_from_request("foo")
    'foo'
    >>> marshaller.marshall_from_request("4")
    '4'
    >>> marshaller.marshall_from_request(u"unicode\u2122")
    u'unicode\u2122'
    >>> print marshaller.marshall_from_request("")
    None

When asked to convert a field value to a representation value, this
marshaller returns the string as-is:

    >>> marshaller.unmarshall(None, field.__name__, 'foo')
    'foo'

The representation name for a TextLine field is the name of the field.

    >>> marshaller.representation_name
    'field_name'

The marshaller for an Int field tries to convert the given string
into an int.

    >>> from zope.schema import Int
    >>> field = Int()
    >>> marshaller = getMultiAdapter((field, request), IFieldMarshaller)
    >>> marshaller.marshall_from_request("4")
    4
    >>> marshaller.marshall_from_request(u"4")
    4

    >>> marshaller.marshall_from_request("foo")
    Traceback (most recent call last):
    ...
    ValueError: invalid literal for int(): foo

    >>> marshaller.marshall_from_request("4.62")
    Traceback (most recent call last):
    ...
    ValueError: invalid literal for int(): 4.62

The empty string still marshalls to None.

    >>> print marshaller.marshall_from_request("")
    None

The marshaller for a Choice is chosen based on the Choice's
vocabulary. First, let's look at a Choice whose vocabulary is a
relatively short list of enumerated values.

    >>> from zope.schema import Choice
    >>> from canonical.launchpad.interfaces import BugTaskStatus
    >>> field = Choice(vocabulary=BugTaskStatus)
    >>> marshaller = getMultiAdapter((field, request), IFieldMarshaller)

The client is expected to provide the title of one of the enumerated
values. A string that corresponds to one of the values is marshalled
to the appropriate value. A string that doesn't correspond to any
enumerated value results in a helpful ValueError.

    >>> marshaller.marshall_from_request("Triaged")
    <DBItem BugTaskStatus.TRIAGED...>

    >>> marshaller.marshall_from_request("NoSuchStatus")
    Traceback (most recent call last):
    ...
    ValueError: Invalid value "NoSuchStatus". Acceptable values are: ...

    >>> marshaller.marshall_from_request("triaged")
    Traceback (most recent call last):
    ...
    ValueError: Invalid value "triaged". Acceptable values are: ...

The empty string marshalls to None.

    >>> print marshaller.marshall_from_request("")
    None


== Object marshallers ==

Here's a Choice whose vocabulary is a filter on a database table that
can be very large. Futhermore, every item in the vocabulary is
published as a resource in Launchpad's web service.

    >>> from canonical.launchpad.vocabularies import (
    ...     ValidPersonOrTeamVocabulary)
    >>> field = Choice(
    ...     __name__='some_person', vocabulary=ValidPersonOrTeamVocabulary())
    >>> marshaller = getMultiAdapter((field, request), IFieldMarshaller)

Here, the client is expected to designate a vocabulary item by its
published URL. If the given string is a URL corresponding to a
vocabulary item, the marshaller returns that item. Otherwise it
raises a ValueError.

    >>> from canonical.launchpad.interfaces import IPerson
    >>> person = marshaller.marshall_from_request(
    ...     "http://api.launchpad.dev/beta/~salgado")
    >>> IPerson.providedBy(person)
    True
    >>> person.name
    u'salgado'

    >>> marshaller.marshall_from_request(
    ...     "http://api.launchpad.dev/beta/~nosuchperson")
    Traceback (most recent call last):
    ...
    ValueError: No such object "http://api.launchpad.dev/beta/~nosuchperson".

    >>> marshaller.marshall_from_request("salgado")
    Traceback (most recent call last):
    ...
    ValueError: No such object "salgado".

Instead of unmarshall() returning the Person object (which
wouldn't look nice in a JSON representation), this marshaller returns
the URL to that object.

    >>> from canonical.lazr.rest import EntryResource
    >>> person_resource = EntryResource(person, request)

    >>> marshaller.unmarshall(person_resource, 'some_person', person)
    u'http://.../~salgado'

This marshaller also appends '_link' to the representation name of
this field, so that clients can know this is a link to another
resource and not a random string.

    >>> marshaller.representation_name
    'some_person_link'


== Collection marshallers ==

The most complicated kind of marshaller is one that manages a
collection of objects associated with some other object. Let's do an
example with a collection of IPerson objects associated with some
IPerson. (This might be the list of teams in which a person has a
membership, or something like that.)

    >>> from zope.schema import Object
    >>> from canonical.lazr.rest.schema import CollectionField
    >>> field = CollectionField(
    ...     __name__='person_memberships', value_type=Object(schema=IPerson))
    >>> marshaller = getMultiAdapter((field, request), IFieldMarshaller)

Instead of serving the actual collection, collection marshallers serve
a URL to that collection.

    >>> marshaller.unmarshall(person_resource, 'person_memberships',
    ...                       ["member 1", "member 2"])
    u'http://.../~salgado/person_memberships'

They also annotate the representation name of the field, so that
clients know this is a link to a collection-type resource.

    >>> marshaller.representation_name
    'person_memberships_collection_link'
