Ticket Pages
============

Let's take a look at the pages that are defined for an ITicket. We
start with +index, it's the most complex one.

    >>> from zope.component import getView
    >>> from zope.publisher.browser import TestRequest
    >>> from canonical.launchpad.interfaces import IDistributionSet
    >>> ubuntu = getUtility(IDistributionSet).getByName('ubuntu')
    >>> ticket_three = ubuntu.getTicket(3)
    >>> index = getView(ticket_three, '+index', TestRequest())

We can subscribe to a ticket:

    >>> login('test@canonical.com')
    >>> request = TestRequest(form={'subscribe': 'Subscribe'})
    >>> request.method = 'POST'
    >>> index = getView(ticket_three, '+index', request)
    >>> index.initialize()
    >>> getUtility(ILaunchBag).user in [
    ...     subscription.person for subscription in ticket_three.subscriptions]
    True
    >>> for notice in index.notices:
    ...     print notice
    You have subscribed to this request.

As well as unsubscribe:

    >>> request = TestRequest(form={'subscribe': 'Unsubscribe'})
    >>> request.method = 'POST'
    >>> index = getView(ticket_three, '+index', request)
    >>> index.initialize()
    >>> getUtility(ILaunchBag).user in [
    ...     subscription.person for subscription in ticket_three.subscriptions]
    False
    >>> for notice in index.notices:
    ...     print notice
    You have unsubscribed from this request.

These two actions didn't generate any notification mails:

    >>> from canonical.launchpad.mail import stub
    >>> import transaction
    >>> transaction.commit()
    >>> len(stub.test_emails)
    0

However, if we reopen a request, it will cause a notification to be
sent:

    >>> login('foo.bar@canonical.com')
    >>> request = TestRequest(form={'reopen': ''})
    >>> request.method = 'POST'
    >>> index = getView(ticket_three, '+index', request)
    >>> index.initialize()
    >>> for notice in index.notices:
    ...     print notice
    You have reopened this request.

    >>> transaction.commit()
    >>> len(stub.test_emails)
    1

    >>> import email
    >>> notifications = [
    ...     email.message_from_string(raw_message)
    ...     for from_addr, to_addrs, raw_message in sorted(stub.test_emails)
    ...     ]
    >>> print notifications[0].get_payload(decode=True)
    Support request #3...
    ...
        Status: Rejected => Open
    <BLANKLINE>

    >>> stub.test_emails = []

As well as if we reject it:

    >>> login('foo.bar@canonical.com')
    >>> request = TestRequest(form={'reject': ''})
    >>> request.method = 'POST'
    >>> index = getView(ticket_three, '+index', request)
    >>> index.initialize()
    >>> for notice in index.notices:
    ...     print notice
    You have rejected this request.

    >>> transaction.commit()
    >>> len(stub.test_emails)
    1

    >>> notifications = [
    ...     email.message_from_string(raw_message)
    ...     for from_addr, to_addrs, raw_message in sorted(stub.test_emails)
    ...     ]
    >>> print notifications[0].get_payload(decode=True)
    Support request #3...
    ...
        Status: Open => Rejected
    <BLANKLINE>

    >>> stub.test_emails = []

If the user cancels a bug creation request, the user is redirected back
the ticket page.

    >>> request = TestRequest(form={'cancel': 'cancel'})
    >>> request.method = 'POST'
    >>> makebug = getView(ticket_three, '+makebug', request)
    >>> makebug.initialize()
    >>> makebug.process_form()
    ''
    >>> list(ticket_three.bugs)
    []

If the user creates a bug, a "Linked to bug" notification is sent and
the user is subscribed to the bug.

    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest
    >>> request = LaunchpadTestRequest(
    ...     form={'create': 'create',
    ...           'field.title': 'Bug title',
    ...           'field.description': 'Bug description.'})
    >>> request.method = 'POST'
    >>> makebug = getView(ticket_three, '+makebug', request)
    >>> makebug.initialize()
    >>> makebug.process_form()
    >>> sorted(bug.id for bug in ticket_three.bugs)
    [11L]
    >>> print ticket_three.bugs[0].title
    Bug title
    >>> print ticket_three.bugs[0].description
    Bug description.
    >>> print makebug.user.name
    name16
    >>> ticket_three.bugs[0].isSubscribed(makebug.user)
    True
    >>> [n.message for n in request.notifications]
    [u'Thank you! Bug #11 created.']

    >>> transaction.commit()
    >>> len(stub.test_emails)
    1

    >>> notifications = [
    ...     email.message_from_string(raw_message)
    ...     for from_addr, to_addrs, raw_message in sorted(stub.test_emails)
    ...     ]
    >>> print notifications[0].get_payload(decode=True)
    Support request #3...
    ...
        Linked to bug: #11
    ...

    >>> stub.test_emails = []

If the ticket already has bugs linked to it, no new bug can be created.

    >>> request = LaunchpadTestRequest(form={'create': 'create'})
    >>> request.method = 'POST'
    >>> makebug = getView(ticket_three, '+makebug', request)
    >>> makebug.initialize()
    >>> for n in request.notifications:
    ...     print n.message
    You cannot create a bug report...

Now, let's take a look at the '+linkbug' page. If we use that one to
link to a bug, we'll get a similar notification like above:

    >>> request = LaunchpadTestRequest(
    ...     form={'field.actions.link': 'Link', 'field.bug': '2'})
    >>> request.method = 'POST'
    >>> index = getView(ticket_three, '+linkbug', request)
    >>> index.initialize()

    >>> 2 in [bug.id for bug in ticket_three.bugs]
    True

    >>> transaction.commit()
    >>> len(stub.test_emails)
    1

    >>> notifications = [
    ...     email.message_from_string(raw_message)
    ...     for from_addr, to_addrs, raw_message in sorted(stub.test_emails)
    ...     ]
    >>> print notifications[0].get_payload(decode=True)
    Support request #3...
    ...
        Linked to bug: #2
    ...

    >>> stub.test_emails = []

Let's take a look at the '+unlinkbug' page as well:

    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest
    >>> request = LaunchpadTestRequest(
    ...     form={'field.actions.remove':'Remove', 'field.bugs' : ['2']})
    >>> request.method = 'POST'
    >>> index = getView(ticket_three, '+unlinkbug', request)
    >>> index.initialize()

    >>> 2 in [bug.id for bug in ticket_three.bugs]
    False

    >>> transaction.commit()
    >>> len(stub.test_emails)
    1

    >>> notifications = [
    ...     email.message_from_string(raw_message)
    ...     for from_addr, to_addrs, raw_message in sorted(stub.test_emails)
    ...     ]
    >>> print notifications[0].get_payload(decode=True)
    Support request #3...
    ...
        Removed link to bug: #2
    ...

    >>> stub.test_emails = []

To edit the title and description of a bug, +edit is used.

    >>> request = TestRequest(form={
    ...     'field.actions.change': 'Continue',
    ...     'field.title': 'Better Title',
    ...     'field.description': 'A better description.'})
    >>> request.method = 'POST'
    >>> index = getView(ticket_three, '+edit', request)
    >>> index.initialize()
    >>> ticket_three.title
    u'Better Title'
    >>> ticket_three.description
    u'A better description.'

    >>> transaction.commit()
    >>> len(stub.test_emails)
    1

    >>> notifications = [
    ...     email.message_from_string(raw_message)
    ...     for from_addr, to_addrs, raw_message in sorted(stub.test_emails)
    ...     ]
    >>> print notifications[0].get_payload(decode=True)
    Support request #3...
    ...
    Summary changed to:
    Better Title
    <BLANKLINE>
    Description changed to:
    A better description.
    <BLANKLINE>

    >>> stub.test_emails = []

Lastly, let's take a look at +addmessage. It's used to add a comment to
the ticket, as well as changing it's state to Answered, which only the
submitter can do.

It needs to be open, for us to changed it to Answered:

    >>> ticket_three.reopen(getUtility(ILaunchBag).user)
    <TicketReopening...>

And now we can change the status to Answered:

    >>> request = TestRequest(form={
    ...     'UPDATE_SUBMIT': '',
    ...     'field.subject': 'Re: Better Title',
    ...     'field.content': 'Thanks!',
    ...     'field.resolved': 'on'})
    >>> request.method = 'POST'
    >>> index = getView(ticket_three, '+addmessage', request)
    >>> index.update()
    ''
    >>> ticket_three.status.title
    'Answered'

    >>> transaction.commit()
    >>> len(stub.test_emails)
    1

    >>> notifications = [
    ...     email.message_from_string(raw_message)
    ...     for from_addr, to_addrs, raw_message in sorted(stub.test_emails)
    ...     ]
    >>> print notifications[0].get_payload(decode=True)
    Support request #3...
    ...
        Status: Open => Answered
    <BLANKLINE>
    Comment:
    Thanks!

    >>> stub.test_emails = []
