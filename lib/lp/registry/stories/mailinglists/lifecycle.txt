Mailing list lifecycle
======================

Every team in Launchpad can have a mailing list, and every mailing list is
associated with exactly one team.


Hosted mailing list
-------------------

The owner of Landscape Developers applies for a mailing list.

    >>> browser = setupBrowser(auth='Basic test@canonical.com:test')
    >>> browser.open('http://launchpad.dev/~landscape-developers')
    >>> browser.getLink(url='+mailinglist').click()
    >>> from canonical.launchpad.helpers import backslashreplace
    >>> print backslashreplace(browser.title)
    +mailinglist : \u201cLandscape Developers\u201d team

    >>> browser.getControl('Apply for Mailing List').click()
    >>> browser.title
    'Landscape Developers in Launchpad'
    >>> for msg in get_feedback_messages(browser.contents):
    ...     print msg
    Mailing list requested and queued for approval.

Before the mailing list is created, the application must be approved.

    >>> browser.getLink(url='+mailinglist').click()
    >>> print find_tag_by_id(browser.contents,
    ...                      'mailing_list_pending_approval').p.string
    The application for this team's mailing list is pending approval.

Once the mailing list is requested, the button to request its activation is
not shown anymore.

    >>> browser.getControl('Apply for Mailing List')
    Traceback (most recent call last):
    ...
    LookupError: ...

If the application is declined, the button won't be shown either. Instead,
we'll ask the user to contact a Launchpad administrator.

    # Approving mailing lists is not yet available through the web.
    >>> import transaction
    >>> from canonical.launchpad.ftests import login, logout
    >>> from lp.registry.tests import mailinglists_helper
    >>> from canonical.launchpad.interfaces import MailingListStatus
    >>> login('foo.bar@canonical.com')
    >>> mailinglists_helper.review_list(
    ...     'landscape-developers', MailingListStatus.DECLINED)
    <MailingList for team "landscape-developers"; status=DECLINED at ...>
    >>> logout()
    >>> transaction.commit()

    >>> browser.reload()
    >>> browser.getControl('Apply for Mailing List')
    Traceback (most recent call last):
    ...
    LookupError: ...

    >>> def mailing_list_status_message(contents):
    ...     """Find out if a mailing list is in an unusual state."""
    ...     tag = find_tag_by_id(contents, 'mailing_list_status_message')
    ...     if tag:
    ...         return extract_text(tag.b)
    ...     else:
    ...         return ""

    >>> print mailing_list_status_message(browser.contents)
    The application for this team's mailing list has been declined. Please
    contact a Launchpad administrator for further assistance.

    # Here we manually change its status back to REGISTERED so that we can
    # move on testing as if it wasn't declined.  We don't use
    # getUtility(IMailingListSet) here because we want non-security-proxied
    # objects so that we can call syncUpdate on them and change their status
    # at our discretion.
    >>> from zope.component import getUtility
    >>> from lp.registry.model.mailinglist import MailingListSet
    >>> list_set = MailingListSet()
    >>> mailing_list = list_set.get('landscape-developers')
    >>> mailing_list.status = MailingListStatus.REGISTERED
    >>> transaction.commit()

If a team's mailing list is declined, there is no link to its non-existent
archive.

    >>> browser.open('http://launchpad.dev/~landscape-developers')
    >>> print find_tag_by_id(browser.contents, 'mailing-list-archive')
    None

Any time before the mailing list is approved, the application can be
cancelled (and then re-requested afterwards).

    >>> browser.open(
    ...     'http://launchpad.dev/~landscape-developers/+mailinglist')
    >>> browser.getControl('Cancel Application').click()
    >>> browser.title
    'Landscape Developers in Launchpad'
    >>> for msg in get_feedback_messages(browser.contents):
    ...     print msg
    Mailing list application cancelled.
    >>> print list_set.get('landscape-developers')
    None
    >>> transaction.commit()

    >>> browser.getLink(url='+mailinglist').click()
    >>> browser.getControl('Apply for Mailing List').click()
    >>> browser.title
    'Landscape Developers in Launchpad'

Just because a mailing list has been applied for does not mean it has an
archive link yet.

    >>> browser.open('http://launchpad.dev/~landscape-developers')
    >>> print find_tag_by_id(browser.contents, 'mailing-list-archive')
    None

A mailing list expert or Launchpad administrator can approve the application.

    >>> admin_browser.open('http://launchpad.dev/+mailinglists')
    >>> admin_browser.getControl(name='field.landscape-developers').value = [
    ...     'approve']
    >>> admin_browser.getControl('Submit').click()

Even after the list has been approved, it still cannot be used as the contact
address until Mailman has acknowledged successful creation.

    >>> browser.reload()
    >>> browser.getLink(url='+contactaddress').click()
    >>> browser.getControl('The Launchpad mailing list')
    Traceback (most recent call last):
    ...
    LookupError: ...

    >>> browser.getLink(url='+mailinglist').click()
    >>> browser.getControl('Apply for Mailing List')
    Traceback (most recent call last):
    ...
    LookupError: ...

    >>> print mailing_list_status_message(browser.contents)
    This team's mailing list will be available within a few minutes.

Mailman eventually wakes up and creates the mailing list.

    >>> def act():
    ...     login('foo.bar@canonical.com')
    ...     mailinglists_helper.mailman.act()
    ...     transaction.commit()
    ...     logout()
    >>> act()

Once the team's mailing list is active, there is a link to its archive.  This
is true even if no messages have yet been posted to the mailing list (since
the archiver will display an informative message to that effect).

    >>> browser.open('http://launchpad.dev/~landscape-developers')
    >>> print extract_link_from_tag(
    ...     find_tag_by_id(browser.contents, 'mailing-list-archive'))
    http://lists.launchpad.dev/landscape-developers

The archive link is clickable, though we won't click it because Mailman isn't
running.

    >>> browser.getLink('View archive')
    <Link text='View archive'
          url='http://lists.launchpad.dev/landscape-developers'>

The team's overview page also displays the posting address.

    >>> print extract_text(
    ...     find_tag_by_id(browser.contents, 'mailing-list-posting-address'))
    landscape-developers@lists.launchpad.dev

Now that the mailing list is active, it can be used as the team's contact
address.

    >>> from canonical.launchpad.testing.pages import strip_label

    >>> browser.getLink(url='+mailinglist').click()
    >>> browser.getControl('Apply for Mailing List')
    Traceback (most recent call last):
    ...
    LookupError: ...

    >>> print extract_text(find_tag_by_id(browser.contents,
    ...                                   'mailing_list_not_contact_address'))
    The mailing list is not set as the team contact address. You can
    set it.

    >>> browser.getLink(url='+contactaddress').click()
    >>> browser.getControl('The Launchpad mailing list').selected = True
    >>> browser.getControl('Change').click()

    >>> browser.getLink(url='+contactaddress').click()
    >>> control = browser.getControl(name='field.contact_method')
    >>> [strip_label(label) for label in control.displayValue]
    ['The Launchpad mailing list for this team...]

The mailing list's configuration screen is also now available.

    >>> browser.getLink(url='+mailinglist').url
    'http://launchpad.dev/~landscape-developers/+mailinglist'

Although of course, it's not available to someone with no permission to
manipulate the list.

    >>> user_browser.open('http://launchpad.dev/~landscape-developers')
    >>> user_browser.getLink(url='+mailinglist')
    Traceback (most recent call last):
    ...
    LinkNotFoundError

When the mailing list is not the team's contact address, the mailing
list configuration screen displays a message to this effect.

    >>> browser.getControl('Each member individually').selected = True
    >>> browser.getControl('Change').click()

    >>> browser.getLink(url='+mailinglist').click()
    >>> print extract_text(find_tag_by_id(browser.contents,
    ...                                   'mailing_list_not_contact_address'))
    The mailing list is not set as the team contact address. You can
    set it.

The message contains a link to the contact address screen.

    >>> browser.getLink('set it').click()
    >>> browser.getControl('The Launchpad mailing list').selected = True
    >>> browser.getControl('Change').click()
    >>> browser.title
    'Landscape Developers in Launchpad'

When the mailing list is the team's contact address, the message does
not show up.

    >>> browser.getLink(url='+mailinglist').click()
    >>> find_tag_by_id(browser.contents,
    ...                'mailing_list_not_contact_address') is None
    True

The contact address is now set to the mailing list address.

    >>> browser.goBack()
    >>> browser.getLink(url='+contactaddress').click()
    >>> control = browser.getControl(name='field.contact_method')
    >>> [strip_label(label) for label in control.displayValue]
    ['The Launchpad mailing list for this team -
      landscape-developers@lists.launchpad.dev']


Deactivating and reactivating lists
-----------------------------------

An active mailing list can be deactivated. If the deactivated mailing
list was the team contact method, the contact method will be changed
to 'each user individually'.

    >>> browser.open('http://launchpad.dev/~landscape-developers/+mailinglist')
    >>> browser.getControl('Deactivate this Mailing List').click()
    >>> browser.getLink(url='+contactaddress').click()
    >>> control = browser.getControl(name='field.contact_method')
    >>> [strip_label(label) for label in control.displayValue]
    ['Each member individually']

    >>> act()
    >>> browser.open('http://launchpad.dev/~landscape-developers/+mailinglist')
    >>> print mailing_list_status_message(browser.contents)
    This team's mailing list has been deactivated.

A deactivated mailing list still has a link to its archive, because archives
are never deleted.

    >>> browser.open('http://launchpad.dev/~landscape-developers')
    >>> print extract_link_from_tag(
    ...     find_tag_by_id(browser.contents, 'mailing-list-archive'))
    http://lists.launchpad.dev/landscape-developers

An inactive mailing list can be reactivated.

    >>> browser.getLink(url='+mailinglist').click()
    >>> browser.getControl('Reactivate this Mailing List').click()
    >>> mailing_list_status_message(browser.contents)
    ''
    >>> for msg in get_feedback_messages(browser.contents):
    ...     print msg
    The mailing list will be reactivated within a few minutes.
    >>> act()
    >>> transaction.commit()

    >>> browser.getLink(url='+mailinglist').click()
    >>> mailing_list_status_message(browser.contents)
    ''

This does not restore the mailing list as the team's contact method:

    >>> browser.getLink(url='+contactaddress').click()
    >>> control = browser.getControl(name='field.contact_method')
    >>> [strip_label(label) for label in control.displayValue]
    ['Each member individually']

Of course, the reactivated list still has a link to its archive.

    >>> browser.open('http://launchpad.dev/~landscape-developers')
    >>> print extract_link_from_tag(
    ...     find_tag_by_id(browser.contents, 'mailing-list-archive'))
    http://lists.launchpad.dev/landscape-developers

The archive link is only available for public mailing lists as shown above,
and for private mailing lists for team members.

    >>> from lp.registry.interfaces.person import PersonVisibility
    >>> login('foo.bar@canonical.com')
    >>> bassists = mailinglists_helper.new_team('bassists')
    >>> bassists.visibility = PersonVisibility.PRIVATE_MEMBERSHIP
    >>> bassists_list = mailinglists_helper.new_list_for_team(bassists)
    >>> logout()

The owner of the list can see archive link.

    >>> user_browser.open('http://launchpad.dev/~bassists')
    >>> print extract_link_from_tag(
    ...     find_tag_by_id(user_browser.contents, 'mailing-list-archive'))
    http://lists.launchpad.dev/bassists

Anonymous users cannot see the link, because they cannot even see the private
membership team.

    >>> anon_browser.open('http://launchpad.dev/~bassists')
    Traceback (most recent call last):
    ...
    NotFound: Object: <...>, name: u'~bassists'

The same is true for normal users who are not team members.

    >>> browser.open('http://launchpad.dev/~bassists')
    Traceback (most recent call last):
    ...
    NotFound: Object: <...>, name: u'~bassists'

Members who are not owners can see the link.

    >>> cprov_browser = setupBrowser(
    ...     auth='Basic celso.providelo@canonical.com:cprov')
    >>> cprov_browser.open('http://launchpad.dev/~bassists')
    Traceback (most recent call last):
    ...
    NotFound: Object: <...>, name: u'~bassists'

    >>> admin_browser.open('http://launchpad.dev/~bassists/+addmember')
    >>> admin_browser.getControl('New member').value = 'cprov'
    >>> admin_browser.getControl('Add Member').click()

    >>> cprov_browser.open('http://launchpad.dev/~bassists')
    >>> print extract_link_from_tag(
    ...     find_tag_by_id(cprov_browser.contents, 'mailing-list-archive'))
    http://lists.launchpad.dev/bassists

Admins who are not members of the team can see the link too.

    >>> admin_browser.open('http://launchpad.dev/~bassists')
    >>> print extract_link_from_tag(
    ...     find_tag_by_id(admin_browser.contents, 'mailing-list-archive'))
    http://lists.launchpad.dev/bassists


Purge permissions
-----------------

A mailing list may be 'purged' when it is in one of several safe states.
By 'safe' we mean that there are no artifacts of the mailing list on the
Mailman side that need to be preserved.  This is not guaranteed by the
code, except by the state of the mailing list, so if for example we want
to delete the archives of an INACTIVE list, this must be done manually.

    # Create a team without a mailing list owned by no-priv so the owner of
    # the team has no additional privileges.
    >>> login('foo.bar@canonical.com')
    >>> team = mailinglists_helper.new_team('aardvarks')
    >>> logout()

    >>> from lp.registry.interfaces.mailinglist import IMailingListSet
    >>> def print_list_state(team_name='aardvarks'):
    ...     login('foo.bar@canonical.com')
    ...     mailing_list = getUtility(IMailingListSet).get(team_name)
    ...     print mailing_list.status.name
    ...     logout()

The team owner cannot purge a mailing list.

    >>> user_browser.open('http://launchpad.dev/~aardvarks/+mailinglist')
    >>> user_browser.getControl('Apply for Mailing List').click()
    >>> user_browser.title
    'Aardvarks in Launchpad'
    >>> print_list_state()
    REGISTERED

    >>> def purge_text(browser):
    ...     tag = find_tag_by_id(browser.contents, 'mailing_list_purge')
    ...     if tag is None:
    ...         return None
    ...     return tag.p.contents[0].strip()

    >>> user_browser.getLink(url='+mailinglist').click()
    >>> print purge_text(user_browser)
    None

But a Launchpad administrator can purge a registered list.

    >>> admin_browser.open('http://launchpad.dev/~aardvarks/+mailinglist')
    >>> print purge_text(admin_browser)
    You can purge this mailing list...

Mailing list experts can also purge mailing lists.  Sample Person is
trustworthy enough to become a mailing list expert, but not a Launchpad
administrator.  He's given mailing list expert authority so that he can
purge mailing lists.

    >>> login('foo.bar@canonical.com')
    >>> from canonical.launchpad.interfaces.launchpad import (
    ...     ILaunchpadCelebrities)
    >>> from lp.registry.interfaces.person import IPersonSet
    >>> person_set = getUtility(IPersonSet)
    >>> test = person_set.getByName('name12')
    >>> experts = getUtility(ILaunchpadCelebrities).mailing_list_experts
    >>> experts.addMember(test, reviewer=experts.teamowner)
    >>> logout()
    >>> transaction.commit()

Sample Person, who is now a mailing list expert but not a Launchpad
administrator, can purge a registered list.

    >>> expert_browser = setupBrowser('Basic test@canonical.com:test')
    >>> expert_browser.open('http://launchpad.dev/~aardvarks/+mailinglist')
    >>> print purge_text(expert_browser)
    You can purge this mailing list...

Nobody can purge an approved or active mailing list.

    >>> admin_browser.open('http://launchpad.dev/+mailinglists')
    >>> admin_browser.getControl(name='field.aardvarks').value = ['approve']
    >>> admin_browser.getControl('Submit').click()
    >>> print_list_state()
    APPROVED

    >>> expert_browser.reload()
    >>> print find_tag_by_id(admin_browser.contents, 'mailing_list_purge')
    None
    >>> print find_tag_by_id(expert_browser.contents, 'mailing_list_purge')
    None

    >>> act()
    >>> print_list_state()
    ACTIVE
    >>> admin_browser.reload()
    >>> expert_browser.reload()
    >>> print find_tag_by_id(admin_browser.contents, 'mailing_list_purge')
    None
    >>> print find_tag_by_id(expert_browser.contents, 'mailing_list_purge')
    None

A constructing, modified, updating, or deactivating or mod-failed list cannot
be purged.

    >>> from zope.security.proxy import removeSecurityProxy
    >>> def set_list_state(team_name, status):
    ...     login('foo.bar@canonical.com')
    ...     mailing_list = getUtility(IMailingListSet).get(team_name)
    ...     naked_list = removeSecurityProxy(mailing_list)
    ...     naked_list.status = status
    ...     transaction.commit()
    ...     logout()

    >>> def show_states(*states):
    ...     url = 'http://launchpad.dev/~aardvarks/+mailinglist'
    ...     for status in states:
    ...         set_list_state('aardvarks', status)
    ...         print_list_state()
    ...         admin_browser.open(url)
    ...         print purge_text(admin_browser)
    ...         expert_browser.open(url)
    ...         print purge_text(expert_browser)

    >>> show_states(MailingListStatus.CONSTRUCTING,
    ...             MailingListStatus.MODIFIED,
    ...             MailingListStatus.UPDATING,
    ...             MailingListStatus.DEACTIVATING,
    ...             MailingListStatus.MOD_FAILED)
    CONSTRUCTING
    None
    None
    MODIFIED
    None
    None
    UPDATING
    None
    None
    DEACTIVATING
    None
    None
    MOD_FAILED
    None
    None

A declined or failed list can be purged.

    >>> show_states(MailingListStatus.DECLINED, MailingListStatus.FAILED)
    DECLINED
    You can purge this mailing list...
    You can purge this mailing list...
    FAILED
    You can purge this mailing list...
    You can purge this mailing list...

A purged list acts as if it doesn't even exist.

    >>> set_list_state('aardvarks', MailingListStatus.PURGED)
    >>> print_list_state()
    PURGED
    >>> admin_browser.open('http://launchpad.dev/~aardvarks/+mailinglist')
    >>> admin_browser.getControl('Apply for Mailing List')
    <SubmitControl name='field.actions.request_list_creation' type='submit'>
    >>> expert_browser.open('http://launchpad.dev/~aardvarks/+mailinglist')
    >>> expert_browser.getControl('Apply for Mailing List')
    <SubmitControl name='field.actions.request_list_creation' type='submit'>

To the team owner, an inactive list can merely be reactivated, it still cannot
be purged.

    >>> set_list_state('aardvarks', MailingListStatus.INACTIVE)

    >>> user_browser.open('http://launchpad.dev/~aardvarks/+mailinglist')
    >>> user_browser.getControl('Reactivate this Mailing List')
    <SubmitControl name='field.actions.reactivate_list' type='submit'>
    >>> print purge_text(user_browser)
    None

However to the LP administrator or mailing list expert, the list can also be
purged.

    >>> expert_browser.open('http://launchpad.dev/~aardvarks/+mailinglist')
    >>> expert_browser.getControl('Reactivate this Mailing List')
    <SubmitControl name='field.actions.reactivate_list' type='submit'>
    >>> print purge_text(expert_browser)
    You can purge this mailing list...

    >>> admin_browser.open('http://launchpad.dev/~aardvarks/+mailinglist')
    >>> admin_browser.getControl('Reactivate this Mailing List')
    <SubmitControl name='field.actions.reactivate_list' type='submit'>
    >>> print purge_text(admin_browser)
    You can purge this mailing list...


Actions on purged mailing lists
-------------------------------

A mailing list expert purges the inactive list.

    >>> expert_browser.open('http://launchpad.dev/~aardvarks/+mailinglist')
    >>> expert_browser.getControl('Purge this Mailing List').click()

Once purged, it's as if the mailing list never existed.

    >>> print expert_browser.getLink('Mailing list archive')
    Traceback (most recent call last):
    ...
    LinkNotFoundError

So now the team owner can re-register the mailing list.

    >>> browser.open('http://launchpad.dev/~aardvarks/+mailinglist')
    >>> browser.getControl('Apply for Mailing List').click()
    >>> print browser.title
    Aardvarks in Launchpad

Once the Launchpad administrator approves the new mailing list, a new instance
of it appears.

    >>> admin_browser.open('http://launchpad.dev/+mailinglists')
    >>> admin_browser.getControl(name='field.aardvarks').value = ['approve']
    >>> admin_browser.getControl('Submit').click()
    >>> act()
    >>> browser.open(browser.url) # A `reload` would resubmit.
    >>> browser.getLink('View archive')
    <Link text='View archive'
          url='http://lists.launchpad.dev/aardvarks'>

A team with an active mailing list cannot be renamed.

    >>> user_browser.open('http://launchpad.dev/~aardvarks/+edit')
    >>> user_browser.getControl(name='field.name').value = 'antelopes'
    Traceback (most recent call last):
    ...
    LookupError: name 'field.name'

But once the mailing list has been purged, the team can be renamed.

    >>> user_browser.open('http://launchpad.dev/~aardvarks/+mailinglist')
    >>> user_browser.getControl('Deactivate this Mailing List').click()
    >>> act()
    >>> admin_browser.open('http://launchpad.dev/~aardvarks/+mailinglist')
    >>> admin_browser.getControl('Purge this Mailing List').click()

    >>> user_browser.open('http://launchpad.dev/~aardvarks/+edit')
    >>> user_browser.getControl(name='field.name').value = 'antelopes'
    >>> user_browser.getControl(name='field.displayname').value = 'Antelopes'
    >>> user_browser.getControl('Save').click()
    >>> print user_browser.title
    Antelopes in Launchpad

And of course, a mailing list for the newly renamed team can be created.

    >>> user_browser.open('http://launchpad.dev/~antelopes/+mailinglist')
    >>> user_browser.getControl('Apply for Mailing List').click()
    >>> print user_browser.title
    Antelopes in Launchpad
    >>> admin_browser.open('http://launchpad.dev/+mailinglists')
    >>> admin_browser.getControl(name='field.antelopes').value = ['approve']
    >>> admin_browser.getControl('Submit').click()
    >>> act()
    >>> user_browser.open(user_browser.url) # A `reload` would resubmit.
    >>> user_browser.getLink('View archive')
    <Link text='View archive'
          url='http://lists.launchpad.dev/antelopes'>

A team with an active mailing list cannot be merged with another team.

    >>> admin_browser.open('http://launchpad.dev/people/+adminteammerge')
    >>> admin_browser.getControl('Duplicated Team').value = 'antelopes'
    >>> admin_browser.getControl('Target Team').value = 'guadamen'
    >>> admin_browser.getControl('Merge').click()
    >>> for message in get_feedback_messages(admin_browser.contents):
    ...     print message
    There is 1 error.
    antelopes is associated with a Launchpad mailing list; we can't merge it.

But if the mailing list for the team being merge has been purged, then the
merge is allowed.

    >>> user_browser.open('http://launchpad.dev/~antelopes/+mailinglist')
    >>> user_browser.getControl('Deactivate this Mailing List').click()
    >>> act()
    >>> admin_browser.open('http://launchpad.dev/~antelopes/+mailinglist')
    >>> admin_browser.getControl('Purge this Mailing List').click()

    >>> admin_browser.open('http://launchpad.dev/people/+adminteammerge')
    >>> admin_browser.getControl('Duplicated Team').value = 'antelopes'
    >>> admin_browser.getControl('Target Team').value = 'guadamen'
    >>> admin_browser.getControl('Merge').click()
    >>> admin_browser.getControl('Deactivate Members and Merge').click()
    >>> for message in get_feedback_messages(admin_browser.contents):
    ...     print message
    Merge completed successfully.
