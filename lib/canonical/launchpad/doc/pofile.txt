POFile
======

Get evolution template for Ubuntu Hoary

>>> from zope.component import getUtility
>>> from canonical.launchpad.interfaces import (
... IPOTemplateSet, ISourcePackageNameSet, IDistributionSet)
>>> sourcepackagenameset = getUtility(ISourcePackageNameSet)
>>> sourcepackagename = sourcepackagenameset['evolution']
>>> distributionset = getUtility(IDistributionSet)
>>> distribution = distributionset['ubuntu']
>>> release = distribution['hoary']
>>> potemplateset = getUtility(IPOTemplateSet)
>>> potemplatesubset = potemplateset.getSubset(
...     distrorelease=release, sourcepackagename=sourcepackagename)
>>> potemplate = potemplatesubset['evolution-2.2']

Get Xhosa translation

>>> pofile = potemplate.getPOFileByLang('xh')

Get the set of POTMsgSets that are untranslated.

>>> potmsgsets = list(pofile.getPOTMsgSetUntranslated())
>>> len(potmsgsets)
22

Get Spanish translation

>>> pofile = potemplate.getPOFileByLang('es')

Get the set of POTMsgSets that are untranslated.

>>> potmsgsets = list(pofile.getPOTMsgSetUntranslated())
>>> len(potmsgsets)
13

Test that the header is updated.

>>> from canonical.launchpad.components.poparser import POHeader

This is the comment.

>>> comment = ' This is the top comment.'

This is the new header.

>>> msgstr = '''Project-Id-Version: es
... POT-Creation-Date: 2004-08-18 11:10+0200
... PO-Revision-Date: 2005-08-18 13:22+0000
... Last-Translator: Carlos Perelló Marín <carlos@canonical.com>
... Language-Team: Spanish <traductores@es.gnome.org>
... MIME-Version: 1.0
... Content-Type: text/plain; charset=UTF-8
... Content-Transfer-Encoding: 8bit
... Report-Msgid-Bugs-To: serrador@hispalinux.es
... X-Generator: Rosetta (https://launchpad.net/rosetta/)
... Plural-Forms: nplurals=2; plural=n != 1;'''

Now, get a POHeader object with that information.

>>> new_header = POHeader(commentText=comment, msgstr=msgstr)
>>> new_header.updateDict()

We check that the plural forms expression is correctly parsed:

>>> new_header.getPluralFormExpression() == 'n != 1'
True

To be sure the new header is being applied, here we have the old values:

>>> print pofile.topcomment.encode('utf-8')
traducción de es.po al Spanish
translation of es.po to Spanish
...

>>> print pofile.header.encode('utf-8')
Project-Id-Version: es
POT-Creation-Date: 2004-08-17 11:10+0200
PO-Revision-Date: 2005-04-07 13:22+0000
...
Plural-Forms: nplurals=2; plural=(n != 1);

>>> pofile.fuzzyheader
True

>>> pofile.pluralforms
2

Now, is time to change the old header with the new one.

>>> pofile.updateHeader(new_header)

And the new values:

>>> pofile.topcomment
u' This is the top comment.'

>>> print pofile.header.encode('utf-8')
Project-Id-Version: es
POT-Creation-Date: 2004-08-18 11:10+0200
PO-Revision-Date: 2005-08-18 13:22+0000
...
Plural-Forms: nplurals=2; plural=n != 1;

>>> pofile.fuzzyheader
False

>>> pofile.pluralforms
2

Now I'm going to test creating a header with invalid plural-forms and
trying to parse the number and type of plural forms it has.

>>> msgstr = '''Project-Id-Version: es
... POT-Creation-Date: 2004-08-18 11:10+0200
... PO-Revision-Date: 2005-08-18 13:22+0000
... Last-Translator: Carlos Perelló Marín <carlos@canonical.com>
... Language-Team: Spanish <traductores@es.gnome.org>
... MIME-Version: 1.0
... Content-Type: text/plain; charset=UTF-8
... Content-Transfer-Encoding: 8bit
... Report-Msgid-Bugs-To: serrador@hispalinux.es
... X-Generator: Rosetta (http://launchpad.ubuntu.com/rosetta/)
... Plural-Forms: n != 1'''
>>> new_header = POHeader(msgstr=msgstr)
>>> new_header.updateDict()
WARNING:root:The plural form header has an unknown error. Using the default value...
>>> new_header.getPluralFormExpression() == None
True


isPORevisionDateOlder
---------------------

This method helps to compare two PO files header and decide if the given one
is older than the one we have in the IPOFile object. We are using this
method, for instance, to know if a new imported PO file should be ignored
because we already have a newer one.

This test is to be sure that the date comparation is working and that two
headers with the same date will always be set as newer because lazy
translators forget to update that field from time to time and sometimes we
were losing translations because we were ignoring those imports too.

    >>> from canonical.launchpad.components.poparser import POHeader

    >>> print pofile.header.encode('utf-8')
    Project-Id-Version: es
    ...
    PO-Revision-Date: 2005-08-18 13:22+0000
    ...

First, we check with the same date.

    >>> header = POHeader(msgstr=u'PO-Revision-Date: 2005-08-18 13:22+0000')
    >>> header.updateDict()
    WARNING:root:PO file header entry has no content-type field
    >>> pofile.isPORevisionDateOlder(header)
    False

Now, we check with a date that is in the past.

    >>> header = POHeader(msgstr=u'PO-Revision-Date: 2005-08-18 13:21+0000')
    >>> header.updateDict()
    WARNING:root:PO file header entry has no content-type field
    >>> pofile.isPORevisionDateOlder(header)
    True

canEditTranslations
-------------------

This method determines if someone is allowed to edit translations.

Do some needed imports.

    >>> from canonical.launchpad.interfaces import ILaunchpadCelebrities
    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> from canonical.launchpad.interfaces import IProductSet
    >>> from canonical.launchpad.interfaces import ITranslationGroupSet
    >>> from canonical.launchpad.database import POFile
    >>> from canonical.launchpad.ftests import login
    >>> from canonical.lp.dbschema import TranslationPermission
    >>> person_set = getUtility(IPersonSet)

Need extra permissions to change the values.

    >>> login('carlos@canonical.com')

Set a translation group to test the CLOSED mode. This mode allows translations
only from the teams set as official translators.

    >>> product = getUtility(IProductSet).getByName('evolution')
    >>> product.translationgroup = getUtility(
    ...     ITranslationGroupSet)['testing-translation-team']
    >>> product.translationpermission = TranslationPermission.CLOSED

Get the IPOFile we are going to use.

    >>> product_series = product.translatable_series[0]
    >>> potemplate = product_series.getPOTemplate('evolution-2.2')
    >>> pofile_es = potemplate.getPOFileByLang('es')

A Launchpad admin must have permission always.

    >>> admins = getUtility(ILaunchpadCelebrities).admin
    >>> pofile_es.canEditTranslations(admins)
    True

A Rosetta Expert too.

    >>> rosetta_experts = getUtility(ILaunchpadCelebrities).rosetta_expert
    >>> pofile_es.canEditTranslations(rosetta_experts)
    True

And Valentina Commissari, as member of the Spanish translation team for
evolution should also have rights.

    >>> valentina = person_set.getByName('tsukimi')
    >>> pofile_es.canEditTranslations(valentina)
    True

But the unprivileged account should not.

    >>> no_priv = person_set.getByName('no-priv')
    >>> pofile_es.canEditTranslations(no_priv)
    False

Now, we get an IPOFile that does not have a translation team assigned.

    >>> pofile_cy = potemplate.getDummyPOFile('cy')

Valentina Commissari is not a translator for this language and does not
have permissions.

    >>> pofile_cy.canEditTranslations(valentina)
    False

And same thing with the unprivileged account.

    >>> pofile_cy.canEditTranslations(no_priv)
    False

Now, let's test the STRUCTURED mode. In this mode, only the defined
translation teams can translate like the CLOSE mode, but in addition, if we
don't have any language team for one language, anyone can add translations.

    >>> product.translationpermission = TranslationPermission.STRUCTURED

Valentina Commissari, as member of the Spanish translation team for
evolution should have rights for the Spanish IPOFile.

    >>> pofile_es.canEditTranslations(valentina)
    True

But the unprivileged account should not.

    >>> pofile_es.canEditTranslations(no_priv)
    False

And this is the difference with the CLOSED mode, anyone will be able to
translate into Welsh, as we can see with Valentina:

    >>> pofile_cy.canEditTranslations(valentina)
    True

And same thing with the unprivileged account.

    >>> pofile_cy.canEditTranslations(no_priv)
    True

Finally, let's check the OPEN mode to be 100% sure that in that mode
anyone can do translations.

    >>> product.translationgroup = None
    >>> product.translationpermission = TranslationPermission.OPEN

We don't have any translation group for the Evolution product so there are
no translators assigned to it, but Valentina Commissari still has rights to
do translations.

    >>> pofile_es.canEditTranslations(valentina)
    True

And samething with the unprivileged account.

    >>> pofile_es.canEditTranslations(no_priv)
    True

uncachedExport
--------------

This method serializes an IPOFile as a .po file.

Get a concrete POFile we know doesn't have a UTF-8 encoding.

    >>> pofile = POFile.get(24)
    >>> print pofile.header
    Project-Id-Version: PACKAGE VERSION
    ...
    Content-Type: text/plain; charset=EUC-JP
    ...

Now, let's export it with its default encoding.

    >>> stream = pofile.uncachedExport()
    >>> stream_list = stream.splitlines()

The header is not changed.

    >>> stream_list[23]
    '"Content-Type: text/plain; charset=EUC-JP\\n"'

And checking one of the translations, we can see that it's using the EUC-JP
encoding.

    >>> stream_list[29]
    'msgstr "\xc0\xdf\xc4\xea\xa4\xce\xa5\xab\xa5\xb9\xa5\xbf\xa5\xde\xa5\xa4\xa5\xba\xa4\xcb /etc/mozilla/prefs.js \xa4\xac\xcd\xf8\xcd\xd1\xa4\xc7\xa4\xad\xa4\xde\xa4\xb9\xa1\xa3"'


Now, let's force the UTF-8 encoding.

    >>> stream = pofile.uncachedExport(force_utf8=True)
    >>> stream_list = stream.splitlines()

We can see that the header has been updated to have UTF-8

    >>> stream_list[23]
    '"Content-Type: text/plain; charset=UTF-8\\n"'

And the encoding used is also using UTF-8 chars.

    >>> stream_list[29]
    'msgstr "\xe8\xa8\xad\xe5\xae\x9a\xe3\x81\xae\xe3\x82\xab\xe3\x82\xb9\xe3\x82\xbf\xe3\x83\x9e\xe3\x82\xa4\xe3\x82\xba\xe3\x81\xab /etc/mozilla/prefs.js \xe3\x81\x8c\xe5\x88\xa9\xe7\x94\xa8\xe3\x81\xa7\xe3\x81\x8d\xe3\x81\xbe\xe3\x81\x99\xe3\x80\x82"'

getPOTMsgSetUntranslated
------------------------

The POTMsgSet that are untranslated are the ones that are not complete and
that aren't fuzzy.

If a POTMsgSet doesn't have a POMsgSet for a concrete translation, we take
that as not bein complete too.

    >>> untranslated_potmsgset = pofile_es.getPOTMsgSetUntranslated()
    >>> untranslated_potmsgset.count()
    13

    >>> for potmsgset in untranslated_potmsgset:
    ...     pomsgset = potmsgset.getPOMsgSet(
    ...         pofile_es.language.code, pofile_es.variant)
    ...     assert (pomsgset is None or
    ...             (pomsgset.iscomplete == False and
    ...              pomsgset.isfuzzy == False))


Security tests
==============

Import the function that will help us to do this test.

    >>> from canonical.launchpad.helpers import check_permission

A Launchpad admin must have permission to edit an IPOFile always.
    >>> login('foo.bar@canonical.com')
    >>> check_permission('launchpad.Edit', pofile)
    True

And a Rosetta Expert too.

    >>> login('jordi@ubuntu.com')
    >>> check_permission('launchpad.Edit', pofile)
    True

And that's all, folks!
