= Setting the status of a bug =

If you have a bug and a target, there's method which makes it easier to
change the bug's status for that specific target. It expects the user
changing the status, the target, and the new status.

    >>> from canonical.testing import LaunchpadZopelessLayer
    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> LaunchpadZopelessLayer.switchDbUser('launchpad')
    >>> login('no-priv@canonical.com')
    >>> no_priv = getUtility(IPersonSet).getByName('no-priv')

    >>> from canonical.launchpad.interfaces import (
    ...     CreateBugParams, IProductSet)
    >>> from canonical.lp.dbschema import BugTaskStatus
    >>> bug_params = CreateBugParams(
    ...     owner=no_priv, title='Sample bug', comment='This is a sample bug.')
    >>> firefox = getUtility(IProductSet).getByName('firefox')
    >>> bug = firefox.createBug(bug_params)
    >>> bug_id = bug.id

    # Set a milestone to ensure that the current db user has enough
    # privileges to access it.
    >>> [firefox_task] = bug.bugtasks
    >>> firefox_task.milestone = firefox.getMilestone('1.0')

    >>> from canonical.database.sqlbase import commit
    >>> commit()
    >>> LaunchpadZopelessLayer.switchDbUser(test_dbuser)

    >>> from canonical.launchpad.interfaces import IBugSet
    >>> bug = getUtility(IBugSet).get(bug_id)
    >>> no_priv = getUtility(IPersonSet).getByName('no-priv')
    >>> firefox = getUtility(IProductSet).getByName('firefox')
    >>> firefox_bugtask = bug.setStatus(
    ...     firefox, BugTaskStatus.CONFIRMED, no_priv)

It returns the edited bugtask.

    >>> firefox_bugtask.target.name
    u'firefox'
    >>> firefox_bugtask.status.name
    'CONFIRMED'

It also emits an SQLObjectModifiedEvent so that BugNotification and
BugActivity records are created.

    >>> from canonical.launchpad.database import BugNotification
    >>> latest_notification = BugNotification.selectFirst(orderBy='-id')
    >>> print latest_notification.message.owner.displayname
    No Privileges Person
    >>> print latest_notification.message.text_contents
    ** Changed in: firefox (upstream)
           Status: New => Confirmed

    >>> from canonical.launchpad.database import BugActivity
    >>> latest_activity = BugActivity.selectFirst(orderBy='-id')
    >>> latest_activity.whatchanged
    u'firefox: status'
    >>> latest_activity.oldvalue
    u'New'
    >>> latest_activity.newvalue
    u'Confirmed'

=== Product series ===

If a product series is specified, but the bug is target only to the
product, not the product series, the product bugtask is edited.

    >>> firefox_trunk = firefox.getSeries('trunk')
    >>> bug.getBugTask(firefox_trunk) is None
    True
    >>> firefox_bugtask = bug.setStatus(
    ...     firefox_trunk, BugTaskStatus.NEW, no_priv)
    >>> firefox_bugtask.target.name
    u'firefox'
    >>> firefox_bugtask.status.name
    'NEW'

If the bug is targeted to the product series, the product series bugtask
is edited.

    >>> from canonical.launchpad.interfaces import IBugTaskSet
    >>> commit()
    >>> LaunchpadZopelessLayer.switchDbUser('launchpad')
    >>> bug = getUtility(IBugSet).get(bug_id)
    >>> no_priv = getUtility(IPersonSet).getByName('no-priv')
    >>> firefox = getUtility(IProductSet).getByName('firefox')
    >>> firefox_trunk = firefox.getSeries('trunk')
    >>> getUtility(IBugTaskSet).createTask(
    ...     bug, productseries=firefox_trunk, owner=no_priv)
    <BugTask at ...>

    >>> commit()
    >>> LaunchpadZopelessLayer.switchDbUser(test_dbuser)
    >>> bug = getUtility(IBugSet).get(bug_id)
    >>> no_priv = getUtility(IPersonSet).getByName('no-priv')
    >>> firefox = getUtility(IProductSet).getByName('firefox')
    >>> firefox_trunk = firefox.getSeries('trunk')
    >>> firefox_trunk_bugtask = bug.setStatus(
    ...     firefox_trunk, BugTaskStatus.INCOMPLETE, no_priv)

    >>> firefox_trunk_bugtask.target.name
    u'trunk'
    >>> firefox_trunk_bugtask.status.name
    'INCOMPLETE'

If the target bugtask has a conjoined master bugtask, the conjoined
master will be edited and returned. The conjoined slave is of course
updated automatically.

    >>> firefox_bugtask = firefox_trunk_bugtask.conjoined_slave
    >>> firefox_bugtask.target.name
    u'firefox'
    >>> firefox_bugtask.conjoined_master is not None
    True
    >>> firefox_bugtask.status.name
    'INCOMPLETE'
    >>> firefox_trunk_bugtask = bug.setStatus(
    ...     firefox_bugtask.target, BugTaskStatus.CONFIRMED, no_priv)
    >>> firefox_trunk_bugtask.target.name
    u'trunk'
    >>> firefox_trunk_bugtask.status.name
    'CONFIRMED'
    >>> firefox_bugtask.status.name
    'CONFIRMED'

=== Distributions and packages ===

Setting the status of a distribution or package bugtask work the same as
for product tasks.

    >>> commit()
    >>> LaunchpadZopelessLayer.switchDbUser('launchpad')
    >>> from canonical.launchpad.interfaces import IDistributionSet
    >>> ubuntu = getUtility(IDistributionSet).getByName('ubuntu')

    # Set a milestone to ensure that the current db user has enough
    # privileges to access it.
    >>> ubuntu_hoary = ubuntu.getSeries('hoary')
    >>> feature_freeze = ubuntu_hoary.newMilestone('feature-freeze')
    >>> bug = ubuntu.createBug(bug_params)
    >>> [ubuntu_bugtask] = bug.bugtasks
    >>> ubuntu_bugtask.milestone = feature_freeze
    >>> bug_id = bug.id
    >>> commit()
    >>> LaunchpadZopelessLayer.switchDbUser(test_dbuser)

    >>> bug = getUtility(IBugSet).get(bug_id)
    >>> no_priv = getUtility(IPersonSet).getByName('no-priv')
    >>> ubuntu = getUtility(IDistributionSet).getByName('ubuntu')
    >>> ubuntu_bugtask = bug.setStatus(
    ...     ubuntu, BugTaskStatus.CONFIRMED, no_priv)
    >>> ubuntu_bugtask.target.name
    u'ubuntu'
    >>> ubuntu_bugtask.status.name
    'CONFIRMED'

If a source package is given, but no such package exists, no bugtask
will be edited.

    >>> ubuntu_firefox = ubuntu.getSourcePackage('mozilla-firefox')
    >>> bug.setStatus(ubuntu_firefox, BugTaskStatus.CONFIRMED, no_priv) is None
    True

If the bug is targeted to a source package, that bugtask is of course
edited.

    >>> ubuntu_bugtask.sourcepackagename = ubuntu_firefox.sourcepackagename
    >>> ubuntu_firefox_task = bug.setStatus(
    ...     ubuntu_firefox, BugTaskStatus.INCOMPLETE, no_priv)
    >>> ubuntu_firefox_task.target.displayname
    u'mozilla-firefox in ubuntu'
    >>> ubuntu_firefox_task.status.name
    'INCOMPLETE'

If a distro series is given, but the bug is only targeted to the
distribution and not to the distro series, the distribution task is
edited.

    >>> ubuntu_warty = ubuntu.getSeries('warty')
    >>> warty_firefox = ubuntu_warty.getSourcePackage('mozilla-firefox')
    >>> ubuntu_firefox_task = bug.setStatus(
    ...     warty_firefox, BugTaskStatus.CONFIRMED, no_priv)
    >>> ubuntu_firefox_task.target.displayname
    u'mozilla-firefox in ubuntu'
    >>> ubuntu_firefox_task.status.name
    'CONFIRMED'

    >>> ubuntu_hoary = ubuntu.getSeries('hoary')
    >>> hoary_firefox = ubuntu_hoary.getSourcePackage('mozilla-firefox')
    >>> ubuntu_firefox_task = bug.setStatus(
    ...     hoary_firefox, BugTaskStatus.NEW, no_priv)
    >>> ubuntu_firefox_task.target.displayname
    u'mozilla-firefox in ubuntu'
    >>> ubuntu_firefox_task.status.name
    'NEW'

However, if the bug is targeted to the current series, passing a
non-current series won't modify any bugtask, unless the bug is already
targeted to the non-current series of course.

    >>> ubuntu.currentseries.name
    u'hoary'

    # Need to be privileged user to target the bug to a series.
    >>> login('foo.bar@canonical.com')
    >>> commit()
    >>> LaunchpadZopelessLayer.switchDbUser('launchpad')
    >>> bug = getUtility(IBugSet).get(bug_id)
    >>> ubuntu = getUtility(IDistributionSet).getByName('ubuntu')
    >>> ubuntu_hoary = ubuntu.getSeries('hoary')
    >>> nomination = bug.addNomination(
    ...     getUtility(ILaunchBag).user, ubuntu_hoary)
    >>> nomination.isApproved()
    True
    >>> login('no-priv@canonical.com')

    >>> commit()
    >>> LaunchpadZopelessLayer.switchDbUser(test_dbuser)
    >>> bug = getUtility(IBugSet).get(bug_id)
    >>> no_priv = getUtility(IPersonSet).getByName('no-priv')
    >>> ubuntu = getUtility(IDistributionSet).getByName('ubuntu')
    >>> ubuntu_warty = ubuntu.getSeries('warty')
    >>> warty_firefox = ubuntu_warty.getSourcePackage('mozilla-firefox')
    >>> bug.setStatus(warty_firefox, BugTaskStatus.INCOMPLETE, no_priv) is None
    True

    >>> login('foo.bar@canonical.com')
    >>> commit()
    >>> LaunchpadZopelessLayer.switchDbUser('launchpad')
    >>> bug = getUtility(IBugSet).get(bug_id)
    >>> ubuntu = getUtility(IDistributionSet).getByName('ubuntu')
    >>> ubuntu_warty = ubuntu.getSeries('warty')
    >>> nomination = bug.addNomination(
    ...     getUtility(ILaunchBag).user, ubuntu_warty)
    >>> nomination.isApproved()
    True
    >>> login('no-priv@canonical.com')

    >>> commit()
    >>> LaunchpadZopelessLayer.switchDbUser(test_dbuser)
    >>> bug = getUtility(IBugSet).get(bug_id)
    >>> no_priv = getUtility(IPersonSet).getByName('no-priv')
    >>> ubuntu = getUtility(IDistributionSet).getByName('ubuntu')
    >>> ubuntu_warty = ubuntu.getSeries('warty')
    >>> warty_firefox = ubuntu_warty.getSourcePackage('mozilla-firefox')
    >>> ubuntu_firefox_task = bug.setStatus(
    ...     warty_firefox, BugTaskStatus.INCOMPLETE, no_priv)
    >>> ubuntu_firefox_task.target.displayname
    u'Warty mozilla-firefox'
    >>> ubuntu_firefox_task.status.name
    'INCOMPLETE'
