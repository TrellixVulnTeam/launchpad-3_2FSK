= Migrating translations between distro series =

When a new release series is created for a distribution it usually inherits
all settings and data from its parent (preceding) series. To facilitate this
for the translations the method copyTranslationsFromParent is called from a
script once after the release series is created.

    >>> login("foo.bar@canonical.com")
    >>> foobuntu = factory.makeDistribution('foobuntu', 'Foobuntu')
    >>> barty = factory.makeDistroRelease(foobuntu, '99.0', name='barty')
    >>> carty = factory.makeDistroRelease(foobuntu, '99.1',
    ...                                   name='carty', parent_series=barty)

Functions to create source packages, templates and and translations.

    >>> def makeSourcePackage(name):
    ...     packagename =  factory.makeSourcePackageName(name)
    ...     return factory.makeDistributionSourcePackage(packagename,
    ...                                                  foobuntu)

    >>> def makeTemplateAndLanguage(series, package, name, languages):
    ...     templ = factory.makePOTemplate(
    ...         distroseries=series,
    ...         sourcepackagename=package.sourcepackagename,
    ...         name=name, translation_domain=name+'-domain')
    ...     for lang in languages:
    ...         factory.makePOFile(lang, templ)
    ...     return templ

    >>> global_sequence = 1
    >>> def makeTranslation(templ, msgid, translations, sequence=None):
    ...     global global_sequence
    ...     if sequence is None:
    ...         sequence = global_sequence
    ...         global_sequence += 1
    ...     msgset = factory.makePOTMsgSet(templ, msgid, sequence=sequence)
    ...     for lang, trans in translations.items():
    ...         pofile = templ.getPOFileByLang(lang)
    ...         msg = factory.makeSharedTranslationMessage(pofile, msgset,
    ...             translations=[trans], is_imported=True)
    ...     return msgset

    >>> package1 = makeSourcePackage('package1')
    >>> package2 = makeSourcePackage('package2')

    >>> templ1 = makeTemplateAndLanguage(barty, package1, 'templ1', ['eo'])
    >>> templ2 = makeTemplateAndLanguage(barty, package1, 'templ2',
    ...                                  ['eo', 'de'])
    >>> templ3 = makeTemplateAndLanguage(barty, package1, 'templ3', ['eo'])

    >>> msgset11 = makeTranslation(templ1, 'msgid11', {'eo': 'eo11'})
    >>> msgset21 = makeTranslation(templ2, 'msgid21',
    ...                            {'eo': 'eo21', 'de': 'de21'})
    >>> msgset22 = makeTranslation(templ2, 'msgid22',
    ...                            {'eo': 'eo22', 'de': 'de22'})
    >>> msgset31 = makeTranslation(templ3, 'msgid31', {'eo': 'eo31'})

The parent series may have obsolete POTMsgSets which will not be copied.

    >>> msgset12 = makeTranslation(templ1, 'msgid12', {'eo': 'eo12'}, 0)

Also, templ3 happens to be deactivated.

    >>> templ3.iscurrent = False

We need a transaction manager (in this case a fake one) to make the copy work.

    >>> class FakeTransactionManager:
    ...     """Mock transaction manager for test."""
    ...     def begin(self):
    ...         pass
    ...     def commit(self):
    ...         pass
    >>> transaction_stub = FakeTransactionManager()


== Preconditions for migrating translations between distro series ==

Before we are able to migrate translations, there are a set of preconditions
that should be met:

First one is that we should keep the new distroseries's translations hidden
from the public, so the copying procedure is not confused by concurrent
updates:

    >>> carty.hide_all_translations = False
    >>> carty.copyTranslationsFromParent(transaction_stub)
    Traceback (most recent call last):
    ...
    AssertionError: hide_all_translations not set!...

    # Set the field to TRUE so we meet this precondition for following
    # tests.
    >>> carty.hide_all_translations = True

The other one is that, for the same reason, the import queue should not be
accepting uploads for this distroseries.

    >>> carty.defer_translation_imports = False
    >>> carty.copyTranslationsFromParent(transaction_stub)
    Traceback (most recent call last):
    ...
    AssertionError: defer_translation_imports not set!...

    # Set the field to TRUE so we meet this precondition for following
    # tests.
    >>> carty.defer_translation_imports = True


== Performing the migration ==

A pristine distroseries can be filled with copies of translation templates
and translation files from the parent. The actual translations, stored in
POTMsgSet and TranslationMessage object, are shared between the two series.

    >>> carty.copyTranslationsFromParent(transaction_stub)

All current templates were copied from the parent series but the deactivated
template templ3 was not copied.

    >>> from zope.security.proxy import removeSecurityProxy as rSP
    >>> from canonical.launchpad.interfaces.potemplate import IPOTemplateSet
    >>> cartempls = getUtility(IPOTemplateSet).getSubset(distroseries=carty)
    >>> len(cartempls)
    2
    >>> print sorted([templ.name for templ in cartempls])
    [u'templ1', u'templ2']
    >>> rSP(cartempls[u'templ1']) is rSP(templ1)
    False
    >>> rSP(cartempls[u'templ2']) is rSP(templ2)
    False

All POFiles for the copied POTemplates have also been copied.

    >>> all_pofiles = sum([list(templ.pofiles) for templ in cartempls], [])
    >>> print sorted([pofile.path for pofile in all_pofiles])
    [u'templ1-domain-eo.po', u'templ2-domain-de.po', u'templ2-domain-eo.po']

All POTMsgSets that were not obsolete are now shared with the parent series.

    >>> print cartempls[u'templ1'].getPOTMsgSets().count()
    1
    >>> rSP(cartempls[u'templ1']['msgid11']) is rSP(msgset11)
    True
    >>> cartempls[u'templ1']['msgid12']
    Traceback (most recent call last):
    ...
    NotFoundError: 'msgid12'

    >>> print cartempls[u'templ2'].getPOTMsgSets().count()
    2
    >>> rSP(cartempls[u'templ2']['msgid21']) is rSP(msgset21)
    True
    >>> rSP(cartempls[u'templ2']['msgid22']) is rSP(msgset22)
    True


Once the migration is done, copyTranslationsFromParent must not be called
again as it only operates on distroseries without any translation templates.
Because of message sharing incremental copies are no longer needed.

    >>> carty.copyTranslationsFromParent(transaction_stub)
    Traceback (most recent call last):
    ...
    AssertionError:
    The child series must not yet have any translation templates.


== Running the script ==

Now, we execute the script that will do the migration using
copyTranslationsFromParent. For that we create a new child series to receive
those translations. For testing purposes this series has translation imports
enabled.

    >>> darty = factory.makeDistroRelease(foobuntu, '99.2',
    ...                                   name='darty', parent_series=barty)
    >>> darty_id = darty.id
    >>> darty.defer_translation_imports = False

The script starts its own transactions, so we need to commit here to be sure
the new series will be available in the script.

    >>> import transaction
    >>> transaction.commit()

The script fails as long as the defer_translation_imports flag is not
set.

    >>> from canonical.launchpad.ftests.harness import LaunchpadTestSetup
    >>> LaunchpadTestSetup(dbuser='rosettaadmin').setUp()

    >>> from canonical.launchpad.ftests.script import run_script
    >>> returnvalue, output, error_output = run_script(
    ...     'scripts/copy-translations-from-parent.py',
    ...     ['--distribution=foobuntu', '--series=darty'])
    >>> returnvalue
    1
    >>> print error_output
    INFO    creating lockfile
    ERROR   Before this process starts, set the hide_all_translations and
            defer_translation_imports flags for distribution foobuntu, series
            darty; or use the --force option to make it happen
            automatically.
    <BLANKLINE>

    >>> transaction.abort()
    >>> darty.defer_translation_imports
    False
    >>> darty.hide_all_translations
    True

It succeeds, however, when we pass the --force option.  The script then
sets the defer_translation_imports flag itself before copying.

    >>> transaction.abort()
    >>> returnvalue, output, error_output = run_script(
    ...     'scripts/copy-translations-from-parent.py',
    ...     ['--distribution=foobuntu', '--series=darty', '--force'])
    >>> returnvalue
    0
    >>> print error_output
    INFO    creating lockfile
    INFO    Starting...
    INFO    Populating blank distroseries ... with translations from ...
    INFO    Extracting from POTemplate into
            "temp_POTemplate_holding_foobuntu_darty"...
    INFO    Extracting from TranslationTemplateItem into
            "temp_TranslationTemplateItem_holding_foobuntu_darty"...
    INFO    Extracting from POFile into
            "temp_POFile_holding_foobuntu_darty"...
    INFO    Extracting from POFileTranslator into
            "temp_POFileTranslator_holding_foobuntu_darty"...
    INFO    Pouring "temp_POTemplate_holding_foobuntu_darty"
            back into POTemplate...
    INFO    Pouring "temp_TranslationTemplateItem_holding_foobuntu_darty"
            back into TranslationTemplateItem...
    INFO    Pouring "temp_POFile_holding_foobuntu_darty"
            back into POFile...
    INFO    Pouring "temp_POFileTranslator_holding_foobuntu_darty"
            back into POFileTranslator...
    INFO    Done.
    <BLANKLINE>

After completing, the script restores the defer_translation_imports
flag to its previous value (off).

    >>> transaction.abort()
    >>> darty.defer_translation_imports
    False
    >>> darty.hide_all_translations
    True

Once the script has finished, the new distro series has alle the active
templates of the parent series.

    >>> dartempls = getUtility(IPOTemplateSet).getSubset(distroseries=darty)
    >>> len(dartempls)
    2
    >>> print sorted([templ.name for templ in dartempls])
    [u'templ1', u'templ2']


