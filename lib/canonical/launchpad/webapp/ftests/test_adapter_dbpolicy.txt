The current database  policy determines what Stores are retrieved by default

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.webapp.adapter import get_store_name
    >>> from canonical.launchpad.webapp.interfaces import (
    ...     ALL_STORES, AUTH_STORE, DEFAULT_FLAVOR, IStoreSelector,
    ...     MAIN_STORE, MASTER_FLAVOR, SLAVE_FLAVOR)
    >>> def show_defaults(policy):
    ...     store_selector = getUtility(IStoreSelector)
    ...     store_selector.push(policy)
    ...     policy.beforeTraversal()
    ...     for store_name in ALL_STORES:
    ...         default_store = store_selector.get(store_name, DEFAULT_FLAVOR)
    ...         print '%s defaults to %s' % (
    ...             store_name, get_store_name(default_store))
    ...     policy.afterCall()
    ...     getUtility(IStoreSelector).pop()

    >>> from canonical.launchpad.webapp.dbpolicy import (
    ...     MasterDatabasePolicy, SlaveDatabasePolicy,
    ...     LaunchpadDatabasePolicy, SSODatabasePolicy)
    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest
    >>> request = LaunchpadTestRequest(SERVER_URL='http://localhost')

    >>> show_defaults(MasterDatabasePolicy(request))
    main defaults to launchpad-main-master
    auth defaults to launchpad-auth-master

    >>> show_defaults(SlaveDatabasePolicy(request))
    main defaults to launchpad-main-slave
    auth defaults to launchpad-auth-slave

    >>> show_defaults(LaunchpadDatabasePolicy(request))
    main defaults to launchpad-main-slave
    auth defaults to launchpad-auth-slave

    >>> show_defaults(SSODatabasePolicy(request))
    main defaults to sso-main-slave
    auth defaults to sso-auth-master

It is possible for policies to whitelist allowed Stores, disallowing
access to some Stores entirely:

    >>> policy = SSODatabasePolicy(request)
    >>> selector = getUtility(IStoreSelector)
    >>> selector.push(policy)
    >>> store = selector.get(AUTH_STORE, MASTER_FLAVOR)
    >>> store = selector.get(MAIN_STORE, SLAVE_FLAVOR)
    >>> store = selector.get(AUTH_STORE, SLAVE_FLAVOR)
    Traceback (most recent call last):
    ...
    DisallowedStore: ('auth', 'slave')
    >>> store = selector.get(MAIN_STORE, MASTER_FLAVOR)
    Traceback (most recent call last):
    ...
    DisallowedStore: ('main', 'master')
    >>> policy = selector.pop()
