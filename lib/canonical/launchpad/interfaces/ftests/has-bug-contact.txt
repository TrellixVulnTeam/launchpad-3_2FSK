= IHasBugContact =

Bug supervisor are people or teams who are responsible for dealing with
bugs pertaining to a target. All objects with a bug supervisor are also
structural subscription targets. When the bug supervisor for such an object
is set, a new bug subscription is created as well.

    >>> target.bug_subscriptions
    []

    >>> print target.bugcontact
    None

    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> personset = getUtility(IPersonSet)
    >>> no_priv = personset.getByEmail("no-priv@canonical.com")
    >>> foo_bar = personset.getByEmail("foo.bar@canonical.com")

    >>> login("foo.bar@canonical.com")

We set no_priv as the bug supervisor for the target.

    >>> target.setBugContact(no_priv, foo_bar)

The bug supervisor can be retrieved using the `bugcontact` property.

    >>> print target.bugcontact.preferredemail.email
    no-priv@canonical.com

But we can't use it to set the bug supervisor.

    >>> target.bugcontact = None
    Traceback (most recent call last):
    ...
    ForbiddenAttribute: ('bugcontact', <...>)

After setting no_priv as the bug supervisor, a bug subscription is created
for the target.

    >>> for bug_subscription in target.bug_subscriptions:
    ...     print bug_subscription.subscriber.preferredemail.email
    no-priv@canonical.com

And now no_priv is an indirect subscriber to any bug filed on
the target.

    >>> bug = filebug(target, 'test bug')
    >>> no_priv in bug.getIndirectSubscribers()
    True

If no_priv unsubscribes, he is still set as the bug supervisor.

    >>> target.removeBugSubscription(no_priv)
    >>> print target.bugcontact.preferredemail.email
    no-priv@canonical.com
    >>> no_priv in bug.getIndirectSubscribers()
    False

But we can remove the bug supervisor by setting it to None.

    >>> target.setBugContact(None, None)
    >>> print target.bugcontact
    None

Note that removing a person as a bug contact supervisor not remove their
subscription to the target, if it exists.
