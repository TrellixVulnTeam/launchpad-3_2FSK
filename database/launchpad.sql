--
-- This will DESTROY your database and create a fresh one
--

/*

  TODO

        - re-evalutate some of the "text" field types, they might need to be "bytea"
	  unless we can guarantee utf-8
	- add sample data for the schemas
	- make sure names are only [a-z][0-9][-.+] and can only start with [a-z]
	- set DEFAULT's for datestamps (now) and others
	- create custom schema systems for components, etc.
        - add Series to products and projects
	- setup translatable package descriptions
  CHANGES


  v0.98-dev:
        - merge SourceSource table from Andrew Bennetts
	- change SourceSource.homepageurl to SourceSource.product
	- BugInfestation: dateverified and verifiedby need to be NULL if its not verified
	- set a lot of datecreated and lastverified etc fields to DEFAULT CURRENT_TIMESTAMP
	- use Andrew Bennett's way of putting comments inside the table def, above the
	  line being commented, it makes lines shorter.
  v0.97:
        - rename Membership.label to Membership.role
	- rename EmailAddress.label to EmailAddress.status
	- move fields of Packaging around and rename Packaging.label to Packaging.packaging
        - restructure recursive relationships to be "subject - label - object"
	  - BranchRelationship
	  - ProjectRelationship
	  - CodereleaseRelationship
	  - SourcepackageRelationship
	  - BugRelationship
	  - Packaging
	- removed releasestatus from DistroArchRelease (we already have it on DistroRelease)
	- moved releasedate to DistroArchRelease (simplify but lose ability to release different arches at different dates)
	- remove ProjectTranslationEffortRelationship table altogether
	- add a TranslationEffort.project field
	- rename BugInfestation.affected to BugInfestation.infestation
  v0.96:
	- split categorybranchversion into category, branch and version
	- rename SourcepackageBug to SourcepackageBugAssignment
	- rename ProductBug to ProductBugAssignment
	- rename CodeReleaseBug to BugInfestation
	- eliminated BugSourcepackageRelationship since we made victimization a kind of BugInfestation.affected
	- MASSIVE Table.id renaming of autogenerated primary keys
	- renaming of timestamp fields to "datecreated" or "daterevised" style
	- consistency check between DIA and SQL, they should now be the same
  v0.95:
        - move bug priority from CodereleaseBug to SourcepackageBug
	- remove wontfix since it is now a bug priority ("wontfix")
	- add name to bugattachment
	- refactor bug attachments:
	  - don't have a relationship, each attachment on only one bug
	  - allow for revisions to attachments
	- rename BugRef to BugExternalref and remove bugref field
	- create a link ProjectBugsystem between Project's and BugSystem's
	- remove BugMessageSighting, each BugMessage now belongs to one and only one bug
	- add a nickname (optional unique name) to the Bug table
	- change the "summary" field of Bug to "title" for consistency
	- rename some tables:
	  - ReleaseBugStatus -> CodereleaseBug
	  - SourcepackageBugStatus -> SourcepackageBug
	  - ProductBugStatus -> ProductBug
        - add a createdate to project and product
  v0.94:
        - rename soyuz.sql to launchpad.sql
	- make Schema.extensible DEFAULT false (thanks spiv)
  v0.93:
        - add a manifest to Sourcepackage and Product, for the mutable HEAD manifest
	- add a manifest to Coderelease
	- rename includeas to entrytype in ManifestEntry
	- remove "part" from ManifestEntry
	- add hints in Manifest table so sourcerer knows how to name patch branches
	- fix my brain dead constraints for mutual exlcusivity on branch/changeset specs
	- for a ManifestEntry, branch AND changeset can now both be null, to allow for Scott's virtual entries
	- add the Packaging table to indicate the relationship between a Product and a Sourcepackage
  v0.92:
        - make Schema and Label have name, title, description
        - added filenames for UpstreamreleaseFile, SourcepackageFile and BinarypackageBuildFile
        - linked BinarypackageBuild to DistroRelease instead of DistroArchRelease
        - add the Country table for a list of countries
	- add the SpokenIn table to link countries and languages
        - rename TranslationProject to TranslationEffort
        - add iscurrent (boolean) field to the POTFiles table, current POTFiles
	    will be displayed in project summary pages.
        - add ChangesetFile, ChangesetFilename and ChangesetFileHash tables
        - rename Release to Coderelease (and all dependent tables)
        - refactor Processor and ProcessorFamily:
	  - the distroarchrelease now has a processorfamily field
	  - the binarypackagebuild (deb) now records its processor
	- refactor the allocation of binarypackagebuild's (debs) to distroarchrelease's
	  - create a new table BinarypackageUpload that stores the packagearchivestatus
	  - remove that status from the BinarypackageBuild table
	- refactor sourcepackage upload status
	  - move changes and urgency to sourcepackagerelease
	  - add builddependsindep so sourcepackagerelease

  v0.91:
        - remove Translation_POTFileRelationship
	- ...and replace with a "project" field in POTFile
	- add a commenttext field to the POTMsgIDSighting table so we can track comments in POT files too

  v0.9:
         6 July 2004
       - first versioned release
*/

/*
  DESTROY ALL TABLES
*/
DROP TABLE SourcepackageBugAssignment;
DROP TABLE ArchArchiveLocationSigner;
DROP TABLE BugSubscription;
DROP TABLE SpokenIn;
DROP TABLE Country;
DROP TABLE TranslationEffortPOTFileRelationship;
DROP TABLE POComment;
DROP TABLE BranchRelationship;
DROP TABLE ProjectBugsystem;
DROP TABLE BugWatch;
DROP TABLE BugSystem;
DROP TABLE RosettaPOTranslationSighting;
DROP TABLE BugattachmentContent;
DROP TABLE BugAttachment;
DROP TABLE POTranslationSighting;
DROP TABLE POFile;
DROP TABLE POTMsgIDSighting;
DROP TABLE POTSubscription;
DROP TABLE POTFile;
DROP TABLE License;
DROP TABLE BugRelationship;
DROP TABLE BugMessage;
DROP TABLE BugExternalref;
DROP TABLE BugLabel;
DROP TABLE BugInfestation;
DROP TABLE ProductBugAssignment;
DROP TABLE BugActivity;
DROP TABLE BugSystemType;
DROP TABLE Bug;
DROP TABLE Packaging;
DROP TABLE CodereleaseRelationship;
DROP TABLE Coderelease;
DROP TABLE OSFileInPackage;
DROP TABLE OSFile;
DROP TABLE SourceSource;
DROP TABLE BinarypackageBuildFile;
DROP TABLE BinarypackageUpload;
DROP TABLE BinarypackageBuild;
DROP TABLE Binarypackage;
DROP TABLE SourcepackageReleaseFile;
DROP TABLE SourcepackageRelationship;
DROP TABLE SourcepackageUpload;
DROP TABLE SourcepackageRelease;
DROP TABLE SourcepackageLabel;
DROP TABLE Sourcepackage;
DROP TABLE ArchConfigEntry;
DROP TABLE ArchConfig;
DROP TABLE UpstreamReleaseFile;
DROP TABLE UpstreamRelease;
DROP TABLE ChangesetFileHash;
DROP TABLE ChangesetFile;
DROP TABLE ChangesetFileName;
DROP TABLE ManifestEntry;
DROP TABLE ProductLabel;
DROP TABLE Product;
DROP TABLE Manifest;
DROP TABLE Changeset;
DROP TABLE BranchLabel;
DROP TABLE Branch;
DROP TABLE ArchArchiveLocation;
DROP TABLE ArchArchive;
DROP TABLE POTranslation;
DROP TABLE POTInheritance;
DROP TABLE ProjectRelationship;
DROP TABLE POMsgID;
DROP TABLE Language;
DROP TABLE TranslationEffort;
DROP TABLE Project;
DROP TABLE EmailAddress;
DROP TABLE TranslationFilter;
DROP TABLE GPGKey;
DROP TABLE ArchUserID;
DROP TABLE Membership;
DROP TABLE WikiName;
DROP TABLE JabberID;
DROP TABLE IRCID;
DROP TABLE PersonLabel;
DROP TABLE TeamParticipation;
DROP TABLE Builder;
DROP TABLE DistroArchRelease;
DROP TABLE Processor;
DROP TABLE ProcessorFamily;
DROP TABLE DistroRelease;
DROP TABLE Distribution;
DROP TABLE LaunchpadFileHash;
DROP TABLE LaunchpadFile;
DROP TABLE Label;
DROP TABLE Schema;
DROP TABLE Person;



/*
  Person
  This is a person in the Launchpad system. A Person can also be a
  team if the teamowner is not NULL. Note that we will create a
  Person entry whenever we see an email address we didn't know
  about, or a GPG key we didn't know about... and if we later
  link that to a real Launchpad person we will update all the tables
  that refer to that temporary person.

  A Person is one of these automatically created people if it
  has a NULL password and is not a team.
  
  It's created first so that a Schema can have an owner, we'll
  then define Schemas and Labels a bit later.
*/
CREATE TABLE Person (
  id                    serial PRIMARY KEY,
  presentationname      text,
  givenname             text,
  familyname            text,
  password              text,
  teamowner             integer REFERENCES Person,
  teamdescription       text,
  karma                 integer,
  karmatimestamp        timestamp
);



/*
  REVELATION. THE SOYUZ METADATA
*/


/*
  Schema
  This is the (finger finger) "metadata" (finger finger).
*/
CREATE TABLE Schema (
  id             serial PRIMARY KEY,
  name           text NOT NULL,
  title          text NOT NULL,
  description    text NOT NULL,
  owner          integer NOT NULL REFERENCES Person,
  extensible     boolean NOT NULL DEFAULT false
);



/*
  Label
  The set of labels in all schemas
*/
CREATE TABLE Label (
  id             serial PRIMARY KEY,
  schema         integer NOT NULL REFERENCES Schema,
  name           text NOT NULL,
  title          text NOT NULL,
  description    text NOT NULL
);




/*
  EmailAddress
  A table of email addresses for Launchpad people.
*/
CREATE TABLE EmailAddress (
  id          serial PRIMARY KEY,
  email       text NOT NULL UNIQUE,
  person      integer NOT NULL REFERENCES Person,
  -- see Email Address Status schema
  status      integer NOT NULL
);



/*
  GPGKey
  A table of GPGKeys, mapping them to Launchpad users.
*/
CREATE TABLE GPGKey (
  id          serial PRIMARY KEY,
  person      integer NOT NULL REFERENCES Person,
  keyid       text NOT NULL UNIQUE,
  fingerprint text NOT NULL UNIQUE,
  pubkey      text NOT NULL,
  revoked     boolean NOT NULL
);



/*
  ArchUserID
  A table of Arch user id's
*/
CREATE TABLE ArchUserID (
  id         serial PRIMARY KEY,
  person     integer NOT NULL REFERENCES Person,
  archuserid text NOT NULL UNIQUE
);



/*
  WikiName
  The identity a person uses on one of the Launchpad wiki's.
*/
CREATE TABLE WikiName (
  id         serial PRIMARY KEY,
  person     integer NOT NULL REFERENCES Person,
  wiki       text NOT NULL,
  wikiname   text NOT NULL,
  UNIQUE ( wiki, wikiname )
);



/*
  JabberID
  A person's Jabber ID on our network.
*/
CREATE TABLE JabberID (
  id          serial PRIMARY KEY,
  person      integer NOT NULL REFERENCES Person,
  jabberid    text NOT NULL UNIQUE
);



/*
  IrcID
  A person's irc nick's.
*/
CREATE TABLE IRCID (
  id           serial PRIMARY KEY,
  person       integer NOT NULL REFERENCES Person,
  network      text NOT NULL,
  nickname     text NOT NULL
);




/*
  PersonLabel
  A neat way to attach tags to people...
*/
CREATE TABLE PersonLabel (
  person       integer NOT NULL REFERENCES Person,
  label        integer NOT NULL REFERENCES Label
);



/*
  Membership
  A table of memberships. It's only valid to have a membership
  in a team, not a non-team person.
*/
CREATE TABLE Membership (
  person      integer NOT NULL REFERENCES Person,
  team        integer NOT NULL REFERENCES Person,
  /* see Membership Role schema */
  role        integer NOT NULL, 
  /* see Membership Status schema */
  status      integer NOT NULL,
  PRIMARY KEY ( person, team )
);



/*
  TeamParticipation
  This is a table which shows all the memberships
  of a person. Effectively it collapses team hierarchies
  and flattens them to a straight team-person relation.
  People are also members of themselves. This allows
  us to query against a person entry elsewhere in Launchpad
  and quickly find the things a person is an owner of.
*/
CREATE TABLE TeamParticipation (
  team         integer NOT NULL REFERENCES Person,
  person       integer NOT NULL REFERENCES Person,
  PRIMARY KEY ( team, person )
);



/*
  BUTTRESS. THE ARCH REPOSITORY.
  This is the Launchpad subsystem that handles the storing and
  cataloguing of all of our Arch branches.
*/



/*
  ArchArchive
  A table of all known Arch Archives.
*/
CREATE TABLE ArchArchive (
  id            serial PRIMARY KEY,
  name          text NOT NULL,
  title         text NOT NULL,
  description   text NOT NULL,
  visible       boolean NOT NULL,
  owner         integer REFERENCES Person
);



/*
  ArchArchiveLocation
  A table of known Arch archive locations.
*/
CREATE TABLE ArchArchiveLocation (
  id            serial PRIMARY KEY,
  archive       integer NOT NULL REFERENCES ArchArchive,
  /* see the Arch Archive Type schema */
  archivetype   integer NOT NULL,
  url           text NOT NULL,
  gpgsigned     boolean NOT NULL
);



/*
  ArchArchiveLocationSigner
  A table of keys used to sign Arch Archive Locations
*/
CREATE TABLE ArchArchiveLocationSigner (
  archarchivelocation   integer NOT NULL REFERENCES ArchArchiveLocation,
  gpgkey                integer NOT NULL REFERENCES GPGKey
);




/*
  Branch
  An Arch Branch in the Launchpad system.
*/
CREATE TABLE Branch (
  id                     serial PRIMARY KEY,
  archive                integer NOT NULL REFERENCES ArchArchive,
  category               text NOT NULL,
  branch                 text,
  version                text,
  title                  text NOT NULL,
  description            text NOT NULL,
  visible                boolean NOT NULL,
  owner                  integer REFERENCES Person
);


/*
  Changeset
  An Arch changeset.
*/
CREATE TABLE Changeset (
  id             serial PRIMARY KEY,
  branch         integer NOT NULL REFERENCES Branch,
  datecreated    timestamp NOT NULL,
  logmessage     text NOT NULL,
  archid         integer REFERENCES ArchUserID,
  gpgkey         integer REFERENCES GPGKey
);



/*
  ChangesetFileName
  A filename in an arch changeset.
*/
CREATE TABLE ChangesetFileName (
  id         serial PRIMARY KEY,
  filename   text NOT NULL UNIQUE
);



/*
  ChangesetFile
  A file in an arch changeset.
*/
CREATE TABLE ChangesetFile (
  id                 serial PRIMARY KEY,
  changeset          integer NOT NULL REFERENCES Changeset,
  changesetfilename  integer NOT NULL REFERENCES ChangesetFileName,
  filecontents       bytea NOT NULL,
  filesize           integer NOT NULL,
  UNIQUE ( changeset, changesetfilename )
);



/*
  ChangesetFileHash
  A cryptographic hash of a changeset file.
*/
CREATE TABLE ChangesetFileHash (
  changesetfile     integer NOT NULL REFERENCES ChangesetFile,
  /* see Hash Algorithms schema */
  hashalg           integer NOT NULL,
  hash              bytea NOT NULL,
  UNIQUE ( changesetfile, hashalg )
);



/*
  BranchRelationship
  A table of relationships between branches. For example:
  "subject is a debianization-branch-of object"
  "subject is-a-patch-branch-of object"
*/
CREATE TABLE BranchRelationship (
  subject       integer NOT NULL REFERENCES Branch,
  /* see the Branch Relationships schema */
  label         integer NOT NULL,
  object        integer NOT NULL REFERENCES Branch,
  PRIMARY KEY ( subject, object )
);




/*
  BranchLabel
  A table of labels on branches.
*/
CREATE TABLE BranchLabel (
  branch       int NOT NULL REFERENCES Branch,
  label        int NOT NULL REFERENCES Label
);




/*
  Manifest
  A release manifest. This is sort of an Arch config
  on steroids. A Manifest is a set of ManifestEntry's
*/
CREATE TABLE Manifest (
  id               serial PRIMARY KEY,
  datecreated      timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  owner            integer NOT NULL REFERENCES Person
);




/*
  ManifestEntry
  An entry in a Manifest. each entry specifies either a branch or
  a specific changeset (revision) on a branch, as well as how that
  piece of code (revision) is brought into the release.
*/
CREATE TABLE ManifestEntry (
  manifest        integer NOT NULL REFERENCES Manifest,
  sequence        integer NOT NULL,
  branch          integer REFERENCES Branch,
  changeset       integer REFERENCES Changeset,
  /* see Manifest Entry Type schema */
  entrytype       integer NOT NULL,
  path            text NOT NULL,
  patchon         integer,
  dirname         text,
  -- sequence must be a positive integer
  CHECK ( sequence > 0 ),
  -- EITHER branch OR changeset:
  CHECK ( NOT ( branch IS NOT NULL AND changeset IS NOT NULL ) ),
  /* the "patchon" must be another manifestentry from the same
     manifest, and a different sequence */
  FOREIGN KEY ( manifest, patchon ) REFERENCES ManifestEntry ( manifest, sequence ),
  CHECK ( patchon <> sequence ),
  PRIMARY KEY ( manifest, sequence )
);



/*
  FLOSS. THE OPEN SOURCE WORLD
  This is the Launchpad subsystem that models the open source world
  of projects and products.
*/


/*
 The Project table. This stores information about an open
 source project, which can be translated or packaged, or
 about which bugs can be filed.
*/
CREATE TABLE Project (
    id           serial PRIMARY KEY,
    owner        integer NOT NULL REFERENCES Person,
    name         text NOT NULL UNIQUE,
    title        text NOT NULL,
    description  text NOT NULL,
    datecreated  timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
    homepageurl  text NOT NULL
    );


/*
 The ProjectRelationship table. This stores information about
 the relationships between open source projects. For example,
 the Gnome project aggregates the GnomeMeeting project.
*/
CREATE TABLE ProjectRelationship (
  subject       integer NOT NULL REFERENCES Project,
  -- see Project Relationships schema
  label         integer NOT NULL,
  object        integer NOT NULL REFERENCES Project
);



/*
  Product
  A table of project products. A product is something that
  can be built, or a branch of code that is useful elsewhere, or
  a set of docs... some distinct entity. Products can be made
  up of other products, but that is not reflected in this
  database. For example, Firefax includes Gecko, both are
  products.
*/
CREATE TABLE Product (
  id            serial PRIMARY KEY,
  project       integer NOT NULL REFERENCES Project,
  owner         integer NOT NULL REFERENCES Person,
  name          text NOT NULL,
  title         text NOT NULL,
  description   text NOT NULL,
  datecreated   timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  homepageurl   text NOT NULL,
  manifest      integer REFERENCES Manifest,
  UNIQUE ( project, name )
);



/*
  ProductLabel
  A label or metadata on a Product.
*/
CREATE TABLE ProductLabel (
  product  integer NOT NULL REFERENCES Product,
  label      integer NOT NULL REFERENCES Label,
  PRIMARY KEY ( product, label )
);



/*
  UpstreamRelease
  A specific tarball release of Upstream.
*/
CREATE TABLE UpstreamRelease (
  id               serial PRIMARY KEY,
  product          integer NOT NULL REFERENCES Product,
  datereleased     timestamp NOT NULL,
  -- the version without anything else, "1.3.29"
  version          text,
  -- the GSV Name "The Warty Web Release"
  title            text,
  description      text,
  owner            integer REFERENCES Person,
  UNIQUE ( product, version )
);


/*
   BUTTRESS phase 2
*/


/*
  ArchConfig
  A table to model Arch configs.
*/
CREATE TABLE ArchConfig (
  id              serial PRIMARY KEY,
  name             text NOT NULL,
  title            text NOT NULL,
  description      text NOT NULL,
  upstreamrelease  integer REFERENCES UpstreamRelease,
  owner            integer REFERENCES Person
);



/*
  ArchConfigEntry
  A table to represent the entries in an Arch config. Each
  row is a separate entry in the arch config.
*/
CREATE TABLE ArchConfigEntry (
  archconfig    integer NOT NULL REFERENCES ArchConfig,
  path          text NOT NULL,
  branch        integer REFERENCES Branch,
  changeset     integer REFERENCES Changeset,
  -- EITHER branch OR changeset:
  CHECK ( NOT ( branch IS NULL AND changeset IS NULL ) ),
  CHECK ( NOT ( branch IS NOT NULL AND changeset IS NOT NULL ) )
);



/*
  LOGISTIX. THE PACKAGES AND DISTRIBUTION MANAGER.
  Nicknamed after UPS (United Parcel Service) this is the
  Launchpad subsystem that deals with distribution and packages.
*/



/*
  ProcessorFamily
  A family of CPU's, which are all compatible. In other words, code
  compiled for any one of these processors will run on any of the
  others.
*/
CREATE TABLE ProcessorFamily (
  id                 serial PRIMARY KEY,
  name               text NOT NULL UNIQUE,
  title              text NOT NULL,
  description        text NOT NULL,
  owner              integer NOT NULL REFERENCES Person
);



/*
  Processor
  This is a table of system architectures. A DistroArchRelease needs
  to be one of these.
*/
CREATE TABLE Processor (
  id                 serial PRIMARY KEY,
  family             integer NOT NULL REFERENCES ProcessorFamily,
  name               text NOT NULL UNIQUE,
  title              text NOT NULL,
  description        text NOT NULL,
  owner              integer NOT NULL REFERENCES Person
);



/*
  Builder
  A build daemon, one of Lamont's babies.
*/
CREATE TABLE Builder (
  id                 serial PRIMARY KEY,
  processor          integer NOT NULL REFERENCES Processor,
  fqdn               text NOT NULL,
  name               text NOT NULL,
  title              text NOT NULL,
  description        text NOT NULL,
  owner              integer NOT NULL REFERENCES Person,
  UNIQUE ( fqdn, name )
);



/*
  Distribution
  An open source distribution. Collection of packages, the reason
  for Launchpad existence.
*/
CREATE TABLE Distribution (
  id               serial PRIMARY KEY,
  name             text NOT NULL,
  title            text NOT NULL,
  description      text NOT NULL,
  owner            integer NOT NULL REFERENCES Person
);



/*
  DistroRelease
  These are releases of the various distributions in the system. For
  example: warty, hoary, grumpy, woody, potato, slink, sarge, fc1,
  fc2.
*/
CREATE TABLE DistroRelease (
  id              serial PRIMARY KEY,
  distribution    integer NOT NULL REFERENCES Distribution,
  name            text NOT NULL, -- "warty"
  title           text NOT NULL, -- "Ubuntu 4.10 (The Warty Warthog Release)"
  description     text NOT NULL,
  version         text NOT NULL, -- "4.10"
  components      integer NOT NULL REFERENCES Schema,
  sections        integer NOT NULL REFERENCES Schema,
  -- see Distribution Release State schema
  releasestate    integer NOT NULL,
  datereleased    timestamp
);



/*
  DistroArchRelease
  This is a distrorelease for a particular architecture, for example,
  warty-i386.
*/
CREATE TABLE DistroArchRelease (
  id                serial PRIMARY KEY,
  distrorelease     integer NOT NULL REFERENCES DistroRelease,
  processorfamily   integer NOT NULL REFERENCES ProcessorFamily,
  architecturetag   text NOT NULL,
  owner             integer NOT NULL REFERENCES Person
);



/*
  LaunchpadFile
  The Launchpad system keeps copies of all the files that are used to make
  up a distribution, such as deb's and tarballs and .dsc files and .spec
  files and Coderelease files... these are represented by this table.
*/
CREATE TABLE LaunchpadFile (
  id               serial PRIMARY KEY,
  filename         text NOT NULL,
  filesize         integer NOT NULL
);



/*
  LaunchpadFileHash
  A hash (cryptographic digest) on the file. We can support multiple
  different hashes with different algorithms. Initially we'll just 
  use SHA1, but if that gets broken we can trivially switch to another
  algorithm.

  The hash is not required to be UNIQUE but Oscar should flag duplicates
  for inspection by hand. Note that the combination of filesize and hash
  should be unique or there is something very weird going on. Or we just hit
  the crypto lottery and found a collision.
*/
CREATE TABLE LaunchpadFileHash (
  launchpadfile   integer NOT NULL REFERENCES LaunchpadFile,
  -- see Hash Algorithms schema
  hashalg         integer NOT NULL,
  hash            bytea NOT NULL
);



/*
  UpstreamReleaseFile
  A file from an Upstream Coderelease. Usually this would be a tarball.
*/
CREATE TABLE UpstreamReleaseFile (
  upstreamrelease integer NOT NULL REFERENCES UpstreamRelease,
  launchpadfile   integer NOT NULL REFERENCES LaunchpadFile,
  -- see Upstream File Type schema
  filetype        integer NOT NULL,
  filename        text NOT NULL
);



/*
  Sourcepackage
  A distribution source package. In RedHat or Debian this is the name
  of the source package, in Gentoo it's the Ebuild name.
*/
CREATE TABLE Sourcepackage (
  id               serial PRIMARY KEY,
  maintainer       integer NOT NULL REFERENCES Person,
  name             text NOT NULL,
  title            text NOT NULL,
  description      text NOT NULL,
  manifest         integer REFERENCES Manifest
);



/*
  SourcepackageRelationship
  The relationship between two source packages. For example, if a source
  package in Ubuntu is derived from a source package in Debian, we would
  reflect that here.
*/
CREATE TABLE SourcepackageRelationship (
  subject      integer NOT NULL REFERENCES Sourcepackage,
  -- see Source Package Relationship schema
  label        integer NOT NULL,
  object       integer NOT NULL REFERENCES Sourcepackage,
  CHECK ( subject <> object ),
  PRIMARY KEY ( subject, object )
);



/*
  SourcepackageLabel
  A tag or label on a source package.
*/
CREATE TABLE SourcepackageLabel (
  sourcepackage     integer NOT NULL REFERENCES Sourcepackage,
  label             integer NOT NULL REFERENCES Label
);




/*
  Packaging
  This is really the relationship between a Product and a
  Sourcepackage. For example, it allows us to say that
  the apache2 source package is a packaging of the
  httpd Product from the Apache Group.
*/
CREATE TABLE Packaging (
  sourcepackage   integer NOT NULL REFERENCES Sourcepackage,
  -- see the Packaging schema
  packaging       integer NOT NULL,
  product         integer NOT NULL REFERENCES Product
);




/*
  SourcepackageRelease
  A SourcepackageRelease is a specific release of a Sourcepackage, which is
  associated with one or more distribution releases. So apache2__2.0.48-3 can
  be in both ubuntu/warty and debian/sarge.
*/
CREATE TABLE SourcepackageRelease (
  id                     serial PRIMARY KEY,
  sourcepackage          integer NOT NULL REFERENCES Sourcepackage,
  -- see Source Package Format schema
  srcpackageformat       integer NOT NULL,
  creator                integer NOT NULL REFERENCES Person,
  -- "2.0.48-3"
  version                text NOT NULL,
  dateuploaded           timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  -- see Source Package Urgency schema
  urgency                integer NOT NULL,
  dscsigningkey          integer REFERENCES GPGKey,
  component              integer REFERENCES Label,
  changelog              text,
  changes                text,
  builddepends           text,
  builddependsindep      text,
  architecturehintlist   text,
  dsc                    text
);



/*
  SourcepackageReleaseFile
  A file associated with a sourcepackagerelease. For example, could be
  a .dsc file, or an orig.tar.gz, or a diff.gz...
*/
CREATE TABLE SourcepackageReleaseFile (
  sourcepackagerelease  integer NOT NULL REFERENCES SourcepackageRelease,
  launchpadfile         integer NOT NULL REFERENCES LaunchpadFile,
  -- see Source Package File Types schema
  filetype              integer NOT NULL,
  filename              text NOT NULL
);



/*
  SourcepackageUpload
  This table indicates which sourcepackagereleases are present in a
  given distrorelease. It also indicates their status in that release
  (for example, whether or not that sourcepackagerelease has been
  withdrawn, or is currently published, in that archive).
*/
CREATE TABLE SourcepackageUpload (
  distrorelease          integer NOT NULL REFERENCES DistroRelease,
  sourcepackagerelease   integer NOT NULL REFERENCES SourcepackageRelease,
  -- see Source Upload Status schema
  uploadstatus           integer NOT NULL,
  PRIMARY KEY ( distrorelease, sourcepackagerelease )
);



/*
  Binarypackage
  This is a binary package... not an actual built package (that
  is a BinarypackageBuild) but the concept of that binary package.
  It stores the name of the binary package, together with other
  details. Note that different distributions might well have
  different binary packages with the same name. In fact, a single
  distribution might have binary packages with the same name at
  different times, that have entirely different source packages
  and hence maintainers.
*/
CREATE TABLE Binarypackage (
  id               serial PRIMARY KEY,
  name             text NOT NULL,
  title            text NOT NULL,
  description      text NOT NULL
);




/*
  BinarypackageBuild
  This is an actual package, built on a specific architecture,
  ready for installation.
*/
CREATE TABLE BinarypackageBuild (
  id                     serial PRIMARY KEY,
  sourcepackagerelease   integer NOT NULL REFERENCES SourcepackageRelease,
  binarypackage          integer NOT NULL REFERENCES Binarypackage,
  processor              integer NOT NULL REFERENCES Processor,
  -- see Binary Package Formats schema
  binpackageformat       integer NOT NULL,
  version                text NOT NULL,
  datebuilt              timestamp NOT NULL,
  gpgsigningkey          integer REFERENCES GPGKey,
  component              integer REFERENCES Label,
  section                integer REFERENCES Label,
  -- see Binary Package Priority schema
  priority               integer,
  shlibdeps              text,
  depends                text,
  recommends             text,
  suggests               text,
  conflicts              text,
  replaces               text,
  provides               text,
  essential              boolean,
  installedsize          integer
);



/*
  BinarypackageBuildFile
  This is a file associated with a built binary package. Could
  be a .deb or an rpm, or something similar from a gentoo box.
*/
CREATE TABLE BinarypackageBuildFile (
  binarypackagebuild     integer NOT NULL REFERENCES BinarypackageBuild,
  launchpadfile          integer NOT NULL REFERENCES LaunchpadFile,
  -- see Binary Package File Type schema
  filetype               integer NOT NULL,
  filename               text NOT NULL
);



/*
  BinarypackageUpload
  This table records the status of a binarypackagebuild (deb) in a
  distrorelease (woody)
*/
CREATE TABLE BinarypackageUpload (
  binarypackagebuild     integer NOT NULL REFERENCES BinarypackageBuild,
  distrorelease          integer NOT NULL REFERENCES DistroRelease,
  -- see Package Upload Status schema
  uploadstatus           integer NOT NULL,
  component              integer NOT NULL REFERENCES Label,
  section                integer NOT NULL REFERENCES Label,
  -- see Binary Package Priority schema
  priority               integer NOT NULL
);




/*
  LIBRARIAN. TRACKING UPSTREAM AND SOURCE PACKAGE RELEASES.
  This section is devoted to data that tracks upstream and distribution
  SOURCE PACKAGE releases. So, for example, Apache 2.0.48 is an
  UpstreamRelease. Apache 2.0.48-3 is a Debian SourcepackageRelease.
  We have data tables for both of those, and the Coderelease table is
  the data that is common to any kind of Coderelease. This subsystem also
  keeps track of the actual files associated with Codereleases, such as
  tarballs and deb's and .dsc files and changelog files...
*/



/*
  Coderelease
  A release of software. Could be an Upstream release or
  a SourcepackageRelease.
*/
CREATE TABLE Coderelease (
  id                   serial PRIMARY KEY,
  upstreamrelease      integer REFERENCES UpstreamRelease,
  sourcepackagerelease integer REFERENCES SourcepackageRelease,
  manifest             integer REFERENCES Manifest,
  CHECK ( NOT ( upstreamrelease IS NULL AND sourcepackagerelease IS NULL ) ),
  CHECK ( NOT ( upstreamrelease IS NOT NULL AND sourcepackagerelease IS NOT NULL ) )
); -- EITHER upstreamrelease OR sourcepackagerelease must not be NULL




/*
  CodereleaseRelationship
  Maps the relationships between releases (upstream and
  sourcepackage).
*/
CREATE TABLE CodereleaseRelationship (
  subject       integer NOT NULL REFERENCES Coderelease,
  -- see Coderelease Relationships schema
  label         integer NOT NULL,
  object        integer NOT NULL REFERENCES Coderelease,
  CHECK ( subject <> object ),
  PRIMARY KEY ( subject, object )
);





/*
  OSFile
  This is a file in one of the OS's managed in Launchpad.
*/
CREATE TABLE OSFile (
  id        serial PRIMARY KEY,
  path      text NOT NULL UNIQUE
);



/*
  OSFileInPackage
  This table tells us all the files that are in a given binary package
  build. It also includes information about the files, such as their
  unix permissions, and whether or not they are a conf file.
*/
CREATE TABLE OSFileInPackage (
  osfile               integer NOT NULL REFERENCES OSFile,
  binarypackagebuild   integer NOT NULL REFERENCES BinarypackageBuild,
  unixperms            integer NOT NULL,
  conffile             boolean NOT NULL,
  createdoninstall     boolean NOT NULL
);






/*
  ROSETTA. THE TRANSLATION SUPER-PORTAL
  This is the Launchpad subsystem that coordinates and manages
  the translation of open source software and documentation.
*/




/*
  TranslationFilter
  A set of "sunglasses" through which we see translations. We only want
  to see translations that are compatible with this filter in terms
  of licence, review and contribution criteria. This will not be
  implemented in Rosetta v1.0
*/
CREATE TABLE TranslationFilter (
  id                serial PRIMARY KEY,
  owner             integer NOT NULL REFERENCES Person,
  name              text NOT NULL UNIQUE,
  title             text NOT NULL,
  description       text NOT NULL
);




/*
 The TranslationEffort table. Stores information about each active
 translation effort. Note, a translationeffort is an aggregation of
 resources. For example, the Gnome Translation Project, which aims to
 translate the PO files for many gnome applications. This is a point
 for the translation team to rally around.
*/
CREATE TABLE TranslationEffort (
  id                    serial PRIMARY KEY,
  owner                 integer NOT NULL REFERENCES Person,
  project               integer NOT NULL REFERENCES Project,
  name                  text NOT NULL UNIQUE,
  title                 text NOT NULL,
  description           text NOT NULL,
  translationfilter     integer REFERENCES TranslationFilter
);





/*
  POTInheritance
  A handle on an inheritance sequence for POT files.
*/
CREATE TABLE POTInheritance (
  id                    serial PRIMARY KEY,
  title                 text,
  description           text
);



/*
  License
  A license. We need quite a bit more in the long term
  to track licence compatibility etc.
*/
CREATE TABLE License (
  id                    serial PRIMARY KEY,
  legalese              text NOT NULL
);



/*
  POTFile
  A PO Template File, which is the first thing that Rosetta will set
  about translating.
*/
CREATE TABLE POTFile (
  id                    serial PRIMARY KEY,
  project               integer NOT NULL REFERENCES Project,
  branch                integer REFERENCES Branch,
  changeset             integer REFERENCES Changeset,
  name                  text NOT NULL UNIQUE,
  title                 text NOT NULL,
  description           text NOT NULL,
  copyright             text NOT NULL,
  license               integer NOT NULL REFERENCES License,
  datecreated           timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  path                  text NOT NULL,
  iscurrent             boolean NOT NULL,
  defaultinheritance    integer REFERENCES POTInheritance,
  defaultfilter         integer REFERENCES TranslationFilter,
  owner                 integer REFERENCES Person,
  -- EITHER branch OR changeset:
  CHECK ( NOT ( branch IS NULL AND changeset IS NULL ) ),
  CHECK ( NOT ( branch IS NOT NULL AND changeset IS NOT NULL ) )
);



/*
  POMsgID
  A PO or POT File MessageID
*/
CREATE TABLE POMsgID (
  id                   serial PRIMARY KEY,
  msgid                text UNIQUE
);



/*
  POTranslation
  A PO translation. This is just a piece of text, where the
  "translation" might in fact be the original language.
*/
CREATE TABLE POTranslation (
  id                    serial PRIMARY KEY,
  translation           text
);



/*
  Language
  A table of languages, for Rosetta.
*/
CREATE TABLE Language (
  id                    serial PRIMARY KEY,
  code                  text NOT NULL UNIQUE,
  englishname           text,
  nativename            text
);




/*
  Country
  A list of countries.
*/
CREATE TABLE Country (
  id                  serial PRIMARY KEY,
  iso3166code2        char(2) NOT NULL,
  iso3166code3        char(3) NOT NULL,
  name                text NOT NULL,
  title               text NOT NULL,
  description         text NOT NULL
);



/*
  SpokenIn
  A table linking countries the languages spoken in them.
*/
CREATE TABLE SpokenIn (
  language           integer NOT NULL REFERENCES Language,
  country            integer NOT NULL REFERENCES Country,
  PRIMARY KEY ( language, country )
);



/*
  POFile
  A PO File. This is a language-specific set of translations.
*/
CREATE TABLE POFile (
  id                   serial PRIMARY KEY,
  potfile              integer NOT NULL REFERENCES POTFile,
  language             integer NOT NULL REFERENCES Language,
  title                text,
  description          text,
  topcomment           text,  -- the comment at the top of the file
  header               text,  -- the contents of the NULL msgstr
  lasttranslator       integer REFERENCES Person,
  license              integer REFERENCES License,
  completeness         integer  -- between 0 and 100
);



/*
  POTMsgIDSighting
  Table that documents the sighting of a particular msgid in a pot file.
*/
CREATE TABLE POTMsgIDSighting (
  potfile             integer NOT NULL REFERENCES POTFile,
  pomsgid             integer NOT NULL REFERENCES POMsgID,
  firstseen           timestamp NOT NULL,
  lastseen            timestamp NOT NULL,
  iscurrent           boolean NOT NULL,
  commenttext         text,
  singular            integer REFERENCES POMsgID, -- if this is not NULL then it's part of a tuple
  PRIMARY KEY ( potfile, pomsgid )
);



/*
  POTranslationSighting
  A sighting of a translation in a PO file IN REVISION CONTROL. This
  is contrasted with a RosettaPOTranslationSighting, which is a
  translation given to us for a potfile/language.
*/
CREATE TABLE POTranslationSighting (
  id                    serial PRIMARY KEY,
  pofile                integer NOT NULL REFERENCES POFile,
  pomsgid               integer NOT NULL REFERENCES POMsgID,
  potranslation         integer NOT NULL REFERENCES POTranslation,
  license               integer NOT NULL REFERENCES License,
  fuzzy                 boolean NOT NULL,
  rosettaprovided       boolean NOT NULL,
  firstseen             timestamp NOT NULL,
  lastseen              timestamp NOT NULL,
  iscurrent             boolean NOT NULL,
  commenttext           text,
  pluralform            integer,
  CHECK ( pluralform >= 0 )
);



/*
  RosettaPOTranslationSighting
  A record of a translation given to Rosetta through the web, or
  web service, or otherwise.
*/
CREATE TABLE RosettaPOTranslationSighting (
  id                   serial PRIMARY KEY,
  person               integer NOT NULL REFERENCES Person,
  potfile              integer NOT NULL REFERENCES POTFile,
  pomsgid              integer NOT NULL REFERENCES POMsgID,
  language             integer NOT NULL REFERENCES Language,
  potranslation        integer NOT NULL REFERENCES POTranslation,
  license              integer NOT NULL REFERENCES License,
  dateprovided         timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  datetouched          timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  pluralform           integer,
  CHECK ( pluralform >= 0 )
);



/*
  POComment
  A table of comments provided by translators and the translation
  system (these are extracted from PO files as well as provided to
  us through the web and web services API).
*/
CREATE TABLE POComment (
  id                  serial PRIMARY KEY,
  potfile             integer NOT NULL REFERENCES POTFile,
  pomsgid             integer REFERENCES POMsgID,
  language            integer REFERENCES Language,
  potranslation       integer REFERENCES POTranslation,
  commenttext         text NOT NULL,
  datecreated         timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  person              integer REFERENCES Person
);




/*
  TranslationeffortPOTFileRelationship
  A translation project incorporates a POTfile that is under translation.
  The inheritance pointer allows this project to specify a custom
  translation inheritance sequence.
*/
CREATE TABLE TranslationeffortPOTFileRelationship (
  translationeffort  integer NOT NULL REFERENCES TranslationEffort ON DELETE CASCADE,
  potfile            integer NOT NULL REFERENCES POTFile,
  potinheritance     integer REFERENCES POTInheritance,
  UNIQUE (translationeffort , potfile)
);




/*
  POTSubscription
  Records the people who have subscribed to a POT File. They can
  subscribe to the POT file and get all the PO files, or just the PO
  files for a specific language.
*/
CREATE TABLE POTSubscription (
  id                   serial PRIMARY KEY,
  person               integer NOT NULL REFERENCES Person,
  potfile              integer NOT NULL REFERENCES POTFile,
  language             integer REFERENCES Language,
  notificationinterval interval NOT NULL,
  lastnotified         timestamp,
  potinheritance       integer REFERENCES POTInheritance,
  translationfilter    integer REFERENCES TranslationFilter
);



/*
  MALONE. THE BUG TRACKING SYSTEM.
  This is the Launchpad subsystem that handles bug 
  tracking for all the distributions we know about.
*/


/*
  Bug
  The core bug entry.
*/
CREATE TABLE Bug (
  id                      serial PRIMARY KEY,
  datecreated             timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  nickname                text UNIQUE,
  title                   text NOT NULL,
  description             text NOT NULL,
  owner                   integer NOT NULL,
  duplicateof             integer REFERENCES Bug,
  communityscore          integer NOT NULL,
  communitytimestamp      timestamp NOT NULL,
  activityscore           integer NOT NULL,
  activitytimestamp       timestamp NOT NULL,
  hits                    integer NOT NULL,
  hitstimestamp           timestamp NOT NULL
);



/*
  BugSubscription
  The relationship between a person and a bug.
*/
CREATE TABLE BugSubscription (
  person         integer NOT NULL REFERENCES Person,
  bug            integer NOT NULL REFERENCES Bug,
  subscription   integer NOT NULL -- watch, cc, ignore
);



/*
  BugInfestation
  This is a bug status scorecard. It's not a global status for the
  bug, this is usually attached to a release, or a sourcepackage in
  a distro. So these tell you the status of a bug SOMEWHERE. The
  pointer to this tells you which bug, and on what thing (the 
  SOMEWHERE) the status is being described.
*/
CREATE TABLE BugInfestation (
  bug              integer NOT NULL REFERENCES Bug,
  coderelease      integer NOT NULL REFERENCES Coderelease,
  explicit         boolean NOT NULL,
  -- see Bug Infestation Status schema
  infestation      integer NOT NULL,
  datecreated      timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  createor         integer NOT NULL REFERENCES Person,
  dateverified     timestamp,
  verifiedby       integer REFERENCES Person,
  lastmodified     timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  lastmodifiedby   integer NOT NULL REFERENCES Person,
  PRIMARY KEY ( bug, coderelease )
);



/*
  SourcepackageBugAssignment
  The status of a bug with regard to a source package. This is different
  to the status on a specific release, because it includes the concept
  of workflow or prognosis ("what we intend to do with this bug") while
  the release bug status is static ("is the bug present or not").
*/
CREATE TABLE SourcepackageBugAssignment (
  bug                integer NOT NULL REFERENCES Bug,
  sourcepackage      integer NOT NULL REFERENCES Sourcepackage,
  -- see Bug Assignment Status schema
  bugstatus          integer NOT NULL,
  -- See Bug Priority schema
  priority           integer NOT NULL,
  /* see BugSeverity schema, in theory this belongs on BugInfestation
     but it would be a UI challenge */
  severity           integer NOT NULL,
  binarypackage      integer REFERENCES Binarypackage,
  PRIMARY KEY ( bug, sourcepackage )
);





/*
  ProductBugAssignment
  The status of a bug with regard to a product. This is different
  to the status on a specific release, because it includes the concept
  of workflow or prognosis ("what we intend to do with this bug") while
  the release bug status is static ("is the bug present or not").
*/
CREATE TABLE ProductBugAssignment (
  bug                integer NOT NULL REFERENCES Bug,
  product            integer NOT NULL REFERENCES Sourcepackage,
  -- see Bug Assignment Status schema
  bugstatus          integer NOT NULL,
  -- see Bug Priority schema
  priority           integer NOT NULL,
  -- see Bug Severity schema
  severity           integer NOT NULL,
  PRIMARY KEY ( bug, product )
);




/*
  BugActivity
  A log of all the things that have happened to a bug, as Dave wants
  to keep track of it.
*/
CREATE TABLE BugActivity (
  bug           integer NOT NULL REFERENCES Bug,
  datechanged   timestamp NOT NULL,
  person        integer NOT NULL,
  whatchanged   text NOT NULL,
  oldvalue      text NOT NULL,
  newvalue      text NOT NULL,
  message       text NOT NULL
);




/*
  BugExternalref
  A table of external references for a bug, that are NOT remote
  bug system references, except where the remote bug system is
  not supported by the BugWatch table.
 XXX can we set the default timestamp to "now"
*/
CREATE TABLE BugExternalref (
  bug         integer NOT NULL REFERENCES Bug,
  -- see the Bug External Reference Types schema
  bugreftype  integer NOT NULL,
  data        text NOT NULL,
  description text NOT NULL,
  datecreated timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  owner       integer NOT NULL REFERENCES Person
);



/*
  BugSystemType
  This is a table of bug tracking system types. We don't have much
  version granularity (Bugzilla 2.15 is treated the same as Bugzilla 2.17
  unless you create them as two separate bug system types). This table is
  used by the BugSystem table to indicate the type of a remote bug system.
*/
CREATE TABLE BugSystemType (
  id              serial PRIMARY KEY,
  name            text NOT NULL UNIQUE,
  title           text NOT NULL,
  description     text NOT NULL,
  homepage        text,
  -- the Launchpad person who knows most about these
  owner           integer NOT NULL REFERENCES Person
);


/*
  BugSystem
  A table of remote bug systems (for example, Debian's DebBugs, and
  Mozilla's Bugzilla, and SourceForge's tracker...). The baseurl is the
  top of the bug system's tree, from which the URL to a given bug
  status can be determined.
*/
CREATE TABLE BugSystem (
  id               serial PRIMARY KEY,
  bugsystemtype    integer NOT NULL REFERENCES BugSystemType,
  name             text NOT NULL,
  title            text NOT NULL,
  description      text NOT NULL,
  baseurl          text NOT NULL,
  owner            integer NOT NULL REFERENCES Person
);



/*
  BugWatch
  This is a table of bugs in remote bug systems (for example, upstream
  bugzilla's) which we want to monitor for status changes.
*/
CREATE TABLE BugWatch (
  id               serial PRIMARY KEY,
  bug              integer NOT NULL REFERENCES Bug,
  bugsystem        integer NOT NULL REFERENCES BugSystem,
  remotebug        text NOT NULL, -- unique identifier of bug in that system
  remotestatus     text NOT NULL, -- textual representation of status
  lastchanged      timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  lastchecked      timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  datecreated      timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  owner            integer NOT NULL REFERENCES Person
);




/*
  ProjectBugsystem
  A link between the Project table and the Bugsystem table. This allows
  us to setup a bug system and then easily create watches once a bug
  has been assigned to an upstream product.
*/
CREATE TABLE ProjectBugsystem (
  project         integer NOT NULL REFERENCES Project,
  bugsystem       integer NOT NULL REFERENCES BugSystem,
  PRIMARY KEY ( project, bugsystem )
);
  


/*
  BugAttachment
  A table of attachments to bugs. These are typically patches, screenshots,
  mockups, or other documents.
*/
CREATE TABLE BugAttachment (
  id              serial PRIMARY KEY,
  bug             integer NOT NULL REFERENCES Bug,
  name            text NOT NULL,
  title           text NOT NULL,
  description     text NOT NULL
);



/*
  BugattachmentContent
  The actual content of a bug attachment. There can be multiple
  uploads over time, each revision gets a changecomment.
*/
CREATE TABLE BugattachmentContent (
  bugattachment  integer NOT NULL REFERENCES BugAttachment,
  daterevised    timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  changecomment  text NOT NULL,
  content        bytea NOT NULL,
  mimetype       text,
  owner          integer REFERENCES Person,
  PRIMARY KEY ( bugattachment, daterevised )
);



/*
  BugLabel
  Allows us to attach arbitrary metadata to a bug.
*/
CREATE TABLE BugLabel (
  bug       integer NOT NULL REFERENCES Bug,
  label     integer NOT NULL REFERENCES Label,
  PRIMARY KEY ( bug, label )
);




/*
  BugRelationship
  The relationship between two bugs, with a label.
*/
CREATE TABLE BugRelationship (
  subject        integer NOT NULL REFERENCES Bug,
  -- see the Bug Relationships schema
  label          integer NOT NULL,
  object         integer NOT NULL REFERENCES Bug
);




/*
  BugMessage
  A table of messages about bugs. Could be from the web
  forum, or from email, we don't care and treat them both
  equally. A message can apply to multiple forums.
*/
CREATE TABLE BugMessage (
  id                   serial PRIMARY KEY,
  bug                  integer NOT NULL REFERENCES Bug,
  datecreated          timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  -- short title or subject of comment / message
  title                text NOT NULL,
  -- the message or full email with headers
  contents             text NOT NULL,
  personmsg            integer REFERENCES Person, -- NULL if we don't know it
  parent               integer REFERENCES BugMessage, -- gives us threading
  distribution         integer REFERENCES Distribution,
  rfc822msgid          text
);




/* SourceSource
   A table of sources of source code from upstream locations.  This might be
   CVS, SVN or Arch repositories, or even a tarball of a CVS repository.
   This table is what defines the import daemon's work, for initial imports,
   sync jobs, and for finding new upstream releases.
*/
CREATE TABLE SourceSource (
  id	                    serial PRIMARY KEY,
  name                      text NOT NULL,
  title                     text NOT NULL,
  description               text NOT NULL,
  product                   integer NOT NULL REFERENCES Product,
  cvsroot                   text,
  cvsmodule                 text,
  cvstarfile                integer REFERENCES LaunchpadFile,
  cvstarfilename            text,
  cvstarfileurl             text,
  cvsbranch                 text,
  svnrepository             text,
  -- The URL of the directory (usually FTP) where they have releases
  releaseroot               text,
  releaseverstyle           integer,
  releasefileglob           text,
  -- The arch branch from which these release tarballs may have been derived
  releaseparentbranch       integer REFERENCES Branch,
  sourcepackage             integer REFERENCES Sourcepackage,
  -- The arch branch this source is imported to
  branch                    integer REFERENCES Branch UNIQUE,
  lastsynced                timestamp, -- NULL means never, i.e. this is an import job
  syncinterval              interval,
  -- see Revision Control Systems schema
  rcstype                   integer NOT NULL,
  hosted                    text,
  upstreamname              text,
  processingapproved        boolean NOT NULL DEFAULT false,
  syncingapproved           boolean NOT NULL DEFAULT false,
  /* These columns are used to create new archives/branches in the DB based on
     values imported from .info files */
  newarchive                text,
  newbranchcategory         text,
  newbranchbranch           text,
  newbranchversion          text
);


