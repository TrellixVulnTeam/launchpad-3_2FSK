= Branch Details =

Imports used later in the document:

    >>> import pytz
    >>> from datetime import datetime
    >>> from zope.component import getUtility
    >>> from canonical.database.sqlbase import flush_database_updates
    >>> from canonical.launchpad.interfaces import (
    ...     BranchType, BranchFormat, RepositoryFormat, IPersonSet)
    >>> from lp.code.interfaces.branchlookup import IBranchLookup

Modifying/creating test data for this test case.

    >>> login('foo.bar@canonical.com')
    >>> branch = getUtility(IBranchLookup).getByUniqueName(
    ...     '~name12/+junk/junk.dev')
    >>> factory.makeRevisionsForBranch(branch, count=5)
    >>> sample_person = getUtility(IPersonSet).getByName('name12')
    >>> anonymous_product = factory.makeProduct(
    ...     name='anonymous-product', owner=sample_person)
    >>> anonymous_branch = factory.makeProductBranch(
    ...     name='anonymous-branch', product=anonymous_product,
    ...     owner=sample_person)
    >>> anonymous_product.setAliases(['alias-for-product'])
    >>> logout()


== Reaching to branches ==

On the Code site, registered branches are reached by
/<owner>/<product>/<branch-name>, where <product> can be either a product's
name or any of its aliases.  In case an alias is used, the user is redirected
to the branch's canonical URL -- the one which uses the product name.

    >>> anon_browser.open('http://code.launchpad.dev/~name12/anonymous-product'
    ...                   '/anonymous-branch')
    >>> anon_browser.url
    'http://code.launchpad.dev/~name12/anonymous-product/anonymous-branch'
    >>> anon_browser.open('http://code.launchpad.dev/~name12/alias-for-product'
    ...                   '/anonymous-branch')
    >>> anon_browser.url
    'http://code.launchpad.dev/~name12/anonymous-product/anonymous-branch'


== Recent Revisions ==

We display the recent revisions of a branch if it has been scanned.

    >>> user_browser.open('http://code.launchpad.dev/~name12/+junk/junk.dev')
    >>> assert find_tag_by_id(user_browser.contents, 'merge-summary') is None
    >>> revisions = find_tag_by_id(user_browser.contents, 'recent-revisions')
    >>> def print_merge_links(browser):
    ...     links = find_tag_by_id(browser.contents, 'merge-links')
    ...     if not links:
    ...         print None
    ...     else:
    ...         print extract_text(links)
    >>> print_merge_links(user_browser)
    None


=== Revision information ===

Underneath that heading we see the ten most-recent revisions of the branch in
reverse-chronological order.  If the revision author has been linked to a
Launchpad person, then a link to the person is shown rather than the
text of the revision author.

    >>> def print_revisions(browser):
    ...     revisions = find_tags_by_class(
    ...         browser.contents, 'revision-details')
    ...     for revision in revisions:
    ...         print extract_text(revision).encode('ascii')

    >>> print_revisions(user_browser)
    11. By author1 on 2007-01-05
    10. By author1 on 2007-01-04
    9. By author1 on 2007-01-03
    8. By author1 on 2007-01-02
    7. By author1 on 2007-01-01
    6. By foo &lt;foo@localhost&gt; on 2005-10-31
    5. By foo &lt;foo@localhost&gt; on 2005-10-31
    4. By bar@localhost on 2005-10-31
    3. By Sample Person on 2005-10-31
    2. By Sample Person on 2005-10-31

Each of the revision numbers are now anchors to codebrowse (for public
branches).

    >>> revision = find_tags_by_class(
    ...         user_browser.contents, 'revision-details', only_first=True)
    >>> print revision.a
    <a href="http://bazaar.launchpad.dev/~name12/+junk/junk.dev/revision/11">11</a>


=== Commit messages ===

The commit message is displayed in paragraphs underneath the revision id and
author.

    >>> browser.open('http://code.launchpad.dev/~name12/+branch/+junk/junk.dev')
    >>> commit_messages = find_tags_by_class(
    ...         browser.contents, 'revision-comment')
    >>> print commit_messages[0].p.renderContents()
    log-body11


When a commit message refers to a bug using the form "bug <bugnumber>", a link
to that bug is created.

    >>> print commit_messages[8].p.renderContents()
    fix <a ...>bug 1</a>


This link can be followed to the bug's details page.

    >>> browser.getLink('bug 1').click()
    >>> print browser.title
    Bug #1 in Mozilla Firefox...


== Unscanned branches ==

Some branches won't have any revisions in the database. Sometimes, this is
simply because the branch is empty. However, much of the time, the lack of
revisions will be because of an error or delay in the scanning process.

Before we can display the revisions, a branch needs to be mirrored (or
'published') and scanned. When a branch is not yet mirrored, we'll see a
helpful message.

    >>> browser.open('http://code.launchpad.dev/~name12/firefox/main')
    >>> print extract_text(find_tag_by_id(browser.contents, 'recent-revisions'))
    Recent revisions
    This branch has not been mirrored yet.
    >>> print_navigation_links(browser.contents)
    Details
    Merge Proposals: http://code.launchpad.dev/~name12/firefox/main/+merges

We don't want to use the word 'mirrored' for hosted or imported branches,
because those branches are only mirrored internally.

    >>> browser.open('http://code.launchpad.dev/~name12/gnome-terminal/pushed')
    >>> print extract_text(find_tag_by_id(browser.contents, 'recent-revisions'))
    Recent revisions
    This branch has not been pushed to yet.
    >>> print_navigation_links(browser.contents)
    Details
    Merge Proposals: http://code.launchpad.dev/~name12/gnome-terminal/pushed/+merges

    >>> browser.open('http://code.launchpad.dev/~vcs-imports/evolution/main')
    >>> print extract_text(find_tag_by_id(browser.contents, 'recent-revisions'))
    Recent revisions
    This branch has not been imported yet.
    >>> print_navigation_links(browser.contents)
    Details
    Merge Proposals: http://code.launchpad.dev/~vcs-imports/evolution/main/+merges

If a branch has been mirrored, but not scanned, we display a different message.
This is helpful particularly for hosted and imported branches, which are
available for download as soon as they are published.

    >>> browser.open('http://code.launchpad.dev/~name12/gnome-terminal/mirrored')
    >>> print extract_text(find_tag_by_id(browser.contents, 'recent-revisions'))
    Recent revisions
    This branch has not been scanned yet.
    >>> print_navigation_links(browser.contents)
    Details
    Merge Proposals: http://code.launchpad.dev/~name12/gnome-terminal/mirrored/+merges
    Source Code: http://bazaar.launchpad.dev/~name12/gnome-terminal/mirrored/files

If a branch has been mirrored and scanned, and has no revisions, then it is
empty.

    >>> browser.open('http://code.launchpad.dev/~name12/gnome-terminal/scanned')
    >>> print extract_text(find_tag_by_id(browser.contents, 'recent-revisions'))
    Recent revisions
    This branch is empty.
    >>> print_navigation_links(browser.contents)
    Details
    Merge Proposals: http://code.launchpad.dev/~name12/gnome-terminal/scanned/+merges
    Source Code: http://bazaar.launchpad.dev/~name12/gnome-terminal/scanned/files

Since this branch's product has more than one branch, the links to propose
it for merging are shown.

    >>> print_merge_links(browser)
    &laquo; No branches proposed for merging into this one.
    &raquo; This branch is not proposed for merging into any others.


== Branch Details ==

The branch page includes a table of details about the branch. The exact details
vary from branch type to branch type.

For hosted branches, the table has a link to the branch's project and the URL
for the branch's canonical location.

    >>> def get_branch_details_table():
    ...     table = find_tag_by_id(browser.contents, 'branch-details-table')
    ...     return table.tbody

    >>> browser.open(
    ...     'http://code.launchpad.dev/~name12/gnome-terminal/scanned')
    >>> print extract_text(get_branch_details_table())
    Project: GNOME Terminal (Unspecified)
    Status: Development
    Upload URL: Only Sample Person can upload to this branch.
      If you are Sample Person please log in for upload directions.

For mirrored branches, the table has a link to the branch's project, the
location of the original branch, the mirror on Launchpad, information about
when the branch was last mirrored and when it will be mirrored again.

First we create an example branch, then call the APIs to indicate that it has
been mirrored:

    >>> login('no-priv@canonical.com')
    >>> no_priv = getUtility(IPersonSet).getByName('no-priv')
    >>> branch = factory.makePersonalBranch(
    ...     branch_type=BranchType.MIRRORED, name='mirrored',
    ...     owner=no_priv, url='http://example.com/mirrored',
    ...     title='Disabled branch')
    >>> branch.last_mirrored = datetime(
    ...     year=2007, month=10, day=1, tzinfo=pytz.timezone('UTC'))
    >>> branch.next_mirror_time = None
    >>> flush_database_updates()
    >>> logout()

    >>> browser.open(
    ...     'http://code.launchpad.dev/~no-priv/+junk/mirrored')
    >>> print extract_text(get_branch_details_table())
    Status: Development
    Location: http://example.com/mirrored
    Last mirrored: 2007-10-01
    Next mirror: Disabled

Branches that have never been mirrored don't have a 'Last mirrored' field.

    >>> browser.open(
    ...     'http://code.launchpad.dev/~name12/gnome-terminal/main')
    >>> print extract_text(get_branch_details_table())
    Project: GNOME Terminal (Unspecified)
    Status: Development
    Location: http://example.com/gnome-terminal/main
    Last mirrored: Not mirrored yet
    Next mirror: Disabled

If next_mirror_time is NULL, then mirroring of the branch is disabled.

(First we make a branch which has a NULL next_mirror_time)

    >>> login('no-priv@canonical.com')
    >>> no_priv = getUtility(IPersonSet).getByName('no-priv')
    >>> branch = factory.makePersonalBranch(
    ...     branch_type=BranchType.MIRRORED, name='mirror-disabled',
    ...     owner=no_priv, url='http://example.com/disabled',
    ...     title='Disabled branch')
    >>> branch.next_mirror_time = None
    >>> flush_database_updates()
    >>> logout()


    >>> browser.open(
    ...     'http://code.launchpad.dev/~no-priv/+junk/mirror-disabled')
    >>> print extract_text(get_branch_details_table())
    Status: Development
    Location: http://example.com/disabled
    Last mirrored: Not mirrored yet
    Next mirror: Disabled


== Codebrowse link ==

The codebrowse link only appears for branches that have revisions.

    >>> browser.open(
    ...     'http://code.launchpad.dev/~name12/gnome-terminal/scanned')
    >>> print extract_text(find_tag_by_id(
    ...     browser.contents, "recent-revisions"))
    Recent revisions
    This branch is empty.
    >>> browser.getLink('Browse code')
    Traceback (most recent call last):
    ...
    LinkNotFoundError

Sample Person's junk branch has some revisions, so the 'Browse code'
link is shown.

    >>> browser.open(
    ...     'http://code.launchpad.dev/~name12/+junk/junk.dev')
    >>> print extract_text(find_tag_by_id(
    ...     browser.contents, "recent-revisions").dl)
    11. By author1 on ...
    6. By foo... fix bug in bar...
    >>> print browser.getLink('Source Code').url
    http://bazaar.launchpad.dev/~name12/+junk/junk.dev/files

In addition, there is a "All revisions" link that links to the
changelog view in codebrowse.

    >>> print browser.getLink('All revisions').url
    http://bazaar.launchpad.dev/~name12/+junk/junk.dev/changes

If the branch is private, the browse code link is not shown.
In order to see the private branch, we need to log in as a user that
is able to see the branch.

    >>> browser = setupBrowser(auth="Basic test@canonical.com:test")
    >>> browser.open(
    ...     'http://code.launchpad.dev/~landscape-developers/landscape/trunk')
    >>> browser.getLink('Browse code')
    Traceback (most recent call last):
    ...
    LinkNotFoundError


== Download URL ==

In the details table there is a link to the branch download URL.

For public branches this shows links to the codehosting using http, whereas
private branches show bzr+ssh as they are not available over anonymous
http, and anyone who can see the branch is able to access it using bzr+ssh.

The download URL is only shown for branches that actually have revisions.
So we need to fake that here.

    >>> login('foo.bar@canonical.com')
    >>> branch = getUtility(IBranchLookup).getByUniqueName(
    ...     '~landscape-developers/landscape/trunk')
    >>> branch.revision_count = 42
    >>> branch = getUtility(IBranchLookup).getByUniqueName(
    ...     '~name12/gnome-terminal/scanned')
    >>> branch.revision_count = 13
    >>> flush_database_updates()
    >>> logout()

    >>> browser.open(
    ...     'http://code.launchpad.dev/~landscape-developers/landscape/trunk')
    >>> print extract_text(find_tag_by_id(
    ...     browser.contents, 'branch-details-table'))
    Project: The Landscape Project (Unspecified)
    Status: Development
    Get this branch:
      bzr branch lp://dev/~landscape-developers/landscape/trunk
    ...

Public branches use the lp spec bzr lookup name.

    >>> browser.open(
    ...     'http://code.launchpad.dev/~name12/gnome-terminal/scanned')
    >>> print extract_text(find_tag_by_id(
    ...     browser.contents, 'branch-details-table'))
    Project: GNOME Terminal (Unspecified)
    Status: Development
    Get this branch: bzr branch lp://dev/~name12/gnome-terminal/scanned
    ...


== Branch formats ==

    >>> login('no-priv@canonical.com')
    >>> branch = factory.makeAnyBranch(
    ...     branch_format=BranchFormat.BZR_BRANCH_5,
    ...     repository_format=RepositoryFormat.BZR_KNITPACK_1)
    >>> url = canonical_url(branch)
    >>> logout()
    >>> browser.open(url)

The data that we specified is shown on the web page.

    >>> print extract_text(find_tag_by_id(
    ...     browser.contents, 'branch-format'))
    Branch format: Branch format 5
    >>> print extract_text(find_tag_by_id(
    ...     browser.contents, 'repository-format'))
    Repository format: Packs containing knits without subtree support


=== Stacking ===

Say we have one branch stacked on another:

    >>> login('no-priv@canonical.com')
    >>> stacked_on_branch = factory.makeAnyBranch()
    >>> stacked_branch = factory.makeAnyBranch(
    ...     stacked_on=stacked_on_branch)
    >>> url = canonical_url(stacked_branch)
    >>> stacked_on_name = stacked_on_branch.bzr_identity
    >>> stacked_on_url = canonical_url(stacked_on_branch)
    >>> logout()

And we browse to the stacked branch:

    >>> browser.open(url)

The stacked-on information appears in the branch summary:

    >>> print extract_text(find_tag_by_id(browser.contents, 'stacked-on'))
    Stacked on: ...

    >>> browser.getLink(stacked_on_name).url == stacked_on_url
    True


=== Navigation Context ===

The tabs shown for a branch depend on whether or not the branch is a junk
branch or not.  If the branch is associated with a product, then the product
is the primary context, and used for the tabs and the breadcrumbs.  If the
branch is not associated with a product then the owner of the branch is used
as the primary context for the branch and used for the breadcrumbs and tabs.

    >>> browser.open(
    ...     'http://code.launchpad.dev/~name12/gnome-terminal/scanned')
    >>> print_location(browser.contents)
    Hierarchy: Launchpad > GNOME Terminal
    Tabs:
    * Overview - http://launchpad.dev/gnome-terminal
    * Code (selected) - http://code.launchpad.dev/gnome-terminal
    * Bugs - http://bugs.launchpad.dev/gnome-terminal
    * Blueprints - http://blueprints.launchpad.dev/gnome-terminal
    * Translations - http://translations.launchpad.dev/gnome-terminal
    * Answers - http://answers.launchpad.dev/gnome-terminal
    Main heading: lp://dev/~name12/gnome-terminal/scanned

    >>> browser.open('http://code.launchpad.dev/~name12/+junk/junk.dev')
    >>> print_location(browser.contents)
    Hierarchy: Launchpad > Sample Person
    Tabs:
    * Overview - http://launchpad.dev/~name12
    * Code (selected) - http://code.launchpad.dev/~name12
    * Bugs - http://bugs.launchpad.dev/~name12
    * Blueprints - http://blueprints.launchpad.dev/~name12
    * Translations - http://translations.launchpad.dev/~name12
    * Answers - http://answers.launchpad.dev/~name12
    Main heading: lp://dev/~name12/+junk/junk.dev
