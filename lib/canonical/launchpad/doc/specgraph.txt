= Specification graphs =

A SpecGraph object manages a set of SpecNodes and the edges that connect the
nodes.  It knows how to output itself in `dot` format, for use by Graphviz.

A SpecGraph has a root node, and then various other nodes.  You can make
connections between nodes using its 'link' method.  Each node is identified by
its name, which is the database name of the specification that the node
represents.

Use the SpecGraph as a factory for creating new nodes.  This allows the
SpecGraph to keep track of the nodes that have been added.


    >>> from canonical.launchpad.browser.specification import SpecGraph
    >>> g = SpecGraph()
    >>> g.url_pattern_for_testing = 'http://whatever/%s'

    >>> class Spec(object):
    ...
    ...     def __init__(self, name,
    ...             is_complete=False, title=None, assignee=None):
    ...         self.name = name
    ...         self.title = title or name
    ...         self.is_complete = is_complete
    ...         self.assignee = assignee
    ...         # Use lists here to ensure that the code converts them
    ...         # to sets explicitly, like it has to do for SelectResults.
    ...         self.dependencies = []
    ...         # This is a hack for testing: we can set up dependencies,
    ...         # and simply use their "mirror image" for blocked specs.
    ...         self.blocked_specs = self.dependencies

    >>> foo = Spec('foo', title='something with " and \n in it')
    >>> root = g.newNode(foo, root=True)

    >>> print root
    <foo>

    >>> print root.getDOTNodeStatement()
    "foo"
        [
        "URL"="http://whatever/foo",
        "color"="red",
        "comment"="something with \" and \n in it",
        "label"="foo"
        ]

    >>> print g.root_node
    <foo>
    >>> print root.name, root.label, root.URL, root.color
    foo foo http://whatever/foo red
    >>> g.getNode('no such name') is None
    True
    >>> g.getNode('foo') is root
    True
    >>> print g.listNodes()
    Root is <foo>
    <foo>:

    >>> foo1 = Spec('foo1')
    >>> foo.dependencies.append(foo1)
    >>> foo2 = Spec('foo2')
    >>> foo.dependencies.append(foo2)
    >>> foo11 = Spec('foo11')
    >>> foo1.dependencies.append(foo11)
    >>> foo111 = Spec('foo111')
    >>> foo11.dependencies.append(foo111)

    >>> def make_graph(dependency, blocked):
    ...     g = SpecGraph()
    ...     g.url_pattern_for_testing = 'http://whatever/%s'
    ...     root = g.newNode(foo, root=True)
    ...     if dependency:
    ...         g.addDependencyNodes(foo)
    ...     if blocked:
    ...         g.addBlockedNodes(foo)
    ...     return g

    >>> def print_graph(dependency=True, blocked=False):
    ...     print make_graph(dependency, blocked).listNodes()

    >>> def print_graph_dot(dependency=True, blocked=False):
    ...     print make_graph(dependency, blocked).getDOTGraphStatement()

    >>> print_graph()
    Root is <foo>
    <foo>:
    <foo1>:
        foo
    <foo11>:
        foo1
    <foo111>:
        foo11
    <foo2>:
        foo

   >>> print_graph_dot()
   digraph "deptree" {
   graph
       [
       "bgcolor"="transparent",
       "mode"="hier",
       "sep"="0.5"
       ]
   node
       [
       "fillcolor"="white",
       "fontname"="Sans",
       "fontsize"="11",
       "style"="filled"
       ]
   edge
       [
       "arrowhead"="normal"
       ]
   "foo"
       [
       "URL"="http://whatever/foo",
       "color"="red",
       "comment"="something with \" and \n in it",
       "label"="foo"
       ]
   "foo1"
       [
       "URL"="http://whatever/foo1",
       "color"="black",
       "comment"="foo1",
       "label"="foo1"
       ]
   "foo11"
       [
       "URL"="http://whatever/foo11",
       "color"="black",
       "comment"="foo11",
       "label"="foo11"
       ]
   "foo111"
       [
       "URL"="http://whatever/foo111",
       "color"="black",
       "comment"="foo111",
       "label"="foo111"
       ]
   "foo2"
       [
       "URL"="http://whatever/foo2",
       "color"="black",
       "comment"="foo2",
       "label"="foo2"
       ]
   "foo1" -> "foo"
   "foo11" -> "foo1"
   "foo111" -> "foo11"
   "foo2" -> "foo"
   }


Now, add a circle at the top.

    >>> foo1.dependencies.append(foo)
    >>> print_graph()
    Root is <foo>
    <foo>:
        foo1
    <foo1>:
        foo
    <foo11>:
        foo1
    <foo111>:
        foo11
    <foo2>:
        foo


Now add another circle at the bottom.

    >>> foo111.dependencies.append(foo1)
    >>> print_graph()
    Root is <foo>
    <foo>:
        foo1
    <foo1>:
        foo
        foo111
    <foo11>:
        foo1
    <foo111>:
        foo11
    <foo2>:
        foo

Now make it even more convoluted, for fun.

    >>> foo111.dependencies.append(foo)
    >>> foo2.dependencies.append(foo1)
    >>> foo1.dependencies.append(foo2)
    >>> print_graph()
    Root is <foo>
    <foo>:
        foo1
        foo111
    <foo1>:
        foo
        foo111
        foo2
    <foo11>:
        foo1
    <foo111>:
        foo11
    <foo2>:
        foo
        foo1


And finally, try checking out the blocked specs too.  Because of the hack
earlier, we have a "mirror image" of the dependencies in the blocked speces.

    >>> print_graph(dependency=False, blocked=True)
    Root is <foo>
    <foo>:
        foo1
        foo2
    <foo1>:
        foo
        foo11
        foo2
    <foo11>:
        foo111
    <foo111>:
        foo
        foo1
    <foo2>:
        foo1

