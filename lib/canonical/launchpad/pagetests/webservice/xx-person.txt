= People =

Basic operations on people are described in xx-collections.txt. This
document shows some of the other features of a person.


== Modification ==

It's possible to modify a person by sending to the server a document
asserting what the person should look like. The document may only
describe part of the person's new state (in which case the client
should use the PATCH HTTP method) [TODO leonardr 2008-03-10
api-base-modify-data-entry]: or it may describe the entire new state,
in which case the cluent should use PUT.])


=== What you can do ===

A person's data fields can be modified.

  >>> import simplejson
  >>> def patch_person(person, patch):
  ...     return webservice(r"""
  ... PATCH /people/%s HTTP/1.1
  ... Host: api.launchpad.dev
  ... Content-type: application/json
  ... Authorization: Basic Zm9vLmJhckBjYW5vbmljYWwuY29tOnRlc3Q=
  ...
  ... %s
  ... """ % (person, simplejson.dumps(patch)))


  >>> salgado = webservice(r"""
  ... GET /people/salgado HTTP/1.1
  ... Host: api.launchpad.dev
  ... """).jsonBody()
  >>> salgado['displayname']
  u'Guilherme Salgado'

  >>> print patch_person('salgado', {'displayname' : 'GUILHERME SALGADO'})
  HTTP/1.1 200 Ok
  Content-Length: 0
  ...

  >>> salgado = webservice(r"""
  ... GET /people/salgado HTTP/1.1
  ... Host: api.launchpad.dev
  ... """).jsonBody()
  >>> salgado['displayname']
  u'GUILHERME SALGADO'

The modification might cause the person's address to change:

  >>> print patch_person('salgado', {'name' : 'salgado2'})
  HTTP/1.1 301 Moved Permanently
  ...
  Location: http://api.launchpad.dev/people/salgado2
  <BLANKLINE>

  # Undo the previous change
  >>> print patch_person('salgado2', {'name' : 'salgado'})
  HTTP/1.1 301 Moved Permanently
  ...
  Location: http://api.launchpad.dev/people/salgado
  <BLANKLINE>

# [TODO leonardr 2008-03-10 modify-data-links]: A link between a
# person and a related object can be modified.


=== What you can't do. ===

A person's read-only attributes can't be modified. You can send a
document that includes a value for a read-only attribute, but it has
to be the same as the current value.

  >>> print patch_person('salgado', {'datecreated' : 'dummy-date'})
  HTTP/1.1 400 Bad Request
  Content-Length: 57
  Content-Type: text/plain;charset=utf-8
  <BLANKLINE>
  You tried to modify the read-only attribute 'datecreated'

A client can't change the link to a person's associated collection.

  >>> print patch_person('salgado',
  ...                    {'team_memberships_collection_link' : 'dummy'})
  HTTP/1.1 400 Bad Request
  ...
  You tried to modify the collection link 'team_memberships_collection_link'

A client also can't refer to a link to an associated object or
collection as though it were the actual object:

  >>> print patch_person('salgado', {'team_memberships' : 'dummy'})
  HTTP/1.1 400 Bad Request
  ...
  You tried to modify the nonexistent attribute 'team_memberships'

  >>> print patch_person('landscape-developers', {'owner' : 'salgado'})
  HTTP/1.1 400 Bad Request
  ...
  You tried to modify the nonexistent attribute 'owner'


== Team memberships ==

A person is linked to their team memberships.

  >>> salgado['team_memberships_collection_link']
  u'http://api.launchpad.dev/people/salgado/team_memberships'

Similarly, a team is linked to the team memberships of its members.

  >>> landscape_developers = webservice(r"""
  ... GET /people/landscape-developers HTTP/1.1
  ... Host: api.launchpad.dev
  ... """).jsonBody()
  >>> landscape_developers['member_memberships_collection_link']
  u'http://api.launchpad.dev/people/landscape-developers/member_memberships'

Team memberships are first-class objects with their own URLs.

  >>> salgado_memberships = webservice(r"""
  ... GET /people/salgado/team_memberships HTTP/1.1
  ... Host: api.launchpad.dev
  ... """).jsonBody()
  >>> [m['self_link'] for m in sorted(salgado_memberships)]
  [u'http://api.launchpad.dev/people/salgado/team_memberships/admins',
   u'http://api.launchpad.dev/people/salgado/team_memberships/landscape-developers']

Team memberships also have data fields.

  >>> salgado_landscape = sorted(salgado_memberships)[1]
  >>> sorted(salgado_landscape)
  [u'date_expires', u'date_joined', u'member_link',
   u'reviewer_comment', u'reviewer_link', u'self_link', u'status',
   u'team_link']

Each team membership links to the person who approved the link.

  >>> salgado_landscape['reviewer_link']
  u'http://api.launchpad.dev/people/name16'

Also to the person whose membership it is.

  >>> salgado_landscape['member_link']
  u'http://api.launchpad.dev/people/salgado'

Also to the team in which the membership is valid.

  >>> salgado_landscape['team_link']
  u'http://api.launchpad.dev/people/landscape-developers'

A TeamMembership relates a person to a team, and the relationship
works both ways. You've already seen how the representation of a
person includes a link to that person's team memberships. But it's
possible to navigate from a team, to the collection of peoples'
memberships in the team.

  >>> landscape_memberships = webservice(r"""
  ... GET /people/landscape-developers/member_memberships HTTP/1.1
  ... Host: api.launchpad.dev
  ... """).jsonBody()

  >>> [m['self_link'] for m in sorted(landscape_memberships)]
  [u'http://api.launchpad.dev/people/name12/team_memberships/landscape-developers',
   u'http://api.launchpad.dev/people/salgado/team_memberships/landscape-developers']

A list of team memberships is distinct from a list of a team's
members. Members are people; memberships are TeamMemberships. You've
seen the memberships for the 'landscape-developers' team above; here
are the members.

  >>> landscape_members = webservice(r"""
  ... GET /people/landscape-developers/members HTTP/1.1
  ... Host: api.launchpad.dev
  ... """).jsonBody()
  >>> [m['self_link'] for m in sorted(landscape_members)]
  [u'http://api.launchpad.dev/people/salgado',
   u'http://api.launchpad.dev/people/name12']
