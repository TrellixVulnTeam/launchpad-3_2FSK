  First of all we'll create a new mirror for the Ubuntu distribution...

  >>> browser.addHeader('Authorization', 'Basic test@canonical.com:test')
  >>> browser.open('http://launchpad.dev/ubuntu/+newmirror')

  ...but every mirror must have at least one of HTTP, FTP or Rsync URL, and
  the form will raise an error message if this is not provided by the user.

  >>> browser.getControl('Link Speed').value = ['1 Mbps']
  >>> browser.getControl('Location (Country)').value =  ['9']
  >>> browser.getControl('Content').value = ['Archive']
  >>> browser.getControl('Continue').click()

  >>> message = 'All mirrors require at least an HTTP or FTP URL'
  >>> message in browser.contents
  True

  If we try to register the mirror using the same HTTP URL of a existing one,
  we should also get a nice error message. (Even if we forget to add the
  trailing slash in the new URL by mistake)

  >>> http_url = 'http://localhost:11375/invalid-mirror'
  >>> browser.getControl('HTTP URL').value = http_url
  >>> browser.getControl('Continue').click()

  >>> from BeautifulSoup import BeautifulSoup
  >>> soup = BeautifulSoup(browser.contents)
  >>> for message in soup.findAll(attrs={'class': 'message'}):
  ...     print message.renderContents()
  The distribution mirror ... is already registered with this URL.

  We'll have to add some URLs to sample data to test the validator for FTP and
  Rsync URLs.

  >>> from zope.component import getUtility
  >>> from canonical.database.sqlbase import flush_database_updates
  >>> from canonical.launchpad.interfaces import IDistributionMirrorSet
  >>> from canonical.launchpad.ftests import login, logout
  >>> login("mark@hbd.com")
  >>> mirrorset = getUtility(IDistributionMirrorSet)
  >>> example_mirror = mirrorset.getByName('invalid-mirror')
  >>> ftp_url = 'ftp://localhost:11375/invalid-mirror'
  >>> example_mirror.ftp_base_url = ftp_url
  >>> rsync_url = 'rsync://localhost:11375/invalid-mirror'
  >>> example_mirror.rsync_base_url = rsync_url
  >>> flush_database_updates()
  >>> logout()

  And now we test the validator for the FTP URL

  >>> browser.getControl('FTP URL').value = ftp_url
  >>> browser.getControl('Continue').click()

  >>> soup = BeautifulSoup(browser.contents)
  >>> for message in soup.findAll(attrs={'class': 'message'}):
  ...     print message.renderContents()
  The distribution mirror ... is already registered with this URL.

  And for the Rsync URL

  >>> browser.getControl('Rsync URL').value = rsync_url
  >>> browser.getControl('Continue').click()

  >>> soup = BeautifulSoup(browser.contents)
  >>> for message in soup.findAll(attrs={'class': 'message'}):
  ...     print message.renderContents()
  The distribution mirror ... is already registered with this URL.

  Note also that neither query strings nor fragments are allowed in the URLs.

  >>> browser.getControl('HTTP URL').value = 'http://foo.bar/baz#someid'
  >>> browser.getControl('Continue').click()
  >>> soup = BeautifulSoup(browser.contents)
  >>> for message in soup.findAll(attrs={'class': 'message'}):
  ...     print message.renderContents()
  URIs with fragment identifiers are not allowed.

  >>> browser.getControl('HTTP URL').value = 'http://foo.bar/baz?q=string'
  >>> browser.getControl('Continue').click()
  >>> soup = BeautifulSoup(browser.contents)
  >>> for message in soup.findAll(attrs={'class': 'message'}):
  ...     print message.renderContents()
  URIs with query strings are not allowed.

  Now we provide everything that is needed...

  >>> http_url = 'http://my.mirror.com/pub'
  >>> browser.getControl('Link Speed').value = ['1 Mbps']
  >>> browser.getControl('Location (Country)').value =  ['9']
  >>> browser.getControl('Content').value = ['Archive']
  >>> browser.getControl('HTTP URL').value = http_url
  >>> browser.getControl('FTP URL').value = ''
  >>> browser.getControl('Rsync URL').value = ''
  >>> browser.getControl('Continue').click()

  ...and the mirror is created just fine.

  >>> browser.url
  'http://launchpad.dev/ubuntu/+mirror/my.mirror.com-archive'

  Note that even though the http_url we used didn't contain a trailing slash,
  the value stored in our database will contain it.

  >>> browser.getLink('Edit Details').click()
  >>> http_url + "/" == browser.getControl('HTTP URL').value
  True

  It's possible to change the auto-generated mirror name, if we want, but
  the name is unique, and so we can't use a name that is already in use by
  another mirror.

  >>> browser.url
  'http://launchpad.dev/ubuntu/+mirror/my.mirror.com-archive/+edit'
  >>> browser.getControl(name='field.name').value = 'archive-mirror'
  >>> browser.getControl('Change').click()

  >>> message = "is already in use by another distribution mirror."
  >>> message in browser.contents
  True

  The mirror can't be probed before it's marked as official by one of the
  distribution owners.

  >>> browser.open(
  ...   'http://launchpad.dev/ubuntu/+mirror/my.mirror.com-archive/')
  >>> 'mirror "My.mirror.com-archive"' in browser.contents
  True

  >>> "This mirror is an unofficial" in browser.contents
  True
  >>> "and will not be verified" in browser.contents
  True

  To make a mirror official, one has to go to the +mark-official page, which
  is accessible only to mirror admins of that distribution and the
  distribution owner.

  >>> browser.open(
  ...   'http://launchpad.dev/ubuntu/+mirror/my.mirror.com-archive/+mark-official')
  Traceback (most recent call last):
  ...
  Unauthorized...

  Now one of the mirror administrators goes and make this an official mirror.

  # XXX: matsubara 2006-05-18: We need to reset the Browser object to reset the
  # headers.
  # https://launchpad.net/launchpad/+bug/45226

  >>> from zope.testbrowser.testing import Browser
  >>> browser = Browser()
  >>> browser.handleErrors = False

  >>> browser.addHeader('Authorization', 'Basic karl@canonical.com:test')
  >>> browser.open(
  ...   'http://launchpad.dev/ubuntu/+mirror/my.mirror.com-archive/+mark-official')

  >>> official_approved = browser.getControl(
  ...     'This is one of the official mirrors of this distribution')
  >>> official_approved.selected = True
  >>> browser.getControl('Change').click()

  >>> browser.url
  'http://launchpad.dev/ubuntu/+mirror/my.mirror.com-archive'


  And in the mirror's main page we can now see that it's an official mirror.

  >>> 'Official' in browser.contents
  True

