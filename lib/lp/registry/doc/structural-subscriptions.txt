= Structural Subscriptions =

Structural subscriptions allow a user to subscribe to a launchpad
structure like a product, project, productseries, distribution,
distroseries, milestone or a combination of sourcepackagename and
distribution.

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.interfaces import (
    ...     IDistributionSet, IPersonSet, IProductSet,
    ...     ISourcePackageNameSet)
    >>> from lp.registry.model.structuralsubscription import (
    ...    StructuralSubscription)

    >>> person_set = getUtility(IPersonSet)
    >>> foobar = person_set.getByEmail('foo.bar@canonical.com')
    >>> sampleperson = person_set.getByEmail('test@canonical.com')
    >>> firefox = getUtility(IProductSet).getByName("firefox")
    >>> ubuntu = getUtility(IDistributionSet).getByName("ubuntu")

    >>> ff_sub = StructuralSubscription(product=firefox,
    ...     subscriber=sampleperson, subscribed_by=foobar)
    >>> ff_sub.target
    <Product at ...>
    >>> ff_sub.bug_notification_level
    <DBItem BugNotificationLevel.NOTHING, (10) Nothing>

    >>> ubuntu_sub = StructuralSubscription(distribution=ubuntu,
    ...     subscriber=sampleperson, subscribed_by=foobar)
    >>> ubuntu_sub.target
    <Distribution 'Ubuntu' (ubuntu)>
    >>> ubuntu_sub.blueprint_notification_level
    <DBItem BlueprintNotificationLevel.NOTHING, (10) Nothing>

    >>> evolution = getUtility(ISourcePackageNameSet).getOrCreateByName(
    ...    'evolution')
    >>> evolution_sub = StructuralSubscription(distribution=ubuntu,
    ...     sourcepackagename=evolution, subscriber=sampleperson,
    ...     subscribed_by=foobar)
    >>> evolution_sub.target
    <...DistributionSourcePackage object at ...>

    >>> sampleperson.structural_subscriptions.count()
    3


== Parent subscription targets ==

Some subscription targets relate to other targets hierarchically. An
IDistribution, for example, can be said to be a parent of all
IDistributionSourcePackages for that distribution.

    >>> evolution_package = evolution_sub.target

A target's parent can be retrieved using the
`parent_subscription_target` property.

    >>> print evolution_package.parent_subscription_target.displayname
    Ubuntu
    >>> print ubuntu.parent_subscription_target
    None
    >>> print firefox.parent_subscription_target.displayname
    the Mozilla Project

    >>> ff_milestone = firefox.getMilestone('1.0')
    >>> ff_milestone.parent_subscription_target == firefox
    True
    >>> print ff_milestone.parent_subscription_target.displayname
    Mozilla Firefox

   >>> ff_trunk = firefox.getSeries('trunk')
   >>> ff_trunk.parent_subscription_target == firefox
   True
   >>> print ff_trunk.parent_subscription_target.displayname
   Mozilla Firefox

   >>> warty = ubuntu.getSeries('warty')
   >>> warty.parent_subscription_target == ubuntu
   True
   >>> print warty.parent_subscription_target.displayname
   Ubuntu

When notifying subscribers of bug activity, both subscribers to the
target and to the target's parent are notified.

    >>> from canonical.launchpad.ftests import syncUpdate
    >>> from canonical.launchpad.interfaces import (
    ...     BlueprintNotificationLevel, BugNotificationLevel)
    >>> from canonical.launchpad.mailnotification import (
    ...     BugNotificationRecipients)

We define some utility functions for printing out bug subscriptions and
the recipients for the notifications they generate.

    >>> def print_bug_subscribers(bug_subscribers):
    ...     subscriber_names = sorted(subscriber.name
    ...                               for subscriber in bug_subscribers)
    ...     for name in subscriber_names:
    ...         print name
    >>> def print_bug_subscriptions(bug_subscriptions):
    ...     for subscription in bug_subscriptions:
    ...         print subscription.subscriber.name
    >>> def print_bug_recipients(recipients):
    ...     for recipient in recipients:
    ...         reason = recipients.getReason(recipient)
    ...         print '%s "%s"' % (recipient.name, reason[1])

Sample person has a subscription to Ubuntu and to the Evolution package
in Ubuntu. We set the bug notification level for both subscriptions.

    >>> ubuntu_sub.bug_notification_level = BugNotificationLevel.COMMENTS
    >>> evolution_sub.bug_notification_level = BugNotificationLevel.COMMENTS

`getBugNotificationsRecipients` returns all the bug subscribers to the
target and its parent, and adds the rationale for the subscriptions to
the recipients set. Each subscriber is only added once.

    >>> recipients = BugNotificationRecipients()
    >>> bug_subscribers = evolution_package.getBugNotificationsRecipients(
    ...     recipients=recipients)
    >>> print_bug_subscriptions(ubuntu.bug_subscriptions)
    name12
    >>> print_bug_subscriptions(evolution_package.bug_subscriptions)
    name12
    >>> print_bug_subscribers(bug_subscribers)
    name12
    >>> print_bug_recipients(recipients)
    name12 "Subscriber (evolution in ubuntu)"



Foo Bar subscribes to Ubuntu.

    >>> login('foo.bar@canonical.com')
    >>> foobar_subscription = ubuntu.addBugSubscription(foobar, foobar)
    >>> recipients = BugNotificationRecipients()

The set of subscribers to the evolution package for ubuntu now includes
both subscribers to the package, and subscribers to the distribution.

    >>> bug_subscribers = evolution_package.getBugNotificationsRecipients(
    ...     recipients=recipients)
    >>> print_bug_recipients(recipients)
    name16 "Subscriber (Ubuntu)"
    name12 "Subscriber (evolution in ubuntu)"

We can pass the parameter `level` to getBugNotificationsRecipients().
Subscribers whose subscription level is lower than the given parameter
are not returned.

    >>> foobar_subscription.bug_notification_level = (
    ...     BugNotificationLevel.METADATA)
    >>> recipients = BugNotificationRecipients()
    >>> bug_subscribers = evolution_package.getBugNotificationsRecipients(
    ...     recipients=recipients, level=BugNotificationLevel.COMMENTS)
    >>> print_bug_recipients(recipients)
    name12 "Subscriber (evolution in ubuntu)"

We remove Sample Person's bug subscription to the package.

    >>> evolution_sub.blueprint_notification_level = (
    ...     BlueprintNotificationLevel.METADATA)
    >>> evolution_package.removeBugSubscription(sampleperson, sampleperson)
    >>> ubuntu.removeBugSubscription(sampleperson, sampleperson)
    >>> syncUpdate(evolution_sub)

Sample Person is no longer a subscriber to the package, but Foo Bar
is still a subscriber, by being subscribed to Ubuntu.

    >>> print_bug_subscribers(
    ...     evolution_package.getBugNotificationsRecipients(
    ...         recipients=recipients))
    name16

A project is the parent of each of its products.

Fireox does not have any subscribers.

    >>> print_bug_subscribers(firefox.getBugNotificationsRecipients())

Mozilla is the parent of Fireox.

    >>> from canonical.launchpad.interfaces import IProjectGroupSet
    >>> mozilla = getUtility(IProjectGroupSet).getByName('mozilla')
    >>> print firefox.parent_subscription_target.displayname
    the Mozilla Project

Foobar subscribes to bug notificatios for Mozilla.

    >>> mozilla.addBugSubscription(foobar, foobar)
    <StructuralSubscription at ...>

As a result of subscribing to Mozilla, Foobar is now a subscriber of
Firefox.

    >>> print_bug_subscribers(firefox.getBugNotificationsRecipients())
    name16


== Retrieving structural subscribers of targets ==

Subscribers of one or more targets are retrieved by
PersonSet.getSubscribersForTargets.

XXX Abel Deuring 2008-07-11 We must remove the security proxy, because
PersonSet.getSubscribersForTargets() accesses the private attribute
firefox._targets_args. This attribute should be renamed. Bug #247525.

    >>> from zope.security.proxy import removeSecurityProxy
    >>> firefox_no_proxy = removeSecurityProxy(firefox)
    >>> from lp.registry.interfaces.person import IPersonSet
    >>> person_set = getUtility(IPersonSet)
    >>> firefox_subscribers = person_set.getSubscribersForTargets(
    ...     [firefox_no_proxy])
    >>> print_bug_subscribers(firefox_subscribers)
    name12

If PersonSet.getSubscribersForTargets() is passed a
BugNotificationLevel in its `level` parameter, only structural
subscribers with that notification level or higher will be returned.
The subscription level of ff_sub, the only structural subscription
to firefox, is NOTHING, hence we get an empty list if we pass any
larger bug notification level.

    >>> firefox_subscribers = person_set.getSubscribersForTargets(
    ...     [firefox_no_proxy], level=BugNotificationLevel.LIFECYCLE)
    >>> print len(firefox_subscribers)
    0

If the bug notification level of ff_sub is increased, the subscription
is included in the result of PersonSet.getSubscribersForTarget().

    >>> ff_sub.level = BugNotificationLevel.LIFECYCLE
    >>> firefox_subscribers = person_set.getSubscribersForTargets(
    ...     [firefox_no_proxy])
    >>> print_bug_subscribers(firefox_subscribers)
    name12
    >>> ff_sub.level = BugNotificationLevel.METADATA
    >>> firefox_subscribers = person_set.getSubscribersForTargets(
    ...     [firefox_no_proxy])
    >>> print_bug_subscribers(firefox_subscribers)
    name12

More than one target can be passed to PersonSet.getSubscribersForTargets().

    >>> ubuntu_no_proxy = removeSecurityProxy(ubuntu)
    >>> ubuntu_or_firefox_subscribers = person_set.getSubscribersForTargets(
    ...     [firefox_no_proxy, ubuntu_no_proxy])
    >>> print_bug_subscribers(ubuntu_or_firefox_subscribers)
    name12
    name16


== Target type display ==

Structural subscription targets have a `target_type_display` attribute, which
can be used to refer to them in display.

    >>> print firefox.target_type_display
    project
    >>> print evolution_package.target_type_display
    package
    >>> print ff_milestone.target_type_display
    milestone
    
