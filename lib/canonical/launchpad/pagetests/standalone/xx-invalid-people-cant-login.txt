We need to ensure that an invalid account, such as the result of an
account merge, can no longer authenticate using their existing
credentials. See Bug #33427

First we log in via cookie

  >>> browser.open('http://launchpad.dev/+login')
  >>> browser.url
  'http://launchpad.dev/+login'
  >>> browser.getControl('E-mail', index=0).value = 'foo.bar@canonical.com'
  >>> browser.getControl('Password').value = 'test'
  >>> browser.getControl('Log In').click()
  >>> browser.url
  'http://launchpad.dev'
  >>> 'Logged in as' in browser.contents
  True

Now invalidate that person

  >>> from canonical.launchpad.interfaces import AccountStatus
  >>> from canonical.launchpad.database import Person
  >>> foobar = Person.byName('name16')
  >>> foobar.account.status = AccountStatus.DEACTIVATED
  >>> from canonical.database.sqlbase import flush_database_updates
  >>> flush_database_updates()

Now if we reload the front page, we should be logged out.

  >>> browser.open('http://launchpad.dev')
  >>> browser.url
  'http://launchpad.dev'
  >>> 'Logged in as' in browser.contents
  False

We also can only connect via Basic auth when then user is valid

  >>> foobar.account.status = AccountStatus.ACTIVE
  >>> flush_database_updates()

  >>> browser = setupBrowser(auth='Basic foo.bar@canonical.com:test')
  >>> browser.open('http://launchpad.dev')
  >>> browser.url
  'http://launchpad.dev'
  >>> 'Logged in as' in browser.contents
  True

  >>> foobar.account.status = AccountStatus.SUSPENDED
  >>> flush_database_updates()

  >>> browser = setupBrowser(auth='Basic foo.bar@canonical.com:test')
  >>> browser.open('http://launchpad.dev')
  >>> browser.url
  'http://launchpad.dev'
  >>> 'Logged in as' in browser.contents
  False

