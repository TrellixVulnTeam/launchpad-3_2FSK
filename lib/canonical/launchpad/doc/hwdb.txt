= Hardware database =

== Storage of raw submissions for the hardware database ==

The hardware database clients submits an XML file with collected hardware
information and other data. This file is stored without any parsing in a
librarian file. A reference to this file is stored in the table HWSubmission,
together with the following data:

  * date_created: Date and time of the submission (generated by the client).
  * date_submitted: Date and time of the submission (generated by the server).
  * format: The format version of the submitted data, as given by the HWDB
    client. See HWSubmissionFormat for valid values.
  * status: The status of the submission. See HWSubmissionStatus for
    valid values.
  * private: If True, the submitter allows public access to the data. If
    false, the data may be used only for statistical purposes.
  * contactable: If True, the submitter agrees to be contacted by upstream
    developers and package maintainers for tests etc.
  * live_cd: If True, the data was collected on a Ubuntu Live CD installation,
    else it was collected on a regular installation.
  * submission_id: A unique submission ID.
  * emailaddress: The email address of the submitter.
  * owner: A reference to the Person table. This value is null, if the email 
    address does not belong to an entry in Person table.
  * distroarchrelease: A reference to the distroarchseries of the submission.
    This value is null, if the submitted values for distribution, 
    distroseries and architecture do not match an existing entry in the 
    Distroarchrelease table.
  * system: A reference to an entry of the HWSystemFingerPrint table. This
    table stores the system name as returned by HAL (system.vendor,
    system.product)

The system fingerprint is stored in a separate table, HWSystemFingerprint.
IHWSystemFingerPrintSet.createFingerprint creates a new row in this table.

    >>> from canonical.launchpad.interfaces import IHWSystemFingerprintSet
    >>> hw_fingerprint_set = getUtility(IHWSystemFingerprintSet)
    >>> fp = hw_fingerprint_set.createFingerprint(u'IBM T41')
    >>> fp.fingerprint
    u'IBM T41'

Each fingerprint string in HWSystemFingerprint must be unique.

    >>> import transaction
    >>> transaction.commit()
    >>> fp = hw_fingerprint_set.createFingerprint(u'IBM T41')
    Traceback (most recent call last):
    ...
    RetryPsycopgIntegrityError: ERROR:  duplicate key violates unique 
    constraint "hwsystemfingerprint__fingerprint__key"
    ...

    INSERT INTO HWSystemFingerprint (id, fingerprint) VALUES (2, u'IBM T41')

    >>> transaction.abort()

IHWSystemFingerprint.getByName returns a fingerprint...

    >>> fp = hw_fingerprint_set.getByName(u'IBM T41')
    >>> fp.fingerprint
    u'IBM T41'

...or None, if no entry exists.

    >>> print hw_fingerprint_set.getByName(u'DEC PDP11')
    None

IHWSubmissionSet.createSubmission creates a new entry in the 
HWSumission table.

    >>> import pytz
    >>> from datetime import datetime
    >>> from StringIO import StringIO
    >>> from canonical.launchpad.interfaces import (
    ...     HWSubmissionFormat, IHWSubmissionSet)
    >>> date_created = datetime(2007, 04, 01, tzinfo=pytz.timezone('UTC'))
    >>> date_submitted = datetime(2007, 04, 02, tzinfo=pytz.timezone('UTC'))
    >>> submission_data = 'submission data'
    >>> hw_submission_set = getUtility(IHWSubmissionSet)
    >>> submission = hw_submission_set.createSubmission(
    ...     date_created=date_created,
    ...     format=HWSubmissionFormat.VERSION_1,
    ...     private=False,
    ...     contactable=False,
    ...     live_cd=False,
    ...     submission_id=u'unique ID 1',
    ...     emailaddress=u'test@canonical.com',
    ...     distroarchseries=None,
    ...     raw_submission=StringIO(submission_data),
    ...     filename=u'hwinfo.txt',
    ...     filesize=len(submission_data),
    ...     system_fingerprint=u'Dell Inspiron 1234')

submission_id must be unique. The attempt to create a HWSubmission entry
with an already existing submission_id raises HWSubmissionError.

    >>> submission = hw_submission_set.createSubmission(
    ...     date_created=date_created,
    ...     format=HWSubmissionFormat.VERSION_1,
    ...     private=False,
    ...     contactable=False,
    ...     live_cd=False,
    ...     submission_id=u'unique ID 1',
    ...     emailaddress=u'test@canonical.com',
    ...     distroarchseries=None,
    ...     raw_submission=StringIO(submission_data),
    ...     filename=u'hwinfo.txt',
    ...     filesize=len(submission_data),
    ...     system_fingerprint=u'Dell Inspiron 1234')
    Traceback (most recent call last):
    ...
    HWSubmissionError: A submission with this ID already exists

If the email address belongs to an already known person, the column owner 
points to the Person record of the submitter.

    >>> submission.owner.displayname
    u'Sample Person'

Otherwise, an entry in the Peron table is created for the submitter.

    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> beeblebrox = getUtility(IPersonSet).getByEmail(
    ...     'beeblebrox@example.com')
    >>> print beeblebrox
    None

    >>> submission = hw_submission_set.createSubmission(
    ...     date_created=date_created,
    ...     format=HWSubmissionFormat.VERSION_1,
    ...     private=False,
    ...     contactable=False,
    ...     live_cd=False,
    ...     submission_id=u'unique ID 2',
    ...     emailaddress=u'beeblebrox@example.com',
    ...     distroarchseries=None,
    ...     raw_submission=StringIO(submission_data),
    ...     filename=u'hwinfo.txt',
    ...     filesize=len(submission_data),
    ...     system_fingerprint=u'Acer 6789')
    >>> print submission.owner.displayname
    Beeblebrox

If an invalid email address is passed to IHWSubmissionSet.createSubmission,
an HWSubmissionError is raised.

    >>> submission = hw_submission_set.createSubmission(
    ...     date_created=date_created,
    ...     format=HWSubmissionFormat.VERSION_1,
    ...     private=False,
    ...     contactable=False,
    ...     live_cd=False,
    ...     submission_id=u'unique ID 3',
    ...     emailaddress=u'beeblebrox',
    ...     distroarchseries=None,
    ...     raw_submission=StringIO(submission_data),
    ...     filename=u'hwinfo.txt',
    ...     filesize=len(submission_data),
    ...     system_fingerprint=u'Acer 6789')
    Traceback (most recent call last):
    ...
    HWSubmissionError: invalid email address

The submitted data can be retrieved by IHWSubmissionSet.getBySubmissionID.

    >>> submission = hw_submission_set.getBySubmissionID(u'unique ID 1')
    >>> submission.submission_id, submission.system_fingerprint.fingerprint
    (u'unique ID 1', u'Dell Inspiron 1234')

If a submission is marked as private, it is only returned by 
IHWSubmissionSet.getBySubmissionID, if the the parameter `user` matches
the owner of the submission.

    >>> submission = hw_submission_set.createSubmission(
    ...     date_created=date_created,
    ...     format=HWSubmissionFormat.VERSION_1,
    ...     private=True,
    ...     contactable=False,
    ...     live_cd=False,
    ...     submission_id=u'unique ID 3',
    ...     emailaddress=u'test@canonical.com',
    ...     distroarchseries=None,
    ...     raw_submission=StringIO(submission_data),
    ...     filename=u'hwinfo.txt',
    ...     filesize=len(submission_data),
    ...     system_fingerprint=u'Dell Inspiron 1234')
    >>> print hw_submission_set.getBySubmissionID(u'unique ID 3')
    None
    >>> sample_person = getUtility(IPersonSet).getByEmail('test@canonical.com')
    >>> sample_person.displayname
    u'Sample Person'
    >>> submission = hw_submission_set.getBySubmissionID(
    ...     u'unique ID 3', sample_person)
    >>> submission.submission_id, submission.system_fingerprint.fingerprint
    (u'unique ID 3', u'Dell Inspiron 1234')

Passing another person than the owner as the parameter `user` does not return
private submissions.

    >>> no_priv = getUtility(IPersonSet).getByEmail('no-priv@canonical.com')
    >>> no_priv.displayname
    u'No Privileges Person'
    >>> print hw_submission_set.getBySubmissionID(u'unique ID 3', no_priv)
    None

If no submission exists for a given ID, None is returned.

    >>> print hw_submission_set.getBySubmissionID(u'unknown ID')
    None

IHWSubmissionSet.getByFingerprintName returns all submissions for a
given fingerprint name. Private submissions are excluded, if the parameter
`user` is omitted or does not match the owner of the submission.

    >>> submissions = hw_submission_set.getByFingerprintName(
    ...     u'Dell Inspiron 1234')
    >>> [(s.submission_id, s.system_fingerprint.fingerprint)
    ...  for s in submissions]
    [(u'unique ID 1', u'Dell Inspiron 1234')]
    >>> submissions = hw_submission_set.getByFingerprintName(
    ...     u'Dell Inspiron 1234', no_priv)
    >>> [(s.submission_id, s.system_fingerprint.fingerprint)
    ...  for s in submissions]
    [(u'unique ID 1', u'Dell Inspiron 1234')]
    >>> submissions = hw_submission_set.getByFingerprintName(
    ...     u'Dell Inspiron 1234', sample_person)
    >>> [(s.submission_id, s.system_fingerprint.fingerprint)
    ...  for s in submissions]
    [(u'unique ID 1', u'Dell Inspiron 1234'),
     (u'unique ID 3', u'Dell Inspiron 1234')]

If no submissions exist for the given system fingerprint, an empty result
set is returned.

    >>> list(hw_submission_set.getByFingerprintName('DEC PDP11'))
    []

IHWSubmissionSet.getByOwner returns all submissions of a person. Again,
only public submissions are returned, if no parameter `user` is passed
to the method, or if the passed parameter is not the owner of the submission.

    >>> submissions = hw_submission_set.getByOwner(sample_person)
    >>> [(s.submission_id, s.system_fingerprint.fingerprint)
    ...  for s in submissions]
    [(u'unique ID 1', u'Dell Inspiron 1234')]
    >>> submissions = hw_submission_set.getByOwner(sample_person,
    ...                                              user=no_priv)
    >>> [(s.submission_id, s.system_fingerprint.fingerprint)
    ...  for s in submissions]
    [(u'unique ID 1', u'Dell Inspiron 1234')]
    >>> submissions = hw_submission_set.getByOwner(sample_person,
    ...                                              user=sample_person)
    >>> [(s.submission_id, s.system_fingerprint.fingerprint)
    ...  for s in submissions]
    [(u'unique ID 1', u'Dell Inspiron 1234'),
     (u'unique ID 3', u'Dell Inspiron 1234')]
