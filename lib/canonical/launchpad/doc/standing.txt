= Updating personal standing =

People have a personal standing which controls whether their postings to
mailing lists they are not members require moderation or not.  Personal
standing can be set explicitly by a Launchpad administrator, but it can
also be calculated by a cron script from the history of reviewed and
approved messages.  If a person posts a message to a mailing list they
are not a member of, their message gets held for moderator approval.

    >>> login('foo.bar@canonical.com')
    >>> from canonical.launchpad.ftests import mailinglists_helper
    >>> team_one, list_one = mailinglists_helper.new_team('test-one', True)

    >>> from canonical.launchpad.interfaces import (
    ...     IPersonSet, PersonalStanding)
    >>> from canonical.launchpad.ftests import sync, syncUpdate

    >>> lifeless = getUtility(IPersonSet).getByName('lifeless')
    >>> lifeless.personal_standing = PersonalStanding.UNKNOWN
    >>> lifeless.personal_standing_reason = ''
    >>> syncUpdate(lifeless)

    # A helper for posting messages to a list.
    >>> from canonical.launchpad.interfaces import (
    ...     IMailingListSet, IMessageSet)
    >>> from email.Utils import formatdate
    >>> def post_message(team_name, message_id):
    ...     message = getUtility(IMessageSet).fromEmail("""\
    ... From: robertc@robertcollins.net
    ... To: %s@lists.launchpad.dev
    ... Subject: Something to think about
    ... Message-ID: %s
    ... Date: %s
    ...
    ... Point of order!
    ... """ % (team_name, message_id, formatdate()))
    ...     mailing_list = getUtility(IMailingListSet).get(team_name)
    ...     held_message = mailing_list.holdMessage(message)
    ...     return held_message

    >>> from canonical.launchpad.scripts.standing import (
    ...     UpdatePersonalStanding)
    >>> from canonical.config import config
    >>> from canonical.testing import LaunchpadZopelessLayer
    >>> from canonical.launchpad.ftests.logger import MockLogger
    >>> class TestableScript(UpdatePersonalStanding):
    ...     """A testable version of `UpdatePersonalStanding`."""
    ...     def main(self):
    ...         """Set up and restore the script's environment."""
    ...         # Simulate Mailman acting changed state.
    ...         flush_database_updates()
    ...         mailinglists_helper.mailman.act()
    ...         # Commit the in-progress transaction, since switching
    ...         # database users does an abort.
    ...         LaunchpadZopelessLayer.txn.commit()
    ...         LaunchpadZopelessLayer.switchDbUser(
    ...             config.standingupdater.dbuser)
    ...         self.txn = LaunchpadZopelessLayer.txn
    ...         self.logger = MockLogger()
    ...         results = super(TestableScript, self).main()
    ...         LaunchpadZopelessLayer.switchDbUser('launchpad')
    ...         return results
    >>> script = TestableScript('update-standing', test_args=[])

After one approval, Robert's standing does not change.

    >>> foobar = getUtility(IPersonSet).getByName('name16')
    >>> message = post_message('test-one', '<aardvark>')
    >>> message.approve(foobar)
    >>> script.main()
    log> Analyzing approved messages
    log> Updating personal standings
    log> Done.
    >>> sync(lifeless)
    >>> lifeless.personal_standing
    <DBItem PersonalStanding.UNKNOWN...>

Even after three approvals, if the message was posted to the same list,
Robert's personal standing does not change.

    >>> message = post_message('test-one', '<badger>')
    >>> message.approve(foobar)
    >>> script.main()
    log> Analyzing approved messages
    log> Updating personal standings
    log> Done.
    >>> sync(lifeless)
    >>> lifeless.personal_standing
    <DBItem PersonalStanding.UNKNOWN...>

    >>> message = post_message('test-one', '<caribou>')
    >>> message.approve(foobar)
    >>> script.main()
    log> Analyzing approved messages
    log> Updating personal standings
    log> Done.
    >>> sync(lifeless)
    >>> lifeless.personal_standing
    <DBItem PersonalStanding.UNKNOWN...>

Robert needs to get some approvals from a few more mailing lists before
his personal standing can be updated.

    >>> team_two, list_two = mailinglists_helper.new_team('test-two', True)
    >>> team_three, list_three = mailinglists_helper.new_team(
    ...     'test-three', True)

    >>> message = post_message('test-two', '<dingo>')
    >>> message.approve(foobar)
    >>> script.main()
    log> Analyzing approved messages
    log> Updating personal standings
    log> Done.
    >>> sync(lifeless)
    >>> lifeless.personal_standing
    <DBItem PersonalStanding.UNKNOWN...>

Rejected and discarded messages don't count.

    >>> message = post_message('test-three', '<elephant>')
    >>> message.reject(foobar)
    >>> script.main()
    log> Analyzing approved messages
    log> Updating personal standings
    log> Done.
    >>> sync(lifeless)
    >>> lifeless.personal_standing
    <DBItem PersonalStanding.UNKNOWN...>

    >>> message = post_message('test-three', '<falcon>')
    >>> message.discard(foobar)
    >>> script.main()
    log> Analyzing approved messages
    log> Updating personal standings
    log> Done.
    >>> sync(lifeless)
    >>> lifeless.personal_standing
    <DBItem PersonalStanding.UNKNOWN...>

Robert's next message goes to a third mailing list, and this gets
approved.  As a result, his personal standing gets updated.

    >>> message = post_message('test-three', '<giraffe>')
    >>> message.approve(foobar)
    >>> script.main()
    log> Analyzing approved messages
    log> Updating personal standings
    log> Setting standing for lifeless to GOOD
    log> Done.
    >>> sync(lifeless)
    >>> lifeless.personal_standing
    <DBItem PersonalStanding.GOOD...>

However, Robert's standing will only be updated if it was previously
Unknown.  A standing of Poor, Good or Excellent will not be changed by
the cron script.  The most common case of this is when a person's
standing has been set to Poor by a Launchpad administrator.  In that
case, no amount of approved messages will kick them back to Good
standing.

    >>> lifeless.personal_standing = PersonalStanding.POOR
    >>> script.main()
    log> Analyzing approved messages
    log> Updating personal standings
    log> Done.
    >>> sync(lifeless)
    >>> lifeless.personal_standing
    <DBItem PersonalStanding.POOR...>

    >>> lifeless.personal_standing = PersonalStanding.GOOD
    >>> script.main()
    log> Analyzing approved messages
    log> Updating personal standings
    log> Done.
    >>> sync(lifeless)
    >>> lifeless.personal_standing
    <DBItem PersonalStanding.GOOD...>

    >>> lifeless.personal_standing = PersonalStanding.EXCELLENT
    >>> script.main()
    log> Analyzing approved messages
    log> Updating personal standings
    log> Done.
    >>> sync(lifeless)
    >>> lifeless.personal_standing
    <DBItem PersonalStanding.EXCELLENT...>

Should Robert's standing get kicked back to Unknown, then his approved
messages will count toward his good standing again.

    >>> lifeless.personal_standing = PersonalStanding.UNKNOWN
    >>> script.main()
    log> Analyzing approved messages
    log> Updating personal standings
    log> Setting standing for lifeless to GOOD
    log> Done.
    >>> sync(lifeless)
    >>> lifeless.personal_standing
    <DBItem PersonalStanding.GOOD...>


== Cron script ==

XXX Run (some of) this is a cron script.
