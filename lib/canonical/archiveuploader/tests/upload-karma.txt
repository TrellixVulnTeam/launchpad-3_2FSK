= Karma for uploaded packages =

Uploads through Soyuz will give karma to users when the upload is
accepted.  This means that uploads that are new will not receive karma until
they are accepted from the queue.

== Set up test fixtures ==

Set up an event listener to show when karma gets assigned.

    >>> from canonical.launchpad.ftests.karma import (
    ...     KarmaAssignedEventListener)
    >>> karma_helper = KarmaAssignedEventListener()
    >>> karma_helper.register_listener()

We also need to set up the karma categories in the database.

    >>> from canonical.testing.layers import LaunchpadZopelessLayer
    >>> LaunchpadZopelessLayer.switchDbUser('karmatesting')
    >>> from canonical.launchpad.database import (
    ...     KarmaAction, KarmaCategory)
    >>> category = KarmaCategory(
    ...     name='soyuz', title='Soyuz', summary='Karma actions in Soyuz')
    >>> discard = KarmaAction(
    ...     name='distributionuploadaccepted',
    ...     title='Distribution package upload accepted',
    ...     summary='A user uploaded a package to a distribution',
    ...     category=category,
    ...     points=10)
    >>> discard = KarmaAction(
    ...     name='sponsoruploadaccepted',
    ...     title='Sponsored package upload accepted',
    ...     summary='A package sponsor uploaded a package to a distribution',
    ...     category=category,
    ...     points=5)
    >>> discard = KarmaAction(
    ...     name='ppauploadaccepted',
    ...     title='PPA package upload accepted',
    ...     summary='A user uploaded a package to a PPA',
    ...     category=category,
    ...     points=1)
    >>> from canonical.database.sqlbase import commit
    >>> commit()

Now make sure we're using the right database user for upload processing.

    >>> from canonical.config import config
    >>> LaunchpadZopelessLayer.switchDbUser(config.uploader.dbuser)


== Uploading new sources ==

First, uploading a new source does not assign karma immediately.

    >>> bar_src = getUploadForSource(
    ...	      'suite/bar_1.0-1/bar_1.0-1_source.changes')
    >>> bar_src.process()
    >>> result = bar_src.do_accept()
    >>> bar_src.queue_root.status.name
    'NEW'

Nothing is printed from the listener yet, so no karma was assigned.
We'll accept the upload now.

    >>> commit()
    >>> bar_src.queue_root.acceptFromQueue("announce@example.com")
    Karma added: action=distributionuploadaccepted, distribution=ubuntu

As can be seen, karma was added for the package creator.

If we upload a package that has a different person signing the upload
compared to the package creator, then both will get karma.

    >>> foo_src = getUploadForSource(
    ...       'suite/foo_1.0-1/foo_1.0-1_source.changes')
    >>> foo_src.process()
    >>> result = foo_src.do_accept()

Poke the queue entry so it looks like Foo Bar (name16) uploaded it:

    >>> from canonical.launchpad.interfaces import IGPGKeySet, IPersonSet
    >>> from zope.security.proxy import removeSecurityProxy
    >>> name16 = getUtility(IPersonSet).getByName('name16')
    >>> key = getUtility(IGPGKeySet).getGPGKeysForPeople([name16])[0]
    >>> removeSecurityProxy(foo_src.queue_root).signing_key = key
    >>> commit()
    >>> foo_src.queue_root.acceptFromQueue("announce@example.com")
    Karma added: action=distributionuploadaccepted, distribution=ubuntu
    Karma added: action=sponsoruploadaccepted, distribution=ubuntu

You can see that two karma events occurred.


== Uploading auto-accepted sources ==

Auto-accepted sources are also given karma in the same way as queued uploads
except that the karma is awarded earlier in the processing cycle.

    >>> bar2_src = getUploadForSource(
    ...     'suite/bar_1.0-2/bar_1.0-2_source.changes')
    >>> bar2_src.process()
    >>> result = bar2_src.do_accept()
    Karma added: action=distributionuploadaccepted, distribution=ubuntu


== Uploading to PPAs ==

PPA uploads are always auto-accepted and we don't care about sponsors.  They
will generate another different karma event for the uploader.

    >>> from canonical.archiveuploader.tests import getPolicy
    >>> from canonical.launchpad.interfaces import (
    ...     ArchivePurpose, IArchiveSet, IDistributionSet)
    >>> ubuntu = getUtility(IDistributionSet)['ubuntu']
    >>> name16_ppa = getUtility(IArchiveSet).new(
    ...     owner=name16, distribution=ubuntu, purpose=ArchivePurpose.PPA)
    >>> bar_ppa_src = getPPAUploadForSource(
    ...     'suite/bar_1.0-1/bar_1.0-1_source.changes', name16_ppa)
    >>> bar_ppa_src.process()
    >>> result = bar_ppa_src.do_accept()
    Karma added: action=ppauploadaccepted, distribution=ubuntu
