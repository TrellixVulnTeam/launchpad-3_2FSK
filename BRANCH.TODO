# Put your TODOs for this branch here, then make sure it is empty before
# landing. There is a test to ensure it is empty in trunk. If there is
# stuff still here when you are ready to land, the items should probably
# be converted to bugs so they can be scheduled.

Need to fix read-only tests in c-i-p as well.

Need to add ro_* configs to all production configs; basically collapsing the
*-db-update configs into the regular ones.


How this works:
===============

From now on, to turn read-only mode on, one just need to create a
read-only.txt file under the root of our tree.  No more config changes and/or
server restarts.

The [database] config section doesn't have main_master/slave variables
anymore.  These are now properties on DatabaseConfig, which return
ro_main_master/slave or rw_main_master/slave, depending on the mode we are on
(i.e. what is returned by IIsReadOnly.isReadOnly()).

When .isReadOnly() is called as part of processing a request, we cache its
return value in the request so that it doesn't need to hit the filesystem in
further calls.

At the beginning of a request, we check the databases to which the main_master
and main_slave stores are connected to. If they differ from
dbconfig.main_master/slave, we remove these stores from ZStorm, forcing them
to be created again the next time they are needed.  When they're created again
they get a new connection, which uses dbconfig.main_master/slave and thus will
go to the correct db.

After removing the stores from ZStorm, this is what happens when the store is
needed again:

   - ZStorm.get('main-master', 'launchpad:main-master') is called
   - ZStorm finds a Database object for that uri
   - ZStorm instantiates a new Store object, passing the existing Database
   - Store calls Database.connect(), which instantiates and returns a
     Connection
   - The Connection's __init__() calls Database.raw_connect(), which finally
     reads dbconfig.main_master/slave and creates a new psycopg2 connection
     using that.

The above only works because our custom Database class (LaunchpadDatabase)
sets self._dsn inside raw_connect(), instead of inside __init__() (like its
parent class does).  That's needed because the Database objects are reused
across threads/stores by ZStorm.
