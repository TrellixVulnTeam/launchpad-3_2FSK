= Launchpad Answer Tracker =

Launchpad includes an Answer Tracker where users can post questions
(usually about problems they encounter with projects) and other can
answer them.) Questions are created and accessed using the
IQuestionTarget interface. This interface is available on products,
distributions and sourcepackages.

    >>> login('test@canonical.com')

    >>> from zope.interface.verify import verifyObject
    >>> from canonical.launchpad.interfaces import (
    ...     IDistributionSet, IProductSet, IPersonSet, IQuestionTarget)

    >>> firefox = getUtility(IProductSet)['firefox']
    >>> verifyObject(IQuestionTarget, firefox)
    True

    >>> ubuntu = getUtility(IDistributionSet).getByName('ubuntu')
    >>> verifyObject(IQuestionTarget, ubuntu)
    True

    >>> evolution_package = ubuntu.currentrelease.getSourcePackage(
    ...     'evolution')
    >>> verifyObject(IQuestionTarget, evolution_package)
    True

Altough distribution release do not implement the IQuestionTarget
interface, it is possible to adapt one to it. (The adapter is actually
the distrorelease's distribution.)

    >>> ubuntu_warty = ubuntu.getRelease('warty')
    >>> IQuestionTarget.providedBy(ubuntu_warty)
    False
    >>> questiontarget = IQuestionTarget(ubuntu_warty)
    >>> verifyObject(IQuestionTarget, questiontarget)
    True

Similarly, it is possible to adapt an ISourcePackageRelease into an
IQuestionTarget.

    >>> firefox_in_warty = ubuntu_warty.getSourcePackage('mozilla-firefox')
    >>> firefox_release_in_warty = firefox_in_warty.currentrelease

    >>> questiontarget = IQuestionTarget(firefox_release_in_warty)
    >>> verifyObject(IQuestionTarget, questiontarget)
    True

You create a new question by calling the newQuestion() method of an
IQuestionTarget attribute.

    >>> sample_person = getUtility(IPersonSet).getByEmail('test@canonical.com')
    >>> firefox_question = firefox.newQuestion(
    ...     sample_person, "Firefox question", "Unable to use Firefox")

(The complete IQuestionTarget interface is documented in
../interfaces/ftests/questiontarget.txt.)

== Official usage ==

A product or distribution may be offically supported by the community 
using the Answer Tracker. This status is set by the official_answers
attribute on the IProduct and IDistribution.

    >>> ubuntu.official_answers
    True
    >>> firefox.official_answers
    True
    
== IQuestion ==

Questions are manipulated through the IQuestion interface:

    >>> from canonical.launchpad.interfaces import IQuestion
    >>> from zope.security.proxy import removeSecurityProxy

    # The complete interface is not necessarily available to the
    # logged in user.
    >>> verifyObject(IQuestion, removeSecurityProxy(firefox_question))
    True

The person who submitted the question is available in the owner field.

    >>> firefox_question.owner == sample_person
    True

When the question is created, the owner is added to the question's
subscribers:

    >>> sample_person in [s.person for s in firefox_question.subscriptions]
    True

The question status is 'Open':

    >>> firefox_question.status.title
    'Open'

And the creation time is recorded in the datecreated attribute:

    >>> from datetime import datetime, timedelta
    >>> from pytz import UTC
    >>> now = datetime.now(UTC)
    >>> now - firefox_question.datecreated < timedelta(seconds=5)
    True

The target onto which the question was created is available through the
'target' attribute:

    >>> firefox_question.target == firefox
    True

It is also possible to adapt a question to its IQuestionTarget.

    >>> target = IQuestionTarget(firefox_question)
    >>> verifyObject(IQuestionTarget, target)
    True
    
The question can be transferred to a new IQuestionTarget.

    >>> thunderbird = getUtility(IProductSet)['thunderbird']
    >>> thunderbird_question_target = IQuestionTarget(thunderbird)
    >>> firefox_question.target = thunderbird_question_target
    >>> firefox_question.target == thunderbird
    True
        
There are no restrictions to the number of IQuestionTargets that
a question can be transferred to.
    
    >>> ubuntu_question_target = IQuestionTarget(ubuntu)
    >>> firefox_question.target = ubuntu_question_target
    >>> firefox_question.target == ubuntu_question_target
    True
    
    >>> evolution_package_question_target = IQuestionTarget(evolution_package)
    >>> firefox_question.target = evolution_package_question_target
    >>> firefox_question.target.name == evolution_package_question_target.name
    True
    >>> firefox_question.target == ubuntu_question_target
    False
    
    >>> firefox_question.target = firefox

== Subscriptions and Notifications ==

Whenever a question is created or changed, email notifications will be
sent. To receive such notification, one can subscribe to the bug using
the subscribe() method.

    >>> no_priv = getUtility(IPersonSet).getByName('no-priv')
    >>> subscription = firefox_question.subscribe(no_priv)

The list of subscriptions is available in the subscriptions attribute.
In the current case, the subscribers will include the owner
('Sample Person') and the newly subscribed person.

    >>> [s.person.displayname for s in firefox_question.subscriptions]
    [u'Sample Person', u'No Privileges Person']

To remove a person from the subscriptions list, we use the unsubscribe()
method.

    >>> firefox_question.unsubscribe(no_priv)
    >>> [s.person.displayname for s in firefox_question.subscriptions]
    [u'Sample Person']

The persons who are on the subscription list are said to be directly
subscribed to the question. They explicitely choose to get notifications
about that particular question. This list of persons is available through
the getDirectSubscribers() method.

    >>> [person.displayname
    ...     for person in firefox_question.getDirectSubscribers()]
    [u'Sample Person']

There is also a list of 'indirect' subscribers to the question. These
are persons that didn't explicitely subscribed to the question, but that
will receive notifications for other reason. Answer contacts for the
question target are part of the indirect subscribers list.

    # There are no answer contacts on the firefox product.
    >>> [person.displayname
    ...     for person in firefox_question.getIndirectSubscribers()]
    []
    >>> firefox.addAnswerContact(no_priv)
    True
    >>> [person.displayname
    ...  for person in firefox_question.getIndirectSubscribers()]
    [u'No Privileges Person']

There is a special case for when the question's is associated to a
source package. The answer contacts for both the distribution and the
source package are part of the indirect subscribers list.

    # Let's register some answer contacts for the distribution and
    # the package.
    >>> list(ubuntu.answer_contacts)
    []
    >>> list(evolution_package.answer_contacts)
    []
    >>> ubuntu_team = getUtility(IPersonSet).getByName('ubuntu-team')
    >>> ubuntu.addAnswerContact(ubuntu_team)
    True
    >>> evolution_package.addAnswerContact(no_priv)
    True
    >>> package_question = evolution_package.newQuestion(
    ...     sample_person, 'Upgrading to Evolution 1.4 breaks plug-ins',
    ...     "The FnordsHighlighter plug-in doesn't work after upgrade.")
    >>> [s.person.displayname for s in package_question.subscriptions]
    [u'Sample Person']
    >>> [person.displayname
    ...  for person in package_question.getIndirectSubscribers()]
    [u'No Privileges Person', u'Ubuntu Team']

The question's assignee is also part of the indirect subscription list:

    >>> login('foo.bar@canonical.com')
    >>> package_question.assignee = getUtility(IPersonSet).getByName('name16')
    >>> [person.displayname
    ...  for person in package_question.getIndirectSubscribers()]
    [u'Foo Bar', u'No Privileges Person', u'Ubuntu Team']

Notifications are sent to the list of direct and indirect subscribers.
The notification recipients list can be obtained by using the
getSubscribers() method.

    >>> login('no-priv@canonical.com')
    >>> [person.displayname for person in firefox_question.getSubscribers()]
    [u'No Privileges Person', u'Sample Person']

(More documentation on the question notifications can be found in
'answer-tracker-notifications.txt'.)

== Workflow ==

A question status should not be manipulated directly but through the
workflow methods.

The complete question workflow is documented in
'answer-tracker-workflow.txt'.

== Bug Linking ==

Question implements the IBugLinkTarget interface which makes it possible
to link bug report to question.

    >>> from canonical.launchpad.interfaces import IBugLinkTarget
    >>> verifyObject(IBugLinkTarget, firefox_question)
    True

(See ../interfaces/ftests/buglinktarget.txt for the documentation and
test of the IBugLinkTarget interface.)

When a bug is linked to a question, the question's owner is subscribed to
the bug.

    >>> from canonical.launchpad.interfaces import IBugSet
    >>> bug7 = getUtility(IBugSet).get(7)
    >>> bug7.isSubscribed(firefox_question.owner)
    False
    >>> firefox_question.linkBug(bug7)
    <QuestionBug...>
    >>> bug7.isSubscribed(firefox_question.owner)
    True

When the link is removed, the owner is unsubscribed:

    >>> firefox_question.unlinkBug(bug7)
    <QuestionBug...>
    >>> bug7.isSubscribed(firefox_question.owner)
    False
