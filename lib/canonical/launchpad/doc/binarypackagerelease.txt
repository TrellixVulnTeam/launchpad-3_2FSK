= BinaryPackageRelease =

BinaryPackageRelease stores unique versions of binarypackagenames
across build records.

   >>> from canonical.launchpad.database import BinaryPackageRelease
   >>> from canonical.launchpad.interfaces import (
   ...       IBinaryPackageRelease, IBinaryPackageReleaseSet)
   >>> from canonical.launchpad.webapp.testing import verifyObject

   >>> firefox_bin_release = BinaryPackageRelease.get(12)
   >>> verifyObject(IBinaryPackageRelease, firefox_bin_release)
   True


Useful properties:

   >>> firefox_bin_release.name, firefox_bin_release.version
   (u'mozilla-firefox', u'0.9')

   >>> firefox_bin_release.lastversions()
   []
   >>> from canonical.launchpad.interfaces import IDistroSeriesSet
   >>> warty = getUtility(IDistroSeriesSet).get(1)
   >>> warty.name
   u'warty'
   >>> hoary = getUtility(IDistroSeriesSet).get(3)
   >>> hoary.name
   u'hoary'

Retrieve the respective DistributionSourcePackageRelease, which allow
us to easily link to a source reference published in the web-ui.

   >>> from canonical.launchpad.interfaces import (
   ...     IDistributionSourcePackageRelease)
   >>> verifyObject(
   ...    IDistributionSourcePackageRelease,
   ...    firefox_bin_release.distributionsourcepackagerelease)
   True

The 'is_new' property tells us whether or not this
BinaryPackageRelease has ever been published for the DistroArchSeries
it was built for. If not, then 'is_new' will be True, otherwise False.

   >>> firefox_bin_release.is_new
   False

   >>> pmount_bin_release = BinaryPackageRelease.get(20)
   >>> pmount_bin_release.name, pmount_bin_release.version
   (u'pmount', u'0.1-1')

   >>> pmount_bin_release.is_new
   True

The IBinaryPackageNameSet.getNotNewByNames() returns all the
BinaryPackageName records for BinaryPackageReleases that are published
in the supplied distroseries in the archives with the supplied
BinaryPackageNames.  This is a way of quickly establishing the "is_new"
value for a range of packages all at the same time, although it returns
old (published) packages, not new ones.  However, the new packages can
be quickly ascertained through a set operation.

    >>> from zope.security.proxy import removeSecurityProxy
    >>> from canonical.launchpad.interfaces.binarypackagename import (
    ...     IBinaryPackageNameSet)
    >>> foobar_name = getUtility(IBinaryPackageNameSet)['foobar']
    >>> name_ids = (
    ...     foobar_name.id,
    ...     pmount_bin_release.binarypackagename.id,
    ...     firefox_bin_release.binarypackagename.id)
    >>> archive_ids = removeSecurityProxy(
    ...     warty.distribution.all_distro_archive_ids)
    >>> names = getUtility(IBinaryPackageNameSet).getNotNewByNames(
    ...     name_ids, warty, archive_ids)

    >>> for name in sorted(names):
    ...     print name.name
    mozilla-firefox
    pmount

Passing no name_ids gives the EmptyResultSet.

    >>> getUtility(IBinaryPackageNameSet).getNotNewByNames(
    ...     [], warty, archive_ids).count()
    0


Check IBinaryPackageRelease.override() behaviour:

The override method does implicitly exactly the same than:

   BinaryPackagerelease.set(component=new_component,
                            section=new_section,
                            priority=new_priority)

but it only sets the not-empty given arguments, so you can override the
attributes exclusively. It only exists to improve the code clarity,
in ftp-master/queue tool and other scripts.

Display the current firefox component and section:

   >>> firefox_bin_release.component.name, firefox_bin_release.section.name
   (u'main', u'base')

Fetch brand new component, section and priority:

   >>> from canonical.launchpad.interfaces import (
   ...     IComponentSet, ISectionSet)
   >>> from canonical.launchpad.interfaces import PackagePublishingPriority
   >>> new_comp = getUtility(IComponentSet)['universe']
   >>> new_sec = getUtility(ISectionSet)['mail']
   >>> new_priority = PackagePublishingPriority.IMPORTANT

Override the current firefox with new component/section/priority:

   >>> firefox_bin_release.override(component=new_comp, section=new_sec,
   ...              priority=new_priority)

Check if it got overridden correctly:

   >>> firefox_bin_release.component.name, firefox_bin_release.section.name, firefox_bin_release.priority.name
   (u'universe', u'mail', 'IMPORTANT')

Override again; ensure that only the changed item actually changes:

   >>> new_sec = getUtility(ISectionSet)['net']
   >>> firefox_bin_release.override(section=new_sec)
   >>> (firefox_bin_release.component.name,
   ...  firefox_bin_release.section.name,
   ...  firefox_bin_release.priority.name)
   (u'universe', u'net', 'IMPORTANT')


Abort transaction to avoid error propagation of the new attributes:

   >>> import transaction
   >>> transaction.abort()


BinaryPackageReleaseSet utility:

   >>> binset = getUtility(IBinaryPackageReleaseSet)
   >>> verifyObject(IBinaryPackageReleaseSet, binset)
   True

   >>> ret = binset.findByNameInDistroSeries(warty, 'cdr')
   >>> for item in ret:
   ...     print item.name
   cdrkit

Note that two pmounts are returned because they are published in
different architectures:

   >>> ret = binset.getByNameInDistroSeries(hoary, 'pmount')
   >>> for item in ret:
   ...     print item.name
   pmount
   pmount

   >>> result = binset.findByNameInDistroSeries(warty, 'moz')
   >>> print len(list(result))
   5
   >>> result = binset.findByNameInDistroSeries(warty, 'nosuchpackage')
   >>> print len(list(result))
   0
   >>> result = binset.findByNameInDistroSeries(
   ...      warty, 'Web Browser', fti=True)
   >>> print len(list(result))
   2
   >>> result = binset.findByNameInDistroSeries(
   ...     warty, 'X50keBLvzk', fti=True)
   >>> print len(list(result))
   0
   >>> result = binset.findByNameInDistroSeries(
   ...     warty, 'moz', archtag="nosucharch")
   >>> print len(list(result))
   0


getByNameInDistroSeries
------------------------

   >>> result = binset.getByNameInDistroSeries(warty)
   >>> print len(list(result))
   9
   >>> result = binset.getByNameInDistroSeries(warty, 'mozilla-firefox')
   >>> print len(list(result))
   3
   >>> result = binset.getByNameInDistroSeries(warty, 'nosuchpackage')
   >>> print len(list(result))
   0
   >>> result = binset.getByNameInDistroSeries(
   ...     warty, 'mozilla-firefox', version='0.9')
   >>> print len(list(result))
   2
   >>> result = binset.getByNameInDistroSeries(
   ...     warty, 'mozilla-firefox', version='nosuchversion')
   >>> print len(list(result))
   0
   >>> result = binset.getByNameInDistroSeries(
   ...     warty, 'mozilla-firefox', archtag='i386')
   >>> print len(list(result))
   2
   >>> result = binset.getByNameInDistroSeries(
   ...     warty, 'mozilla-firefox', archtag='nosucharch')
   >>> print len(list(result))
   0

XXX: bug 5947, still lacking tests for getByNameVersion, getByArchTag,
     getDistroSeriesPackages and getBySourceName -- kiko, 2006-02-22

