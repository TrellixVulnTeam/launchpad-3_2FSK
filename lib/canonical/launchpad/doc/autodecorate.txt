
= AutoDecorate =

AutoDecorate is a metaclass factory that can be used to make a class
implicitely wrap all its methods with one or more decorators.

    >>> def decorator_1(func):
    ...     def decorated_1(*args, **kw):
    ...         print 'Decorated 1'
    ...         return func(*args, **kw)
    ...     return decorated_1

    >>> def decorator_2(func):
    ...     def decorated_2(*args, **kw):
    ...         print 'Decorated 2'
    ...         return func(*args, **kw)
    ...     return decorated_2

    >>> from canonical.autodecorate import AutoDecorate

    >>> class MyClass(object):
    ...     __metaclass__ = AutoDecorate(decorator_1, decorator_2)
    ...     def method_a(self):
    ...         print 'Method A'
    ...     def method_b(self):
    ...         print 'Method B'

    >>> obj = MyClass()

    >>> obj.method_a()
    Decorated 2
    Decorated 1
    Method A

    >>> obj.method_b()
    Decorated 2
    Decorated 1
    Method B

