= Creating Specification Branch Links =

Blueprints (aka Specifications) and branches can be linked to show
intention of the branch to implement the blueprint.

Blueprints and branches can be linked together from either the
default blueprint page or the default branch page.

== From the branch page ==

There is a "Link to blueprint" item in the actions menu that is visible
to everybody but which links to a page restricted with the
launchpad.AnyPerson permission.

If the user is not logged in, they will be asked to log in.

    >>> anon_browser.open(
    ...     'http://code.launchpad.dev/~name12/firefox/main')
    >>> anon_browser.getLink('Link to blueprint').click()
    Traceback (most recent call last):
    ...
    Unauthorized: (...launchpad.AnyPerson')

    >>> def printSpecBranchLinks(browser):
    ...     tags = find_tags_by_class(browser.contents, 'spec-branch-summary')
    ...     if len(tags) == 0:
    ...         print 'No spec branch links'
    ...     else:
    ...         for tag in tags:
    ...             print extract_text(tag)

When linking from a branch to a spec, a select widget is used.  This
widget is populated with the specs for the product that the branch is
associated with.

    >>> browser = setupBrowser(auth="Basic test@canonical.com:test")
    >>> browser.open(
    ...     'http://code.launchpad.dev/~name12/firefox/main')
    >>> printSpecBranchLinks(browser)
    No spec branch links

    >>> browser.getLink('Link to blueprint').click()
    >>> browser.title
    'Link branch ...Mozilla Firefox Mainline... to a blueprint'

    >>> browser.getControl('Blueprint').value = ['canvas']
    >>> browser.getControl('Continue').click()
    >>> printSpecBranchLinks(browser)
    Support &lt;canvas&gt; Objects (Medium) - edit

Attempting to link to the same blueprint again gives an error.

    >>> browser.getLink('Link to blueprint').click()
    >>> browser.getControl('Blueprint').value = ['canvas']
    >>> browser.getControl('Continue').click()
    >>> for message in get_feedback_messages(browser.contents):
    ...     print message
    There is 1 error.
    The blueprint "Support &lt;canvas&gt; Objects" is already linked to this branch


== From the blueprint page ==

The main blueprint page has an action 'Link to branch'.  This allows
the user to specify a branch to link to the blueprint.

    >>> browser.open(
    ...     'http://blueprints.launchpad.dev/firefox/+spec/svg-support')
    >>> browser.getLink('Link to branch').click()
    >>> browser.getControl('Branch').value = '~sabdfl/firefox/release-0.8'
    >>> browser.getControl('Continue').click()

The blueprint page shows the linked branches in a portlet.

    >>> print extract_text(find_portlet(browser.contents, 'Branches'))
    Branches
    release-0.8: Mozilla Firefox 0.8


== Editing a Branch Link ==

The edit link in the branches portlet takes us to a form that can be
used to edit the summary of the branch link:

    >>> browser.getLink(url='branch/sabdfl/firefox/release-0.8').click()
    >>> browser.getControl('Summary').value = 'New summary'
    >>> browser.getControl('Update').click()

The new summary now appears in the branches portlet:

    >>> print extract_text(find_portlet(browser.contents, 'Branches'))
    Branches
    release-0.8: Mozilla Firefox 0.8
      New summary


== Deleting a Branch Link ==

Users can delete the branch link from the branch link page:

    >>> browser.getLink(url='+branch/sabdfl/firefox/release-0.8').click()
    >>> browser.getControl('Delete').click()

The branch is now no longer listed in the portlet:

    >>> print find_portlet(browser.contents, 'Branches')
    None


== Inline editing from the branch page ==

The main branch page has some javascript to show a form to edit
the spec-branch link.

    >>> browser.open(
    ...     'http://code.launchpad.dev/~name12/firefox/main')
    >>> printSpecBranchLinks(browser)
    Support &lt;canvas&gt; Objects (Medium) - edit

Clicking on the edit link shows the form.  Unfortunately the
testbrowser cannot handle javascript.  In these situations
clicking on edit takes the user to the normal edit page for
the spec-branch link.

    >>> browser.getLink('edit').click()
    >>> print browser.title
    Edit blueprint branch status
