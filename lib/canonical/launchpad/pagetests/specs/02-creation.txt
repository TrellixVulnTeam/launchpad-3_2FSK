
Creating Specifications
=======================

And on both Product and Distribution, we should be able to add a
specification. Let's make sure we can see the relevant page on a Product.

  >>> browser.addHeader('Authorization', 'Basic carlos@canonical.com:test')
  >>> browser.open('http://blueprints.launchpad.dev/firefox/+addspec')
  >>> browser.url
  'http://blueprints.launchpad.dev/firefox/+addspec'

Let's also validate that a new spec's form page has the appropriate default
specification status.

  >>> browser.getControl(name='field.status').value
  ['New']


And now, on a distribution.

  >>> browser.addHeader('Authorization', 'Basic carlos@canonical.com:test')
  >>> browser.open('http://blueprints.launchpad.dev/ubuntu/+addspec')
  >>> browser.url
  'http://blueprints.launchpad.dev/ubuntu/+addspec'
  >>> browser.getControl(name='field.status').value
  ['New']


Let's go one step further and confirm that we can actually POST to that
form, to register a new specification. We'll do it on the Ubuntu
distribution.

  >>> browser.addHeader('Authorization', 'Basic carlos@canonical.com:test')
  >>> browser.open('http://blueprints.launchpad.dev/ubuntu/+addspec')
  >>> browser.getControl(name='field.name').value = 'networkmagic'
  >>> browser.getControl(
  ...   name='field.title').value = ('Network Magic - Automatic Network'
  ...       'Detection')
  >>> browser.getControl(
  ...   name='field.specurl').value = ('http://wiki.ubuntu.com/NetworkMagic')
  >>> summary = (
  ...   "Users are increasingly using multiple"
  ...   "networks. Being able to seamlessly move between networks whilst"
  ...   "remembering the correct settings for each network would greatly"
  ...   "enhance Ubuntu's usability for mobile professionals. Many network"
  ...   "dependent services should only be run when the system is positive"
  ...   "that it has a network. This would greatly enhance the system's"
  ...   "flexibility and responsiveness.")
  >>> browser.getControl(name='field.summary').value = summary
  >>> browser.getControl(name='field.status').value = ['Approved']
  >>> browser.getControl(name='field.assignee').value = 'daf@canonical.com'
  >>> browser.getControl(name='field.drafter').value = 'carlos@canonical.com'
  >>> browser.getControl(name='field.approver').value = 'tsukimi@quaqua.net'
  >>> browser.getControl('Register Blueprint').click()
  >>> browser.url
  'http://blueprints.launchpad.dev/ubuntu/+spec/networkmagic'


OK, that created a new specification. Let's make sure we can see it.

  >>> url = 'http://blueprints.launchpad.dev/ubuntu/+spec/networkmagic'
  >>> browser.open(url)
  >>> browser.url
  'http://blueprints.launchpad.dev/ubuntu/+spec/networkmagic'

Now we test if the specification name validator is working trying to register
a spec with the same name.

  >>> browser.addHeader('Authorization', 'Basic carlos@canonical.com:test')
  >>> browser.open('http://blueprints.launchpad.dev/ubuntu/+addspec')
  >>> browser.getControl(name='field.name').value = 'networkmagic'
  >>> browser.getControl(name='field.title').value = ('Network Magic'
  ...       '- Automatic Network Detection')
  >>> browser.getControl(
  ...   name='field.specurl').value = ('http://wiki.ubuntu.com/NetworkMagic')
  >>> browser.getControl(name='field.summary').value = ("Users are"
  ...       "increasingly using multiple networks.")
  >>> browser.getControl(name='field.status').value = ['Approved']
  >>> browser.getControl(name='field.assignee').value = 'daf@canonical.com'
  >>> browser.getControl(name='field.drafter').value = 'carlos@canonical.com'
  >>> browser.getControl(name='field.approver').value = 'tsukimi@quaqua.net'
  >>> browser.getControl('Register Blueprint').click()
  >>> browser.url
  'http://blueprints.launchpad.dev/ubuntu/+addspec'

Seeing that we were redirected again to the addspec page is a good sign
(something prevented the spec from being registered) however better make sure
this happened due to the right reason.

  >>> 'is already in use by another specification' in browser.contents
  True

And we test again the validator using a invalid name.

  >>> browser.addHeader('Authorization', 'Basic carlos@canonical.com:test')
  >>> browser.open('http://blueprints.launchpad.dev/ubuntu/+addspec')
  >>> browser.getControl(name='field.name').value = 'NetworkMagic'
  >>> browser.getControl(name='field.title').value = (
  ...   'Network Magic - Automatic Network Detection')
  >>> browser.getControl(name='field.specurl').value = (
  ...   'http://wiki.ubuntu.com/NetworkMagic')
  >>> browser.getControl(name='field.summary').value = (
  ...   "Users are increasingly using multiple networks.")
  >>> browser.getControl(name='field.status').value = ['Approved']
  >>> browser.getControl(name='field.assignee').value = 'daf@canonical.com'
  >>> browser.getControl(name='field.drafter').value = 'carlos@canonical.com'
  >>> browser.getControl(name='field.approver').value = 'tsukimi@quaqua.net'
  >>> browser.getControl('Register Blueprint').click()
  >>> browser.url
  'http://blueprints.launchpad.dev/ubuntu/+addspec'
  >>> "Invalid name 'NetworkMagic'" in browser.contents
  True


Now we test the URL field validator trying to register a new spec with the same
URL.

  >>> browser.addHeader('Authorization', 'Basic carlos@canonical.com:test')
  >>> browser.open('http://blueprints.launchpad.dev/ubuntu/+addspec')
  >>> browser.getControl(name='field.name').value = 'dupenetworkmagic'
  >>> browser.getControl(name='field.title').value = (
  ...   'This is a dupe Network Magic Spec')
  >>> browser.getControl(name='field.specurl').value = (
  ...   'http://wiki.ubuntu.com/NetworkMagic')
  >>> browser.getControl(name='field.summary').value = "Users are increasingly"
  >>> browser.getControl(name='field.status').value = ['Approved']
  >>> browser.getControl(name='field.assignee').value = 'daf@canonical.com'
  >>> browser.getControl(name='field.drafter').value = 'carlos@canonical.com'
  >>> browser.getControl(name='field.approver').value = 'tsukimi@quaqua.net'
  >>> browser.getControl('Register Blueprint').click()
  >>> browser.url
  'http://blueprints.launchpad.dev/ubuntu/+addspec'
  >>> "is already registered by another specification" in browser.contents
  True


System-wide blueprint registration
==================================

There is also a form which lets user create a new Blueprint for any product
or distribution, from the Blueprints app home page.

First, we try to create a spec that has the same name as an existing one.

  >>> browser.addHeader('Authorization', 'Basic carlos@canonical.com:test')
  >>> browser.open('http://blueprints.launchpad.dev/specs/+new')
  >>> browser.getControl(name='field.target').value = 'ubuntu'
  >>> browser.getControl(name='field.name').value = 'networkmagic'
  >>> browser.getControl(
  ...   name='field.title').value = ('Network Magic - Automatic Network'
  ...       'Detection')
  >>> browser.getControl(
  ...   name='field.specurl').value = ('http://wiki.ubuntu.com/NetworkMagic')
  >>> summary = (
  ...   "Users are increasingly using multiple"
  ...   "networks. Being able to seamlessly move between networks whilst"
  ...   "remembering the correct settings for each network would greatly"
  ...   "enhance Ubuntu's usability for mobile professionals. Many network"
  ...   "dependent services should only be run when the system is positive"
  ...   "that it has a network. This would greatly enhance the system's"
  ...   "flexibility and responsiveness.")
  >>> browser.getControl(name='field.summary').value = summary
  >>> browser.getControl(name='field.status').value = ['Approved']
  >>> browser.getControl(name='field.assignee').value = 'daf@canonical.com'
  >>> browser.getControl(name='field.drafter').value = 'carlos@canonical.com'
  >>> browser.getControl(name='field.approver').value = 'tsukimi@quaqua.net'
  >>> browser.getControl('Register Blueprint').click()
  >>> browser.url
  'http://blueprints.launchpad.dev/specs/+new'

So, we were not redirected to the spec page, because the spec was not
created. Let's check that this happened because the name is taken:

  >>> 'There is already a blueprint with this name.' in browser.contents
  True


Now, we'll register a spec with a unique name and it should go straight
through.

  >>> browser.open('http://blueprints.launchpad.dev/specs/+new')
  >>> browser.getControl(name='field.target').value = 'ubuntu'
  >>> browser.getControl(name='field.name').value = 'brandnewspec'
  >>> browser.getControl(
  ...   name='field.title').value = ('Network Voodoo - Automatic Network'
  ...       'Detection')
  >>> browser.getControl(
  ...   name='field.specurl').value = ('http://wiki.ubuntu.com/NetworkVoodoo')
  >>> summary = (
  ...   "Users are increasingly using multiple"
  ...   "networks. Being able to seamlessly move between networks whilst"
  ...   "that it has a network. This would greatly enhance the system's"
  ...   "flexibility and responsiveness.")
  >>> browser.getControl(name='field.summary').value = summary
  >>> browser.getControl(name='field.status').value = ['Approved']
  >>> browser.getControl(name='field.assignee').value = 'daf@canonical.com'
  >>> browser.getControl(name='field.drafter').value = 'carlos@canonical.com'
  >>> browser.getControl(name='field.approver').value = 'tsukimi@quaqua.net'
  >>> browser.getControl('Register Blueprint').click()
  >>> browser.url
  'http://blueprints.launchpad.dev/ubuntu/+spec/brandnewspec'


