=========================
Binary Package Publishing
=========================

Binary package publishing details are available via a custom operation on
archives, getPublishedBinaries().

    >>> cprov_archive = webservice.get("/~cprov/+archive/ppa").jsonBody()
    >>> pubs = webservice.named_get(
    ...     cprov_archive['self_link'], 'getPublishedBinaries').jsonBody()

    >>> def print_publications(pubs):
    ...     for display_name in sorted(
    ...         entry['display_name'] for entry in pubs['entries']):
    ...         print display_name

    >>> print_publications(pubs)
    mozilla-firefox 1.0 in warty hppa
    mozilla-firefox 1.0 in warty i386
    pmount 0.1-1 in warty hppa
    pmount 0.1-1 in warty i386

getPublishedBinaries() can accept some optional filtering parameters to reduce
the number of returned publications.

Search by name and version using an exact match:

    >>> pubs = webservice.named_get(
    ...     cprov_archive['self_link'], 'getPublishedBinaries',
    ...     binary_name="pmount", version="0.1-1",
    ...     exact_match=True).jsonBody()
    >>> print_publications(pubs)
    pmount 0.1-1 in warty hppa
    pmount 0.1-1 in warty i386

Search by publishing status:

    >>> pubs = webservice.named_get(
    ...     cprov_archive['self_link'], 'getPublishedBinaries',
    ...     status="Published").jsonBody()
    >>> print_publications(pubs)
    mozilla-firefox 1.0 in warty hppa
    mozilla-firefox 1.0 in warty i386
    pmount 0.1-1 in warty hppa
    pmount 0.1-1 in warty i386

Search by distroseries and pocket:

    >>> distros = webservice.get("/distros").jsonBody()
    >>> ubuntu = distros['entries'][0]
    >>> warty = webservice.named_get(
    ...     ubuntu['self_link'], 'getSeries',
    ...     name_or_version='warty').jsonBody()

    >>> pubs = webservice.named_get(
    ...     cprov_archive['self_link'], 'getPublishedBinaries',
    ...     distro_series=warty['self_link'], pocket="Release").jsonBody()
    >>> print_publications(pubs)
    mozilla-firefox 1.0 in warty hppa
    mozilla-firefox 1.0 in warty i386
    pmount 0.1-1 in warty hppa
    pmount 0.1-1 in warty i386

Each binary publication exposes a number of properties:

    >>> from lazr.restful.testing.webservice import pprint_entry
    >>> pprint_entry(pubs['entries'][0])
    archive_link: u'http://.../~cprov/+archive/ppa'
    binary_package_name: u'mozilla-firefox'
    binary_package_version: u'1.0'
    component_name: u'main'
    date_created: u'2007-08-10T13:00:00+00:00'
    date_made_pending: None
    date_published: u'2007-08-10T13:00:01+00:00'
    date_removed: None
    date_superseded: None
    display_name: u'mozilla-firefox 1.0 in warty hppa'
    distro_arch_series_link: u'http://.../ubuntu/warty/hppa'
    pocket: u'Release'
    priority_name: u'IMPORTANT'
    removal_comment: None
    removed_by_link: None
    resource_type_link: u'http://.../#binary_package_publishing_history'
    scheduled_deletion_date: None
    section_name: u'base'
    self_link: u'http://.../~cprov/+archive/ppa/+binarypub/30'
    status: u'Published'


Security
========

When Celso's PPA becomes private ...

    >>> login("foo.bar@canonical.com")

    >>> from zope.component import getUtility
    >>> from lp.registry.interfaces.person import IPersonSet

    >>> cprov = getUtility(IPersonSet).getByName('cprov')
    >>> cprov.archive.buildd_secret = 'boing'
    >>> cprov.archive.private = True

    >>> transaction.commit()

    >>> logout()

Only Celso (or anyone who participates on the PPA owner team) has
access to the PPA publications.

    >>> cprov_bins_response = webservice.named_get(
    ...     cprov_archive['self_link'], 'getPublishedBinaries')
    >>> print cprov_bins_response.getOutput()
    HTTP/1.1 200 Ok
    ...

Any other user attempt would result in a 401 error.

    >>> response = user_webservice.named_get(
    ...     cprov_archive['self_link'], 'getPublishedBinaries')
    >>> print response.getOutput()
    HTTP/1.1 401 Unauthorized
    ...

If the user attempts to access the publication URL directly they will
also fail in their quest.

    >>> private_publication_url = pubs['entries'][0]['self_link']
    >>> response = user_webservice.get(private_publication_url)
    >>> print response.getOutput()
    HTTP/1.1 401 Unauthorized
    ...

