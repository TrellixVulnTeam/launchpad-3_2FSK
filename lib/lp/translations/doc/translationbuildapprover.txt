= TranslationBuildApprover =

The TranslationBuildApprover is a much simpler approver than the
TranslationBranchApprover.

    >>> from lp.translations.interfaces.translationimportqueue import (
    ...     ITranslationImportQueue)
    >>> queue = getUtility(ITranslationImportQueue)
    >>> productseries = factory.makeProductSeries()
    >>> importer_person = factory.makePerson()
    >>> from lp.translations.model.approver import TranslationBuildApprover
    >>> approver = TranslationBuildApprover(productseries=productseries)

It will approve all template files that it can derive a name from.

    >>> login("foo.bar@canonical.com")
    >>> def makeQueueEntry(path, series=None):
    ...     if series is None:
    ...         series = productseries
    ...     return queue.addOrUpdateEntry(
    ...         path, "#Dummy content.", False, importer_person,
    ...         productseries=series)
    >>> my_entry = makeQueueEntry("po/my_domain.pot")
    >>> print my_entry.status.title
    Needs Review
    >>> my_entry = approver.approve(my_entry)
    >>> print my_entry.status.title
    Approved

Template files with generic names will only be approved, if there is not
already a template. A template with the name of the product is created.

    >>> empty_product = factory.makeProduct(name='fooproduct')
    >>> empty_series = factory.makeProductSeries(product=empty_product)
    >>> first_entry = makeQueueEntry('po/messages.pot', empty_series)
    >>> empty_approver = TranslationBuildApprover(productseries=empty_series)
    >>> first_entry = empty_approver.approve(first_entry)
    >>> print first_entry.status.title
    Approved
    >>> print first_entry.potemplate.domain
    fooproduct
    >>> print first_entry.potemplate.name
    fooproduct

Otherwise, generic names will not be approved.

    >>> generic_entry = makeQueueEntry("po/messages.pot")
    >>> generic_entry = approver.approve(generic_entry)
    >>> print generic_entry.status.title
    Needs Review

If a template with that name exists, it will target the import entry to it,
otherwise it will create a new template.

    >>> print my_entry.potemplate.translation_domain
    my_domain
    >>> print my_entry.potemplate.name
    my-domain
    >>> my_other_entry = makeQueueEntry("my_domain/messages.pot")
    >>> my_other_entry = approver.approve(my_other_entry)
    >>> print my_other_entry.status.title
    Approved
    >>> print my_entry.potemplate == my_other_entry.potemplate
    True

