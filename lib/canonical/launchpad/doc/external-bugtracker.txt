Monitoring External Bug Trackers in Malone
==========================================

Malone allows you to monitor bugs in external bug tracking systems. This
document discusses the API of external bug trackers. To learn more about
bug watches, the object that represents the link between a Malone bug
and an external bug, see bugwatch.txt.

    >>> import pytz
    >>> from datetime import datetime, timedelta
    >>> from canonical.database.sqlbase import flush_database_updates
    >>> from canonical.launchpad.interfaces import IBugTrackerSet
    >>> bugtracker_set = getUtility(IBugTrackerSet)
    >>> mozilla_bugzilla = bugtracker_set.getByName('mozilla.org')
    >>> now = datetime.now(pytz.timezone('UTC'))

We can get a list of all the bug tracker's bug watches needing to be
updated.  The current criteria for needing a update is that it hasn't
been updated in the last 23 hours.

    >>> bug_watches = mozilla_bugzilla.watches
    >>> print bug_watches.count()
    4

    >>> print bug_watches[0].remotebug, bug_watches[0].bug.id
    2000 1
    >>> bug_watches[0].lastchecked = None

    >>> print bug_watches[1].remotebug, bug_watches[1].bug.id
    123543 1
    >>> bug_watches[1].lastchecked = now

    >>> print bug_watches[2].remotebug, bug_watches[2].bug.id
    42 1
    >>> bug_watches[2].lastchecked = now - timedelta(hours=12)

Note that bugtracker.watches may produce multiple watches for the same
remote bug.

    >>> print bug_watches[3].remotebug, bug_watches[3].bug.id
    42 2
    >>> bug_watches[3].lastchecked = now - timedelta(hours=36)

    >>> flush_database_updates()
    >>> for bug_watch in mozilla_bugzilla.getBugWatchesNeedingUpdate(23):
    ...     print bug_watch.remotebug, bug_watch.bug.id
    2000 1
    42 2


Top Bug Trackers
================

The Malone front page shows a list of the top Malone bug trackers, as
ordered by the number of bugs being monitored by Malone in each of
them. Use IBugTrackerSet.getMostActiveBugTrackers to get this list.

    >>> top_trackers = bugtracker_set.getMostActiveBugTrackers(limit=3)
    >>> [(tracker.name, tracker.watches.count()) for tracker in top_trackers]
    [(u'mozilla.org', 4), (u'gnome-bugzilla', 1), (u'debbugs', 0)]
