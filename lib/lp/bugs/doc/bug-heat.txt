Calculating bug heat
====================

Launchpad bugs each have a 'heat' rating. This is an indicator of how
problematic a given bug is to the community and can be used to determine
which bugs should be tackled first.

A new bug will have a heat of zero.

    >>> bug_owner = factory.makePerson()
    >>> bug = factory.makeBug(owner=bug_owner)
    >>> bug.heat
    0

The bug's heat can be set by calling its setHeat() method.

    >>> bug.setHeat(42)
    >>> bug.heat
    42


The BugHeatUpdater class
---------------------------

In order to calculate bug heat we need to use the BugHeatUpdater
class, which is designed precisely for that task. It's part of the garbo
module and runs as part of the garbo-daily cronjob.

    >>> from canonical.launchpad.scripts.garbo import BugHeatUpdater
    >>> from canonical.launchpad.scripts import FakeLogger

    >>> update_bug_heat = BugHeatUpdater(FakeLogger())

BugHeatUpdater implements ITunableLoop and as such is callable. Calling
it as a method will update the heat for all the bugs currently held in
Launchpad.

Before update_bug_heat is called, bug 1 will have no heat.

    >>> from zope.component import getUtility
    >>> from lp.bugs.interfaces.bug import IBugSet
    >>> bug_1 = getUtility(IBugSet).get(1)

    >>> bug_1.heat
    0

    >>> update_bug_heat(chunk_size=1)
    DEBUG Updating 1 Bugs (starting id: ...)
    ...

Bug 1's heat will now be greater than 0.

    >>> bug_1.heat > 0
    True


Caculating the maximum heat for a target
----------------------------------------

When we update the heat value for a bug, the maximum heat value for the targets
for all of its tasks is calculated and cached.

    >>> product = factory.makeProduct()
    >>> bug = factory.makeBug(product=product)
    >>> print product.max_bug_heat
    None
    >>> bug.setHeat(123)
    >>> print product.max_bug_heat
    123

The maximum heat for a project is the value for tasks on all its products.

    >>> project = factory.makeProject()
    >>> product.project = project
    >>> bug.setHeat(123)
    >>> print project.max_bug_heat
    123

A DistributionSourcePackage has its own maximum heat.

    >>> dsp = factory.makeDistributionSourcePackage()
    >>> dsp_task = bug.addTask(bug.owner, dsp)
    >>> print dsp.max_bug_heat
    123

Transitioning from one target to another, calculates the value for the new
target.

    >>> another_product = factory.makeProduct()
    >>> bug.bugtasks[0].transitionToTarget(another_product)
    >>> print another_product.max_bug_heat
    123

ProductSeries and DistroSeries simply delegate to their corresponding Product
or Distribution.

    >>> product_series = factory.makeProductSeries()
    >>> ps_task = bug.addTask(bug.owner, product_series)
    >>> print product_series.max_bug_heat
    123
    >>> print product_series.product.max_bug_heat
    123

    >>> distro_series = factory.makeDistroSeries()
    >>> ds_task = bug.addTask(bug.owner, distro_series)
    >>> print distro_series.max_bug_heat
    123
    >>> print distro_series.distribution.max_bug_heat
    123

