= Hierarchical menus =

The location bar aids users in navigating the depths of Launchpad.  It is
built from a series of Breadcrumb objects after Zope's object traversal
step.

== Discovering breadcrumbs ==

The Hierarchy class builds the breadcrumbs by looking at each object in
the request.traversed_objects attribute.  If a traversed object can be
adapted to IBreadcrumb, then it is added to the breadcrumbs list.

First, we need a hierarchy of objects.

    >>> from zope.component import getMultiAdapter, provideAdapter
    >>> from zope.interface import Interface, implements

    >>> class ICookbook(Interface):
    ...     """A cookbook for holding recipes."""

    >>> class IRecipe(Interface):
    ...     """A recipe in a cookbook."""

    >>> from canonical.launchpad.webapp.interfaces import ICanonicalUrlData

    >>> class BaseContent:
    ...     implements(ICanonicalUrlData)
    ...
    ...     def __init__(self, name, parent):
    ...         self.name = name
    ...         self.path = name
    ...         self.inside = parent
    ...         self.rootsite = None

    >>> class Root(BaseContent):
    ...     """ The site root."""

    >>> class Cookbook(BaseContent):
    ...     implements(ICookbook)

    >>> class Recipe(BaseContent):
    ...     implements(IRecipe)

Next, we add the objects to the request's list of traversed objects, so
the hierarchy will discover them.

    >>> root = Root('', None)
    >>> cookbook = Cookbook('joy-of-cooking', root)
    >>> recipe = Recipe('spam', cookbook)

    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest
    >>> from canonical.launchpad.webapp import urlsplit

    >>> def make_fake_request(url, traversed_objects=None):
    ...     """Return a fake request object for testing."""
    ...     url_parts = urlsplit(url)
    ...     server_url = '://'.join(url_parts[0:2])
    ...     path_info = url_parts[2]
    ...     request = LaunchpadTestRequest(
    ...         SERVER_URL=server_url,
    ...         PATH_INFO=path_info)
    ...     request._traversed_names = path_info.split('/')[1:]
    ...     request.traversed_objects = traversed_objects
    ...     return request

    >>> request = make_fake_request(
    ...     'http://launchpad.dev/joy-of-cooking/spam',
    ...     [root, cookbook, recipe])

The Hierarchy's list of breadcrumbs is empty since none of the objects
have an IBreadcrumb adapter.

    >>> hierarchy = getMultiAdapter((recipe, request), name='+hierarchy')
    >>> hierarchy.items()
    []

Adding the adapters causes the Cookbook and Recipe objects to show up
in the hierarchy.

The IBreadcrumb adapters should return a string that will become the
breadcrumbs's 'text' attribute.

    >>> from canonical.launchpad.webapp.publisher import Breadcrumb
    >>> from canonical.launchpad.webapp.interfaces import IBreadcrumb
    >>> from zope.component import queryAdapter

    >>> def object_to_breadcrumb(context):
    ...     return context.name.capitalize().replace('-', ' ')

    >>> provideAdapter(object_to_breadcrumb, [ICookbook], IBreadcrumb)
    >>> provideAdapter(object_to_breadcrumb, [IRecipe], IBreadcrumb)

    >>> queryAdapter(cookbook, IBreadcrumb)
    'Joy of cooking'

The hierarchy's breadcrumbs are ordered, starting with the breadcrumb
closest to the hierarchy root.

    >>> hierarchy.items()
    [<Breadcrumb
        url='http://launchpad.dev/joy-of-cooking'
        text='Joy of cooking'>,
     <Breadcrumb
        url='http://launchpad.dev/joy-of-cooking/spam'
        text='Spam'>]


== Rendering the list ==

Each Breadcrumb object can display itself.

XXX
