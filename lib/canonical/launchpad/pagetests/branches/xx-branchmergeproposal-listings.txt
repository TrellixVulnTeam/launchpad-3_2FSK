= Listings of branch merge proposals =

From both the main code page for a person or team, or a product, it is
possible to go to a listing of merge proposals that are either needing a
review, or have been approved for landing.


== Create a new product and merge proposals for it ==

Log-in an administrator to avoid permission problems.

    >>> login('foo.bar@canonical.com')
    >>> fooix = factory.makeProduct(name='fooix')

Make a trunk branch and set as the development focus branch.

    >>> trunk = factory.makeBranch(product=fooix)
    >>> fooix.development_focus.user_branch = trunk

Make a single proposal for albert that is needing review.

    >>> albert = factory.makePerson(name='albert')
    >>> branch = factory.makeBranch(
    ...     owner=albert, product=fooix, name='review')
    >>> proposal = branch.addLandingTarget(albert, trunk)
    >>> proposal.requestReview()

Make two proposals for bob, one needing review, and one approved.

    >>> bob = factory.makePerson(name='bob')
    >>> branch = factory.makeBranch(
    ...     owner=bob, product=fooix, name='review')
    >>> proposal = branch.addLandingTarget(bob, trunk)
    >>> proposal.requestReview()

    >>> branch = factory.makeBranch(
    ...     owner=bob, product=fooix, name='approved')
    >>> proposal = branch.addLandingTarget(bob, trunk)
    >>> proposal.approveBranch(trunk.owner, 'some-revision')
    >>> logout()


== Listings from the main product code page ==

Below the branch counts in the main content, there is a paragraph that lists
the number of active reviews and approved merges.

    >>> browser.open('http://code.launchpad.dev/fooix')
    >>> print_tag_with_id(browser.contents, 'merge-counts')
    2 active reviews, 1 approved merge

The 'active reviews' and 'approved merge' text are links to the listing pages
for these.

    >>> browser.getLink('active reviews').click()
    >>> print browser.title
    Active code reviews for Fooix

The listing page also has the summary section.

    >>> print_tag_with_id(browser.contents, 'application-summary')
    4 branches owned by 3 people, ...
    2 active reviews, 1 approved merge ...

The proposals are listed in a table that shows the source and target branches,
who requested the merge, the date the review was requested, and the vote
summary.

    >>> print_tag_with_id(browser.contents, 'proposal-listing')
    Branch Merge Proposal
            Requested By  Date Review Requested   Vote Summary
    lp://dev/~albert/fooix/review &rArr; lp://dev/fooix
            Albert        ...                     no votes (no comments)
    lp://dev/~bob/fooix/review  &rArr; lp://dev/fooix
            Bob           ...                     no votes (no comments)

The approved merges has the date the merge was approved.

    >>> browser.getLink('approved merge').click()
    >>> print browser.title
    Approved merges for Fooix

    >>> print_tag_with_id(browser.contents, 'proposal-listing')
    Branch Merge Proposal     Requested By     Date Reviewed
    lp://dev/~bob/fooix/approved &rArr; lp://dev/fooix
            Bob ...


== Listings from the main person code page ==

The summary before the branch listings also shows the number of active reviews
and approved merges.

    >>> browser.open('http://code.launchpad.dev/~albert')
    >>> print_tag_with_id(browser.contents, 'page-summary')
    Related branches: 1 (1 registered, 1 owned, 1 subscribed)
    1 active review, 0 approved merges

    >>> browser.getLink('approved merges').click()
    >>> print_tag_with_id(browser.contents, 'no-proposals')
    Albert has no approved merges.
