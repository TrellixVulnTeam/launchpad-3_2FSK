= Developer exceptions =

Confirm that launchpad developers get tracebacks and a linkified OOPS if 
an exception occurs when they are logged in, and that other users do not.

Register a page that generates HTTP 500 errors.

    >>> from zope.app.tests import ztapi
    >>> class ErrorView(object):
    ...     """A broken view"""
    ...     def __call__(self, *args, **kw):
    ...         raise Exception('Oops')
    ...
    >>> ztapi.browserView(None, "error-test", ErrorView)

As our test runner runs in 'always show tracebacks' mode, we need to
switch this off for these tests to work

    >>> from canonical.config import config
    >>> show_tracebacks = config.show_tracebacks
    >>> config.show_tracebacks = False
    >>> config.show_tracebacks
    False

First check that Anonymous users don't get tracebacks

    >>> result = http(r"""
    ... GET /error-test HTTP/1.1
    ... """)
    >>> 'Traceback' in str(result)
    False

The OOPS ID is displayed but not linkified.

    >>> print find_main_content(str(result))
    <...
    <h1 class="exception">Oops!</h1>
    ...
    Include the error <abbr>ID</abbr>
    <code class="oopsid">OOPS-...</code>
    in your message.
    ...

Developers logged in via Basic Auth should get tracebacks. In this case,
we are logged in as the foo.bar@canonical.com user

    >>> result = http(r"""
    ... GET /error-test HTTP/1.1
    ... Authorization: Basic Zm9vLmJhckBjYW5vbmljYWwuY29tOnRlc3Q=
    ... """)
    >>> 'Traceback' in str(result)
    True

The OOPS ID is displayed and linkified.

    >>> print find_main_content(str(result))
    <...
    <h1 class="exception">Oops!</h1>
    ...
    Include the error <abbr>ID</abbr>
    <a href=...oops.cgi/OOPS-...><code class="oopsid">OOPS-...</code></a>
    in your message.
    ...

Other users logged in via basic auth will not get tracebacks. In this
case, Carlos

    >>> result = http(r"""
    ... GET /error-test HTTP/1.1
    ... Authorization: Basic Y2FybG9zQGNhbm9uaWNhbC5jb206dGVzdA==
    ... """)
    >>> 'Traceback' in str(result)
    False

The OOPS ID is displayed but not linkified.

    >>> print find_main_content(str(result))
    <...
    <h1 class="exception">Oops!</h1>
    ...
    Include the error <abbr>ID</abbr>
    <code class="oopsid">OOPS-...</code>
    in your message.
    ...


Reset the show_tracebacks config items

    >>> config.show_tracebacks = show_tracebacks

= HTTPCaller handle_errors =

The HTTPCaller instance accepts the handle_errors parameter in case you
want to see tracebacks instead of error pages.

  >>> print http(r"""
  ... GET /whatever HTTP/1.1
  ... """, handle_errors=False)
  Traceback (most recent call last):
  ...
  NotFound: ...

