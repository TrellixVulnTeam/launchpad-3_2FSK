Buildd Scoring
==============

Some tests for build jobs scoring implementation, which envolves the
analysis of each job pending in the queue. The actions to be performed are
described in <https://launchpad.canonical.com/AutoBuildManagement>.
A summary:

 * ETA to build (smaller == more points)
 * Time spent in build queue (longer == more points)
 * urgency
 * priority/seed/component (BASE|DESKTOP|SUPPORTED) [PEND]
 * Overarching policy (SECURITY/UPDATES/RELEASE) [PEND]

    >>> import datetime
    >>> import pytz
    >>> LOCAL_NOW = datetime.datetime.now(pytz.timezone('UTC'))

Let's create a 'mock' class which emulate the real behaviour of
BuildQueue entries.

    >>> from canonical.launchpad.interfaces import IDistributionSet

    >>> ubuntu = getUtility(IDistributionSet)['ubuntu']
    >>> hoary = ubuntu['hoary']
    >>> hoary386 = hoary['i386']
    >>> hoary386.title
    u'The Hoary Hedgehog Release for i386 (x86)'

    >>> from canonical.database.sqlbase import commit
    >>> from canonical.launchpad.interfaces import (
    ...     PackagePublishingPocket, PackagePublishingStatus,
    ...     SourcePackageUrgency)
    >>> from canonical.launchpad.tests.test_publishing import (
    ...     SoyuzTestPublisher)
    >>> from canonical.testing.layers import LaunchpadZopelessLayer

    >>> test_publisher = SoyuzTestPublisher()

    >>> commit()
    >>> LaunchpadZopelessLayer.switchDbUser('launchpad')
    >>> test_publisher.prepareBreezyAutotest()
    >>> commit()
    >>> LaunchpadZopelessLayer.switchDbUser(test_dbuser)

    >>> version = 1

    >>> def setUpBuildQueueEntry(
    ...     component_name='main', urgency=SourcePackageUrgency.HIGH,
    ...     pocket=PackagePublishingPocket.RELEASE,
    ...     date_created=LOCAL_NOW, manual=False):
    ...     global version
    ...     commit()
    ...     LaunchpadZopelessLayer.switchDbUser('launchpad')
    ...     pub = test_publisher.getPubSource(
    ...        sourcename='test-build', version=str(version),
    ...        distroseries=hoary, component=component_name,
    ...        urgency=urgency, pocket=pocket,
    ...        status=PackagePublishingStatus.PUBLISHED)
    ...     commit()
    ...     LaunchpadZopelessLayer.switchDbUser(test_dbuser)
    ...     version += 1
    ...     build = pub.sourcepackagerelease.createBuild(
    ...         hoary386, pub.pocket, pub.archive)
    ...
    ...     build_queue = build.createBuildQueueEntry()
    ...     build_queue.created = date_created
    ...     build_queue.manual = manual
    ...
    ...     return build_queue


 * 3000 points for pocket 'RELEASE',
 * 1000 points for component 'main',
 * 15 points for urgency HIGH.
 * nothing for queue_time

    >>> bq0 = setUpBuildQueueEntry()

    >>> bq0.score()
    >>> bq0.lastscore
    4015

If the archive is private, its score is boosted by 10000:

    >>> commit()
    >>> LaunchpadZopelessLayer.switchDbUser('launchpad')
    >>> bq0.build.archive.private = True
    >>> bq0.score()
    >>> bq0.lastscore
    14015

    >>> LaunchpadZopelessLayer.switchDbUser(test_dbuser)


 * 3000 points for pocket 'RELEASE',
 * 1000 points for main components
 * 5 point for priority LOW
 * nothing for queue_time

    >>> time1 = LOCAL_NOW - datetime.timedelta(seconds=290)
    >>> bq1 = setUpBuildQueueEntry(
    ...      urgency=SourcePackageUrgency.LOW, date_created=time1)

    >>> bq1.score()
    >>> bq1.lastscore
    4005

 * 3000 points for pocket 'RELEASE',
 * 250 points for universe component universe
 * 15 points for priority HIGH
 * 5 points for queue_time ( > 300 seconds)

    >>> time2 = LOCAL_NOW - datetime.timedelta(seconds=310)
    >>> bq2 = setUpBuildQueueEntry(
    ...      component_name='universe', urgency=SourcePackageUrgency.HIGH,
    ...      date_created=time2)

    >>> bq2.score()

    >>> bq2.lastscore
    3270

 * 3000 points for pocket 'RELEASE',
 * nothing for component multiverse
 * 10 points for MEDIUM priority
 * 10 points for queue_time ( > 900 seconds)

    >>> time3 = LOCAL_NOW - datetime.timedelta(seconds=1000)
    >>> bq3 = setUpBuildQueueEntry(
    ...      component_name='multiverse', urgency=SourcePackageUrgency.MEDIUM,
    ...      date_created=time3)

    >>> bq3.score()

    >>> bq3.lastscore
    3020

 * 3000 points for pocket 'RELEASE',
 * 1000 points for main component
 * 20 points for EMERGENCY priority
 * 15 points for queue_time ( > 1800 seconds)

    >>> time4 = LOCAL_NOW - datetime.timedelta(seconds=3590)
    >>> bq4 = setUpBuildQueueEntry(
    ...      component_name='main', urgency=SourcePackageUrgency.EMERGENCY,
    ...      date_created=time4)

    >>> bq4.score()
    >>> bq4.lastscore
    4035

 * 3000 points for pocket 'RELEASE',
 * 750 points for restricted component
 * 5 points for LOW priority
 * 20 points for queue_time ( > 3600 seconds)

    >>> time5 = LOCAL_NOW - datetime.timedelta(seconds=4000)
    >>> bq5 = setUpBuildQueueEntry(
    ...      component_name='restricted', urgency=SourcePackageUrgency.LOW,
    ...      date_created=time5)

    >>> bq5.score()
    >>> bq5.lastscore
    3775

By setting manual attribute of a BuildQueue entry we prevent it to be
rescored, which allows us to set an arbitrary value on it.

    >>> time6 = LOCAL_NOW
    >>> bq6 = setUpBuildQueueEntry(
    ...      urgency=SourcePackageUrgency.LOW, date_created=time6, manual=True)

    >>> bq6.lastscore = 5000

    >>> bq6.score()

    >>> bq6.lastscore
    5000

Let's see how the score varies for different publishing pockets.

We will start with the lowest priority pocket: proposed.

    >>> bq7 = setUpBuildQueueEntry(
    ...     pocket=PackagePublishingPocket.PROPOSED)
    >>> bq7.score()
    >>> bq7.lastscore
    1015

The score will increase by 1500 for the next ranked pocket: backports.

    >>> bq8 = setUpBuildQueueEntry(
    ...     pocket=PackagePublishingPocket.BACKPORTS)
    >>> bq8.score()
    >>> bq8.lastscore
    2515

Going to the next ranked pocket (RELEASE) there will be another score
increase of 1500.

    >>> bq9 = setUpBuildQueueEntry(
    ...     pocket=PackagePublishingPocket.RELEASE)
    >>> bq9.score()
    >>> bq9.lastscore
    4015

Moving up to the UPDATES pocket will bump the score up by another 1500.

    >>> bqa = setUpBuildQueueEntry(
    ...     pocket=PackagePublishingPocket.UPDATES)
    >>> bqa.score()
    >>> bqa.lastscore
    5515

Placing the build in the SECURITY pocket will push its score
up by another 1500.

    >>> bqb = setUpBuildQueueEntry(
    ...     pocket=PackagePublishingPocket.SECURITY)
    >>> bqb.score()
    >>> bqb.lastscore
    7015

This is the lowest score "normal" build job possible (lowest pocket:
proposed, lowest component: multiverse, lowest urgency and less than
5 minutes spent in the queue).

    >>> bq_low = setUpBuildQueueEntry(
    ...     component_name='multiverse', urgency=SourcePackageUrgency.LOW,
    ...     pocket=PackagePublishingPocket.PROPOSED)
    >>> bq_low.score()
    >>> bq_low.lastscore
    5

Builds in rebuild archives should have a score above zero but lower than
the score of build jobs tied to non-rebuild archives.

    >>> from canonical.launchpad.interfaces import ArchivePurpose
    >>> bqc = setUpBuildQueueEntry(
    ...     pocket=PackagePublishingPocket.SECURITY)
    >>> bqc.build.archive.purpose = ArchivePurpose.REBUILD
    >>> bqc.score()
    >>> 0 < bqc.lastscore < bq_low.lastscore
    True
