We need to login in order to add attachments.

  >>> anon_browser.open('http://launchpad.dev/products/firefox/+bug/1')
  >>> anon_browser.getLink('Comment/Attach File').click()
  Traceback (most recent call last):
  ...
  Unauthorized:...

When we're logged in we can access the page.

  >>> user_browser.open('http://launchpad.dev/products/firefox/+bug/1')
  >>> user_browser.getLink('Comment/Attach File').click()

  >>> user_browser.url
  'http://launchpad.dev/products/firefox/+bug/1/+addcomment'

Let's add an attachment. First create a file-like object.

  >>> from cStringIO import StringIO
  >>> foo_file = StringIO('Traceback...')

and proceed to add it. We're not allowed to enter a whitespace-only
title for the attachment

  >>> user_browser.getControl('Include attachment').selected = True
  >>> user_browser.getControl('File').add_file(
  ...   foo_file, 'text/plain', 'foo.txt')
  >>> user_browser.getControl('Description').value = '    '
  >>> user_browser.getControl('Comment').value = 'Added some information'
  >>> user_browser.getControl('Save Changes').click()

  >>> 'An attachment requires a description' in user_browser.contents
  True

We try again with a proper title, note that we leave some leading and
trailing whitespace to test that we strip them:

  >>> foo_file.seek(0)
  >>> user_browser.getControl('Include attachment').selected = True
  >>> user_browser.getControl('File').add_file(
  ...   foo_file, 'text/plain', 'foo.txt')
  >>> user_browser.getControl('Description').value = '   Some information   '
  >>> user_browser.getControl('Save Changes').click()

After we added the attachment, we get redirected to the bug page.

  >>> user_browser.url
  'http://launchpad.dev/products/firefox/+bug/1'

We can check that the attachment is there

  >>> link = user_browser.getLink(url='http://localhost:58000/48/foo.txt')
  >>> link.text
  'Some information'

  >>> 'Added some information' in user_browser.contents
  True

And that we stripped the leading and trailing whitespace correctly

  >>> '   Some information   ' in user_browser.contents
  False
