Product Launchpad usage
=======================

The launchpad usage flags (whether the product uses Bugs, Answers or
Translations officially) are found on the +edit page.

    >>> anon_browser.open('http://launchpad.dev/firefox')
    >>> print anon_browser.title
    Mozilla Firefox in Launchpad

    >>> uses = find_tag_by_id(anon_browser.contents, id='uses')
    >>> print extract_text(uses)
    Uses Launchpad for: Answers and Bug Tracking.

Only the product registrant and the admins have access to this page.

    >>> anon_browser.getLink('Change details')
    Traceback (most recent call last):
      ...
    LinkNotFound...
    >>> anon_browser.open('http://launchpad.dev/ubuntu/+edit')
    Traceback (most recent call last):
      ...
    Unauthorized...

so let's use Sample Person, the registrant of Firefox..

    >>> registrant_browser = setupBrowser(
    ...     auth='Basic test@canonical.com:test')
    >>> registrant_browser.open('http://launchpad.dev/firefox')
    >>> registrant_browser.getLink('Change details').click()
    >>> registrant_browser.url
    'http://launchpad.dev/firefox/+edit'

Firefox is currently marked as using Bugs. Let's specify that it
doesn't use any bug tracker at all.

    >>> registrant_browser.getControl(
    ...     'Translations for this project are done in Launchpad').selected
    False
    >>> registrant_browser.getControl(
    ...     'People can ask questions in Launchpad Answers').selected
    True
    >>> registrant_browser.getControl(
    ...     'In Launchpad').selected
    True
    >>> registrant_browser.getControl(
    ...     'Expire Incomplete bug reports when they '
    ...     'become inactive').selected
    False
    >>> registrant_browser.getControl('Somewhere else').selected = True

We'll also set it as officially using codehosting.

    >>> registrant_browser.getControl(
    ...     'Code for this project is published in Bazaar branches on'
    ...     ' Launchpad').selected = True
    >>> registrant_browser.getControl('Change').click()

On the product page, we can see that the product doesn't use any bug
tracker, not even Launchpad.

    >>> uses = find_tag_by_id(registrant_browser.contents, id='uses')
    >>> print extract_text(uses)
    Uses Launchpad for: Answers and Branches.


Tracking bugs by email
----------------------

Instead if using a web-based bug tracker, projects can specify an
email address where bug reports should be sent.

    >>> registrant_browser.open('http://launchpad.dev/firefox/+edit')
    >>> registrant_browser.getControl(
    ...     'By emailing an upstream bug contact').selected = True
    >>> registrant_browser.getControl(
    ...     name='field.bugtracker.upstream_email_address').value = (
    ...         'puff@magicdragon.example.com')
    >>> registrant_browser.getControl('Change').click()

An Email Address bug tracker is automatically created.

    >>> registrant_browser.open('http://launchpad.dev/bugs/bugtrackers')
    >>> registrant_browser.getLink(
    ...     "Email to puff@magicdragon").click()
    >>> print extract_text(
    ...     find_tag_by_id(registrant_browser.contents, 'bugtracker-urls'))
    mailto:puff@magicdragon.example.com

An error message is shown if the email address is not filled in.

    >>> registrant_browser.open('http://launchpad.dev/firefox/+edit')
    >>> registrant_browser.getControl(
    ...     'By emailing an upstream bug contact').selected = True
    >>> registrant_browser.getControl(
    ...     name='field.bugtracker.upstream_email_address').value = ''
    >>> registrant_browser.getControl('Change').click()
    >>> registrant_browser.url
    'http://launchpad.dev/firefox/+edit'
    >>> for message in find_tags_by_class(
    ...     registrant_browser.contents, 'message'):
    ...     print extract_text(message)
    There is 1 error.
    Please enter an email address.


enable_bug_expiration and JavaScript
------------------------------------

JavaScript is used to constrain enable_bug_expiration to projects that
use Launchpad to track bugs. If the form is submitted before the page
has loaded, the enable_bug_expiration will not be disabled by the
JavaScript function. The constraint is enforced by the view class--the
data is corrected instead of returning a error to the user.

Jokosher uses Launchpad to track bugs and it has bug expiration enabled.
Dafydd, the project registrant, switches the bug tracker to 'Somewhere
else' before the page can complete loading. (TestBrowser does not
support JavaScript so this behaviour is easy to simulate.)

    >>> registrant_browser = setupBrowser(auth='Basic daf@canonical.com:daf')
    >>> registrant_browser.open('http://launchpad.dev/jokosher')
    >>> registrant_browser.title
    'Jokosher Audio Editor in Launchpad'

    >>> registrant_browser.getLink('Change details').click()
    >>> registrant_browser.getControl('In Launchpad').selected
    True

    >>> registrant_browser.getControl(
    ...     'Expire Incomplete bug reports when they '
    ...     'become inactive').selected
    True

    >>> registrant_browser.getControl('Somewhere else').selected = True
    >>> registrant_browser.getControl('Change').click()

The Status of Launchpad uses shows the bug tracker was changed.

    >>> uses = find_tag_by_id(registrant_browser.contents, id='uses')
    >>> print extract_text(uses)
    Does not use Launchpad for development.

Reviewing the edit page again, Dafydd, can see that bug expiration was
also disabled by the switch from Launchpad Bugs.

    >>> registrant_browser.getLink('Change details').click()
    >>> registrant_browser.getControl('In Launchpad').selected
    False

    >>> registrant_browser.getControl(
    ...     'Expire Incomplete bug reports when they '
    ...     'become inactive').selected
    False
