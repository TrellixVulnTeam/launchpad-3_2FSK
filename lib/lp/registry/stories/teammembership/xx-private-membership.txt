= Teams with Private Membership =

If a team's visibility attribute is set to Private Membership, only
Launchpad admins and members of that team can see the membership.

Create a test team with private membership and a test member. Even
though no-priv is a proposed member by requesting to join this moderated
team, he still does not get access to the membership list.

    >>> def print_members(contents, type):
    ...     """Extract members of a team from the html output."""
    ...     table = find_tag_by_id(contents, type)
    ...     for link in table.findAll('a'):
    ...         if link.renderContents() != 'Edit' and not link.find('img'):
    ...             print link.renderContents()


== Membership Page ==

A team member should be able to view the +members page.

    >>> browser = setupBrowser(auth='Basic member@canonical.com:test')
    >>> browser.open('http://launchpad.dev/~myteam/+members')
    >>> print_members(browser.contents, 'activemembers')
    Gold Member
    Owner
    >>> print_members(browser.contents, 'proposedmembers')
    No Privileges Person


== Team Page ==

The page indicates that the team is private.

    >>> browser.open('http://launchpad.dev/~myteam')
    >>> privacy_info = find_tag_by_id(browser.contents, 'privacy')
    >>> print extract_text(privacy_info)
    Team membership is viewable by team members

A team member will be able to see these parts of the team page.

    >>> find_tag_by_id(browser.contents, 'recently-approved')
    <...<a href=".../~member" class="sprite person">Gold Member</a>...


    >>> find_tag_by_id(browser.contents, 'recently-applied')
    <...<a href=".../~no-priv" class="sprite person">No Privileges Person</a>...

    >>> print extract_text(
    ...     find_tag_by_id(browser.contents, 'membership-summary'))
    2 active members, 1 proposed members...


== Team Participation ==

=== Direct Membership ===

The person overview page and the +assignedbugs page show which teams that
person participates in. Although, it would be time consuming to gather the
entire team membership by viewing all the members' person pages, we don't
want to leak this information, so MyTeam won't show up on the person
overview page or the +assignedbugs page because it has a private membership.

    >>> user_browser.open('http://launchpad.dev/~owner')
    >>> div = find_tag_by_id(user_browser.contents, 'participation')
    >>> a_tags = div.findAll('a')
    >>> for a_tag in a_tags:
    ...     print a_tag.contents
    [u'HWDB Team']
    [u'Other Team']

    >>> user_browser.open('http://launchpad.dev/~owner/+assignedbugs')
    >>> div = find_tag_by_id(user_browser.contents,
    ...                      'portlet-team-assigned-bugs')
    >>> a_tags = div.findAll('a')
    >>> for a_tag in a_tags:
    ...     print a_tag.contents
    [u'HWDB Team']
    [u'Other Team']

    >>> user_browser.open('http://launchpad.dev/~owner/+teamhierarchy')
    >>> div = find_tag_by_id(user_browser.contents, 'superteams')
    >>> a_tags = div.findAll('a')
    >>> for a_tag in a_tags:
    ...     print extract_text(a_tag)
    HWDB Team
    Other Team

A member of a team with private membership (MyTeam) can see that team
on other members' overview or +assignedbugs pages.

    >>> browser.open('http://launchpad.dev/~owner')
    >>> div = find_tag_by_id(browser.contents, 'participation')
    >>> a_tags = div.findAll('a')
    >>> for a_tag in a_tags:
    ...     print a_tag.contents
    [u'HWDB Team']
    [u'Other Team']
    [u'My Team']

    >>> browser.open('http://launchpad.dev/~owner/+assignedbugs')
    >>> div = find_tag_by_id(browser.contents,
    ...                      'portlet-team-assigned-bugs')
    >>> a_tags = div.findAll('a')
    >>> for a_tag in a_tags:
    ...     print a_tag.contents
    [u'HWDB Team']
    [u'My Team']
    [u'Other Team']

    >>> browser.open('http://launchpad.dev/~owner/+teamhierarchy')
    >>> div = find_tag_by_id(browser.contents, 'superteams')
    >>> a_tags = div.findAll('a')
    >>> for a_tag in a_tags:
    ...     print extract_text(a_tag)
    HWDB Team
    My Team
    Other Team


=== Indirect Membership ===

If a person is a member of a public team that is a member of a private
membership team then he is indirectly a member of the private
membership team.  The rules for disclosing that information are the
same as for direct membership.

My Team invites the Launchpad Admins team to join them.

    >>> owner_browser = setupBrowser(auth='Basic owner@canonical.com:test')
    >>> owner_browser.open('http://launchpad.dev/~myteam/+addmember')
    >>> owner_browser.getControl('New member').value = 'admins'
    >>> owner_browser.getControl('Add Member').click()

Foo Bar accepts the invitation for the Launchpad Admins, which makes
him, and all other admins, an indirect member of My Team.

    >>> admin_browser.open('http://launchpad.dev/~admins/+invitation/myteam')
    >>> admin_browser.getControl('Accept').click()

All Launchpad Admin members are indirectly members of My Team and
their participation is visible to other team members.

    >>> owner_browser.open('http://launchpad.dev/~name16/+participation')
    >>> div = find_tag_by_id(owner_browser.contents, 'indirect participation')
    >>> a_tags = div.findAll('a')
    >>> for a_tag in a_tags:
    ...     print a_tag.contents
    [u'Mailing List Experts']
    [u'My Team']

People who are not members of My Team, such as No Privileges Person,
do not see it in the indirect participation list for the members who
are.

    >>> user_browser.open('http://launchpad.dev/~name16/+participation')
    >>> div = find_tag_by_id(user_browser.contents, 'indirect participation')
    >>> a_tags = div.findAll('a')
    >>> for a_tag in a_tags:
    ...     print a_tag.contents
    [u'Mailing List Experts']

And anonymous users do not see the membership either.

    >>> anon_browser.open('http://launchpad.dev/~name16/+participation')
    >>> div = find_tag_by_id(anon_browser.contents, 'indirect participation')
    >>> a_tags = div.findAll('a')
    >>> for a_tag in a_tags:
    ...     print a_tag.contents
    [u'Mailing List Experts']

== Teams with Icons ==

The person page also shows a list of icons for all the teams that
person participates in, if the team has a custom icon. Only team
members should be able to see their team's icon in this list.

First, we will add a custom icon to two teams.

    >>> from canonical.launchpad.ftests import set_branding
    >>> admin_browser = setupBrowser(auth='Basic mark@example.com:test')
    >>> admin_browser.open('http://launchpad.dev/~myteam/+branding')
    >>> set_branding(admin_browser)
    >>> admin_browser.getControl('Change Branding').click()

    >>> admin_browser.open('http://launchpad.dev/~otherteam/+branding')
    >>> set_branding(admin_browser)
    >>> admin_browser.getControl('Change Branding').click()

The user which is not on myteam will only see otherteam listed.

    >>> user_browser.open('http://launchpad.dev/~owner')
    >>> div = find_tag_by_id(user_browser.contents, 'teams_with_icons')
    >>> for a_tag in div.findAll('a'):
    ...     print a_tag['href']
    /~otherteam


Another team member will see both the icons (otherteam and myteam).

    >>> browser.open('http://launchpad.dev/~owner')
    >>> div = find_tag_by_id(browser.contents, 'teams_with_icons')
    >>> for a_tag in div.findAll('a'):
    ...     print a_tag['href']
    /~myteam
    /~otherteam


== Restrict Answer Contact ==

To prevent leaking information about a team's private membership,
no user can add that team as an answer contact for a project.

Even the owner of the team with private membership should not see
MyTeam as an option in the +answer-contact form.

    >>> owner_browser.open(
    ...     'http://answers.launchpad.dev/ubuntu/+answer-contact')
    >>> team_div = find_tag_by_id(owner_browser.contents,
    ...                            'answer-contact-teams')
    >>> for label in team_div.findAll('label'):
    ...     print label.contents[1]
    &nbsp;Other Team


== Preventing Private Team Information Leakage ==

To prevent leaking information about a team's private membership,
no user can add that team as a member of a public team.

    >>> admin_browser.open('http://launchpad.dev/~simple-team/+addmember')
    >>> admin_browser.getControl('New member').value = 'myteam'
    >>> admin_browser.getControl('Add Member').click()
    >>> admin_browser.url
    'http://launchpad.dev/%7Esimple-team/+addmember'
    >>> get_feedback_messages(admin_browser.contents)
    [...Constraint not satisfied...

Anonymous users cannot even know that the private membership team even
exists.

    >>> anon_browser.open('http://launchpad.dev/~myteam')
    Traceback (most recent call last):
    ...
    NotFound: Object: <...>, name: u'~myteam'

Similarly, non-team members cannot even know that the private team exists.

    >>> user_browser.open('http://launchpad.dev/~myteam/+members')
    Traceback (most recent call last):
    ...
    NotFound: Object: <...>, name: u'~myteam'

A public team can be made a member of a private team (but not vice versa).
When this connection is made and members of the private team view the public
team's home page, they see the private team show up in the "Subteam of"
section.

    >>> admin_browser.open('http://launchpad.dev/~myteam/+addmember')
    >>> admin_browser.getControl('New member').value = 'guadamen'
    >>> admin_browser.getControl('Add Member').click()
    >>> admin_browser.open(
    ...     'http://launchpad.dev/~guadamen/+invitation/myteam')
    >>> admin_browser.getControl('Accept').click()

    >>> browser.open('http://launchpad.dev/~guadamen')
    >>> print extract_text(
    ...     find_tag_by_id(browser.contents, 'subteam-of'))
    Subteam of
    &#8220;GuadaMen&#8221; is a member of these teams: My Team...

However, to anonymous or non-members, the team name is hidden and there is
no clickable link.

    >>> user_browser.open('http://launchpad.dev/~guadamen')
    >>> print extract_text(
    ...     find_tag_by_id(user_browser.contents, 'subteam-of'))
    Subteam of
    &#8220;GuadaMen&#8221; is a member of these teams: &lt;hidden&gt;...
    >>> user_browser.getLink('<hidden>')
    Traceback (most recent call last):
    ...
    LinkNotFoundError

    >>> anon_browser.open('http://launchpad.dev/~guadamen')
    >>> print extract_text(
    ...     find_tag_by_id(anon_browser.contents, 'subteam-of'))
    Subteam of
    &#8220;GuadaMen&#8221; is a member of these teams: &lt;hidden&gt;...
    >>> anon_browser.getLink('<hidden>')
    Traceback (most recent call last):
    ...
    LinkNotFoundError


== Restrict Subscribing to Bugs ==

To prevent leaking information about a team's private membership,
no user can subscribe that team to a bug.

    >>> admin_browser.open(
    ...     'http://bugs.launchpad.dev/firefox/+bug/1/+addsubscriber')
    >>> admin_browser.getControl('Person').value = 'myteam'
    >>> admin_browser.getControl('Subscribe user').click()
    >>> admin_browser.url
    'http://bugs.launchpad.dev/firefox/+bug/1/+addsubscriber'
    >>> get_feedback_messages(admin_browser.contents)
    [...Constraint not satisfied...


== Restrict Subscribing to Blueprints ==

To prevent leaking information about a team's private membership,
no user can subscribe that team to a blueprint.

    >>> admin_browser.open('http://blueprints.launchpad.dev'
    ...                    '/firefox/+spec/canvas/+addsubscriber')
    >>> admin_browser.getControl('Subscriber').value = 'myteam'
    >>> admin_browser.getControl('Continue').click()
    >>> admin_browser.url
    'http://blueprints.launchpad.dev/firefox/+spec/canvas/+addsubscriber'
    >>> get_feedback_messages(admin_browser.contents)
    [...Constraint not satisfied...


== Restrict Appointing a Translator ==

To prevent leaking information about a team's private membership,
no user can specify that team as a translator.

    >>> admin_browser.open('http://translations.launchpad.dev'
    ...                    '/+groups/testing-translation-team/+appoint')
    >>> admin_browser.getControl('Language').value = ['de']
    >>> admin_browser.getControl('Translator').value = 'myteam'
    >>> admin_browser.getControl('Appoint').click()
    >>> admin_browser.url
    'http://translations.launchpad.dev/+groups/testing-translation-team/+appoint'
    >>> get_feedback_messages(admin_browser.contents)
    [...Constraint not satisfied...


== Restrict Project Owner ==

To prevent leaking information about a team's private membership,
no user can set that team as the owner/maintainer of a project.

    >>> admin_browser.open('http://launchpad.dev/mozilla/+reassign')
    >>> admin_browser.getControl(name='field.existing').value = ['existing']
    >>> admin_browser.getControl(name='field.owner').value = 'myteam'
    >>> admin_browser.getControl('Change').click()
    >>> admin_browser.url
    'http://launchpad.dev/mozilla/+reassign'
    >>> get_feedback_messages(admin_browser.contents)
    [...The person/team named 'myteam' is not a valid owner for...


== Restrict Product Maintainer ==

To prevent leaking information about a team's private membership,
no user can set that team as the maintainer of a product.

    >>> admin_browser.open('http://launchpad.dev/jokosher/+edit-people')
    >>> admin_browser.getControl(name='field.owner').value = 'myteam'
    >>> admin_browser.getControl('Save changes').click()
    >>> admin_browser.url
    'http://launchpad.dev/jokosher/+edit-people'
    >>> get_feedback_messages(admin_browser.contents)
    [u'There is 1 error.', u'Constraint not satisfied']


== Restrict Product Bug Supervisor ==

To prevent leaking information about a team's private membership,
no user can set that team as the bug supervisor of a product.

    >>> admin_browser.open('http://launchpad.dev/jokosher/+bugsupervisor')
    >>> admin_browser.getControl(name='field.bug_supervisor').value = 'myteam'
    >>> admin_browser.getControl('Change').click()
    >>> admin_browser.url
    'http://launchpad.dev/jokosher/+bugsupervisor'
    >>> get_feedback_messages(admin_browser.contents)
    [...You must choose a valid person or team to be the bug supervisor for...


== Restrict Distro Registrant ==

To prevent leaking information about a team's private membership,
no user can set that team as the registrant of a distribution.

    >>> admin_browser.open('http://launchpad.dev/ubuntu/+reassign')
    >>> admin_browser.getControl(name='field.owner').value = 'myteam'
    >>> admin_browser.getControl('Change').click()
    >>> admin_browser.url
    'http://launchpad.dev/ubuntu/+reassign'
    >>> get_feedback_messages(admin_browser.contents)
    [...The person/team named 'myteam' is not a valid owner for...


== Restrict Distro Bug Supervisor ==

To prevent leaking information about a team's private membership,
no user can set that team as the bug supervisor of a distribution.

    >>> admin_browser.open('http://launchpad.dev/ubuntu/+bugsupervisor')
    >>> admin_browser.getControl(name='field.bug_supervisor').value = 'myteam'
    >>> admin_browser.getControl('Change').click()
    >>> admin_browser.url
    'http://launchpad.dev/ubuntu/+bugsupervisor'
    >>> get_feedback_messages(admin_browser.contents)
    [...You must choose a valid person or team to be the bug supervisor...


== Edit the team's visibility ==

A team cannot have its visibility set to private-membership unless the
subscription policy is also set to restricted.

    >>> admin_browser = setupBrowser(auth='Basic mark@example.com:test')
    >>> admin_browser.open('http://launchpad.dev/~otherteam/+edit')
    >>> admin_browser.getControl(name='field.subscriptionpolicy').value = [
    ...     'OPEN']
    >>> admin_browser.getControl('Visibility').value = [
    ...     'PRIVATE_MEMBERSHIP']
    >>> admin_browser.getControl('Save').click()
    >>> for message in get_feedback_messages(admin_browser.contents):
    ...     print message
    There is 1 error.
    Private teams must have a Restricted subscription policy.

    >>> admin_browser.getControl(name='field.subscriptionpolicy').value = [
    ...     'MODERATED']
    >>> admin_browser.getControl('Save').click()
    >>> for message in get_feedback_messages(admin_browser.contents):
    ...     print message
    There is 1 error.
    Private teams must have a Restricted subscription policy.

    >>> admin_browser.getControl(name='field.subscriptionpolicy').value = [
    ...     'RESTRICTED']
    >>> admin_browser.getControl('Save').click()
    >>> for message in get_feedback_messages(admin_browser.contents):
    ...     print message
    >>> admin_browser.url
    'http://launchpad.dev/~otherteam'

Only Launchpad admins can set the visibility. Even the team owner can't do it.

    >>> owner_browser.open('http://launchpad.dev/~otherteam/+edit')
    >>> owner_browser.getControl('Visibility').value = [
    ...     'PRIVATE_MEMBERSHIP']
    Traceback (most recent call last):
    ...
    LookupError: label 'Visibility'

The team owner also cannot set the subscription policy away from
restricted, if the visibility is private-membership.

    >>> owner_browser.getControl(name='field.subscriptionpolicy').value = [
    ...     'MODERATED']
    >>> owner_browser.getControl('Save').click()
    >>> for message in get_feedback_messages(owner_browser.contents):
    ...     print message
    There is 1 error.
    Private teams must have a Restricted subscription policy.
