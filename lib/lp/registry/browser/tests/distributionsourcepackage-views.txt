DistributionSourcePackageView
=============================

The DistributionSourcePackageView is used to present a source
package within a distribution.

    # Setup the breezy autotest distroseries
    >>> login("foo.bar@canonical.com")
    >>> from lp.soyuz.tests.test_publishing import SoyuzTestPublisher
    >>> publisher = SoyuzTestPublisher()
    >>> publisher.prepareBreezyAutotest()
    >>> ubuntutest = publisher.ubuntutest
    >>> from lp.registry.interfaces.distroseries import DistroSeriesStatus
    >>> publisher.distroseries.status = DistroSeriesStatus.DEVELOPMENT

    # Publish the source 'gedit' in the ubuntutest main archive.
    >>> from datetime import datetime
    >>> import pytz
    >>> from lp.soyuz.interfaces.publishing import PackagePublishingStatus
    >>> gedit_main_src_hist = publisher.getPubSource(
    ...     sourcename="gedit", archive=ubuntutest.main_archive,
    ...     date_uploaded=datetime(2010, 12, 30, tzinfo=pytz.UTC),
    ...     status=PackagePublishingStatus.PUBLISHED)

The DistributionSourcePackageView includes a helper property
'all_published_in_active_distroseries' that returns a list of
all the published versions of the source package within the distribution's
serieses.

    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest
    >>> from zope.component import getMultiAdapter
    >>> ubuntu_gedit = ubuntutest.getSourcePackage('gedit')
    >>> ubuntu_gedit_view = getMultiAdapter(
    ...     (ubuntu_gedit, LaunchpadTestRequest()), name="+index")
    >>> for result in ubuntu_gedit_view.all_published_in_active_distroseries:
    ...     print "%s - %s" % (
    ...         result['suite'], result['description'])
    Breezy-autotest - (666): main/base


Related PPA versions
--------------------

The view includes a related_ppa_versions property which returns
a list of dictionaries describing 3 PPAs with versions of the same
package.

    # Create two PPAs to which we can publish sources.
    >>> ppa_nightly = factory.makeArchive(name="nightly",
    ...                                   distribution=ubuntutest)
    >>> ppa_beta = factory.makeArchive(name="beta",
    ...                                distribution=ubuntutest)

    # Publish gedit to both PPAs
    >>> gedit_nightly_src_breezy = publisher.getPubSource(
    ...     sourcename="gedit", archive=ppa_nightly,
    ...     creator=ppa_nightly.owner,
    ...     status=PackagePublishingStatus.PUBLISHED, version='0.8.2n3')
    >>> gedit_beta_src_breezy = publisher.getPubSource(
    ...     sourcename="gedit", archive=ppa_beta,
    ...     creator=ppa_beta.owner,
    ...     status=PackagePublishingStatus.PUBLISHED, version='0.8.1')
    >>> gedit_beta_src_hoary = publisher.getPubSource(
    ...     sourcename="gedit", archive=ppa_beta,
    ...     creator=ppa_nightly.owner,
    ...     status=PackagePublishingStatus.PUBLISHED, version='0.8.0',
    ...     distroseries=ubuntutest.serieses[0])

    # Give the creators of the above source packages some soyuz
    # karma for their efforts.
    >>> from lp.registry.model.karma import KarmaCategory
    >>> soyuz_category = KarmaCategory.byName('soyuz')
    >>> sourcepackagerelease = gedit_nightly_src_breezy.sourcepackagerelease
    >>> gedit_name = sourcepackagerelease.sourcepackagename
    >>> ppa_beta_owner_id = ppa_beta.owner.id
    >>> ppa_nightly_owner_id = ppa_nightly.owner.id
    >>> transaction.commit()

    # XXX: Michael Nelson 2009-07-07 bug=396419. Currently there is no
    # test api call to switchDbUser that works for non-zopeless layers.
    # When bug 396419 is fixed, we can instead use
    # DatabaseLayer.switchDbUser() instead of reconnect_stores()
    >>> from canonical.testing.layers import reconnect_stores
    >>> reconnect_stores('karmacacheupdater')
    >>> from lp.registry.model.karma import KarmaTotalCache
    >>> cache_entry = KarmaTotalCache(
    ...     person=ppa_beta_owner_id, karma_total=200)
    >>> cache_entry = KarmaTotalCache(
    ...     person=ppa_nightly_owner_id, karma_total=201)
    >>> transaction.commit()
    >>> reconnect_stores('launchpad')

    # Because our connection has been closed during the reconnect, we
    # need to get the distro and source package again.
    >>> from lp.registry.interfaces.distribution import IDistributionSet
    >>> ubuntutest = getUtility(IDistributionSet)['ubuntutest']
    >>> ubuntu_gedit = ubuntutest.getSourcePackage('gedit')
    >>> ubuntu_gedit_view = getMultiAdapter(
    ...     (ubuntu_gedit, LaunchpadTestRequest()), name="+index")
    >>> for archive_pub in ubuntu_gedit_view.related_ppa_versions:
    ...     print "%s - %s" % (
    ...         archive_pub['archive'].displayname,
    ...         archive_pub['versions']
    ...         )
    PPA named nightly for Person-name2 - Breezy Badger Autotest (0.8.2n3)
    PPA named beta for Person-name5 - Breezy Badger Autotest (0.8.1),
        Hoary Mock (0.8.0)

The view also calculates the url for finding further PPA versions.

    >>> print ubuntu_gedit_view.further_ppa_versions_url
    http://launchpad.dev/ubuntutest/+ppas?name_filter=gedit


Editing a distribution source package
-------------------------------------

The +edit view allows users to edit a DistributionSourcePackage. The
view provides a label, page_title and cancel_url.

    >>> distribution = factory.makeDistribution(
    ...     name='youbuntu', displayname='Youbuntu')
    >>> sourcepackagename = factory.makeSourcePackageName(name='bonkers')
    >>> package = factory.makeDistributionSourcePackage(
    ...     sourcepackagename=sourcepackagename, distribution=distribution)
    >>> view = create_initialized_view(package, '+edit')
    >>> print view.label
    Edit ...bonkers... package in Youbuntu

    >>> print view.page_title
    Edit ...bonkers... package in Youbuntu

    >>> print view.cancel_url
    http://launchpad.dev/youbuntu/+source/bonkers

The view allows the user the set the bug_reporting_guidelines field.

    >>> view.field_names
    ['bug_reporting_guidelines']

    >>> print package.bug_reporting_guidelines
    None

    >>> form = {
    ...     'field.bug_reporting_guidelines': 'guidelines',
    ...     'field.actions.change': 'Change',
    ...     }
    >>> view = create_initialized_view(package, '+edit', form=form)
    >>> view.errors
    []
    >>> print view.next_url
    http://launchpad.dev/youbuntu/+source/bonkers

    >>> print package.bug_reporting_guidelines
    guidelines
