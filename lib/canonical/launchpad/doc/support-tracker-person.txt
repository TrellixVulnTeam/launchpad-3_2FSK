Person and the Support Tracker
==============================

IPerson defines a searchTickets() method which can be used to
select all or a subset of the support requests in which the person is
involved. This includes tickets which the person created, is assigned
to, is subscribed to, commented on, or answered. Various subsets can
be selected by using the following criteria status, search_text and
participation type.

    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> personset = getUtility(IPersonSet)
    >>> foo_bar = personset.getByEmail('foo.bar@canonical.com')

search_text
~~~~~~~~~~~

The search_text parameter will limit the tickets to those matching
the query using the regular full text algorithm.

    >>> for ticket in foo_bar.searchTickets(search_text='firefox'):
    ...     print ticket.title, ticket.status.title
    Firefox loses focus and gets stuck              Open
    mailto: problem in webpage                      Solved
    Newly installed plug-in doesn't seem to be used Open

Sort Order
~~~~~~~~~~

When using the search_text criteria, the default is to sort the results
by relevancy. One can use the sort parameter to change that. It takes
one of the constant defined in the TicketSort enumeration.

    >>> from canonical.lp.dbschema import TicketSort
    >>> for ticket in foo_bar.searchTickets(
    ...         search_text='firefox', sort=TicketSort.NEWEST_FIRST):
    ...     print ticket.title, ticket.status.title
    mailto: problem in webpage                      Solved
    Newly installed plug-in doesn't seem to be used Open
    Firefox loses focus and gets stuck              Open

When no text search is done, the default sort order is
TicketSort.NEWEST_FIRST.

    >>> for ticket in foo_bar.searchTickets():
    ...     print ticket.title, ticket.status.title
    Continue playing after shutdown                         Open
    Play DVDs in Totem                                      Open
    mailto: problem in webpage                              Solved
    Installation of Java Runtime Environment for Mozilla    Open
    Slow system                                             Open
    Newly installed plug-in doesn't seem to be used         Open
    Firefox loses focus and gets stuck                      Open

status
------

The last searches showed that by default, not all statuses are searched
for by default (they excluded expired and invalid tickets). The status
parameter can be used to control the list of statuses to select:

    >>> from canonical.lp.dbschema import TicketStatus
    >>> for ticket in foo_bar.searchTickets(status=TicketStatus.INVALID):
    ...     print ticket.title, ticket.status.title
    Firefox is slow and consumes too much RAM   Invalid

The status parameter can also take a list of statuses.

    >>> for ticket in foo_bar.searchTickets(
    ...         status=[TicketStatus.SOLVED, TicketStatus.INVALID]):
    ...     print ticket.title, ticket.status.title
    mailto: problem in webpage                  Solved
    Firefox is slow and consumes too much RAM   Invalid

participation
-------------

By default, any types of relationship to a ticket is considered by
searchTickets. This can customized through the participation parameter.
It takes one or a list of constants from the TicketParticipation enumeration.

To select only tickets on which the person commented, the
TicketParticipation.COMMENTER is used:

    >>> from canonical.lp.dbschema import TicketParticipation
    >>> for ticket in foo_bar.searchTickets(
    ...         participation=TicketParticipation.COMMENTER, status=None):
    ...     print ticket.title
    Continue playing after shutdown
    Play DVDs in Totem
    mailto: problem in webpage
    Installation of Java Runtime Environment for Mozilla
    Newly installed plug-in doesn't seem to be used

TicketParticipation.SUBSCRIBER will only select the tickets to which
the person is subscribed to:

    >>> for ticket in foo_bar.searchTickets(
    ...         participation=TicketParticipation.SUBSCRIBER, status=None):
    ...     print ticket.title
    Slow system
    Firefox is slow and consumes too much RAM

TicketParticipation.OWNER selects the tickets that the person created:

    >>> for ticket in foo_bar.searchTickets(
    ...         participation=TicketParticipation.OWNER, status=None):
    ...     print ticket.title
    Slow system
    Firefox loses focus and gets stuck
    Firefox is slow and consumes too much RAM

TicketParticipation.ANSWERER selects the tickets for which the person
was marked as the answerer:

    >>> for ticket in foo_bar.searchTickets(
    ...         participation=TicketParticipation.ANSWERER, status=None):
    ...     print ticket.title
    mailto: problem in webpage
    Firefox is slow and consumes too much RAM

TicketParticipation.ASSIGNEE selects that tickets which are assigned to
the person:

    >>> for ticket in foo_bar.searchTickets(
    ...         participation=TicketParticipation.ASSIGNEE, status=None):
    ...     print ticket.title

If a list of these constants is used, all of these participation types
will be selected:

    >>> for ticket in foo_bar.searchTickets(
    ...         participation=[
    ...             TicketParticipation.OWNER, TicketParticipation.ANSWERER],
    ...         status=None):
    ...     print ticket.title
    mailto: problem in webpage
    Slow system
    Firefox loses focus and gets stuck
    Firefox is slow and consumes too much RAM

Combination
~~~~~~~~~~~

The returned sets of tickets is the intersection of the sets delimited
by each criteria:

    >>> for ticket in foo_bar.searchTickets(
    ...         search_text='firefox OR Java', status=TicketStatus.OPEN,
    ...         participation=TicketParticipation.COMMENTER):
    ...     print ticket.title, ticket.status.title
    Installation of Java Runtime Environment
        for Mozilla                             Open
    Newly installed plug-in doesn't seem to be
        used                                    Open

== getSupportedLanguages() ==

IPerson also provides a getSupportedLanguages method which can be used
to retrieve the list of languages in which the person or team can
provide support.

    # Helper to see easily the languages in a list.
    >>> def language_codes(languages):
    ...     return sorted(str(language.code) for language in languages)

For a person, it is the same list than its list of known languages,
with the addition that English is always assumed to be supported:

    >>> sample_person = getUtility(IPersonSet).getByName('name16')
    >>> language_codes(sample_person.languages)
    []
    >>> language_codes(sample_person.getSupportedLanguages())
    ['en']

    >>> carlos = getUtility(IPersonSet).getByName('carlos')
    >>> language_codes(carlos.languages)
    ['ca', 'es']
    >>> language_codes(carlos.getSupportedLanguages())
    ['ca', 'en', 'es']

Also, note that all English variants will be excluded.

    >>> daf = getUtility(IPersonSet).getByName('daf')
    >>> language_codes(daf.languages)
    ['cy', 'en_GB', 'ja']
    >>> language_codes(daf.getSupportedLanguages())
    ['cy', 'en', 'ja']

For team with a list of known languages set, the same rule applies:

    >>> from canonical.launchpad.interfaces import ILanguageSet
    >>> ubuntu_team = getUtility(IPersonSet).getByName('ubuntu-team')
    >>> esperanto = getUtility(ILanguageSet)['eo']
    >>> ubuntu_team.addLanguage(esperanto)

    >>> language_codes(ubuntu_team.languages)
    ['eo']
    >>> language_codes(ubuntu_team.getSupportedLanguages())
    ['en', 'eo']

But when the list of known languages is not set, the list of supported
languages will be the union of all the members supported languages.

    >>> rosetta_admins = getUtility(IPersonSet).getByName(
    ...     'rosetta-admins')

    >>> carlos.inTeam(rosetta_admins)
    True
    >>> daf.inTeam(rosetta_admins)
    True

    >>> language_codes(rosetta_admins.languages)
    []
    >>> language_codes(rosetta_admins.getSupportedLanguages())
    ['ca', 'cy', 'en', 'es', 'ja']

These rules are applied recursively when teams are nested one inside
the other. For example, the 'Guadamen' team includes the Ubuntu Team
and doesn't have its list of known languages set, so it will be the
languages of the Ubuntu Team that will be used.

    >>> celso = getUtility(IPersonSet).getByName('cprov')
    >>> celso.inTeam(ubuntu_team)
    True
    >>> celso.addLanguage(getUtility(ILanguageSet)['es'])
    >>> language_codes(celso.languages)
    ['es']

    >>> guadamen_team = getUtility(IPersonSet).getByName('guadamen')
    >>> ubuntu_team.inTeam(guadamen_team)
    True

    >>> language_codes(guadamen_team.languages)
    []
    >>> language_codes(guadamen_team.getSupportedLanguages())
    ['en', 'eo']

    # Empty the list of known languages to use the list of the
    # Ubuntu team members.
    >>> ubuntu_team.removeLanguage(esperanto)
    >>> language_codes(guadamen_team.getSupportedLanguages())
    ['en', 'es']
