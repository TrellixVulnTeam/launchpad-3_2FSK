Calendars
=========

Some objects in Launchpad have calendars.  Actually, currently only persons
(and teams) have calendars, but it is planned to add them to products and
projects as well.

Calendaring code makes use of the SchoolBell library (Python package
`schoolbell`), which comes from the SchoolTool project (www.schooltool.org).
It is not available on the website just yet, because it was extracted from core
schooltool code, but it will be in the near future.  (Ignore the 'schoolbell'
branch on source.schooltool.org -- the SchoolBell application is different from
the SchoolBell library; we will try to settle naming issues soon.)

Launchpad calendars have some additional attributes such as title and owner,
defined in the ILaunchpadCalendar interface (that extends schoolbell's
IEditCalendar).  Calendars are stored in the PostgreSQL database.


Hooking up calendars to objects
-------------------------------

Objects that have calendars can be adapted to ILaunchpadCalendar.  There is an
adapter registered for ICalendarOwner that returns the 'calendar' attribute of
an object, so the simplest thing for adding a calendar to an object is to
make sure this attribute exists, and declare that the object provides
ICalendarOwner.

There is a view named 'calendar' registered for ICalendarOwner, so if an object
(e.g. a person) that has a calendar can be reached at a certain URL, accessing
the calendar of that object is just a matter of going to URL + '/calendar'.

There is also a view named 'calendar' registered for the root object.  This
view looks up the calendar of the logged-in user.

  XXX Steve Alexander says using views in this fashion is a bad idea (without
      detailing that assertion in great detail), so we have to write custom
      traversers for ICalendarOwners.

There is a set of views available for ICalendar, and a traverser that
interprets URL segments as dates.


Interoperability with calendaring clients
-----------------------------------------

Every calendar can be exported as an iCalendar file via HTTP.  You can
subscribe to these calendars from Mozilla Calendar (or Sunbird), Evolution,
KOrganizer, Apple's iCal, etc.  The get the URL for getting an iCalendar file
just append '/calendar.ics' to the calendar URL, e.g.

   http://localhost:8085/foaf/persons/test/calendar/calendar.ics

The ability to upload iCalendar files (and thus modify calendars stored in
Launchpad from these calendaring clients) is not hooked up yet.  There is
an iCalendar parser in the schoolbell module, but the tricky part is to get
Zope 3 traversal (which is heavily customized in Launchpad) to actually
work for HTTP PUT requests.


Security
--------

None so far.  All calendar content objects and views are protected with
zope.Public, which means that, for example, anonymous users can alter any
calendar in the system.  Obviously this needs to be changed before calendaring
can be merged to the mainline.


TODO
----

- Finish browser views for calendars.  This is the biggest task.  Looking into
  SchoolTool's (http://source.schooltool.org/) calendar browser views might be
  useful here (src/schooltool/browser/cal.py + assorted page templates),
  although I expect Launchpad views will do at least some things differently.

- Resolve timezone issues that are currently breaking browser views (James
  Henstridge was working on this issue, I think):
    + You cannot compare a datetime with timezone info with a datetime without
      timezone info.
    + CalendarEvent SQL object stores datetimes with timezone info
    + Browser views create datetime objects with timezone info and pass them
      as arguments to ICalendar.expend.  Things break.

- Add links to calendars from person pages.  Perhaps add portlets that list
  days with events in the current month?

- Add an edit form for calendar events.
    + As the interfaces currently go, calendar events are immutable, and the
      proper way to modify it is to create a new event object:
        calendar.removeEvent(original_event)
        calendar.addEvent(original_event.replace(attr1=newvalue,
                                                 attr2=newvalue...))
    + This probably does not make much sense for Launchpad where you can just
      change the attributes of calendar event objects.

- Re-add recurring event support (it was disabled to make prototyping easier).
  SchoolBell interfaces currently define the recurrence rule as a single attribute
  providing one of four recurrence rule interfaces; perhaps it can be simulated
  with a property.  Or perhaps SchoolBell's interfaces aren't general enough
  and could be changed to be more convenient.  Talk to me (Marius Gedminas,
  <marius@pov.lt>) if you have ideas.

- Rewrite traversal to calendars to use traverser functions rather than browser views
  (see the XXX above).

- Write and hook up the iCalendar upload view (HTTP PUT requests).  Writing it should
  be easy -- use schoolbell.icalendar.read_icalendar().  Hooking it up is
  difficult (see the description above).

- Add calendar composition.  A function to combine a bunch of calendars and give one
  read-only calendar is trivial to write (disclaimer: I wrote it but didn't test it):

        import itertools
        from schoolbell.simple import ImmutableCalendar

        def combine_calendars(*args):
            """Combine a number of calendars into a single read-only calendar."""
            return ImmutableCalendar(itertools.chain(*args))


If you have any questions about the schoolbell library or calendaring in
Launchpad, feel free to email Marius Gedminas <marius@pov.lt>.

