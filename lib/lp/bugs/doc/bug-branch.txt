= Bugs and Branches =

Branches can be linked to Bugs, to track work in progress on branches,
and when fixes are committed.

    >>> from canonical.launchpad.webapp.testing import verifyObject
    >>> from canonical.launchpad.interfaces import IBugBranch, IBugBranchSet
    >>> from canonical.launchpad.database import BugBranch, BugBranchSet
    >>> verifyObject(IBugBranch, BugBranch.get(1))
    True
    >>> verifyObject(IBugBranchSet, BugBranchSet())
    True


== BugBranch ==

BugBranch links a bug and a branch.

    >>> from canonical.launchpad.interfaces import (
    ...     IBugSet, IPersonSet)
    >>> from lp.code.interfaces.branchlookup import IBranchLookup
    >>> from canonical.database.sqlbase import flush_database_updates

    >>> login("no-priv@canonical.com")

    >>> bugset = getUtility(IBugSet)
    >>> bug = bugset.get(1)
    >>> branch = getUtility(IBranchLookup).get(10)

Adding a branch to a bug returns an IBugBranch.

    >>> user = getUtility(IPersonSet).getByEmail("no-priv@canonical.com")
    >>> bug_branch = bug.linkBranch(branch, user)

    >>> flush_database_updates()

The bug and branch fields of the returned bug_branch should reflect our
sample data.

    >>> bug_branch.bug.id
    1
    >>> bug_branch.branch.id
    10
    >>> print bug_branch.registrant.displayname
    No Privileges Person

    >>> [bug_branch.branch.name for bug_branch in
    ...  bug.linked_branches]
    [u'release-0.9.2']

Trying to add a branch that is already linked to a bug will simply
return the existing BugBranch.

    >>> bug_branch_two = bug.linkBranch(branch, user)
    >>> bug_branch_two == bug_branch
    True

You can check if a branch is linked to a bug:

    >>> bug.hasBranch(branch)
    True

    >>> bug_two = bugset.get(2)
    >>> bug_two.hasBranch(branch)
    False
    >>> branch = getUtility(IBranchLookup).get(1)
    >>> bug_branch_three = bug.linkBranch(branch, user)


If we make the bug private, no-priv won't be allowed to edit neither the
bug nor the BugBranch.

    >>> login('foo.bar@canonical.com')
    >>> bug.setPrivate(True, getUtility(ILaunchBag).user)
    True

    >>> login('no-priv@canonical.com')

    >>> bug.description = 'Yet another description.'
    Traceback (most recent call last):
    ...
    Unauthorized:...

    >>> login('foo.bar@canonical.com')
    >>> bug.setPrivate(False, getUtility(ILaunchBag).user)
    True
    >>> login('no-priv@canonical.com')

You can unlink a branch from a bug using unlinkBranch().

    >>> bug.hasBranch(branch)
    True
    >>> bug.unlinkBranch(branch, getUtility(ILaunchBag).user)
    >>> bug.hasBranch(branch)
    False

Calling unlinkBranch() once again is a noop.

    >>> bug.unlinkBranch(branch, getUtility(ILaunchBag).user)

    >>> bug_branch = bug.linkBranch(branch, user)


== Bugs Related to Branches ==

The bugs related to a branch are accessible via the related_bugs
property.

    >>> sorted([bug.id for bug in branch.related_bugs])
    [1, 4, 5]


== Getting bug branches associated with multiple branches ==

Sometimes we want to get the associated bug branch links for a set of branches.
The getBugBranchesForBranches method can do this.

Firstly we need to get the branches.

    >>> from canonical.launchpad.interfaces import IBugBranchSet
    >>> branches = [getUtility(IBranchLookup).getByUniqueName(
    ...                 '~carlos/iso-codes/0.35'),
    ...             getUtility(IBranchLookup).getByUniqueName(
    ...                 '~sabdfl/firefox/release-0.9.2')]

The bug branches returned are only those where the user can see the
bugs that are associated.  This way if there are bugs associated with
a branch that the user cannot see, then they are not shown.

    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> user = getUtility(IPersonSet).getByEmail('test@canonical.com')
    >>> bugbranches = getUtility(IBugBranchSet).getBugBranchesForBranches(
    ...     branches, user)
    >>> for bugbranch in sorted(bugbranches,
    ...                         key=lambda b: (b.branch.id, b.bug.id)):
    ...     print "%s <-> %s" % (
    ...         bugbranch.branch.unique_name, bugbranch.bug.id)
    ~sabdfl/firefox/release-0.9.2 <-> 1
    ~sabdfl/firefox/release-0.9.2 <-> 4


== Getting bug branches associated with multiple bugs ==

Sometimes we want to get the associated bug branch links for a set of bugs.
The getBugBranchesForBugs method can do this.

Firstly we need to get the branches.  We'll look up the relationships
for bugs 1, 2, 3 and 4.

    >>> bugtasks = list(getUtility(IBugSet).get(1).bugtasks)
    >>> bugtasks.extend(getUtility(IBugSet).get(2).bugtasks)
    >>> bugtasks.extend(getUtility(IBugSet).get(3).bugtasks)
    >>> bugtasks.extend(getUtility(IBugSet).get(4).bugtasks)
    >>> bugbranches2 = getUtility(IBugBranchSet).getBugBranchesForBugTasks(
    ...     bugtasks)
    >>> for bugbranch2 in sorted(bugbranches2,
    ...                         key=lambda b: (b.branch.id, b.bug.id)):
    ...     print "%s <-> %s" % (bugbranch2.branch.unique_name, bugbranch2.bug.id)
    ~name12/firefox/main <-> 1
    ~name12/firefox/main <-> 4
    ~sabdfl/firefox/release-0.9.2 <-> 1
    ~sabdfl/firefox/release-0.9.2 <-> 4

