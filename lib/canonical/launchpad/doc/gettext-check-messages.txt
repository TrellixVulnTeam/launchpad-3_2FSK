= Checking messages against gettext =

Before accepting a translation message, Launchpad runs it through
gettext to check for certain errors.  For example, if the message is
marked as a C format string in the template, using the c-format flag,
the set of % conversion specifiers in the translation should be
compatible with those of the original English string in the template.
Other languages such as Python have similar format string capabilities
with corresponding flags.

But sometimes it is possible for invalid messages to make it into the
database.  It may be due to a bug in Launchpad, or it could be due to a
gettext update that notices incompatibilities that earlier versions
didn't.


== Test setup ==

Here we use an instrumented version of the script that counts messages
checked instead of real time.  This gets around the indeterminate commit
points that would otherwise be in the output.

    >>> from datetime import datetime
    >>> from pytz import timezone

    >>> from zope.security.proxy import removeSecurityProxy

    >>> from canonical.database.sqlbase import quote
    >>> from canonical.launchpad.scripts.gettext_check_messages import (
    ...     GettextCheckMessages)
    >>> from canonical.launchpad.scripts.logger import FakeLogger

    >>> class MockTransactionManager:
    ...     """"Print out commits and aborts, ignore them otherwise."""
    ...     def begin(self):
    ...         pass
    ...     def commit(self):
    ...         print "Committing."
    ...     def abort(self):
    ...         print "Aborting."

    >>> class InstrumentedGettextCheckMessages(GettextCheckMessages):
    ...     _commit_interval = 3
    ...     def _get_time(self):
    ...         return self._check_count

    >>> def run_checker(options):
    ...     """Create and run an instrumented `GettextCheckMessages`."""
    ...     checker = InstrumentedGettextCheckMessages(
    ...         'gettext-check-messages-test', test_args=options)
    ...     checker.logger = FakeLogger()
    ...     checker.txn = MockTransactionManager()
    ...     checker.main()

    >>> logout()
    >>> login('foo.bar@canonical.com')

    >>> UTC = timezone('UTC')

    >>> nl_file = factory.makePOFile('nl')
    >>> template = nl_file.potemplate

A sample translatable message is flagged as containing a C-style format
string.  This means that any "%d" sequences and such are significant.
So gettext will check those in the translations for compatibility with
those in the original message.

    >>> potmsgset = factory.makePOTMsgSet(
    ...     potemplate=template, singular=u'%d n')
    >>> potmsgset.flagscomment = 'c-format'
    >>> potmsgset.flags
    [u'c-format']

The sample message has an imported translation, and a current
translation in Launchpad that differs from the imported one.

    >>> current_message = factory.makeTranslationMessage(
    ...     pofile=nl_file, potmsgset=potmsgset, translator=template.owner,
    ...     reviewer=template.owner, translations=[u'%d c'])
    >>> current_message = removeSecurityProxy(current_message)

    >>> imported_message = factory.makeTranslationMessage(
    ...     pofile=nl_file, potmsgset=potmsgset, translator=template.owner,
    ...     reviewer=template.owner, translations=[u'%d i'],
    ...     lock_timestamp=datetime.now(UTC))
    >>> imported_message = removeSecurityProxy(imported_message)

    >>> imported_message.is_current = False
    >>> current_message.is_imported = False
    >>> imported_message.is_imported = True
    >>> current_message.is_current = True


== Basic operation ==

The gettext_check_message script goes through a given set of messages
and re-does the gettext check.  Which messages it checks is specified as
a plain SQL WHERE clause.

    >>> run_checker(['-vv', "-w id=%s" % quote(current_message.id)])
    DEBUG Checking messages matching: id=...
    DEBUG Checking message ....
    DEBUG Commit point.
    Committing.
    INFO Done.
    INFO Messages checked: 1
    INFO Validation errors: 0
    INFO Messages disabled: 0
    INFO Messages unmasked: 0
    INFO Commit points: ...


== Detecting errors ==

If a translation fails to validate against its potmsgset, the script
detects the problem when it checks that message.

    >>> current_message.is_current
    True

    >>> current_message.translations = [u'%s c']

    >>> run_checker(["-w id=%s" % quote(current_message.id)])
    DEBUG Checking messages matching: id=...
    DEBUG Checking message ...
    INFO ... (current): format specifications ... are not the same
    INFO ...: unmasked ...
    DEBUG Commit point.
    Committing.
    INFO Done.
    INFO Messages checked: 1
    INFO Validation errors: 1
    INFO Messages disabled: 1
    INFO Messages unmasked: 1
    INFO Commit points: ...

The failed message is demoted to a mere suggestion.

    >>> current_message.is_current
    False

In this case, there was a perfectly good imported message that was being
masked by the invalid current translation.  So in addition to disabling
the bad current message, the script activates the good imported one.

    >>> imported_message.is_current
    True

If the imported message is also bad, this is reported and the imported
message is not activated.

    >>> imported_message.is_current = False
    >>> current_message.is_current = True
    >>> imported_message.translations = [u'%s %s i']

    >>> run_checker(["-w id=%s" % quote(current_message.id)])
    DEBUG Checking messages matching: id=...
    DEBUG Checking message ...
    INFO ... (current): format specifications ... are not the same
    DEBUG Commit point.
    Committing.
    DEBUG Commit point.
    Committing.
    INFO Done.
    INFO Messages checked: 1
    INFO Validation errors: 2
    INFO Messages disabled: 1
    INFO Messages unmasked: 0
    INFO Commit points: ...

    >>> current_message.is_current
    False
    >>> imported_message.is_current
    False


== Output ==

Besides current messages, the script's output also distinguishes
imported ones, and ones that are completely unused.

In this example we'd like to see a nicely predictable ordering, so we
add a sort order using the -o option.

    >>> run_checker(['-w', 'potmsgset=%s' % quote(potmsgset), '-o',  'id'])
    DEBUG Checking messages matching: potmsgset=...
    DEBUG Checking message ...
    INFO ... (unused): format specifications ... are not the same
    DEBUG Commit point.
    Committing.
    DEBUG Checking message ...
    INFO ... (imported): number of format specifications ... does not match...
    DEBUG Commit point.
    Committing.
    INFO Done.
    INFO Messages checked: 2
    INFO Validation errors: 3
    INFO Messages disabled: 0
    INFO Messages unmasked: 0
    INFO Commit points: 2

In this case the imported message is checked twice: once all by itself
and once as a potential alternative to the current message.  That's why
the number of validation errors is greater than the number of messages
checked.

The script also notes when a message is both current and imported.

    >>> imported_message.is_current = True
    >>> run_checker(["-w id=%s" % quote(imported_message.id)])
    DEBUG ...
    INFO ... (current, imported): number of format specifications ...


== Dry runs ==

The --dry-run option makes the script abort all its database changes.

    >>> current_message.is_current = True

    >>> run_checker(["-w id=%s" % quote(current_message.id), '--dry-run'])
    INFO Dry run.  Not making any changes.
    DEBUG Checking messages matching: id=...
    DEBUG Checking message ...
    INFO ... (current): format specifications ... are not the same
    DEBUG Commit point.
    Aborting.
    DEBUG Commit point.
    Aborting.
    INFO Done.
    INFO Messages checked: 1
    INFO Validation errors: 2
    INFO Messages disabled: 1
    INFO Messages unmasked: 0
    INFO Commit points: 2


