POTemplate View
===============

On this section, we are going to test the view class for an IPOTemplate.

First, we need some imports.

    >>> from StringIO import StringIO
    >>> from zope.publisher.browser import FileUpload
    >>> from canonical.launchpad.interfaces import (
    ...     ITranslationImportQueue, IPOTemplateSet, IDistributionSet,
    ...     ISourcePackageNameSet)
    >>> from canonical.launchpad.layers import TranslationsLayer
    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest

All the tests will be submitted as comming from the No Privilege person.

    >>> login('no-priv@canonical.com')

Let's got some needed objects.

    >>> sourcepackagenameset = getUtility(ISourcePackageNameSet)
    >>> sourcepackagename = sourcepackagenameset['evolution']
    >>> distributionset = getUtility(IDistributionSet)
    >>> distribution = distributionset['ubuntu']
    >>> series = distribution['hoary']
    >>> potemplateset = getUtility(IPOTemplateSet)
    >>> potemplatesubset = potemplateset.getSubset(
    ...     distroseries=series, sourcepackagename=sourcepackagename)
    >>> potemplate = potemplatesubset['evolution-2.2']

It's time to check that the upload form sets the right fields.

To be sure that we are using the right entry from the import queue,
we check that it only has two items from sample data.

    >>> translationimportqueue = getUtility(ITranslationImportQueue)
    >>> translationimportqueue.countEntries()
    2

The FileUpload class needs a class with the attributes: filename, file and
headers.

    >>> class FileUploadArgument:
    ...     filename='po/foo.pot'
    ...     file=StringIO('foos')
    ...     headers=''

Now, we do the upload.

    >>> form = {
    ...     'file': FileUpload(FileUploadArgument()),
    ...     'UPLOAD': 'Upload'}
    >>> potemplate_view = create_view(
    ...     potemplate, '+upload', form=form, layer=TranslationsLayer)
    >>> potemplate_view.request.method = 'POST'
    >>> potemplate_view.initialize()

As we can see, we have now three entries in our queue.

    >>> translationimportqueue.countEntries()
    3

Get it and check that some attributes are set as they should. For instance,
the entry should be linked with the IPOTemplate we are using.

    >>> entry = translationimportqueue.get(3)
    >>> entry.potemplate == potemplate
    True

From the IPOTemplate upload form, we can also upload .po files. Let's check
that feature...

    >>> class FileUploadArgument:
    ...     filename='po/es.po'
    ...     file=StringIO('foos')
    ...     headers=''

We do the upload...

    >>> form = {
    ...     'file': FileUpload(FileUploadArgument()),
    ...     'UPLOAD': 'Upload'}
    >>> potemplate_view = create_view(
    ...     potemplate, '+upload', form=form, layer=TranslationsLayer)
    >>> potemplate_view.request.method = 'POST'
    >>> potemplate_view.initialize()

As we can see, we have now another entry in our queue.

    >>> translationimportqueue.countEntries()
    4

Get it and check that some attributes are set as they should. For instance,
the entry should be linked with the IPOTemplate we are using.

    >>> entry = translationimportqueue.get(4)
    >>> entry.potemplate == potemplate
    True

And for the path, we are going to use the filename we got from the upload form
because it's a .po file instead of a .pot file and we need that information
to differenciate different .po files associated with the context.

    >>> entry.path
    u'po/es.po'

Let's check the traversal code.

    >>> from zope.security.proxy import isinstance
    >>> from lp.translations.browser.potemplate import POTemplateNavigation
    >>> from canonical.launchpad.database import POFile, DummyPOFile

First, what happens if we get any method that is not supported?

    >>> request = LaunchpadTestRequest()
    >>> request.method = 'PUT'
    >>> navigation = POTemplateNavigation(potemplate, request)
    >>> navigation.traverse('es')
    Traceback (most recent call last):
    ...
    AssertionError: We only know about GET, HEAD, and POST

But when we use a supported method, we get the right object.

    >>> request.method = 'GET'
    >>> isinstance(navigation.traverse('es'), POFile)
    True

Now, we are going to select a POFile that doesn't exist yet in our database.

    >>> isinstance(navigation.traverse('zh_TW'), DummyPOFile)
    True

But if we do a POST, instead of getting a DummyPOFile object, we will get a
POFile one.

    >>> request.method = 'POST'
    >>> isinstance(navigation.traverse('zh_TW'), POFile)
    True

And that's all, folks!
