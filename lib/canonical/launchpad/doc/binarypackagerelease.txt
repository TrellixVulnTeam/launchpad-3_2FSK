        Binary Package Release
        ^^^^^^^^^^^^^^^^^^^^^^

BinaryPackageRelease stores unique versions of binarypackagenames
across build records.

   >>> from canonical.launchpad.database import BinaryPackageRelease
   >>> from canonical.launchpad.interfaces import (
   ...       IBinaryPackageRelease, IBinaryPackageReleaseSet)
   >>> from zope.interface.verify import verifyObject

   >>> firefox_bin_release = BinaryPackageRelease.get(12)
   >>> verifyObject(IBinaryPackageRelease, firefox_bin_release)
   True


Useful properties:

   >>> firefox_bin_release.name, firefox_bin_release.version
   (u'mozilla-firefox', u'0.9')

   >>> firefox_bin_release.status
   'Published'

   >>> firefox_bin_release.lastversions()
   []
   >>> from canonical.launchpad.interfaces import IDistroReleaseSet
   >>> warty = getUtility(IDistroReleaseSet).get(1)
   >>> warty.name
   u'warty'


   XXX cprov 20051219: following code exposes a piece of yet-broken
   code in Soyuz, which is precisely described in bug # 5948

   >>> try:
   ...     firefox_bin_release.current(warty)
   ... except AttributeError, info:
   ...     'BOOM'
   'BOOM'


We provide a __getitem__() method so you can access other releases
with the same BinaryPackageName as indices of that
BinaryPackageRelease:

# XXX cprov 20060111: this method is utterly confusing for
# a content class, anyway it works as specified.

   >>> firefox_bin_release['0.9'].version
   u'0.9'

   >>> firefox_bin_release['6.6.6']
   Traceback (most recent call last):
   ...
   NotFoundError: ('Version Not Found', '6.6.6')

Check IBinaryPackageRelease.override() behaviour:

The override method does implicitly exactly the same than:

   IBinaryPackagerelease.set(component=new_component,
                             section=new_section,
                             priority=new_priority)

but it only sets the not-empty attributes, so you can override the
attributes exclusively. It only exists to improve the code clarity,
in ftp-master/queue tool and other scripts.

Display the current firefox component and section:

   >>> firefox_bin_release.component.name, firefox_bin_release.section.name
   (u'main', u'base')

Fetch brand new component, section and priority:

   >>> from canonical.launchpad.interfaces import (
   ...     IComponentSet, ISectionSet)
   >>> from canonical.lp.dbschema import PackagePublishingPriority
   >>> new_comp = getUtility(IComponentSet)['universe']
   >>> new_sec = getUtility(ISectionSet)['mail']
   >>> new_priority = PackagePublishingPriority.IMPORTANT

Override the current firefox with new component/section/priority:

   >>> firefox_bin_release.override(component=new_comp, section=new_sec,
   ...              priority=new_priority)

Check if it got overridden correctly:

   >>> firefox_bin_release.component.name, firefox_bin_release.section.name, firefox_bin_release.priority.name
   (u'universe', u'mail', 'IMPORTANT')

Abort transaction to avoid error propagation of the new attributes:

   >>> import transaction
   >>> transaction.abort()

BinaryPackageReleaseSet utility:

   >>> binset = getUtility(IBinaryPackageReleaseSet)
   >>> verifyObject(IBinaryPackageReleaseSet, binset)
   True

XXX cprov 20051219: missing wider tests bug # 5947
