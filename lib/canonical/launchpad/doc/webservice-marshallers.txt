= LAZR's field marshallers =

LAZR defines an interface for converting between the values that
come in on an HTTP request, and the object values appropriate for schema
fields. This is similar to Zope's widget interface, but much smaller.

To test the various marshallers we create a dummy request and
application root.

    >>> from canonical.launchpad.webapp.servers import WebServiceTestRequest
    >>> from canonical.launchpad.webapp.servers import WebServicePublication
    >>> request = WebServiceTestRequest(method='GET')
    >>> request.setPublication(WebServicePublication(None))
    >>> login(ANONYMOUS, request)
    >>> request.processInputs()

    >>> from canonical.launchpad.systemhomes import WebServiceApplication
    >>> root = WebServiceApplication()
    >>> from canonical.launchpad.interfaces import IOpenLaunchBag
    >>> getUtility(IOpenLaunchBag).add(root)


== IFieldMarshaller and SimpleFieldMarshaller ==

There is a SimpleFieldMarshaller class that provides a good base to
implement that interface.

    >>> from zope.interface.verify import verifyObject
    >>> from canonical.lazr.interfaces import IFieldMarshaller
    >>> from canonical.lazr.rest import SimpleFieldMarshaller
    >>> from zope.schema import Text

    >>> field = Text(__name__='field_name')
    >>> marshaller = SimpleFieldMarshaller(field, request)
    >>> verifyObject(IFieldMarshaller, marshaller)
    True


=== representation_name ===

The representation_name attribute is used to retrieve the name under
which the field should be stored in the JSON representation. In the
simple case, it's the same name as the field.

    >>> marshaller.representation_name
    'field_name'


=== marshall_from_json_data() ===

The marshall_from_json_data() method is used during PUT and PATCH
requests to transform the value provided in the JSON representation to a
value the underlying schema field. In SimpleFieldMarshaller
implementation, the value in is returned unchanged.

    >>> marshaller.marshall_from_json_data("foo")
    'foo'
    >>> marshaller.marshall_from_json_data(4)
    4
    >>> marshaller.marshall_from_json_data(u"unicode\u2122")
    u'unicode\u2122'
    >>> marshaller.marshall_from_json_data("")
    ''
    >>> print marshaller.marshall_from_json_data(None)
    None


== marshall_from_request() ===

The marshall_from_request() method is used during operation invocation
to transform a value submitted via the query string or form-encoded POST
data into a value the will be accepted by the underlying schema field.

SimpleFieldMarshaller tries first to parse the value as a JSON-encoded
string, the resulting value is passed on to marshall_from_json_data().

    >>> print marshaller.marshall_from_request("null")
    None
    >>> marshaller.marshall_from_request("true")
    True
    >>> marshaller.marshall_from_request("false")
    False
    >>> marshaller.marshall_from_request('["True", "False"]')
    [u'True', u'False']
    >>> marshaller.marshall_from_request("1")
    1
    >>> marshaller.marshall_from_request("-10.5")
    -10.5
    >>> marshaller.marshall_from_request('"a string"')
    u'a string'
    >>> marshaller.marshall_from_request('"false"')
    u'false'
    >>> marshaller.marshall_from_request('"null"')
    u'null'

Invalid JSON-encoded strings are interpreted as string literals and
passed on directly to marshall_from_json(). That's for the convenience
of web clients, they don't need to encode string values in quotes, or
can pass lists using multiple key-value pairs.

    >>> marshaller.marshall_from_request(u"a string")
    u'a string'
    >>> marshaller.marshall_from_request('False')
    'False'
    >>> marshaller.marshall_from_request("")
    ''
    >>> marshaller.marshall_from_request(['value1', 'value2'])
    ['value1', 'value2']


=== unmarshall() ===

The unmarshall() method is used to convert the field's value to a value
that can be serialized to JSON as part of an entry representation.  The
first parameter is the entry that the value is part of (for fields that
will transform the value into a URL for example--see the CollectionField
marshaller for an example). The second one is the value to convert.  In
the SimpleFieldMarshaller implementation, the value is returned
unchanged.

    >>> marshaller.unmarshall(None, 'foo')
    'foo'
    >>> print marshaller.unmarshall(None, None)
    None


== Basic types marshallers ==

=== Bool ===

The marshaller for a Bool field checks that the JSON value is either
True or False. A ValueError is raised when its not the case.

    >>> from zope.component import getMultiAdapter
    >>> from zope.schema import Bool
    >>> field = Bool()
    >>> marshaller = getMultiAdapter((field, request), IFieldMarshaller)
    >>> verifyObject(IFieldMarshaller, marshaller)
    True

    >>> marshaller.marshall_from_json_data(True)
    True
    >>> marshaller.marshall_from_json_data(False)
    False
    >>> marshaller.marshall_from_json_data("true")
    Traceback (most recent call last):
      ...
    ValueError: not a boolean: 'true'
    >>> marshaller.marshall_from_json_data(1)
    Traceback (most recent call last):
      ...
    ValueError: not a boolean: 1

None is passed through though.

    >>> print marshaller.marshall_from_json_data(None)
    None

Booleans are encoded using the standard JSON representation of 'true' or
'false'.

    >>> marshaller.marshall_from_request(u"true")
    True
    >>> marshaller.marshall_from_request(u"false")
    False

    >>> marshaller.marshall_from_request('True')
    Traceback (most recent call last):
      ...
    ValueError: not a boolean: 'True'


=== Int ===

The marshaller for an Int field checks that the JSON value is an
integer. A ValueError is raised when its not the case.

    >>> from zope.schema import Int
    >>> field = Int()
    >>> marshaller = getMultiAdapter((field, request), IFieldMarshaller)
    >>> verifyObject(IFieldMarshaller, marshaller)
    True

    >>> marshaller.marshall_from_json_data(-10)
    -10
    >>> marshaller.marshall_from_json_data("-10")
    Traceback (most recent call last):
      ...
    ValueError: not an integer: '-10'

None is passed through though.

    >>> print marshaller.marshall_from_json_data(None)
    None

Integers are encoded using strings when in a request.

    >>> marshaller.marshall_from_request("4")
    4
    >>> marshaller.marshall_from_request(u"-4")
    -4

Note that python octal and hexadecimal syntax isn't supported.

(This would 13 in octal notation.)

    >>> marshaller.marshall_from_request(u"015")
    Traceback (most recent call last):
      ...
    ValueError: not an integer: u'015'

    >>> marshaller.marshall_from_request(u"0x04")
    Traceback (most recent call last):
      ...
    ValueError: not an integer: u'0x04'


=== Float ===

The marshaller for a Float field checks that the JSON value is indeed a
float.  A ValueError is raised when it's not the case.

    >>> from zope.schema import Float
    >>> field = Float()
    >>> marshaller = getMultiAdapter((field, request), IFieldMarshaller)
    >>> verifyObject(IFieldMarshaller, marshaller)
    True

    >>> marshaller.marshall_from_json_data(1.0)
    1.0
    >>> marshaller.marshall_from_json_data(-1.0)
    -1.0
    >>> marshaller.marshall_from_json_data("true")
    Traceback (most recent call last):
      ...
    ValueError: not a float: 'true'

None is passed through though.

    >>> print marshaller.marshall_from_json_data(None)
    None

And integers are automatically converted to a float.

    >>> marshaller.marshall_from_json_data(1)
    1.0

Floats are encoded using the standard JSON representation.

    >>> marshaller.marshall_from_request(u"1.2")
    1.2
    >>> marshaller.marshall_from_request(u"-1.2")
    -1.2
    >>> marshaller.marshall_from_request(u"-1")
    -1.0

    >>> marshaller.marshall_from_request('True')
    Traceback (most recent call last):
      ...
    ValueError: not a float: 'True'


=== Choice ===

The marshaller for a Choice is chosen based on the Choice's
vocabulary.

    >>> from zope.schema import Choice


==== Choice for IVocabularyTokenized ====

The default marshaller will use the vocabulary getTermByToken to
retrieve the value to use. It raises an error if the value isn't in the
vocabulary.

    >>> field = Choice(__name__='simple', values=[10, 'a value', True])
    >>> marshaller = getMultiAdapter((field, request), IFieldMarshaller)
    >>> verifyObject(IFieldMarshaller, marshaller)
    True
    >>> marshaller.marshall_from_json_data(10)
    10
    >>> marshaller.marshall_from_json_data("a value")
    'a value'
    >>> marshaller.marshall_from_json_data(True)
    True
    >>> marshaller.marshall_from_request('true')
    True
    >>> marshaller.marshall_from_request('a value')
    'a value'
    >>> marshaller.marshall_from_request('10')
    10

    >>> marshaller.marshall_from_json_data('100')
    Traceback (most recent call last):
      ...
    ValueError: '100' isn't a valid token

None is always returned unchanged.

    >>> print marshaller.marshall_from_json_data(None)
    None


==== Choice of EnumeratedTypes ====

The JSON representation of the enumerated value is its title.  A string
that corresponds to one of the values is marshalled to the appropriate
value. A string that doesn't correspond to any enumerated value results
in a helpful ValueError.

    >>> from canonical.launchpad.interfaces import BugTaskStatus
    >>> field = Choice(vocabulary=BugTaskStatus)
    >>> marshaller = getMultiAdapter((field, request), IFieldMarshaller)
    >>> verifyObject(IFieldMarshaller, marshaller)
    True

    >>> marshaller.marshall_from_json_data("Triaged")
    <DBItem BugTaskStatus.TRIAGED...>

    >>> marshaller.marshall_from_json_data("NoSuchStatus")
    Traceback (most recent call last):
    ...
    ValueError: Invalid value "NoSuchStatus". Acceptable values are: ...

    >>> marshaller.marshall_from_json_data("triaged")
    Traceback (most recent call last):
    ...
    ValueError: Invalid value "triaged". Acceptable values are: ...

None is returned unchanged:

    >>> print marshaller.marshall_from_json_data(None)
    None


==== Choice of SQLObjectVocabularyBase ====

For vocabularies based on SQLObjectVocabularyBase, the values are
interpreted as URLs referencing objects on the web service. If the given
string is a URL corresponding to a vocabulary item, the marshaller
returns that item. Otherwise it raises a ValueError.

    >>> from canonical.launchpad.vocabularies import (
    ...     ValidPersonOrTeamVocabulary)
    >>> field = Choice(
    ...     __name__='some_person', vocabulary=ValidPersonOrTeamVocabulary())
    >>> marshaller = getMultiAdapter((field, request), IFieldMarshaller)
    >>> verifyObject(IFieldMarshaller, marshaller)
    True

    >>> from canonical.launchpad.interfaces import IPerson
    >>> person = marshaller.marshall_from_request(
    ...     "http://api.launchpad.dev/beta/~salgado")
    >>> IPerson.providedBy(person)
    True
    >>> person.name
    u'salgado'

    >>> from canonical.launchpad.interfaces import IPerson
    >>> ubuntu_team = marshaller.marshall_from_json_data(
    ...     "http://api.launchpad.dev/beta/~ubuntu-team")
    >>> ubuntu_team.name
    u'ubuntu-team'

    >>> marshaller.marshall_from_request(
    ...     "http://api.launchpad.dev/beta/~nosuchperson")
    Traceback (most recent call last):
    ...
    ValueError: No such object "http://api.launchpad.dev/beta/~nosuchperson".

    >>> marshaller.marshall_from_json_data("salgado")
    Traceback (most recent call last):
    ...
    ValueError: No such object "salgado".

Instead of unmarshall() returning the Person object (which
wouldn't look nice in a JSON representation), this marshaller returns
the URL to that object.

    >>> from canonical.lazr.rest import EntryResource
    >>> person_resource = EntryResource(person, request)

    >>> marshaller.unmarshall(person_resource, person)
    u'http://.../~salgado'

This marshaller also appends '_link' to the representation name of
this field, so that clients can know this is a link to another
resource and not a random string.

    >>> marshaller.representation_name
    'some_person_link'


=== CollectionField ===

The most complicated kind of marshaller is one that manages a
collection of objects associated with some other object. Let's do an
example with a collection of IPerson objects associated with some
IPerson. (This might be the list of teams in which a person has a
membership, or something like that.)

    >>> from zope.schema import Object
    >>> from canonical.lazr.rest.schema import CollectionField
    >>> field = CollectionField(
    ...     __name__='person_memberships', value_type=Object(schema=IPerson))
    >>> marshaller = getMultiAdapter((field, request), IFieldMarshaller)
    >>> verifyObject(IFieldMarshaller, marshaller)
    True

Instead of serving the actual collection, collection marshallers serve
a URL to that collection.

    >>> marshaller.unmarshall(person_resource, ["member 1", "member 2"])
    u'http://.../~salgado/person_memberships'

They also annotate the representation name of the field, so that
clients know this is a link to a collection-type resource.

    >>> marshaller.representation_name
    'person_memberships_collection_link'
