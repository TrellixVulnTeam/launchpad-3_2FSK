POMsgSet translation functions
==============================

For rendering translations in the POMsgSetView a number of helper
functions exist. The following sections cover them in detail.

contract_rosetta_tabs
---------------------

    >>> from canonical.launchpad.browser.pomsgset import contract_rosetta_tabs

Normal strings get passed through unmodified.

    >>> contract_rosetta_tabs('foo')
    'foo'
    >>> contract_rosetta_tabs('foo\\nbar')
    'foo\\nbar'

The string '[tab]' gets gonveted to a tab character.

    >>> contract_rosetta_tabs('foo[tab]bar')
    'foo\tbar'

The string '\[tab]' gets converted to a literal '[tab]'.

    >>> contract_rosetta_tabs('foo\\[tab]bar')
    'foo[tab]bar'

The string '\\[tab]' gets converted to a literal '\[tab]'.

    >>> contract_rosetta_tabs('foo\\\\[tab]bar')
    'foo\\[tab]bar'

And so on...

    >>> contract_rosetta_tabs('foo\\\\\\[tab]bar')
    'foo\\\\[tab]bar'


expand_rosetta_tabs
-------------------

    >>> from canonical.launchpad.browser.pomsgset import expand_rosetta_tabs

Normal strings get passed through unmodified.

    >>> expand_rosetta_tabs(u'foo')
    u'foo'
    >>> expand_rosetta_tabs(u'foo\\nbar')
    u'foo\\nbar'

Tabs get converted to a special constant TranslationConstants.TAB_CHAR
which renders as below:

    >>> expand_rosetta_tabs(u'foo\tbar')
    u'foo<code>[tab]</code>bar'

Literal occurrences of u'[tab]' get escaped to a special constant
TranslationConstants.TAB_CHAR_ESCAPED which renders them as below:

    >>> expand_rosetta_tabs(u'foo[tab]bar')
    u'foo<code>\\[tab]</code>bar'

Escaped ocurrences themselves get escaped.

    >>> expand_rosetta_tabs(u'foo\\[tab]bar')
    u'foo\\<code>\\[tab]</code>bar'

And so on...

    >>> expand_rosetta_tabs(u'foo\\\\[tab]bar')
    u'foo\\\\<code>\\[tab]</code>bar'


parse_cformat_string
--------------------

    >>> from canonical.launchpad.browser.pomsgset import parse_cformat_string
    >>> parse_cformat_string('')
    []
    >>> parse_cformat_string('foo')
    [('string', 'foo')]
    >>> parse_cformat_string('blah %d blah')
    [('string', 'blah '), ('interpolation', '%d'), ('string', ' blah')]
    >>> parse_cformat_string('%sfoo%%bar%s')
    [('interpolation', '%s'), ('string', 'foo%%bar'), ('interpolation', '%s')]
    >>> parse_cformat_string('%')
    Traceback (most recent call last):
    ...
    UnrecognisedCFormatString: %


msgid_html
----------

    >>> from canonical.launchpad.browser.pomsgset import msgid_html

First, do no harm.

    >>> msgid_html(u'foo bar', [], 'XXXA')
    u'foo bar'

Test replacement of leading and trailing spaces.

    >>> msgid_html(u' foo bar', [], 'XXXA')
    u'XXXAfoo bar'
    >>> msgid_html(u'foo bar ', [], 'XXXA')
    u'foo barXXXA'
    >>> msgid_html(u'  foo bar  ', [], 'XXXA')
    u'XXXAXXXAfoo barXXXAXXXA'

Test replacement of newlines.

    >>> msgid_html(u'foo\nbar', [], newline='YYYA')
    u'fooYYYAbar'

And both together.

    >>> msgid_html(u'foo \nbar', [], 'XXXA', 'YYYA')
    u'fooXXXAYYYAbar'

Test treatment of tabs.

    >>> msgid_html(u'foo\tbar', [])
    u'foo<code>[tab]</code>bar'

Test valid C format strings are formatted.

    >>> msgid_html(u'foo %d bar', ['c-format'])
    u'foo <code>%d</code> bar'

Test bad format strings are caught and passed through.

    >>> text = u'foo %z bar'
    >>> parse_cformat_string(text)
    Traceback (most recent call last):
    ...
    UnrecognisedCFormatString: foo %z bar

    >>> msgid_html(text, ['c-format']) == text
    True


convert_newlines_to_web_form
----------------------------

    >>> from canonical.launchpad.browser.pomsgset import convert_newlines_to_web_form
    >>> convert_newlines_to_web_form(u'foo')
    u'foo'
    >>> convert_newlines_to_web_form(u'foo\n')
    u'foo\r\n'
    >>> convert_newlines_to_web_form(u'foo\nbar\n\nbaz')
    u'foo\r\nbar\r\n\r\nbaz'
    >>> convert_newlines_to_web_form(u'foo\r\nbar')
    u'foo\r\nbar'
    >>> convert_newlines_to_web_form(u'foo\rbar')
    u'foo\r\nbar'


count_lines
-----------

    >>> from canonical.launchpad.browser.pomsgset import count_lines
    >>> count_lines("foo")
    1
    >>> count_lines("123456789a123456789a123456789a1234566789a123456789a")
    2
    >>> count_lines("123456789a123456789a123456789a1234566789a123456789")
    1
    >>> count_lines("a\nb")
    2
    >>> count_lines("a\nb\n")
    3
    >>> count_lines("a\nb\nc")
    3
    >>> count_lines("123456789a123456789a123456789a\n1234566789a123456789a")
    2
    >>> count_lines("123456789a123456789a123456789a123456789a123456789a1\n1234566789a123456789a123456789a")
    3
    >>> count_lines("123456789a123456789a123456789a123456789a123456789a123456789a\n1234566789a123456789a123456789a")
    3
    >>> count_lines("foo bar\n")
    2

