XMLRPC urllib2 transport
------------------------

When using XMLRPC for connecting to external bug trackers, we need to
use a special transport, which processes http cookies correctly, and
which can connect through an http proxy server.

    >>> from lp.bugs.tests.externalbugtracker import (
    ...     UrlLib2TransportTestHandler)
    >>> from lp.bugs.externalbugtracker.xmlrpc import (
    ...     UrlLib2Transport)

UrlLib2Transport accepts a CookieJar as an optional parameter upon creation.
This allows us to share a CookieJar - and therefore the cookie it contains -
between different transports or URL openers.

    >>> from cookielib import CookieJar
    >>> jar = CookieJar()
    >>> transport = UrlLib2Transport('http://example.com', jar)
    >>> transport.cookie_processor.cookiejar == jar
    True

We patch the opener to return a fixed response without actually opening a
connection.  The response returns the request-url as an XMLRPC parameter, and
sets a cookie from the server, 'foo=bar'.

    >>> test_handler = UrlLib2TransportTestHandler()
    >>> transport.opener.add_handler(test_handler)

Before sending the request, the transport's cookie jar is empty.

    >>> transport.cookie_processor.cookiejar
    <cookielib.CookieJar[]>

    >>> request_body = """<?xml version="1.0"?>
    ... <methodCall>
    ...   <methodName>examples.testMethod</methodName>
    ...   <params>
    ...     <param>
    ...       <value>
    ...         <int>42</int>
    ...       </value>
    ...     </param>
    ...   </params>
    ... </methodCall>
    ... """
    >>> transport.request('www.example.com', 'xmlrpc', request_body)
    ('http://www.example.com/xmlrpc',)

We received the url as the single XMLRPC result, and the cookie jar now
contains the 'foo=bar' cookie sent by the server.

    >>> transport.cookie_processor.cookiejar
    <cookielib.CookieJar[Cookie(version=0, name='foo', value='bar'...)]>

In addition to cookies sent by the server, we can set cookies locally.

    >>> transport.setCookie('ding=dong')
    >>> transport.cookie_processor.cookiejar
    <cookielib.CookieJar[Cookie(version=0, name='ding', value='dong'...),
                         Cookie(version=0, name='foo', value='bar'...)]>

If an error occurs trying to make the request, an
``xmlrpclib.ProtocolError`` is raised.

    >>> from urllib2 import HTTPError
    >>> test_handler.setError(
    ...     HTTPError(
    ...         'http://www.example.com/xmlrpc', 500, 'Internal Error', {},
    ...          None),
    ...     'http://www.example.com/xmlrpc')
    >>> request_body = """<?xml version="1.0"?>
    ... <methodCall>
    ...   <methodName>examples.testError</methodName>
    ...   <params>
    ...     <param>
    ...       <value>
    ...         <int>42</int>
    ...       </value>
    ...     </param>
    ...   </params>
    ... </methodCall>
    ... """
    >>> transport.request('www.example.com', 'xmlrpc', request_body)
    Traceback (most recent call last):
    ...
    ProtocolError: <ProtocolError for http://www.example.com/xmlrpc: 500
    Internal Error>

If the transport encounters a redirect response it will make its request
to the location indicated in that response rather than the original
location.

    >>> test_handler.setRedirect('http://www.example.com/xmlrpc/redirected')
    >>> request_body = """<?xml version="1.0"?>
    ... <methodCall>
    ...   <methodName>examples.whatever</methodName>
    ...   <params>
    ...     <param>
    ...       <value>
    ...         <int>42</int>
    ...       </value>
    ...     </param>
    ...   </params>
    ... </methodCall>
    ... """
    >>> transport.request('www.example.com', 'xmlrpc', request_body)
    ('http://www.example.com/xmlrpc/redirected',)


The XMLRPCRedirectHandler
=========================

The UrlLib2Transport uses a custom HTTP redirection handler to handle
redirect responses. This is a subclass of urllib2's HTTPRedirectHandler.

    >>> from lp.bugs.externalbugtracker.xmlrpc import XMLRPCRedirectHandler
    >>> from urllib2 import HTTPRedirectHandler, Request

    >>> transport.opener.handlers
    [... <lp.bugs...XMLRPCRedirectHandler instance ...]

    >>> issubclass(XMLRPCRedirectHandler, HTTPRedirectHandler)
    True

XMLRPCRedirectHandler overrides HTTPRedirectHandler's redirect_request()
method. XMLRPCRedirectHandler.redirect_request() will return a
urllib2.Request object that is set to POST to the new target URL
specified by an HTTP 30x redirect response (as opposed to
HTTPRedirectHandler.redirect_request(), which will return a GET request
to the new target URL).

    >>> request_body = """<?xml version="1.0"?>
    ... <methodCall>
    ...   <methodName>examples.exampleRequest</methodName>
    ...   <params>
    ...     <param>
    ...       <value>
    ...         <int>42</int>
    ...       </value>
    ...     </param>
    ...   </params>
    ... </methodCall>
    ... """
    >>> request_to_be_redirected = Request(
    ...     'http://www.example.com', data=request_body)
    >>> request_to_be_redirected.timeout = 30

    >>> handler = XMLRPCRedirectHandler()
    >>> redirected_request = handler.redirect_request(
    ...     request_to_be_redirected, None, 302, 'Moved', {},
    ...     newurl='http://www.example.com/redirected')

The new request will be a POST request to the URL specified in
redirect_request()'s newurl parameter. The payload of the request will
be the XML-RPC method call.

    >>> print redirected_request.get_method()
    POST

    >>> print redirected_request.get_full_url()
    http://www.example.com/redirected

    >>> print redirected_request.data
    <?xml version="1.0"?>
    <methodCall>
      <methodName>examples.exampleRequest</methodName>
      <params>
        <param>
          <value>
            <int>42</int>
          </value>
        </param>
      </params>
    </methodCall>
    >>> redirected_request.timeout == request_to_be_redirected.timeout
    True

If an XMLRPCRedirectHandler is passed a GET request to redirect, the new
request will be a GET request with no payload.

    >>> request_to_be_redirected = Request('http://www.example.com')
    >>> request_to_be_redirected.timeout = 30
    >>> redirected_request = handler.redirect_request(
    ...     request_to_be_redirected, None, 302, 'Moved', {},
    ...     newurl='http://www.example.com/redirected')

    >>> print redirected_request.get_method()
    GET

    >>> print redirected_request.get_full_url()
    http://www.example.com/redirected

    >>> print redirected_request.data
    None
