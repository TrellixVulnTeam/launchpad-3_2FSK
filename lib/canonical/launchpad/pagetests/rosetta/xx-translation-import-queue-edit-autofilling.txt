This test is going to test the form prefill so we speedup the productivity
of the Translation import queue reviewers.

First, we need to feed the import queue.

  >>> import canonical.launchpad
  >>> import os.path
  >>> test_file_name = os.path.join(
  ...     os.path.dirname(canonical.launchpad.__file__),
  ...     'pagetests/rosetta/xx-translation-import-queue-edit-autofilling.tar.gz')
  >>> tarball = open(test_file_name)

  >>> browser = setupBrowser(auth='Basic carlos@canonical.com:test')
  >>> browser.open(
  ...     'http://translations.launchpad.dev/alsa-utils/trunk/'
  ...     '+translations-upload')
  >>> file_ctrl = browser.getControl('File:')
  >>> file_ctrl.add_file(
  ...     tarball, 'application/x-gzip', 'test-autofilling.tar.gz')
  >>> browser.getControl('Request Upload').click()
  >>> browser.url
  'http://translations.launchpad.dev/alsa-utils/trunk/+translations-upload'
  >>> for tag in find_tags_by_class(browser.contents, 'message'):
  ...     print tag
  <div...Thank you for your upload. 2 files from the tarball will be reviewed...

Let's check the values we get by default from the .pot file. As we can see,
the form is completely empty.

  >>> browser.open('http://translations.launchpad.dev/+imports/4')
  >>> browser.getControl(name='field.name').value
  ''
  >>> browser.getControl(name='field.path').value
  ''

Let's fill the information.

  >>> browser.getControl(name='field.name').value = 'alsa-utils'
  >>> browser.getControl(name='field.actions.attach').click()
  >>> browser.url
  'http://translations.launchpad.dev/+imports'

Now, as we already know the name, a new form load should
give us that field with information.

  >>> browser.open('http://translations.launchpad.dev/+imports/4')
  >>> browser.getControl(name='field.name').value
  'alsa-utils'

Let's move to the .po file. By default, we don't know anything about it,
but we can guess the language. As it's a guessed value, we warn the user so
he checks that it's ok.

  >>> browser.open('http://translations.launchpad.dev/+imports/3')
  >>> browser.getControl(name='field.name').value
  ''
  >>> browser.getControl(name='field.path').value
  ''
  >>> browser.getControl(name='field.language').value
  ['es']
  >>> browser.getControl(name='field.variant').value
  ''

Rosetta experts should be able to override the path in the source tree from
where this entry comes. To be sure that the path changed but that it's still
the same entry, previous_url holds current value.

  >>> previous_url = browser.getLink('test/es.po').url

  >>> browser.getControl(name='field.name').value = 'alsa-utils'
  >>> browser.getControl(name='field.path').value = 'po/es.po'
  >>> browser.getControl(name='field.actions.attach').click()
  >>> browser.url
  'http://translations.launchpad.dev/+imports'

Reloading the form shows all the submitted information applied.

  >>> browser.open('http://translations.launchpad.dev/+imports/3')
  >>> browser.getControl(name='field.name').value
  'alsa-utils'
  >>> browser.getControl(name='field.language').value
  ['es']
  >>> browser.getControl(name='field.variant').value
  ''

The path overriding is stored forgetting previous value, after the submission
and thus, it doesn't appear in the form as an editable field.

  >>> browser.getControl(name='field.path').value
  ''

But it's applied in the info about the entry:

  >>> browser.getLink('po/es.po').url == previous_url
  True
