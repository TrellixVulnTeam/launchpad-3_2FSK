= Milestones =

== Utility function(s) ==

We have a page which lists all the milestones for an object. This function
will print them out:

    >>> def all_milestones(browser):
    ...     table = find_main_content(browser.contents).find('tbody')
    ...     if table is None:
    ...         return None
    ...     result = []
    ...     for tr in table.findAll('tr'):
    ...         result.append(extract_text(tr))
    ...     return '\n'.join(result)

    >>> def milestones_in_portlet(browser):
    ...     portlet = find_portlet(browser.contents, 'Active milestones')
    ...     if portlet is None:
    ...         return None
    ...     result = []
    ...     for tr in portlet.find('table').findAll('tr'):
    ...         result.append(
    ...             ' '.join(text.strip() for text in tr.findAll(text=True)))
    ...     return '\n'.join(result)

== Milestone listings ==

Products, distributions, product series, distribution series and projects have
a page in which all of their milestones are listed.


=== Distributions ===

    >>> anon_browser.open('http://launchpad.dev/debian/+milestones')
    >>> anon_browser.url
    'http://launchpad.dev/debian/+milestones'

    >>> print all_milestones(anon_browser)
    Debian 3.1      Woody ...
    Debian 3.1-rc1  Woody ...


=== Distribution Series ===

    >>> anon_browser.open('http://launchpad.dev/debian/woody/+milestones')
    >>> print all_milestones(anon_browser)
    Debian 3.1      ...
    Debian 3.1-rc1  ...

    >>> anon_browser.open('http://launchpad.dev/debian/sarge/+milestones')
    >>> print all_milestones(anon_browser)
    None


=== Products ===

The Product "All milestones" page lists the milestones for all series,
including the inactive ones. They do not include the bug and blueprint counts
(because they are costly to retrieve).

    >>> anon_browser.open('http://launchpad.dev/firefox/+milestones')
    >>> anon_browser.url
    'http://launchpad.dev/firefox/+milestones'

    >>> print all_milestones(anon_browser)
    Mozilla Firefox 1.0.0 "First Stable Release"    1.0    None        ...
    Mozilla Firefox 0.9.2 "One (secure) Tree Hill"  trunk  None        ...
    Mozilla Firefox 0.9.1 "One Tree Hill (v2)"      trunk  None        ...
    Mozilla Firefox 0.9   "One Tree Hill"           trunk  None        ...
    Mozilla Firefox 1.0                             trunk  2056-10-16
                                                              not yet released


=== Product Series ===

    >>> anon_browser.open('http://launchpad.dev/firefox/trunk/+milestones')
    >>> print all_milestones(anon_browser)
    Mozilla Firefox 0.9.2  ...
    Mozilla Firefox 0.9.1  ...
    Mozilla Firefox 0.9    ...
    Mozilla Firefox 1.0    ...

    >>> anon_browser.open('http://launchpad.dev/firefox/1.0/+milestones')
    >>> print all_milestones(anon_browser)
    Mozilla Firefox 1.0.0 ...


=== Projects ===

The project "All milestones" page lists all milestones for all products and
series, including the inactive ones. They do not include the bug and blueprint
counts (because they are costly to retrieve).

    >>> from canonical.launchpad.ftests import login, logout
    >>> from lp.registry.tests.test_project_milestone import (
    ...     ProjectMilestoneTest)
    >>> login('foo.bar@canonical.com')
    >>> test_helper = ProjectMilestoneTest(helper_only=True)
    >>> test_helper.setUpProjectMilestoneTests()
    >>> logout()
    >>> anon_browser.open('http://launchpad.dev/gnome')
    >>> anon_browser.getLink('See all milestones').click()
    >>> print all_milestones(anon_browser)
    GNOME 2.1.6  None        This is an inactive milestone
    GNOME 1.0    None        This is an inactive milestone
    GNOME 1.3    2012-04-01  This is an inactive milestone
    GNOME 1.2    2011-04-01  not yet released
    GNOME 1.1.   2010-04-02  not yet released
    GNOME 1.1    2010-04-01  not yet released Bugs targeted: 3 Confirmed
                                              Blueprints targeted: 2 Unknown


== Individual milestones ==

Pages for the individual milestones show all specifications and bugtasks
associated with that milestone for products of this project:

    >>> anon_browser.getLink('1.1', index=1).click()
    >>> print anon_browser.title
    GNOME 1.1

    >>> specs = find_tag_by_id(anon_browser.contents, 'milestone_specs')
    >>> print extract_text(specs)
    Blueprint Product Priority Assignee Delivery
    Title evolution specification   Evolution  High  Unknown
    Title gnomebaker specification  gnomebaker High  Unknown

    >>> bugtasks = find_tag_by_id(anon_browser.contents, 'milestone_bugtasks')
    >>> print extract_text(bugtasks)
    Bug report Product Importance Assignee Status ...
    Milestone test bug for evolution  Evolution  Undecided Confirmed ...
    Milestone test bug for gnomebaker gnomebaker Undecided Confirmed ...
    Milestone test bug for evolution series trunk Undecided Confirmed

A project milestone page has the same navigation as the project:

    >>> anon_browser.open('http://launchpad.dev/firefox/+milestone/1.0')
    >>> print anon_browser.title
    Mozilla Firefox 1.0

    >>> print_location(anon_browser.contents)
    Hierarchy: None displayed
    Tabs:
    * Overview (selected) - http://launchpad.dev/firefox
    * Code - http://code.launchpad.dev/firefox
    * Bugs - http://bugs.launchpad.dev/firefox
    * Blueprints - http://blueprints.launchpad.dev/firefox
    * Translations - http://translations.launchpad.dev/firefox
    * Answers - http://answers.launchpad.dev/firefox
    Main heading: Mozilla Firefox 1.0

Similarly, a distribution milestone page has the same navigation as
the distribution:

    >>> anon_browser.open('http://launchpad.dev/debian/+milestone/3.1')
    >>> print anon_browser.title
    Debian 3.1

    >>> print_location(anon_browser.contents)
    Hierarchy: None displayed
    Tabs:
    * Overview (selected) - http://launchpad.dev/debian
    * Code - http://code.launchpad.dev/debian
    * Bugs - http://bugs.launchpad.dev/debian
    * Blueprints - http://blueprints.launchpad.dev/debian
    * Translations - http://translations.launchpad.dev/debian
    * Answers - http://answers.launchpad.dev/debian
    Main heading: Debian 3.1


=== Duplicate bugs ===

Milestone bug listings do not show bugs that are marked as duplicates of other
bugs.

To demonstrate this, we'll begin by filing a couple of bugs for the Mozilla
Firefox product:

    >>> browser = setupBrowser(auth='Basic test@canonical.com:test')
    >>> browser.open('http://bugs.launchpad.dev/firefox/')
    >>> browser.getLink('Report a bug').click()
    >>> browser.getControl('Summary').value = 'Test Bug 1'
    >>> browser.getControl('Continue').click()

    >>> report_bug_url = browser.url

    >>> browser.getControl('Further information').value = 'Test Bug 1'
    >>> browser.getControl('Submit').click()
    >>> print extract_text(find_main_content(browser.contents))
    Thank you for your bug report...
    >>> bug_1_url = browser.url

    >>> browser.open(report_bug_url)
    >>> browser.getControl('Summary').value = 'Test Bug 2'
    >>> browser.getControl('Continue').click()

    >>> browser.getControl('Further information').value = 'Test Bug 2'
    >>> browser.getControl('Submit').click()
    >>> print extract_text(find_main_content(browser.contents))
    Thank you for your bug report...
    >>> bug_2_url = browser.url

To make it easy to refer to the bugs, we'll give each bug a nickname:

    >>> bug_1_nickname = 'test-bug-1'
    >>> browser.open(bug_1_url)
    >>> browser.getLink(url='+edit').click()
    >>> browser.getControl('Nickname').value = bug_1_nickname
    >>> browser.getControl('Change').click()

    >>> bug_2_nickname = 'test-bug-2'
    >>> browser.open(bug_2_url)
    >>> browser.getLink(url='+edit').click()
    >>> browser.getControl('Nickname').value = bug_2_nickname
    >>> browser.getControl('Change').click()

Next, we'll target each bug to the 1.0 milestone:

    >>> browser.open(bug_1_url)
    >>> browser.getLink(url=bug_1_url + '/+editstatus').click()
    >>> control = browser.getControl('Milestone')
    >>> milestone_name = '1.0'
    >>> [milestone_id] = [
    ...     option.name for option in control.mech_control.items
    ...     if option.get_labels()[0].text.endswith(milestone_name)]
    >>> control.value = [milestone_id]
    >>> browser.getControl('Save Changes').click()

    >>> browser.open(bug_2_url)
    >>> browser.getLink(url=bug_2_url + '/+editstatus').click()
    >>> browser.getControl('Milestone').value = [milestone_id]
    >>> browser.getControl('Save Changes').click()

Observe that both bugs are listed in the 1.0 milestone listing:

    >>> browser.open('http://launchpad.dev/firefox/trunk')
    >>> browser.getLink('All milestones').click()
    >>> browser.getLink("Mozilla Firefox 1.0", index=1).click()
    >>> print browser.title
    Mozilla Firefox 1.0
    >>> milestone_url = browser.url

    >>> browser.getLink('Test Bug 1').click()
    >>> browser.url == bug_1_url
    True

    >>> browser.open(milestone_url)
    >>> browser.getLink('Test Bug 2').click()
    >>> browser.url == bug_2_url
    True

Now we'll mark the second bug as a duplicate of the first:

    >>> browser.open(bug_2_url)
    >>> browser.getLink('Mark as duplicate').click()
    >>> browser.getControl('Duplicate').value = bug_1_nickname
    >>> browser.getControl('Change').click()
    >>> print extract_text(find_main_content(browser.contents))
    Bug #20 reported...
    Duplicate of bug #19...

Since duplicate bugs are not listed in milestone listings, only our first bug
is listed in the 1.0 milestone listing:

    >>> browser.open(milestone_url)
    >>> browser.getLink('Test Bug 1').click()
    >>> browser.url == bug_1_url
    True

    >>> browser.open(milestone_url)
    >>> print browser.getLink('Test Bug 2')
    Traceback (most recent call last):
        ...
    LinkNotFoundError

However, it's also possible to clear the duplicate status of our second bug:

    >>> browser.open(bug_2_url)
    >>> browser.getLink(id='change_duplicate_bug').click()
    >>> browser.getControl('Duplicate').value = ''
    >>> browser.getControl('Change').click()
    >>> 'This report is a duplicate' in find_main_content(browser.contents)
    False

Now both bugs are listed in the 1.0 milestone listing once again:

    >>> browser.open(milestone_url)
    >>> browser.getLink('Test Bug 1').click()
    >>> browser.url == bug_1_url
    True

    >>> browser.open(milestone_url)
    >>> browser.getLink('Test Bug 2').click()
    >>> browser.url == bug_2_url
    True


=== Bugs targeted to multiple series ===

Bugs targeted to the same milestone across more than one series will result in
duplicate entries in the milestone listing (one for each series target).

To demonstrate this, we'll begin by creating a new series "2.0" for the
Mozilla Firefox product, to complement the existing series "1.0":

    >>> browser.open('http://launchpad.dev/firefox')
    >>> browser.getLink('Register a series').click()
    >>> print browser.title
    +addseries : Mozilla Firefox

    >>> browser.getControl('Name').value = '2.0'
    >>> browser.getControl('Summary').value = 'The Firefox 2.0 Series'
    >>> browser.getControl('Register Series').click()
    >>> print browser.title
    Series 2.0 : Mozilla Firefox

We'll also create a new test milestone within the "trunk" series:

    >>> browser.open('http://launchpad.dev/firefox/trunk')
    >>> print browser.title
    Series trunk : Mozilla Firefox

    >>> browser.getLink('Create milestone').click()
    >>> print browser.title
    +addmilestone : Series trunk : Mozilla Firefox

    >>> milestone = 'test-milestone'
    >>> browser.getControl('Name').value = milestone
    >>> browser.getControl('Date Targeted').value = '2100-08-08'
    >>> browser.getControl('Register Milestone').click()
    >>> print browser.title
    Series trunk : Mozilla Firefox

    >>> print extract_text(find_tag_by_id(browser.contents, 'series-trunk'))
    Version "Codename"              Expected    Released              Summary
    Mozilla Firefox 0.9.2...        Set date    Change details 2004-10-16  ...
    Mozilla Firefox...              Set date    Change details 2004-10-16  ...
    Mozilla Firefox test-milestone  2100-08-08  Release now ...

    >>> browser.getLink('test-milestone').click()
    >>> print browser.title
    Mozilla Firefox test-milestone
    >>> milestone_url = browser.url

Let's target an existing bug to both series "1.0" and series "2.0":

    >>> from canonical.launchpad.helpers import backslashreplace
    >>> browser.open(bug_1_url)
    >>> print backslashreplace(browser.title)
    Bug...in Mozilla Firefox...

    >>> browser.getLink('Target to release').click()
    >>> print browser.title
    +nominate : Bug #19 (test-bug-1) : Bugs in firefox : Mozilla Firefox

    >>> browser.getControl('1.0').selected = True
    >>> browser.getControl('2.0').selected = True
    >>> browser.getControl('Submit').click()

The bug page now lists a bug task for each series:

    >>> print extract_text(first_tag_by_class(browser.contents, 'listing'))
    Affects Status Importance ...
    1.0     New    Undecided  ...
    2.0     New    Undecided  ...

Now we'll add each bug task to the same test milestone. Each bug task has a
link to an "edit status" form that can be used to choose the milestone we're
interested in. However, we need to be careful when matching these links, as
they may contain the same text as other links. We'll use a specific URL
pattern to avoid matching unrelated links.

Let's start with the first bug task:

    >>> import re
    >>> edit_status_url = re.compile(r'1.0/\+bug/[0-9]+/\+editstatus')
    >>> browser.getLink(url=edit_status_url).click()

Completing the "edit status" form allows us to add the bug task to the
milestone:

    >>> browser.getControl('Milestone').displayValue = [milestone]
    >>> browser.getControl('Importance').value = ['Critical']
    >>> browser.getControl('Save Changes').click()

    >>> print extract_text(first_tag_by_class(browser.contents, 'listing'))
    Affects Status Importance ...
    1.0     New    Critical   ...

Now we'll add the second bug task to the test milestone, using the same
method. However this time we'll use a different importance:

    >>> edit_status_url = re.compile(r'2.0/\+bug/[0-9]+/\+editstatus')
    >>> browser.getLink(url=edit_status_url).click()
    >>> browser.getControl('Milestone').displayValue = [milestone]
    >>> browser.getControl('Importance').value = ['High']
    >>> browser.getControl('Save Changes').click()

    >>> print extract_text(first_tag_by_class(browser.contents, 'listing'))
    Affects Status Importance ...
    2.0     New    High       ...

Observe that both bug tasks are now listed in the test milestone listing:

    >>> browser.open(milestone_url)
    >>> bug_table = find_tag_by_id(browser.contents, 'milestone_bugtasks')
    >>> print extract_text(bug_table )
    Bug report       Importance  Assignee  Status
    #19 Test Bug 1   Critical              New
    #19 Test Bug 1   High                  New

Each bugtask has one or more badges.

    >>> print bug_table.findAll('tr')[1]
    <tr>...Test Bug 1...<a...alt="milestone test-milestone"...class="sprite milestone">...


=== Bugs targeted to development focus series ===

When a bug is raised for a product or distribution, it is implicitly targeted
to the development focus series for that product or distribution ("trunk" by
default).

Ordinarily, targeting a bug to a milestone causes the bug to appear in that
milestone's bug listing:

    >>> browser.open(bug_2_url)
    >>> browser.getLink(url=bug_2_url + '/+editstatus').click()
    >>> browser.getControl('Milestone').displayValue = [milestone]
    >>> browser.getControl('Save Changes').click()

    >>> browser.open(milestone_url)
    >>> print extract_text(find_tag_by_id(browser.contents,
    ...                                   'milestone_bugtasks'))
    Bug report...
    Test Bug 2...

When we explicitly target the bug to the development focus series, the bug
still appears in the milestone's bug listing:

    >>> browser.open(bug_2_url)
    >>> browser.getLink('Target to release').click()
    >>> print browser.url
    http://bugs.launchpad.dev/firefox/+bug/.../+nominate

    >>> browser.getControl('Trunk').selected = True
    >>> browser.getControl('Submit').click()
    >>> print extract_text(first_tag_by_class(browser.contents, 'listing'))
    Affects             Status                  ...
    Mozilla Firefox ... Status tracked in Trunk ...

    >>> browser.open(milestone_url)
    >>> bugtasks = extract_text(find_tag_by_id(browser.contents,
    ...                                        'milestone_bugtasks'))
    >>> print bugtasks
    Bug report...
    Test Bug 2...

Moreover, the bug appears only once in the listing:

    >>> print bugtasks.count('Test Bug 2')
    1
