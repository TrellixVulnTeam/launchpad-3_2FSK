= Archive View Classes and Pages =

    >>> from zope.component import getView
    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest

Let's use Celso's PPA for the tests.

    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> cprov = getUtility(IPersonSet).getByName('cprov')


== ArchivePackageDeletionView ==

We use ArchivePackageDeletionView to provide the mechnisms used to
delete packages from a PPA via the UI.

This view is only accessible by users with 'launchpad.Edit' permission
in the archive, that would be only the PPA owner (or administrators of
the Team owning the PPA) and Launchpad administrators. See further
tests in pagetests/xx-delete-packages.txt.

We will use the PPA owner, Celso user, to satisfy the references
required for deleting packages.

    >>> login('celso.providelo@canonical.com')

Issuing a empty request we can inspect the internal attributes used to
build the page.

    >>> empty_request = LaunchpadTestRequest(form={})
    >>> view = getView(cprov.archive, "+delete-packages", empty_request)
    >>> view.initialize()

We query the available PUBLISHED sources and use them to build the
'selected_sources' widget.

    >>> [pub.id for pub in view.sources]
    [27, 28, 29]

    >>> view.has_sources
    True

    >>> view.available_sources_size
    3

    >>> len(view.widgets.get('selected_sources').vocabulary)
    3

The 'selected_sources' widget has a limit controlled via a hard-coded
view attribute. We only present up to 'max_sources_presented' options
and if the available number options exceed this number, we present a
warning message to the user. By default the limit is 50.

    >>> view.max_sources_presented
    50

    >>> view.has_undisplayed_sources
    False

Using a lower limit we can see the described mechanism working.

    >>> view.max_sources_presented = 2
    >>> view.initialize()

    >>> view.available_sources_size
    3

    >>> view.has_undisplayed_sources
    True

    >>> len(view.widgets.get('selected_sources').vocabulary)
    2

Restoring the default widget limit.

    >>> view.max_sources_presented = 50
    >>> view.initialize()

This view also provides package filtering by source package name, so
the user can refine the available options presented. By default all
available sources are presented with empty filter.

    >>> for pub in view.sources:
    ...     print pub.displayname
    cdrkit 1.0 in breezy-autotest
    iceweasel 1.0 in warty
    pmount 0.1-1 in warty

Whatever is passed as 'name_filter' results in a corresponding set of
filtered results.

    >>> name_filter_request = LaunchpadTestRequest(
    ...     form={'field.name_filter': 'pmount'})
    >>> view = getView(
    ...    cprov.archive, "+delete-packages", name_filter_request)
    >>> view.initialize()

    >>> for pub in view.sources:
    ...     print pub.displayname
    pmount 0.1-1 in warty

When submitted, deletions immediately take effect resulting in a page
which the available options already exclude the deleted items.

    >>> delete_all_request = LaunchpadTestRequest(
    ...    form={'field.actions.delete': 'Delete Packages',
    ...          'field.name_filter': '',
    ...          'field.deletion_comment': 'Go away',
    ...          'field.selected_sources': ['27', '28', '29'],
    ...          'field.selected_sources-empty-marker': 1})
    >>> delete_all_request.method = 'POST'

    >>> view = getView(cprov.archive, "+delete-packages", delete_all_request)
    >>> view.initialize()

    >>> view.available_sources_size
    0
    >>> view.has_sources
    False

    >>> import transaction
    >>> transaction.commit()

If by any chance, the form containing already deleted items, is
re-POSTed to the page, the code is able to identify such invalid
situation and ignore it. See bug #185922 for reference.

    >>> view = getView(cprov.archive, "+delete-packages", delete_all_request)
    >>> view.initialize()
    >>> view.available_sources_size
    0
    >>> view.has_sources
    False
    >>> len(view.errors)
    2

== ArchiveEditDependenciesView ==

We use ArchiveEditDependenciesView to provide the mechnisms used to
add and/or remove archive dependencies for a PPA via the UI.

This view is only accessible by users with 'launchpad.Edit' permission
in the archive, that would be only the PPA owner (or administrators of
the Team owning the PPA) and Launchpad administrators. See further
tests in pagetests/xx-edit-dependencies.txt.

We will use the PPA owner, Celso user, to play with edit-dependencies
corner-cases.

    >>> login('celso.providelo@canonical.com')

Issuing a empty request we can inspect the internal attributes used to
build the page.

    >>> empty_request = LaunchpadTestRequest(form={})
    >>> view = getView(cprov.archive, "+edit-dependencies", empty_request)
    >>> view.initialize()

There is a property indicating whether or not the context PPA has
recorded dependencies.

    >>> view.has_dependencies
    False

Also the 'selected_dependencies' form field is present, even if it is empty.

    >>> len(view.widgets.get('selected_dependencies').vocabulary)
    0

When there is no dependencies the form focus is set to the
'dependency_candidate' input field. Where the user can directly type
the owner of the PPA he wants to mark as dependency.

    >>> print view.focusedElementScript()
    <!--
    setFocusByName('field.dependency_candidate');
    // -->

Let's emulate a dependency addition. Note that the form contains, a
empty 'selected_dependencies' (as it was rendered in the empty
request) and 'dependency_candidate' contains a valid PPA owner name.
Validation checks are documented in
pagetests/ppa/xx-edit-dependencies.txt.

    >>> add_dependency_request = LaunchpadTestRequest(
    ...     form={
    ...         'field.selected_dependencies': [],
    ...         'field.dependency_candidate': 'sabdfl',
    ...         'field.actions.add': 'Add Dependency',
    ...         })
    >>> add_dependency_request.method = 'POST'
    >>> view = getView(
    ...    cprov.archive, "+edit-dependencies", add_dependency_request)
    >>> view.initialize()

Now we can see that the view properties correctly indicates the
presence of a PPA dependency.

    >>> view.has_dependencies
    True

The 'selected_dependencies' widget has on element representing a PPA
dependency. Each element has:

 * value: dependency IArchive,
 * token: dependency IArchive.owner,
 * title: link to the dependency IArchive in Launchpad redered as the
          dependency title.

    >>> [dependency] = view.widgets.get('selected_dependencies').vocabulary

    >>> print dependency.value.title
    PPA for Mark Shuttleworth

    >>> print dependency.token
    sabdfl

    >>> print dependency.title
    <a href="http://launchpad.dev/~sabdfl/+archive">PPA for Mark Shuttleworth</a>

The form focus, now that we have a recorded dependencies, is set to the
first listed dependency.

    >>> print view.focusedElementScript()
    <!--
    setFocusByName('field.selected_dependencies');
    // -->

We simply let the zope infrastructure raise FormError on malformed requests.

    >>> broken_request = LaunchpadTestRequest(
    ...     form={'field.actions.remove': 'Remove Dependencies',})
    >>> broken_request.method = 'POST'
    >>> view = getView(
    ...    cprov.archive, "+edit-dependencies", broken_request)
    >>> view.initialize()
    Traceback (most recent call last):
    ...
    FormError: ('No input', 'selected_dependencies')

If we remove the just-added dependency, the view gets back to its
initial/empty state.

    >>> remove_dependency_request = LaunchpadTestRequest(
    ...     form={
    ...         'field.selected_dependencies': ['sabdfl'],
    ...         'field.dependency_candidate': '',
    ...         'field.actions.remove': 'Remove Dependencies',
    ...         })
    >>> remove_dependency_request.method = 'POST'
    >>> view = getView(
    ...    cprov.archive, "+edit-dependencies", remove_dependency_request)
    >>> view.initialize()

    >>> view.has_dependencies
    False

    >>> len(view.widgets.get('selected_dependencies').vocabulary)
    0

    >>> print view.focusedElementScript()
    <!--
    setFocusByName('field.dependency_candidate');
    // -->

