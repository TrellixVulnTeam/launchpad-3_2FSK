= TestBugzillaXMLRPCTransport =

The TestBugzillaXMLRPCTransport is an XML-RPC transport which simulates
a remote Bugzilla instance that implements both the Bugzilla XMLRPC API
and the additional Launchpad plugin API.

    >>> import xmlrpclib
    >>> from canonical.launchpad.ftests.externalbugtracker import (
    ...     TestBugzillaXMLRPCTransport)
    >>> bugzilla_transport = TestBugzillaXMLRPCTransport()
    >>> server = xmlrpclib.ServerProxy(
    ...     'http://example.com/', transport=bugzilla_transport)


== Launchpad.time() ==

Launchpad.time() returns the current time on the remote server, the
remote server's timezone and what the remote server believes to be the
current UTC time.

    >>> time_dict = server.Launchpad.time()
    >>> for key in sorted(time_dict):
    ...     print "%s: %s" % (key, time_dict[key])
    local_time: 20080501T01:01:01
    tz_name: UTC
    utc_time: 20080501T01:01:01

We can set the local time value on the remote server to make testing
more useful.

    >>> import time
    >>> from datetime import datetime

    >>> remote_datetime = datetime(2008, 5, 15, 16, 19, 53)
    >>> bugzilla_transport.seconds_since_epoch = time.mktime(
    ...     remote_datetime.timetuple())
    >>> bugzilla_transport.timezone = "US/Central"
    >>> bugzilla_transport.utc_offset = -6*60*60

    >>> time_dict = server.Launchpad.time()
    >>> for key in sorted(time_dict):
    ...     print "%s: %s" % (key, time_dict[key])
    local_time: 20080515T16:19:53
    tz_name: US/Central
    utc_time: 20080515T22:19:53


== Bug.get_bugs() ==

The common Bugzilla bug API offers a get_bugs() method which can be used
to retrieve bugs from a remote Bugzilla instance. It takes a list of bug
IDs to retrieve and returns a list of dicts containing those bugs' data.

    >>> [bug_dict] = bugzilla_transport.get_bugs([1])
    >>> for key in sorted(bug_dict.keys()):
    ...     print "%s: %s" % (key, bug_dict[key])
    alias:
    creation_time: 20080610T16:19:53
    id: 1
    internals:
    last_change_time: 20080610T16:19:53
    summary: Our first example Bugzilla bug.
    status: RESOLVED FIXED

If more than one ID is specified when get_bugs() is called, more than
one bug will be returned (assuming they all exist and are accessible).

    >>> bug_dicts = bugzilla_transport.get_bugs([1, 2])
    >>> for bug_dict in bug_dicts:
    ...     for key in sorted(bug_dict.keys()):
    ...         print "%s: %s" % (key, bug_dict[key])
    ...     print "\n"
    alias:
    creation_time: 20080610T16:19:53
    id: 1
    internals:...
    last_change_time: 20080610T16:19:53
    summary: Our first example Bugzilla bug.
    status: RESOLVED FIXED

    alias: bug-two
    creation_time: 20080611T09:23:12
    id: 2
    internals:...
    last_change_time: 20080611T09:24:29
    summary: Another example Bugzilla bug.
    status: VERIFIED FIXED

Bug aliases can also be used to request remote bugs.

    >>> [bug_dict] = bugzilla_transport.get_bugs(['bug-two'])
    >>> for key in sorted(bug_dict.keys()):
    ...     print "%s: %s" % (key, bug_dict[key])
    alias: bug-two
    creation_time: 20080611T09:23:12
    id: 2
    internals:...
    last_change_time: 20080611T09:24:29
    summary: Another example Bugzilla bug.
    status: VERIFIED FIXED

Passing an invalid bug alias to get_bugs will raise an error.

    >>> bugzilla_transport.get_bugs(['no-such-alias'])
    Traceback (most recent call last):
      ...
    Fault 100: Invalid bug alias.

As will passing an invalid bug ID.

    >>> bugzilla_transport.get_bugs([42])
    Traceback (most recent call last):
      ...
    Fault 101: Invalid bug ID.

We'll also get an error if we try to access a bug that we don't have the
rights to view.

    >>> bugzilla_transport.get_bugs(['private-bug'])
    Traceback (most recent call last):
      ...
    Fault 102: Access denied.
