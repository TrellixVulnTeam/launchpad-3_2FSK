= ZCML Directives =

We have a bunch of custom zcml directives in Launchpad.

== Canonical URLs ==

See canonical_url.txt for information and tests of the browser:url directive.


== A zcml context for zcml directive unittests ==

This is a context that collects actions and has a __repr__ for use in
tests that shows a pretty-printed representation of the actions.

    >>> from zope.app.component.tests.test_directives import Context

The code to this is actually repeated all through the Zope 3 unit tests for
zcml directives. :-(


== Setting up some interfaces and objects to test with ==

We'll put an interface in canonical.launchpad.ftests.IFoo, and set the
default view for the IFooLayer layer.

    >>> from zope.component import queryDefaultViewName, queryView
    >>> import canonical.launchpad.ftests
    >>> from zope.interface import Interface, implements
    >>> class IFoo(Interface):
    ...     pass
    >>> class IFooLayer(Interface):
    ...     pass
    >>> canonical.launchpad.ftests.IFoo = IFoo
    >>> canonical.launchpad.ftests.IFooLayer = IFooLayer

    >>> class FooObject:
    ...     implements(IFoo)
    >>> fooobject = FooObject()
    >>> class Request:
    ...     implements(IFooLayer)
    >>> request = Request()

    >>> import types
    >>> class FooView:
    ...     """classic class that is used for a view on an IFoo"""
    ...     __metaclass__ = types.ClassType
    ...
    ...     def __call__(self):
    ...         return "FooView was called"
    >>> canonical.launchpad.ftests.FooView = FooView


== Overriding the browser:defaultView directive ==

We override browser:defaultView to allow us to specify a layer rather
than use the hardcoded IDefaultBrowserLayer.

This is something we should ensure is fixed upstream.

First, a unit test of the overridden directive.

    >>> from canonical.launchpad.webapp.metazcml import defaultView
    >>> context = Context()
    >>> context.info = "INFO"

Name some variables to mirror the names used as arguments.

    >>> _context = context
    >>> name = "NAME"
    >>> for_ = "FOR_"
    >>> layer =  "LAYER"
    >>> defaultView(context, name, for_, layer)
    >>> context
    ((('defaultViewName', 'FOR_', 'LAYER', 'NAME'),
      <function handler>,
      ('Adapters',
       'register',
       ('FOR_', 'LAYER'),
       <InterfaceClass zope.component.interfaces.IDefaultViewName>,
       '',
       'NAME',
       'INFO')),
     (None,
      <function provideInterface>,
      ('', 'FOR_')))

Next, a functional/integration test of the overridden directive.

    >>> print queryDefaultViewName(fooobject, request)
    None

    >>> from zope.configuration import xmlconfig
    >>> zcmlcontext = xmlconfig.string("""
    ... <configure xmlns:browser="http://namespaces.zope.org/browser">
    ...   <include file="lib/canonical/launchpad/webapp/meta-overrides.zcml" />
    ...   <browser:defaultView
    ...     for="canonical.launchpad.ftests.IFoo"
    ...     name="mandrill"
    ...     layer="canonical.launchpad.ftests.IFooLayer"
    ...     />
    ... </configure>
    ... """)

    >>> print queryDefaultViewName(fooobject, request)
    mandrill


== Overriding the browser:page directive ==

We override browser:page to allow us to specify the facet that the
page is associated with.

First, a unit test of the overridden directive.

    >>> from canonical.launchpad.webapp.metazcml import page
    >>> context = Context()
    >>> context.info = "INFO"

Name some variables to mirror the names used as arguments.

    >>> _context = context
    >>> name = "NAME"
    >>> permission = "PERMISSION"
    >>> for_ = "FOR_"
    >>> facet = "FACET"
    >>> page(context, name, permission, for_, facet=facet)
    >>> context
    ((None,
      <function provideInterface>,
      ('', 'FOR_')),
     (('view',
       'FOR_',
       'NAME',
       <InterfaceClass zope.publisher.interfaces.browser.IBrowserRequest>,
       <InterfaceClass zope.publisher.interfaces.browser.IBrowserRequest>),
      <function handler>,
      ('Adapters',
       'register',
       ('FOR_',
        <InterfaceClass zope.publisher.interfaces.browser.IBrowserRequest>),
       <InterfaceClass zope.interface.Interface>,
       'NAME',
       <class 'zope.app.publisher.browser.viewmeta.SimpleLaunchpadViewClass'>,
       'INFO')))

Look for the SimpleLaunchpadViewClass in the data structure above, and check
its __launchpad_facetname__ attribute.

    >>> cls = context.actions[1][2][-2]
    >>> cls
    <class 'zope.app.publisher.browser.viewmeta.SimpleLaunchpadViewClass'>
    >>> cls.__launchpad_facetname__
    'FACET'

Next, a functional/integration test of the overridden directive.

    >>> print queryView(fooobject, '+whatever', request)
    None
    >>> print queryView(fooobject, '+mandrill', request)
    None

    >>> from zope.configuration import xmlconfig
    >>> zcmlcontext = xmlconfig.string("""
    ... <configure xmlns:browser="http://namespaces.zope.org/browser"
    ...     package="canonical.launchpad">
    ...   <include file="webapp/meta-overrides.zcml" />
    ...   <browser:page
    ...     for="canonical.launchpad.ftests.IFoo"
    ...     name="+whatever"
    ...     permission="zope.Public"
    ...     class="canonical.launchpad.ftests.FooView"
    ...     attribute="__call__"
    ...     facet="the_evil_facet"
    ...     layer="canonical.launchpad.ftests.IFooLayer"
    ...     />
    ...   <browser:page
    ...     for="canonical.launchpad.ftests.IFoo"
    ...     name="+mandrill"
    ...     permission="zope.Public"
    ...     template="templates/main-template.pt"
    ...     facet="another-mister-lizard"
    ...     layer="canonical.launchpad.ftests.IFooLayer"
    ...     />
    ... </configure>
    ... """)

    >>> whatever_view = queryView(fooobject, '+whatever', request)
    >>> print whatever_view.__class__.__name__
    FooView
    >>> print whatever_view.__launchpad_facetname__
    the_evil_facet
    >>> mandrill_view = queryView(fooobject, '+mandrill', request)
    >>> print mandrill_view.__class__.__name__
    SimpleViewClass from ...main-template.pt
    >>> print mandrill_view.__launchpad_facetname__
    another-mister-lizard


== Overriding the browser:pages directive ==

We override browser:pages to allow us to specify the facet that each
page is associated with.

First, a unit test of the overridden directive.

    >>> from canonical.launchpad.webapp.metazcml import pages
    >>> context = Context()
    >>> context.info = "INFO"

Name some variables to mirror the names used as arguments.

    >>> _context = context
    >>> for_ = "FOR_"
    >>> permission = "PERMISSION"

    >>> name = "NAME"
    >>> facet = "FACET"
    >>> P = pages(context, for_, permission)
    >>> P.page(context, name, facet=facet)
    >>> context
    ((None,
      <function provideInterface>,
      ('', 'FOR_')),
     (('view',
       'FOR_',
       'NAME',
       <InterfaceClass zope.publisher.interfaces.browser.IBrowserRequest>,
       <InterfaceClass zope.publisher.interfaces.browser.IBrowserRequest>),
      <function handler>,
      ('Adapters',
       'register',
       ('FOR_',
        <InterfaceClass zope.publisher.interfaces.browser.IBrowserRequest>),
       <InterfaceClass zope.interface.Interface>,
       'NAME',
       <class 'zope.app.publisher.browser.viewmeta.SimpleLaunchpadViewClass'>,
       'INFO')))


Look for the SimpleLaunchpadViewClass in the data structure above, and check
its __launchpad_facetname__ attribute.

    >>> cls = context.actions[1][2][-2]
    >>> cls
    <class 'zope.app.publisher.browser.viewmeta.SimpleLaunchpadViewClass'>
    >>> cls.__launchpad_facetname__
    'FACET'

Next, a functional/integration test of the overridden directive.

    >>> print queryView(fooobject, '+whatever2', request)
    None

    >>> from zope.configuration import xmlconfig
    >>> zcmlcontext = xmlconfig.string("""
    ... <configure xmlns:browser="http://namespaces.zope.org/browser"
    ...     package="canonical.launchpad">
    ...   <include file="webapp/meta-overrides.zcml" />
    ...   <browser:pages
    ...     for="canonical.launchpad.ftests.IFoo"
    ...     layer="canonical.launchpad.ftests.IFooLayer"
    ...     class="canonical.launchpad.ftests.FooView"
    ...     permission="zope.Public">
    ...     <browser:page
    ...         name="+whatever2"
    ...         attribute="__call__"
    ...         facet="another_evil_facet"
    ...         />
    ...   </browser:pages>
    ... </configure>
    ... """)

    >>> whatever_view = queryView(fooobject, '+whatever2', request)
    >>> print whatever_view.__class__.__name__
    FooView
    >>> print whatever_view.__launchpad_facetname__
    another_evil_facet


== Cleaning up the interfaces and objects to test with ==

Clean up the interfaces we created for testing with.

    >>> del canonical.launchpad.ftests.IFoo
    >>> del canonical.launchpad.ftests.IFooLayer
    >>> del canonical.launchpad.ftests.FooView

