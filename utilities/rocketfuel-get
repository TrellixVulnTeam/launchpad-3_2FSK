#! /bin/bash
#
# Copyright 2009 Canonical Ltd.  This software is licensed under the
# GNU Affero General Public License version 3 (see the file LICENSE).
#
# Update your copy of trunk and the necessary source dependencies, and make
# sure all source dependencies are properly linked in to all the branches you
# are working on.

# Stop if there's an error, and treat unset variables as errors.
set -eu

# Helper function to run a child process, indenting stdout to aid
# readability.
run-child() {
    "$@" | sed -e "s/^/        /"
}

# Load local settings.
if [ -e "$HOME/.rocketfuel-env.sh" ]
then
    source "$HOME/.rocketfuel-env.sh"
else
    echo "Please run rocketfuel-setup first." >&2
    exit 1
fi

LP_DOWNLOAD_CACHE_PATH="$LP_PROJECT_ROOT/$LP_SOURCEDEPS_DIR/download-cache"
LP_EGGS_PATH="$LP_PROJECT_ROOT/$LP_SOURCEDEPS_DIR/eggs"
LP_DOWNLOAD_CACHE_PATH="$(eval echo ${LP_DOWNLOAD_CACHE_PATH})"
LP_EGGS_PATH="$(eval echo ${LP_EGGS_PATH})"

# Pull launchpad devel from launchpad.
INITIAL_REV=$(bzr revno "$LP_TRUNK_PATH")
bzr pull -d "$LP_TRUNK_PATH"
FINAL_REV=$(bzr revno "$LP_TRUNK_PATH")

# Make sure our directories are around.
mkdir -p "$LP_SOURCEDEPS_PATH" "$LP_EGGS_PATH"

# Get/update the download cache.
if [ -d "$LP_DOWNLOAD_CACHE_PATH" ]
then
    bzr up "$LP_DOWNLOAD_CACHE_PATH"
else
    bzr co lp:lp-source-dependencies "$LP_DOWNLOAD_CACHE_PATH"
fi

# Add or update sourcepackages.
sourcedeps_conf="$(dirname "$0")/sourcedeps.conf"
if [ ! -e "$sourcedeps_conf" ]
then
    # Use the global deps which are stable.
    echo "Could not find $sourcedeps_conf" >&2
    sourcedeps_conf="$LP_TRUNK_PATH/utilities/sourcedeps.conf"
fi

echo "Updating sourcecode dependencies in rocketfuel:"
echo ""
echo "  NOTE: Each sourcedep may take a while; please be patient."
echo "  Also, ignore any 'You have not informed bzr of your Launchpad ID...'"
echo "  warnings.  They don't matter right now; they would only matter later"
echo "  if and when you need write access to some of the branches."
echo ""
echo "    Sourcedeps: $LP_SOURCEDEPS_PATH"
while IFS="=" read package branch
do
    package_path="$LP_SOURCEDEPS_PATH/$package"
    echo "    Checking $package_path"
    if [ -d "$package_path" ]
    then
        run-child bzr pull --remember "$branch" --directory "$package_path"
    else
        run-child bzr branch --standalone "$branch" "$package_path"
    fi
done < "$sourcedeps_conf"

# Update the current trees in the repo.
echo "Updating sourcecode dependencies in current local branches:"
for branch in "$LP_PROJECT_PATH"/*
do
    if [ -d "$branch/sourcecode" ]
    then
        echo "    ${branch}"
        run-child "$LP_TRUNK_PATH/utilities/link-external-sourcecode" \
            --parent="$LP_PROJECT_ROOT/$LP_SOURCEDEPS_DIR" --target="$branch"
    fi
done

# Build launchpad if there were changes.
if [ $FINAL_REV != $INITIAL_REV ];
then
    make -C "$LP_TRUNK_PATH"
fi
