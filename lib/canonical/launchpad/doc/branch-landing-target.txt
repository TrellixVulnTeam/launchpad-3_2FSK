= Branch landing targets =

Branch landing targets are a way to show intent of one
branch to land code on another branch.

Branch landing targets should only ever be created by the
IBranchLandingTarget.new method, as this method does the following consistency
checks:
  * Both branches must have valid products.
  * Both branches must have the same product.
  * There must not already exist a branch landing target for the source branch and
  target branch pair.


== Registering landing targets ==

All landing targets have to be registered by a Person.

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.interfaces import (
    ...     IBranchSet, IBranchLandingTargetSet, IPersonSet)
    >>> person_set = getUtility(IPersonSet)
    >>> sample_person = person_set.getByEmail('test@canonical.com')

Two branches are needed in order to define a landing target.

    >>> branch_set = getUtility(IBranchSet)
    >>> source_branch = branch_set.getByUniqueName(
    ...     '~name12/gnome-terminal/klingon')
    >>> target_branch = branch_set.getByUniqueName(
    ...     '~name12/gnome-terminal/main')

    >>> branch_landing_target_set = getUtility(IBranchLandingTargetSet)
    >>> landing_target = branch_landing_target_set.new(
    ...     sample_person, source_branch, target_branch)


== Interfaces ==

    >>> from zope.interface.verify import verifyObject
    >>> from canonical.launchpad.interfaces import IBranchLandingTarget
    >>> verifyObject(IBranchLandingTarget, landing_target)
    True
    >>> verifyObject(IBranchLandingTargetSet, branch_landing_target_set)
    True


== Canonical URL ==

The URL of a branch landing target is quite long, due to the canonical
URL defined for branches.  Since the products of the two branches must
be the same, the product part of the target branch does not need to be
in the path expression.

    >>> login('test@canonical.com')
    >>> from canonical.launchpad.webapp import canonical_url
    >>> print canonical_url(landing_target)
    http://code.launchpad.dev/~name12/gnome-terminal/klingon/+target/name12/main


== Creation constraints ==

The BranchLandingTargetSet.new method raises exceptions for invalid parameters.

    >>> junk_branch = branch_set.getByUniqueName('~name12/+junk/junk.dev')
    >>> branch_landing_target_set.new(
    ...     sample_person, junk_branch, target_branch)
    Traceback (most recent call last):
    ...
    InvalidBranchLandingTarget: Junk branches cannot be used as source branches.

    >>> branch_landing_target_set.new(
    ...     sample_person, source_branch, junk_branch)
    Traceback (most recent call last):
    ...
    InvalidBranchLandingTarget: Junk branches cannot be used as target branches.

    >>> branch_landing_target_set.new(
    ...     sample_person, source_branch, source_branch)
    Traceback (most recent call last):
    ...
    InvalidBranchLandingTarget: Source and target branches must be different.

    >>> firefox_branch = branch_set.getByUniqueName('~name12/firefox/main')
    >>> branch_landing_target_set.new(
    ...     sample_person, firefox_branch, target_branch)
    Traceback (most recent call last):
    ...
    InvalidBranchLandingTarget: The source branch and target branch must be
    branches of the same project.
