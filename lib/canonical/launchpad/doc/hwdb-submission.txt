= Submissions to the hardware database =

The hardware database client collects information from various sources,
and submits it in an HTTP POST request to the hardware database server.
The POST data consists of the following fields:

  * date_created (see hwdb.txt)
  * format (see hwdb.txt)
  * private (see hwdb.txt)
  * contactable (see hwdb.txt)
  * livecd (see hwdb.txt)
  * submission_id (see hwdb.txt)
  * emailaddress (see hwdb.txt)
  * distribution: The distribution name. The value should match a value
    in the SQL table Distribution, column name.
  * distrorelease: The distrorelease version. The value should match a value
    in the SQL table Distrorelease, column version
  * processorfamily: The name of the processorfamily. The value should 
    match a value in the SQL table Processorfamily, column name.
  * system: The system name as returned by HAL (system.vendor, system.product)
  * submission_data: An XML file containing the collected data. This file is
    simply stored as a Librarian file, and parsed later by a cron job.

    >>> from StringIO import StringIO
    >>> from zope.app.zapi import getView
    >>> from zope.component import getUtility
    >>> from canonical.launchpad.webapp.interfaces import ILaunchpadApplication
    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest
    >>> data = StringIO('some data.')
    >>> data.filename = 'hardware-info'
    >>> form={'field.date_created':    u'2007-08-01',
    ...       'field.format':          u'VERSION_1',
    ...       'field.private':         u'',
    ...       'field.contactable':     u'',
    ...       'field.livecd':          u'',
    ...       'field.submission_id':   u'unique ID 1',
    ...       'field.emailaddress':    u'test@canonical.com',
    ...       'field.distribution':    u'ubuntu',
    ...       'field.distrorelease':   u'5.04',
    ...       'field.architecture':    u'i386',
    ...       'field.system':          u'HP 6543',
    ...       'field.submission_data': data,
    ...       'field.actions.upload':  u'Upload'}
    >>> request = LaunchpadTestRequest(method='POST', form=form)
    >>> app = getUtility(ILaunchpadApplication)
    >>> submit_view = getView(app, 'submit-hardware-data', request)
    >>> submit_view.initialize()
    >>> submit_view.errors
    []

The request created an entry in the HWDBSubmissions table.

    >>> from canonical.launchpad.interfaces import IHWDBSubmissionSet
    >>> submission_set = getUtility(IHWDBSubmissionSet)
    >>> submission = submission_set.getBySubmissionID(u'unique ID 1')
    >>> submission.date_created, submission.format.name
    (datetime.datetime(2007, 8, 1, 0, 0, tzinfo=<UTC>), 'VERSION_1')
    >>> submission.private, submission.contactable, submission.livecd
    (False, False, False)
    >>> submission.submission_id, submission.emailaddress
    (u'unique ID 1', u'test@canonical.com')
    >>> submission.system.fingerprint
    u'HP 6543'

The submitted data is stored in raw_submission.

    >>> import transaction
    >>> transaction.commit()
    >>> submission.raw_submission.read()
    'some data.'

A reference to distroarchrelease is created for the fields distribution, 
distrorelease, architecture.

    >>> submission.distroarchrelease.distroseries.distribution.name
    u'ubuntu'
    >>> submission.distroarchrelease.distroseries.version
    u'5.04'
    >>> submission.distroarchrelease.architecturetag
    u'i386'

Each submission must have a distinct submission_id, hence an attempt to submit
identical data a second time leads to an error.

    >>> request = LaunchpadTestRequest(method='POST', form=form)
    >>> app = getUtility(ILaunchpadApplication)
    >>> submit_view = getView(app, 'submit-hardware-data', request)
    >>> submit_view.initialize()
    >>> [error.doc() for error in submit_view.errors]
    ['Submission ID already exists.']


If the fields distribution, distrorelease and architecture contain names 
which are not known in the Launchpad database, the distroarchrelease field
is None.

    >>> form['field.submission_id'] = u'unique ID 2'
    >>> invalid_form = form.copy()
    >>> invalid_form['field.distribution'] = 'no distribution'
    >>> request = LaunchpadTestRequest(method='POST', form=invalid_form)
    >>> submit_view = getView(app, 'submit-hardware-data', request)
    >>> submit_view.initialize()
    >>> submission = submission_set.getBySubmissionID(u'unique ID 2')
    >>> print submission.distroarchrelease
    None
    >>> form['field.submission_id'] = u'unique ID 3'
    >>> invalid_form = form.copy()
    >>> invalid_form['field.distrorelease'] = 'no release'
    >>> request = LaunchpadTestRequest(method='POST', form=invalid_form)
    >>> submit_view = getView(app, 'submit-hardware-data', request)
    >>> submit_view.initialize()
    >>> submission = submission_set.getBySubmissionID(u'unique ID 3')
    >>> print submission.distroarchrelease
    None
    >>> form['field.submission_id'] = u'unique ID 4'
    >>> invalid_form = form.copy()
    >>> invalid_form['field.architecture'] = 'no architecture'
    >>> request = LaunchpadTestRequest(method='POST', form=invalid_form)
    >>> submit_view = getView(app, 'submit-hardware-data', request)
    >>> submit_view.initialize()
    >>> submission = submission_set.getBySubmissionID(u'unique ID 4')
    >>> print submission.distroarchrelease
    None

The `date_created` field must contain a valid date.

    >>> form['field.submission_id'] = u'unique ID 5'
    >>> invalid_form = form.copy()
    >>> invalid_form['field.date_created'] = '2007-05-35'
    >>> request = LaunchpadTestRequest(method='POST', form=invalid_form)
    >>> submit_view = getView(app, 'submit-hardware-data', request)
    >>> submit_view.initialize()
    >>> [error.doc() for error in submit_view.errors]
    [u'Invalid datetime data']

The `format` field must contain a value that matches the DBEnumeratedType
HWDBSubmissionFormat.

    >>> invalid_form = form.copy()
    >>> invalid_form['field.format'] = u'VERSION_42'
    >>> request = LaunchpadTestRequest(method='POST', form=invalid_form)
    >>> submit_view = getView(app, 'submit-hardware-data', request)
    >>> submit_view.initialize()
    >>> [error.doc() for error in submit_view.errors]
    ['Invalid value']

The field `submission_id` may contain only ASCII data.

XXX If u'wrong id \x81' below is replaced by 'wrong id \x81'. we would get a
UnicodeDecodeError in zope.app.form.browser.textwidgets._toFieldValue.
This exception is not caught, but should IMHO be handled in Zope's from
machinery or in LaunchpadFormView._validate. Abel Deuring 2007-08-08

    >>> invalid_form = form.copy()
    >>> invalid_form['field.submission_id'] = u'wrong id \x81'
    >>> request = LaunchpadTestRequest(method='POST', form=invalid_form)
    >>> submit_view = getView(app, 'submit-hardware-data', request)
    >>> submit_view.initialize()
    >>> [error.doc() for error in submit_view.errors]
    [u'Invalid textual data']

The field `emailaddress` must contain a valid email address.

    >>> invalid_form = form.copy()
    >>> invalid_form['field.emailaddress'] = u'me AT localhost'
    >>> request = LaunchpadTestRequest(method='POST', form=invalid_form)
    >>> submit_view = getView(app, 'submit-hardware-data', request)
    >>> submit_view.initialize()
    >>> [error.doc() for error in submit_view.errors]
    [u"me AT localhost isn't a valid email address."]

All fields are required.

    >>> for field in ('field.date_created', 'field.format', 'field.private',
    ...     'field.contactable', 'field.livecd', 'field.submission_id', 
    ...     'field.emailaddress', 'field.distribution', 
    ...     'field.distrorelease', 'field.architecture', 'field.system',
    ...     'field.submission_data'):
    ...     invalid_form = form.copy()
    ...     del invalid_form[field]
    ...     request = LaunchpadTestRequest(method='POST', form=invalid_form)
    ...     submit_view = getView(app, 'submit-hardware-data', request)
    ...     submit_view.initialize()
    ...     submit_view.widget_errors
    {'date_created': 'Required field is missing'}
    {'format': 'Required field is missing'}
    {'private': 'Required field is missing'}
    {'contactable': 'Required field is missing'}
    {'livecd': 'Required field is missing'}
    {'submission_id': 'Required field is missing'}
    {'emailaddress': 'Required field is missing'}
    {'distribution': 'Required field is missing'}
    {'distrorelease': 'Required field is missing'}
    {'architecture': 'Required field is missing'}
    {'system': 'Required field is missing'}
    {'submission_data': 'Required field is missing'}

 
The data is in most cases not submitted by an ordinary web browser, but by
the hardware databse client. In order to allow the client to easily detect
errors returned by the server, we use the HTTP status 201 ("created") for
successful uploads, and 4xx, if an error occurs.

xxx
einfaches Fehlerparsing plus display fuer user.


