= ArchiveSubscriber =

This content class represents a subscription by a person to an IArchive.
The subscription represents that person's ability to download items from
the archive's repository.  The subscription is granted by a person who
has upload permission to the archive and once created is only viewable by
other uploaders and the person in the subscription.

See also archiveauthtoken.txt.


== Creating new subscriptions ==

New subscriptions are created using IArchive.newSubscription()

Operations with subscriptions are security protected, so to start with we'll
log in as an unprivileged user.

    >>> login("no-priv@canonical.com")

We can create a new subscription for name12 to access cprov's PPA like this:

    >>> from canonical.launchpad.interfaces.person import IPersonSet
    >>> cprov = getUtility(IPersonSet).getByName("cprov")
    >>> name12 = getUtility(IPersonSet).getByName("name12")

    >>> new_sub = cprov.archive.newSubscription(name12, cprov)
    Traceback (most recent call last):
    ...
    Unauthorized:...

That failed because only people who have launchpad.Append (basically, upload
access) on the context archive are allowed to create subscriptions.

Users cannot create their own subscriptions either.  Log in as name12:

    >>> login("test@canonical.com")
    >>> new_token = cprov.archive.newSubscription(name12, cprov)
    Traceback (most recent call last):
    ...
    Unauthorized:...

If we log in as cprov it will work:

    >>> login("celso.providelo@canonical.com")
    >>> new_sub = cprov.archive.newSubscription(
    ...     name12, cprov, description=u"my new subscription")

The new subscription is returned and reflects the data:

    >>> print new_sub.archive.title
    PPA for Celso Providelo

    >>> print new_sub.subscriber.name
    name12

    >>> print new_sub.registrant.name
    cprov

    >>> print new_sub.description
    my new subscription

    >>> print new_sub.status.name
    ACTIVE

Commit the new subscription to the database.

    >>> from storm.store import Store
    >>> Store.of(new_sub).commit()

Subscriptions also contain some date information:

    >>> new_sub.date_created is not None
    True

    >>> print new_sub.date_expires
    None


== Retrieving existing subscriptions ==

The ArchiveSubscriberSet utility allows you to retrieve subscriptions by
subscriber and archive.  To access subscriptions you need launchpad.View
privilege which applies to the person in the subscriptions and launchpad
admins.

    >>> from canonical.launchpad.interfaces.archivesubscriber import (
    ...     IArchiveSubscriberSet)
    >>> sub_set = getUtility(IArchiveSubscriberSet)

    >>> login("no-priv@canonical.com")

    >>> sub = sub_set.getBySubscriber(new_sub.subscriber)
    Traceback (most recent call last):
    ...
    Unauthorized:...

Log in as name12, who is the person in the subscription.

    >>> login("test@canonical.com")

And retrieve the subscription by subscriber and archive:

    >>> print sub_set.getBySubscriber(new_sub.subscriber)[0].archive.title
    PPA for Celso Providelo

    >>> print sub_set.getByArchive(new_sub.archive)[0].subscriber.name
    name12


== Amending Subscriptions ==

Some of the properties of subscriptions can change after they are created.
To so this, the changer needs to have launchpad.Edit or be an admin.

Trying to set the properties as the subscribed person will fail:

    >>> from canonical.database.constants import UTC_NOW
    >>> new_sub.date_expires = UTC_NOW
    Traceback (most recent call last):
    ...
    Unauthorized:...

Log in as someone with launchpad.Edit and it will work:

    >>> login("celso.providelo@canonical.com")
    >>> new_sub.date_expires = UTC_NOW

Other properties that might get modified later are status and description.
We can also do this as an admin.

    >>> new_sub.description = u"changed by admin"
    >>> from canonical.launchpad.interfaces.archivesubscriber import (
    ...     ArchiveSubscriberStatus)
    >>> new_sub.status = ArchiveSubscriberStatus.EXPIRED


== Cancelling subscriptions ==

Subscriptions can only be cancelled after they are created.  The calling user
also needs launchpad.Edit on the subscription, which means either someone with
IArchive launchpad.Append (as for creating new tokens) or an admin.

    >>> login("no-priv@canonical.com")
    >>> new_sub.cancel()
    Traceback (most recent call last):
    ...
    Unauthorized:...

    >>> login("celso.providelo@canonical.com")
    >>> new_sub.cancel(cprov)

Cancelling sets the date_cancelled value to the current date/time
and cancelled_by to the supplied person.  The status also changes to
CANCELLED.

    >>> new_sub.date_cancelled is not None
    True

    >>> print new_sub.cancelled_by.name
    cprov

    >>> print new_sub.status.name
    CANCELLED

We can do this as an admin too:

    >>> login("admin@canonical.com")
    >>> new_sub.cancel(cprov)
