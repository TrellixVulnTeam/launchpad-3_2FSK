<schema extends="../../zope/app/server/schema.xml">

    <!--
    The syntax of this file is documented in lib/ZConfig/doc/zconfig.pdf

    I think we should avoid using anything except strings as configuration
    items. Although we could stick complex objects into the configuration,
    this will make using the configuration complex and surprising. Instead,
    I suggest that the complex objects kept as utilities that use the
    configuration to set themselves up.

    It would be possible to split this file up into a number of smaller
    components, tieing the configuration to particular areas.
    -->

    <!-- First we define all the section types. -->

    <sectiontype name="launchpad_session">
        <key name="dbuser" datatype="string" default="session" />
        <key name="dbhost" datatype="ipaddr-or-hostname" required="no" />
        <key name="dbname" datatype="string" default="session_prod" />
    </sectiontype>

    <sectiontype name="launchpad_errorreports">
        <!-- Not 'existing-directory' because the test runner needs to
        create it. Not 'existing-dirpath' because ZConfig will enforce it
        for all sections, not just the one we are using -->
        <key name="errordir" datatype="string" required="yes">
	    <description>
		Directory to write error reports to.
	    </description>
	</key>
        <key name="oops_prefix" datatype="string" required="yes">
	    <description>
		A prefix for "OOPS" codes for this Launchpad instance.
		This is used to allow storing the reports from different
		Launchpad instances in the same directory structure.
	    </description>
	</key>
	<key name="copy_to_zlog" datatype="boolean" default="false">
	    <description>
	        Should exceptions be sent to the log as well as being
		saved to disk?
	    </description>
	</key>
    </sectiontype>

    <sectiontype name="launchpad">
        <key name="dbuser" datatype="string" default="launchpad" />
        <key name="root_url" datatype="canonical.config.urlbase"
            required="yes" />
        <key name="errors_address" datatype="string" required="yes" />
        <key name="bugs_domain" datatype="string" required="yes" />
        <key name="max_bug_attachment_size" datatype="integer" required="no"
            default="0">
            <description>
                Maximum size of bug attachments in bytes. A value of 0 means
                no limit.
            </description>
        </key>
        <key name="db_statement_timeout" datatype="integer" required="no">
            <description>
                SQL statement timeout in milliseconds. If a statement
                takes longer than this to execute, then it will be aborted.
                A value of 0 turns off the timeout. If this value is not set,
                PostgreSQL's default setting is used.
            </description>
        </key>
        <key name="soft_request_timeout" datatype="integer" required="no">
            <description>
                A soft request timeout in milliseconds.  If a request
                takes longer than this timeout, an oops will be logged.

                If unset, requests will not cause soft timeouts.
	    </description>
	</key>
        <key name="browser_notification_level" required="no"
            datatype="canonical.config.loglevel" default="info" />
        <section name="*" type="launchpad_session" attribute="session"
            required="no" />
        <section name="*" type="launchpad_errorreports" attribute="errorreports"
            required="no" />
    </sectiontype>

    <sectiontype name="gina_target">
        <description>
            Gina will run against the target specified on the command line.
        </description>
        <key name="distro" datatype="string" required="yes">
            <description>
                The distribution name (e.g. ubuntu) from where the packages
                will be taken and to where they will be imported into
                launchpad. A distribution with name DISTRO must be created
                on launchpad before been used because gina is not able to
                create distributions.
            </description>
        </key>
        <key name="distrorelease" datatype="string" required="yes">
            <description>
                The distrorelease name (e.g. hoary) from where the packages
                will be taken and to where they will be imported (published)
                into launchpad. A distrorelease with name DISTRORELEASE inside
                the distrobution DISTRO must be created on launchpad before
                been used because gina is not able to create distroreleases.
            </description>
        </key>
        <key name="architectures" datatype="string"
            default="i386,powerpc,amd64">
            <description>
                A comma separated list with the architectures that should
                be imported into Launchpad. DistroArchRelease entries for
                this architectures having the architecturetag equal to each
                element in ARCHS should be created previously for the given
                DISTRORELEASE.
            </description>
            <example>i386,powerpc,amd64</example>
        </key>
        <key name="components" datatype="string"
            default="main,universe,restricted,multiverse">
            <description>
                A comma separated list with the component names
                that should be imported into launchpad. As well as in
                distribution and distrorelease the components must already
                exists inside launchpad. Currently the componentselection
                table is not checked but ideally it too should be populated.
            </description>
            <example>
                main,universe,restricted
            </example>
        </key>
        <!-- datatype really should be existing-directory, but keyrings
        are not installed on all production servers and they shouldn't need
        it installed if they are not running Gina. -->
        <key name="keyrings" datatype="string" default="/usr/share/keyrings">
            <description>
                A full path to where the keyrings files are
                available. These keyrings are used to look up who signed
                what wherever possible.
            </description>
        </key>
        <key name="root" datatype="existing-dirpath" required="yes">
            <description>
                ROOT is the full path to a debian-style archive from where
                the packages and its info will be read. This directory
                should contain a pool and dists pair of trees.
            </description>
        </key>
        <key name="pocket" datatype="string" default="release">
            <description>
                The pocket where this import should go. A "pocket" is a
                sub-archive for a distribution release. The default pocket
                is called "release", others are "security", "updates" and
                "proposed". There may be more. Packages can be published in
                a specific pocket after the release is made, before that
                they will always be published in the "release" pocket.
            </description>
            <metadefault>
                The "release" pocket is where packages are published
                before release.
            </metadefault>
            <example>updates</example>
        </key>

        <key name="pocketrelease" datatype="string" required="yes">
            <description>
                The distrorelease name to where packages should be published
                when working with pockets. Thats because on debian model
                hoary-updates can be seen as another distrorelease but it
                does not happens on launchpad.
            </description>
        </key>

        <key name="katie_dbname" datatype="string" required="no">
            <description>
                The Katie database that should be used to extract extra
                information from.
            </description>
        </key>

        <key name="source_only" datatype="boolean" default="false">
            <description>
                If true, only the source packages are imported and the
                binary packages ignored.
            </description>
        </key>

        <key name="sourcepackagenames_only" datatype="boolean" default="false">
            <description>
                If true, only the source package names are imported into
                Launchpad
            </description>
        </key>

    </sectiontype>

    <sectiontype name="gina">
        <key name="dbuser" datatype="string" default="gina">
            <description>
                The database user wich will be used to make the
                package imports.
            </description>
        </key>
        <multisection name="+" type="gina_target"
            attribute="target" required="no" />
    </sectiontype>

    <sectiontype name="librarian_server">
        <!-- Not 'existing-directory' because the test runner needs to
        create it. Not 'existing-dirpath' because ZConfig will enforce it
        for all sections, not just the one we are using -->
        <key name="root" datatype="string" required="yes" />
        <key name="launch" datatype="boolean" required="no" default="no" />
        <key name="spew" datatype="boolean" required="no" default="no" />
        <key name="upstream_host" datatype="ipaddr-or-hostname"
            required="no" />
        <key name="upstream_port" datatype="port-number" required="no"
            default="80" />
        <key name="logfile" datatype="string" required="no" default="-" />
    </sectiontype>

    <sectiontype name="librarian_gc">
        <key name="dbuser" datatype="string" default="librariangc">
            <description>
                The user the librarian-gc.py garbage collection script connects
                as.
            </description>
        </key>
    </sectiontype>

    <sectiontype name="librarian">
        <key name="dbuser" datatype="string" default="librarian" />

        <key name="upload_port" datatype="port-number" required="yes">
            <description>
                Port number Librarian listens for storage requests on
            </description>
        </key>

        <key name="download_port" datatype="port-number" required="yes">
            <description>
                Port number Librarian listens for HTTP GET and
                HEAD requests on
            </description>
        </key>

        <key name="upload_host" datatype="ipaddr-or-hostname" required="yes">
            <description>
                Host Librarian is listening on for storage requests
            </description>
        </key>

        <key name="download_host" datatype="ipaddr-or-hostname" required="yes">
            <description>
                Host Librarian is listening on for HTTP requests
            </description>
        </key>

        <key name="download_url" datatype="canonical.config.urlbase"
            required="yes">
            <description>
                The base URL used to generate URLs to the Library contents.
                Note that this might be on a different host or port to what is
                specified above if access to the Library is via Apache
                redirects.
            </description>
        </key>

        <!-- This is present because the buildd master uses download_url for
             itself and passes buildd_download_url to the slaves. -->
        <key name="buildd_download_url" datatype="canonical.config.urlbase"
            required="yes">
            <description>
                The base URL used to generate URLs to the Library contents
                when passing URLs to the build daemons. This is likely to be
                a different host and port to the download url provided to
                external clients and is also likely to be proxied via Apache.
            </description>
        </key>

        <section name="*" type="librarian_server" attribute="server"
            required="no" />
        <section name="*" type="librarian_gc" attribute="gc"
            required="no" />
    </sectiontype>

    <sectiontype name="zopeless">
        <description>
            Clusters zopeless specific configuration. Ideally, this section
            will disappear as Zope3 land and Python land grow closer
        </description>
        <key name="send_email" datatype="boolean" required="yes" />
        <key name="smtp_host" datatype="ipaddr-or-hostname" required="no"
            default="localhost" />
        <key name="smtp_port" datatype="port-number" required="no"
            default="25" />
    </sectiontype>

    <sectiontype name="malone">
        <description>
            Malone-specific configuration options.
        </description>
        <key name="bugmail_error_from_address" datatype="string"
            required="yes" />
        <key name="buglist_batch_size" datatype="integer"
            required="yes" />
    </sectiontype>

    <sectiontype name="poimport">
        <description>
            Configuration for cronscripts/rosetta-poimport
        </description>
        <key name="dbuser" datatype="string" default="poimport" />
    </sectiontype>

    <sectiontype name="poattach">
        <description>
            Configuration for cronscripts/rosetta-package-po-attach
        </description>
        <key name="dbuser" datatype="string" default="poattach" />
    </sectiontype>

    <sectiontype name="rosetta">
        <description>
            Rosetta-specific configuration options
        </description>
        <section name="*" type="poimport" attribute="poimport" required="no" />
        <section name="*" type="poattach" attribute="poattach" required="no" />
    </sectiontype>

    <sectiontype name="gpghandler">
        <description>
            This utility is resposible for GPG operations like:
        sign/verify and encrypt/decrypt. it needs a "home" to allocate
        the runtime build configuration file and keyring and an
        addresss, "host:port",  pointing a reliable keyserver.
        </description>
        <key name="host" datatype="ipaddr-or-hostname" required="yes">
            <description>
                Host running PKS-like (SKS) keyserver Application.
            </description>
        </key>
        <key name="port" datatype="port-number" required="yes">
            <description>
                Port number on Host to access the keyserver
            </description>
        </key>
    </sectiontype>

    <sectiontype name="zeca">
        <description>
            Stubed Key server for test proposes, it's able to server
        in SKS fortmat, a restricted set of keys. (fixed address at
        localhost:11371)
        </description>
        <!-- Not 'existing-directory' because the test runner needs to
            create it  as librarian one-->
        <key name="root" datatype="string" required="no">
            <description>
                Directory to be created to store the pre-installed key-files
            </description>
        </key>
    </sectiontype>

    <sectiontype name="statistician">
      <key name="dbuser" datatype="string" default="statistician" />
    </sectiontype>

    <sectiontype name="dyson">
        <key name="dbuser" datatype="string" default="dyson" />

       <!-- Not 'existing-directory' because dyson will create it -->
       <key name="cache_path" datatype="string" required="yes">
            <description>
              Location on disk to store the visited URL cache, used to
              avoid utterly killing remote sites each time and play
              nice with the world.
            </description>
        </key>
    </sectiontype>

    <sectiontype name="shipitexporter">
        <key name="dbuser" datatype="string" default="shipit">
            <description>
                The database user wich will be used to generate shipit exports.
            </description>
        </key>
    </sectiontype>

    <sectiontype name="karmacacheupdater">
        <key name="dbuser" datatype="string" default="karma">
            <description>
                The database user wich will be used to update the karmacache
                table.
            </description>
        </key>
    </sectiontype>

    <sectiontype name="targetnamecacheupdater">
        <key name="dbuser" datatype="string" default="targetnamecacheupdater">
            <description>
                The database user wich will be used to update the
                targetnamecache column of bugtasks.
            </description>
        </key>
    </sectiontype>

    <sectiontype name="cveupdater">
        <key name="dbuser" datatype="string" default="cve">
            <description>
                The database user wich will be used to update the CVE
                database.
            </description>
        </key>
    </sectiontype>

    <sectiontype name="tickettracker">
        <key name="dbuser" datatype="string" default="tickettracker">
            <description>
                The database user wich will be used to send reminders
                regarding answered tickets.
            </description>
        </key>
    </sectiontype>

    <sectiontype name="trebuchet_server">
        <!-- Not 'existing-directory' because the test runner needs to
        create it. Not 'existing-dirpath' because ZConfig will enforce it
        for all sections, not just the one we are using -->
        <key name="root" datatype="string" required="yes" />
        <key name="launch" datatype="boolean" required="no" default="no" />
        <key name="spew" datatype="boolean" required="no" default="no" />
        <key name="logfile" datatype="string" required="no" default="-" />
    </sectiontype>

    <sectiontype name="trebuchet">
        <key name="dbuser" datatype="string" default="trebuchet" />

        <key name="port" datatype="port-number" default="4280">
            <description>
                Port number Trebuchet listens for XML-RPC requests on.
            </description>
        </key>

        <section name="*" type="trebuchet_server" attribute="server"
            required="no" />
    </sectiontype>

    <sectiontype name="buildsequencer_job">
        <key name="command" datatype="string">
            <description>
                The subprocess to run. You can assume LPCONFIG will be set
                and that PYTHONPATH will be set to include the launchpad/lib
                directory and that CWD will be the top level of the launchpad
                tree itself. But that is all.
            </description>
        </key>
        <key name="mindelay" datatype="integer" default="1">
            <description>
                The minimum delay between invocations of this job type. The
                slavescanner probably wants to be set to 5 seconds or so but
                the queue builder probably wants 5 minutes or so (900 seconds).
                Other tasks will have varying requirements placed on them.
            </description>
        </key>
        <key name="alwayslog" datatype="boolean" default="false">
            <description>
                If set to true, the output of this job will always be logged to
                the sequencer log file.
            </description>
        </key>
    </sectiontype>    

    <sectiontype name="buildsequencer">
        <key name="mailproblemsto" datatype="string" default="">
            <description>
                If one of the subprocesses exits with a failure code then the
                build sequencer will email this address with the output of
                the subprocess. If this variable is set to a single dash then
                the output will simply be logged instead.
            </description>
        </key>
        <key name="launch" datatype="boolean" default="false">
            <description>
                If true, the buildsequencer will be started by the startup
                scripts. This is similar to trebuchet_server/launch.
            </description>
        </key>
        <key name="logfile" datatype="string">
            <description>
                The name of the log file for the sequencer (passed to twistd)
            </description>
        </key>
        <key name="spew" datatype="boolean" required="no" default="no" />
        <key name="smtphost" datatype="string" default="localhost" 
            required="no" />
        <key name="fromaddress" datatype="string" 
            default="launchpad@lists.canonical.com" 
            required="no" />
        <multisection name="+" type="buildsequencer_job"
            attribute="jobs" required="no" />
    </sectiontype>

    <sectiontype name="uploader">
        <key name="dbuser" datatype="string" required="yes" />
        <key name="default_recipient_name" datatype="string" required="yes" />
        <key name="default_sender_name" datatype="string" required="yes" />
        <key name="default_recipient_address" datatype="string" 
             required="yes" />
        <key name="default_sender_address" datatype="string" required="yes" />
    </sectiontype>

    <sectiontype name="uploadqueue">
        <key name="dbuser" datatype="string" required="yes" />
    </sectiontype>

    <sectiontype name="branchupdater">
        <key name="dbuser" datatype="string" required="yes">
            <description>
                The database user wich will be used to update branches.
            </description>
        </key>
        <key name="prefixurl" datatype="string" required="yes">
            <description>
                URL prepended to branch ids to obtain branch URLs.
            </description>
        </key>
    </sectiontype>

    <sectiontype name="supermirror">
        <key name="dbuser" datatype="string" default="supermirror" />
    </sectiontype>

    <sectiontype name="canonical">
        <key name="dbhost" datatype="ipaddr-or-hostname" required="no" />
        <key name="dbname" datatype="string" required="yes" />
        <key name="chunkydiff" datatype="boolean"
            required="no" default="true" />
        <key name="show_tracebacks" datatype="boolean"
            required="no" default="false" />
        <key name="bounce_address" datatype="string" required="no"
            default="bounces@canonical.com" />
        <key name="admin_address" datatype="string" required="no"
            default="system-error@launchpad.ubuntu.com" />
        <key name="pid_dir" datatype="existing-directory" required="no"
            default="/tmp" />
        <section name="*" type="launchpad" attribute="launchpad" />
        <section name="*" type="malone" attribute="malone" />
        <section name="*" type="rosetta" attribute="rosetta" />
        <section name="*" type="librarian" attribute="librarian" />
        <section name="*" type="zopeless" attribute="zopeless" />
        <section name="*" type="gpghandler" attribute="gpghandler" />
        <section name="*" type="zeca" attribute="zeca" />
        <section name="*" type="statistician" attribute="statistician" />
        <section name="*" type="dyson" attribute="dyson" />
        <section name="*" type="gina" attribute="gina" />
        <section name="*" type="trebuchet" attribute="trebuchet" />
        <section name="*" type="shipitexporter" attribute="shipitexporter" />
        <section name="*" type="karmacacheupdater"
            attribute="karmacacheupdater" />
        <section name="*" type="targetnamecacheupdater"
            attribute="targetnamecacheupdater" />
        <section name="*" type="cveupdater" attribute="cveupdater" />
        <section name="*" type="tickettracker" attribute="tickettracker" />
        <section name="*" type="buildsequencer" attribute="buildsequencer" />
        <section name="*" type="uploader" attribute="uploader" />
        <section name="*" type="uploadqueue" attribute="uploadqueue" />
        <section name="*" type="supermirror" attribute="supermirror" />
        <section name="*" type="branchupdater" attribute="branchupdater" />
    </sectiontype>

    <!-- Now specify where the section types may be rooted in the config file
    -->
    <multisection name="+" type="canonical" attribute="canonical" />
</schema>
