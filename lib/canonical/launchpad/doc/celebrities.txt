= Launchpad Celebrities =

https://launchpad.canonical.com/LaunchpadCelebrities

There are a number of special objects, some of which exist in the
database, which we want to give easy access to in the code. To this end,
there is an ILaunchpadCelebrities utility available that gives access
to these well-known objects through attributes.

    >>> from canonical.launchpad.interfaces import ILaunchpadCelebrities
    >>> from canonical.launchpad.interfaces import ILanguageSet, IPersonSet
    >>> celebs = getUtility(ILaunchpadCelebrities)

    >>> from canonical.launchpad.webapp.testing import verifyObject
    >>> verifyObject(ILaunchpadCelebrities, celebs)
    True


== admin ==

The 'admins' team contain the user who have super-power over all of
Launchpad. This team is accessible through the admin attribute.

    >>> personset = getUtility(IPersonSet)
    >>> admins = personset.getByName('admins')
    >>> celebs.admin == admins
    True


== vcs-imports ==

The vcs-imports celebrity owns the branches created by importd.

    >>> vcs_imports = personset.getByName('vcs-imports')
    >>> celebs.vcs_imports == vcs_imports
    True


== bazaar-experts ==

The bazaar-experts celebrity effectively has admin type privileges
for branches, and branch related objects.

    >>> bazaar_experts = personset.getByName('bazaar-experts')
    >>> celebs.bazaar_experts == bazaar_experts
    True


== english ==

The English language is used in many places.  It's the native language
for translation, as well as for Launchpad itself.

    >>> english = getUtility(ILanguageSet).getLanguageByCode('en')
    >>> english == celebs.english
    True


== registry_experts ==

The registry_experts celebrity has permissions to perform registry gardening
operations.

    >>> registry = personset.getByName('registry')
    >>> celebs.registry_experts == registry
    True


== buildd_admin ==

The buildd_admin celebrity has permission to perform routine task
in the buildfarm.

    >>> buildd_admin = personset.getByName('launchpad-buildd-admins')
    >>> celebs.buildd_admin == buildd_admin
    True


== bug_watch_updater ==

The bug_watch_updater celebrity updates the bug watches.

    >>> bug_watch_updater = personset.getByName('bug-watch-updater')
    >>> celebs.bug_watch_updater == bug_watch_updater
    True


== sourceforge_tracker ==

For all the products using SourceForge, we have a single registered
tracker

    >>> from canonical.launchpad.interfaces import IBugTrackerSet
    >>> sf_tracker = getUtility(IBugTrackerSet).getByName('sf')
    >>> celebs.sourceforge_tracker == sf_tracker
    True


== janitor ==

We have the Launchpad Janitor which takes care of expiring old
questions, team memberships when they reach their expiry date,
and old incomplete bugtasks.

    >>> janitor = personset.getByName('janitor')
    >>> celebs.janitor == janitor
    True


== launchpad ==

The Launchpad product itself.

    >>> from canonical.launchpad.interfaces import IProductSet
    >>> launchpad = getUtility(IProductSet).getByName('launchpad')
    >>> celebs.launchpad == launchpad
    True


== mailing_list_experts ==

There is a 'Mailing List Experts' team that has administrative power
over mailing lists.

    >>> mailing_list_experts = personset.getByName('mailing-list-experts')
    >>> celebs.mailing_list_experts == mailing_list_experts
    True

The Launchpad Administrators team is a member of that team.

    >>> celebs.admin.inTeam(mailing_list_experts)
    True


== obsolete_junk ==

The 'Obsolete Junk' project is used to hold undeletable objects like
productseries that other projects no longer want.

    >>> obsolete_junk = getUtility(IProductSet).getByName('obsolete-junk')
    >>> celebs.obsolete_junk == obsolete_junk
    True


== commercial_admin ==

There is a 'Commercial Subscription Admins' team that has
administrative power over the license review process and
has the ability to de-activate projects.

    >>> commercial_admin = personset.getByName('commercial-admins')
    >>> celebs.commercial_admin == commercial_admin
    True


== Savannah bug tracker ==

There is a 'Savannah Bug Tracker' bugtracker which represents the
bug tracker for all registered Savannah projects.

    >>> from canonical.launchpad.interfaces import IBugTrackerSet
    >>> savannah_tracker = getUtility(IBugTrackerSet).getByName(
    ...     'savannah')
    >>> celebs.savannah_tracker == savannah_tracker
    True

The Savannah bug tracker also has a BugTrackerAlias with the URL
http://savannah.nognu.org/

    >>> for alias in celebs.savannah_tracker.aliases:
    ...     print alias
    http://savannah.nognu.org/


== Gnome Bugzilla ==

There is a 'Gnome Bugzilla' celebrity, which is used to represent the
Gnome Bugzilla instance by the checkwatches script.

    >>> gnome_bugzilla = getUtility(IBugTrackerSet).getByName('gnome-bugs')
    >>> celebs.gnome_bugzilla == gnome_bugzilla
    True


== PPA key guard ==

There is a 'PPA key guard' celebrity which owns all PPA
'signing_keys'.

    >>> ppa_key_guard = personset.getByName('ppa-key-guard')
    >>> celebs.ppa_key_guard == ppa_key_guard
    True


== Ubuntu branches ==

There's a celebrity that is the only Person allowed to set the official branch
for a source package. It's called ubuntu-branches.

    >>> ubuntu_branches = personset.getByName('ubuntu-branches')
    >>> celebs.ubuntu_branches == ubuntu_branches
    True


== Ubuntu security team ==

There is a celebrity representing the 'ubuntu-security' team, which is
mainly used for granting special permissions on the ubuntu primary
archive.

    >>> ubuntu_security = personset.getByName('ubuntu-security')
    >>> celebs.ubuntu_security == ubuntu_security
    True
