= Branch merge proposals =

Branch merge proposals are a way to show intent of one branch to land
code on another branch.

Branch merge proposals should only ever be created by the
IBranchMergeProposal.new method, as this method does the following
consistency checks:

  * Both branches must have valid products.
  * Both branches must have the same product.
  * There must not already exist a branch landing target for the source branch and
  target branch pair.


== Registering merge proposals ==

All merge proposals have to be registered by a Person.

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.interfaces import (
    ...     IBranchSet, IBranchMergeProposalSet, IPersonSet)
    >>> person_set = getUtility(IPersonSet)
    >>> sample_person = person_set.getByEmail('test@canonical.com')

Two branches are needed in order to define a landing target.

    >>> branch_set = getUtility(IBranchSet)
    >>> source_branch = branch_set.getByUniqueName(
    ...     '~name12/gnome-terminal/klingon')
    >>> target_branch = branch_set.getByUniqueName(
    ...     '~name12/gnome-terminal/main')

    >>> branch_merge_proposal_set = getUtility(IBranchMergeProposalSet)
    >>> merge_proposal = branch_merge_proposal_set.new(
    ...     sample_person, source_branch, target_branch)


== Interfaces ==

    >>> from zope.interface.verify import verifyObject
    >>> from canonical.launchpad.interfaces import IBranchMergeProposal
    >>> verifyObject(IBranchMergeProposal, merge_proposal)
    True
    >>> verifyObject(IBranchMergeProposalSet, branch_merge_proposal_set)
    True


== Canonical URL ==

The URL of a branch merge proposal is based on the source branch.
In order to keep the URL managable, the database ID of the merge
proposal is used.

    >>> login('test@canonical.com')
    >>> from canonical.launchpad.webapp import canonical_url
    >>> url = canonical_url(merge_proposal)
    >>> url[url.rfind('/')+1:] == str(merge_proposal.id)
    True
    >>> print url
    http://code.launchpad.dev/~name12/gnome-terminal/klingon/+merge/...


== Creation constraints ==

The BranchMergeProposalSet.new method raises exceptions for invalid parameters.

    >>> junk_branch = branch_set.getByUniqueName('~name12/+junk/junk.dev')
    >>> branch_merge_proposal_set.new(
    ...     sample_person, junk_branch, target_branch)
    Traceback (most recent call last):
    ...
    InvalidBranchMergeProposal: Junk branches cannot be used as source branches.

    >>> branch_merge_proposal_set.new(
    ...     sample_person, source_branch, junk_branch)
    Traceback (most recent call last):
    ...
    InvalidBranchMergeProposal: Junk branches cannot be used as target branches.

    >>> branch_merge_proposal_set.new(
    ...     sample_person, source_branch, source_branch)
    Traceback (most recent call last):
    ...
    InvalidBranchMergeProposal: Source and target branches must be different.

    >>> firefox_branch = branch_set.getByUniqueName('~name12/firefox/main')
    >>> branch_merge_proposal_set.new(
    ...     sample_person, firefox_branch, target_branch)
    Traceback (most recent call last):
    ...
    InvalidBranchMergeProposal: The source branch and target branch must be
    branches of the same project.
