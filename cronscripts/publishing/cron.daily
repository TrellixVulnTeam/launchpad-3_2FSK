#!/bin/sh

set -x
set -e
set -u

# Launchpad cron.daily (currently just for Ubuntu)

# Informational -- this *MUST* match the database
ARCHIVEROOT=/srv/launchpad.net/ubuntu-archive/ubuntu
DISTSROOT=$ARCHIVEROOT/dists
OVERRIDEROOT=$ARCHIVEROOT/../ubuntu-overrides
INDICES=$ARCHIVEROOT/indices

# Configuration options
LPCONFIG=ftpmaster
LAUNCHPADROOT=/srv/launchpad.net/codelines/current
LOCKFILE=/srv/launchpad.net/ubuntu-archive/cron.daily.lock
DISTRONAME=ubuntu
GNUPGHOME=/srv/launchpad.net/ubuntu-archive/gnupg-home
TOUCHLIST=$ARCHIVEROOT/project/trace/$(hostname --fqdn)

# Manipulate the environment
export LPCONFIG
export GNUPGHOME
PATH=$PATH:$LAUNCHPADROOT/scripts:$LAUNCHPADROOT/cronscripts

# claim the lock

if ! lockfile -r1 $LOCKFILE; then
  echo "Could not claim lock file."
  exit 1
fi

DONEPUB=no

cleanup () {
  echo "Cleaning up lockfile."
  rm -f $LOCKFILE
  if [ "x$DONEPUB" = "xyes" ]; then
      rm -rf ${DISTSROOT}.old
  else
      rm -rf ${DISTSROOT}.new
  fi
}

trap cleanup 0

# Lock claimed.

# Process the accepted queue into the publishing records.
process-accepted.py -v -v -v $DISTRONAME

# Copy the dists tree ready for publishing into so that we don't get
# an inconsistent dists tree at any point during the publishing cycle.
# Because this would cause buildds to explode.
cp -a $DISTSROOT ${DISTSROOT}.new

# XXX: dsilvers: 20060204: DAK created some extra d-i pockets which
# were aren't necessarily going to create. Until we have a more
# satisfactory correction in the publisher we just touch the Packages
# files to ensure that the Release files get generated properly.

for COMP in restricted universe; do
  for ARCH in i386 amd64 powerpc hppa sparc ia64; do
    touch ${DISTSROOT}.new/breezy-updates/$COMP/debian-installer/binary-$ARCH/Packages
  done
done

# Publish the results.
publish-distro.py -v -v -d $DISTRONAME -R ${DISTSROOT}.new

set +x
# Find all the Release files for which the Release.GPG is missing/too-old
for RELEASEFILE in $(find ${DISTSROOT}.new -name Release); do
  #  [ Release.gpg missing   ] or [ Release is newer than Release.gpg ]
  if [ ! -f $RELEASEFILE.gpg ] || [ $RELEASEFILE -nt $RELEASEFILE.gpg ]; then
    echo "(re-)signing $RELEASEFILE"
    gpg --yes --detach-sign --armor -o $RELEASEFILE.gpg --sign $RELEASEFILE
  else
    echo "Not re-signing $RELEASEFILE"
  fi
done

# The Packages and Sources files are very large and would cripple our
# mirrors, so we remove them now that the uncompressed MD5SUMS are in the
# Release files.
echo Removing uncompressed Packages and Sources files
find ${DISTSROOT}.new \( -name "Packages" -o -name "Sources" \) -exec rm "{}" \;

# Copy in the indices
echo Copying the indices into place.
rm -f $INDICES/*
cp $OVERRIDEROOT/override.* $INDICES

set -x 

# As close to atomically as possible, put the new dists into place
mv $DISTSROOT ${DISTSROOT}.old
mv ${DISTSROOT}.new $DISTSROOT

DONEPUB=yes

# Touch everything you asked us to do
for FILE in $TOUCHLIST; do
  touch "$FILE"
done
