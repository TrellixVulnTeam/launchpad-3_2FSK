Bug Nomination
==============

Any logged-in user can nominate a bug to be fixed in a specific
distribution release or product series. Nominations are created by
calling IBug.addNomination.

    >>> from zope.component import getUtility
    >>> from zope.interface.verify import verifyClass
    >>> from canonical.launchpad.database import BugNomination
    >>> from canonical.launchpad.interfaces import (
    ...     IBugNomination, IBugSet, IDistributionSet, IPersonSet)

    >>> login("no-priv@canonical.com")

The BugNomination class implements IBugNomination.

    >>> verifyClass(IBugNomination, BugNomination)
    True

    >>> bug_one = getUtility(IBugSet).get(1)

    >>> ubuntu = getUtility(IDistributionSet).getByName("ubuntu")
    >>> ubuntu_grumpy = ubuntu.getRelease("grumpy")
    >>> personset = getUtility(IPersonSet)
    >>> no_privs = personset.getByName("no-priv")

    >>> grumpy_nomination = bug_one.addNomination(
    ...     target=ubuntu_grumpy, owner=no_privs)

The nomination records the distro release or series for which the bug
was nominated and the user that submitted the nomination (the "owner".)

    >>> print grumpy_nomination.owner.name
    no-priv

    >>> print grumpy_nomination.distrorelease.fullreleasename
    Ubuntu Grumpy

Let's create another nomination, this time on a product series.

    >>> from canonical.launchpad.interfaces import IProductSet

    >>> firefox = getUtility(IProductSet).getByName("firefox")

    >>> firefox_milestones = firefox.getSeries("milestones")

    >>> no_privs = personset.getByName("no-priv")

    >>> firefox_ms_nomination = bug_one.addNomination(
    ...     target=firefox_milestones, owner=no_privs)

    >>> print firefox_ms_nomination.owner.name
    no-priv

    >>> print firefox_ms_nomination.productseries.title
    Mozilla Firefox Series: milestones

The target of a nomination can also be accessed through its target
attribute.

    >>> print grumpy_nomination.target.bugtargetname
    Ubuntu Grumpy

    >>> print firefox_ms_nomination.target.bugtargetname
    firefox milestones (upstream)

Use IBug.isNominatedFor to see if a bug is nominated for a particular
distrorelease or productseries.

    >>> ubuntu_breezy_autotest = ubuntu.getRelease("breezy-autotest")

    >>> bug_one.isNominatedFor(firefox_milestones)
    True

    >>> bug_one.isNominatedFor(ubuntu_grumpy)
    True

    >>> bug_one.isNominatedFor(ubuntu_breezy_autotest)
    False

The getNominationFor() method returns a nomination for a specific
productseries or distrorelease. If there is no nomination for the target
provided, a NotFoundError is raised.

    >>> bug_one.getNominationFor(firefox_milestones)
    <BugNomination ...>

    >>> bug_one.getNominationFor(ubuntu_grumpy)
    <BugNomination ...>

    >>> bug_one.getNominationFor(ubuntu_breezy_autotest)
    Traceback (most recent call last):
      ...
    NotFoundError: ...

IBug.getNominations() returns a list of all IBugNominations for a bug,
ordered by IBugTarget.bugtargetname.

    >>> nominations = bug_one.getNominations()

    >>> [nomination.target.bugtargetname for nomination in nominations]
    [u'firefox 1.0 (upstream)', u'firefox milestones (upstream)',
     u'Ubuntu Grumpy', u'Ubuntu Hoary']

This method also accepts a target argument, for further filtering.

    >>> nominations = bug_one.getNominations(firefox)

    >>> [nomination.target.bugtargetname for nomination in nominations]
    [u'firefox 1.0 (upstream)', u'firefox milestones (upstream)']

    >>> nominations = bug_one.getNominations(ubuntu)

    >>> [nomination.target.bugtargetname for nomination in nominations]
    [u'Ubuntu Grumpy', u'Ubuntu Hoary']

Nomination Status
-----------------

A nomination is created with an initial status of "Proposed".

    >>> ubuntu_breezy_autotest_nomination = bug_one.addNomination(
    ...     target=ubuntu_breezy_autotest, owner=no_privs)

    >>> print ubuntu_breezy_autotest_nomination.status.title
    Proposed
    >>> ubuntu_breezy_autotest_nomination.isProposed()
    True
    >>> ubuntu_breezy_autotest_nomination.isApproved()
    False
    >>> ubuntu_breezy_autotest_nomination.isDeclined()
    False

Nomination status changes have an associated workflow. For this reason,
setting status directly is not possible.

    >>> from canonical.lp.dbschema import BugNominationStatus

    >>> nomination.status = BugNominationStatus.APPROVED
    Traceback (most recent call last):
      ...
    ForbiddenAttribute: ...

The status of a nomination is changed by calling either the approve() or
decline() method. Only users with launchpad.Driver permission on the
nomination can approve or decline it.

    >>> from canonical.launchpad.helpers import check_permission
    >>> from canonical.launchpad.interfaces import ILaunchBag

    >>> current_user = getUtility(ILaunchBag).user

    >>> current_user == no_privs
    True
    >>> check_permission("launchpad.Driver", firefox_ms_nomination)
    False

    >>> firefox_ms_nomination.approve(no_privs)
    Traceback (most recent call last):
      ..
    Unauthorized: ...

    >>> firefox_ms_nomination.decline(no_privs)
    Traceback (most recent call last):
      ..
    Unauthorized: ...

(Log in as an admin to set the driver.)

    >>> login("foo.bar@canonical.com")

    >>> firefox_ms_nomination.target.driver = no_privs

    >>> login("no-priv@canonical.com")

Approving a nomination
----------------------

When a nomination is approved, the appropriate bugtask(s) are created on
the target of the nomination and the status is set to APPROVED.

For example, there are currently no bugtasks on the firefox_milestones
productseries.

    >>> from canonical.launchpad.interfaces import BugTaskSearchParams

    >>> params = BugTaskSearchParams(user=no_privs, bug=bug_one)
    >>> found_tasks = firefox_milestones.searchTasks(params)
    >>> found_tasks.count()
    0

When a nomination is approved, one task is created, targeted at
firefox_milestones.

    >>> firefox_ms_nomination.approve(no_privs)

    >>> firefox_ms_nomination.isApproved()
    True
    >>> firefox_ms_nomination.isProposed()
    False
    >>> firefox_ms_nomination.isDeclined()
    False

    >>> found_tasks.count()
    1
    >>> bugtask = found_tasks[0]
    >>> bugtask.target == firefox_milestones
    True
    >>> print bugtask.owner.name
    no-priv

When a distribution bug nomination is approved, a task is created for
each package the bug affects in that distro. For example, let's ensure
bug #1 affects more than one Ubuntu package.

    >>> from canonical.launchpad.interfaces import IBugTaskSet

    >>> ubuntu_tbird = ubuntu.getSourcePackage("thunderbird")

    >>> getUtility(IBugTaskSet).createTask(
    ...     bug=bug_one, owner=no_privs,
    ...     distribution=ubuntu,
    ...     sourcepackagename=ubuntu_tbird.sourcepackagename)
    <BugTask ...>

    >>> def by_bugtargetname(bugtask):
    ...     return bugtask.target.bugtargetname

    >>> tasks = sorted(
    ...     bug_one.bugtasks, key=by_bugtargetname)

    >>> for task in tasks:
    ...     print task.target.bugtargetname
    firefox (upstream)
    firefox milestones (upstream)
    mozilla-firefox (Debian)
    mozilla-firefox (Ubuntu)
    thunderbird (Ubuntu)

When we approve the nomination, two more Ubuntu tasks are added for the
Grumpy release. The user that made the decision is stored in the decider
attribute. The date on which the decision was made is stored in the
datedecided attribute.

(Again, first we'll set the driver with an admin user, to ensure
no_privs can actually approve the nomination.)

    >>> login("foo.bar@canonical.com")
    >>> grumpy_nomination.target.driver = no_privs
    >>> login("no-priv@canonical.com")

    >>> grumpy_nomination.datedecided is None
    True
    >>> grumpy_nomination.approve(no_privs)
    >>> print grumpy_nomination.status.title
    Approved
    >>> print grumpy_nomination.decider.name
    no-priv
    >>> grumpy_nomination.datedecided
    datetime...

    >>> tasks = sorted(
    ...     bug_one.bugtasks, key=by_bugtargetname)

    >>> for task in tasks:
    ...     print task.target.bugtargetname
    firefox (upstream)
    firefox milestones (upstream)
    mozilla-firefox (Debian)
    mozilla-firefox (Ubuntu Grumpy)
    mozilla-firefox (Ubuntu)
    thunderbird (Ubuntu Grumpy)
    thunderbird (Ubuntu)

Declining a nomination
----------------------

Declining a nomination simply sets its status to DECLINED. No tasks are
created.

    >>> login("foo.bar@canonical.com")
    >>> ubuntu_breezy_autotest_nomination.target.driver = no_privs
    >>> login("no-priv@canonical.com")

    >>> ubuntu_breezy_autotest_nomination.datedecided is None
    True
    >>> print ubuntu_breezy_autotest_nomination.status.title
    Proposed

    >>> ubuntu_breezy_autotest_nomination.decline(no_privs)

    >>> print ubuntu_breezy_autotest_nomination.status.title
    Declined

    >>> ubuntu_breezy_autotest_nomination.isDeclined()
    True
    >>> ubuntu_breezy_autotest_nomination.isApproved()
    False
    >>> ubuntu_breezy_autotest_nomination.isProposed()
    False
    >>> print ubuntu_breezy_autotest_nomination.decider.name
    no-priv
    >>> ubuntu_breezy_autotest_nomination.datedecided
    datetime...

Bug Nomination Set
------------------

IBugNominationSet is used to fetch bug nominations by ID. This is useful
mainly in traversal code.

    >>> from canonical.launchpad.interfaces import IBugNominationSet

    >>> getUtility(IBugNominationSet).get(1)
    <BugNomination at ...>

If a nomination is not found, a NotFoundError is raised.

    >>> getUtility(IBugNominationSet).get(-1)
    Traceback (most recent call last):
      ...
    NotFoundError: ...

Error Handling
--------------

Adding a duplicate nomination raises a DuplicateNominationError.

    >>> bug_one.addNomination(
    ...     target=ubuntu_grumpy, owner=no_privs)
    Traceback (most recent call last):
      ..
    DuplicateNominationError: ...

    >>> bug_one.addNomination(
    ...     target=firefox_milestones, owner=no_privs)
    Traceback (most recent call last):
      ..
    DuplicateNominationError: ...

Nominating a bug for an obsolete distrorelease raises a
NominationReleaseObsoleteError. Let's mark warty obsolete to
demonstrate.

    >>> from canonical.lp.dbschema import DistributionReleaseStatus

    >>> ubuntu_warty = ubuntu.getRelease("warty")

(Temporarily log in as an admin user to change the release status.)

    >>> login("foo.bar@canonical.com")
    >>> ubuntu_warty.releasestatus = DistributionReleaseStatus.OBSOLETE
    >>> login("no-priv@canonical.com")

    >>> bug_one.addNomination(target=ubuntu_warty, owner=no_privs)
    Traceback (most recent call last):
      ..
    NominationReleaseObsoleteError: ...

    >>> logout()
