= Submissions to the hardware database =

The hardware database client collects information from various sources,
and submits it in an HTTP POST request to the hardware database server.
The POST data consists of the following fields:

  * date_created (see hwdb.txt)
  * format (see hwdb.txt)
  * private (see hwdb.txt)
  * contactable (see hwdb.txt)
  * submission_key (see hwdb.txt)
  * emailaddress (see hwdb.txt)
  * distribution: The distribution name. The value should match a value
    in the SQL table Distribution, column name.
  * distroseries: The distroseries version. The value should match a value
    in the SQL table distroseries, column version
  * processorfamily: The name of the processorfamily. The value should 
    match a value in the SQL table Processorfamily, column name.
  * system: The system name as returned by HAL (system.vendor, system.product)
  * submission_data: An XML file containing the collected data. This file is
    simply stored as a Librarian file, and parsed later by a cron job.

    >>> from StringIO import StringIO
    >>> from zope.component import getUtility, getMultiAdapter
    >>> from canonical.launchpad.interfaces import IHWDBApplication
    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest
    >>> data = StringIO('some data.')
    >>> data.filename = 'hardware-info'
    >>> form={'field.date_created':    u'2007-08-01',
    ...       'field.format':          u'VERSION_1',
    ...       'field.private':         u'',
    ...       'field.contactable':     u'',
    ...       'field.submission_key':  u'unique-id-1',
    ...       'field.emailaddress':    u'test@canonical.com',
    ...       'field.distribution':    u'ubuntu',
    ...       'field.distroseries':    u'5.04',
    ...       'field.architecture':    u'i386',
    ...       'field.system':          u'HP 6543',
    ...       'field.submission_data': data,
    ...       'field.actions.upload':  u'Upload'}
    >>> request = LaunchpadTestRequest(method='POST', form=form)
    >>> app = getUtility(IHWDBApplication)
    >>> submit_view = getMultiAdapter((app, request), name='+submit')
    >>> submit_view.initialize()
    >>> submit_view.errors
    []

The request created an entry in the HWDBSubmissions table.

    >>> from canonical.launchpad.interfaces import IHWSubmissionSet
    >>> submission_set = getUtility(IHWSubmissionSet)
    >>> submission = submission_set.getBySubmissionKey(u'unique-id-1')
    >>> submission.date_created, submission.format.name
    (datetime.datetime(2007, 8, 1, 0, 0, tzinfo=<UTC>), 'VERSION_1')
    >>> submission.private, submission.contactable
    (False, False)
    >>> submission.submission_key
    u'unique-id-1'
    >>> submission.system_fingerprint.fingerprint
    u'HP 6543'

The submitted data is stored in raw_submission.

    >>> import transaction
    >>> transaction.commit()
    >>> submission.raw_submission.read()
    'some data.'

A reference to distroarchseries is created for the fields distribution, 
distroseries, architecture.

    >>> submission.distroarchseries.distroseries.distribution.name
    u'ubuntu'
    >>> submission.distroarchseries.distroseries.version
    u'5.04'
    >>> submission.distroarchseries.architecturetag
    u'i386'

Each submission must have a distinct submission_key, hence an attempt to submit
identical data a second time leads to an error.

    >>> request = LaunchpadTestRequest(method='POST', form=form)
    >>> submit_view = getMultiAdapter((app, request), name='+submit')
    >>> submit_view.initialize()
    >>> [error.doc() for error in submit_view.errors]
    [u'Submission key already exists.']


If the field distribution contains a name which is not known in the
Launchpad database, the distroarchseries field is None.

    >>> form['field.submission_key'] = u'unique-id-2'
    >>> invalid_form = form.copy()
    >>> invalid_form['field.distribution'] = 'no distribution'
    >>> request = LaunchpadTestRequest(method='POST', form=invalid_form)
    >>> submit_view = getMultiAdapter((app, request), name='+submit')
    >>> submit_view.initialize()
    >>> submission = submission_set.getBySubmissionKey(u'unique-id-2')
    >>> print submission.distroarchseries
    None

If distribution is known, but distroseries or architecture are unknown
to Launchpad, we refuse the submissions.

    >>> form['field.submission_key'] = u'unique-id-3'
    >>> invalid_form = form.copy()
    >>> invalid_form['field.distroseries'] = 'no release'
    >>> request = LaunchpadTestRequest(method='POST', form=invalid_form)
    >>> submit_view = getMultiAdapter((app, request), name='+submit')
    >>> submit_view.initialize()
    >>> print submission_set.getBySubmissionKey(u'unique-id-3')
    None
    
    >>> form['field.submission_key'] = u'unique-id-4'
    >>> invalid_form = form.copy()
    >>> invalid_form['field.architecture'] = 'no architecture'
    >>> request = LaunchpadTestRequest(method='POST', form=invalid_form)
    >>> submit_view = getMultiAdapter((app, request), name='+submit')
    >>> submit_view.initialize()
    >>> print submission_set.getBySubmissionKey(u'unique-id-4')
    None

The `date_created` field must contain a valid date.

    >>> form['field.submission_key'] = u'unique-id-5'
    >>> invalid_form = form.copy()
    >>> invalid_form['field.date_created'] = '2007-05-35'
    >>> request = LaunchpadTestRequest(method='POST', form=invalid_form)
    >>> submit_view = getMultiAdapter((app, request), name='+submit')
    >>> submit_view.initialize()
    >>> [error.doc() for error in submit_view.errors]
    [u'Invalid datetime data']

The `format` field must contain a value that matches the DBEnumeratedType
HWDBSubmissionFormat.

    >>> invalid_form = form.copy()
    >>> invalid_form['field.format'] = u'VERSION_42'
    >>> request = LaunchpadTestRequest(method='POST', form=invalid_form)
    >>> submit_view = getMultiAdapter((app, request), name='+submit')
    >>> submit_view.initialize()
    >>> [error.doc() for error in submit_view.errors]
    ['Invalid value']

The field `submission_key` may contain only ASCII data.

    >>> invalid_form = form.copy()
    >>> invalid_form['field.submission_key'] = u'wrong id \x81'
    >>> request = LaunchpadTestRequest(method='POST', form=invalid_form)
    >>> submit_view = getMultiAdapter((app, request), name='+submit')
    >>> submit_view.initialize()
    >>> [error.doc() for error in submit_view.errors]
    [u'Invalid textual data']

The field `emailaddress` must contain a formally valid email address.

    >>> invalid_form = form.copy()
    >>> invalid_form['field.emailaddress'] = u'beeblebrox'
    >>> request = LaunchpadTestRequest(method='POST', form=invalid_form)
    >>> submit_view = getMultiAdapter((app, request), name='+submit')
    >>> submit_view.initialize()
    >>> [error.doc() for error in submit_view.errors]
    [u'Invalid email address']

All fields are required.

    >>> for field in ('field.date_created', 'field.format', 'field.private',
    ...     'field.contactable', 'field.submission_key',
    ...     'field.emailaddress', 'field.distribution',
    ...     'field.distroseries', 'field.architecture', 'field.system',
    ...     'field.submission_data'):
    ...     invalid_form = form.copy()
    ...     del invalid_form[field]
    ...     request = LaunchpadTestRequest(method='POST', form=invalid_form)
    ...     submit_view = getMultiAdapter((app, request), name='+submit')
    ...     submit_view.initialize()
    ...     submit_view.widget_errors
    {'date_created': u'Required field is missing'}
    {'format': u'Required field is missing'}
    {'private': u'Required field is missing'}
    {'contactable': u'Required field is missing'}
    {'submission_key': u'Required field is missing'}
    {'emailaddress': u'Required field is missing'}
    {'distribution': u'Required field is missing'}
    {'distroseries': u'Required field is missing'}
    {'architecture': u'Required field is missing'}
    {'system': u'Required field is missing'}
    {'submission_data': u'Required field is missing'}

Teams can be owners of submissions.

    >>> import os
    >>> from canonical.config import config
    >>> team_form = form.copy()
    >>> team_form['field.emailaddress'] = 'support@ubuntu.com'
    >>> team_form['field.submission_key'] = u'unique-id-68'
    >>> valid_sample_data_path = os.path.join(
    ...     config.root,
    ...     'lib/canonical/launchpad/scripts/tests/'
    ...     'simple_valid_hwdb_submission.xml')
    >>> valid_sample_data = StringIO(open(valid_sample_data_path).read())
    >>> valid_sample_data.filename = 'simple_valid_hwdb_submission.xml'
    >>> team_form['field.submission_data'] = valid_sample_data
    >>> request = LaunchpadTestRequest(method='POST', form=team_form)
    >>> submit_view = getMultiAdapter((app, request), name='+submit')
    >>> submit_view.initialize()
    >>> submission = submission_set.getBySubmissionKey(u'unique-id-68')
    >>> submission.owner.displayname
    u'Ubuntu Team'


== Submission Processing ==

Submissions are processed by the cronscript process-hwdb-submissions.py.
This script processes all submissions with the status SUBMITTED, checks
the validity of each submission, populates the HWDB tables with data
from a submission and sets the submission state to VALID. If any error
occurs when a submission is processed, its status is set to INVALID and
according error is logged. For details, see
lib/canonical/launchpad/scripts/tests/test_hwdb_submission_processing.py.

We have currently three unprocessed submissions in the database, and no
submissions with the status PROCESSED or INVALID.

    >>> from canonical.launchpad.interfaces.hwdb import (
    ...     HWSubmissionProcessingStatus)
    >>> new_submissions = submission_set.getByStatus(
    ...     HWSubmissionProcessingStatus.SUBMITTED)
    >>> for submission in new_submissions:
    ...     print submission.submission_key, submission.status.title
    test_submission_id_1 Submitted
    unique-id-1 Submitted
    unique-id-68 Submitted
    >>> processed_submissions = submission_set.getByStatus(
    ...     HWSubmissionProcessingStatus.PROCESSED)
    >>> print processed_submissions.count()
    0
    >>> invalid_submissions = submission_set.getByStatus(
    ...     HWSubmissionProcessingStatus.INVALID)
    >>> print invalid_submissions.count()
    0

The script process-hwdb-submissions.py takes the optional parameter
-m or --max-submissions, so let's process just the first of these three
submissions. This submission is invalid, because it has no Librarian
file, which leads to an OOPS when it is being processed. The submission
key is logged.

    # Commit the current transaction so that the script sees the
    # recently added data.
    >>> import transaction
    >>> transaction.commit()

    # Run the script.
    >>> from canonical.launchpad.ftests.script import run_script
    >>> returnvalue, out, err = run_script(
    ...     'cronscripts/process-hwdb-submissions.py', ['-m1'])
    >>> returnvalue
    0
    >>> print err
    INFO    creating lockfile
    ERROR   Exception while processing HWDB submission test_submission_id_1
    (OOPS-...)
    INFO    Processed 0 valid and 1 invalid HWDB submissions
    >>> print out
    <BLANKLINE>

Submission "test_submission_id_1" has now the state INVALID; the other
submissions are unchanged.

    >>> new_submissions = submission_set.getByStatus(
    ...     HWSubmissionProcessingStatus.SUBMITTED)
    >>> for submission in new_submissions:
    ...     print submission.submission_key, submission.status.title
    unique-id-1 Submitted
    unique-id-68 Submitted
    >>> processed_submissions = submission_set.getByStatus(
    ...     HWSubmissionProcessingStatus.PROCESSED)
    >>> print processed_submissions.count()
    0
    >>> invalid_submissions = submission_set.getByStatus(
    ...     HWSubmissionProcessingStatus.INVALID)
    >>> for submission in invalid_submissions:
    ...     print submission.submission_key, submission.status.title
    test_submission_id_1 Invalid submission

From the remaining two not yet processed submissions, one has invalid
data, the other submission is valid.

    >>> returnvalue, out, err = run_script(
    ...     'cronscripts/process-hwdb-submissions.py')
    >>> returnvalue
    0
    >>> print err
    INFO    creating lockfile
    ERROR   Parsing submission unique-id-1: syntax error: line 1, column 0
    INFO    Processed 1 valid and 1 invalid HWDB submissions
    >>> print out
    <BLANKLINE>

Now we have one valid, two invalid and no unprocessed submissions.

    >>> # We must start a new transaction in order to see the effects
    >>> # the script had on the database.
    >>> transaction.commit()
    >>> new_submissions = submission_set.getByStatus(
    ...     HWSubmissionProcessingStatus.SUBMITTED)
    >>> print new_submissions.count()
    0
    >>> processed_submissions = submission_set.getByStatus(
    ...     HWSubmissionProcessingStatus.PROCESSED)
    >>> for submission in processed_submissions:
    ...     print submission.submission_key, submission.status.title
    unique-id-68 Processed

    >>> invalid_submissions = submission_set.getByStatus(
    ...     HWSubmissionProcessingStatus.INVALID)
    >>> for submission in invalid_submissions:
    ...     print submission.submission_key, submission.status.title
    test_submission_id_1 Invalid submission
    unique-id-1 Invalid submission

Larger numbers of submissions can be processed too. Add enough submissions
that scripts.hwdbsubmissions.ProcessingLoop is called at least twice.

    >>> form['field.submission_data'] = valid_sample_data
    >>> for serial in range(80):
    ...     form['field.submission_key'] = u'submission-%i' % serial
    ...     request = LaunchpadTestRequest(method='POST', form=form)
    ...     submit_view = getMultiAdapter((app, request), name='+submit')
    ...     submit_view.initialize()

Now we have 80 new submissions and three submissions that were processed
in previous tests.

    >>> print submission_set.getByStatus(
    ...     HWSubmissionProcessingStatus.SUBMITTED).count()
    80
    >>> print submission_set.getByStatus(
    ...     HWSubmissionProcessingStatus.PROCESSED).count()
    1
    >>> print submission_set.getByStatus(
    ...     HWSubmissionProcessingStatus.INVALID).count()
    2
    >>> transaction.commit()

Let's leave some submissions unprocessed in order to check if the
processing loop terminates properly, when the parameter "-m" is given.

    >>> returnvalue, out, err = run_script(
    ...     'cronscripts/process-hwdb-submissions.py', ['-m60'])
    >>> returnvalue
    0
    >>> print err
    INFO    creating lockfile
    INFO    Processed 60 valid and 0 invalid HWDB submissions
    >>> print out
    <BLANKLINE>
    >>> print submission_set.getByStatus(
    ...     HWSubmissionProcessingStatus.SUBMITTED).count()
    20
    >>> print submission_set.getByStatus(
    ...     HWSubmissionProcessingStatus.PROCESSED).count()
    61
    >>> print submission_set.getByStatus(
    ...     HWSubmissionProcessingStatus.INVALID).count()
    2

Let's add more subscription so that we have more than max_chunk_size
unprocessed submissions and process all of them.

    >>> for serial in range(80, 160):
    ...     form['field.submission_key'] = u'submission-%i' % serial
    ...     request = LaunchpadTestRequest(method='POST', form=form)
    ...     submit_view = getMultiAdapter((app, request), name='+submit')
    ...     submit_view.initialize()
    >>> print submission_set.getByStatus(
    ...     HWSubmissionProcessingStatus.SUBMITTED).count()
    100
    >>> print submission_set.getByStatus(
    ...     HWSubmissionProcessingStatus.PROCESSED).count()
    61
    >>> print submission_set.getByStatus(
    ...     HWSubmissionProcessingStatus.INVALID).count()
    2
    >>> transaction.commit()
    >>> returnvalue, out, err = run_script(
    ...     'cronscripts/process-hwdb-submissions.py')
    >>> returnvalue
    0
    >>> print err
    INFO    creating lockfile
    INFO    Processed 100 valid and 0 invalid HWDB submissions
    >>> print out
    <BLANKLINE>
    >>> print submission_set.getByStatus(
    ...     HWSubmissionProcessingStatus.SUBMITTED).count()
    0
    >>> print submission_set.getByStatus(
    ...     HWSubmissionProcessingStatus.PROCESSED).count()
    161
    >>> print submission_set.getByStatus(
    ...     HWSubmissionProcessingStatus.INVALID).count()
    2
