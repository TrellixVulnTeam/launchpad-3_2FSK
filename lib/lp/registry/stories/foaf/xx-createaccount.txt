=================
Create an account
=================

Jane wants to register with Launchpad, so she goes to the registration/login
page.

    >>> browser = setupBrowser()
    >>> browser.open('http://launchpad.dev/+login')
    >>> print extract_text(find_main_content(browser.contents))
    Already registered?
    ...
    Not registered yet?
    ...

She enters an invalid email address, and gets a warning message.

    >>> browser.getControl(name='loginpage_email', index=1).value = 'ab'
    >>> browser.getControl('Register').click()
    >>> print_feedback_messages(browser.contents)
    The email address you provided isn't valid.  Please verify it and try
    again.

Next she enters a valid email address but enters a wrong answer for
the incredibly trivial math captcha.  She gets an error message.

    >>> browser.getControl(name='loginpage_email', index=1).value = (
    ...     'jane@example.com')
    >>> browser.getControl(name='loginpage_captcha_submission').value = '-1'
    >>> browser.getControl('Register').click()
    >>> print_feedback_messages(browser.contents)
    The answer to the simple math question was incorrect or missing.
    Please try again.

Jane tries again, providing a the correct captcha answer.  Her valid
email address from before has been retained in the form.

    >>> from lp.testing.registration import set_captcha_answer
    >>> set_captcha_answer(browser)
    >>> browser.getControl('Register').click()
    >>> print_feedback_messages(browser.contents)
    >>> print extract_text(find_main_content(browser.contents))
    Registration mail sent
    Instructions on completing your registration have been sent to
    jane@example.com.
    ...

Launchpad sends Jane an email message containing a token she must use to
complete the registration process.

    >>> import email
    >>> from lp.services.mail import stub
    >>> from canonical.launchpad.ftests.logintoken import (
    ...     get_token_url_from_email)

    >>> from_addr, to_addrs, raw_msg = stub.test_emails.pop()
    >>> token_url = get_token_url_from_email(raw_msg)

The email was sent to the address Jane registered.

    >>> to_addrs
    ['jane@example.com']

Jane follows the link, but gets distracted before she can complete the
registration process.

    >>> browser.open(token_url)
    >>> print extract_text(find_main_content(browser.contents))
    Display Name:
    Your name as you would like it displayed throughout Launchpad.  Most
    people use their full name here.
    Hide my email addresses from other Launchpad users
    Create password:
    Retype the password:

While Jane was deciding whether to hide her email address, Sneaky Salgado
manages to register her email address out from under her.

    >>> from lp.registry.interfaces.person import IPersonSet
    >>> from zope.component import getUtility

    >>> login('admin@canonical.com')
    >>> salgado = getUtility(IPersonSet).getByName('salgado')
    >>> email = factory.makeEmail('jane@example.com', salgado)
    >>> transaction.commit()

    >>> [email.email for email in salgado.validatedemails]
    [u'jane@example.com']
    >>> logout()

Now Jane attempts completes the registration, but she gets an error.

    >>> browser.getControl('Display Name').value = 'Janerie'
    >>> browser.getControl('Create password').value = 'foo'
    >>> browser.getControl('Retype the password').value = 'foo'
    >>> browser.getControl('Continue').click()
    >>> print_feedback_messages(browser.contents)
    There is 1 error.
    The email address jane@example.com is already registered.

Jane tries again with a different email address.

    >>> browser.open('http://launchpad.dev/+login')
    >>> browser.getControl(name='loginpage_email', index=1).value = (
    ...     'jperson@example.com')
    >>> set_captcha_answer(browser)
    >>> browser.getControl('Register').click()

    >>> from_addr, to_addrs, raw_msg = stub.test_emails.pop()
    >>> token_url = get_token_url_from_email(raw_msg)

    >>> to_addrs
    ['jperson@example.com']

Unfortunately, Jane forgets to enter her display name.

    >>> browser.open(token_url)
    >>> browser.getControl('Create password').value = 'foo'
    >>> browser.getControl('Retype the password').value = 'foo'
    >>> browser.getControl('Continue').click()
    >>> print_feedback_messages(browser.contents)
    There is 1 error.
    Required input is missing.

She tries again, but forgets to enter a password.

    >>> browser.getControl('Display Name').value = 'Janerie'
    >>> browser.getControl('Continue').click()
    >>> print_feedback_messages(browser.contents)
    There is 1 error.
    You must enter a password.

Third time's a charm?  No; she forgets to confirm her password.

    >>> browser.getControl('Display Name').value = 'Janerie'
    >>> browser.getControl('Create password').value = 'foo'
    >>> browser.getControl('Continue').click()
    >>> print_feedback_messages(browser.contents)
    There is 1 error.
    Passwords do not match.

The fourth time she tries a non-ascii password, which isn't allowed.

    >>> browser.getControl('Display Name').value = 'Janerie'
    >>> browser.getControl('Create password').value = 'tésté'
    >>> browser.getControl('Retype the password').value = 'tésté'
    >>> browser.getControl('Continue').click()
    >>> print_feedback_messages(browser.contents)
    There is 1 error.
    The password provided contains non-ASCII characters.

Now Jane enters all the necessary information to create the new account.  She
decides to hide her email address.

    >>> browser.getControl('Display Name').value = 'Janerie'
    >>> browser.getControl('Create password').value = 'foo'
    >>> browser.getControl('Retype the password').value = 'foo'
    >>> browser.getControl(
    ...     'Hide my email addresses from other Launchpad users').click()
    >>> browser.getControl('Continue').click()
    >>> print_feedback_messages(browser.contents)
    Registration completed successfully

And now the account is created.

    >>> login('admin@canonical.com')
    >>> jane = getUtility(IPersonSet).getByEmail('jperson@example.com')
    >>> print jane.creation_rationale.name
    OWNER_CREATED_LAUNCHPAD
    >>> jane.hide_email_addresses
    True
    >>> logout()

If we try to go to that token's page again, we'll see a message explaining
that the confirmation that token was created for is already concluded, so we
don't need to do anything else.

    >>> browser.open(token_url)
    >>> print_feedback_messages(browser.contents)
