Source Package Release
======================

The SourcePackageRelease table represents a particular release of a
SourcePackageName, but isn't tied to any particular DistroRelease
as the same release can appear in many.

Let's get one from the database:

   >>> from canonical.launchpad.database import SourcePackageRelease
   >>> spr = SourcePackageRelease.get(14)
   >>> print spr.name
   mozilla-firefox
   >>> print spr.version
   0.9

We can use the magic productrelease property to map this to a ProductRelease:

   >>> pr = spr.productrelease
   >>> print pr.product.name
   firefox
   >>> print pr.productseries.name
   milestones
   >>> print pr.version
   0.9

It should also work when the version has a dash and packaging revision
after it:

   >>> spr = SourcePackageRelease.get(16)
   >>> print spr.name
   netapplet
   >>> print spr.version
   1.0-1
   >>> pr = spr.productrelease
   >>> print pr.product.name
   netapplet
   >>> print pr.productseries.name
   releases
   >>> print pr.version
   1.0

If there isn't one, that should return None.

   >>> print SourcePackageRelease.get(20).productrelease
   None

Verify the 'meta_binary' attribute:

   >>> spr_test = SourcePackageRelease.get(20)
   >>> spr_test.name
   u'pmount'

   >>> from canonical.launchpad.interfaces import (
   ...    IDistroReleaseBinaryPackage) 

   >>> IDistroReleaseBinaryPackage.providedBy(spr_test.meta_binaries[0])
   True


Check if we can use its utility class:

   >>> from canonical.launchpad.interfaces import (
   ...    ISourcePackageReleaseSet) 

   >>> spr_util = getUtility(ISourcePackageReleaseSet)

It's time to check the upload function.

   >>> import canonical.launchpad
   >>> import os.path
   >>> from canonical.launchpad.interfaces import ITranslationImportQueueSet
   >>> translation_import_queue_set = getUtility(ITranslationImportQueueSet()
   >>> client = getUtility(ILibrarianClient)

We need a test tarball uploaded into librarian to run this test.

   >>> test_file_name = os.path.join(
   ...     os.path.dirname(canonical.launchpad.__file__),
   ...     'pagetests/standalone/test.tar.gz')
   >>> file = open(test_file_name)
   >>> alias = client.addFile(
   ...     name='test.tar.gz',
   ...     file=file,
   ...     contentType='application/x-gtar')

Before the upload, the queue should be empty.

   >>> len(translation_import_queue_set)
   0

Now we do the upload.

   >>> spr_test.attachTranslationFiles(alias, True)

And the queue should have a new entry.

   >>> len(translation_import_queue_set)
   1
