=====================
Bing Search Service
=====================

The BingSearchService is a Bing Custom Search client.
Given one or more terms, it will retrieve a JSON
summary of the matching launchpad.net pages.

We silence logging of new HTTP connections from requests throughout.

    >>> from fixtures import FakeLogger
    >>> logger = FakeLogger()
    >>> logger.setUp()


BingSearchService
===================

The BingSearchService implements the ISearchService interface.

    >>> from zope.component import getUtility
    >>> from zope.interface.verify import verifyObject
    >>> from lp.services.sitesearch.interfaces import (
    ...     ISearchService)

    >>> bing_search = getUtility(ISearchService, name="bing")
    >>> verifyObject(ISearchService, bing_search)
    True
    >>> bing_search
    <...BingSearchService ...>


----------------------------
BingSearchService search()
----------------------------

The search method accepts a string argument of terms and an optional int
argument of start. The terms are the same as the text that would be
entered in Bing search form; the terms should not be escaped.

    >>> from lp.services.sitesearch.interfaces import (
    ...     ISearchResults)

    >>> first_page_matches = bing_search.search(terms='bug')
    >>> first_page_matches
    <...PageMatches ...>

The start parameter specifies the index (starting at 0) of the first
result returned in the overall set of matches. Since 20 results are
returned, to get the second batch of matches, you would use start=20.

    >>> second_page_matches = bing_search.search(terms='bug', start=20)
    >>> second_page_matches
    <...PageMatches ...>


PageMatches
===========

The PageMatches object returned by BingSearchService.search()
implements ISearchResults.

    >>> verifyObject(ISearchResults, first_page_matches)
    True

The 'total' attribute is the total number of matches that the search
found. If that number is higher than 20, it means that multiple requests
would be needed to retrieve the entire result set.

The 'start' attribute is the index of the first returned item within the
entire collection of matches. The 'length' attribute contains the number
of returned results.

The first search for 'bugs' returned a subset of items in the
ISearchResult. There are 25 total items, but the results contains the
first 20 matches (because they start at index 0).

    >>> first_page_matches.start
    0
    >>> first_page_matches.total
    25
    >>> len(first_page_matches)
    20

The second search for 'bugs' returned the remainder of the 25 matches.
They start from index 20.

    >>> verifyObject(ISearchResults, second_page_matches)
    True

    >>> second_page_matches.start
    20
    >>> second_page_matches.total
    25
    >>> len(second_page_matches)
    5

An item can be retrieved from an ISearchResults object using its
index. All the items in the collection can be iterated.

    >>> second_page_matches[1].url
    'http://blog.launchpad.dev/general/of-bugs-and-statuses'

    >>> for page_match in second_page_matches:
    ...     page_match.url
    'https://help.launchpad.net/Bugs'
    'http://blog.launchpad.dev/general/of-bugs-and-statuses'
    'http://launchpad.dev/mahara/+milestone/1.8.0'
    'http://launchpad.dev/mb'
    'http://launchpad.dev/bugs'

An empty PageMatches is returns if there are no results.

    >>> no_page_matches = bing_search.search(terms='fnord')
    >>> no_page_matches.start
    0
    >>> no_page_matches.total
    0
    >>> len(no_page_matches)
    0


PageMatch
=========

The PageMatch object represents a single result from a search result
set. It is created by passing a title, url, and a summary. It is
an implementation of ISearchResult.

    >>> from lp.services.sitesearch.interfaces import ISearchResult
    >>> from lp.services.sitesearch import PageMatch

    >>> page_match = PageMatch(
    ...     u'Unicode Titles in Launchpad',
    ...     'https://launchpad.net/unicode-titles',
    ...     u'Unicode Titles is a modest project dedicated to using Unicode.')

    >>> verifyObject(ISearchResult, page_match)
    True

The title and summary attributes contain the same text that
initialized the object.

    >>> page_match.title
    u'Unicode Titles in Launchpad'
    >>> page_match.summary
    u'Unicode Titles is a modest project dedicated to using Unicode.'

The URL's domain is rewitten to the so that links from launchpad.net are
mapped to the local environment.

    >>> page_match.url
    'http://launchpad.dev/unicode-titles'


Search configuration
====================

The bing search service is configured by the bing section in
lazr.config. All requests are made to Bing's site, but the
configuration may set a testing site.

    >>> from lp.services.config import config
    >>> from lp.services.sitesearch import BingSearchService

    >>> bing_search = BingSearchService()
    >>> config.bing.site == bing_search.site
    True
    >>> bing_search.site
    'http://launchpad.dev:.../bingcustomsearch/v7.0/search'

The subscription_key is the Cognitive Services subscription key for
Bing Custom Search API.

    >>> config.bing.subscription_key == bing_search.subscription_key
    True
    >>> bing_search.subscription_key
    'abcdef01234567890abcdef012345678'

The custom_config_id is the id that identifies the custom search instance.

    >>> config.bing.custom_config_id == bing_search.custom_config_id
    True
    >>> bing_search.custom_config_id
    1234567890

Several default query parameters are constant. They are kept in the
_default_values dict. The q (terms) and start params are provided at
the time of the search.

    >>> for key, value in sorted(bing_search._default_values.items()):
    ...     print key, ':', repr(value)
    count : 20
    customConfig : None
    mkt : 'en-US'
    offset : 0
    q : None

create_search_url()
===================

The search url used inside the search() method is created by
create_search_url(). It accepts two optional arguments: terms and start.
An error is raised if any of the parameters are None.

    >>> bing_search.create_search_url('')
    Traceback (most recent call last):
     ...
    ValueError: Missing value for parameter 'q'.

    >>> bing_search.create_search_url(None)
    Traceback (most recent call last):
     ...
    ValueError: Missing value for parameter 'q'.

    >>> bing_search.create_search_url('bugs', start='true')
    Traceback (most recent call last):
     ...
    ValueError: Value for parameter 'offset' is not an int.

The term parameter in this example can be defined by passing the term
argument to the method. The argument is url encoded and used as the
value for the 'q' (query) parameter.

    >>> bing_search.create_search_url(terms='svg +bugs').replace('&', ' ')
    'http://launchpad.dev:.../bingcustomsearch/v7.0/search?count=20 customConfig=1234567890 mkt=en-US offset=0 q=svg+%2Bbugs'

Unicode characters are escaped correctly in the bing request URL.

    >>> bing_search.create_search_url(terms=u'Carlos Perell\xf3 Mar\xedn')
    'http://launchpad.dev:.../...offset=0&q=Carlos+Perell%C3%B3+Mar%C3%ADn'

The start parameter can be changed by passing a start int argument.

    >>> bing_search.create_search_url(terms='svg +bugs', start=20)
    'http://launchpad.dev:.../...offset=20&q=svg+%2Bbugs'


Bing Search response parsing
============================

The BingSearchService's _parse_bing_response() expects a JSON response to
create the PageMatch and PageMatches objects. An error is raised when
the JSON document cannot be parsed into objects.

The PageMatches's total attribute comes from the `webPages.totalEstimatedMatches`
JSON element. When it cannot be found and the value cast to an int,
an error is raised. If Bing were to redefine the meaning of the
element to use a '~' to indicate an approximate total, an error would
be raised.

    >>> from os import path

    >>> base_path = path.normpath(path.join(
    ...         path.dirname(__file__), '..', 'tests', 'data'))
    >>> json_file_name = path.join(
    ...     base_path, 'bingsearchservice-incompatible-matches.json')
    >>> with open(json_file_name, 'r') as json_file:
    ...     data = json_file.read()
    >>> print data
    {...
        "totalEstimatedMatches": "~25"...

    >>> bing_search._parse_bing_response(data)
    Traceback (most recent call last):
     ...
    SiteSearchResponseError: Could not get the total from the
                           Bing JSON response.

On the other hand, if the total is ever less than zero (see bug 683115),
this is expected: we simply return a total of 0.

    >>> json_file_name = path.join(
    ...     base_path, 'bingsearchservice-negative-total.json')
    >>> with open(json_file_name, 'r') as json_file:
    ...     data = json_file.read()
    >>> print data
    {...
        "totalEstimatedMatches": -25...

    >>> bing_search._parse_bing_response(data).total
    0

A PageMatch requires a title, url, and a summary. If those elements cannot
be found, a PageMatch cannot be made. A missing title ('name') indicates
a bad page on Launchpad, so it is ignored. In this example, the first match
is missing a title, so only the second page is present in the PageMatches.

    >>> json_file_name = path.join(
    ...     base_path, 'bingsearchservice-missing-title.json')
    >>> with open(json_file_name, 'r') as json_file:
    ...     data = json_file.read()
    >>> page_matches = bing_search._parse_bing_response(data)
    >>> len(page_matches)
    1
    >>> page_matches[0].title
    u'GCleaner in Launchpad'
    >>> page_matches[0].url
    'http://launchpad.dev/gcleaner'

When a match is missing a summary ('snippet'), the match is skipped because
there is no information about why it matched. This appears to relate to
pages that are in the index, but should be removed. In this example
taken from real data, the links are to the same page on different
vhosts. The edge vhost has no summary, so it is skipped.

    >>> json_file_name = path.join(
    ...     base_path, 'bingsearchservice-missing-summary.json')
    >>> with open(json_file_name, 'r') as json_file:
    ...     data = json_file.read()
    >>> page_matches = bing_search._parse_bing_response(data)
    >>> len(page_matches)
    1
    >>> page_matches[0].title
    u'BugExpiry - Launchpad Help'
    >>> page_matches[0].url
    'https://help.launchpad.net/BugExpiry'

When the URL ('url') cannot be found the match is skipped. There are no
examples of this. We do not want this hypothetical situation to give
users a bad experience.

    >>> json_file_name = path.join(
    ...     base_path, 'bingsearchservice-missing-url.json')
    >>> with open(json_file_name, 'r') as json_file:
    ...     data = json_file.read()
    >>> page_matches = bing_search._parse_bing_response(data)
    >>> len(page_matches)
    1
    >>> page_matches[0].title
    u'LongoMatch in Launchpad'
    >>> page_matches[0].url
    'http://launchpad.dev/longomatch'

If no matches are found in the response, and there are 20 or fewer results,
an Empty PageMatches is returned. This happens when the results are missing
titles and summaries. This is not considered to be a problem because the
small number implies that Bing did a poor job of indexing pages or indexed
the wrong Launchpad server. In this example, there is only one match, but
the results is missing a title so there is not enough information to make
a PageMatch.

    >>> json_file_name = path.join(
    ...     base_path, 'bingsearchservice-no-meaningful-results.json')
    >>> with open(json_file_name, 'r') as json_file:
    ...     data = json_file.read()
    >>> page_matches = bing_search._parse_bing_response(data)
    >>> len(page_matches)
    0


-------------
URL rewriting
-------------

The URL scheme used in the rewritten URL is configured in
config.bing.url_rewrite_scheme. The hostname is set in the shared
key config.vhost.mainsite.hostname.

    >>> config.vhosts.use_https
    False
    >>> page_match.url_rewrite_scheme
    'http'

    >>> config.vhost.mainsite.hostname == page_match.url_rewrite_hostname
    True
    >>> page_match.url_rewrite_hostname
    'launchpad.dev'

URLs are rewritten to map public URL to the private hostname.
The vhost name is preserved when the URL is rewritten.

    >>> page_match = PageMatch(
    ...     u'Bug #456 in Unicode title: "testrunner hates Unicode"',
    ...     'https://bugs.launchpad.net/unicode-titles/+bug/456',
    ...     u'The Zope testrunner likes ASCII more than Unicode.')
    >>> page_match.url
    'http://bugs.launchpad.dev/unicode-titles/+bug/456'

A URL's trailing slash is removed; Launchpad does not use trailing
slashes.

    >>> page_match = PageMatch(
    ...     u'Ubuntu in Launchpad',
    ...     'https://launchpad.net/ubuntu/',
    ...     u'Ubuntu also includes more software than any other operating')
    >>> page_match.url
    'http://launchpad.dev/ubuntu'

There is a list of URLs that are not rewritten configured in
config.bing.url_rewrite_exceptions. For example, help.launchpad.net
is only run in one environment, so links to that site will be preserved.

    >>> config.bing.url_rewrite_exceptions
    'help.launchpad.net'
    >>> page_match.url_rewrite_exceptions
    ['help.launchpad.net']

    >>> page_match = PageMatch(
    ...     u'OpenID',
    ...     'https://help.launchpad.net/OpenID',
    ...     u'Launchpad uses OpenID.')
    >>> page_match.url
    'https://help.launchpad.net/OpenID'


-----------------------------
Graceful handling of timeouts
-----------------------------

The external service (Bing Search Engine) may not be available, or
is not responding quickly because there are network issues. In these
cases a TimeoutError is issued.

    >>> from socket import socket
    >>> from textwrap import dedent
    >>> from lp.services.timeout import (
    ...     get_default_timeout_function, set_default_timeout_function)

    >>> server = socket()
    >>> server.bind(('127.0.0.01', 0))
    >>> server.listen(1)
    >>> config.push('timeout_data', dedent("""
    ...     [bing]
    ...     site: http://%s:%d/cse
    ...     """ % server.getsockname()))
    >>> old_timeout_function = get_default_timeout_function()
    >>> set_default_timeout_function(lambda: 0.1)
    >>> bing_search.search(terms='bug')
    Traceback (most recent call last):
     ...
    SiteSearchResponseError: ... timeout exceeded.

    # Restore the configuration and the timeout state.
    >>> timeout_data = config.pop('timeout_data')
    >>> set_default_timeout_function(old_timeout_function)

    >>> logger.cleanUp()
