= This is a FAQ =

== Creating a new FAQ ==

Even though similar questions are shown when a user creates a new
question, common questions still happens for a number of reason.
The Answer Tracker can be used to manage common answers (aka FAQ) to
which can be used to answer a particular question.

Any logged in user can use the 'This is a FAQ' action item to link
the question to an existing FAQ.

For example, No Privileges Person comes across a question about SVG
support in Firefox. That question has a well-known answer, so he clicks
on 'This is a FAQ' to answer the question:

    >>> from canonical.launchpad.helpers import backslashreplace
    >>> user_browser.open(
    ...     'http://answers.launchpad.dev/firefox/+question/2')
    >>> print backslashreplace(user_browser.title)
    Mozilla Firefox question #2:
    \u201cProblem showing the SVG demo on W3C site\u201d

    >>> user_browser.getLink('This is a FAQ').click()
    >>> print backslashreplace(user_browser.title)
    Is question #2 a FAQ?

That page lists the existing FAQs that matches the question's title.
In this case, there are no matching FAQ so the user can only choose
'No FAQ answers this question':

    # Since radio widget is a virtual widget with no explicitely
    # associated label, we must resort to name lookup.
    >>> for label in user_browser.getControl(
    ...     name='field.faq').displayOptions:
    ...     # Remove the non-breaking space from the label
    ...     print label[1:]
    No existing FAQs are relevant

Since No Privileges Person isn't an answer contact for the project nor
part of the project registrant, he doesn't have the possibility to
create a new FAQ.

    >>> user_browser.getLink('create a new FAQ')
    Traceback (most recent call last):
      ...
    LinkNotFoundError

Foo Bar (which is a site admin) does have that ability.

    >>> admin_browser.open(
    ...     'http://answers.launchpad.dev/firefox/+question/2')
    >>> admin_browser.getLink('This is a FAQ').click()
    >>> admin_browser.getLink('create a new FAQ').click()
    >>> print admin_browser.title
    Create a FAQ for Mozilla Firefox

The FAQ title and summary is pre-filled with the target question. He
edits to be more appropriate:

    >>> print admin_browser.getControl('Title').value
    Problem showing the SVG demo on W3C site
    >>> admin_browser.getControl('Title').value = 'Displaying SVG in Firefox'

    >>> print admin_browser.getControl('Summary').value
    Hi! I'm trying to learn about SVG but I can't get it to work at all in
    firefox. Maybe there is a plugin? Help! Thanks.
    
    >>> admin_browser.getControl('Summary').value = (
    ...     'Describe how to get Firefox to display SVG.')

He can also enters keywords describing the FAQ:

    >>> admin_browser.getControl('Keywords').value = (
    ...     'SVG scalable vector graphic')

There is a 'Message' field that will be used to answer the question.
It is pre-filled, but he can change its value:

    >>> print admin_browser.getControl('Message').value
    Foo Bar suggests this article as an answer to your question:
    >>> admin_browser.getControl('Message').value = 'Read the Fine Answer:'

FAQ must either contain a URL or the FAQ content.

    >>> admin_browser.getControl('Create and Link').click()
    >>> print admin_browser.url
    http://answers.launchpad.dev/firefox/+question/2/+createfaq

    >>> for message in find_tags_by_class(admin_browser.contents, 'message'):
    ...     print message.renderContents()
    There is 1 error.
    An FAQ must have either an URL or content.

So he enters the FAQ content in the text field:

    >>> admin_browser.getControl('Content').value = (
    ...     'Upgrade your browser to Firefox 2.0.')

After clicking the 'Create' button, the FAQ is created and the user is
returned to the question page.

    >>> admin_browser.getControl('Create and Link').click()
    >>> print admin_browser.url
    http://answers.launchpad.dev/firefox/+question/2

The question's status was changed to 'Answered':

    >>> details_portlet = find_portlet(
    ...     admin_browser.contents, 'Mozilla Firefox question #2')
    >>> print details_portlet.find('b', text='Status:').next.strip()
    Answered

The answer message was added to the question's discussion:

    >>> print extract_text(find_tags_by_class(
    ...     admin_browser.contents, 'boardCommentBody')[-1]).encode(
    ...     'ascii', 'backslashreplace')
    Read the Fine Answer:
    FAQ...: \u201cDisplaying SVG in Firefox\u201d.

A link to the FAQ appears in the question details portlet:

    >>> print extract_text(
    ...     details_portlet.find('b', text='Related FAQ:').findNext('a'))
    Displaying SVG in Firefox
    >>> admin_browser.getLink('Displaying SVG in Firefox').click()
    >>> print admin_browser.url
    http://answers.launchpad.dev/firefox/+faq/...
    >>> print backslashreplace(admin_browser.title)
    Mozilla Firefox FAQ #...: \u201cDisplaying SVG in Firefox\u201d



