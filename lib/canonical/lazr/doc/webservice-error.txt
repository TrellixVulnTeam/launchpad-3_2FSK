= Exceptions on the web service =

Exceptions on the LAZR web service are handled like other exceptions
occurring during zope publication: a view is looked-up and used to
return the response to the client.


== WebServiceExceptionView ==

WebServiceExcpetionView is a generic view class that can handle
exceptions during web service requests.

    >>> from canonical.lazr.rest.error import WebServiceExceptionView

That view returns the exception message as content, and sets the
result code to the one specified using the webservice_error() directive.

    >>> from canonical.lazr.rest.declarations import webservice_error
    >>> class InvalidInput(Exception):
    ...     """Client provided invalid input."""
    ...     webservice_error(400)

It also prints a traceback of the exception based on a configuration
variable or if the logged in user is a developer.

    >>> from textwrap import dedent
    >>> from canonical.config import config
    >>> from canonical.lazr.testing.webservice import FakeRequest

    >>> from zope.component import provideUtility
    >>> from zope.interface import implements
    >>> from canonical.launchpad.webapp.interfaces import ILaunchBag
    >>> class FakeLaunchBag:
    ...     implements(ILaunchBag)
    ...     developer = False
    >>> the_launchbag = FakeLaunchBag()
    >>> provideUtility(the_launchbag, ILaunchBag)

    >>> config.push('traceback_off', dedent('''
    ...     [canonical]
    ...     show_tracebacks: False'''))

    >>> def render_error_view(error, request):
    ...     """Create a WebServiceExceptionView to render the exception.
    ...
    ...     The exception is raised, because exception view can be expected
    ...     to be called from within an exception handler.
    ...     """
    ...     try:
    ...         raise error
    ...     except Exception, error:
    ...         return WebServiceExceptionView(error, request)()

In the simple case where the user is not a developer and tracebacks are
off, the view simply returns the exception message and sets the status
code to the one related to the exception.

    >>> request = FakeRequest()
    >>> render_error_view(
    ...     InvalidInput("foo@bar isn't a valid email address"), request)
    "foo@bar isn't a valid email address"
    >>> request.response.headers['Content-Type']
    'text/plain'
    >>> request.response.status
    400

When the request contains an OOPSID, it will be set in the X-Lazr-OopsId
header:

    >>> print request.response.headers.get('X-Lazr-OopsId')
    None
    >>> request = FakeRequest()
    >>> request.oopsid = 'OOPS-001'
    >>> ignored = render_error_view(InvalidInput('bad email'), request)
    >>> print request.response.headers['X-Lazr-OopsId']
    OOPS-001

A traceback dump is included in the response if the show_tracebacks
variable is on, or if the user is a developer.

    >>> the_launchbag.developer = True
    >>> print render_error_view(InvalidInput('bad email'), request)
    bad email
    <BLANKLINE>
    Traceback (most recent call last):
     ...
    InvalidInput: bad email

    >>> the_launchbag.developer = False
    >>> config.push('traceback_on', dedent('''
    ...     [canonical]
    ...     show_tracebacks: True'''))

    >>> print render_error_view(InvalidInput('bad email'), request)
    bad email
    <BLANKLINE>
    Traceback (most recent call last):
     ...
    InvalidInput: bad email


=== Internal server errors ===

Exceptions that are server-side errors are handled a little
differently. In some cases, a non-developer user may be prevented from
seeing the exception message.

    >>> class ServerError(Exception):
    ...     """Something went wrong on the server side."""
    ...     webservice_error(500)

If show_trackbacks is True, the user is going to see a full trackback
anyway, so there's no point in hiding the exception message.

    >>> print render_error_view(ServerError('DB crash'), request)
    DB crash
    <BLANKLINE>
    Traceback (most recent call last):
     ...
    ServerError: DB crash

If show_trackbacks is False, but the user is a developer, they'll see
the exception message.

    >>> ignored = config.pop('traceback_on')
    >>> config.canonical.show_tracebacks
    False
    >>> the_launchbag.developer = True
    >>> print render_error_view(ServerError('DB crash'), request)
    DB crash
    <BLANKLINE>
    Traceback (most recent call last):
     ...
    ServerError: DB crash

Here's where it's different. If show_trackbacks is False and the user
is not a developer, on an internal server error they'll see the
exception class name instead of a message.

    >>> the_launchbag.developer = False
    >>> print render_error_view(ServerError('DB crash'), request)
    ServerError

    >>> ignored = config.pop('traceback_off')


== Default exceptions ==

Standard exceptions have a view registered for them by default.

    >>> from zope.configuration import xmlconfig
    >>> zcmlcontext = xmlconfig.string("""
    ... <configure xmlns="http://namespaces.zope.org/zope">
    ...   <include package="zope.app.component" file="meta.zcml"/>
    ...   <include package="canonical.lazr.rest" />
    ... </configure>
    ... """)

    >>> from zope.component import getMultiAdapter
    >>> def render_using_default_view(error):
    ...     """Render an exception using its default 'index.html' view.
    ...     :return: response, result tuple. (The response object and
    ...         the content).
    ...     """
    ...     try:
    ...         raise error
    ...     except Exception, error:
    ...         request = FakeRequest()
    ...         view = getMultiAdapter((error, request), name="index.html")
    ...         result = view()
    ...         return request.response, result


NotFound exceptions have a 404 status code.

    >>> from zope.publisher.interfaces import NotFound
    >>> response, result = render_using_default_view(
    ...     NotFound(object(), 'name'))
    >>> response.status
    404

Unauthorized exceptions have a 401 status code.

    >>> from zope.security.interfaces import Unauthorized
    >>> response, result = render_using_default_view(Unauthorized())
    >>> response.status
    401

IRequestExpired exceptions have a 503 status code.

    >>> from canonical.launchpad.webapp.adapter import RequestExpired
    >>> response, result = render_using_default_view(RequestExpired())
    >>> response.status
    503

So have TimeoutError.

    >>> from canonical.lazr.timeout import TimeoutError
    >>> response, result = render_using_default_view(TimeoutError())
    >>> response.status
    503

Other exceptions have the 500 status code.

    >>> response, result = render_using_default_view(Exception())
    >>> response.status
    500
