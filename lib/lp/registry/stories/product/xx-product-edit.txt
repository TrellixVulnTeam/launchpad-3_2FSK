Page to edit a product - does the page load as the product owner?

    >>> browser = setupBrowser(auth='Basic test@canonical.com:test')
    >>> browser.open('http://launchpad.dev/firefox')
    >>> browser.getLink('Change details').click()
    >>> print browser.url
    http://launchpad.dev/firefox/+edit
    >>> print browser.contents
    <!DOCTYPE...
    ...<title>Change project details</title>...
    ...<h2>Change project details:</h2>...

We try to change the project related to that product. First with a invalid
project.

    >>> browser.getControl('Part of', index=0).value = 'asdasfasd'
    >>> browser.getControl(name='field.actions.change').click()
    >>> for message in find_tags_by_class(browser.contents, 'error'):
    ...     print message.renderContents()
    There is 1 error.
    <BLANKLINE>
    ...
    <div class="message">Invalid value</div>
    ...


Now we try to edit with a project that exists.

    >>> browser.getControl('Part of', index=0).value = 'gnome'
    >>> browser.getControl(name='field.actions.change').click()
    >>> print browser.url
    http://launchpad.dev/firefox


Now we test if we edited it successfully.

    >>> extract_text(find_tag_by_id(browser.contents, 'partof'))
    u'Part of: GNOME'


== Setting Development Focus ==

The Firefox product's trunk series is set as the development focus:

    >>> browser.open('http://launchpad.dev/firefox')
    >>> print browser.contents
    <!...
    ...
    ...trunk...focus of development...
    ...
    ...1.0...
    ...


We can change this to the 1.0 series through the edit form:

    >>> browser.open('http://launchpad.dev/firefox/+edit')
    >>> development_control = browser.getControl('Development focus')
    >>> development_control.getControl('firefox 1.0').click()
    >>> browser.getControl(name='field.actions.change').click()
    >>> print browser.url
    http://launchpad.dev/firefox
    >>> print browser.contents
    <!...
    ...
    ...1.0...focus of development...
    ...
    ...trunk...
    ...


== Administering Products ==

Regular users can't access the 'Administer' link.

    >>> browser.open('http://launchpad.dev/firefox')
    >>> browser.getLink('Administer')
    Traceback (most recent call last):
    ...
    LinkNotFoundError

And they can't go directly to the +admin page.

    >>> browser.open('http://launchpad.dev/firefox/+admin')
    Traceback (most recent call last):
    ...
    Unauthorized...
   
But administrators can access the page:

    >>> admin_browser.open('http://launchpad.dev/firefox')
    >>> admin_browser.getLink('Administer').click()
   
    >>> admin_browser.url
    'http://launchpad.dev/firefox/+admin'
    >>> admin_browser.title
    'Administer Mozilla Firefox in Launchpad'

And in that page they can set aliases to the product.

    >>> admin_browser.getControl('Aliases').value
    ''
    >>> admin_browser.getControl('Aliases').value = 'iceweasel'
    >>> admin_browser.getControl('Change').click()

    >>> admin_browser.getLink('Administer').click()
    >>> admin_browser.getControl('Aliases').value
    'iceweasel'


== Renaming Products ==

First a user adds a product named newproductname.

    >>> user_browser.open('http://launchpad.dev/products/+new')
    >>> user_browser.getControl('URL', index=0).value = 'newproductname'
    >>> user_browser.getControl('Name').value = 'dname'
    >>> user_browser.getControl('Title').value = 'title'
    >>> user_browser.getControl('Summary').value = 'summary'
    >>> user_browser.getControl('Continue').click()

    >>> user_browser.getControl(name='field.description').value = 'description'
    >>> user_browser.getControl(name='field.licenses').value = ['GNU_GPL_V2']
    >>> user_browser.getControl(name='field.license_info').value = 'foo'
    >>> user_browser.getControl('Complete Registration').click()
    >>> print user_browser.url
    http://launchpad.dev/newproductname

Then a product named newproductname2.

    >>> user_browser.open('http://launchpad.dev/products/+new')
    >>> user_browser.getControl('URL', index=0).value = 'newproductname2'
    >>> user_browser.getControl('Name').value = 'dname2'
    >>> user_browser.getControl('Title').value = 'title2'
    >>> user_browser.getControl('Summary').value = 'summary2'
    >>> user_browser.getControl('Continue').click()

    >>> user_browser.getControl(name='field.description').value = (
    ...     'description2')
    >>> user_browser.getControl(name='field.licenses').value = ['GNU_GPL_V2']
    >>> user_browser.getControl(name='field.license_info').value = 'foo'
    >>> user_browser.getControl('Complete Registration').click()
    >>> print user_browser.url
    http://launchpad.dev/newproductname2

Now we try to change newproductname2's name to newproductname.

    >>> admin_browser.open(
    ...     'http://launchpad.dev/newproductname2/+admin')
    >>> admin_browser.getControl('Name').value = 'newproductname'
    >>> admin_browser.getControl(name='field.actions.change').click()
    >>> for message in find_tags_by_class(admin_browser.contents, 'error'):
    ...     print message.renderContents()
    There is 1 error.
    <BLANKLINE>
    ...
    ...newproductname is already used...
    ...
    <BLANKLINE>

Now we try to change it to newproductname3.  We expect that the change will
be accepted because there is no product called newproductname3

    >>> admin_browser.getControl('Name').value = 'newproductname3'
    >>> admin_browser.getControl(name='field.actions.change').click()
    >>> print admin_browser.url
    http://launchpad.dev/newproductname3


== Changing Maintainer and Registrant ==

Administrators can change the owner of a project.

    >>> admin_browser.open(
    ...     'http://launchpad.dev/newproductname3')
    >>> print extract_text(find_main_content(admin_browser.contents))
    Details...
    Maintainer: No Privileges Person
    ...

    >>> admin_browser.open(
    ...     'http://launchpad.dev/newproductname3/+admin')
    >>> admin_browser.getControl('Maintainer').value = 'cprov'
    >>> admin_browser.getControl(name='field.actions.change').click()
    >>> print extract_text(find_main_content(admin_browser.contents))
    Details...
    Maintainer: Celso Providelo
    ...

And the registrant can also be changed, even though this should rarely happen.
The registrant is a read-only field that is set when the product is
created but we allow admins to change it to correct data.

    >>> admin_browser.open(
    ...     'http://launchpad.dev/newproductname3')
    >>> print extract_text(find_main_content(admin_browser.contents))
    Details...
    Registered ... by No Privileges Person
    ...

    >>> admin_browser.open(
    ...     'http://launchpad.dev/newproductname3/+admin')
    >>> admin_browser.getControl('Registrant').value = 'cprov'
    >>> admin_browser.getControl(name='field.actions.change').click()
    >>> print extract_text(find_main_content(admin_browser.contents))
    Details...
    Registered ... by Celso Providelo
    ...

The registrant really should only be a person, not a team, but that
constraint has to be relaxed to account for old data where we do have
teams as registrants.

    >>> admin_browser.open('http://launchpad.dev/newproductname3/+admin')
    >>> admin_browser.getControl('Registrant').value = 'registry'
    >>> admin_browser.getControl('Change').click()
    >>> print extract_text(find_main_content(admin_browser.contents))
    Details...
    Registered ... by Registry Administrators
    ...


== Registry Experts ==

Regular Joes can't edit any old project:

    >>> browser = setupBrowser(auth="Basic no-priv@canonical.com:test")
    >>> browser.open('http://launchpad.dev/firefox/+edit')
    Traceback (most recent call last):
    ...
    Unauthorized:...

But if we add them to the Registry Experts team:

    >>> admin_browser.open("http://launchpad.dev/~registry/+addmember")
    >>> admin_browser.getControl('New member').value = 'no-priv'
    >>> admin_browser.getControl('Add Member').click()

They sure can:

    >>> browser.open('http://launchpad.dev/firefox/+edit')
    >>> browser.getControl('Title').value = 'Mozilla Firefox by no-priv'
    >>> browser.getControl('Change').click()
    >>> browser.url
    'http://launchpad.dev/firefox'
    >>> browser.title
    'Mozilla Firefox by no-priv in Launchpad'

But, alas, they still can't access +admin.

    >>> browser.open('http://launchpad.dev/firefox/+admin')
    Traceback (most recent call last):
    ...
    Unauthorized...


== Display error when trying to remove all licenses ==

After a product has one or more licenses selected, it can never
again have zero licenses.

    >>> browser.open('http://launchpad.dev/newproductname/+edit')
    >>> browser.getControl(name='field.licenses').value = []
    >>> browser.getControl('Change').click()
    >>> print browser.url
    http://launchpad.dev/newproductname/+edit
    >>> print "\n".join(get_feedback_messages(browser.contents))
    There is 1 error.
    Select all licenses for this software or select
    Other/Proprietary or Other/Open Source.


== Launchpad developers can use the reviewer whiteboard ==

A member of the Launchpad Developers team can use the reviewer whiteboard on
the +review-license page for storing random notes about a project. At first the
whiteboard is empty, then we store some insightful notes in it.

    >>> login('foo.bar@canonical.com')
    >>> from zope.component import getUtility
    >>> from lp.registry.interfaces.person import IPersonSet
    >>> from canonical.launchpad.interfaces.launchpad import (
    ...     ILaunchpadCelebrities)
    >>> nopriv = getUtility(IPersonSet).getByName('no-priv')
    >>> celebs = getUtility(ILaunchpadCelebrities)
    >>> celebs.launchpad_developers.addMember(nopriv, nopriv)
    >>> logout()
    >>> commercial_browser = setupBrowser(
    ...     auth='Basic no-priv@canonical.com:test')
    >>> commercial_browser.open('http://launchpad.dev/firefox/+review-license')
    >>> commercial_browser.getControl(name='field.reviewer_whiteboard').value
    ''
    >>> commercial_browser.getControl(
    ...     name='field.reviewer_whiteboard').value = \
    ... """Registered by https://launchpad.net/kurt but orphaned 2007-11-31.
    ... Contacted the upstream maintainer (bart@foo.com) to discuss handing
    ... over this project 2007-12-04."""
    >>> commercial_browser.getControl(name='field.actions.change').click()
    >>> commercial_browser.open('http://launchpad.dev/firefox/+review-license')
    >>> commercial_browser.getControl(name='field.reviewer_whiteboard').value
    'Registered by https://launchpad.net/kurt but orphaned...'

A Commercial Admin can also see the project whiteboard on the index page.

   >>> commercial_browser.open('http://launchpad.dev/firefox')
   >>> contents = find_main_content(commercial_browser.contents)
   >>> print extract_text(contents.find(id='project-admin-whiteboard'))
   Registered by https://launchpad.net/kurt but orphaned 2007-11-31.
   Contacted the upstream maintainer (bart@foo.com) to discuss handing
   over this project 2007-12-04.
   (edit reviewer whiteboard)

Name1 is the registrant for the Firefox product, but is not a
Launchpad Admin, and so cannot see the reviewer whiteboard.

   >>> user_browser = setupBrowser(auth='Basic test@canonical.com:test')
   >>> user_browser.open('http://launchpad.dev/firefox/')
   >>> contents = find_main_content(user_browser.contents)
   >>> print contents.find(id='project-admin-whiteboard')
   None


== Deactivate a product ==

The Admins and Commercial Admins can deactivate a project.

    >>> commercial_browser.open('http://launchpad.dev/firefox/+review-license')
    >>> commercial_browser.getControl(name='field.active').value = False
    >>> commercial_browser.getControl(name='field.actions.change').click()
    >>> print commercial_browser.url
    http://launchpad.dev/firefox

The product overview page should show a notice that a product is
inactive with a link to a form to re-activate it. Admins and
Commercial Admins can still see the product, but regular users
can't.

    >>> commercial_browser.open('http://launchpad.dev/firefox/')
    >>> contents = find_main_content(commercial_browser.contents)
    >>> print contents.find(id='project-inactive')
    <p...This project is currently inactive...
    <a...href="+review-license"...
    >>> admin_browser.open('http://launchpad.dev/firefox/')
    >>> contents = find_main_content(admin_browser.contents)
    >>> print contents.find(id='project-inactive')
    <p...This project is currently inactive...
    <a...href="+review-license"...
    >>> user_browser.open('http://launchpad.dev/firefox/')
    Traceback (most recent call last):
    ...
    NotFound...

The product can then be reactivated.

    >>> commercial_browser.getLink('(change this)').click()
    >>> print commercial_browser.url
    http://launchpad.dev/firefox/+review-license
    >>> commercial_browser.getControl(name='field.active').value = True
    >>> commercial_browser.getControl(name='field.actions.change').click()
    >>> print commercial_browser.url
    http://launchpad.dev/firefox/
    >>> contents = find_main_content(commercial_browser.contents)
    >>> print contents.find(id='project-inactive')
    None

Revert name12's team membership.

    >>> login('foo.bar@canonical.com')
    >>> nopriv.leave(celebs.launchpad_developers)
    >>> logout()


== Setting the remote project ==

The remote_product field - which stores a Product's ID on the remote bug
tracker - can be set from the +edit page, too.

    >>> user_browser.open('http://launchpad.dev/thunderbird/+edit')
    >>> user_browser.getControl('Remote project').value = 'Thunderbird'
    >>> user_browser.getControl('Change').click()

    >>> user_browser.open('http://launchpad.dev/thunderbird/+edit')
    >>> print user_browser.getControl('Remote project').value
    Thunderbird
