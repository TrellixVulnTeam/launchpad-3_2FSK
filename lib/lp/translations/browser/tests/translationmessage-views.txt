= TranslationMessage View =

On this section, we are going to test the view class for an
ITranslationMessage object.

    >>> from canonical.database.sqlbase import flush_database_updates
    >>> from lp.translations.model.pofile import POFile
    >>> from lp.translations.model.translationmessage import (
    ...     TranslationMessage)
    >>> from canonical.launchpad.layers import TranslationsLayer
    >>> from canonical.launchpad.webapp import canonical_url

All the tests will be submitted as comming from Kurem, an editor for the POFile
that we are going to edit.

    >>> login('kurem@debian.cz')


== No plural forms ==

We are going to see what happens if we get an entry for a language
without the plural form information.

    >>> translationmessage = TranslationMessage.get(1)
    >>> pofile = POFile.get(1)
    >>> pofile_tlh = pofile.potemplate.getDummyPOFile(
    ...     'tlh')
    >>> potmsgset = pofile_tlh.potemplate.getPOTMsgSetByMsgIDText(
    ...     u'evolution addressbook')
    >>> current_translationmessage = (
    ...     potmsgset.getCurrentDummyTranslationMessage(
    ...         pofile_tlh.potemplate, pofile_tlh.language))
    >>> translationmessage_page_view = create_view(
    ...     current_translationmessage, "+translate", layer=TranslationsLayer)
    >>> translationmessage_page_view.initialize()

Here we can see that it's lacking that information.

    >>> print translationmessage_page_view.context.pofile.language.pluralforms
    None

And the view class detects it correctly.

    >>> translationmessage_page_view.has_plural_form_information
    False


== Basic checks ==

Now, we will use objects that we have in our database, instead of
dummy ones.

    >>> server_url = '/'.join(
    ...     [canonical_url(current_translationmessage), '+translate'])
    >>> translationmessage.setPOFile(pofile)
    >>> translationmessage_page_view = create_view(
    ...     translationmessage, "+translate", layer=TranslationsLayer,
    ...     server_url=server_url)
    >>> translationmessage_page_view.initialize()

We have the plural form information for this language.

    >>> print translationmessage_page_view.context.pofile.language.pluralforms
    2

And thus, the view class should know that it doesn't lacks the plural forms
information.

    >>> translationmessage_page_view.has_plural_form_information
    True

Also, we should get the timestamp when we started so we can detect changes
done when we started this request. We cannot check for its concrete value
or we could introduce a time bomb in the system so we check that it's not
None.

    >>> translationmessage_page_view.lock_timestamp is None
    False


== The subview: TranslationMessageView ==

For the next tests, we grab the subview which is what holds information
that pertains to the POMsgSet rendering itself:

    >>> subview = translationmessage_page_view.translationmessage_view
    >>> subview.initialize()

The request didn't get any argument, and because that, we should get the
default values for the alternative language.

    >>> subview.sec_lang is None
    True

We are at the beginning because this subview is being used for the first
item.

    >>> subview.context.potmsgset.sequence == 1
    True

It does not have a plural message

    >>> subview.plural_text is None
    True

And thus, it only has one translation.

    >>> subview.pluralform_indices
    [0]

Which is the one we wanted.

    >>> subview.getCurrentTranslation(0)
    u'libreta de direcciones de Evolution'

As we didn't submit the form, the getSubmittedTranslation method will
return None.

    >>> print subview.getSubmittedTranslation(0)
    None

If we request a plural form that is not valid, we get an AssertionError.

    >>> subview.getCurrentTranslation(1)
    Traceback (most recent call last):
    ...
    AssertionError: There is no plural form #1 for Spanish (es) language

    >>> subview.getSubmittedTranslation(1)
    Traceback (most recent call last):
    ...
    AssertionError: There is no plural form #1 for Spanish (es) language

Published translation is defined and same as the active one.

    >>> subview.getImportedTranslation(0)
    u'libreta de direcciones de Evolution'

However, if we ask for incorrect plural form, we get an AssertionError.

    >>> subview.getImportedTranslation(1)
    Traceback (most recent call last):
    ...
    AssertionError: There is no plural form #1 for Spanish (es) language


== Web presentation ==

Some characters are presented specially in the Web interface, and there are
functions to determine whether to advise translators about their presence.

We will use this helper function to simplify the test:

    # This is just an easy way to get different messages for all
    # available options to test.
    >>> from sqlobject import SQLObjectNotFound
    >>> from zope.security.proxy import removeSecurityProxy
    >>> from lp.translations.model.pomsgid import POMsgID
    >>> def changeMsgID(new_msgid):
    ...     potmsgset = removeSecurityProxy(subview.context.potmsgset)
    ...     try:
    ...         msgid = POMsgID.byMsgid(new_msgid)
    ...     except SQLObjectNotFound:
    ...         msgid = POMsgID(msgid=new_msgid)
    ...     potmsgset.msgid_singular = msgid
    ...     potmsgset._cached_singular_text = None
    ...     flush_database_updates()

First, text_has_tab() determines whether a message set contains any tabs.

    >>> subview.text_has_tab
    False

When we change the set to include a tab character, the function detects it.

    >>> changeMsgID(u'Foo\tBar')
    >>> subview.text_has_tab
    True

Similarly, text_has_newline() determines whether a message contains newlines.

    >>> changeMsgID(u'Foo Bar')
    >>> subview.text_has_newline
    False

    >>> changeMsgID(u'Foo\nBar')
    >>> subview.text_has_newline
    True

And text_has_leading_or_trailing_space() determines ... well, you can guess.

    >>> changeMsgID(u'Foo Bar')
    >>> subview.text_has_leading_or_trailing_space
    False

    >>> changeMsgID(u' Leading space')
    >>> subview.text_has_leading_or_trailing_space
    True

    >>> changeMsgID(u'  Leading space')
    >>> subview.text_has_leading_or_trailing_space
    True

    >>> changeMsgID(u'Trailing space ')
    >>> subview.text_has_leading_or_trailing_space
    True

    >>> changeMsgID(u'Trailing space  ')
    >>> subview.text_has_leading_or_trailing_space
    True

    >>> changeMsgID(u'Leading\n Space  ')
    >>> subview.text_has_leading_or_trailing_space
    True

    >>> changeMsgID(u'Trailing \nSpace  ')
    >>> subview.text_has_leading_or_trailing_space
    True

    >>> changeMsgID(u'Trailing \r\nspace')
    >>> subview.text_has_leading_or_trailing_space
    True

    >>> import transaction
    >>> transaction.commit()


== Submitting translations ==

It's time to check the submission of translations and the IPOFile statistics
update.

But first, let's see current values.

    >>> translationmessage = TranslationMessage.get(1)
    >>> pofile = translationmessage.pofile
    >>> pofile.updateStatistics()
    (7, 0, 1, 2)
    >>> pofile.currentCount()
    7
    >>> pofile.updatesCount()
    0
    >>> pofile.rosettaCount()
    1
    >>> pofile.unreviewedCount()
    2

Now we do the submit.

    >>> server_url = '/'.join(
    ...     [canonical_url(translationmessage), '+translate'])
    >>> form = {
    ...     'alt': None,
    ...     'msgset_1': None,
    ...     'msgset_1_es_translation_0_new_checkbox': True,
    ...     'msgset_1_es_translation_0_new': 'Foo',
    ...     'submit_translations': 'Save &amp; Continue'}
    >>> translationmessage_page_view = create_view(
    ...     translationmessage, "+translate", form=form,
    ...     layer=TranslationsLayer, server_url=server_url)
    >>> translationmessage_page_view.request.method = 'POST'

And when we initialise the view class, we detect that we missed the timestamp
that allow us to know whether we are working with latest submitted value or
someone updated the database while we were working on those translations.

    >>> translationmessage_page_view.initialize()
    Traceback (most recent call last):
    ...
    UnexpectedFormData: We didn't find the timestamp...

We do a new submit, but this time including a lock_timestamp field.

    >>> form = {
    ...     'lock_timestamp': '2006-11-28T13:00:00+00:00',
    ...     'alt': None,
    ...     'msgset_1': None,
    ...     'msgset_1_es_translation_0_radiobutton':
    ...         'msgset_1_es_translation_0_new',
    ...     'msgset_1_es_translation_0_new': 'Foo',
    ...     'submit_translations': 'Save &amp; Continue'}
    >>> translationmessage_page_view = create_view(
    ...     translationmessage, "+translate", form=form,
    ...     layer=TranslationsLayer, server_url=server_url)
    >>> translationmessage_page_view.request.method = 'POST'
    >>> translationmessage_page_view.initialize()
    >>> transaction.commit()

This time we didn't get any problem with the submission, and we can see that
statistics were updated accordingly.

    >>> pofile.currentCount()
    6
    >>> pofile.updatesCount()
    1
    >>> pofile.rosettaCount()
    2
    >>> pofile.unreviewedCount()
    2

Now, let's see how the system prevents a submission that has a timestamp older
than when last current translation was submitted.

    >>> from zope import datetime as zope_datetime
    >>> old_timestamp_text = '2006-11-28T12:30:00+00:00'
    >>> old_timestamp = zope_datetime.parseDatetimetz(old_timestamp_text)

We can see here that translation in pomsgset is newer than old_timestamp.

    >>> potmsgset.isTranslationNewerThan(pofile, old_timestamp)
    True

And current value

    >>> potmsgset.getCurrentTranslationMessage(
    ...     pofile.potemplate, pofile.language).translations
    [u'Foo']

We do the submission with that lock_timestamp.

    >>> server_url = '/'.join(
    ...     [canonical_url(translationmessage), '+translate'])
    >>> form = {
    ...     'lock_timestamp': old_timestamp_text,
    ...     'alt': None,
    ...     'msgset_1': None,
    ...     'msgset_1_es_translation_0_radiobutton':
    ...         'msgset_1_es_translation_0_new',
    ...     'msgset_1_es_translation_0_new': 'Foos',
    ...     'submit_translations': 'Save &amp; Continue'}
    >>> translationmessage_page_view = create_view(
    ...     translationmessage, "+translate", form=form,
    ...     layer=TranslationsLayer, server_url=server_url)
    >>> translationmessage_page_view.request.method = 'POST'
    >>> translationmessage_page_view.initialize()
    >>> for notification in (
    ...     translationmessage_page_view.request.notifications):
    ...     print notification.message
    There is an error in the translation you provided. Please correct it
    before continuing.
    >>> print translationmessage_page_view.error
    Somebody else changed this translation since you started. To avoid
    accidentally reverting work done by others, we added your translations
    as suggestions, so please review current values.
    >>> transaction.commit()

This submission is not saved because there is another modification, this
means that timestamps remain unchanged.

    >>> potmsgset.isTranslationNewerThan(pofile, old_timestamp)
    True

And active text too

    >>> potmsgset.getCurrentTranslationMessage(
    ...     pofile.potemplate, pofile.language).translations
    [u'Foo']


== Bogus translation submission ==

What would happen if we get a submit for another msgset that isn't being
considered?

    >>> server_url = '/'.join(
    ...     [canonical_url(translationmessage), '+translate'])
    >>> form = {
    ...     'lock_timestamp': '2006-11-28 13:00:00 UTC',
    ...     'alt': None,
    ...     'msgset_2': None,
    ...     'msgset_2_es_translation_0_new': 'Foo',
    ...     'msgset_2_es_translation_0_new_checkbox': True,
    ...     'submit_translations': 'Save &amp; Continue'}
    >>> translationmessage_page_view = create_view(
    ...     translationmessage, "+translate", form=form,
    ...     layer=TranslationsLayer, server_url=server_url)
    >>> translationmessage_page_view.request.method = 'POST'
    >>> translationmessage_page_view.initialize()

The list of translations parsed will be empty because the submission is
ignored:

    >>> translationmessage_page_view.form_posted_translations
    {}

And since this was a POST, we don't even build the subview:

    >>> translationmessage_page_view.translationmessage_view is None
    True


== TranslationMessageSuggestions ==

This class keeps all suggestions available for a concrete
ITranslationMessage.

    >>> from datetime import datetime
    >>> import pytz
    >>> from zope.component import getUtility
    >>> from lp.translations.browser.translationmessage import (
    ...     TranslationMessageSuggestions)
    >>> from lp.registry.interfaces.person import IPersonSet
    >>> from lp.translations.interfaces.potemplate import IPOTemplateSet

We are going to work with Evolution's evolution-2.2 template.

    >>> potemplate_set = getUtility(IPOTemplateSet)
    >>> potemplates = potemplate_set.getAllByName('evolution-2.2')
    >>> potemplate_trunk = potemplates[0]
    >>> potemplate_hoary = potemplates[1]
    >>> potemplate_trunk.title
    u'Template "evolution-2.2" in Evolution trunk'
    >>> potemplate_hoary.title
    u'Template "evolution-2.2" in Ubuntu Hoary package "evolution"'

For alternative suggestions we need two languages, the one being
translated and other one providing suggestions. We will use Japanese
as the language to get suggestions for because it has less plural forms
than the other choosen language, Spanish.

    # Japanese translation for this template doesn't exist yet in our
    # database, we need to create it first.
    >>> pofile_ja = potemplate_trunk.newPOFile('ja')
    >>> pofile_ja.language.pluralforms
    1
    >>> pofile_es = potemplate_trunk.getPOFileByLang('es')
    >>> pofile_es.language.pluralforms
    2

We are going to work with a plural form message.

    >>> potmsgset = potemplate_trunk.getPOTMsgSetByMsgIDText(
    ...     u'%d contact', u'%d contacts')
    >>> potmsgset.msgid_plural is None
    False

Also, we are going to create a new translation for the Japanese
language that will be used as the suggestion.

    >>> UTC = pytz.timezone('UTC')
    >>> carlos = getUtility(IPersonSet).getByName('carlos')
    >>> login('carlos@canonical.com')
    >>> translation_message_ja = potmsgset.updateTranslation(
    ...     pofile_ja, carlos, { 0: u'Foo %d' },
    ...     is_imported=False, lock_timestamp=datetime.now(UTC))
    >>> translation_message_ja.translations
    [u'Foo %d']

Let's get current message in Spanish.

    >>> translation_message_es = potmsgset.getCurrentTranslationMessage(
    ...     pofile_es.potemplate, pofile_es.language)

And we prepare the ITranslationMessageSuggestions object for the higher
Spanish plural form.

    >>> suggestions = TranslationMessageSuggestions(
    ...     title=u'Testing', translation=translation_message_es,
    ...     submissions=[translation_message_ja],
    ...     user_is_official_translator=True,
    ...     form_is_writeable=True,
    ...     plural_form=(pofile_es.language.pluralforms - 1))

Which produces no suggestions, because Japanese only has one form but
Spanish has two.

    >>> print suggestions.submissions
    []

However, when we use the first plural form, which exists in both
languages...

    >>> suggestions = TranslationMessageSuggestions(
    ...     title=u'Testing', translation=translation_message_es,
    ...     submissions=[translation_message_ja],
    ...     user_is_official_translator=True,
    ...     form_is_writeable=True,
    ...     plural_form=0)

... we get suggestions.

    >>> len(suggestions.submissions)
    1
    >>> submission = suggestions.submissions[0]
    >>> sorted([(attr, getattr(submission, attr))
    ...         for attr in dir(submission)
    ...         if not attr.startswith('_')])
    [('date_created', ...),
     ('id', 703),
     ('is_empty', False),
     ('is_local_to_pofile', False),
     ('language', ...),
     ('legal_warning', False),
     ('person', ...),
     ('plural_index', 0),
     ('pofile', ...),
     ('potmsgset', ...),
     ('suggestion_dismissable_class', u'msgset_15_dismissable_button'),
     ('suggestion_html_id', u'msgset_15_ja_suggestion_703_0'),
     ('suggestion_text', u'Foo <code>%d</code>'),
     ('translation_html_id', u'msgset_15_es_translation_0'),
     ('translationmessage', ...)]

Another reason why a suggestion might not have translations for all
plural forms is that it was submitted as a translation for an English
message that didn't have a plural.

Here, an identical message is added to the two Evolution templates: the
"trunk" one and the one in Ubuntu Hoary.  But one of the English strings
is in a single form only, whereas the other has a singular and a plural.

    >>> singular_id = 'This message has %d form.'
    >>> plural_id = 'This message has %d forms.'
    >>> pofile_simple = potemplate_trunk.getPOFileByLang('es')
    >>> pofile_plural = potemplate_hoary.getPOFileByLang('es')
    >>> potmsgset_simple = potemplate_trunk.createMessageSetFromText(
    ...     singular_id, None)
    >>> potmsgset_plural = potemplate_hoary.createMessageSetFromText(
    ...     singular_id, plural_id)

Carlos translates both.  The single-form one is simple; for the other he
provides a complete translation including both the singular and the
plural form.

    >>> translation_message_simple = potmsgset_simple.updateTranslation(
    ...     pofile_simple, carlos, { 0: u'%d forma' },
    ...     is_imported=False, lock_timestamp=datetime.now(UTC))
    >>> translation_message_plural = potmsgset_plural.updateTranslation(
    ...     pofile_plural, carlos, { 0: u'%d forma', 1: u'%d formas' },
    ...     is_imported=False, lock_timestamp=datetime.now(UTC))

The single-form translation shows up as a suggestion for the singular
translation of the two-form message.

    >>> suggestions = TranslationMessageSuggestions(
    ...     title=u'Testing', translation=translation_message_plural,
    ...     submissions=[translation_message_simple],
    ...     user_is_official_translator=True,
    ...     form_is_writeable=True,
    ...     plural_form=0)
    >>> len(suggestions.submissions)
    1

For the plural translation of the same message, however, that
translation provides no text and so is ignored.

    >>> suggestions = TranslationMessageSuggestions(
    ...     title=u'Testing', translation=translation_message_plural,
    ...     submissions=[translation_message_simple],
    ...     user_is_official_translator=True,
    ...     form_is_writeable=True,
    ...     plural_form=1)
    >>> len(suggestions.submissions)
    0


== About ==

The translations about page presents the launchpad-users mailing list as the
place to get more information and help.

    >>> from canonical.launchpad.interfaces import IRosettaApplication
    >>> application = getUtility(IRosettaApplication)
    >>> view = create_view(application, '+about', layer=TranslationsLayer)
    >>> print view.launchpad_users_team
    http://launchpad.dev/~launchpad-users


== Sequence number of new shared POTMsgSets ==

Newly added shared POTMsgSets don't have their sequence field set, but
they do have sequence number when being displayed with translation
message.

    >>> pofile = factory.makePOFile('sr')
    >>> potemplate = pofile.potemplate
    >>> potmsgset = factory.makePOTMsgSet(potemplate, sequence=1)
    >>> potmsgset.sequence
    1
    >>> potmsgset.getSequence(potemplate)
    1
    >>> translationmessage = factory.makeTranslationMessage(
    ...     potmsgset=potmsgset, translations = [u"some translation"])
    >>> translationmessage.setPOFile(pofile)
    >>> server_url = '/'.join(
    ...     [canonical_url(translationmessage), '+translate'])
    >>> translationmessage_page_view = create_view(
    ...     translationmessage, "+translate", layer=TranslationsLayer,
    ...     server_url=server_url)
    >>> translationmessage_page_view.initialize()
    >>> subview = translationmessage_page_view.translationmessage_view
    >>> subview.initialize()
    >>> subview.sequence
    1

== Ordering with unset potemplate values ==

Fix for bug #371560: can be removed after message sharing cleanup is done.
Code still uses potmsgset.potemplate when getting a sequence number, and
in special case where one POTMsgSet has potemplate set (i.e. it has been
there before message sharing work landed) and has a lower sequence number,
and another where potemplate is not set and with a larger sequence number,
where these appear on the same page we hit an assertion about bad sequence
number ordering.

    >>> pofile = factory.makePOFile('sr')
    >>> potemplate = pofile.potemplate

    >>> potmsgset_with_potemplate = (
    ...     factory.makePOTMsgSet(potemplate, sequence=1))
    >>> removeSecurityProxy(potmsgset_with_potemplate).potemplate = potemplate
    >>> potmsgset_with_potemplate.getSequence(potemplate)
    1

    >>> potmsgset_with_no_potemplate = (
    ...     factory.makePOTMsgSet(potemplate, sequence=2))
    >>> print potmsgset_with_no_potemplate.potemplate
    None
    >>> potmsgset_with_no_potemplate.getSequence(potemplate)
    2

    # If the view internally gets a sequence using potmsgset.potemplate,
    # which is None, we'll get a sequence of zero, which should come before
    # sequence of 1 for the previous POTMsgSet.
    >>> potmsgset_with_no_potemplate.getSequence(
    ...     potmsgset_with_no_potemplate.potemplate)
    0

    >>> server_url = '/'.join(
    ...     [canonical_url(pofile), '+translate'])
    >>> pofile_view = create_view(
    ...     pofile, "+translate", layer=TranslationsLayer,
    ...     server_url=server_url)
    >>> pofile_view.initialize()

