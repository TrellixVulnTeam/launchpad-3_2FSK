= The SinglePopupWidget =

There's a widget, SinglePopupWidget, for selecting a single value from a
huge vocabulary. It provides a simple text input line, and a popup
window, where you can search for valid values.

    >>> from canonical.widgets.popup import SinglePopupWidget

In order to show how it works, we need a field, which uses a huge
vocabulary. We also need to bind it to a context for things to work:

    >>> from canonical.launchpad.interfaces import (
    ...     ITeamReassignment, IPersonSet)
    >>> owner_field = ITeamReassignment['owner']
    >>> admins = getUtility(IPersonSet).getByName('admins')
    >>> owner_field = owner_field.bind(admins)

We also need a request before we can initialise the widget:

    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest
    >>> popup_widget = SinglePopupWidget(
    ...     owner_field,  owner_field.vocabulary, LaunchpadTestRequest())
    >>> print popup_widget()
    <input type="text" value="" id="field.owner"
           name="field.owner" size="20"
           maxlength="" 
           onKeyPress="" style=""
           class="" />
    <BLANKLINE>
    (<a href="...@@popup-window?vocabulary=ValidTeamOwner...
    <BLANKLINE>
    <iframe style="display: none" id="popup_iframe_field.owner"...
    <BLANKLINE>

Now, since we didn't pass a value to the form, it has no input, and
getInputValue() fails:

    >>> popup_widget.hasInput()
    False
    >>> popup_widget.getInputValue()
    Traceback (most recent call last):
    ...
    MissingInputError: ('field.owner', u'Owner', None)

Let's supply a nonexistent value to the form:

    >>> form = {'field.owner': u'non-existant-value'}
    >>> popup_widget = SinglePopupWidget(
    ...     owner_field,  owner_field.vocabulary,
    ...     LaunchpadTestRequest(form=form))

Now hasInput() returns that there is a input value, but getInputValue()
still fails:

    >>> popup_widget.hasInput()
    True
    >>> popup_widget.getInputValue()
    Traceback (most recent call last):
    ...
    ConversionError: ('Invalid value',
        token u'non-existant-value' not found in vocabulary)

If we supply a token that is in the vocabulary, everything works as
expected:

    >>> form = {'field.owner': u'shipit-admins'}
    >>> popup_widget = SinglePopupWidget(
    ...     owner_field,  owner_field.vocabulary,
    ...     LaunchpadTestRequest(form=form))
    >>> popup_widget.hasInput()
    True
    >>> shipit_admins = popup_widget.getInputValue()
    >>> shipit_admins.displayname
    u'ShipIt Administrators'

If we submit a string that doesn't match an exact token, but the
vocabulary search returns a few matches, we don't have a valid input:

    >>> form = {'field.owner': u'shipit'}
    >>> popup_widget = SinglePopupWidget(
    ...     owner_field,  owner_field.vocabulary,
    ...     LaunchpadTestRequest(form=form))
    >>> popup_widget.hasInput()
    True
    >>> shipit_admins = popup_widget.getInputValue()
    Traceback (most recent call last):
    ...
    ConversionError: ('Invalid value',
        token u'shipit' not found in vocabulary)


== The SearchForUpstreamPopupWidget ==

This is a specialized version of SinglePopupWidget whose 'Choose' link opens
a different page (popup-search-upstream) and is used when searching for an
upstream that is also affected by a given bug. The page linked from the
widget includes a link which allows the user to register the upstream if
it doesn't exist.

    >>> from canonical.widgets import SearchForUpstreamPopupWidget
    >>> from canonical.launchpad.interfaces import (
    ...     IAddBugTaskForm, IBugSet)
    >>> product_field = IAddBugTaskForm['product']
    >>> bug = getUtility(IBugSet).get(1)
    >>> product_field = product_field.bind(bug)

    >>> popup_widget = SearchForUpstreamPopupWidget(
    ...     product_field,  product_field.vocabulary, LaunchpadTestRequest())
    >>> print popup_widget()
    <input type="text" value="" id="field.product"...
    <BLANKLINE>
    (<a href="javascript:popup_window('@@popup-search-upstream...
    <BLANKLINE>
    ...
