Person Pages
============

In every person page, the 'Bugs' facet has a series of bug listings for
that person. These pages provide simple and advanced search forms.

    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> name16 = getUtility(IPersonSet).get(16)

Let's define a helper function to make it easier to construct a view.

    >>> from zope.component import getView
    >>> from zope.publisher.browser import TestRequest
    >>> def create_view(context, name, form=None):
    ...     view = getView(context, name, TestRequest(form=form))
    ...     view.initialize()
    ...     return view

Assigned bugs
-------------

All bug tasks assigned to this person.

By default, only bugtasks with any of the statuses listed in
canonical.launchpad.interfaces.UNRESOLVED_BUGTASK_STATUSES are included:

    >>> assigned_bugtasks_view = create_view(name16, '+assignedbugs')
    >>> assigned_bugtasks = list(assigned_bugtasks_view.search().batch)
    >>> sorted([(bugtask.bug.id, bugtask.status.name)
    ...         for bugtask in assigned_bugtasks])
    [(7, 'UNCONFIRMED')]

Using the advanced form we can query for closed bugs.

    >>> form = {
    ...     'orderby': u'-priority', 
    ...     'advanced': 1,
    ...     'search': 'Search',
    ...     'field.status': 'Fix Released'}

    >>> closed_bugtasks_view = create_view(name16, '+assignedbugs', form)
    >>> closed_bugtasks = list(closed_bugtasks_view.search().batch)
    >>> [(bugtask.bug.id, bugtask.status.name)
    ...     for bugtask in closed_bugtasks]
    [(8, 'FIXRELEASED')]

Reported bugs
-------------

All bug tasks reported by someone. By default we'll get assigned and
unassigned bug tasks.

    >>> reported_bugtasks_view = create_view(name16, '+reportedbugs')
    >>> reported_bugtasks = list(reported_bugtasks_view.search().batch)
    >>> sorted([(bugtask.bug.id, bugtask.status.name,
    ...          getattr(bugtask.assignee, 'name', None))
    ...         for bugtask in reported_bugtasks])
    [(1, 'UNCONFIRMED', None),
     (2, 'UNCONFIRMED', None),
     (3, 'UNCONFIRMED', None),
     (7, 'UNCONFIRMED', u'name16'),
     (9, 'CONFIRMED', None),
     (10, 'UNCONFIRMED', None)]

But the advanced search allows us to query only the bug tasks that aren't
assigned.

    >>> form = {
    ...     'orderby': u'-priority', 'assignee_option': 'none',
    ...     'field.assignee': '', 'advanced': 1,
    ...     'search': 'Search'}
    >>> reported_bugtasks_view = create_view(name16, '+reportedbugs', form)
    >>> reported_bugtasks = sorted(
    ...     reported_bugtasks_view.search().batch,
    ...     key=lambda bugtask: (bugtask.bug.id, bugtask.id))
    >>> [(bugtask.bug.id, bugtask.status.name,
    ...   getattr(bugtask.assignee, 'name', None))
    ... for bugtask in reported_bugtasks]
    [(1, 'UNCONFIRMED', None),
     (2, 'UNCONFIRMED', None),
     (3, 'UNCONFIRMED', None),
     (9, 'CONFIRMED', None),
     (10, 'UNCONFIRMED', None)]

Using the advanced form we can also query for closed bugs reported by someone.
Let's first close a bug setting its status to 'Rejected'.

    >>> from canonical.launchpad.ftests import login
    >>> from canonical.database.sqlbase import flush_database_updates

    >>> login("foo.bar@canonical.com")

    >>> from canonical.lp.dbschema import BugTaskStatus
    >>> bug_task = reported_bugtasks[0]
    >>> bug_task.bug.id
    1
    >>> bug_task.status = BugTaskStatus.REJECTED
    >>> flush_database_updates()

And now we query for it.

    >>> form = {
    ...     'orderby': u'-priority', 
    ...     'assignee_option': 'none',
    ...     'field.assignee': '', 
    ...     'advanced': 1,
    ...     'field.status': 'Rejected',
    ...     'search': 'Search bugs reported by Foo Bar'}
    >>> closed_reported_bugtasks_view = create_view(
    ...     name16, '+reportedbugs', form)
    >>> closed_reported_bugtasks = list(
    ...     closed_reported_bugtasks_view.search().batch)
    >>> sorted([(bugtask.bug.id, bugtask.status.name,
    ...          getattr(bugtask.assignee, 'name', None))
    ...         for bugtask in closed_reported_bugtasks])
    [(1, 'REJECTED', None)]


Subscribed bugs
---------------

All bug tasks someone is subscribed to. By default we'll get bug tasks
with any importance.

    >>> name12 = getUtility(IPersonSet).get(12)
    >>> subscribed_bugtasks_view = create_view(name12, '+subscribedbugs')
    >>> subscribed_bugtasks = list(subscribed_bugtasks_view.search().batch)
    >>> sorted([(bugtask.bug.id, bugtask.status.name, bugtask.importance.name)
    ...         for bugtask in subscribed_bugtasks])
    [(1, 'CONFIRMED', 'MINOR'),
     (1, 'UNCONFIRMED', 'MINOR'),
     (4, 'UNCONFIRMED', 'MEDIUM'),
     (9, 'CONFIRMED', 'MEDIUM')]

Using the advanced form we can query for closed bugs someone is subscribed to. 

    >>> form = {
    ...     'orderby': u'-priority', 
    ...     'assignee_option': 'any',
    ...     'field.assignee': '', 
    ...     'advanced': 1,
    ...     'field.status': 'Fix Released',
    ...     'search': "Search bugs Sample Person is CC'd to"}
    >>> closed_subscribed_bugtasks_view = create_view(
    ...     name12, '+subscribedbugs', form)
    >>> closed_subscribed_bugtasks = list(
    ...     closed_subscribed_bugtasks_view.search().batch)
    >>> sorted([(bugtask.bug.id, bugtask.status.name,
    ...          getattr(bugtask.assignee, 'name', None))
    ...         for bugtask in closed_subscribed_bugtasks])
    [(8, 'FIXRELEASED', u'name16')]

Bugs for Bug Contact
--------------------

Malone can generate bug reports for packages on which a user is a bug
contact. The Person context is used only to get a list of packages that
the user has chosen to subscribe to, but any package could be searched
from these reports, simply by hacking the URL.

    >>> form = {
    ...     'search': "Search", 'field.distribution': "debian",
    ...     'field.sourcepackagename': "mozilla-firefox"}

    >>> packagebugs_search_view = create_view(
    ...     name12, name="+packagebugs-search", form=form)

Let's look at some example searches:

No search criteria (ordered by importance):

    >>> bugtask_batch_navigator = packagebugs_search_view.search()
    >>> [(bugtask.bug.id, bugtask.importance.name)
    ...  for bugtask in bugtask_batch_navigator.batch]
    [(3, 'MEDIUM'),
     (1, 'MINOR'),
     (2, 'MINOR')]

Simple keyword searching:

    >>> form = {
    ...     'search': "Search",
    ...     'field.distribution': "debian",
    ...     'field.sourcepackagename': "mozilla-firefox",
    ...     'field.searchtext': "trash"}

    >>> packagebugs_search_view = create_view(
    ...     name12, name="+packagebugs-search", form=form)

    >>> bugtask_batch_navigator = packagebugs_search_view.search()
    >>> [bugtask.bug.id for bugtask in bugtask_batch_navigator.batch]
    [2]

Searching for all open bugs on Debian mozilla-firefox:

    >>> from canonical.launchpad.interfaces.bugtask import (
    ...     UNRESOLVED_BUGTASK_STATUSES)

    >>> form = {
    ...     'search': "Search",
    ...     'field.distribution': "debian",
    ...     'field.sourcepackagename': "mozilla-firefox",
    ...     'field.status': [s.title for s in UNRESOLVED_BUGTASK_STATUSES]}

    >>> packagebugs_search_view = create_view(
    ...     name12, name="+packagebugs-search", form=form)

    >>> bugtask_batch_navigator = packagebugs_search_view.search()
    >>> [(bugtask.bug.id, bugtask.importance.name)
    ...  for bugtask in bugtask_batch_navigator.batch]
    [(3, 'MEDIUM'),
     (1, 'MINOR'),
     (2, 'MINOR')]

There are helper methods to calculate links to the Open, Critical,
Unassigned, and In Progress bug lists.

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.interfaces import IDistributionSet

    >>> ubuntu = getUtility(IDistributionSet).getByName("ubuntu")
    >>> ubuntu_mozilla_firefox = ubuntu.getSourcePackage("mozilla-firefox")

    >>> packagebugs_search_view.getOpenBugsURL(ubuntu_mozilla_firefox)
    u'.../people/name12/+packagebugs-search?field.distribution=ubuntu&field.sourcepackagename=mozilla-firefox&field.status=Unconfirmed&field.status=Confirmed&field.status=In+Progress&field.status=Needs+Info&field.status=Fix+Committed&search=Search'

    >>> packagebugs_search_view.getCriticalBugsURL(ubuntu_mozilla_firefox)
    u'.../people/name12/+packagebugs-search?field.distribution=ubuntu&field.importance=Critical&field.sourcepackagename=mozilla-firefox&field.status=Unconfirmed&field.status=Confirmed&field.status=In+Progress&field.status=Needs+Info&field.status=Fix+Committed&search=Search'

    >>> packagebugs_search_view.getUnassignedBugsURL(ubuntu_mozilla_firefox)
    u'.../people/name12/+packagebugs-search?field.distribution=ubuntu&field.sourcepackagename=mozilla-firefox&field.status=Unconfirmed&field.status=Confirmed&field.status=In+Progress&field.status=Needs+Info&field.status=Fix+Committed&field.unassigned=on&search=Search'

    >>> packagebugs_search_view.getInProgressBugsURL(ubuntu_mozilla_firefox)
    u'.../people/name12/+packagebugs-search?field.distribution=ubuntu&field.sourcepackagename=mozilla-firefox&field.status=In+Progress&search=Search'

A helper method is used to calculate the package bug search URL for the
"My other packages" portlet:

    >>> packagebugs_search_view.getBugContactPackageSearchURL(
    ...     ubuntu_mozilla_firefox)
    u'.../people/name12/+packagebugs-search?field.distribution=ubuntu&field.sourcepackagename=mozilla-firefox&search=Search'

There's also a getBugContactPackageAdvancedSearchURL method. If called
without a package argument, it defaults to the "current package", found
by looking in the request.

    >>> packagebugs_search_view.getBugContactPackageAdvancedSearchURL()
    u'.../people/name12/+packagebugs-advanced-search?field.distribution=debian&field.sourcepackagename=mozilla-firefox&search=Search'

Finally, there is a helper method that returns a list of dicts used to
render the overview report.

    >>> packagebugs_search_view = create_view(
    ...     name16, name="+packagebugs", form=form)

    >>> package_bug_counts = packagebugs_search_view.getPackageBugCounts()
    >>> len(package_bug_counts)
    2
    >>> ubuntu_firefox_bugcounts = package_bug_counts[0]

    >>> ubuntu_firefox_bugcounts['package_name']
    u'mozilla-firefox in ubuntu'
    >>> ubuntu_firefox_bugcounts['package_search_url']
    u'.../people/name16/+packagebugs-search?field.distribution=ubuntu&field.sourcepackagename=mozilla-firefox&search=Search'

    >>> ubuntu_firefox_bugcounts['open_bugs_count']
    0
    >>> ubuntu_firefox_bugcounts['critical_bugs_count']
    0
    >>> ubuntu_firefox_bugcounts['unassigned_bugs_count']
    1
    >>> ubuntu_firefox_bugcounts['inprogress_bugs_count']
    0

    >>> ubuntu_firefox_bugcounts['open_bugs_url']
    u'.../people/name16/+packagebugs-search?field.distribution=ubuntu&field.sourcepackagename=mozilla-firefox&field.status=Unconfirmed&field.status=Confirmed&field.status=In+Progress&field.status=Needs+Info&field.status=Fix+Committed&search=Search'
    >>> ubuntu_firefox_bugcounts['critical_bugs_url']
    u'.../people/name16/+packagebugs-search?field.distribution=ubuntu&field.importance=Critical&field.sourcepackagename=mozilla-firefox&field.status=Unconfirmed&field.status=Confirmed&field.status=In+Progress&field.status=Needs+Info&field.status=Fix+Committed&search=Search'
    >>> ubuntu_firefox_bugcounts['unassigned_bugs_url']
    u'.../people/name16/+packagebugs-search?field.distribution=ubuntu&field.sourcepackagename=mozilla-firefox&field.status=Unconfirmed&field.status=Confirmed&field.status=In+Progress&field.status=Needs+Info&field.status=Fix+Committed&field.unassigned=on&search=Search'
    >>> ubuntu_firefox_bugcounts['inprogress_bugs_url']
    u'.../people/name16/+packagebugs-search?field.distribution=ubuntu&field.sourcepackagename=mozilla-firefox&field.status=In+Progress&search=Search'
