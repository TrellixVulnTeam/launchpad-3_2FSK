Merging
=======

For many reasons (i.e. a gina run) we could have duplicated accounts in
Launchpad. Once a duplicated account is identified, we need to allow the user
to merge two accounts into a single one, because both represent the same
person and they're there just because each of those was created using a
different email address.

    >>> from zope.component import getUtility
    >>> from canonical.database.sqlbase import sqlvalues, flush_database_updates
    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> from canonical.launchpad.ftests import login, ANONYMOUS

    >>> login(ANONYMOUS)
    >>> personset = getUtility(IPersonSet)
    >>> name16 = personset.getByName('name16')
    >>> sample = personset.getByName('name12')
    >>> admins = personset.getByName('admins')
    >>> marilize = personset.getByName('marilize')


Sanity checks
-------------

We can't merge teams

    >>> personset.merge(admins, name16)
    Traceback (most recent call last):
    ...
    TypeError: ...

    >>> personset.merge(name16, admins)
    Traceback (most recent call last):
    ...
    TypeError: ...

Nor can we merge an account that still has email addresses attached to it

    >>> personset.merge(marilize, sample)
    Traceback (most recent call last):
    ...
    ValueError: ...


Preparing test person for the merge
-----------------------------------

Merging people involves updating the merged person relationships. Let's
put the person we will merge into some of those.

    (To assign marilize as the ubuntu team owner, we must log on as the
    previous owner.)
    >>> login('mark@hbd.com')

    >>> ubuntu_team = personset.getByName('ubuntu-team')
    >>> ubuntu_team.teamowner = marilize

    >>> ubuntu_translators = personset.getByName('ubuntu-translators')
    >>> ubuntu_translators.addMember(marilize, marilize)
    >>> rosetta_admins = personset.getByName('rosetta-admins')
    >>> rosetta_admins.addMember(marilize, marilize)

Karma gets reassigned to the person we merge into. Let's assign karma to
Marilize and save it for later comparison.

    >>> from canonical.launchpad.interfaces import IProductSet
    >>> firefox = getUtility(IProductSet).getByName('firefox')
    >>> marilize_karma = marilize.assignKarma('bugfixed', product=firefox)
    >>> marilize_karma.id, marilize_karma.person.name
    (71L, u'marilize')
    >>> sampleperson_old_karma = sample.karma

Branches whose owner is being merged are uniquified by appending '-N' where N
is a unique integer. We create "peoplemerge" and "peoplemerge-1" branches owned
by marilize, and a "peoplemerge" and "peoplemerge-1" branches owned by 'Sample
Person' to test that branch name uniquifying works.

Branches with smaller IDs will be processed first, so we create "peoplemerge"
first, and it will be renamed "peoplemerge-2". The extant "peoplemerge-1"
branch will be renamed "peoplemerge-1-1". The "peoplemerge-0" branch will not
be renamed since it will not conflict.

That is not a particularly sensible way of renaming branches, but it is simple
to implement, and it be should extremely rare for the case to occur.

    >>> from canonical.launchpad.interfaces import IBranchSet
    >>> branchset = getUtility(IBranchSet)
    >>> peoplemerge = branchset.new(
    ...     'peoplemerge', sample, sample, None, None)
    >>> peoplemerge1 = branchset.new(
    ...     'peoplemerge-1', sample, sample, None, None)
    >>> peoplemerge0 = branchset.new(
    ...     'peoplemerge-0', marilize, marilize, None, None)
    >>> peoplemerge2 = branchset.new(
    ...     'peoplemerge', marilize, marilize, None, None)
    >>> peoplemerge11 = branchset.new(
    ...     'peoplemerge-1', marilize, marilize, None, None)

'Sample Person' is a deactivated member of the 'Ubuntu Translators' team,
while marilize is an active member. After the merge, 'Sample Person' will be an
active member of that team.

    >>> sample in ubuntu_translators.inactivemembers
    True
    >>> marilize in ubuntu_translators.activemembers
    True


Do the merge!
-------------

    (Now we remove the only email address marilize had, so that we can merge
    it)
    >>> marilize.preferredemail.destroySelf()
    >>> flush_database_updates()

    >>> personset.merge(marilize, sample)


Merge results
-------------

Check that 'Sample Person' has indeed become an active member of 'Ubuntu
Translators'

    >>> sample in ubuntu_translators.activemembers
    True
    >>> sample.inTeam(ubuntu_translators)
    True

Check that the branches have been renamed properly.

    >>> sample.getBranch(None, 'peoplemerge') == peoplemerge
    True
    >>> sample.getBranch(None, 'peoplemerge-0') == peoplemerge0
    True
    >>> sample.getBranch(None, 'peoplemerge-1') == peoplemerge1
    True
    >>> sample.getBranch(None, 'peoplemerge-2') == peoplemerge2
    True
    >>> sample.getBranch(None, 'peoplemerge-1-1') == peoplemerge11
    True

The Karma that was previously assigned to marilize is now assigned to name12
(Sample Person).

    >>> from canonical.database.sqlbase import flush_database_caches
    >>> flush_database_caches()
    >>> marilize_karma.id, marilize_karma.person.name
    (71L, u'name12')

Note that we don't bother migrating karma caches - it will just be reset next
time the caches are rebuilt.

    >>> sample.karma == sampleperson_old_karma
    True

A merged account gets a -merged suffix on its name.

    >>> from canonical.launchpad.database import Person
    >>> cur = Person._connection._connection.cursor()

    >>> cur.execute("SELECT id FROM Person WHERE name='marilize-merged'")
    >>> cur.fetchone()[0] == marilize.id
    True

    >>> cur.execute("select person, team, status from teammembership where "
    ...             "person = %s and team = %s"
    ...             % sqlvalues(sample.id, rosetta_admins.id))
    >>> cur.fetchone()
    [12, 30, 2]

    >>> sample.inTeam(rosetta_admins)
    True

    >>> cur.execute("select p1.name from person as p1, person as p2 where "
    ...             "p1.id = p2.teamowner and p2.name = 'ubuntu-team'")
    >>> cur.fetchone()[0]
    u'name12'

The account that has been merged is flagged. We can use this to eliminate
merged accounts from lists etc.

    >>> cur.execute("SELECT merged FROM Person WHERE name='marilize-merged'")
    >>> cur.fetchone()[0]
    12

    >>> cur.execute("SELECT merged FROM Person WHERE name='name12'")
    >>> cur.fetchone()[0] is None
    True

