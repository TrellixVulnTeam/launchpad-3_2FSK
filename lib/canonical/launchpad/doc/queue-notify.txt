 = Queue Notify =

DistroReleaseQueue has a notify() method to send emails, it is tested here.

We need to be logged into the security model in order to get any further

  >>> login('foo.bar@canonical.com')

Set up a distro release "hoary" that we can upload to:

  >>> from canonical.launchpad.interfaces import IDistributionSet
  >>> from canonical.lp.dbschema import DistributionReleaseStatus
  >>> ubuntu = getUtility(IDistributionSet)['ubuntu']
  >>> hoary = ubuntu['hoary']
  >>> hoary.releasestatus = DistributionReleaseStatus.DEVELOPMENT

Create a ChangesFile object that we can use as an upload:

  >>> from canonical.archiveuploader.tests import (
  ...    datadir, getPolicy, mock_logger, mock_logger_quiet)
  >>> from canonical.archiveuploader.changesfile import ChangesFile
  >>> sync_policy = getPolicy(
  ...     name='sync', distro='ubuntu', distrorelease='hoary')
  >>> changesfilepath = datadir('suite/bar_1.0-1/bar_1.0-1_source.changes')
  >>> changes = ChangesFile(changesfilepath, sync_policy, mock_logger)
  DEBUG: Changes file can be unsigned.

# XXX Trying to set ChangesFile up so it has a valid spr ...
#  >>> for error in changes.processAddresses():
#  ...     if isinstance(error, UploadError): print error
#  >>> for error in changes.processFiles():
#  ...     if isinstance(error, UploadError): print error

Get the distrorelease to make us a new distroreleasequeue from the changesfile:

  >>> drq = hoary.createQueueEntry(sync_policy.pocket,
  ...     changes.filename, changes.filecontents, changes.signingkey)

# XXX ... but it fails because it doesn't seem set up properly. Need help.
#  >>> spr = changes.dsc.storeInDatabase()
#  >>> drq.addSource(spr)

Now, we can test the notify() method.  It should generate one email here:

  >>> changesfile = open(changesfilepath,'r')
  >>> drq.notify("sender@canonical.com", ["recipient@canonical.com"],
  ...     "announcelist@canonical.com", changesfile, logger=mock_logger)
  DEBUG: Sent a mail:
  ...
  DEBUG: Thank you for your contribution to Ubuntu Linux.

  >>> import email
  >>> from canonical.launchpad.mail import stub
  >>> def by_to_addrs(a, b):
  ...     return cmp(a[1], b[1])
  >>> def pop_notifications():
  ...     stub.test_emails.sort(by_to_addrs)
  ...     notifications = [
  ...         email.message_from_string(raw_message)
  ...         for fromaddr, toaddrs, raw_message in stub.test_emails]
  ...     stub.test_emails = []
  ...     return notifications

There should be only one email:

  >>> transaction.commit()
  >>> len(stub.test_emails)
  1

Check the headers:

  >>> [notification] = pop_notifications()
  >>> notification['To']
  'recipient@canonical.com'
  >>> notification['Subject']
  'Accepted bar 1.0- (sourc)'

Check the mail body:

  >>> print notification.get_payload() # doctest: -NORMALIZE_WHITESPACE
  Accepted:
   OK: bar_1.0-1.dsc
   OK: bar_1.0.orig.tar.gz
   OK: bar_1.0-1.diff.gz
  This upload awaits approval by a distro manager
  ...
  Announcing to announcelist@canonical.com
  <BLANKLINE>
  Thank you for your contribution to Ubuntu Linux.

XXX Needs more tests to cover other types of upload.
