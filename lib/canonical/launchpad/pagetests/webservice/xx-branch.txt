= Introduction =

Launchpad provides two ways to programmatically interact with your
branches. You can either interact with the branches themselves using
`bzrlib`, or you can use Launchpad's webservice APIs to explore
information about the branches and how they relate to the rest of
the things on Launchpad.

    >>> from datetime import datetime
    >>> import pytz
    >>> from zope.security.proxy import removeSecurityProxy
    >>> from canonical.launchpad.interfaces import BranchType, IBranch
    >>> from canonical.launchpad.ftests import (
    ...     login, logout, ANONYMOUS)
    >>> from canonical.lazr.rest.marshallers import DateTimeFieldMarshaller

To make this document a little more readable, we'll have to define some
helpers. This one turns a JSON date/time response into a Python
`datetime` object.

    >>> def get_as_datetime(response):
    ...     """Return a datetime object from a JSON response."""
    ...     returned_time = response.jsonBody()
    ...     marshaller = DateTimeFieldMarshaller(
    ...         IBranch['next_mirror_time'], response)
    ...     return marshaller.marshall_from_json_data(returned_time)


== Requesting a mirror ==

Many of the branches on Launchpad are mirrored branches: branches that
are hosted on other servers and then mirrored regularly by Launchpad's
branch puller.

Normally, the puller fetches branches every six hours or so. However,
it also provides a way for you to request that a mirror be done
immediately.

Let's make a mirrored branch to play with:

    >>> login(ANONYMOUS)
    >>> branch = removeSecurityProxy(
    ...     factory.makeAnyBranch(BranchType.MIRRORED))
    >>> logout()

At the moment, it's not scheduled to be mirrored.

    >>> print branch.next_mirror_time
    None

But we can ask for it to be mirrored using the webservice:

    >>> branch_url = '/' + branch.unique_name
    >>> start_time = datetime.now(pytz.UTC)
    >>> response = webservice.named_post(branch_url, 'requestMirror')
    >>> end_time = datetime.now(pytz.UTC)
    >>> new_mirror_time = get_as_datetime(response)
    >>> branch.next_mirror_time == new_mirror_time
    True

The new "next mirror time" is the time when we actually submitted the
request for a mirror:

    >>> print start_time < branch.next_mirror_time < end_time
    True


== Basic branch attributes ==

Not everything about a branch is exposed.  Hopefully most of what users
really care about is exposed, and we will undoubtedly expand this as
time goes on.

    >>> login(ANONYMOUS)
    >>> eric = factory.makePerson(name='eric')
    >>> fooix = factory.makeProduct(name='fooix')
    >>> branch = factory.makeProductBranch(
    ...     BranchType.HOSTED, owner=eric, product=fooix, name='trunk',
    ...     title='The Fooix Trunk')
    >>> branch_url = '/' + branch.unique_name
    >>> logout()

    >>> from canonical.launchpad.testing.pages import webservice_for_person
    >>> service = webservice_for_person(eric)
    >>> details = webservice.get(branch_url).jsonBody()
    >>> from canonical.lazr.testing.webservice import pprint_entry
    >>> pprint_entry(details)
    branch_format: None
    branch_type: u'Hosted'
    control_format: None
    date_created: ...
    date_last_modified: ...
    display_name: u'The Fooix Trunk'
    lifecycle_status: u'New'
    mirror_status_message: None
    name: u'trunk'
    owner_link: u'http://api.launchpad.dev/beta/~eric'
    project_link: u'http://api.launchpad.dev/beta/fooix'
    registrant_link: u'http://api.launchpad.dev/beta/~eric'
    repository_format: None
    resource_type_link: u'http://api.launchpad.dev/beta/#branch'
    reviewer_link: None
    self_link: u'http://api.launchpad.dev/beta/~eric/fooix/trunk'
    summary: None
    title: u'The Fooix Trunk'
    unique_name: u'~eric/fooix/trunk'
    url: None
    whiteboard: None


== Project branches ==

The branches of a project are also available.

    >>> project = webservice.get('/fooix').jsonBody()
    >>> branches = webservice.get(
    ...     project['branches_collection_link']).jsonBody()
    >>> for branch in branches['entries']:
    ...     print branch['unique_name']
    ~eric/fooix/trunk
