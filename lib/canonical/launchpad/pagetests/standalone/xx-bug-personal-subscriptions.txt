Personal Subscriptions
======================

Users can subscribe to bugs reported in Malone, via the "Subscribe" link
in the actions portlet.

  >>> browser.addHeader('Authorization', 'Basic foo.bar@canonical.com:test')
  >>> browser.open('http://localhost/products/firefox/+bug/1')
  >>> browser.url
  'http://localhost/products/firefox/+bug/1'

  >>> subscribe_link = browser.getLink('Subscribe')
  >>> subscribe_link.text
  'Subscribe'

Clicking the link brings you to the subscription page, from which the
subscription link is also visible.

  >>> subscribe_link.click()

  >>> subscription_widget = browser.getControl(name='field.subscription')
  >>> subscription_widget.options
  ['name16']
  >>> subscription_widget.value
  ['name16']

  >>> submit = browser.getControl('Continue')

Clicking "Continue" subscribes the user to the bug, and tells the user
this.

  >>> submit.click()

  >>> browser.url
  'http://localhost/products/firefox/+bug/1/'

  >>> from BeautifulSoup import BeautifulSoup
  >>> soup = BeautifulSoup(browser.contents)
  >>> for p_tag in soup('p', 'informational message'):
  ...   print p_tag.string
  You have been subscribed to this bug.

  >>> def print_subscribers(bug_page):
  ...     """Print the subscribers listed in the subscriber portlet."""
  ...     soup = BeautifulSoup(bug_page)
  ...     subscriber_portlet_headers = soup.fetchText(
  ...        'Subscribers to bug 1:')
  ...     assert len(subscriber_portlet_headers) == 1
  ...     subscriber_portlet = subscriber_portlet_headers[0].parent.parent
  ...     for li in subscriber_portlet.fetch('ul', 'people')[0].fetch('li'):
  ...         print li.a.string
  >>> print_subscribers(browser.contents)
  Steve Alexander
  Sample Person
  Foo Bar

The "Subscribe" link now says "Unsubscribe".

  >>> subscribe_link = browser.getLink('Unsubscribe')
  >>> subscribe_link.text
  'Unsubscribe'
  >>> subscribe_link.click()
  >>> print browser.title
  Bug #1 - Subscription options
  >>> browser.url
  'http://localhost/products/firefox/+bug/1/+subscribe'

Clicking the "Continue" button from the +subscribe page will unsubscribe
the user this time, and inform the user.

  >>> subscription_widget.value
  ['name16']
  >>> submit = browser.getControl('Continue')
  >>> submit.click()

  >>> browser.url
  'http://localhost/products/firefox/+bug/1/'

  >>> soup = BeautifulSoup(browser.contents)
  >>> for p_tag in soup('p', 'informational message'):
  ...   print p_tag.string
  You have been unsubscribed from this bug.

  >>> subscribe_link = browser.getLink('Subscribe')
  >>> subscribe_link.text
  'Subscribe'

Users can unsubscribe teams to which they belong. Let's demonstrate by
first subscribing one of Foo Bar's teams.

  >>> browser.getLink('Subscribe Someone Else').click()
  >>> browser.url
  'http://localhost/products/firefox/+bug/1/+addsubscriber'

  >>> browser.getControl('Person').value = 'launchpad'
  >>> browser.getControl('Add').click()
  >>> browser.url
  'http://localhost/products/firefox/+bug/1'

  >>> print_subscribers(browser.contents)
  Steve Alexander
  Sample Person
  Launchpad Developers

Now the subscribe link says 'Subscribe/Unsubscribe'.

  >>> subscribe_link = browser.getLink('Subscribe')
  >>> subscribe_link.text
  'Subscribe/Unsubscribe'

Clicking it gives us the option of both subscribing Foo Bar, and
unsubscribing the Launchpad team.

  >>> subscribe_link.click()
  >>> browser.url
  'http://localhost/products/firefox/+bug/1/+subscribe'

  >>> subscription_widget = browser.getControl(name='field.subscription')
  >>> subscription_widget.options
  ['name16', 'launchpad']

Let's unsubscribe the Launchpad team.

  >>> subscription_widget.value = ['launchpad']
  >>> browser.getControl('Continue').click()

  >>> browser.url
  'http://localhost/products/firefox/+bug/1/'

  >>> soup = BeautifulSoup(browser.contents)
  >>> for p_tag in soup('p', 'informational message'):
  ...   print p_tag.string
  Launchpad Developers has been unsubscribed from this bug.

  >>> print_subscribers(browser.contents)
  Steve Alexander
  Sample Person

On the subscribe page there's a Cancel button as well, so if we go to
that page and press the Cancel button, we will return to the bug page.

  >>> subscribe_link = browser.getLink('Subscribe')
  >>> subscribe_link.text
  'Subscribe'

  >>> subscribe_link.click()
  >>> browser.url
  'http://localhost/products/firefox/+bug/1/+subscribe'

  >>> subscription_widget = browser.getControl(name='field.subscription')
  >>> subscription_widget.value
  ['name16']
  >>> cancel_button = browser.getControl('Cancel')
  >>> cancel_button.click()
  >>> browser.url
  'http://localhost/products/firefox/+bug/1/'
  >>> soup = BeautifulSoup(browser.contents)

Foo Bar wasn't subscribed to the bug.

  >>> len(soup('p', 'informational message'))
  0
  >>> print_subscribers(browser.contents)
  Steve Alexander
  Sample Person

Subscriptions and Duplicate Bugs
--------------------------------

Because we auto-subscribe users that are directly subscribed to dupes of
a bug, we give the option to unsubscribe from dupe target bugs. Behind
the scenes, this is just unsubscribing the user from the duplicate of
this bug that caused us to auto-subscribe them.

For example, Steve Alexander can currently subscribe to bug #3.

  >>> from zope.testbrowser.testing import Browser

  >>> stevea_browser = Browser()
  >>> stevea_browser.handleErrors = False

  >>> stevea_browser.addHeader(
  ...     "Authorization", "Basic steve.alexander@ubuntulinux.com:test")

  >>> stevea_browser.open("http://launchpad.dev/bugs/3")
  >>> subscribe_link = stevea_browser.getLink("Subscribe")

  >>> subscribe_link.text
  'Subscribe'

Bug if bug #2, a bug that Steve is directly subscribed to, is marked as
a dupe of bug #3, then Steve gets indirectly subscribed to bug #3, and
is presented with the Unsubscribe link.

  >>> stevea_browser.open(
  ...     "http://launchpad.dev/products/ubuntu-product/+bug/2/+duplicate")

  >>> stevea_browser.getControl("Duplicate Of").value = "3"
  >>> stevea_browser.getControl("Change").click()

  >>> stevea_browser.open("http://launchpad.dev/bugs/3")

  >>> unsubscribe_link = stevea_browser.getLink("Unsubscribe")

  >>> unsubscribe_link.text
  'Unsubscribe'

When he chooses to unsubscribe, he will be unsubscribed from bug #2, the
dupe of bug #3, so he'll no longer get mail from bug #3.

  >>> unsubscribe_link.click()

  >>> stevea_browser.getControl("Continue").click()

  >>> soup = BeautifulSoup(stevea_browser.contents)
  >>> for p_tag in soup('p', 'informational message'):
  ...   print p_tag.string
  You have been unsubscribed from this bug.
