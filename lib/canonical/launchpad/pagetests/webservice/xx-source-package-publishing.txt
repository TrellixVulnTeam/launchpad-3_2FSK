===========================
Finding source publications
===========================

Source package publishing details are available via a custom operation on
archives, getPublishedSources().

We need to insert some dependent fake data before continuing.

    >>> login("foo.bar@canonical.com")
    >>> from canonical.archiveuploader.tests import (
    ...     insertFakeChangesFileForAllPackageUploads)
    >>> insertFakeChangesFileForAllPackageUploads()
    >>> transaction.commit()
    >>> logout()

    >>> cprov_archive = webservice.get("/~cprov/+archive/ppa").jsonBody()
    >>> pubs = webservice.named_get(
    ...     cprov_archive['self_link'], 'getPublishedSources').jsonBody()

    >>> def print_publications(pubs):
    ...     for display_name in sorted(
    ...         entry['display_name'] for entry in pubs['entries']):
    ...         print display_name

    >>> print_publications(pubs)
    cdrkit 1.0 in breezy-autotest
    iceweasel 1.0 in warty
    pmount 0.1-1 in warty

getPublishedSources() can accept some optional filtering paramters to reduce
the number of returned publications.

Search by name and version using an exact match:

    >>> pubs = webservice.named_get(
    ...     cprov_archive['self_link'], 'getPublishedSources',
    ...     source_name="iceweasel", version="1.0", exact_match=True).jsonBody()
    >>> print_publications(pubs)
    iceweasel 1.0 in warty

Search by date published:

    >>> pubs = webservice.named_get(
    ...     cprov_archive['self_link'], 'getPublishedSources',
    ...     published_since_date='2007-01-01 00:00:00+00:00').jsonBody()
    >>> print_publications(pubs)
    cdrkit 1.0 in breezy-autotest
    iceweasel 1.0 in warty
    pmount 0.1-1 in warty

Search by publishing status:

    >>> pubs = webservice.named_get(
    ...     cprov_archive['self_link'], 'getPublishedSources',
    ...     status="Published").jsonBody()
    >>> print_publications(pubs)
    cdrkit 1.0 in breezy-autotest
    iceweasel 1.0 in warty
    pmount 0.1-1 in warty

Search by distroseries and pocket:

    >>> distros = webservice.get("/distros").jsonBody()
    >>> ubuntu = distros['entries'][0]
    >>> warty = webservice.named_get(
    ...     ubuntu['self_link'], 'getSeries',
    ...     name_or_version='warty').jsonBody()

    >>> pubs = webservice.named_get(
    ...     cprov_archive['self_link'], 'getPublishedSources',
    ...     distro_series=warty['self_link'], pocket="Release").jsonBody()
    >>> print_publications(pubs)
    iceweasel 1.0 in warty
    pmount 0.1-1 in warty

Each source publication exposes a number of properties.

    >>> from canonical.lazr.testing.webservice import pprint_entry
    >>> pprint_entry(pubs['entries'][0])
    archive_link: u'http://.../~cprov/+archive/ppa'
    changes_file_text: u'-----BEGIN PGP SIGNED MESSAGE-----...
    component_name: u'main'
    date_created: u'2007-07-09T12:00:00+00:00'
    date_made_pending: None
    date_published: u'2007-07-09T12:00:01+00:00'
    date_removed: None
    date_superseded: None
    display_name: u'iceweasel 1.0 in warty'
    distro_series_link: u'http://.../ubuntu/warty'
    pocket: u'Release'
    removal_comment: None
    removed_by_link: None
    resource_type_link: u'http://.../#source_package_publishing_history'
    scheduled_deletion_date: None
    section_name: u'editors'
    self_link: u'http://.../~cprov/+archive/ppa/+sourcepub/28'
    source_package_name: u'iceweasel'
    source_package_version: u'1.0'
    status: u'Published'

When Celso's PPA becomes private ...

    >>> login("foo.bar@canonical.com")

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.interfaces.person import IPersonSet

    >>> cprov = getUtility(IPersonSet).getByName('cprov')
    >>> cprov.archive.buildd_secret = 'boing'
    >>> cprov.archive.private = True

    >>> transaction.commit()

    >>> logout()

Only Celso (or anyone who participates on the PPA owner team) has
access to the PPA publications.

    >>> cprov_srcs_response = webservice.named_get(
    ...     cprov_archive['self_link'], 'getPublishedSources')
    >>> print cprov_srcs_response.getOutput()
    HTTP/1.1 200 Ok
    ...

Any other user attempt would result in a 401 error.

    >>> response = user_webservice.named_get(
    ...     cprov_archive['self_link'], 'getPublishedSources')
    >>> print response.getOutput()
    HTTP/1.1 401 Unauthorized
    ...

If the user attempts to access the publication URL directly they will
also fail in their quest.

    >>> private_publication_url = pubs['entries'][0]['self_link']
    >>> response = user_webservice.get(private_publication_url)
    >>> print response.getOutput()
    HTTP/1.1 401 Unauthorized
    ...


Finding related Builds
======================

The source publication object has a custom operation called 'getBuilds' and
it returns the build records in the context of that publication.

    >>> source_pub = pubs['entries'][0]
    >>> builds = webservice.named_get(
    ...     source_pub['self_link'], 'getBuilds').jsonBody()
    >>> for entry in sorted(builds['entries']):
    ...     print entry['title']
    i386 build of iceweasel 1.0 in ubuntu warty RELEASE


Build status summaries
======================

A summary of the build statuses for source packages in an archive is
available via a custom operation on IArchive,
getBuildSummariesForSourceIds().

First, we grab the ids of two source package publishing records from
cprov's ppa:

    >>> source_ids = []
    >>> cprov_srcs = cprov_srcs_response.jsonBody()
    >>> src_link = cprov_srcs['entries'][0]['self_link']

The src_link will be of the form: 
u'http://api.launchpad.dev/beta/~cprov/+archive/ppa/+sourcepub/27'
so:

    >>> source_id = int(src_link.split('/')[-1])
    >>> source_ids.append(source_id)
    >>> src_link = cprov_srcs['entries'][1]['self_link']
    >>> source_id = int(src_link.split('/')[-1])
    >>> source_ids.append(source_id)

Now use the source ids to call the getBuildSummariesForSourceIds web
service:

    >>> build_summaries = webservice.named_get(
    ...     cprov_archive['self_link'], 'getBuildSummariesForSourceIds',
    ...     source_ids=source_ids).jsonBody()

Create a helper function to print the results:

    >>> def print_build_summaries(summaries):
    ...     for id, summary in summaries.items():
    ...         arch_tags = [build['arch_tag'] for build in summary['builds']]
    ...         print "Source ID %s: %s (%s)" % (id, summary['status'],
    ...                                          arch_tags)

The results contain an entry for each source ID, with the summary status
and a list of all the relevant builds for the summary:

    >>> print_build_summaries(build_summaries)
    Source ID 27: FAILEDTOBUILD ([u'i386'])
    Source ID 28: FULLYBUILT ([u'i386'])

