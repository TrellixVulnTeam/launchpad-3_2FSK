
Ticket Tracking System
======================

ITicketTarget
-------------

Launchpad includes a tech support ticket tracker. Tickets are created and
accessed using the ITicketTarget interface. This interface is available on
products, distributions and sourcepackages.

    >>> from zope.interface.verify import verifyObject
    >>> from canonical.launchpad.interfaces import (
    ...     ITicketTarget, IProductSet, IDistributionSet)

    >>> firefox = getUtility(IProductSet)['firefox']
    >>> verifyObject(ITicketTarget, firefox)
    True

    >>> ubuntu = getUtility(IDistributionSet).getByName('ubuntu')
    >>> verifyObject(ITicketTarget, ubuntu)
    True

    >>> firefox_package = ubuntu.currentrelease.getSourcePackage(
    ...     'mozilla-firefox')
    >>> verifyObject(ITicketTarget, firefox_package)
    True

You create a new ticket by calling the newTicket() method. This method takes
as parameters the request's, title and description. Only Launchpad members
are allowed to create new tickets.

    >>> login('test@canonical.com')
    >>> sample_person = getUtility(ILaunchBag).user
    >>> firefox_ticket = firefox.newTicket(
    ...     sample_person, "Firefox ticket", "Unable to use Firefox")

All the tickets created on the target are available using the tickets() method:

    >>> [(ticket.id, ticket.title) for ticket in firefox.tickets()]
    [(8L, u'Firefox ticket'),
     (6, u"Newly installed plug-in doesn't seem to be used"),
     (4, u'Firefox loses focus and gets stuck'),
     (2, u'Problem showing the SVG demo on W3C site'),
     (1, u'Firefox cannot render Bank Site')]

To get a ticket in the target, you use the getTicket():

    >>> ticket_four = firefox.getTicket(4)
    >>> ticket_four.title
    u'Firefox loses focus and gets stuck'

If the ticket ID you request doesn't exist or was created on another
ITicketTarget, the method returns None:

    >>> firefox.getTicket(12345) is None
    True

    >>> firefox.getTicket(3) is None
    True


ITicket
-------

Tickets are manipulated through the ITicket interface:

    >>> from canonical.launchpad.interfaces import ITicket
    >>> verifyObject(ITicket, firefox_ticket)
    True

The person who submitted the ticket is available in the owner field.

    >>> firefox_ticket.owner == sample_person
    True

When the ticket is created, the owner is added to the ticket's subscribers:

    >>> sample_person in [s.person for s in firefox_ticket.subscriptions]
    True

The ticket status is 'Open':

    >>> ticket.status.title
    'Open'

And the creation time is recorded in the datecreated attribute:

    >>> from datetime import datetime, timedelta
    >>> from pytz import UTC
    >>> now = datetime.now(UTC)
    >>> now - firefox_ticket.datecreated < timedelta(seconds=5)
    True

The ticket status is usually changed through methods implementating the ticket
workflow.

Sample Person was the one who filed the ticket, so he can reject the
ticket if he thinks it's not relevant anymore:

    >>> firefox_ticket.reject(sample_person)
    True
    >>> firefox_ticket.status.title
    'Rejected'

He can also reopen it:

    >>> firefox_ticket.reopen(sample_person)
    <TicketReopening at ...>
    >>> firefox_ticket.status.title
    'Open'

Now let's log in as another, non admin, user to show that anyone can edit a
ticket. First of all the title and description don't say much about the
problem, so let's ask Sample Person to clarify.

    >>> login('no-priv@canonical.com')
    >>> no_priv = getUtility(ILaunchBag).user

    >>> now_plus_one_hour = (now + timedelta(hours=1))

    >>> comment = firefox_ticket.newMessage(
    ...     no_priv, firefox_ticket.followup_subject,
    ...     'Could you please describe what the problem is?',
    ...     when=now_plus_one_hour)

When some other Person than the submitter comments on a ticket,
datelastresponse gets set to the comment's creation date.

    >>> firefox_ticket.datelastresponse == now_plus_one_hour
    True

We also assign the ticket to ourselves to show that we're working on
the issue.

    >>> firefox_ticket.assignee = no_priv

Sample Person replies:

    >>> now_plus_two_hours = now_plus_one_hour + timedelta(hours=1)
    >>> login('test@canonical.com')
    >>> sample_person = getUtility(ILaunchBag).user
    >>> comment = firefox_ticket.newMessage(
    ...     sample_person, firefox_ticket.followup_subject,
    ...     'When I start Firefox, all I get is a blank page. I want to '
    ...     'have a search page at start-up?',
    ...     when=now_plus_two_hours)

When the submitter adds a comment, datelastquery gets set to the
comment's date:

    >>> firefox_ticket.datelastresponse == now_plus_one_hour
    True
    >>> firefox_ticket.datelastquery == now_plus_two_hours
    True

Now it's clear what the problem is, so let's edit the title and
description to describe the problem:

    >>> login('no-priv@canonical.com')
    >>> firefox_ticket.title = 'No home page is set.'
    >>> firefox_ticket.description = (
    ...     'When Firefox is started, an empty page is shown. I want a '
    ...     'search page to be shown.')

Let's help Sample Person with his problem by providing an answer:

    >>> comment = firefox_ticket.newMessage(
    ...     no_priv, firefox_ticket.followup_subject,
    ...     "Go to 'http://www.google.com', enter the preferences "
    ...     "dialog, and choose 'Use Current Page'.")

Sample Person is happy with the answer, so he closes the ticket:

    >>> login('test@canonical.com')
    >>> now_plus_three_hours = now_plus_two_hours + timedelta(hours=1)
    >>> comment = firefox_ticket.newMessage(
    ...     sample_person, firefox_ticket.followup_subject, 'Thanks!',
    ...     when=now_plus_three_hours)
    >>> firefox_ticket.acceptAnswer(sample_person, when=now_plus_three_hours)
    >>> firefox_ticket.status.title
    'Answered'

Since No Privileges Person was the last, non-submitter, to comment on
the ticket, he's considered as the one who answered it:

    >>> print firefox_ticket.answerer.displayname
    No Privileges Person
    >>> firefox_ticket.dateanswered == now_plus_three_hours
    True

If we create a new ticket, datecreated gets set to the current time:

    >>> new_ticket = firefox.newTicket(
    ...     title='New ticket', description='Ticket description.',
    ...     owner=sample_person, when=now_plus_three_hours)
    >>> new_ticket.datecreated == now_plus_three_hours
    True


ITicketSet
----------

ITicketSet can be used to get a ticket with a specific id:

    >>> from canonical.launchpad.interfaces import ITicketSet
    >>> ticket_one = getUtility(ITicketSet).get(1)
    >>> ticket_one.title
    u'Firefox cannot render Bank Site'

If no ticket exists, a default value is returned:

    >>> default = object()
    >>> ticket_nonexistant = getUtility(ITicketSet).get(
    ...     123456, default=default)
    >>> ticket_nonexistant is default
    True

If no default value is given, None is returned:

    >>> getUtility(ITicketSet).get(123456) is None
    True
