= Storm tracers =

The Storm ORM supports an interface for installing 'tracers', methods of which
get called during certain parts of the query workflow.  Launchpad itself
provides a few helpers for tracing all SQL, or just those statements which
succeed or fail.  Demonstrating the entire Storm tracer API is outside of the
scope of this document, but here you'll see Launchpad's convenience tracers.

The base class for tracers provides the basic infrastructure for enabling,
disabling, installing and uninstalling tracers.

    # Save the global tracer state so that we can restore them after the test.
    >>> import storm.tracer
    >>> global_tracers = storm.tracer._tracers[:]

    >>> from canonical.database.testing import tracers

    >>> messages = []
    >>> class WaveToTheCrowdTracer(tracers.BaseTracer):
    ...     def connection_raw_execute(self, *args):
    ...         if self.trace:
    ...             messages.append('hello world')

    >>> tracer = WaveToTheCrowdTracer()
    >>> tracer.install()

Even though the tracer is installed, it won't get called until it's enabled.

    >>> from canonical.launchpad.interfaces.person import IPersonSet
    >>> person_set = getUtility(IPersonSet)
    >>> person = person_set.getByName('name12')
    >>> len(messages)
    0

Once it's enabled, the tracer does its thing.

    >>> tracer.trace = True
    >>> person = person_set.getByName('name12')
    >>> len(messages)
    1

Of course, disabling it, stops the tracer from doing its thing.

    >>> tracer.trace = False
    >>> person = person_set.getByName('name12')
    >>> len(messages)
    1

Let's re-enable it...

    >>> tracer.trace = True
    >>> person = person_set.getByName('name12')
    >>> len(messages)
    2

...and then uninstall it.

    >>> tracer.uninstall()
    >>> person = person_set.getByName('name12')
    >>> len(messages)
    2

We can install more than one tracer and both will run.

    >>> messages = []
    >>> class WaveToTheCrowdTracer(tracers.BaseTracer):
    ...     def connection_raw_execute(self, *args):
    ...         messages.append('hello world')

    >>> tracer_one = WaveToTheCrowdTracer()
    >>> tracer_two = WaveToTheCrowdTracer()
    >>> tracer_one.install()
    >>> tracer_two.install()

    >>> person = person_set.getByName('name12')
    >>> len(messages)
    2
    >>> person = person_set.getByName('name12')
    >>> len(messages)
    4

Because of the API presented by Storm, uninstalling a tracer actually
uninstalls all tracers of its type.

    >>> tracer_one.uninstall()
    >>> person = person_set.getByName('name12')
    >>> len(messages)
    4

When installing a tracer, we can request that all other tracers first be
removed.

    >>> messages = []
    >>> tracer_one.install()
    >>> tracer_two.install(only=True)
    >>> person = person_set.getByName('name12')
    >>> len(messages)
    1
    >>> person = person_set.getByName('name12')
    >>> len(messages)
    2

    # Clear all the tracers for the next batch of tests.
    >>> tracer_one.uninstall()


== A counting tracer ==

Launchpad provides a counting tracer which can be used to count the total
number of SQL queries in a particular section of code.

    >>> counter = tracers.CountAllTracer()
    >>> counter.install()
    >>> counter.trace = True

    >>> person = person_set.getByName('name12')
    >>> person = person_set.getByName('name12')
    >>> counter.count
    2

    >>> counter.trace = False
    >>> person = person_set.getByName('name12')
    >>> person = person_set.getByName('name12')
    >>> counter.count
    2

    # Clear all the tracers for the next batch of tests.
    >>> counter.uninstall()


== SQL debugging ==

Launchpad also provides a tracer that can print SQL statements to a file
stream.  By default, it prints to the real stderr.

    >>> import sys
    >>> from cStringIO import StringIO

    >>> old_real_stderr = sys.__stderr__
    >>> sys.__stderr__ = out = StringIO()
    >>> try:
    ...     debug = tracers.StderrDebugTracer()
    ...     debug.install()
    ...     debug.trace = True
    ...     person = person_set.getByName('name12')
    ... finally:
    ...     sys.__stderr__ = old_real_stderr
    >>> print out.getvalue()
    SELECT Person...

    # Clear all the tracers for the next batch of tests.
    >>> debug.uninstall()

You can also tell it to print to a specific stream.

    >>> out = StringIO()
    >>> debug = tracers.StderrDebugTracer(out)
    >>> debug.install()
    >>> debug.trace = True
    >>> person = person_set.getByName('name12')
    >>> print out.getvalue()
    SELECT Person...

    # Restore the global state of the tracers before this test was run.
    >>> storm.tracer._tracers = global_tracers
