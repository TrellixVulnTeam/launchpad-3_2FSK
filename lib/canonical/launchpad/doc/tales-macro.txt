= The macro: TALES namespace =

Launchpad has a 'macro:' TALES namespace that offers controls over the
layout of the page.

    >>> class FakeView(object):
    ...     pass

Templates should start by specifying the kind of pagetype they use.
That's done by using the 'macro:page' traversal. That expression returns
the master macro from the main_template.pt and sets on the view the
layout it's using. The following METAL fragment illustrates the way it's
usually done:

    <html metal:use-macro="view/macro:page/default" />


    >>> from canonical.launchpad.ftests import test_tales
    >>> view = FakeView()

    # Return value is the compiled macro expression.
    >>> test_tales('view/macro:page/default', view=view)
    [('version', ...]

The pagetype is registered in the __pagetype__ attribute.

    >>> view.__pagetype__
    'default'

If the pagetype isn't defined, a TraversalError is raised.

    >>> test_tales('view/macro:page/not-defined', view=FakeView())
    Traceback (most recent call last):
      ...
    TraversalError: 'unknown pagetype: not-defined'

The 'macro:pagehas' can then be used to test for features that should be
rendered in the layout.

    >>> test_tales('view/macro:pagehas/applicationtabs', view=view)
    True

    >>> test_tales('view/macro:pagehas/portlets', view=view)
    True

    >>> test_tales('view/macro:pagehas/actionsmenu', view=view)
    True

    >>> test_tales('view/macro:pagehas/heading', view=view)
    False


The actions menu is deprecated. Some of the links are moved inline,
others are shown as navigation tabs. The navigationtabs page feature
controls that aspect. Two layouts show these, default2.0 and onecolumn.

    >>> from canonical.launchpad.webapp.tales import PageMacroDispatcher
    >>> for layout in sorted(PageMacroDispatcher._pagetypes):
    ...     view = FakeView()
    ...     macro = test_tales('view/macro:page/%s' % layout, view=view)
    ...     if test_tales('view/macro:pagehas/navigationtabs', view=view):
    ...         print layout
    default2.0
    onecolumn

These two layouts have the actionsmenu turned off.

    >>> macro = test_tales('view/macro:page/default2.0', view=view)
    >>> test_tales('view/macro:pagehas/actionsmenu', view=view)
    False

    >>> macro = test_tales('view/macro:page/onecolumn', view=view)
    >>> test_tales('view/macro:pagehas/actionsmenu', view=view)
    False

The 'macro:isbetauser' can be used to safely try to determine if the
current user is a beta user. It works for views that provide
isBetaUser() (ie. all views inheriting LaunchpadView), and simply
returns False for older views that do not.

    >>> class LPView(object):
    ...     def isBetaUser(self):
    ...         return True

    >>> test_tales('view/macro:isbetauser', view=LPView())
    True

    >>> test_tales('view/macro:isbetauser', view=view)
    False

