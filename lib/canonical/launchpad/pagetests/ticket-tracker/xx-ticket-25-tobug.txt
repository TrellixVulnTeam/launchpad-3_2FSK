
Turning a Ticket into a Bug
===========================

The ticket page shows a link to make the ticket into a bug.

  >>> browser.open('http://localhost/products/firefox/+ticket/2')
  >>> createLink = browser.getLink('Create Bug Report')
  >>> createLink is not None
  True

This link brings the user to page proposing to create a new bug based
on the content of the support ticket.

  >>> browser.addHeader('Authorization', 'Basic foo.bar@canonical.com:test')
  >>> createLink.click()
  >>> print browser.title
  Create bug report based on...

Cancelling the request brings you back to the ticket page.

  >>> browser.getControl('Cancel').click()
  >>> browser.url
  'http://localhost/products/firefox/+ticket/2'
  >>> browser.title
  '...support request #2...'
  >>> createLink = browser.getLink('Create Bug Report') 
  >>> createLink is not None
  True

Clicking the 'Create' button shows a portal message giving the new bug
number, and should show the bug in the list of related bugs.

  >>> createLink.click()
  >>> browser.getControl('Create').click()
  >>> browser.url
  'http://localhost/products/firefox/+ticket/2'
  >>> from BeautifulSoup import BeautifulSoup
  >>> soup = BeautifulSoup(browser.contents)
  >>> for tag in soup('div', 'informational message'):
  ...   print tag.string
  Thank you! Bug...created.

A user can't create a bug report when a ticket has already a bug linked to
it.

  >>> browser.open('http://localhost/products/firefox/+ticket/2')
  >>> browser.contents
  '...<h4>Related bugs:</h4>...'
  >>> browser.getLink('Create Bug Report')
  Traceback (most recent call last):
    ..
  LinkNotFoundError...

It works with distribution tickets as well.

  >>> browser.open('http://localhost/distros/ubuntu/+ticket/5/+makebug')
  >>> browser.getControl('Create Bug Report').click()
  >>> browser.url
  'http://localhost/distros/ubuntu/+ticket/5'
  >>> soup = BeautifulSoup(browser.contents)
  >>> for tag in soup('div', 'informational message'):
  ...   print tag.string
  Thank you! Bug...created.
