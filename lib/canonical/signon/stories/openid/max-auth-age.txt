= OpenID Security Extensions: Max Auth Age =

Launchpad supports the max_auth_age extension parameter defined in
Provider Authentication Policy Extension (
http://openid.net/specs/openid-provider-authentication-policy-extension-1_0-07.html).
It offers a way for a relaying party to ensure that the user enters
their password, even if they have already logged into Launchpad. The
purpose of this is for sites for which the long-lived session policy of
Launchpad is problematic.

    >>> browser.open('http://launchpad.dev')
    >>> browser.getLink('Log in').click()
    >>> browser.getControl('E-mail', index=0).value = 'test@canonical.com'
    >>> browser.getControl('Password').value = 'test'
    >>> browser.getControl('Log In').click()
    >>> print extract_text(find_tag_by_id(browser.contents, 'logincontrol'))
    Sample Person...

Normally, if a relaying party asks to authenticates this user, the user
will be able to click the 'Sign In' button to complete the
authentication process.

    >>> from openid.consumer.consumer import Consumer
    >>> from openid.fetchers import setDefaultFetcher
    >>> from openid.store.memstore import MemoryStore
    >>> from canonical.signon.testing.openidhelpers import (
    ...     complete_from_browser, PublisherFetcher)
    >>> setDefaultFetcher(PublisherFetcher())

    >>> openid_store = MemoryStore()
    >>> consumer = Consumer(session={}, store=openid_store)
    >>> request = consumer.begin('http://openid.launchpad.dev')

    >>> browser.open(request.redirectURL(
    ...     'http://launchpad.dev/', 'http://launchpad.dev/+openid-consumer'))
    >>> browser.getControl('Sign In', index=0)
    <SubmitControl...>

The max_auth_age PAPE parameter can be used to force the user to
enter their password, even if they are already authenticated with
Launchpad.

    >>> consumer = Consumer(session={}, store=openid_store)
    >>> request = consumer.begin('http://openid.launchpad.dev')

Using 0 as max_auth_age value will always force the user to enter
their password.

    >>> from openid.extensions import pape
    >>> pape_request = pape.Request(max_auth_age=0)
    >>> request.addExtension(pape_request)
    >>> browser.open(request.redirectURL(
    ...     'http://launchpad.dev/', 'http://launchpad.dev/+openid-consumer'))
    >>> print browser.url
    http://openid.launchpad.dev/+openid...
    >>> browser.getControl('Sign In', index=0)
    Traceback (most recent call last):
      ...
    LookupError:...

Since we know who the user is, the email field is pre-filled for their
convenience:

    >>> print browser.getControl(name='field.email').value
    test@canonical.com

If they do not enter their password correctly, they get an error message
and can try again:

    >>> browser.getControl(name='field.password').value = 'bad password'
    >>> browser.getControl('Continue').click()

    >>> for tag in find_tags_by_class(browser.contents, 'error'):
    ...     print extract_text(tag)
    Incorrect password for the provided email address.

Entering their credential properly completes the OpenID request.

    >>> browser.getControl(name='field.email').value = 'test@canonical.com'
    >>> browser.getControl(name='field.password').value = 'test'
    >>> browser.getControl('Continue').click()
    >>> print browser.url
    http://launchpad.dev/+openid-consumer?...

    >>> info = complete_from_browser(
    ...     consumer, browser, 'http://openid.launchpad.dev/+id/name12_oid')
    >>> print info.status
    success
    >>> print info.endpoint.claimed_id
    http://openid.launchpad.dev/+id/name12_oid

The auth_age parameter contains the time of the last login.

    >>> pape_response = pape.Response.fromSuccessResponse(info)
    >>> print pape_response.auth_time
    2...

== Cleanup ==

    >>> setDefaultFetcher(None)
