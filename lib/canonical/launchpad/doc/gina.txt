Gina Test
---------

This file is a simple test for gina. It uses a test archive (kept in
canonical.launchpad.scripts.ftests.archive_for_gina) and runs gina in
quiet mode over it.

We start out with 6 packages in our database.

    >>> from canonical.launchpad.database import SourcePackageRelease
    >>> SourcePackageRelease.select().count()
    6

    >>> import subprocess, sys, os
    >>> from canonical.librarian.ftests.harness import LibrarianTestSetup
    >>> LibrarianTestSetup().setUp()

Lets set up the absolute path for the gina_test_archive

    >>> relative_path = ('lib/canonical/launchpad/scripts/'
    ...                  'ftests/gina_test_archive')
    >>> path = os.path.join(os.getcwd(), relative_path)
    >>> os.symlink(path, '/tmp/gina_test_archive')

Now, lets run gina on hoary. This test imports a few perfect packages:

  a) archive-copier, a source package with no binary packages. Its
     maintainer has a name which contains a ","
  b) python-sqllite, an arch-independent source package that generates
     one binary package
  c) ubuntu-meta, a source package that generates 5 binary packages
  d) db1-compat, source package what generates 2 binary packages
  X) gcc-defaults, a source package that generates a truckload of binary
     packages with differing versions

Two packages which have recoverable errors:

  e) ed, a source package what generates one binary package and
     misses a section entry in Sources
  f) python-pam, an arch-independent source package that generates one
       binary package, whose changelog contains a busted urgency

And two completely broken packages:

  g) util-linux, a source package that is missing from the pool
  h) mkvmlinuz, a source package that generates one binary package,
     but which is missing a version field in its Sources file

Let's give her a spin:

    >>> gina_proc = [sys.executable, 'scripts/gina.py', '-q', 'hoary']
    >>> proc = subprocess.Popen(gina_proc, stderr=subprocess.PIPE)

Check STDERR for the errors we expected:

    >>> print proc.stderr.read()
    ERROR   Unable to create SourcePackageData for mkvmlinuz: Required attributes not found
     -> http://...
    WARNING Source package ed lacks section, assumed 'misc'
    WARNING Invalid urgency in python-pam, None, assumed 'low'
    ERROR   Error processing package files for util-linux
     -> http://...

The exit status must be 0, for success:

    >>> proc.wait()
    0

And we should have 6 more packages in the database:

    >>> import transaction
    >>> transaction.commit()
    >>> SourcePackageRelease.select().count()
    13

XXX: test binary package creation, in particular gcc-defaults, whose
     package versions differ from its source version
XXX: test that there are only XXX binary package releases created
XXX: test that there are only XXX builds created

XXX: test breezy
XXX: test x11proto-damage
XXX: test mkvmlinux-14ubuntu1, which has missing copyright and changelog
    c) mkvmlinuz, a source package that generates one binary package,
       but which missing a changelog and a copyright file

Stop Librarian
    >>> LibrarianTestSetup().tearDown()

Remove the tmp link to the gina_test_archive
    >>> os.remove('/tmp/gina_test_archive')

