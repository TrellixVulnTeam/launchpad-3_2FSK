POFile
======

Get evolution template for Ubuntu Hoary

>>> from zope.component import getUtility
>>> from canonical.launchpad.interfaces import (
... IPOTemplateSet, ISourcePackageNameSet, IDistributionSet)
>>> sourcepackagenameset = getUtility(ISourcePackageNameSet)
>>> sourcepackagename = sourcepackagenameset['evolution']
>>> distributionset = getUtility(IDistributionSet)
>>> distribution = distributionset['ubuntu']
>>> release = distribution['hoary']
>>> potemplateset = getUtility(IPOTemplateSet)
>>> potemplatesubset = potemplateset.getSubset(
...     distrorelease=release, sourcepackagename=sourcepackagename)
>>> potemplate = potemplatesubset['evolution-2.2']

Get Xhosa translation

>>> pofile = potemplate.getPOFileByLang('xh')

Get the set of POTMsgSets that are untranslated.

>>> potmsgsets = list(pofile.getPOTMsgSetUntranslated())
>>> len(potmsgsets)
22

Get Spanish translation

>>> pofile = potemplate.getPOFileByLang('es')

Get the set of POTMsgSets that are untranslated.

>>> potmsgsets = list(pofile.getPOTMsgSetUntranslated())
>>> len(potmsgsets)
15

Test that the header is updated.

>>> from canonical.launchpad.components.poparser import POHeader

This is the comment.

>>> comment = ' This is the top comment.'

This is the new header.

>>> msgstr = '''Project-Id-Version: es
... POT-Creation-Date: 2004-08-18 11:10+0200
... PO-Revision-Date: 2005-08-18 13:22+0000
... Last-Translator: Carlos Perelló Marín <carlos@canonical.com>
... Language-Team: Spanish <traductores@es.gnome.org>
... MIME-Version: 1.0
... Content-Type: text/plain; charset=UTF-8
... Content-Transfer-Encoding: 8bit
... Report-Msgid-Bugs-To: serrador@hispalinux.es
... X-Generator: Rosetta (https://launchpad.net/rosetta/)
... Plural-Forms: nplurals=2; plural=n != 1;'''

Now, get a POHeader object with that information.

>>> new_header = POHeader(commentText=comment, msgstr=msgstr)
>>> new_header.updateDict()

We check that the plural forms expression is correctly parsed:

>>> new_header.getPluralFormExpression() == 'n != 1'
True

To be sure the new header is being applied, here we have the old values:

>>> print pofile.topcomment.encode('utf-8')
traducción de es.po al Spanish
translation of es.po to Spanish
...

>>> print pofile.header.encode('utf-8')
Project-Id-Version: es
POT-Creation-Date: 2004-08-17 11:10+0200
PO-Revision-Date: 2005-04-07 13:22+0000
...
Plural-Forms: nplurals=2; plural=(n != 1);

>>> pofile.fuzzyheader
True

>>> pofile.pluralforms
2

Now, is time to change the old header with the new one.

>>> pofile.updateHeader(new_header)

And the new values:

>>> pofile.topcomment
u' This is the top comment.'

>>> print pofile.header.encode('utf-8')
Project-Id-Version: es
POT-Creation-Date: 2004-08-18 11:10+0200
PO-Revision-Date: 2005-08-18 13:22+0000
...
Plural-Forms: nplurals=2; plural=n != 1;

>>> pofile.fuzzyheader
False

>>> pofile.pluralforms
2

Now I'm going to test creating a header with invalid plural-forms and
trying to parse the number and type of plural forms it has.

>>> msgstr = '''Project-Id-Version: es
... POT-Creation-Date: 2004-08-18 11:10+0200
... PO-Revision-Date: 2005-08-18 13:22+0000
... Last-Translator: Carlos Perelló Marín <carlos@canonical.com>
... Language-Team: Spanish <traductores@es.gnome.org>
... MIME-Version: 1.0
... Content-Type: text/plain; charset=UTF-8
... Content-Transfer-Encoding: 8bit
... Report-Msgid-Bugs-To: serrador@hispalinux.es
... X-Generator: Rosetta (http://launchpad.ubuntu.com/rosetta/)
... Plural-Forms: n != 1'''
>>> new_header = POHeader(msgstr=msgstr)
>>> new_header.updateDict()
WARNING:root:The plural form header has an unknown error. Using the default value...
>>> new_header.getPluralFormExpression() == None
True


isPORevisionDateOlder
---------------------

This method helps to compare two PO files header and decide if the given one
is older than the one we have in the IPOFile object. We are using this
method, for instance, to know if a new imported PO file should be ignored
because we already have a newer one.

This test is to be sure that the date comparation is working and that two
headers with the same date will always be set as newer because lazy
translators forget to update that field from time to time and sometimes we
were losing translations because we were ignoring those imports too.

    >>> from canonical.launchpad.components.poparser import POHeader

    >>> print pofile.header.encode('utf-8')
    Project-Id-Version: es
    ...
    PO-Revision-Date: 2005-08-18 13:22+0000
    ...

First, we check with the same date.

    >>> header = POHeader(msgstr=u'PO-Revision-Date: 2005-08-18 13:22+0000')
    >>> header.updateDict()
    WARNING:root:PO file header entry has no content-type field
    >>> pofile.isPORevisionDateOlder(header)
    False

Now, we check with a date that is in the past.

    >>> header = POHeader(msgstr=u'PO-Revision-Date: 2005-08-18 13:21+0000')
    >>> header.updateDict()
    WARNING:root:PO file header entry has no content-type field
    >>> pofile.isPORevisionDateOlder(header)
    True

POFile View
===========

On this section, we are going to test the view class for an IPOFile.

First, we need some imports.

    >>> from cStringIO import StringIO
    >>> from zope.interface import implements
    >>> from zope.publisher.interfaces.browser import IBrowserRequest
    >>> from zope.component import getUtility
    >>> from canonical.launchpad.interfaces import (
    ...     ILanguageSet, IPersonSet, ILaunchBag)
    >>> from canonical.launchpad.browser import POFileView

Also, we need some fake classes to simulate the submit.

    >>> class DummyResponse:
    ...     def __init__(self):
    ...         self.errors = []
    ...         self.warnings = []
    ...
    ...     def redirect(self, url):
    ...         pass
    ...
    ...     def addErrorNotification(self, message):
    ...         self.errors.append(message)
    ...
    ...     def addWarningNotification(self, message):
    ...         self.warnings.append(message)

    >>> class DummyRequest:
    ...     implements(IBrowserRequest)
    ...
    ...     def __init__(self, **form_data):
    ...         self.form = form_data
    ...         self.response = DummyResponse()
    ...         self.method = 'GET'
    ...
    ...     def getURL(self):
    ...         return "http://this.is.a/fake/url"

All the tests will be submitted as comming from the Foo Bar person.

    >>> login('foo.bar@canonical.com')

Now it's time to test the initialisation of the view class.

    >>> pofile_es = potemplate.getPOFileByLang('es')
    >>> request = DummyRequest()
    >>> pofile_view = POFileView(pofile_es, request)
    >>> pofile_view.initialize()

Check to know the plural forms that this IPOFile has.

    >>> pofile_es.language.pluralforms
    2

And thus, the view class should know that it doesn't lacks the plural forms
information.

    >>> pofile_view.lacks_plural_form_information
    False

As the DummyRequest didn't get any argument, we should get the default values
for the offset, the count of messages to show and the kind of messages to show.

    >>> pofile_view.offset
    0
    >>> pofile_view.count
    10
    >>> pofile_view.show
    'all'

This time, we are going to see what happens if we get an IPOFile without
the plural form information.

    >>> pofile_tlh = potemplate.getPOFileOrDummy('tlh')
    >>> request = DummyRequest()
    >>> pofile_view = POFileView(pofile_tlh, request)
    >>> pofile_view.initialize()

Here we can see that it's lacking that information.

    >>> pofile_tlh.language.pluralforms is None
    True

And the view class detects it correctly.

    >>> pofile_view.lacks_plural_form_information
    True

Now, let's check that the view class handles correctly the offset and count
arguments when the request sets them.

    >>> request = DummyRequest(offset=7, count=8)
    >>> pofile_view = POFileView(pofile_es, request)
    >>> pofile_view.initialize()

As we can see, the view updates those attributes correctly.

    >>> pofile_view.offset
    7
    >>> pofile_view.count
    8

And, what happens if we get broken values for the offset and count arguments?

    >>> request = DummyRequest(offset='foo', count='bar')
    >>> pofile_view = POFileView(pofile_es, request)
    >>> pofile_view.initialize()

As we wanted, the given values are ignored and the view class uses the default
ones.

    >>> pofile_view.offset
    0
    >>> pofile_view.count
    10

What about the argument to filter messagesets?

    >>> request = DummyRequest(show='translated')
    >>> pofile_view = POFileView(pofile_es, request)
    >>> pofile_view.initialize()

Yeah, it detects it correctly and stores the attribute as it should be.

    >>> pofile_view.show
    'translated'

It's time to test the navigation.

    >>> request = DummyRequest()
    >>> pofile_view = POFileView(pofile_es, request)
    >>> pofile_view.initialize()

By default, we are at the beginning.

    >>> pofile_view.is_at_beginning
    True

And in this case, we have more messages than the ones rendered per page.

    >>> pofile_view.count < len(pofile_view.context.potemplate)
    True

And thus, we cannot be at the end.

    >>> pofile_view.is_at_end
    False

We move to the next 10 mesages.

    >>> request = DummyRequest(offset=10)
    >>> pofile_view = POFileView(pofile_es, request)
    >>> pofile_view.initialize()

Now, we are not at the beginning.

    >>> pofile_view.is_at_beginning
    False

And as we have more than 20 messages with this IPOFile.

    >>> len(pofile_view.context.potemplate) > 20
    True

We are neither at the end.

    >>> pofile_view.is_at_end
    False

And finally, moving to the next 10 entries.

    >>> request = DummyRequest(offset=30)
    >>> pofile_view = POFileView(pofile_es, request)
    >>> pofile_view.initialize()

We continue far from the beginning.

    >>> pofile_view.is_at_beginning
    False

But this time, we reached the end.

    >>> pofile_view.is_at_end
    True

Let's move to the navigation URLS testing.

We get a request without any argument.

    >>> request = DummyRequest()
    >>> pofile_view = POFileView(pofile_es, request)
    >>> pofile_view.initialize()

We get a clean URL without default values.

    >>> pofile_view.createURL()
    'http://this.is.a/fake/url'

That URL is exactly the same as the one pointing to the beginning of the
translation form.

    >>> pofile_view.beginning_URL
    'http://this.is.a/fake/url'

And as we have 22 messages:

    >>> len(pofile_view.context.potemplate)
    22

and a count of 10 messages per page:

    >>> pofile_view.count
    10

The end URL has an offset of 20

    >>> pofile_view.end_URL
    'http://this.is.a/fake/url?offset=20'

Now, let's see what happens when we request a concrete offset.

    >>> request = DummyRequest(offset=10)
    >>> pofile_view = POFileView(pofile_es, request)
    >>> pofile_view.initialize()

The beginning URL does not change.

    >>> pofile_view.beginning_URL
    'http://this.is.a/fake/url'

The previous one is exactly the same as the beginning.

    >>> pofile_view.previous_URL
    'http://this.is.a/fake/url'

The next one increases the offset in 10 entries.

    >>> pofile_view.next_URL
    'http://this.is.a/fake/url?offset=20'

And as we saw before, we only have three pages to see all messages so
the next page is also the ending one.

    >>> pofile_view.end_URL
    'http://this.is.a/fake/url?offset=20'

Let's complicate it a bit more changing the count of messages per page and
requesting an offset out of range.

    >>> request = DummyRequest(offset=42, count=43)
    >>> pofile_view = POFileView(pofile_es, request)
    >>> pofile_view.initialize()

If the offset is too high, it should drop to accomodate the count.

    >>> pofile_view.createURL()
    'http://this.is.a/fake/url?count=43'

also, the count is higer than the number of entries so the end URL is the same
as the base one.

    >>> pofile_view.end_URL
    'http://this.is.a/fake/url?count=43'

Now, we are going to check the show parameter.

If we request the default value ('all'), the URL should not show that
parameter.
    >>> request = DummyRequest(show='all')
    >>> pofile_view = POFileView(pofile_es, request)
    >>> pofile_view.initialize()

And we don't show it.

    >>> pofile_view.createURL()
    'http://this.is.a/fake/url'

Let's try with another option that is not the default one...

    >>> request = DummyRequest(show='translated')
    >>> pofile_view = POFileView(pofile_es, request)
    >>> pofile_view.initialize()

This time, we get it.

    >>> pofile_view.createURL()
    'http://this.is.a/fake/url?show=translated'

It's time to test that we get the right message sets from the submitted form.

    >>> request = DummyRequest()
    >>> pofile_view = POFileView(pofile_es, request)
    >>> pofile_view.initialize()

We get the first entry.

    >>> for pomsgset_view in pofile_view.pomsgset_views:
    ...     if pomsgset_view.potmsgset.id == 130:
    ...         break

The id for this message set is the one we expected.

    >>> pomsgset_view.potmsgset.id
    130

And as it's the first entry, its sequence number is also the right one.

    >>> pomsgset_view.sequence
    1

Test that the associated msgid is the one we want.

    >>> pomsgset_view.msgid
    u'evolution addressbook'

How many lines does it have.

    >>> pomsgset_view.max_lines_count
    1

And as it has only one line, it's not a multi line message set.

    >>> pomsgset_view.is_multi_line
    False

It does not have a plural msgid.

    >>> pomsgset_view.msgid_plural is None
    True

And thus, it only has one translation.

    >>> pomsgset_view.translation_range
    [0]

Which is the one we wanted.

    >>> pomsgset_view.getTranslation(0)
    u'libreta de direcciones de Evolution'

Finally, we are going to test the tab index generator to be sure the TAB key
will work as expected when navigating over the translation form.

    >>> request = DummyRequest()
    >>> pofile_view = POFileView(pofile_es, request)
    >>> pofile_view.initialize()

First time we call it, first position.

    >>> pofile_view.tab_index
    1

Next time we call it, it's increased.

    >>> pofile_view.tab_index
    2

And that's all, folks!
