= Hosted files =

Some resources have binary files, usually images, associated with
them. The Launchpad web service exposes these files as resources that
respond to GET, PUT, and DELETE. The files themselves are managed by a
service-specific backend implementation.

    >>> from canonical.lazr.testing.webservice import (
    ...     CookbookWebServiceCaller)
    >>> webservice = CookbookWebServiceCaller()


== File resources ==

A cookbook starts out with a link to a cover image, but no actual cover.

    >>> from urllib import quote
    >>> greens_url = quote("/cookbooks/Everyday Greens")
    >>> greens = webservice.get(greens_url).jsonBody()
    >>> greens['cover_link']
    u'http://.../cookbooks/Everyday%20Greens/cover'

    >>> greens_cover = greens['cover_link']
    >>> print webservice.get(greens_cover)
    HTTP/1.1 404 Not Found
    ...

We can upload a cover with PUT.

    >>> print webservice.put(greens_cover, 'image/png',
    ...                      "Pretend this is an image file.")
    HTTP/1.1 200 Ok
    ...

Once the cover has been uploaded, we can GET it. The resource acts
as a dispatcher pointing to the externally-hosted mugshot on the public
Internet.

    >>> result = webservice.get(greens_cover)
    >>> print result
    HTTP/1.1 303 See Other
    ...
    Location: http://librarian.dev/files/cover
    <BLANKLINE>

Note that the name of the file is "cover", the same as the field
whose value we set to the file. This is because we didn't specify a
Content-Disposition header.

PUT is also used to modify a hosted file. Here's one that provides a
filename as part of Content-Disposition.

    >>> print webservice.put(greens_cover, 'image/png',
    ...                      "Pretend this is another image file.",
    ...                      {'Content-Disposition':
    ...                       'attachment; filename="greens-cover.png"'})
    HTTP/1.1 200 Ok
    ...

The new cover is available at a different URL, and it's got the
filename obtained from Content-Disposition:

    >>> result = webservice.get(greens_cover)
    >>> print result
    HTTP/1.1 303 See Other
    ...
    Location: http://librarian.dev/.../greens-cover.png
    <BLANKLINE>

If a file has a custom filename (set through the website or a previous
request that included Content-Disposition), and you modify it without
specifying a value for Content-Disposition, it retains its old value.

    >>> print webservice.put(greens_cover, 'image/png',
    ...                      "Pretend this is yet another image.")
    HTTP/1.1 200 Ok
    ...

    >>> result = webservice.get(greens_cover)
    >>> print result
    HTTP/1.1 303 See Other
    ...
    Location: http://librarian.dev/.../greens-cover.png
    <BLANKLINE>

Deleting a cover (with DELETE) disables the redirect.

    >>> print webservice.delete(greens_cover)
    HTTP/1.1 200 Ok
    ...

    >>> print webservice.get(greens_cover)
    HTTP/1.1 404 Not Found
    ...


== Error handling ==

You can't change a hosted file by PUTting to the URI of the entry that
owns the file.

    >>> greens['cover_link'] = 'http://google.com/logo.png'

    >>> import simplejson
    >>> print webservice.put(greens_url, 'application/json',
    ...     simplejson.dumps(greens))
    HTTP/1.1 400 Bad Request
    ...
    cover_link: To modify this field you need to send a PUT request to its
    URI (http://.../cookbooks/Everyday%20Greens/cover).

If a hosted file is read-only, the client won't be able to modify or
delete it.

   >>> url = '/recipes/1/prepared_image'
   >>> print webservice.put(url, 'application/x-tar-gz', 'fakefiledata')
   HTTP/1.1 405 Method Not Allowed
   Allow: GET
   ...

   >>> print webservice.delete(url)
   HTTP/1.1 405 Method Not Allowed
   Allow: GET
   ...
