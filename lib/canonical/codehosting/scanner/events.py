# Copyright 2009 Canonical Ltd.  All rights reserved.

"""Events generated by the scanner."""

__metaclass__ = type
__all__ = [
    'NewRevision',
    'RevisionsRemoved',
    'TipChanged',
    ]


class ScannerEvent:
    """Base scanner event."""

    def __init__(self, db_branch, bzr_branch):
        """"Construct a scanner event.

        :param db_branch: The database IBranch.
        :param bzr_branch: The Bazaar branch being scanned.
        """
        self.db_branch = db_branch
        self.bzr_branch = bzr_branch


class NewRevision(ScannerEvent):
    """A new revision has been found in the branch."""

    def __init__(self, db_branch, bzr_branch, db_revision, bzr_revision,
                 revno):
        """Construct a `NewRevision` event.

        :param db_branch: The database branch.
        :param bzr_branch: The Bazaar branch.
        :param db_revision: An `IRevision` for the new revision.
        :param bzr_revision: The new Bazaar revision.
        :param revno: The revision number of the new revision, None if not
            mainline.
        """
        super(NewRevision, self).__init__(db_branch, bzr_branch)
        self.db_revision = db_revision
        self.bzr_revision = bzr_revision
        self.revno = revno

    def isMainline(self):
        """Is the new revision a mainline one?"""
        return self.revno is not None


class TipChanged(ScannerEvent):
    """The tip of the branch has changed."""

    def __init__(self, db_branch, bzr_branch, initial_scan):
        """Construct a `TipChanged` event.

        :param db_branch: The database branch.
        :param bzr_branch: The Bazaar branch.
        :param initial_scan: Is this the first scan of the branch?
        """
        super(TipChanged, self).__init__(db_branch, bzr_branch)
        self.initial_scan = initial_scan

    @property
    def old_tip_revision_id(self):
        """The tip revision id from the last scan."""
        return self.db_branch.last_scanned_id

    @property
    def new_tip_revision_id(self):
        """The new tip revision id from this scan."""
        return self.bzr_branch.last_revision()


class RevisionsRemoved(ScannerEvent):
    """Revisions have been removed from the branch."""

    def __init__(self, db_branch, bzr_branch, removed_history):
        """Construct a `RevisionsRemoved` event.

        :param db_branch: The database branch.
        :param bzr_branch: The Bazaar branch.
        :param removed_history: The mainline database `IRevision` objects that
            are no longer present in the mainline of the Bazaar branch.
        """
        super(RevisionsRemoved, self).__init__(db_branch, bzr_branch)
        self.removed_history = removed_history


class ScanCompleted(ScannerEvent):
    """The scan has been completed and the database is up-to-date."""

    def __init__(self, db_branch, bzr_branch, bzr_ancestry, logger):
        super(ScanCompleted, self).__init__(db_branch, bzr_branch)
        self.bzr_ancestry = bzr_ancestry
        # This is kind of ick. In a strict Zope sense, the logger should
        # probably be a registered utility.
        self.logger = logger
