Support Tracker Email Interface
===============================

The support tracker has an email interface, although it's quite limited
at the moment. The only thing you can do is to add comments. This is an
important feature, though, since it ensures that if a user decides to
reply to a ticket notification, his email won't be lost, it will be
added to the ticket.

When a comment is added, a SQLObjectModifiedEvent is generated. Let's
create and register a listener for it, so that we know that the event
is generated properly. We use a class instead of a function, in order
to provide a way of de-activating the subscriber. Otherwise this
subscriber will be active in other tests, and make them fail:

    >>> from zope.app.tests import ztapi
    >>> from canonical.launchpad.interfaces import ITicket
    >>> from canonical.launchpad.event.interfaces import (
    ...     ISQLObjectModifiedEvent)
    >>> class OnTicketModified:
    ...     active = True
    ...     def __call__(self, ticket, modified_event):
    ...         if not self.active:
    ...             return
    ...         new_comments = set(ticket.messages)
    ...         added_comments = new_comments.difference(
    ...             modified_event.object_before_modification.messages)
    ...         print "Ticket #%s modified." % ticket.id
    ...         for comment in added_comments:
    ...             print "Comment from %s: %s" % (
    ...                 comment.owner.displayname, comment.text_contents)
    >>> on_ticket_modified = OnTicketModified()
    >>> ztapi.subscribe(
    ...     (ITicket, ISQLObjectModifiedEvent), None, on_ticket_modified)

Now, if we let SupportTrackerHandler process an email, we can see that
the comment was added to the ticket:

    >>> from canonical.launchpad.mail.handlers import SupportTrackerHandler
    >>> from email.Utils import formatdate, make_msgid
    >>> from canonical.launchpad.mail import signed_message_from_string
    >>> handler = SupportTrackerHandler()
    >>> def send_comment_email(ticket_id, from_addr, subject, body):
    ...     login(from_addr)
    ...     lines = ['From: %s' % from_addr]
    ...     to_addr = 'ticket%s@support.launchpad.net' % ticket_id
    ...     lines.append('To: %s' % to_addr)
    ...     lines.append('Date: %s' % formatdate())
    ...     msgid = make_msgid()
    ...     lines.append('Message-Id: %s' % msgid)
    ...     lines.append('Subject: %s' % subject)
    ...     lines.append('')
    ...     lines.append(body)
    ...     raw_msg = '\n'.join(lines)
    ...     msg = signed_message_from_string(raw_msg)
    ...     if handler.process(msg, msg['To']):
    ...         return msgid
    ...     else:
    ...         return None

    >>> comment_msgid = send_comment_email(
    ...     1, 'test@canonical.com', 'Hi', 'This is a comment.')
    Ticket #1 modified.
    Comment from Sample Person: This is a comment.

    >>> from canonical.launchpad.interfaces import ITicketSet
    >>> ticket_one = getUtility(ITicketSet).get(1)
    >>> comment_msgid in [
    ...     comment.rfc822msgid for comment in ticket_one.messages]
    True

Let's add a comment from Foo Bar as well.

    >>> comment_msgid = send_comment_email(
    ...     2, 'foo.bar@canonical.com', 'Hey', 'This is another comment.')
    Ticket #2 modified.
    Comment from Foo Bar: This is another comment.

    >>> ticket_two = getUtility(ITicketSet).get(2)
    >>> comment_msgid in [
    ...     comment.rfc822msgid for comment in ticket_two.messages]
    True

If we try to send an email to a ticket that doesn't exist, the handler
won't process it:

    >>> comment_msgid = send_comment_email(
    ...     1234, 'foo.bar@canonical.com', 'Hey', 'This is another comment.')
    >>> comment_msgid is None
    True

If we send an email to an address that is not similar to a ticket
address at all, the handler won't process it:

    >>> raw_msg = """From: test@canonical.com
    ... To: foo@support.launchpad.net
    ... Subject: Hello
    ...
    ... Hello there."""
    >>> msg = signed_message_from_string(raw_msg)
    >>> handler.process(msg, msg['To'])
    False

Lastly, let's add a comment by simulating sending an email and invoking
the general mail processor.

    >>> from canonical.config import config
    >>> to_addr = 'ticket1@%s' % config.tickettracker.email_domain
    >>> raw_msg = """From: test@canonical.com
    ... X-Original-To: %(to_addr)s
    ... Subject: A new comment
    ... Message-Id: <comment1@localhost>
    ... Date: Mon, 02 Jan 2006 15:42:07 -0000
    ...
    ... This is a new comment.
    ... """ % {'to_addr': to_addr}
    >>> from canonical.launchpad.mail.stub import test_emails
    >>> test_emails.append(('test@canonical.com', [to_addr], raw_msg))

    >>> from canonical.launchpad.mail.incoming import handleMail
    >>> handleMail()
    INFO:process-mail:Opening the mail box.
    INFO:process-mail:Processing mail 0
    Ticket #1 modified.
    Comment from Sample Person: This is a new comment.
    <BLANKLINE>
    INFO:process-mail:Closing the mail box.

    >>> ticket_one = getUtility(ITicketSet).get(1)
    >>> '<comment1@localhost>' in [
    ...     comment.rfc822msgid for comment in ticket_one.messages]
    True

    >>> on_ticket_modified.active = False
