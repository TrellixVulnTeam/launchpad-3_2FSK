= Code Review Comments =

Set up required objects

    >>> # We need to be admin to add a landing target to a random branch
    >>> login('foo.bar@canonical.com')
    >>> merge_proposal = factory.makeBranchMergeProposal()
    >>> merge_proposal_url = canonical_url(merge_proposal)
    >>> logout()

    >>> nopriv_browser = setupBrowser(auth="Basic no-priv@canonical.com:test")
    >>> nopriv_browser.open(merge_proposal_url)
    >>> nopriv_browser.getLink('Add a comment/review').click()
    >>> nopriv_browser.getControl('Subject').value = 'my subject'
    >>> nopriv_browser.getControl('Comment').value = 'my body'
    >>> nopriv_browser.getControl('Add').click()
    >>> nopriv_browser.url == merge_proposal_url
    True

Adding a comment or review to a merge proposal will take the user back
to the main merge proposal page.

    >>> anon_browser.open(merge_proposal_url)
    >>> def print_comments(klass, browser=None, index=0):
    ...     if browser is None:
    ...         browser = anon_browser
    ...     tags = find_tags_by_class(browser.contents, klass)
    ...     for count, tag in enumerate(tags):
    ...         if count == index:
    ...             print extract_text(tag)

    >>> print_comments('boardCommentDetails')
    No Privileges Person wrote ...
    >>> print_comments('boardCommentBody')
    my body
    >>> print_comments('commentSuffix')
    Reply

The person's name links back to the main site for that person.

    >>> print anon_browser.getLink('No Privileges Person').url
    http://launchpad.dev/~no-priv

Reply link is displayed even if the user isn't logged in.

    >>> anon_browser.getLink('Reply').click()
    Traceback (most recent call last):
    Unauthorized:...

We can reply to a comment.

    >>> nopriv_browser = setupBrowser(auth="Basic no-priv@canonical.com:test")
    >>> nopriv_browser.open(merge_proposal_url)
    >>> nopriv_browser.getLink('Reply').click()
    >>> nopriv_browser.getControl('Subject').value = 'Subjects are nice.'
    >>> nopriv_browser.getControl('Comment').value = ('I like this.\n'
    ... 'I wish I had time to review it properly\n\n'
    ... 'This is a longer\nmessage with several\nlines')
    >>> nopriv_browser.getControl('Vote').displayValue = ['Abstain']
    >>> nopriv_browser.getControl('Tag').value = 'timeless'
    >>> nopriv_browser.getControl('Add').click()

After this, we are taken to the main page for the merge proposal

    >>> print_comments('boardCommentDetails', nopriv_browser, index=1)
    Voted: Abstain No Privileges Person wrote ... ago

The comment is shown in full, but hidden, and is shown with javascipt.
The shorter comment is shown with a hyperlink to show the full comment.
If javascript is not available, the link takes the user to a view that
shows the entire message.

If the summary is over three lines, then it ends with an ellipse.

    >>> print_comments('boardCommentBody', nopriv_browser, index=2)
    I like this.
    I wish I had time to review it properly ...
    (show full message)

    >>> nopriv_browser.getLink('show full message').click()
    >>> print_comments('boardCommentBody', nopriv_browser)
    I like this.
    I wish I had time to review it properly
    This is a longer message with several lines

The comment's view page has a link that takes us back to the merge proposal.

    >>> nopriv_browser.getLink('Back to merge proposal').click()
    >>> bool(nopriv_browser.url == merge_proposal_url)
    True


== Vote summaries ==

The summary of the votes that have been made for a code review are shown
in a table at the top of the page.

    >>> print extract_text(find_tag_by_id(
    ...     nopriv_browser.contents, 'code-review-votes'))
    Reviewer     Review Type    Date Requested    Status
    No Privileges Person                          Abstained ...second...ago
