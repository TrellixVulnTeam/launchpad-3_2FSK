= Claiming an automatically created team =

Sometimes (mostly when processing package uploads) Launchpad will create new
people when in fact it should have created teams.  When that happens, it
should be possible for a user to claim these profiles and turn them into a
teams.

On the home page of any automatically created person, there is a link which
allow the logged in user to claim that profile, but if we have any
indication the profile may actually represent a team, we instead provide a
link to turn it into a team.

For instance, we have an auto-created profile for Alexander Limi, which
definitely doesn't seem to be a team.

    >>> browser.open('http://launchpad.dev/~limi')
    >>> browser.getLink(url='+claim')
    <Link text="Hey, I'm Alexander Limi."...

If a profile does look like a team and there is a logged in user, the link
is different.

    >>> from canonical.launchpad.database import PersonSet
    >>> doc_team = PersonSet().getByName('doc')
    >>> [email.email for email in doc_team.guessedemails]
    [u'doc@lists.ubuntu.com']
    >>> browser.open('http://launchpad.dev/~doc')
    >>> browser.getLink(url='+claimteam')
    Traceback (most recent call last):
    ...
    LinkNotFoundError

    >>> browser.getLink(url='+claim')
    <Link text="Hey, I'm Ubuntu Doc Team."...

    >>> user_browser.open('http://launchpad.dev/~doc')
    >>> user_browser.getLink('Hey, this is a team I run').click()
    >>> user_browser.title
    'Claim team'

Now we enter the doc team's email address to continue the process of
turning that profile into a team.

    >>> user_browser.getControl('Email address').value = 'doc@lists.ubuntu.com'
    >>> user_browser.getControl('Continue').click()
    >>> user_browser.title
    'Ubuntu Doc Team does not use Launchpad'

    >>> for msg in get_feedback_messages(user_browser.contents):
    ...     print msg
    A confirmation message has been sent to 'doc@lists.ubuntu.com'. Follow
    the instructions in that message to finish claiming this team. (If the
    above address is from a mailing list, it may be necessary to talk with
    one of its admins to accept the message from Launchpad so that you can
    finish the process.)

    # Follow the link sent to us by email.
    >>> from canonical.launchpad.mail import stub
    >>> from canonical.launchpad.ftests.logintoken import (
    ...     get_token_url_from_email)
    >>> from_addr, to_addr, msg = stub.test_emails.pop()
    >>> to_addr
    ['doc@lists.ubuntu.com']
    >>> token_url = get_token_url_from_email(msg)
    >>> token_url
    'http://launchpad.dev/token/...'

    >>> user_browser.open(token_url)
    >>> user_browser.title
    'Claim Launchpad team'

    # The owner of the claimed team will be the person who started the claim
    # process and that can't be changed here.
    >>> user_browser.getControl('Team Owner')
    Traceback (most recent call last):
    ...
    LookupError:...
    >>> from BeautifulSoup import BeautifulSoup
    >>> soup = BeautifulSoup(user_browser.contents)
    >>> print extract_text(
    ...     soup.find(attrs={'for': 'field.teamowner'}).findPrevious('tr'))
    Team Owner: No Privileges Person...

    >>> user_browser.getControl('Display Name').value = 'Ubuntu Doc Team'
    >>> user_browser.getControl('Team Description').value = 'The doc team'
    >>> user_browser.getControl('Continue').click()

    >>> user_browser.title
    'Ubuntu Doc Team in Launchpad'
    >>> for msg in get_feedback_messages(user_browser.contents):
    ...     print msg
    Team claimed successfully

    >>> print extract_text(
    ...     find_tag_by_id(user_browser.contents, 'membership-summary'))
    Team and membership summary
    Team owner: No Privileges Person
    Membership: 1 active members
    ...

