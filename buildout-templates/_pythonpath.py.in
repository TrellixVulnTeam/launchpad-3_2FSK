# Copyright 2009 Canonical Ltd.  This software is licensed under the
# GNU Affero General Public License version 3 (see the file LICENSE).

# NOTE: This is a generated file.  The original is in
# buildout-templates/_pythonpath.py.in

__metaclass__ = type

import os
import site
import sys

stdlib_paths = [
    ${indented-stdlib-paths}
    ]
egg_paths = [
    ${indented-egg-paths}
    ]
site_dirs = [
    ${indented-dir-paths}
    ]
clean_modules = [
    'os',
    '_pythonpath',
    'site',
    'sitecustomize',
    'sys',
    ${clean-sys-modules}
    ]

def set_path():
    previously_imported = {}
    # We get a copy of the keys rather than simply iterating because we will
    # be mutating the dictionary.
    for k in sys.modules.keys():
        if k not in clean_modules:
            previously_imported[k] = sys.modules.pop(k)

    # We keep the very first path because that is typically the directory
    # of the file that imported us, which should continue to have precedence.
    sys.path[1:] = egg_paths
    sys.path.extend(stdlib_paths)
    # Add the site_dirs before `addsitedir` in case it has setuptools.
    sys.path.extend(site_dirs)
    # Process all buildout-controlled eggs before site-packages by importing
    # pkg_resources.  This is only important for namespace packages, so it may
    # not have been added, so ignore import errors.
    try:
        import pkg_resources
    except ImportError:
        pass
    # Process .pth files.
    for p in site_dirs:
        site.addsitedir(p)

    # We don't want to have dropped any packages that weren't already added
    # back by what we just did.  If we did, there's a good chance that the
    # world will now be insane.  Quit now, and let's fix it.
    unexpected = set(previously_imported).difference(sys.modules)
    if unexpected:
        raise RuntimeError(
            'Found unexpected module(s): %s\n\nImport _pythonpath earlier!' %
            (', '.join(sorted(unexpected)),))

    # Make subprocesses have the same environment.
    os.environ['PYTHONPATH'] = os.pathsep.join(sys.path)

    # Enable Storm's C extensions
    os.environ['STORM_CEXTENSIONS'] = '1'

    # We don't want to bother tests or logs with these.
    import warnings
    warnings.filterwarnings(
        'ignore',
        'Module .+ was already imported from .+, but .+ is being added.*',
        UserWarning)

try:
    # We try two smoke tests.  The first checks to see that lib has been
    # added.
    import lp
    # XXX gary 10-19-2009 bug 455737
    # The second wants to see if the egg paths have been added.  The
    # only reason this is necessary is because, as of this writing, our
    # buildbot configuration sets PYTHONPATH at one point to include
    # lib, but not the rest of the eggs.  This means that importing lp
    # will work, but importing ZConfig won't.  The right fix here is to
    # change our buildbot to not set PYTHONPATH.  That's not an option
    # at this instance in time because the LOSAs are swamped with
    # another task. We can remove this comment, the following import,
    # and ``sys.modules.pop('lp', None)`` below when buildbot's
    # configuration is changed.
    import ZConfig
except ImportError:
    sys.modules.pop('lp', None)
    set_path()
