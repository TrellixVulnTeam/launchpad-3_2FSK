= PocketChroot =

PocketChroot records combine DistroArchSeries, Pocket and a Chroot.

Chroot are identified per LibraryFileAlias and we offer three method
based on IDistroArchSeries to handle them: get, add and update.

  >>> from canonical.launchpad.interfaces import IDistributionSet
  >>> from canonical.launchpad.interfaces import ILibraryFileAliasSet
  >>> from canonical.lp.dbschema import PackagePublishingPocket


Grab a distroarchseries:

  >>> ubuntu = getUtility(IDistributionSet)['ubuntu']
  >>> hoary = ubuntu['hoary']
  >>> hoary_i386 = hoary['i386']

Grab some files to be used as Chroots (it doesn't really matter what
they are, they simply need to be provide ILFA interface):

  >>> chroot1 = getUtility(ILibraryFileAliasSet)[1]
  >>> chroot2 = getUtility(ILibraryFileAliasSet)[2]

Check if getPocketChroot returns None for unknown chroots:

  >>> p_chroot = hoary_i386.getPocketChroot(
  ...     pocket=PackagePublishingPocket.UPDATES)
  >>> p_chroot is None
  True

Check if getChroot returns the 'default' argument on not found chroots:

  >>> hoary_i386.getChroot(
  ...     pocket=PackagePublishingPocket.UPDATES, default='duuuuh')
  'duuuuh'

Invoke addOrUpdateChroot for missing chroot, so it will insert a new
record in PocketChroot:

  >>> p_chroot = hoary_i386.addOrUpdateChroot(
  ...      pocket=PackagePublishingPocket.UPDATES, chroot=chroot1)
  >>> print p_chroot.id
  1
  >>> print p_chroot.distroarchseries.architecturetag
  i386
  >>> print p_chroot.chroot.id,
  1
  >>> print p_chroot.pocket.name
  UPDATES

Invoke addOrUpdateChroot on an existent PocketChroot, it will update
the chroot:

  >>> p_chroot = hoary_i386.addOrUpdateChroot(
  ...      pocket=PackagePublishingPocket.UPDATES, chroot=chroot2)
  >>> print p_chroot.id
  1
  >>> print p_chroot.distroarchseries.architecturetag
  i386
  >>> print p_chroot.chroot.id,
  2
  >>> print p_chroot.pocket.name
  UPDATES


Ensure chroot was updated by retriving it from DB again:

  >>> hoary_i386.getPocketChroot(PackagePublishingPocket.UPDATES).chroot.id
  2

Check if getChroot returns the correspondent Chroot LFA instance for
valid chroots

  >>> chroot = hoary_i386.getChroot(
  ...     pocket=PackagePublishingPocket.UPDATES)
  >>> chroot.id
  2

Force transaction commit in order to test DB constraints:

  >>> import transaction
  >>> transaction.commit()


Invoke addOrUpdateChroot for an unknown chroot, it creates a new
PocketChroot record:

  >>> p_chroot = hoary_i386.addOrUpdateChroot(
  ...      pocket=PackagePublishingPocket.RELEASE, chroot=chroot1)
  >>> print p_chroot.id
  2
  >>> print p_chroot.distroarchseries.architecturetag
  i386
  >>> print p_chroot.chroot.id,
  1
  >>> print p_chroot.pocket.name
  RELEASE
