Our OpenID 1.1 implementation supports the OpenID 2.0 feature where the
consumer need not specify the identity URL, instead leaving it up to the
OpenID provider to determine it. We call this mode 'OP Identifier' for
lack of a better name.

    >>> from canonical.launchpad.ftests.openid import install_consumer
    >>> install_consumer()


To do this, the consumer simply needs to specify the identity as
'http://specs.openid.net/auth/2.0/identifier_select'. If authorization is
successful, the consumer can determine the actual identity from the
response and do further validation as normal.

    >>> from urllib import urlencode
    >>> args = urlencode({
    ...     'openid.mode': 'checkid_setup',
    ...     'openid.identity':
    ...         'http://specs.openid.net/auth/2.0/identifier_select',
    ...     'openid.return_to': 'http://launchpad.dev/+openid-consumer',
    ...     'openid.trust_root': 'http://launchpad.dev/+openid-consumer',
    ...     })
    >>> sabdfl_browser = setupBrowser()
    >>> setup_url = 'http://openid.launchpad.dev/?%s' % args
    >>> sabdfl_browser.handleErrors = True
    >>> sabdfl_browser.open(setup_url)
    >>> sabdfl_browser.handleErrors = False
    >>> sabdfl_browser.getControl('E-mail address',
    ...                           index=0).value = 'mark@hbd.com'
    >>> sabdfl_browser.getControl('Password', index=0).value = 'test'
    >>> sabdfl_browser.getControl('Log In', index=0).click()


Now we are logged in, we can see that the identity URL has been calculated
for us.

    >>> print find_main_content(sabdfl_browser.contents)
    <...
    <em>http://launchpad.dev/+openid-consumer</em>
    has asked us for confirmation that you are
    <em>Mark Shuttleworth</em>.
    ...

    >>> sabdfl_browser.getControl('Allow').click()
    >>> print sabdfl_browser.contents
    Consumer received GET
    ...
    openid.identity:http://openid.launchpad.dev/+id/sabdfl_oid
    openid.mode:id_res
    openid.return_to:http://launchpad.dev/+openid-consumer
    ...

    >>> from canonical.launchpad.ftests.openid import uninstall_consumer
    >>> uninstall_consumer()

