= The HWDB API =

The HWDB API allows access to the HWDB tables.

== The HWDB application root ==

The HWDB application root provides the core methods to access HWDB
tables.

    >>> from canonical.lazr.testing.webservice import pprint_entry
    >>> hwdb_root = webservice.get('/+hwdb').jsonBody()
    >>> pprint_entry(hwdb_root)
    resource_type_link: u'http://api.launchpad.dev/beta/#hwdb'
    self_link: u'http://api.launchpad.dev/beta/+hwdb'

=== Device Queries and Devices ===

The method HWDBApplication.devices returns known devices matching
the given parameters bus an vendor ID. (See
doc/hwdb-device-tables.txt for details about the underlying table
HWDevice.)

    >>> devices = webservice.get(
    ...     '/+hwdb?ws.op=devices&bus=System&vendor_id=MSI').jsonBody()

A device entry provides the attributes bus_product_id, name and variant.

    >>> for entry in devices['entries']:
    ...     pprint_entry(entry)
    bus: u'System'
    bus_product_id: u'MS-7369'
    id: 1
    name: u'MS-7369'
    resource_type_link: u'http://api.launchpad.dev/beta/#h_w_device'
    self_link: u'http://api.launchpad.dev/beta/+hwdb/+device/1'
    variant: None
    vendor_id: u'MSI'
    vendor_name: u'MSI'

The query parameter `bus` must be a bus name as enumerated by HWBus.

    >>> print webservice.get(
    ...     '/+hwdb?ws.op=devices&bus=NoSuchBus&vendor_id=MSI')
    HTTP/1.1 400 Bad Request
    ...
    bus: Invalid value "NoSuchBus". Acceptable values are: System, PCI,
    USB, IEEE1394, SCSI, Parallel Port, Serial port, IDE, ATA, Floppy, ...

Omitting the query parameters `bus` or `vendor_id` leads to an error.

    >>> print webservice.get(
    ...     '/+hwdb?ws.op=devices&bus=System')
    HTTP/1.1 400 Bad Request
    ...
    vendor_id: Required input is missing.

    >>> print webservice.get(
    ...     '/+hwdb?ws.op=devices&vendor_id=MSI')
    HTTP/1.1 400 Bad Request
    ...
    bus: Required input is missing.

HWDBApplication.devices() allows the optional parameters product_id. Only
devices matching the given value are returned.

    >>> devices = webservice.get(
    ...     '/+hwdb?ws.op=devices&bus=System&vendor_id=MSI&product_id=MS-7369')
    >>> for entry in devices.jsonBody()['entries']:
    ...     pprint_entry(entry)
    bus: u'System'
    bus_product_id: u'MS-7369'
    id: 1
    name: u'MS-7369'
    resource_type_link: u'http://api.launchpad.dev/beta/#h_w_device'
    self_link: u'http://api.launchpad.dev/beta/+hwdb/+device/1'
    variant: None
    vendor_id: u'MSI'
    vendor_name: u'MSI'

    >>> devices = webservice.get(
    ...     '/+hwdb?ws.op=devices&bus=System&vendor_id=MSI&product_id=nothing')
    >>> print devices.jsonBody()['entries']
    []

Single device records can be accessed too.

    >>> device = webservice.get('/+hwdb/+device/2').jsonBody()
    >>> pprint_entry(device)
    bus: u'PCI'
    bus_product_id: u'0x0455'
    id: 2
    name: u'MCP65 USB Controller'
    resource_type_link: u'http://api.launchpad.dev/beta/#h_w_device'
    self_link: u'http://api.launchpad.dev/beta/+hwdb/+device/2'
    variant: None
    vendor_id: u'0x10de'
    vendor_name: u'nVidia Corporation'

A 404 error is returned, when a non-existing ID is passed in the URL...

    >>> print webservice.get('/+hwdb/+device/1000000')
    HTTP/1.1 404 Not Found
    ...
    NotFound: Object: <canonical.launchpad.systemhomes.HWDBApplication
    ... name: u'1000000'

...and when an otherwise invalid ID is passed.

    >>> print webservice.get('/+hwdb/+device/nonsense')
    HTTP/1.1 404 Not Found
    ...
    NotFound: Object: <canonical.launchpad.systemhomes.HWDBApplication
    ... name: u'nonsense'

