= Web Service Project Groups =


== Project group collection ==

It is possible to get a batched list of all the project groups.

    >>> group_collection = webservice.get("/projectgroups").jsonBody()
    >>> group_collection['resource_type_link']
    u'http://.../#project_groups'
    >>> group_collection['total_size']
    7

    >>> from operator import itemgetter
    >>> project_group_entries = sorted(
    ...     group_collection['entries'], key=itemgetter('name'))
    >>> project_group_entries[0]['self_link']
    u'http://.../apache'
    >>> for project_group in project_group_entries:
    ...   print project_group['display_name']
    Apache
    GNOME
    ...
    the Mozilla Project

It's possible to search the list and get a subset of the project groups.

    >>> group_collection = webservice.named_get(
    ...     "/projectgroups", "search", text="Apache").jsonBody()
    >>> for project_group in group_collection['entries']:
    ...   print project_group['display_name']
    Apache

Searching without providing a search string is the same as getting all
the project groups.

    >>> group_collection = webservice.named_get(
    ...     "/projectgroups", "search").jsonBody()
    >>> project_group_entries = sorted(
    ...     group_collection['entries'], key=itemgetter('name'))
    >>> for project_group in project_group_entries:
    ...   print project_group['display_name']
    Apache
    GNOME
    ...
    the Mozilla Project


== Project group entry ==

Project groups are available at their canonical URL on the API virtual host.

    >>> from canonical.lazr.testing.webservice import pprint_entry

    >>> mozilla = webservice.get('/mozilla').jsonBody()
    >>> pprint_entry(mozilla)
    active: True
    active_milestones_collection_link: u'http://.../mozilla/active_milestones'
    all_milestones_collection_link: u'http://.../mozilla/all_milestones'
    bug_reporting_guidelines: None
    bug_tracker_link: None
    date_created: u'...'
    description: u'The Mozilla Project...'
    display_name: u'the Mozilla Project'
    driver_link: None
    freshmeat_project: None
    homepage_content: None
    homepage_url: u'http://www.mozilla.org/'
    icon_link: u'http://.../mozilla/icon'
    logo_link: u'http://.../mozilla/logo'
    mugshot_link: u'http://.../mozilla/mugshot'
    name: u'mozilla'
    official_bug_tags: []
    owner_link: u'http://.../~name12'
    projects_collection_link: u'http://.../mozilla/projects'
    registrant_link: u'http://.../~name12'
    resource_type_link: u'...'
    reviewed: False
    self_link: u'http://.../mozilla'
    sourceforge_project: None
    summary: u'The Mozilla Project...'
    title: u'The Mozilla Project'
    wiki_url: None

The milestones can be accessed through the active_milestones_collection_link
and the all_milestones_collection_link.

    >>> response = webservice.get(mozilla['active_milestones_collection_link'])
    >>> active_milestones = response.jsonBody()
    >>> print_self_link_of_entries(active_milestones)
    http://.../mozilla/+milestone/1.0

    >>> response = webservice.get(mozilla['all_milestones_collection_link'])
    >>> all_milestones = response.jsonBody()
    >>> print_self_link_of_entries(all_milestones)
    http://.../mozilla/+milestone/1.0


== Project entry ==

Projects are available at their canonical URL on the API virtual host.

    >>> firefox = webservice.get('/firefox').jsonBody()
    >>> pprint_entry(firefox)
    active: True
    active_milestones_collection_link: u'http://.../firefox/active_milestones'
    all_milestones_collection_link: u'http://.../firefox/all_milestones'
    branches_collection_link: u'http://.../firefox/branches'
    brand_link: u'http://.../firefox/brand'
    bug_reporting_guidelines: None
    bug_tracker_link: None
    commercial_subscription_is_due: True
    commercial_subscription_link: None
    date_created: u'2004-09-24T20:58:02.185708+00:00'
    description: u'The Mozilla Firefox web browser'
    development_focus_link: u'http://.../firefox/trunk'
    display_name: u'Mozilla Firefox'
    download_url: None
    driver_link: None
    freshmeat_project: None
    homepage_url: None
    icon_link: u'http://.../firefox/icon'
    is_permitted: False
    license_approved: False
    license_info: None
    license_reviewed: False
    licenses: []
    logo_link: u'http://.../firefox/logo'
    name: u'firefox'
    official_bug_tags: []
    owner_link: u'http://.../~name12'
    programming_language: None
    project_group_link: u'http://.../mozilla'
    qualifies_for_free_hosting: False
    registrant_link: u'http://.../~name12'
    releases_collection_link: u'http://.../firefox/releases'
    remote_product: None
    resource_type_link: u'http://.../#project'
    reviewer_whiteboard: None
    screenshots_url: None
    self_link: u'http://.../firefox'
    series_collection_link: u'http://.../firefox/series'
    sourceforge_project: None
    summary: u'The Mozilla Firefox web browser'
    title: u'Mozilla Firefox'
    wiki_url: None

Some entries for projects are only available to admins.  Here we see
several that are not available to non-privileged users marked as
'redacted'.

    >>> firefox = user_webservice.get('/firefox').jsonBody()
    >>> pprint_entry(firefox)
    active: True
    active_milestones_collection_link: u'http://.../firefox/active_milestones'
    all_milestones_collection_link: u'http://.../firefox/all_milestones'
    branches_collection_link: u'http://.../firefox/branches'
    brand_link: u'http://.../firefox/brand'
    bug_reporting_guidelines: None
    bug_tracker_link: None
    commercial_subscription_is_due: True
    commercial_subscription_link: None
    date_created: u'2004-09-24T20:58:02.185708+00:00'
    description: u'The Mozilla Firefox web browser'
    development_focus_link: u'http://.../firefox/trunk'
    display_name: u'Mozilla Firefox'
    download_url: None
    driver_link: None
    freshmeat_project: None
    homepage_url: None
    icon_link: u'http://.../firefox/icon'
    is_permitted:...redacted...
    license_approved:...redacted...
    license_info: None
    license_reviewed:...redacted...
    licenses: []
    logo_link: u'http://.../firefox/logo'
    name: u'firefox'
    official_bug_tags: []
    owner_link: u'http://.../~name12'
    programming_language: None
    project_group_link: u'http://.../mozilla'
    qualifies_for_free_hosting: False
    registrant_link: u'http://.../~name12'
    releases_collection_link: u'http://.../firefox/releases'
    remote_product: None
    resource_type_link: u'http://.../#project'
    reviewer_whiteboard:...redacted...
    screenshots_url: None
    self_link: u'http://.../firefox'
    series_collection_link: u'http://.../firefox/series'
    sourceforge_project: None
    summary: u'The Mozilla Firefox web browser'
    title: u'Mozilla Firefox'
    wiki_url: None

Branches can be accessed through the branches_collection_link.

    >>> response = webservice.get(firefox['branches_collection_link'])
    >>> branches = response.jsonBody()
    >>> print_self_link_of_entries(branches)
    http://.../~name12/firefox/main
    http://.../~sabdfl/firefox/release--0.9.1
    http://.../~sabdfl/firefox/release-0.8
    http://.../~sabdfl/firefox/release-0.9
    http://.../~sabdfl/firefox/release-0.9.2

The milestones can be accessed through the active_milestones_collection_link
and the all_milestones_collection_link.

    >>> response = webservice.get(firefox['active_milestones_collection_link'])
    >>> active_milestones = response.jsonBody()
    >>> print_self_link_of_entries(active_milestones)
    http://.../firefox/+milestone/1.0

    >>> response = webservice.get(firefox['all_milestones_collection_link'])
    >>> all_milestones = response.jsonBody()
    >>> print_self_link_of_entries(all_milestones)
    http://.../firefox/+milestone/1.0

The project group can be accessed through the project_group_link.

    >>> webservice.get(firefox['project_group_link']).jsonBody()['self_link']
    u'http://.../mozilla'

A list of series can be accessed through the series_collection_link.

    >>> response = webservice.get(firefox['series_collection_link'])
    >>> serieses = response.jsonBody()
    >>> print serieses['total_size']
    2
    >>> print_self_link_of_entries(serieses)
    http://.../firefox/1.0
    http://.../firefox/trunk

A list of releases can be accessed through the releases_collection_link.

    >>> response = webservice.get(firefox['releases_collection_link'])
    >>> releases = response.jsonBody()
    >>> print releases['total_size']
    4
    >>> print_self_link_of_entries(releases)
    http://.../firefox/1.0/1.0.0
    http://.../firefox/trunk/0.9
    http://.../firefox/trunk/0.9.1
    http://.../firefox/trunk/0.9.2

The development focus series can be accessed through the
development_focus_link.

    >>> response = webservice.get(firefox['development_focus_link'])
    >>> response.jsonBody()['self_link']
    u'http://.../firefox/trunk'

Attributes can be edited via the webservice.patch() method.

    >>> from simplejson import dumps
    >>> patch = {
    ...     u'driver_link': webservice.getAbsoluteUrl('/~sabdfl'),
    ...     u'homepage_url': u'http://sf.net/firefox',
    ...     u'licenses': [u'Python License', u'GNU GPL v2'],
    ...     u'bug_tracker_link':
    ...         webservice.getAbsoluteUrl('/bugs/bugtrackers/mozilla.org'),
    ...     }
    >>> print webservice.patch(
    ...     '/firefox', 'application/json', dumps(patch))
    HTTP/1.1 209 Content Returned
    ...
    >>> firefox = webservice.get('/firefox').jsonBody()
    >>> firefox['driver_link']
    u'http://.../~sabdfl'
    >>> firefox['homepage_url']
    u'http://sf.net/firefox'

    >>> webservice.get(firefox['driver_link']).jsonBody()['self_link']
    u'http://.../~sabdfl'
    >>> webservice.get(firefox['owner_link']).jsonBody()['self_link']
    u'http://.../~name12'
    >>> webservice.get(firefox['bug_tracker_link']).jsonBody()['self_link']
    u'http://.../bugs/bugtrackers/mozilla.org'

Read-only attributes, like registrant, cannot be modified via the
webservice.patch() method.

    >>> patch = {
    ...     u'registrant_link': webservice.getAbsoluteUrl('/~sabdfl'),
    ...     }
    >>> print webservice.patch(
    ...     '/firefox', 'application/json', dumps(patch))
    HTTP/1.1 400 Bad Request
    ...
    registrant_link: You tried to modify a read-only attribute.

    >>> firefox = webservice.get('/firefox').jsonBody()
    >>> firefox['registrant_link']
    u'http://.../~name12'

Similarly the date_created attribute cannot be modified.

    >>> original_date_created = firefox['date_created']
    >>> patch = {
    ...     u'date_created': u'2000-01-01T01:01:01+00:00Z'
    ...     }
    >>> print webservice.patch(
    ...     '/firefox', 'application/json', dumps(patch))
    HTTP/1.1 400 Bad Request
    ...
    date_created: You tried to modify a read-only attribute.

    >>> firefox = webservice.get('/firefox').jsonBody()
    >>> firefox['date_created'] == original_date_created
    True


== Project collection ==

It is possible to get a batched list of all the projects.

    >>> project_collection = webservice.get("/projects").jsonBody()
    >>> project_collection['resource_type_link']
    u'http://.../#projects'
    >>> project_collection['total_size']
    23

    >>> project_entries = sorted(
    ...     project_collection['entries'], key=itemgetter('display_name'))
    >>> len(project_entries)
    5
    >>> project_entries[0]['self_link']
    u'http://.../gnome-terminal'
    >>> for project in project_entries:
    ...   print project['display_name']
    GNOME Terminal
    Mozilla Firefox
    Redfish
    The Landscape Project
    Tomcat

It's possible to search the list and get a subset of the project groups.

    >>> project_collection = webservice.named_get(
    ...     "/projects", "search", text="Apache").jsonBody()
    >>> projects = [project['display_name'] for project in project_collection['entries']]
    >>> for project_name in sorted(projects):
    ...     print project_name
    Derby
    Tomcat

If you don't specify "text" to the search a batched list of all the
projects is returned.

    >>> project_collection = webservice.named_get("/projects", "search").jsonBody()
    >>> len(project_collection['entries'])
    5

It is also possible to search for projects by a text string by adding
the ws.op=search parameter.

    >>> project_collection = webservice.get(
    ...   "/projects?ws.op=search&text=gnome").jsonBody()
    >>> project_collection['total_size']
    4

The latest projects registered can be retrieved.

    >>> latest = webservice.named_get(
    ...     "/projects", "latest").jsonBody()
    >>> entries = sorted(
    ...    latest['entries'], key=itemgetter('display_name'))
    >>> for project in entries:
    ...     print project['display_name']
    Bazaar
    Derby
    Launchpad Translations
    Mega Money Maker
    Redfish

There is a method for doing a query about attributes related to
project licensing.  We can find all projects with unreviewed
licenses.

    >>> unreviewed = webservice.named_get(
    ...     "/projects", "licensing_search",
    ...     license_reviewed=False).jsonBody()

    >>> entries = sorted(
    ...    unreviewed['entries'], key=itemgetter('display_name'))
    >>> for project in entries:
    ...     print project['display_name']
    APTonCD
    Arch mirrors
    Bazaar
    Bazaar
    Derby

Or those that are reviewed.

    >>> reviewed = webservice.named_get(
    ...     "/projects", "licensing_search",
    ...     license_reviewed=True).jsonBody()

    >>> entries = sorted(
    ...    reviewed['entries'], key=itemgetter('display_name'))
    >>> for project in entries:
    ...     print project['display_name']
    Launchpad Translations
    alsa-utils
    python gnome2 dev
    unassigned syncs

We can also find all projects with no licensing information.

    >>> no_licenses = webservice.named_get(
    ...     "/projects", "licensing_search",
    ...     has_zero_license=True).jsonBody()

    >>> entries = sorted(
    ...    no_licenses['entries'], key=itemgetter('display_name'))
    >>> for project in entries:
    ...     print project['display_name']
    APTonCD
    Arch mirrors
    Bazaar
    Bazaar
    Derby

We can find projects based on creation date.

    >>> old = webservice.named_get(
    ...     "/projects", "licensing_search",
    ...     created_before="2006-01-01").jsonBody()

    >>> entries = sorted(
    ...    old['entries'], key=itemgetter('display_name'))
    >>> for project in entries:
    ...     print project['display_name']
    Arch mirrors
    Bazaar
    Evolution
    GNOME Terminal
    Gnome Applets

Similarly we can find new projects.

    >>> new = webservice.named_get(
    ...     "/projects", "licensing_search",
    ...     created_after="2006-01-01").jsonBody()

    >>> entries = sorted(
    ...    new['entries'], key=itemgetter('display_name'))
    >>> for project in entries:
    ...     print project['display_name']
    APTonCD
    Bazaar
    Derby
    Jokosher
    Launchpad

All of the projects of a given license can be found.

    >>> proprietary = webservice.named_get(
    ...     "/projects", "licensing_search",
    ...     licenses=["Other/Proprietary"]).jsonBody()

    >>> entries = sorted(
    ...    proprietary['entries'], key=itemgetter('display_name'))
    >>> for project in entries:
    ...     print project['display_name']
    Mega Money Maker

The use of "licensing_search" is restricted to commercial admins.
Attempting to access it as a normal users results in an exception.

    >>> proprietary = user_webservice.named_get(
    ...     "/projects", "licensing_search",
    ...     licenses=["Other/Proprietary"]).jsonBody()
    Traceback (most recent call last):
    ...
    ValueError: HTTP/1.1 401 Unauthorized
    ...

The project collection has a method for creating a new project.

    >>> def create_project(name, display_name, title, summary,
    ...                    description=None, project=None, homepage_url=None,
    ...                    screenshots_url=None, wiki_url=None,
    ...                    download_url=None, freshmeat_project=None,
    ...                    sourceforge_project=None, programming_lang=None,
    ...                    licenses=(), license_info=None,
    ...                    license_reviewed=False,
    ...                    registrant=None):
    ...     return webservice.named_post(
    ...         "/projects", "new_project",
    ...         name=name, display_name=display_name,
    ...         title=title, summary=summary, description=description,
    ...         homepage_url=homepage_url, screenshots_url=screenshots_url,
    ...         wiki_url=wiki_url, download_url=download_url,
    ...         freshmeat_project=freshmeat_project,
    ...         sourceforge_project=sourceforge_project,
    ...         programming_lang=programming_lang,
    ...         licenses=licenses, license_info=license_info,
    ...         license_reviewed=license_reviewed,
    ...         registrant=registrant)

Verify a project does not exist and then create it.

    >>> print webservice.get('/my-new-project')
    HTTP/1.1 404 Not Found
    ...

    >>> print create_project('my-new-project', 'My New Project',
    ...     'My New Project', 'My Shiny New Project',
    ...     licenses=["Zope Public License", "GNU GPL v2"],
    ...     wiki_url="http://example.com/shiny")
    HTTP/1.1 201 Created
    ...
    Location: http://.../my-new-project
    ...

    >>> print webservice.get('/my-new-project')
    HTTP/1.1 200 Ok
    ...

    >>> new_project = webservice.get('/my-new-project').jsonBody()
    >>> print new_project['name']
    my-new-project
    >>> print new_project['display_name']
    My New Project
    >>> print new_project['summary']
    My Shiny New Project
    >>> print sorted(new_project['licenses'])
    [u'GNU GPL v2', u'Zope Public License']
    >>> print new_project['license_reviewed']
    False
    >>> print new_project['homepage_url']
    None

Attempting to create a project with a name that has already been used
is an error.

    >>> print create_project('my-new-project', 'My New Project',
    ...     'My New Project', 'My Shiny New Project')
    HTTP/1.1 400 Bad Request
    ...
    name: my-new-project is already used by another project

If the fields do not validate a Bad Request error is received.  Here
the URL is not properly formed.

    >>> print create_project('my-new-project', 'My New Project',
    ...     'My New Project', 'My Shiny New Project',
    ...     wiki_url="htp://badurl.example.com")
    HTTP/1.1 400 Bad Request
    ...
    wiki_url: The URI scheme "htp" is not allowed.  Only URIs with the
    following schemes may be used: ftp, http, https
    ...


== The pillar set ==

A few features are common to projects, project groups, and
distributions. We call all three "pillars", and publish the common
functionality at an object called the pillar set.

    >>> pillar_set = webservice.get("/pillars").jsonBody()
    >>> pprint_entry(pillar_set)
    featured_pillars_collection_link: u'http://.../pillars/featured_pillars'
    resource_type_link: u'...'
    self_link: u'...'

The featured pillars are available as a separate collection. Because
they're of different resource types, the best way to compare them is
by comparing the self_link, which every resource has.

    >>> featured_link = pillar_set['featured_pillars_collection_link']
    >>> featured_pillars = webservice.get(featured_link).jsonBody()
    >>> featured_pillars['total_size']
    9
    >>> featured_entries = sorted(
    ...     featured_pillars['entries'], key=itemgetter('self_link'))
    >>> for pillar in featured_entries:
    ...     print pillar['self_link']
    http://.../applets
    http://.../bazaar
    ...
    http://.../gnome

    >>> search_result = webservice.named_get(
    ...     "/pillars", "search", text="bazaar").jsonBody()
    >>> found_entries = sorted(search_result['entries'],
    ...     key=itemgetter('self_link'))
    >>> for pillar in found_entries:
    ...     print pillar['self_link']
    http://.../bazaar
    http://.../bzr
    http://.../launchpad

    >>> search_result = webservice.named_get(
    ...     "/pillars", "search", text="bazaar", limit="1").jsonBody()
    >>> for pillar in search_result['entries']:
    ...     print pillar['self_link']
    http://.../bazaar


== Project series entry ==

The entry for a project series is available at its canonical URL on the
virtual host.

    >>> login('test@canonical.com')
    >>> babadoo = factory.makeProduct(name='babadoo')
    >>> foobadoo = factory.makeProductSeries(product=babadoo, name='foobadoo')
    >>> foobadoo.summary = u'Foobadoo support for Babadoo'
    >>> fooey = factory.makeAnyBranch(product=babadoo, name='fooey')
    >>> foobadoo.user_branch = fooey
    >>> logout()

    >>> babadoo_foobadoo = webservice.get('/babadoo/foobadoo').jsonBody()
    >>> pprint_entry(babadoo_foobadoo)
    active_milestones_collection_link: u'http://.../babadoo/foobadoo/active_milestones'
    all_milestones_collection_link: u'http://.../babadoo/foobadoo/all_milestones'
    branch_link: u'http://api.launchpad.dev/beta/~person-name12/babadoo/fooey'
    bug_reporting_guidelines: None
    date_created: u'...'
    display_name: u'foobadoo'
    driver_link: None
    drivers_collection_link: u'http://.../babadoo/foobadoo/drivers'
    name: u'foobadoo'
    official_bug_tags: []
    owner_link: u'http://.../~person-name8'
    project_link: u'http://.../babadoo'
    releases_collection_link: u'http://.../babadoo/foobadoo/releases'
    resource_type_link: u'...'
    self_link: u'http://.../babadoo/foobadoo'
    status: u'Active Development'
    summary: u'Foobadoo support for Babadoo'
    title: u'Babadoo Series: foobadoo'

= Creating a milestone on the product series =

The newMilstone method is called by sending "ws.op=newMilestone"
as a request variable along with the parameters. The
webservice.named_post() method simplifies this for us.

    >>> firefox_1_0 = webservice.get('/firefox/1.0').jsonBody()
    >>> response = webservice.named_post(
    ...     firefox_1_0['self_link'], 'newMilestone', {},
    ...     name='alpha1', date_targeted=u'2005-06-06',
    ...     description='Feature complete but buggy.')
    >>> print response
    HTTP/1.1 201 Created
    ...
    Location: http://.../firefox/+milestone/alpha1
    ...
    >>> milestone = webservice.get(response.getHeader('Location')).jsonBody()
    >>> print milestone['name']
    alpha1
    >>> print milestone['date_targeted']
    2005-06-06T00:00:00
    >>> print milestone['description']
    Feature complete but buggy.

The milestone name must be unique on the product series.

    >>> print webservice.named_post(
    ...     firefox_1_0['self_link'], 'newMilestone', {},
    ...     name='alpha1', dateexpected='157.0',
    ...     description='Feature complete but buggy.')
    HTTP/1.1 400 Bad Request
    ...
    name: The name alpha1 is already used by a milestone in Mozilla Firefox.

The milestone name can only contain letters, numbers, "-", "+", and ".".

    >>> print webservice.named_post(
    ...     firefox_1_0['self_link'], 'newMilestone', {},
    ...     name='!@#$%^&*()', dateexpected='157.0',
    ...     description='Feature complete but buggy.')
    HTTP/1.1 400 Bad Request
    ...
    Invalid name...

Invalid data will return a Bad Request error.

    >>> response = webservice.named_post(
    ...     firefox_1_0['self_link'], 'newMilestone', {},
    ...     name='buggy', date_targeted=u'2005-10-36',
    ...     description='Very buggy.')
    >>> print response
    HTTP/1.1 400 Bad Request
    ...
    date_targeted: Value doesn't look like a date.

= Project release =

Project releases are available at their canonical URL on the API virtual host.

    >>> firefox_1_0_0 = webservice.get('/firefox/1.0/1.0.0').jsonBody()
    >>> pprint_entry(firefox_1_0_0)
    changelog: u''
    code_name: u'First Stable Release'
    date_created: u'2005-06-06T08:59:51.930201+00:00'
    date_released: u'2004-06-28T00:00:00+00:00'
    description: u''
    display_name: u'Mozilla Firefox 1.0.0'
    files_collection_link: u'http://.../firefox/1.0/1.0.0/files'
    owner_link: u'http://.../~name12'
    project_link: u'http://.../firefox'
    project_series_link: u'http://.../firefox/1.0'
    resource_type_link: u'...'
    self_link: u'http://.../firefox/1.0/1.0.0'
    summary: u'After four years of work...'
    title: u'Mozilla Firefox 1.0.0 "First Stable Release"'
    version: u'1.0.0'

The addRelease method is called by sending "ws.op=addRelease"
as a request variable along with the parameters. The
webservice.named_post() method simplifies this for us.

    >>> response = webservice.named_post(
    ...     firefox_1_0['self_link'], 'addRelease', {},
    ...     version='rc1', code_name='Samurai Monkey',
    ...     summary='Best version ever.', description='Ready to launch.',
    ...     changelog='Added 5,000 features.')
    >>> print response
    HTTP/1.1 201 Created
    ...
    Location: http://.../firefox/1.0/rc1
    ...
    >>> release = webservice.get(response.getHeader('Location')).jsonBody()
    >>> print release['version']
    rc1
    >>> print release['code_name']
    Samurai Monkey
    >>> print release['summary']
    Best version ever.
    >>> print release['description']
    Ready to launch.
    >>> print release['changelog']
    Added 5,000 features.


== Project release entries ==

    >>> releases = webservice.get(
    ...     '/firefox/1.0/releases').jsonBody()
    >>> print_self_link_of_entries(releases)
    http://.../firefox/1.0/1.0.0
    http://.../firefox/1.0/rc1


== Project release file collection ==

    >>> pr_files = webservice.get(
    ...     '/firefox/trunk/0.9.2/files').jsonBody()
    >>> print_self_link_of_entries(pr_files)
    http://.../firefox/trunk/0.9.2/+file/firefox-0.9.2.orig.tar.gz


== Milestone entry ==

The entry for a milestone is available at its canonical URL on the API virtual
host.

    >>> firefox_milestone_1_0 = webservice.get(
    ...     '/firefox/+milestone/1.0').jsonBody()
    >>> pprint_entry(firefox_milestone_1_0)
    date_targeted: u'2056-10-16T18:31:44.293448'
    description: None
    is_visible: True
    name: u'1.0'
    official_bug_tags: []
    resource_type_link: u'...'
    self_link: u'http://.../firefox/+milestone/1.0'
    series_target_link: u'http://.../firefox/trunk'
    target_link: u'http://.../firefox'
    title: u'Milestone 1.0 for Mozilla Firefox'


== Project release entries ==

    >>> releases = webservice.get(
    ...     '/firefox/1.0/releases').jsonBody()
    >>> print_self_link_of_entries(releases)
    http://...firefox/1.0/1.0.0
    http://.../firefox/1.0/rc1

They can be deleted with the 'delete' operation.

    >>> results = webservice.named_post('/firefox/1.0/rc1', 'delete')
    >>> print results
    HTTP/1.1 200 Ok
    ...


== Project release file entry ==

Project release files are available at their canonical URL on the API
virtual host.

    >>> url = '/firefox/trunk/0.9.2/+file/firefox-0.9.2.orig.tar.gz'
    >>> result = webservice.get(url).jsonBody()
    >>> pprint_entry(result)
    date_uploaded: u'2005-06-06T08:59:51.926792+00:00'
    description: None
    file_link: u'http://.../firefox/trunk/0.9.2/+file/firefox-0.9.2.orig.tar.gz/file'
    file_type: u'Code Release Tarball'
    project_release_link: u'http://.../firefox/trunk/0.9.2'
    resource_type_link: u'http://.../#project_release_file'
    self_link: u'http://.../firefox/trunk/0.9.2/+file/firefox-0.9.2.orig.tar.gz'
    signature_link: u'http://.../firefox/trunk/0.9.2/+file/firefox-0.9.2.orig.tar.gz/signature'

The actual file redirects to the librarian when accessed.

    >>> url = '/firefox/trunk/0.9.2/+file/firefox-0.9.2.orig.tar.gz/file'
    >>> result = webservice.get(url)
    >>> print result
    HTTP/1.1 303 See Other
    ...
    Location: http://localhost:58000/.../firefox-0.9.2.orig.tar.gz
    ...

The signature file will redirect too, if found.  In this case there is
no signature so we get a 404.

    >>> url = '/firefox/trunk/0.9.2/+file/firefox-0.9.2.orig.tar.gz/signature'
    >>> result = webservice.get(url)
    >>> print result
    HTTP/1.1 404 Not Found
    ...

The file and signature on a Project Release File are 'readonly'.
Trying to put new content will result in a ForbiddenAttribute error.

    >>> url = '/firefox/trunk/0.9.2/+file/firefox-0.9.2.orig.tar.gz/file'
    >>> response = webservice.put(url, 'application/x-tar-gz', 'fakefiledata')
    >>> print response
    HTTP/1.1 405 Method Not Allowed
    Allow: GET
    ...

    >>> url = '/firefox/trunk/0.9.2/+file/firefox-0.9.2.orig.tar.gz/signature'
    >>> response = webservice.put(url, 'pgpapplication/data', 'signaturedata')
    >>> print response
    HTTP/1.1 405 Method Not Allowed
    Allow: GET
    ...


== Project release files ==

Project release files can be added to a project release using the
API 'add_file' method.

    >>> # Firefox 1.0/1.0.0 has no files associated with it.
    >>> files_url = '/firefox/1.0/1.0.0/files'
    >>> ff_100_files = webservice.get(files_url).jsonBody()
    >>> print_self_link_of_entries(ff_100_files)

    >>> pr_url = '/firefox/1.0/1.0.0'
    >>> ff_100 = webservice.get(pr_url).jsonBody()
    >>> file_content="first attachment file content"
    >>> sig_file_content="hash hash hash"
    >>> response = webservice.named_post(ff_100['self_link'], 'add_file',
    ...     filename='filename.txt',
    ...     file_content=file_content,
    ...     content_type='plain/txt',
    ...     signature_filename='filename.txt.md5',
    ...     signature_content=sig_file_content,
    ...     file_type='README File',
    ...     description="test file")
    >>> print response
    HTTP/1.1 201 Created
    ...
    Location: http://...firefox/1.0/1.0.0/+file/filename.txt
    ...

Firefox 1.0/1.0.0 now has one file.

    >>> files_url = '/firefox/1.0/1.0.0/files'
    >>> ff_100_files = webservice.get(files_url).jsonBody()
    >>> print_self_link_of_entries(ff_100_files)
    http://...firefox/1.0/1.0.0/+file/filename.txt

The file type and description are optional.  If no signature is
available then it must be explicitly set to None.

    >>> file_content="second attachment file content"
    >>> response = webservice.named_post(ff_100['self_link'], 'add_file',
    ...     filename='filename2.txt',
    ...     file_content=file_content,
    ...     content_type='plain/txt')
    >>> print response
    HTTP/1.1 201 Created
    ...
    Location: http://...firefox/1.0/1.0.0/+file/filename2.txt
    ...

Firefox 1.0/1.0.0 now has two files.

    >>> files_url = '/firefox/1.0/1.0.0/files'
    >>> ff_100_files = webservice.get(files_url).jsonBody()
    >>> print_self_link_of_entries(ff_100_files)
    http://...firefox/1.0/1.0.0/+file/filename.txt
    http://...firefox/1.0/1.0.0/+file/filename2.txt

The file redirects to the librarian when accessed.

    >>> url = 'http://api.launchpad.dev/beta/firefox/1.0/1.0.0/+file/filename.txt/file'
    >>> result = webservice.get(url)
    >>> print result
    HTTP/1.1 303 See Other
    ...
    Location: http://localhost:58000/.../filename.txt
    ...

Project release files can be deleted using the 'delete' method.  The
project maintainer, project series owners, admins, or registry experts
can delete files.

    >>> url = 'http://api.launchpad.dev/beta/firefox/1.0/1.0.0/+file/filename.txt'
    >>> results = webservice.named_post(url, 'delete')
    >>> print results
    HTTP/1.1 200 Ok
    ...

    >>> files_url = '/firefox/1.0/1.0.0/files'
    >>> ff_100_files = webservice.get(files_url).jsonBody()
    >>> print_self_link_of_entries(ff_100_files)
    http://api.launchpad.dev/beta/firefox/1.0/1.0.0/+file/filename2.txt


== Commercial subscriptions ==

If a project has a commercial-use subscription then it can be
retrieved through the API.

    >>> # Do some housekeeping not using the API to setup the Mega
    >>> # Money Maker with a commercial subscription.
    >>> from zope.component import getUtility
    >>> from canonical.launchpad.interfaces import IProductSet
    >>> from canonical.launchpad.ftests import login, logout
    >>> login('bac@canonical.com')
    >>> product_set = getUtility(IProductSet)
    >>> mmm = product_set.getByName('mega-money-maker')
    >>> print mmm.commercial_subscription
    None

    >>> owner = mmm.owner
    >>> mmm.redeemSubscriptionVoucher('mmm_voucher', owner, owner, 12,
    ...     'notes')
    >>> print mmm.commercial_subscription.product.name
    mega-money-maker
    >>> logout()

    >>> mmm = webservice.get("/mega-money-maker").jsonBody()
    >>> print mmm['display_name']
    Mega Money Maker

    >>> print mmm['commercial_subscription_link']
    http://.../mega-money-maker/+commercialsubscription/1
