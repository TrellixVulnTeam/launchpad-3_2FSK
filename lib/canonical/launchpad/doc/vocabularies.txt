Introduction
============

Vocabularies are lists of terms. In Launchpad's Component Architecture (CA), a
vocabulary is a list of terms that a widget (normally a selection style widget)
"speaks", i.e. its allowed values.

This document is about some of the vocabularies found in Launchpad.

    >>> from canonical.launchpad.ftests import login
    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> login('foo.bar@canonical.com')

Values, Tokens, and Titles
==========================

In Launchpad, we generally use "tokenized vocabularies." Each term in a
vocabulary has a value, token and title. In human terms, a term would be
rendered in a select widget like this:

<option value="$token">$title</option>

The Value is probably the data you would store in your DB. The Token is used to
uniquely identify a Term, and the Title is the thing you display to the user.

Have a look at a few of the vocabularies below for clarification.

Launchpad Vocabularies
======================

There are two kinds of vocabularies in Launchpad: enumerable and
non-enumerable. In human terms, enumerable vocabularies are short and sweet
enough to render in a select widget, where non-enumerable vocabularies require
a special query interface to make it easy to choose just one or a couple of
options from several hundred, or several thousand, or more.

Vocabularies should not be imported - they can be retrieved from the
vocabulary registry.

    >>> from zope.component import getUtility
    >>> from zope.schema.vocabulary import getVocabularyRegistry
    >>> vocabulary_registry = getVocabularyRegistry()
    >>> product_vocabulary = vocabulary_registry.get(None, "Product")

Enumerable Vocabularies
=======================

Creating a new Enumeratable Vocabulary based on an existent dbschema
constant:

    >>> from canonical.lp import dbschema
    >>> from canonical.launchpad.vocabularies import vocab_factory
    >>> PackagingVocabulary = vocab_factory(dbschema.PackagingType)
    
The right place to do it is in the file vocabularies/dbschema.py.
Note: don't forget to registry your brand new instance for zope lookup
in configure.zcml.

o PackagingVocabulary - reflects the available constants for
  Packaging.packaging field.

In cases where we won't have many rows, some of the database
vocabularies can be enumerated over.

o DistroReleaseVocabulary - reflects the available distribution releases.
  Results are ordered by `name`

    >>> distrorelease_vocabulary = vocabulary_registry.get(
    ...     None,"DistroRelease")
    >>> for term in distrorelease_vocabulary:
    ...     print "%s %20s %s" % (term.value, term.token, term.title)
    7 debian/sarge         Sarge
    8 debian/sid           Sid
    6 debian/woody         WOODY
    9 guadalinex/2k5       Guada 2005
    4 redhat/7.0           Seven
    2 redhat/six           Six Six Six
    5 ubuntu/grumpy        The Grumpy Groundhog Release
    3 ubuntu/hoary         The Hoary Hedgehog Release
    1 ubuntu/warty         The Warty Warthog Release
    >>> distrorelease_vocabulary.getTermByToken('ubuntu/hoary').value
    3
    >>> [term.token for term in distrorelease_vocabulary.search('woody')]
    ['debian/woody']
    >>> [term.token for term in distrorelease_vocabulary.search('debian')]
    ['debian/sarge', 'debian/sid', 'debian/woody']
    >>> [term.token for term in distrorelease_vocabulary.search('invalid')]
    []
    >>> [term.token for term in distrorelease_vocabulary.search('')]
    []

Non-Enumerable Vocabularies
===========================

Although you technically *could* iterate over these, in launchpad it
would be stupid to do so due to their expected size on the production
database.

o ProductVocabulary - the list of selectable products. Results are
  ordered by displayname.

    >>> product_vocabulary = vocabulary_registry.get(None, "Product")
    >>> gnome_products = product_vocabulary.search("gnome")
    >>> l = [product_term.title for product_term in gnome_products]
    >>> l[:2]
    [u'The Evolution Groupware Application', u'The GNOME Terminal Emulator']
    >>> l[2:4]
    [u'The Gnome Panel Applets', u'Ubuntu']
    >>> l[4:]
    [u'python gnome2 dev']
    >>> arch = product_vocabulary.getTermByToken("arch-mirrors")
    >>> arch.title 
    u'Arch archive mirrors'

o PersonVocabulary - all people and teams. Results are ordered by familyname,
  givenname, displayname

    >>> vocab = vocabulary_registry.get(None, "Person")
    >>> stuff = vocab.search('team')
    >>> [t.token for t in stuff]
    ['support@ubuntu.com']

o ValidPersonOrTeam - all 'valid' persons or teams. This is currently defined
  as people with a password, a preferred email address and not merged
  (Person.merged is None) or any team.

    >>> vocab = vocabulary_registry.get(None, "ValidPersonOrTeam")
    >>> stuff = vocab.search('team')
    >>> [t.token for t in stuff]
    ['support@ubuntu.com']

    Stuart hasn't validated his email address; he's not a valid Person.
    >>> stuff = vocab.search('bishop')
    >>> [t.token for t in stuff]
    []

    'foo.bar@canonical.com' is a valid Person.
    >>> stuff = vocab.search('foo')
    >>> [t.token for t in stuff]
    ['foo.bar@canonical.com']

o ValidOwner - all 'valid' persons or teams in Launchpad.

    >>> vocab = vocabulary_registry.get(None, "ValidOwner")
    >>> stuff = vocab.search('team')
    >>> [t.token for t in stuff]
    ['support@ubuntu.com']

o ValidTeamOwner - With the exception of the team itself and all teams owned
  by that team, all valid persons and teams are valid owners for the team 
  in context.

  >>> team = getUtility(IPersonSet).getByName('name17')
  >>> person = getUtility(IPersonSet).getByName('name16')

  ValidTeamOwner needs a context.
  >>> vocab = vocabulary_registry.get(None, "ValidTeamOwner")
  Traceback (most recent call last):
  ...
  ValueError: ...

  ValidTeamOwner's context must be a team.
  >>> vocab = vocabulary_registry.get(person, "ValidTeamOwner")
  Traceback (most recent call last):
  ...
  ValueError: ...

  'name17' is not a valid owner for itself.
  >>> vocab = vocabulary_registry.get(team, "ValidTeamOwner")
  >>> team in vocab
  False

  'name16' is a valid owner for 'name17'.
  >>> vocab = vocabulary_registry.get(team, "ValidTeamOwner")
  >>> person in vocab
  True

o ValidGPGKey - all LP valid GPG key for a given person, it user FTI
  to query on Person table and return the respective rows from GPGKey
  table.

   XXX cprov 20050227
   The concept of 'Valid GPGKey' is not well defined yet.

    >>> vocab = vocabulary_registry.get(None, "ValidGPGKey")
    >>> stuff = vocab.search('mark')
    >>> [t.token for t in stuff]
    ['1']


XXX: document more vocabularies here, particularly when they break!
