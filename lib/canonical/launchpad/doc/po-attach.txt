
Rosetta PO Attach Cron Script
=============================

get_domains_from_tarball
------------------------

First, load all needed dependencies for this test:

    >>> from zope.component import getUtility
    >>> from zope.interface import implements
    >>> from zope.app.tests import ztapi
    >>> from canonical.launchpad import helpers
    >>> from canonical.launchpad.scripts import rosetta
    >>> from canonical.launchpad.interfaces import IDistroReleaseSet, \
    ...     IPOTemplateSet, ISourcePackageNameSet
    >>> from canonical.launchpad.database import POTemplateSet
    >>> from canonical.launchpad.ftests import login

To be able to use the database, first we connect as anonymous.

    >>> login('launchpad.anonymous')

Get the distrorelease and sourcepackagename that we are going to use here.

    >>> distroreleaseset = getUtility(IDistroReleaseSet)
    >>> distroreleases = distroreleaseset.findByName('hoary')
    >>> for distrorelease in distroreleases:
    ...     if distrorelease.distribution.name == 'ubuntu':
    ...         break
    ...
    >>> sourcepackagenameset = getUtility(ISourcePackageNameSet)
    >>> sourcepackagename = sourcepackagenameset['uberfrob']

Now, it's time to start testing things:

A case with only Debconf translations.

    >>> tarball = helpers.RosettaWriteTarFile.files_to_tarfile({
    ...     'source/debian/po/templates.pot': 'whatever',
    ...     'source/debian/po/cy.po': 'whatever',
    ...     'source/debian/po/es.po': 'whatever2',
    ...     })
    >>> domains = rosetta.get_domains_from_tarball(
    ...     distrorelease, sourcepackagename, tarball)
    >>> len(domains)
    1
    >>> domains[0].domainname
    u'pkgconf-uberfrob'
    >>> domains[0].pot_contents
    'whatever'
    >>> domains[0].pot_filename
    'templates.pot'
    >>> domains[0].domain_paths
    ['debian/po']
    >>> domains[0].binary_packages
    []
    >>> po_files = domains[0].po_files
    >>> po_files['es']
    'whatever2'
    >>> po_files['cy']
    'whatever'


We have only one translation domain, a .pot file and a set of .po files.

    >>> tarball = helpers.RosettaWriteTarFile.files_to_tarfile({
    ...     'uberfrob-package/usr/share/locale/cy/LC_MESSAGES/uberfrob.mo':
    ...         'binary content for cy translation of uberfrob',
    ...     'uberfrob-package/usr/share/locale/es/LC_MESSAGES/uberfrob.mo':
    ...         'binary content for es translation of uberfrob',
    ...     'source/po/template.pot': 'whatever',
    ...     'source/po/cy.po': 'whatever',
    ...     'source/po/es.po': 'whatever2',
    ...     })
    >>> domains = rosetta.get_domains_from_tarball(
    ...     distrorelease, sourcepackagename, tarball)
    >>> len(domains)
    1
    >>> domains[0].domainname
    'uberfrob'
    >>> domains[0].pot_contents
    'whatever'
    >>> domains[0].pot_filename
    'template.pot'
    >>> domains[0].domain_paths
    ['po']
    >>> domains[0].binary_packages
    ['uberfrob-package']
    >>> po_files = domains[0].po_files
    >>> po_files['es']
    'whatever2'
    >>> po_files['cy']
    'whatever'


Now pass in some previously existing PO templates which match ones in the
tarball. The code should reuse the existing PO templates and thus, we will
use a faked implementation of IPOTemplateSet so it contains exactly what we
want.

    >>> class DummyPOTemplateName:
    ...     def __init__(self, name):
    ...         self.name = name
    ...         self.translationdomain = name
    ...
    >>> class DummyPOTemplate:
    ...     def __init__(self, name, path, filename):
    ...         self.potemplatename = DummyPOTemplateName(name)
    ...         self.path = path
    ...         self.filename = filename
    ...
    >>> class DummyPOTemplateSet:
    ...     implements(IPOTemplateSet)
    ...
    ...     def __init__(self):
    ...         pass
    ...     def getSubset(self, sourcepackagename, distrorelease):
    ...         if distrorelease.name == 'hoary':
    ...             subset =  [
    ...                 DummyPOTemplate(
    ...                     name='uberfrob',
    ...                     path='po',
    ...                     filename='uberfrob-splat.pot'),
    ...                 DummyPOTemplate(
    ...                     name='uberfrob-x',
    ...                     path='po-x',
    ...                     filename='uberfrob-xyzzy.pot'),
    ...                 ]
    ...         else:
    ...             subset = []
    ...
    ...         return subset
    ...
    >>> tarball = helpers.RosettaWriteTarFile.files_to_tarfile({
    ...     'uberfrob-package/usr/share/locale/cy/LC_MESSAGES/uberfrob.mo':
    ...         'binary content for cy translation of uberfrob domain',
    ...     'uberfrob-package/usr/share/locale/es/LC_MESSAGES/uberfrob.mo':
    ...         'binary content for es translation of uberfrob domain',
    ...     'uberfrob-package/usr/share/locale/cy/LC_MESSAGES/uberfrob-x.mo':
    ...         'binary content for cy translation of uberfrob-x domain',
    ...     'uberfrob-package/usr/share/locale/es/LC_MESSAGES/uberfrob-x.mo':
    ...         'binary content for es translation of uberfrob-x domain',
    ...     'source/po/uberfrob-splat.pot': 'whatever',
    ...     'source/po/cy.po': 'whatever',
    ...     'source/po/es.po': 'whatever2',
    ...     'source/po-x/uberfrob-xyzzy.pot': 'whatever',
    ...     'source/po-x/cy.po': 'whatever',
    ...     'source/po-x/es.po': 'whatever2',
    ...     })
    ...

    Here, we select the faked IPOTemplateSet implementation that will be used
    inside rosetta.get_domains_from_tarball function.

    >>> ztapi.provideUtility(IPOTemplateSet, DummyPOTemplateSet())
    >>> domains = rosetta.get_domains_from_tarball(
    ...     distrorelease, sourcepackagename, tarball)

    Now, we need to restore the original implementation so the other tests use
    it instead of the fake one.
    >>> ztapi.provideUtility(IPOTemplateSet, POTemplateSet())

    >>> len(domains)
    2

    First domain:

    >>> domains[0].domainname
    'uberfrob-x'
    >>> domains[0].pot_filename
    'uberfrob-xyzzy.pot'

    Second domain:

    >>> domains[1].domainname
    'uberfrob'
    >>> domains[1].pot_filename
    'uberfrob-splat.pot'


We have multiple domains and the filenames of the PO templates in the
source match the names of the MO files in the binary packages. Note that
there are no existing PO templates in this case which could be used.

    >>> tarball = helpers.RosettaWriteTarFile.files_to_tarfile({
    ...     'uberfrob-package/usr/share/locale/cy/LC_MESSAGES/uberfrob.mo':
    ...         'binary content for cy translation of uberfrob domain',
    ...     'uberfrob-package/usr/share/locale/es/LC_MESSAGES/uberfrob.mo':
    ...         'binary content for es translation of uberfrob domain',
    ...     'uberfrob-package/usr/share/locale/cy/LC_MESSAGES/uberfrob-x.mo':
    ...         'binary content for cy translation of uberfrob-x domain',
    ...     'uberfrob-package/usr/share/locale/es/LC_MESSAGES/uberfrob-x.mo':
    ...         'binary content for es translation of uberfrob-x domain',
    ...     'source/po/uberfrob.pot': 'whatever',
    ...     'source/po/cy.po': 'whatever',
    ...     'source/po/es.po': 'whatever2',
    ...     'source/po-x/uberfrob-x.pot': 'whatever',
    ...     'source/po-x/cy.po': 'whatever',
    ...     'source/po-x/es.po': 'whatever2',
    ...     })
    >>> domains = rosetta.get_domains_from_tarball(
    ...     distrorelease, sourcepackagename, tarball)
    >>> len(domains)
    2

    First domain:

    >>> domains[0].domainname
    'uberfrob-x'
    >>> domains[0].pot_contents
    'whatever'
    >>> domains[0].pot_filename
    'uberfrob-x.pot'
    >>> domains[0].domain_paths
    ['po-x']
    >>> domains[0].binary_packages
    ['uberfrob-package']
    >>> po_files = domains[0].po_files
    >>> po_files['es']
    'whatever2'
    >>> po_files['cy']
    'whatever'

    Second domain:

    >>> domains[1].domainname
    'uberfrob'
    >>> domains[1].pot_contents
    'whatever'
    >>> domains[1].pot_filename
    'uberfrob.pot'
    >>> domains[1].domain_paths
    ['po']
    >>> domains[1].binary_packages
    ['uberfrob-package']
    >>> po_files = domains[1].po_files
    >>> po_files['es']
    'whatever2'
    >>> po_files['cy']
    'whatever'


The fallback case, when we can't match a PO template to a domain in the
tarball, or an existing PO template from the database, and it's not a
Debconf template.

    >>> tarball = helpers.RosettaWriteTarFile.files_to_tarfile({
    ...     'uberfrob-package/usr/share/locale/cy/LC_MESSAGES/uberfrob.mo':
    ...         'binary content for cy translation of uberfrob',
    ...     'uberfrob-package/usr/share/locale/es/LC_MESSAGES/uberfrob.mo':
    ...         'binary content for es translation of uberfrob',
    ...     'source/po/uberfrob-splat.pot': 'whatever',
    ...     'source/po/cy.po': 'whatever',
    ...     'source/po/es.po': 'whatever2',
    ...     'source/po-x/uberfrob-xyzzy.pot': 'whatever',
    ...     'source/po-x/cy.po': 'whatever',
    ...     'source/po-x/es.po': 'whatever2',
    ...     })
    >>> domains = rosetta.get_domains_from_tarball(
    ...     distrorelease, sourcepackagename, tarball)
    >>> len(domains)
    2

    First domain:

    >>> domains[0].domainname
    u'review-hoary-uberfrob-1'
    >>> domains[0].pot_filename
    'uberfrob-xyzzy.pot'

    Second domain:

    >>> domains[1].domainname
    u'review-hoary-uberfrob-2'
    >>> domains[1].pot_filename
    'uberfrob-splat.pot'


This is a combination case, when we have a Debconf template and also two
unidentifiable templates.

    >>> tarball = helpers.RosettaWriteTarFile.files_to_tarfile({
    ...     'uberfrob-package/usr/share/locale/cy/LC_MESSAGES/uberfrob.mo':
    ...         'binary content for cy translation of uberfrob',
    ...     'uberfrob-package/usr/share/locale/es/LC_MESSAGES/uberfrob.mo':
    ...         'binary content for es translation of uberfrob',
    ...     'source/debian/po/templates.pot': 'whatever',
    ...     'source/debian/po/cy.po': 'whatever',
    ...     'source/debian/po/es.po': 'whatever2',
    ...     'source/po/uberfrob-splat.pot': 'whatever',
    ...     'source/po/cy.po': 'whatever',
    ...     'source/po/es.po': 'whatever2',
    ...     'source/po-x/uberfrob-xyzzy.pot': 'whatever',
    ...     'source/po-x/cy.po': 'whatever',
    ...     'source/po-x/es.po': 'whatever2',
    ...     })
    >>> domains = rosetta.get_domains_from_tarball(
    ...     distrorelease, sourcepackagename, tarball)
    >>> len(domains)
    3

    First domain:

    >>> domains[0].domainname
    u'pkgconf-uberfrob'
    >>> domains[0].pot_filename
    'templates.pot'

    Second domain:

    >>> domains[1].domainname
    u'review-hoary-uberfrob-1'
    >>> domains[1].pot_filename
    'uberfrob-xyzzy.pot'

    Third domain:

    >>> domains[2].domainname
    u'review-hoary-uberfrob-2'
    >>> domains[2].pot_filename
    'uberfrob-splat.pot'

