People karma
============

In Launchpad, everytime a user performs an action, we give him some karma
points. These karma points are stored in the KarmaAction table and the
assignment to a user is made in the Karma table. The method used to calculate
a users karma is time-dependent, because we want to give more karma points for
actions performed recently. This method is described in 
https://launchpad.canonical.com/KarmaImplementation.

Depending on the action a given person performs in Launchpad, that person can
earn some karma points. This is useful to know how active a user is in
Launchpad.

All karma assigned to a person must be associated with a context (either a
product or a distribution), so that we know to what a user contributes to and
what users are the top contributors for a given product/distribution.

    >>> from zope.component import getUtility
    >>> from zope.interface.verify import verifyObject
    >>> from canonical.launchpad.interfaces import (
    ...     IPersonSet, IPerson, IKarma, IKarmaCache, IProductSet,
    ...     ISourcePackageNameSet, IDistributionSet)
    >>> salgado = getUtility(IPersonSet).getByName('salgado')
    >>> firefox = getUtility(IProductSet).getByName('firefox')
    >>> ubuntu = getUtility(IDistributionSet).getByName('ubuntu')
    >>> thunderbird = getUtility(ISourcePackageNameSet)['thunderbird']

The assignKarma() method is the one to be used when assigning karma to a
person. It must trigger a KarmaAssignedEvent, notifying that karma was
assigned to a given person.

    >>> from canonical.launchpad.ftests.event import TestEventListener
    >>> from canonical.launchpad.event.interfaces import IKarmaAssignedEvent
    >>> def on_assigned_event(person, event):
    ...     print "IKarmaAssignedEvent: %r" % event

    >>> on_assigned_listener = TestEventListener(
    ...     IPerson, IKarmaAssignedEvent, on_assigned_event)

    >>> dummy = salgado.assignKarma('specreviewed', product=firefox)
    IKarmaAssignedEvent: <canonical.launchpad.event.karma.KarmaAssignedEvent...

    >>> on_assigned_listener.unregister()

Salgado wrote the karma framework. Let's give him some karma points.

  - First, some karma by fixing a bug in firefox
    >>> salgado_firefox_karma = salgado.assignKarma('bugfixed', product=firefox)

  - Then some karma by adding a new spec for Ubuntu
    >>> salgado_ubuntu_karma = salgado.assignKarma(
    ...     'addspec', distribution=ubuntu)

  - And finally some karma by marking a Ubuntu thunderbird bug as a duplicate
    >>> salgado_thunderbird_karma = salgado.assignKarma(
    ...     'bugmarkedasduplicate', distribution=ubuntu,
    ...     sourcepackagename=thunderbird)

assignKarma() must return an object implementing IKarma.

    >>> verifyObject(IKarma, salgado_firefox_karma)
    True

The value that you get through IPerson.karma is a cached value that's
calculated daily. That's why it's still 0.

    >>> salgado.karma
    0


Karma Updater
-------------

It would be a problem if every time we wanted to see a user's total karma we
had to calculate it, so we decided to cache this total and update it
periodically. This cache is stored in the KarmaCache/KarmaTotalCache table and
is updated by the foaf-update-karma-cache.py cronscript.

    (Let's commit the current transaction because the script will run in
    another transaction and thus it won't see the changes done on this test
    unless we commit)
    >>> import transaction
    >>> transaction.commit()

    >>> import subprocess
    >>> process = subprocess.Popen(
    ...     'cronscripts/foaf-update-karma-cache.py -q', shell=True,
    ...     stdin=subprocess.PIPE, stdout=subprocess.PIPE,
    ...     stderr=subprocess.PIPE)
    >>> (out, err) = process.communicate()
    >>> out, err
    ('', '')
    >>> process.returncode
    0

    (Now we flush the caches, because 'salgado' is an object that was changed
    in another transaction)
    >>> from canonical.database.sqlbase import flush_database_caches
    >>> flush_database_caches()

    >>> salgado.karma
    80

