Security proxies
----------------

SQLObjects that are security proxied should still behave normally, this includes
being comparable with non-security proxied objects.

First, some imports and set up::

    >>> from canonical.launchpad.ftests.harness import LaunchpadFunctionalTestSetup
    >>> from zope.component import getUtility
    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> from lp.registry.model.person import Person

    >>> LaunchpadFunctionalTestSetup().setUp()

Get a proxied and unproxied person object for the same person, and demonstrate
working comparisons::

    >>> sabdfl = Person.get(1)
    >>> sabdfl_proxied = getUtility(IPersonSet).get(1)
    >>> sabdfl is sabdfl_proxied
    False
    >>> sabdfl == sabdfl
    True
    >>> sabdfl == sabdfl_proxied
    True
    >>> sabdfl_proxied == sabdfl
    True
    >>> sabdfl_proxied == sabdfl_proxied
    True

A dbschema Item can also be given to sqlobject's select() method, or any
of its variants.

    >>> proxied_policy = sabdfl_proxied.subscriptionpolicy
    >>> type(proxied_policy)
    <type 'zope.security._proxy._Proxy'>

    # We don't want this test to fail when we add new person entries, so we
    # compare it against a base number.
    >>> Person.select(Person.q.subscriptionpolicy==proxied_policy).count() > 60
    True
    >>> person = Person.select(Person.q.subscriptionpolicy==proxied_policy)[0]
    >>> person.subscriptionpolicy.name
    'MODERATED'

XXX: stevea: 20051018: Rewrite this test to use security proxies directly
XXX: bug 3315
DB schema objects should be comparable correctly when proxied...

    >>> from canonical.launchpad.interfaces import (
    ...     DistroSeriesStatus, IDistroSeriesSet)
    >>> hoary = getUtility(IDistroSeriesSet).get(3)
    >>> print hoary.status.name
    DEVELOPMENT
    >>> hoary.status == DistroSeriesStatus.DEVELOPMENT
    True
    >>> hoary.status is DistroSeriesStatus.DEVELOPMENT
    False

Finally, tear down the test:

    >>> LaunchpadFunctionalTestSetup().tearDown()

