= People and Teams =

Just as with Launchpad, the web service exposes a uniform interface to people
and teams.  In other words, people and teams occupy the same namespace.  You
treat people and teams as the same type of object, and need to inspect the
object to know whether you're dealing with a person or a team.


== People ==

You can access Launchpad people, and the set of all people, through the web
service interface.  The set of people is available from the service root.

    >>> from launchpadlib.credentials import (
    ...     AccessToken, Consumer, Credentials)
    >>> consumer = Consumer('launchpad-library')
    >>> access_token = AccessToken('salgado-change-anything', 'test')
    >>> credentials = Credentials(consumer, access_token)

    >>> from launchpadlib.launchpad import Launchpad as _Launchpad
    >>> class Launchpad(_Launchpad):
    ...     """A testable Launchpad proxy accessing the demo service root."""
    ...     SERVICE_ROOT = 'http://api.launchpad.dev:8085/beta'

    >>> launchpad = Launchpad(credentials=credentials)
    >>> len(launchpad.people)
    63

You can find a person by name.

    >>> salgado = launchpad.people['salgado']
    >>> salgado.name
    u'salgado'
    >>> salgado.display_name
    u'Guilherme Salgado'
    >>> salgado.is_team
    False

You can iterate through all the people in the set.

    >>> names = sorted(person.name for person in launchpad.people)
    >>> len(names)
    63
    >>> names
    [u'andrelop', u'barbier', u'bug-importer', u'bug-watch-updater',
     ...
     u'stub', u'thumper', u'tsukimi', u'ubuntu-team', u'valyag']

But if no person by that name is registered, you get the expected KeyError...

    >>> launchpad.people['not-a-registered-person']
    Traceback (most recent call last):
    ...
    KeyError: 'not-a-registered-person'

...unless of course, you use the `get()` interface, which acts just like
`dict.get()`.

    >>> launchpad.people.get('salgado').display_name
    u'Guilherme Salgado'
    >>> print launchpad.people.get('not-a-registered-person')
    None
    >>> launchpad.people.get('not-a-registered-person', 'missing')
    'missing'

Besides a name and a display name, a person has many other attributes that you
can read.

    XXX 05-Jun-2008 BarryWarsaw Some of these attributes are links to further
    collections and are not yet tested.  Tests will be added in future
    branches.

    >>> salgado.karma
    0
    >>> print salgado.homepage_content
    None
    >>> #salgado.mugshot
    >>> #salgado.languages
    >>> salgado.hide_email_addresses
    False
    >>> salgado.date_created
    u'2005-06-06T08:59:51.596025+00:00'
    >>> # XXX BarryWarsaw 18-Jun-2008 bug 239818
    >>> #print salgado.timezone
    >>> salgado.is_valid
    True
    >>> #salgado.wiki_names
    >>> #salgado.irc_nicknames
    >>> #salgado.jabber_ids
    >>> #salgado.team_memberships
    >>> #salgado.open_membership_invitations
    >>> #salgado.teams_participated_in
    >>> #salgado.teams_indirectly_participated_in
    >>> #salgado.confirmed_email_addresses
    >>> #salgado.preferred_email_address
    >>> salgado.mailing_list_auto_subscribe_policy
    u'Ask me when I join a team'
    >>> salgado.visibility
    u'Public'


== Teams ==

You also access teams using the same interface.

    >>> team = launchpad.people['ubuntu-team']
    >>> team.name
    u'ubuntu-team'
    >>> team.display_name
    u'Ubuntu Team'
    >>> team.is_team
    True

You can create a new team through the web interface.  The simplest case of
this requires only the new team's name, owner and display name.

    >>> launchpad.people['bassists']
    Traceback (most recent call last):
    ...
    KeyError: 'bassists'

    >>> bassists = launchpad.people.newTeam(
    ...     'bassists', 'Awesome Rock Bass Players')
    >>> bassists.name
    u'bassists'
    >>> bassists.display_name
    u'Awesome Rock Bass Players'
    >>> bassists.is_team
    True

And of course, that team is now accessible directly.

    >>> bassists = launchpad.people['bassists']
    >>> bassists.name
    u'bassists'
    >>> bassists.display_name
    u'Awesome Rock Bass Players'

You cannot create the same team twice.

    >>> launchpad.people.newTeam('bassists', 'Bass Gods')
    Traceback (most recent call last):
    ...
    HTTPError: HTTP Error 400: Bad Request

Actually, the exception contains other useful information.

    >>> from launchpadlib.errors import HTTPError
    >>> try:
    ...     launchpad.people.newTeam('bassists', 'Bass Gods')
    ... except HTTPError, error:
    ...     pass
    >>> sorted(error.response.items())
    [('connection', 'close'), ('content-length', '59'),
     ('content-type', 'text/plain'), ('date', '...'),
     ('server', 'zope.server.http (...)'), ('status', '400'),
     ...]
    >>> error.content
    'name: bassists is already in use by another person or team.'

Besides a name and a display name, a team has many other attributes that you
can read.

    >>> bassists.karma
    0
    >>> print bassists.homepage_content
    None
    >>> bassists.hide_email_addresses
    False
    >>> bassists.date_created
    u'...'
    >>> # XXX BarryWarsaw 18-Jun-2008 bug 239818
    >>> #print bassists.timezone
    >>> bassists.is_valid
    True
    >>> #bassists.team_memberships
    >>> #bassists.open_membership_invitations
    >>> #bassists.teams_participated_in
    >>> #bassists.teams_indirectly_participated_in
    >>> #bassists.confirmed_email_addresses
    >>> #bassists.team_owner
    >>> #bassists.preferred_email_address
    >>> #bassists.members
    >>> #bassists.admins
    >>> #bassists.participants
    >>> #bassists.deactivated_members
    >>> #bassists.expired_members
    >>> #bassists.invited_members
    >>> #bassists.member_memberships
    >>> #bassists.proposed_members
    >>> bassists.visibility
    u'Public'
    >>> print bassists.team_description
    None
    >>> bassists.subscription_policy
    u'Moderated Team'
    >>> bassists.renewal_policy
    u'invite them to apply for renewal'
    >>> print bassists.default_membership_period
    None
    >>> print bassists.default_renewal_period
    None
