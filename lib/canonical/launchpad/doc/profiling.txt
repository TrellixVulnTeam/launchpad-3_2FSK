= Profiling support =

Launchpad supports three mode of profiling. Two are intended to profile
using the test suite, and the other one is used to profile requests in
the app server.

== Profiling the test suite ==

== Profiling requests in pagetests ==

== Profiling request in the app server ==

It is possible to get a profile of each request served by the app
server.

This is controlled by the [profiling] config section. Profiling is
controlled by the profile_requests configuration variable. When this is
True, each request will create a pstats file for the request in the
directory specified in the profile_dir variable.

By default profiling is turned off.

    >>> from canonical.config import config
    >>> config.profiling.profile_requests
    False

(Set the profile directory.)

    >>> import tempfile
    >>> from textwrap import dedent
    >>> profile_dir = tempfile.mkdtemp(prefix='profile')
    >>> config.push('profile_dir', dedent("""
    ...     [profiling]
    ...     profile_dir: %s""" % profile_dir))

So when making a request, no profile information is created.

    >>> import os
    >>> from zope.app.testing.functional import HTTPCaller

    # Close the interaction.
    >>> logout()
    >>> http = HTTPCaller()
    >>> response = http('GET / HTTP/1.0')

    >>> list(os.listdir(profile_dir))
    []

But if profiling is turned on, profiling data will be created in the
directory for the request.

    >>> config.push('profile_on', dedent("""\
    ...     [profiling]
    ...     profile_requests: True"""))

    >>> response = http('GET / HTTP/1.0')

The profile is named on the time of the request start and the thread
that processed it.

    >>> profiles = os.listdir(profile_dir)
    >>> print "\n".join(profiles)
    20...-MainThread.prof

These profile can be loaded using the pstats2 module.

    >>> import pstats2
    >>> stats = pstats2.Stats(os.path.join(profile_dir, profiles[0]))

Making another request will create another profile.

    >>> response = http('GET / HTTP/1.0')

    >>> profiles = os.listdir(profile_dir)
    >>> print "\n".join(profiles)
    20...-MainThread.prof
    20...-MainThread.prof

(Clean up)

    >>> import shutil
    >>> shutil.rmtree(profile_dir)

    >>> old_config = config.pop('profile_dir')
