= OpenIDRPSummary =

The summary of the interaction between an `Account` and an OpenID
Relying Party is represented by the OpenIDRPSummary object.


== IOpenIDRPSummarySet ==

The OpenIDRPSummarySet object manages the OpenIDRPSummary objects.
It implements the IOpenIDRPSummarySet interface to retrieve and create
OpenIDRPSummary objects.

    >>> from zope.component import getUtility
    >>> from zope.interface.verify import verifyObject
    >>> from canonical.launchpad.interfaces.openidserver import (
    ...      IOpenIDRPSummarySet)

    >>> rp_summary_set = getUtility(IOpenIDRPSummarySet)
    >>> verifyObject(IOpenIDRPSummarySet, rp_summary_set)
    True

The getByIdentifier() method returns an iterator of all the summaries
for an identifier.

    # XXX sinzui 2008-09-09 bug=264783:
    # Switch this test to the new openid_identifier and remove the
    # OldIdTestRequest.
    >>> from zope.interface import implements
    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest
    >>> from canonical.launchpad.layers import OpenIDLayer

    >>> class OpenIDTestRequest(LaunchpadTestRequest):
    ...     implements(OpenIDLayer)

    >>> old_request = OpenIDTestRequest(
    ...     SERVER_URL='http://openid.launchpad.dev',
    ...     PATH_INFO='/+id/name16_oid')

    # Only admins are privileged to work with multiple accounts.
    >>> login('foo.bar@canonical.com', old_request)

    >>> def print_openid_rp_summaries(summaries):
    ...     for summary in summaries:
    ...         print summary.account.displayname
    ...         print '  identifier:', summary.openid_identifier
    ...         print '  trust_root:', summary.trust_root

    >>> nopriv_oid_summaries = rp_summary_set.getByIdentifier(
    ...     'http://openid.launchpad.dev/+id/no-priv_oid')
    >>> print_openid_rp_summaries(nopriv_oid_summaries)
    No Privileges Person
      identifier: http://openid.launchpad.dev/+id/no-priv_oid
      trust_root: https://shop.canonical.com
    No Privileges Person
      identifier: http://openid.launchpad.dev/+id/no-priv_oid
      trust_root: http://moodle.org

The iterator has a count of 0 if there are no matches.

    >>> rp_summary_set.getByIdentifier('never-used').count()
    0

The method accepts an only_unknown_trust_roots parameter that will
restrict the list to records for trust roots for which there is no
IOpenIDRPConfig entry.

    >>> from canonical.launchpad.interfaces.openidserver import (
    ...     IOpenIDRPConfigSet)
    >>> shop = getUtility(IOpenIDRPConfigSet).new(
    ...     'https://shop.canonical.com/', 'The Shop', 'For our fans.')
    >>> transaction.commit()
    >>> print_openid_rp_summaries(
    ...     rp_summary_set.getByIdentifier(
    ...         'http://openid.launchpad.dev/+id/no-priv_oid', True))
    No Privileges Person
      identifier: http://openid.launchpad.dev/+id/no-priv_oid
      trust_root: http://moodle.org


== IOpenIDRPSummary ==

The OpenIDRPSummary object implements the IOpenIDRPSummary interface.

    >>> from canonical.launchpad.interfaces.openidserver import (
    ...     IOpenIDRPSummary)

    >>> nopriv_oid_store = nopriv_oid_summaries[0]
    >>> verifyObject(IOpenIDRPSummary, nopriv_oid_store)
    True

Each OpenIDRPSummary is a unique combination of account, identifier,
and trust_root. No other summary may contain the identical information.

    >>> nopriv_oid_store.account.displayname
    u'No Privileges Person'
    >>> nopriv_oid_store.openid_identifier
    u'http://openid.launchpad.dev/+id/no-priv_oid'
    >>> nopriv_oid_store.trust_root
    u'https://shop.canonical.com'

Each summary contains a date_created, date_last_used, and the
total_logins that that it has been used. The date_created property
never changes.

    >>> print nopriv_oid_store.date_created
    2008-02-01 13:01:01.000001+00:00
    >>> print nopriv_oid_store.date_last_used
    2008-04-01 18:01:01.000001+00:00
    >>> nopriv_oid_store.total_logins
    3

The date_last_used and total_logins properties do change. The
increment() method increases the total_logins by 1, and updates
the date_last_used property. If the date_used is not provided, the
current time is used.

    >>> from datetime import datetime, timedelta
    >>> from pytz import UTC

    >>> yesterday = datetime.now(UTC) - timedelta(days=1)
    >>> nopriv_oid_store.increment(date_used=yesterday)
    >>> nopriv_oid_store.total_logins
    4
    >>> nopriv_oid_store.date_last_used == yesterday
    True

    >>> nopriv_oid_store.increment()
    >>> nopriv_oid_store.total_logins
    5
    >>> now = datetime.now(UTC)
    >>> now - nopriv_oid_store.date_last_used < timedelta(seconds=5)
    True


== Creating and updating OpenIDRPSummary objects ==

The OpenIDRPSummarySet object creates and updates OpenIDRPSummary
objects. The record() method decides when to create a new summary, or
update an existing one.

A new OpenIDRPSummary is created when the account, identifier, and trust
root have never been used before. The date_created and date_last_used
will be the same, and the total_logins is 1.

    >>> no_priv_account = nopriv_oid_summaries[0].account

    >>> summary = rp_summary_set.record(
    ...     no_priv_account, 'http://open-blog.org', date_used=yesterday)
    >>> print_openid_rp_summaries([summary])
    No Privileges Person
      identifier: http://openid.launchpad.dev/+id/no-priv_oid
      trust_root: http://open-blog.org

    >>> summary.date_created == yesterday
    True
    >>> summary.date_created == summary.date_last_used
    True
    >>> summary.total_logins
    1

Calling record() a second time with the same account, identifier, and
trust root updates and returns an instance of the summary just created.
The date_used parameter is optional; the date_last_used is set to now.

    >>> now = datetime.now(UTC)
    >>> summary_2 = rp_summary_set.record(
    ...     no_priv_account, 'http://open-blog.org')
    >>> summary_2 == summary
    True
    >>> summary.total_logins
    2
    >>> now - summary.date_last_used < timedelta(seconds=5)
    True

A new summary is created if the account uses a trust root that it has
never used before.

    >>> ubuntu_live_summary = rp_summary_set.record(
    ...     no_priv_account, 'http://ubuntu-live.org')
    >>> ubuntu_live_summary is summary
    False
    >>> ubuntu_live_summary.total_logins
    1

If the account uses a different identifier with a trust root that was
used before, a new OpenIDRPSummary is created.

    >>> from zope.security.proxy import removeSecurityProxy

    # Simulate a privileged event that has changed openid_identifier.
    >>> bare_no_priv_account = removeSecurityProxy(no_priv_account)
    >>> bare_no_priv_account.openid_identifier = 'knightsOfNi'

    >>> ubuntu_live_summary_2 = rp_summary_set.record(
    ...     no_priv_account, 'http://ubuntu-live.org')
    >>> ubuntu_live_summary_2 == ubuntu_live_summary
    False
    >>> ubuntu_live_summary_2.total_logins
    1
    >>> print_openid_rp_summaries([ubuntu_live_summary_2])
    No Privileges Person
      identifier: http://openid.launchpad.dev/+id/knightsOfNi
      trust_root: http://ubuntu-live.org

When a different account first uses the 'http://ubuntu-live.org' trust
root, a new OpenIDRPSummary is created.

    >>> from canonical.launchpad.interfaces.account import IAccountSet

    >>> sample_person = getUtility(IAccountSet).getByEmail(
    ...     'test@canonical.com')
    >>> ubuntu_live_summary_3 = rp_summary_set.record(
    ...     sample_person, 'http://ubuntu-live.org')
    >>> print_openid_rp_summaries([ubuntu_live_summary_3])
    Sample Person
      identifier: http://openid.launchpad.dev/+id/name12_oid
      trust_root: http://ubuntu-live.org

Launchpad does not record itself. The OpenIDSummarySet is needed to
record what relying parties know about Launchpad users. This information
is permanent, meaning that the relying parties cannot change the data.
Launchpad, because it can change its data, it is not permanent, thus
should not be recorded.

    >>> print rp_summary_set.record(sample_person, 'http://launchpad.dev')
    None

This rules also applies to Launchpad vhosts.

    >>> print rp_summary_set.record(
    ...     sample_person, 'http://edge.launchpad.dev')
    None

    >>> print rp_summary_set.record(
    ...     sample_person, 'http://bugs.edge.launchpad.dev')
    None

A OpenIDRPSummary object cannot be created or updated if the account
is not ACTIVE, even if the account already has a summary for the
trust_root.

    >>> former_summaries = rp_summary_set.getByIdentifier(
    ...     'http://openid.launchpad.dev/+id/former-user_oid')
    >>> print_openid_rp_summaries(former_summaries)
    Former User
      identifier: http://openid.launchpad.dev/+id/former-user_oid
      trust_root: https://shop.canonical.com

    >>> former_user = former_summaries[0].account
    >>> former_user.status
    <DBItem AccountStatus.DEACTIVATED, ...>

    >>> rp_summary_set.record(
    ...     former_user, 'https://shop.canonical.com')
    Traceback (most recent call last):
     ...
    AssertionError: Account ... is not ACTIVE account.

An AssertionError if two or more accounts share an identifier. The
database does not have a constraint to guard against this.

    >>> from canonical.database.sqlbase import cursor

    >>> # Create an integrity error in the data by assigning No Privileges
    >>> # Person's openid_identifier to Sample Person.
    >>> from canonical.launchpad.interfaces import IMasterStore
    >>> from canonical.launchpad.database.openidserver import OpenIDRPSummary
    >>> store = IMasterStore(OpenIDRPSummary)
    >>> store.execute("""
    ...     INSERT INTO OpenIDRPSummary (
    ...         account, openid_identifier, trust_root)
    ...     VALUES(121, 'http://openid.launchpad.dev/+id/knightsOfNi',
    ...            'an-irrelevant-trust-root')
    ...     """, noresult=True)

    >>> rp_summary_set.record(no_priv_account, 'an-irrelevant-trust-root')
    Traceback (most recent call last):
     ...
    AssertionError: More than 1 account has the OpenID identifier of
                    http://openid.launchpad.dev/+id/knightsOfNi.
