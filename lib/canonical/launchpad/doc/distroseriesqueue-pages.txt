= PackageUpload View Classes and Pages =

The QueueItemsView (browser/queue.py) is extended by the default view
for IDistroSeries context (IDistroSeriesView)

  >>> login('test@canonical.com')

Let's instantiate the view for +queue as normal user:

  >>> from zope.component import queryView
  >>> from zope.publisher.browser import TestRequest
  >>> from canonical.launchpad.interfaces import IDistributionSet

  >>> ubuntu = getUtility(IDistributionSet)['ubuntu']
  >>> breezy_autotest = ubuntu['breezy-autotest']

  >>> request = TestRequest(form={})
  >>> queue_view = queryView(breezy_autotest, "+queue", request)

View parameters need to be set properly before start:

  >>> queue_view.setupQueueList()

After setup we have a 'batched' list:

  >>> from canonical.launchpad.webapp.interfaces import IBatchNavigator
  >>> from canonical.launchpad.webapp.testing import verifyObject
  >>> verifyObject(IBatchNavigator, queue_view.batchnav)
  True

  >>> len(queue_view.batchnav.currentBatch())
  6

The local state (PackageUploadStatus, dbschema)

  >>> queue_view.state.name
  'NEW'

A list of available actions in this queue:

  >>> queue_view.availableActions()
  []

Let's instantiate the view for a specific queue:

  >>> from canonical.launchpad.interfaces import PackageUploadStatus
  >>> request = TestRequest(
  ...     form={'queue_state': PackageUploadStatus.DONE.value})
  >>> warty = ubuntu['warty']
  >>> queue_view = queryView(warty, "+queue", request)
  >>> queue_view.setupQueueList()
  >>> queue_view.state.name
  'DONE'
  >>> len(queue_view.batchnav.currentBatch())
  1

Normal user doesn't have access to UNAPPROVED queue:

  >>> request = TestRequest(
  ...     form={'queue_state': PackageUploadStatus.UNAPPROVED.value})
  >>> queue_view = queryView(breezy_autotest, "+queue", request)
  >>> queue_view.setupQueueList()
  Traceback (most recent call last):
  ...
  Unauthorized: User don't have permission to see this queue.

Now, let's instantiate the view for +queue as a privileged user:

  >>> login('foo.bar@canonical.com')

  >>> queue_view = queryView(breezy_autotest, "+queue", request)
  >>> queue_view.setupQueueList()
  >>> queue_view.availableActions()
  ['Accept', 'Reject']


Attempt to view UNAPPROVED queue works now:

  >>> request = TestRequest(
  ...     form={'queue_state': PackageUploadStatus.UNAPPROVED.value})
  >>> queue_view = queryView(breezy_autotest, "+queue", request)
  >>> queue_view.setupQueueList()
  >>> queue_view.state.name
  'UNAPPROVED'
  >>> queue_view.availableActions()
  ['Accept', 'Reject']


Action on presented queue are controlled and performed by the
'performAction' method, which return a HTML-formatted report text
about the actions performed.
It accepts the 'Accept'/'Reject' and 'QUEUE_ID' arguments via POST.

'accepting' an item from NEW

  >>> from canonical.launchpad.interfaces import IPackageUploadSet
  >>> getUtility(IPackageUploadSet).get(1).status.name
  'NEW'
  >>> getUtility(IPackageUploadSet).get(3).status.name
  'NEW'

  >>> request = TestRequest(
  ...     form={'queue_state': PackageUploadStatus.NEW.value,
  ...           'Accept': 'Accept',
  ...           'QUEUE_ID': ['1', '3']})
  >>> request.method = 'POST'
  >>> queue_view = queryView(breezy_autotest, "+queue", request)
  >>> queue_view.setupQueueList()

Add fake librarian files so that email notifications work:

  >>> from canonical.archiveuploader.tests import (
  ...     insertFakeChangesFileForAllPackageUploads)
  >>> insertFakeChangesFileForAllPackageUploads()

  >>> queue_view.performQueueAction()
  u'Accepting Results:<br><br>OK: mozilla-firefox, OK: netapplet'

  >>> getUtility(IPackageUploadSet).get(1).status.name
  'ACCEPTED'
  >>> getUtility(IPackageUploadSet).get(3).status.name
  'ACCEPTED'


'rejecting' an item from NEW:

  >>> target = getUtility(IPackageUploadSet).get(2)
  >>> target.status.name
  'NEW'

  >>> request = TestRequest(
  ...     form={'queue_state': PackageUploadStatus.NEW.value,
  ...           'Reject': 'Reject',
  ...           'QUEUE_ID': '2'})
  >>> request.method = 'POST'
  >>> queue_view = queryView(breezy_autotest, "+queue", request)
  >>> queue_view.setupQueueList()

  >>> queue_view.performQueueAction()
  u'Rejecting Results:<br><br>OK: pmount'

  >>> target.status.name
  'REJECTED'


We created librarian files that need cleaining up:

  >>> from canonical.librarian.ftests.harness import cleanupLibrarianFiles
  >>> cleanupLibrarianFiles()
