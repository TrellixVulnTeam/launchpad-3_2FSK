= Canonical URL examples =

Here we have a bunch of examples of canonical urls of database and other
objects.

Ideally, we'd check that the URLs we have here can be accessed through the
publisher.  We'll do that later.  For now, we'll just check that the URLs
are what we expect them to be for various example objects.

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.webapp import canonical_url
    >>> from canonical.launchpad.interfaces import ILaunchpadCelebrities
    >>> celebs = getUtility(ILaunchpadCelebrities)

The examples are divided into sections by theme.  Each section starts with
the imports necessary for that section, where further imports are needed.
The proceeds with an example of the IFooSet url, then its contents, and
so on.


== Application homepages ==

    >>> from canonical.launchpad.interfaces import (
    ...     IMaloneApplication, IBazaarApplication,
    ...     IRosettaApplication, ILaunchpadRoot, IQuestionSet
    ...     )

The Launchpad homepage.

    >>> canonical_url(getUtility(ILaunchpadRoot))
    u'http://launchpad.dev/'

The Malone homepage.

    >>> canonical_url(getUtility(IMaloneApplication))
    u'http://launchpad.dev/bugs'

The Rosetta homepage.

    >>> canonical_url(getUtility(IRosettaApplication))
    u'http://launchpad.dev/translations'

The Bazaar homepage.

    >>> canonical_url(getUtility(IBazaarApplication))
    u'http://launchpad.dev/+code'

The Answer Tracker

    >>> canonical_url(getUtility(IQuestionSet))
    u'http://answers.launchpad.dev/questions'

The set of mailing lists

    >>> from canonical.launchpad.interfaces import IMailingListSet
    >>> canonical_url(getUtility(IMailingListSet))
    u'http://launchpad.dev/+mailinglists'


== Persons and Teams ==

    >>> from canonical.launchpad.interfaces import (
    ...     IPersonSet, ICodeOfConductSet, ISignedCodeOfConductSet)

The IPersonSet.

    >>> canonical_url(getUtility(IPersonSet))
    u'http://launchpad.dev/people'

An IPerson.

    >>> canonical_url(getUtility(IPersonSet).getByName('sabdfl'))
    u'http://launchpad.dev/~sabdfl'

An ITeam.

    >>> canonical_url(celebs.rosetta_experts)
    u'http://launchpad.dev/~rosetta-admins'

An ICodeOfConductSet

    >>> cocset = getUtility(ICodeOfConductSet)
    >>> canonical_url(cocset)
    u'http://launchpad.dev/codeofconduct'

An ISignedCodeOfConductSet

    >>> signedcocset = getUtility(ISignedCodeOfConductSet)
    >>> canonical_url(signedcocset)
    u'http://launchpad.dev/codeofconduct/console'

An ISignedCodeOfConduct

    >>> canonical_url(signedcocset['1'])
    u'http://launchpad.dev/codeofconduct/console/1'

An ICodeOfConduct

    >>> canonical_url(cocset['1.0'])
    u'http://launchpad.dev/codeofconduct/1.0'


== Distributions, distroseriess and so on ==

    >>> from canonical.launchpad.interfaces import IDistributionSet

The IDistributionSet.

    >>> distroset = getUtility(IDistributionSet)

    >>> canonical_url(distroset)
    u'http://launchpad.dev/distros'

An IDistribution.

    >>> canonical_url(celebs.ubuntu)
    u'http://launchpad.dev/ubuntu'

An IDistroSeries.

    >>> hoary = celebs.ubuntu.getSeries('hoary')
    >>> canonical_url(hoary)
    u'http://launchpad.dev/ubuntu/hoary'

An ISourcePackage.

    >>> canonical_url(hoary.getSourcePackage('evolution'))
    u'http://launchpad.dev/ubuntu/hoary/+source/evolution'

An IDistributionSourcePackage.

    >>> from canonical.launchpad.interfaces.distributionsourcepackage import (
    ...     IDistributionSourcePackage)
    >>> from canonical.launchpad.interfaces.sourcepackagename import (
    ...     ISourcePackageNameSet)
    >>> sourcepackagenameset = getUtility(ISourcePackageNameSet)
    >>> ubuntu_firefox = celebs.ubuntu.getSourcePackage(
    ...     sourcepackagenameset['mozilla-firefox'])
    >>> canonical_url(ubuntu_firefox)
    u'http://launchpad.dev/ubuntu/+source/mozilla-firefox'

== Projects and products ==

    >>> from canonical.launchpad.interfaces import IProjectSet, IProductSet

The IProjectSet.

    >>> canonical_url(getUtility(IProjectSet))
    u'http://launchpad.dev/projectgroups'

An IProject.

    >>> canonical_url(getUtility(IProjectSet)['apache'])
    u'http://launchpad.dev/apache'

The IProductSet.

    >>> productset = getUtility(IProductSet)
    >>> canonical_url(productset)
    u'http://launchpad.dev/projects'

An IProduct.

    >>> evolution_product = productset['evolution']
    >>> canonical_url(evolution_product)
    u'http://launchpad.dev/evolution'

An IProductSeries.

    >>> evolution_trunk_series = evolution_product.getSeries('trunk')
    >>> canonical_url(evolution_trunk_series)
    u'http://launchpad.dev/evolution/trunk'

An IProductRelease.

    >>> evolution_release = evolution_trunk_series.getRelease('2.1.6')
    >>> canonical_url(evolution_release)
    u'http://launchpad.dev/evolution/trunk/2.1.6'

== Bugs and bugtasks ==

    >>> from canonical.launchpad.interfaces import (
    ...     IBug, IBugSet, IBugTaskSet, IUpstreamBugTask, IDistroBugTask,
    ...     IDistroSeriesBugTask, IBugWatchSet)
    >>> from canonical.launchpad.database import BugWatchSet

The IBugSet.

    >>> canonical_url(getUtility(IBugSet))
    u'http://launchpad.dev/bugs/bugs'

An IBug.

    >>> canonical_url(getUtility(IBugSet).get(1))
    u'http://bugs.launchpad.dev/bugs/1'

An IUpstreamBugTask.

    >>> canonical_url(getUtility(IBugTaskSet).get(2))
    u'http://bugs.launchpad.dev/firefox/+bug/1'

An IMessage on a bug.

    >>> canonical_url(getUtility(IBugSet).get(1).messages[0])
    u'http://bugs.launchpad.dev/firefox/+bug/1/comments/0'

(But messages not related to bug, don't have such a URL.)

    >>> canonical_url(getUtility(IQuestionSet).get(6).messages[0])
    Traceback (most recent call last):
      ...
    NoCanonicalUrl: ...

An IDistroBugTask.

    >>> distro_task = getUtility(IBugTaskSet).get(4)
    >>> canonical_url(distro_task)
    u'http://bugs.launchpad.dev/debian/+source/mozilla-firefox/+bug/1'

An IDistroBugTask without a sourcepackage.

    >>> from canonical.launchpad.ftests import login
    >>> login("foo.bar@canonical.com")

    >>> temp_spname = distro_task.sourcepackagename
    >>> distro_task.sourcepackagename = None
    >>> canonical_url(distro_task)
    u'http://bugs.launchpad.dev/debian/+bug/1'
    >>> distro_task.sourcepackagename = temp_spname

An IDistroSeriesBugTask.

    >>> distro_series_task = getUtility(IBugTaskSet).get(16)
    >>> canonical_url(distro_series_task)
    u'http://bugs.launchpad.dev/ubuntu/warty/+source/mozilla-firefox/+bug/5'

An IDistroSeriesBugTask without a sourcepackage.

    >>> temp_spname = distro_series_task.sourcepackagename
    >>> distro_series_task.sourcepackagename = None
    >>> canonical_url(distro_series_task)
    u'http://bugs.launchpad.dev/ubuntu/warty/+bug/5'
    >>> distro_series_task.sourcepackagename = temp_spname

A private bug, as an anonymous user! (We'll temporarily subscribe to the bug,
to ensure that at least one person has the perms to edit it while it's set
private.)

    >>> from canonical.launchpad.interfaces import ILaunchBag
    >>> current_user = getUtility(ILaunchBag).user
    >>> subscription = distro_series_task.bug.subscribe(
    ...     current_user, current_user)

    >>> distro_series_task.bug.setPrivate(True, getUtility(ILaunchBag).user)
    True

    >>> login(ANONYMOUS)

    >>> canonical_url(distro_series_task.bug)
    u'http://bugs.launchpad.dev/bugs/5'

A private bugtask, as an anonymous user.

    >>> canonical_url(distro_series_task)
    u'http://bugs.launchpad.dev/ubuntu/warty/+source/mozilla-firefox/+bug/5'

    >>> login("foo.bar@canonical.com")
    >>> distro_series_task.bug.setPrivate(False, getUtility(ILaunchBag).user)
    True
    >>> distro_series_task.bug.unsubscribe(current_user)

An IBugWatchSet.

    This doesn't work, because BugWatchSet.bug is an int, not an IBug object.

    xxx bug_one_watches = BugWatchSet(bug=1)
    xxx canonical_url(bug_one_watches)
    u'http://launchpad.dev/bugs/1/watches'

An IBugComment.

    >>> from canonical.launchpad.browser import BugComment
    >>> bug_one = getUtility(IBugSet).get(1)
    >>> bugtask_one = bug_one.bugtasks[0]
    >>> bug_comment = BugComment(1, bug_one.initial_message, bugtask_one)
    >>> canonical_url(bug_comment)
    u'http://launchpad.dev/firefox/+bug/1/comments/1'

An IBugNomination.

    >>> from canonical.launchpad.interfaces import IBugNominationSet
    >>> bug_nomination = getUtility(IBugNominationSet).get(1)
    >>> canonical_url(bug_nomination)
    u'http://launchpad.dev/bugs/1/nominations/1'

== Remote Bug Trackers and Remote Bugs ==

    >>> from canonical.launchpad.interfaces import IBugTrackerSet
    >>> from canonical.launchpad.browser.bugtracker import RemoteBug

An IBugTrackerSet.

    >>> canonical_url(getUtility(IBugTrackerSet))
    u'http://launchpad.dev/bugs/bugtrackers'

A remote bug tracker.

    >>> mozilla_bugtracker = getUtility(IBugTrackerSet)['mozilla.org']
    >>> canonical_url(mozilla_bugtracker)
    u'http://launchpad.dev/bugs/bugtrackers/mozilla.org'

A bug from a remote bug tracker.

    >>> remote_bug = RemoteBug(mozilla_bugtracker, '42',
    ...                        mozilla_bugtracker.getBugsWatching('42'))
    >>> canonical_url(remote_bug)
    u'http://launchpad.dev/bugs/bugtrackers/mozilla.org/42'

== Branches ==

An IBranch.

    >>> from canonical.launchpad.interfaces import IBranchSet

    >>> branch = getUtility(IBranchSet).get(10)

    >>> canonical_url(branch)
    u'http://code.launchpad.dev/~sabdfl/firefox/release-0.9.2'

An IBugBranch.

    >>> bug = getUtility(IBugSet).get(1)
    >>> bug_branch = bug.addBranch(
    ...     branch, getUtility(IPersonSet).getByName('sabdfl'))

    >>> canonical_url(bug_branch)
    u'http://launchpad.dev/~sabdfl/firefox/release-0.9.2/+bug/1'

== POTemplates and so on ==

    >>> from canonical.launchpad.interfaces import (
    ...     IPOTemplateSet, ITranslationGroupSet)

Most Rosetta pages hang off IPOTemplateSubset objects, of which there are two
varieties: distribution and upstream.

First, the distribution kind.  We'll need the source package name.

    >>> sourcepackagename = sourcepackagenameset['evolution']

And here's our subset.

    >>> potemplateset = getUtility(IPOTemplateSet)
    >>> potemplatesubset = potemplateset.getSubset(
    ...     distroseries=hoary, sourcepackagename=sourcepackagename)

    >>> canonical_url(potemplatesubset)
    u'http://launchpad.dev/ubuntu/hoary/+source/evolution/+pots'

We can get a particular PO template for this source package by its PO template
name.

    >>> potemplate = potemplatesubset['evolution-2.2']
    >>> canonical_url(potemplate)
    u'http://launchpad.dev/ubuntu/hoary/+source/evolution/+pots/evolution-2.2'

And we can get a particular PO file for this PO template by its language code.

    >>> pofile = potemplate.getPOFileByLang('es')
    >>> canonical_url(pofile)
    u'http://launchpad.dev/ubuntu/hoary/+source/evolution/+pots/evolution-2.2/es'

Also, we can get the url to a translation message.

    >>> potmsgset = potemplate.getPOTMsgSetBySequence(1)
    >>> translationmessage = potmsgset.getCurrentTranslationMessage(
    ...     pofile.language)
    >>> print canonical_url(translationmessage)
    http://launchpad.dev/ubuntu/hoary/+source/evolution/+pots/evolution-2.2/es/1

Even for a dummy one.

    >>> potmsgset = potemplate.getPOTMsgSetBySequence(20)
    >>> translationmessage = potmsgset.getCurrentDummyTranslationMessage(
    ...     pofile.language)
    >>> print canonical_url(translationmessage)
    http://launchpad.dev/ubuntu/hoary/+source/evolution/+pots/evolution-2.2/es/20

Upstream POTemplateSubsets work in much the same way, except they hang off a
product series.  Let's get a product series.

Now we can get an upstream subset and do the same sorts of thing as we did
with the distro subset.

    >>> potemplatesubset = potemplateset.getSubset(
    ...     productseries=evolution_trunk_series)
    >>> potemplate = potemplatesubset['evolution-2.2']
    >>> canonical_url(potemplate)
    u'http://launchpad.dev/evolution/trunk/+pots/evolution-2.2'

    >>> pofile = potemplate.getPOFileByLang('es')
    >>> canonical_url(pofile)
    u'http://launchpad.dev/evolution/trunk/+pots/evolution-2.2/es'

Also, we can get the url to a dummy one

    >>> potmsgset = potemplate.getPOTMsgSetBySequence(1)
    >>> translationmessage = potmsgset.getCurrentTranslationMessage(
    ...     pofile.language)
    >>> print canonical_url(translationmessage)
    http://launchpad.dev/evolution/trunk/+pots/evolution-2.2/es/1

Even for a dummy PO msgset

    >>> potmsgset = potemplate.getPOTMsgSetBySequence(20)
    >>> translationmessage = potmsgset.getCurrentDummyTranslationMessage(
    ...     pofile.language)
    >>> print canonical_url(translationmessage)
    http://launchpad.dev/evolution/trunk/+pots/evolution-2.2/es/20

Rosetta also has translation groups.

    >>> canonical_url(getUtility(ITranslationGroupSet))
    u'http://launchpad.dev/+groups'

== Specifications ==

    >>> from canonical.launchpad.interfaces import ISpecificationSet
    >>> spec_set = getUtility(ISpecificationSet)
    >>> canonical_url(spec_set)
    u'http://blueprints.launchpad.dev/'

    >>> canonical_url(celebs.ubuntu.getSpecification('media-integrity-check'))
    u'http://blueprints.launchpad.dev/ubuntu/+spec/media-integrity-check'

