
This tests GPG-related pages of an IPerson.

    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest
    >>> from canonical.launchpad.interfaces import (
    ...     IPerson, IPersonSet)
    >>> from zope.component import getView, getUtility

Set up the key server:

  >>> from canonical.zeca.ftests.harness import ZecaTestSetup
  >>> z = ZecaTestSetup()
  >>> z.setUp()

Grab the sample user:

    >>> personset = getUtility(IPersonSet)
    >>> login("test@canonical.com")
    >>> sample_user = personset.getByName('name12')

Set up some fingerprints for testing:

    >>> malformed   = "XXXX"
    >>> bogus       = "1111 1111 1111 1111 1111  1111 1111 1111 1111 1111"
    >>> gpgv3       = "11 28 37 E2 CB 46 72 67  9E 8E 22 18 DA F9 C0 96"
    >>> with_crap   = ("CFDD 0231 D4A8 992D C760 F5B3 E0B4 E659 E389 E544 uid "
    ...                "S\xe9bastien Serre (Bienvenue sous Ubuntu) "
    ...                "<sebastien.serre@gmail.com> sub 1024g/F39C8D42 2006-08-17")
    >>> revoked     = "84D2 05F0 3E1E 6709 6CB5  4E26 2BE8 3793 AACC D97C"
    >>> expired     = "ECA5 B797 586F 2E27 381A  16CF DE6C 9167 046C 6D63"

    >>> def post_fingerprint(fingerprint):
    ...     request = LaunchpadTestRequest(form={
    ...         'fingerprint': fingerprint,
    ...         'action': 'claim_gpg',
    ...         'import': 'Import Key'})
    ...     request.method = "POST"
    ...     view = getView(sample_user, "+editpgpkeys", request)
    ...     view.form_action()
    ...     return view

The first fingerprint is invalid:

    >>> view = post_fingerprint(malformed)
    >>> view.key_ok, view.invalid_fingerprint
    (False, True)

This one is valid. It doesn't exist in our keyserver though.

    >>> view = post_fingerprint(bogus)
    >>> view.key_ok, view.invalid_fingerprint, view.key_retrieval_failed
    (False, False, True)

This next one is a GPGv3 signature, which is only 128 bits. It's also
valid, though:

    >>> view = post_fingerprint(gpgv3)
    >>> view.key_ok, view.invalid_fingerprint, view.key_retrieval_failed
    (False, False, True)

This one is a fingerprint with some stuff at the end of it. The end-user
just copied too much, but our code truncates it and the result is valid:

    >>> view = post_fingerprint(with_crap)
    >>> view.key_ok, view.invalid_fingerprint, view.key_retrieval_failed
    (False, False, True)

These two keys are actually valid and present, but they are revoked and
expired, respectively:

    >>> view = post_fingerprint(revoked)
    >>> view.key_ok, view.key.revoked
    (False, True)

    >>> view = post_fingerprint(expired)
    >>> view.key_ok, view.key.expired
    (False, True)

And knock the server out, finally:

  >>> z.tearDown()

