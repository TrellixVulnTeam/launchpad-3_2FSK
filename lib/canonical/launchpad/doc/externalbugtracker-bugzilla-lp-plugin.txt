= Bugzilla bugtrackers with the Launchpad plugin =

These tests cover the BugzillaLPPlugin ExternalBugTracker, which handles
Bugzilla instances that have the Launchpad plugin installed.

For testing purposes, a custom XML-RPC transport can be passed to it,
so that we can avoid network traffic in tests.

    >>> from canonical.launchpad.components.externalbugtracker import (
    ...     BugzillaLPPlugin)
    >>> from canonical.launchpad.ftests.externalbugtracker import (
    ...     TestBugzillaXMLRPCTransport)
    >>> test_transport = TestBugzillaXMLRPCTransport()
    >>> bugzilla = BugzillaLPPlugin(
    ...     'http://example.com/', xmlrpc_transport=test_transport)
    >>> bugzilla.xmlrpc_transport is test_transport
    True


== Getting the current time ==

The BugzillaLPPlugin ExternalBugTracker, like all other
ExternalBugTrackers, has a getCurrentDBTime() method, which returns the
current time on the remote server.

    >>> from datetime import datetime
    >>> # It seems there's no way to create a UTC timestamp without
    >>> # monkey-patching the TZ environment variable. Rather than do
    >>> # that, we create our own timestamp and work with that.
    >>> datetime.utcfromtimestamp(1210953200.0)
    datetime.datetime(2008, 5, 16, 15, 53, 20)

    >>> test_transport.utc_offset = 60**2
    >>> test_transport.timezone = 'CET'
    >>> test_transport.seconds_since_epoch = 1210956800.0
    >>> bugzilla.getCurrentDBTime()
    datetime.datetime(2008, 5, 16, 15, 53, 20, tzinfo=<UTC>)


== Initializing the remote bug database ==

The BugzillaLPPlugin implements the standard initializeRemoteBugDB()
method, taking a list of the bug ids that need to be updated. It uses
the Bugzilla Bug.get_bugs() API to retrieve bugs from the remote system.

    >>> bugzilla.xmlrpc_transport.print_method_calls = True
    >>> bugzilla.initializeRemoteBugDB([1, 2, 3, 4])
    CALLED Bug.get_bugs([1, 2, 3, 4])

The bug data is stored as a list of dicts:

    >>> for bug in sorted(bugzilla.bugs.keys())
    ...     print "Bug %s:" % bug
    ...     for key in sorted(bugzilla.bugs[bug].keys()):
    ...         print "%s: %s" % (key, bugzilla.bugs[bug][key])
    ...     print "\n"
    Bug 1:
        alias:
        creation_time: 20080610T16:19:53
        id: 1
        internals:...
        last_change_time: 20080610T16:19:53
        summary: Our first example Bugzilla bug.
        status: RESOLVED FIXED

    Bug 2:
        alias: bug-two
        creation_time: 20080611T09:23:12
        id: 2
        internals:...
        last_change_time: 20080611T09:24:29
        summary: Another example Bugzilla bug.
        status: VERIFIED FIXED
    ...

XXX: 2008-06-11 gmb: Add error handling tests here.


== Getting remote statuses ==

BugzillaLPPlugin.getRemoteStatus() will return the remote status of a
given bug as a string.

    >>> print bugzilla.getRemoteStatus(1)
    RESOLVED FIXED

If an invalid bug ID is passed to getRemoteStatus(), an InvalidBugId
error will be raised.

    >>> bugzilla.getRemoteStatus('no-such-bug')
    Traceback (most recent call last):
      ...
    InvalidBugId: Bug 'no-such-bug' doesn't exist.


