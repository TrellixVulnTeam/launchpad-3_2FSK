= Hosted files =

Some resources have binary files, usually images, associated with
them. These binary files are managed by the Launchpad library. The
Launchpad web service exposes these files as resources that respond to
GET, PUT, and DELETE.


== Person mugshot ==

Salgado starts out with a link to a mugshot, but no actual mugshot.

    >>> salgado = webservice.get('/~salgado').jsonBody()
    >>> salgado['mugshot_link']
    u'http://.../~salgado/mugshot'

    >>> salgado_mugshot = '/~salgado/mugshot'
    >>> print webservice.get(salgado_mugshot)
    HTTP/1.1 404 Not Found
    ...

We can upload a mugshot for salgado with PUT.

    >>> import os
    >>> import canonical
    >>> def load_image(filename):
    ...     image_file = os.path.join(
    ...         os.path.dirname(canonical.launchpad.__file__),
    ...         'images', filename)
    ...     return open(image_file).read()

    >>> print webservice.put(salgado_mugshot, 'image/png',
    ...                      load_image('nyet-mugshot.png'))
    HTTP/1.1 200 Ok
    ...

Once the mugshot has been uploaded, we can GET it. The resource acts
as a dispatcher pointing to the library-managed mugshot on the public
Internet.

    >>> result = webservice.get(salgado_mugshot)
    >>> print result
    HTTP/1.1 303 See Other
    ...
    Location: http://localhost:58000/.../mugshot
    ...
    >>> initial_url = result.getHeader('Location')

PUT is also used to modify a mugshot.

    >>> print webservice.put(salgado_mugshot, 'image/png',
    ...                      load_image('person-mugshot.png'))
    HTTP/1.1 200 Ok
    ...

The new mugshot is available at a different URL.

    >>> result = webservice.get(salgado_mugshot)
    >>> initial_url == result.getHeader('Location')
    False

Deleting a mugshot (with DELETE) disables the redirect.

    >>> print webservice.delete(salgado_mugshot)
    HTTP/1.1 200 Ok
    ...

    >>> print webservice.get(salgado_mugshot)
    HTTP/1.1 404 Not Found
    ...

You can't upload an image that's the wrong type.

    >>> print webservice.put(salgado_mugshot, 'image/png', 'Not an image')
    HTTP/1.1 400 Bad Request
    ...
    The file uploaded was not recognized as an image; please check it
    and retry.

You also can't upload an image that's the wrong size.

    >>> print webservice.put(salgado_mugshot, 'image/png',
    ...                      load_image('nyet-icon.png'))
    HTTP/1.1 400 Bad Request
    ...
    This image is not exactly 192x192 pixels in size.

Nor can you change a person's mugshot by PUTting to that person's URI.

    >>> salgado = webservice.get('/~salgado').jsonBody()
    >>> salgado['mugshot_link'] = 'http://google.com/logo.png'

    >>> import simplejson
    >>> print webservice('/~salgado', 'PUT', simplejson.dumps(salgado),
    ...                  {'Content-type': 'application/json'})
    HTTP/1.1 400 Bad Request
    ...
    mugshot_link: To modify this field you need to send a PUT request to its
    URI (http://.../~salgado/mugshot).


== Project branding ==

Firefox starts out with a links to branding images, but no actual images.

    >>> project = webservice.get('/firefox').jsonBody()
    >>> project['icon_link']
    u'http://.../firefox/icon'
    >>> project['logo_link']
    u'http://.../firefox/logo'
    >>> project['brand_link']
    u'http://.../firefox/brand'

    >>> print webservice.get(project['icon_link'])
    HTTP/1.1 404 Not Found
    ...
    >>> print webservice.get(project['logo_link'])
    HTTP/1.1 404 Not Found
    ...
    >>> print webservice.get(project['brand_link'])
    HTTP/1.1 404 Not Found
    ...

We can upload branding images with PUT.

    >>> print webservice.put(project['icon_link'], 'image/png',
    ...                      load_image('nyet-icon.png'))
    HTTP/1.1 200 Ok
    ...
    >>> print webservice.put(project['logo_link'], 'image/png',
    ...                      load_image('nyet-logo.png'))
    HTTP/1.1 200 Ok
    ...
    >>> print webservice.put(project['brand_link'], 'image/png',
    ...                      load_image('nyet-mugshot.png'))
    HTTP/1.1 200 Ok
    ...

The project's branding links now redirects you to files maintained
by the librarian.

    >>> result = webservice.get(project['icon_link'])
    >>> print result
    HTTP/1.1 303 See Other
    ...
    Location: http://localhost:58000/.../icon
    ...

    >>> result = webservice.get(project['logo_link'])
    >>> print result
    HTTP/1.1 303 See Other
    ...
    Location: http://localhost:58000/.../logo
    ...

    >>> result = webservice.get(project['brand_link'])
    >>> print result
    HTTP/1.1 303 See Other
    ...
    Location: http://localhost:58000/.../brand
    ...


== Error handling ==

If a hosted file is read-only, the client won't be able to modify or
delete it.

   >>> url = '/firefox/trunk/0.9.2/+file/firefox-0.9.2.orig.tar.gz/file'
   >>> print webservice.put(url, 'application/x-tar-gz', 'fakefiledata')
   HTTP/1.1 405 Method Not Allowed
   Allow: GET
   ...

   >>> print webservice.delete(url)
   HTTP/1.1 405 Method Not Allowed
   Allow: GET
   ...
