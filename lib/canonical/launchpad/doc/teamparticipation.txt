TeamParticipation
=================

The TeamParticipation table stores both direct and indirect members of a team.
More information can be found in the TeamParticipationUsage spec.

First of all, create some teams:

>>> from canonical.launchpad.ftests import login
>>> login('launchpad.anonymous')

>>> from datetime import datetime

>>> from zope.component import getUtility

>>> from canonical.launchpad.database import Person
>>> from canonical.launchpad.database.person import _getAllMembers
>>> from canonical.lp.dbschema import TeamSubscriptionPolicy
>>> from canonical.lp.dbschema import TeamMembershipStatus

>>> from canonical.database.sqlbase import flush_database_updates

>>> o = TeamSubscriptionPolicy.OPEN
>>> m = TeamSubscriptionPolicy.MODERATED
>>> expires = datetime(2005, 12, 01)

>>> p = Person.byName('name16')
>>> t1 = Person(subscriptionpolicy=o, name='t1', displayname='t1', teamowner=p)
>>> t2 = Person(subscriptionpolicy=o, name='t2', displayname='t2', teamowner=p)
>>> t3 = Person(subscriptionpolicy=m, name='t3', displayname='t3', teamowner=p)
>>> t4 = Person(subscriptionpolicy=o, name='t4', displayname='t4', teamowner=p)
>>> t5 = Person(subscriptionpolicy=o, name='t5', displayname='t5', teamowner=p)


The results returned by all TeamParticipationSet methods are ordered by
displayname, so we can rely on that when checking the results.


Now, add p as a member of t3.

>>> p.join(t3)
True
>>> [m.displayname for m in _getAllMembers(t3)]
[]


But t3 is a MODERATED team, somebody have to approve the membership:

>>> t3.setMembershipStatus(p, TeamMembershipStatus.APPROVED, expires, p)
>>> [m.displayname for m in _getAllMembers(t3)]
[u'Foo Bar']


Now we add t3 as a member of t2. But t3 is a team, and because teams take no
actions, it can't actually "join" t2. Instead, an administrator of t2 have 
to addMember() it.

>>> t2.addMember(t3)
>>> [m.displayname for m in _getAllMembers(t2)]
[u'Foo Bar', u't3']


... t2 as a member of t1, ...

>>> t1.addMember(t2)
>>> [m.displayname for m in _getAllMembers(t1)]
[u'Foo Bar', u't2', u't3']


... t2 as a member of t5, ...

>>> t5.addMember(t2)
>>> [m.displayname for m in _getAllMembers(t5)]
[u'Foo Bar', u't2', u't3']


... t5 as a member of t4

>>> t4.addMember(t5)
>>> [m.displayname for m in _getAllMembers(t4)]
[u'Foo Bar', u't2', u't3', u't5']


Now let's remove some members to see what happens:

>>> flush_database_updates()
>>> p.leave(t3)
True
>>> len(_getAllMembers(t3))
0

>>> [m.displayname for m in _getAllMembers(t2)]
[u't3']

>>> [m.displayname for m in _getAllMembers(t4)]
[u't2', u't3', u't5']

>>> [m.displayname for m in _getAllMembers(t5)]
[u't2', u't3']


t2 can't leave() t5 because it's a team and teams take no actions. We have to
call setMembershipStatus() for t2 in t5, to make it a DEACTIVATED member.

>>> t5.setMembershipStatus(t2, TeamMembershipStatus.DEACTIVATED)
>>> len(_getAllMembers(t5))
0

>>> [m.displayname for m in _getAllMembers(t4)]
[u't5']

