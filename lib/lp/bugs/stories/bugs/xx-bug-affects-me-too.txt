= Marking a bug as affecting the user =

Users can mark bugs as affecting them. Let's create a sample bug to try
this on.

   >>> login(ANONYMOUS)
   >>> from canonical.launchpad.webapp import canonical_url
   >>> test_bug = factory.makeBug()
   >>> test_bug_url = canonical_url(test_bug)
   >>> logout()

The user goes to the bug's index page, and clicks the edit action link
near 'This bug affects me too'.

   >>> user_browser.open(test_bug_url)
   >>> print extract_text(find_tag_by_id(
   ...     user_browser.contents, 'affectsmetoo'))
   This bug doesn't affect me...

   >>> user_browser.getLink('change').click()
   >>> print user_browser.url
   http://bugs.launchpad.dev/.../+bug/.../+affectsmetoo
   >>> user_browser.getControl(name='field.affects').value
   ['YES']

The form defaults to 'Yes', and the user submits the form.

   >>> user_browser.getControl('Change').click()

The bug page loads again, and now the text is changed, to make it
clear to the user that they can change the selection.

   >>> print extract_text(find_tags_by_class(
   ...     user_browser.contents, 'menu-link-affectsmetoo')[0])
   change

Next to it, we also see the 'hot bug' icon, to indicate that the user
has marked the bug as affecting them.

   >>> print find_tag_by_id(
   ...     user_browser.contents, 'affectsmetoo').img['src']
   /@@/flame-icon

   >>> user_browser.getLink('change').click()

The user is changing his selection to 'No' and submits the form.

   >>> user_browser.getControl(name='field.affects').value = ['NO']
   >>> user_browser.getControl('Change').click()

Back at the bug page, the text changes once again.

   >>> print extract_text(find_tag_by_id(
   ...     user_browser.contents, 'affectsmetoo'))
   This bug doesn't affect me...
