= Person Views of Branch Lists =

There are several views of the branches related to a person.


== Related Branches ==

First, check that the condensed branch listing page works:

    >>> browser = setupBrowser(auth='Basic test@canonical.com:test')
    >>> browser.open('http://code.launchpad.dev/~name12')
    >>> print browser.title
    Bazaar branches related to Sample Person

The heading in the main content is the same as the page title text.

    >>> main = find_main_content(browser.contents)
    >>> print extract_text(main.h1)
    Bazaar branches related to Sample Person


== Default view for a person on code root site ==

The default view for a person on the code root site is the normal branch
listing view for that person.

If a person does not have any related branches, we print an informative
message.

    >>> browser.open('http://code.launchpad.dev/~kinnison')
    >>> print extract_text(
    ...     find_tag_by_id(browser.contents, 'no-branch-message'))
    There are no branches related to Daniel Silverstone today.


== Owned Branches ==

There is a link in the branch context menu for person which points to
the owned branches page.

    >>> browser.open('http://code.launchpad.dev/~name12')
    >>> browser.getLink('owned').click()
    >>> print browser.title
    Bazaar branches owned by Sample Person
    >>> table = find_tag_by_id(browser.contents, 'branchtable')
    >>> for row in table.tbody.fetch('tr'):
    ...     print extract_text(row)
    lp://dev/~name12/firefox/main             New            ...
    lp://dev/~name12/gnome-terminal/2.6       Mature         ...
    lp://dev/~name12/gnome-terminal/main      Development    ...
    lp://dev/~name12/gnome-terminal/klingon   Experimental   ...
    lp://dev/~name12/gnome-terminal/mirrored  New            ...
    lp://dev/~name12/gnome-terminal/pushed    New            ...


== Registered Branches ==

There is also a link which points to the registered branches page.

    >>> browser.open('http://code.launchpad.dev/~name12')
    >>> browser.getLink('registered').click()
    >>> print browser.title
    Bazaar branches registered by Sample Person
    >>> table = find_tag_by_id(browser.contents, 'branchtable')
    >>> for row in table.tbody.fetch('tr'):
    ...     print extract_text(row)
    lp://dev/~name12/firefox/main              New            ...
    lp://dev/~name12/gnome-terminal/2.6        Mature         ...
    lp://dev/~name12/gnome-terminal/main       Development    ...
    lp://dev/~name12/gnome-terminal/klingon    Experimental   ...
    lp://dev/~name12/gnome-terminal/mirrored   New            ...
    lp://dev/~name12/gnome-terminal/pushed     New            ...


== Subscribed branches ==

From the persons main listing page, there is also a link to subscribed
branches.

    >>> browser.open('http://code.launchpad.dev/~name12')
    >>> browser.getLink('subscribed').click()
    >>> print browser.title
    Bazaar branches subscribed to by Sample Person
    >>> table = find_tag_by_id(browser.contents, 'branchtable')
    >>> for row in table.tbody.fetch('tr'):
    ...     print extract_text(row)
    lp://dev/~launchpad/gnome-terminal/launchpad  New           ...
    lp://dev/~name12/+junk/junk.dev               Experimental  ...


== Person branch summary ==

Each of the person branch listing pages has a brief summary at the
top of the page with some branch counts.  These also contain the links
to the registered, owned and subscribed listing pages for a person.

Firstly lets set up two new people with no branches.

    >>> login(ANONYMOUS)
    >>> eric = factory.makePerson(
    ...     name="eric", password="test", email="eric@example.com",
    ...     displayname="Eric the Viking")
    >>> nero = factory.makePerson(
    ...     name="nero", displayname="Emperor Nero")
    >>> #from canonical.database.sqlbase import flush_database_updates
    >>> #flush_database_updates()
    >>> logout()

The text shown initially depends on whether or not you are looking
at your code page, or someone elses.

    >>> eric_browser = setupBrowser(auth="Basic eric@example.com:test")

    >>> def print_tag(who, tag):
    ...     eric_browser.open('http://code.launchpad.dev/~' + who)
    ...     print extract_text(find_tag_by_id(eric_browser.contents, tag))
    >>> print_tag('eric', 'no-branch-message')
    You have no related branches today.

    >>> print_tag('nero', 'no-branch-message')
    There are no branches related to Emperor Nero today.

Let's add a branch to each of them.

    >>> login(ANONYMOUS)
    >>> b1 = factory.makeBranch(owner=eric)
    >>> b2 = factory.makeBranch(owner=nero)
    >>> logout()

The summary is now shown.

    >>> print_tag('eric', 'application-summary')
    You have 1 related branch, of which 1 has been registered by you,
    1 is owned by you, and you have subscribed to 0 branches.

    >>> print_tag('nero', 'application-summary')
    Emperor Nero has 1 related branch, of which 1 has been registered by them,
    1 is owned by them, and they have subscribed to 0 branches.

Now we'll create another branch for each, and subscribe to them.

    >>> login(ANONYMOUS)
    >>> b3 = factory.makeBranch(owner=eric)
    >>> b4 = factory.makeBranch(owner=nero)
    >>> from canonical.launchpad.interfaces import (
    ...     BranchSubscriptionNotificationLevel, CodeReviewNotificationLevel)
    >>> ignored = b3.subscribe(
    ...     eric, BranchSubscriptionNotificationLevel.NOEMAIL,
    ...     None, CodeReviewNotificationLevel.NOEMAIL)
    >>> ignored = b4.subscribe(
    ...     nero, BranchSubscriptionNotificationLevel.NOEMAIL,
    ...     None, CodeReviewNotificationLevel.NOEMAIL)
    >>> logout()

The summary is nice about singular/plural forms.

    >>> print_tag('eric', 'application-summary')
    You have 2 related branches, of which 2 have been registered by you, 2 are
    owned by you, and you have subscribed to 1 branch.

    >>> print_tag('nero', 'application-summary')
    Emperor Nero has 2 related branches, of which 2 have been registered by
    them, 2 are owned by them, and they have subscribed to 1 branch.

