= Distribution Package Search Results =

Check if the Distribution Search Packages link is present, and
the page is not broken.
This page is used to search packages in a distribution context.

  >>> browser.open("http://localhost/ubuntu")
  >>> browser.getLink("Search packages").click()
  >>> browser.url
  'http://localhost/ubuntu/+search'

Search for a package and check if the result page is not broken

  >>> field = browser.getControl(name="text", index=1)
  >>> field.value = 'pmount'
  >>> browser.getControl("Search").click()
  >>> browser.contents
  '...pmount...0.1-2...'

Follow pmount source package path

  >>> browser.getLink('pmount').click()
  >>> browser.url
  'http://localhost/ubuntu/+source/pmount'

Get pmount 0.1-1 version

  >>> browser.getLink("0.1-1").click()
  >>> browser.url
  'http://localhost/ubuntu/+source/pmount/0.1-1'


Ensure that the correct binaries appear on the search results.  We only show
one link to mozilla-firefox on the results page under each distro release.
The "binaries" section for Warty should contain only a single instance 
of 'mozilla-firefox'.  This test relies on the sample data; it has
two mozilla-firefox binaries but we only want the warty one.

Prove that there are (at least) two by getting the one we *don't* want 
here first:

  >>> browser.open("http://localhost/ubuntu/breezy-autotest/+package/mozilla-firefox")
  >>> browser.title
  'Binary package "mozilla-firefox" in ubuntu breezy-autotest'

The following tests are using getLink by ID because there is more than 
one link with the text "mozilla-firefox' on the page and the first occurrence
is the wrong one.  Using the URL is not future proof if it ever changes.

Now run a search for mozilla-firefox and check that it is found:

  >>> browser.open("http://localhost/ubuntu")
  >>> browser.getLink("Search packages").click()
  >>> field = browser.getControl(name="text")
  >>> field.value = 'mozilla-firefox'
  >>> browser.getControl("Search").click()
  >>> browser.contents
  '...mozilla-firefox...0.9...'
  >>> binaries=find_tag_by_id(browser.contents, 'binaries')
  >>> extract_text(binaries).strip()
  u'mozilla-firefox'

Follow the link to the binaries page and make sure it's the right binary.

  >>> browser.getLink(id='binlink').click()
  >>> browser.title
  'Binary package "mozilla-firefox" in ubuntu warty'


