= Team Mailing Lists =

Teams may have at most one team mailing list.  Creating a team mailing list
requires several steps, starting with registration of the list by the owner of
an existing team.  This is done through an IMailingListSet utility.

    >>> from canonical.launchpad.webapp.testing import verifyObject
    >>> from canonical.launchpad.interfaces import (
    ...     IMailingList, IMailingListSet)
    >>> from canonical.launchpad.database import MailingListSet
    >>> list_set = getUtility(IMailingListSet)
    >>> verifyObject(IMailingListSet, list_set)
    True

In the following description of how to use team mailing lists, we will need
several teams.

    >>> from canonical.launchpad.interfaces import (
    ...     IPersonSet, TeamMembershipStatus, TeamSubscriptionPolicy)
    >>> from canonical.launchpad.ftests import login, ANONYMOUS
    >>> login(ANONYMOUS)
    >>> personset = getUtility(IPersonSet)
    >>> ddaa = personset.getByName('ddaa')
    >>> def new_team(team_name):
    ...     displayname = ' '.join(word.capitalize()
    ...                            for word in team_name.split('-'))
    ...     # XXX BarryWarsaw Set the team's subscription policy to OPEN
    ...     # because of bug 125505.  See related comment below.
    ...     policy = TeamSubscriptionPolicy.OPEN
    ...     return personset.newTeam(ddaa, team_name, displayname,
    ...                              subscriptionpolicy=policy)

    >>> team_one = new_team('team-one')
    >>> team_two = new_team('team-two')
    >>> team_three = new_team('team-three')
    >>> team_four = new_team('team-four')
    >>> from canonical.database.sqlbase import flush_database_updates
    >>> flush_database_updates()

Define a helper function that sorts mailing lists alphabetically based on
their team's name.

    >>> def sorted_lists(lists):
    ...     return sorted(lists, key=lambda L: L.team.name)

None of these teams have mailing lists yet.

    >>> sorted_lists(list_set.registered_lists)
    []
    >>> sorted_lists(list_set.approved_lists)
    []
    >>> print list_set.get(team_one.name)
    None
    >>> print list_set.get(team_two.name)
    None
    >>> print list_set.get(team_three.name)
    None
    >>> print list_set.get(team_four.name)
    None


== Registering a team mailing list ==

Any team owner or administrator may start the process of creating a team
mailing list by registering the list.  By registering the mailing list, the
team administrator makes a request to have the list created, but it is not
created right away.

    >>> from datetime import datetime
    >>> import pytz
    >>> utc = pytz.timezone('UTC')
    >>> registration_date = datetime.now(utc)
    >>> list_one = list_set.new(team_one)
    >>> verifyObject(IMailingList, list_one)
    True
    >>> flush_database_updates()
    >>> list_one
    <MailingList for team "team-one"; status=REGISTERED at 0x...>

You may not register a mailing list for a person.

    >>> salgado = personset.getByName('salgado')
    >>> list_set.new(salgado, salgado)
    Traceback (most recent call last):
    ...
    AssertionError: Cannot register a list for a person who is not a team

The mailing list registrant must be a team owner or administrator.  salgado is
neither and thus may not create a list for team_two.

    >>> list_set.new(team_two, salgado)
    Traceback (most recent call last):
    ...
    AssertionError: registrant is not a team owner or administrator

However, if we make salgado a team administrator, he can then register the
mailing list.

    >>> # XXX BarryWarsaw bug 125505: Use .join() and .setMembershipData()
    >>> # instead of the more direct team.addMember() because the latter
    >>> # doesn't invalidate salgado's _inTeam_cache.
    >>> salgado.join(team_two)
    >>> sabdfl = personset.getByName('sabdfl')
    >>> team_two.setMembershipData(salgado, TeamMembershipStatus.ADMIN, sabdfl)
    >>> flush_database_updates()
    >>> list_two = list_set.new(team_two, salgado)
    >>> list_two
    <MailingList for team "team-two"; status=REGISTERED at ...>

The newly registered mailing list is linked to its team, and the list's
registrant is the team owner at the time the list was registered.  The list's
registration date is set, and its status is set to REGISTERED.

    >>> list_one.team.displayname
    u'Team One'
    >>> list_one.registrant.name
    u'ddaa'
    >>> registration_date <= list_one.date_registered <= datetime.now(utc)
    True
    >>> list_one.status.name
    'REGISTERED'

The mailing list has no reviewer or review date, nor an activation date or
welcome message text.

    >>> print list_one.reviewer
    None
    >>> print list_one.date_reviewed
    None
    >>> print list_one.date_activated
    None
    >>> print list_one.welcome_message
    None

The mailing list's registrant does not change even if the team's owner
changes.

    >>> login('carlos@canonical.com')
    >>> carlos = personset.getByName('carlos')
    >>> team_one.teamowner = carlos
    >>> flush_database_updates()
    >>> list_one.registrant.name
    u'ddaa'

A mailing list cannot be registered more than once.

    >>> list_set.new(team_one)
    Traceback (most recent call last):
    ...
    AssertionError: Mailing list for team "team-one" already exists


== Reviewing a registered mailing list ==

A registered mailing list must then be reviewed by a Launchpad administrator
before the request to create it can be made.  Use the list set to find all
currently registered mailing lists.

    >>> list_three = list_set.new(team_three)
    >>> list_three
    <MailingList for team "team-three"; status=REGISTERED at ...>
    >>> list_four = list_set.new(team_four)
    >>> list_four
    <MailingList for team "team-four"; status=REGISTERED at ...>
    >>> flush_database_updates()
    >>> sorted_lists(list_set.registered_lists)
    [<MailingList for team "team-four"; status=REGISTERED at ...>,
     <MailingList for team "team-one"; status=REGISTERED at ...>,
     <MailingList for team "team-three"; status=REGISTERED at ...>,
     <MailingList for team "team-two"; status=REGISTERED at ...>]

A mailing list's registration cannot be reviewed by a non-administrator.

    >>> from canonical.launchpad.interfaces import MailingListStatus
    >>> no_priv = personset.getByName('no-priv')
    >>> list_one.review(no_priv, MailingListStatus.APPROVED)
    Traceback (most recent call last):
    ...
    AssertionError: Reviewer must be a Launchpad administrator
    >>> list_one.review(ddaa, MailingListStatus.APPROVED)
    Traceback (most recent call last):
    ...
    AssertionError: Reviewer must be a Launchpad administrator

A Launchpad administer though, may approve the registration.

    >>> list_one.review(carlos, MailingListStatus.APPROVED)
    >>> flush_database_updates()
    >>> list_one.status.name
    'APPROVED'

A mailing list that has already been reviewed, may not be re-reviewed.

    >>> list_one.review(carlos, MailingListStatus.APPROVED)
    Traceback (most recent call last):
    ...
    AssertionError: Only unreviewed mailing lists may be reviewed
    >>> list_one.review(carlos, MailingListStatus.DECLINED)
    Traceback (most recent call last):
    ...
    AssertionError: Only unreviewed mailing lists may be reviewed

A reviewer may also decline a mailing list registration.

    >>> list_two.review(carlos, MailingListStatus.DECLINED)
    >>> flush_database_updates()
    >>> list_two.status.name
    'DECLINED'

A reviewer may not review a mailing list to a state other than approved or
declined.

    >>> list_three.review(carlos, MailingListStatus.ACTIVE)
    Traceback (most recent call last):
    ...
    AssertionError: Reviewed lists may only be approved or declined

Once approved or declined the lists won't be re-considered for review.

    >>> sorted_lists(list_set.registered_lists)
    [<MailingList for team "team-four"; status=REGISTERED at ...>,
     <MailingList for team "team-three"; status=REGISTERED at ...>]

Approve a couple of other lists to illustrate some additional outcomes later
on.

    >>> list_three.review(carlos, MailingListStatus.APPROVED)
    >>> list_four.review(carlos, MailingListStatus.APPROVED)
    >>> flush_database_updates()
    >>> list(list_set.registered_lists)
    []


== Constructing mailing lists ==

Once a team mailing list has been approved, it can be constructed by Mailman.
This happens by returning the set of approved mailing lists through the XMLRPC
interface used by Mailman (not shown here).  When Mailman retrieves the set of
mailing lists to construct, the list's statuses are set to the CONSTRUCTING
state.

    >>> sorted_lists(list_set.approved_lists)
    [<MailingList for team "team-four"; status=APPROVED at ...>,
     <MailingList for team "team-one"; status=APPROVED at ...>,
     <MailingList for team "team-three"; status=APPROVED at ...>]

    >>> list_one.startConstructing()
    >>> flush_database_updates()
    >>> list_one.status.name
    'CONSTRUCTING'

A mailing list that has been declined may not be constructed.

    >>> list_two.startConstructing()
    Traceback (most recent call last):
    ...
    AssertionError: Only approved mailing lists may be constructed

Once in the construction phase, a list is no longer in the approval state.

    >>> sorted_lists(list_set.approved_lists)
    [<MailingList for team "team-four"; status=APPROVED at ...>,
     <MailingList for team "team-three"; status=APPROVED at ...>]

Lists should never be constructed more than once.

    >>> list_one.startConstructing()
    Traceback (most recent call last):
    ...
    AssertionError: Only approved mailing lists may be constructed

Construct a couple of other lists to illustration some additional outcomes
later.

    >>> list_three.startConstructing()
    >>> list_four.startConstructing()
    >>> flush_database_updates()


== Reporting the results of construction ==

After Mailman has worked at constructing lists for a while, it reports (again
through XMLRPC not shown here) on the status of each list construction.  Most,
if not all will succeed, thus activating the team's mailing list.

    >>> list_one.transitionToStatus(MailingListStatus.ACTIVE)
    >>> list_three.transitionToStatus(MailingListStatus.ACTIVE)
    >>> flush_database_updates()
    >>> list_one.status.name
    'ACTIVE'
    >>> list_three.status.name
    'ACTIVE'

Some list constructions may fail.

    >>> list_four.transitionToStatus(MailingListStatus.FAILED)
    >>> flush_database_updates()
    >>> list_four.status.name
    'FAILED'

You can then get the mailing list for a team, given the team name.

    >>> list_set.get(team_one.name)
    <MailingList for team "team-one"; status=ACTIVE at ...>
    >>> list_set.get(team_two.name)
    <MailingList for team "team-two"; status=DECLINED at ...>
    >>> list_set.get(team_three.name)
    <MailingList for team "team-three"; status=ACTIVE at ...>
    >>> list_set.get(team_four.name)
    <MailingList for team "team-four"; status=FAILED at ...>

This method will return None for missing teams or non-team people.

    >>> print list_set.get('not an existing team')
    None
    >>> print list_set.get(carlos.name)
    None


== Deactivating lists ==

A list which is active may be deactivated.

    >>> list_three.deactivate()
    >>> flush_database_updates()
    >>> list_three.status.name
    'DEACTIVATING'

This doesn't immediately deactivate the mailing list though.  Mailman still
needs to query for the requested deactivations, take the necessary actions,
and report the deactivation results.

    >>> sorted_lists(list_set.deactivated_lists)
    [<MailingList for team "team-three"; status=DEACTIVATING at ...>]
    >>> list_three.transitionToStatus(MailingListStatus.INACTIVE)
    >>> list_three.status.name
    'INACTIVE'

But lists which are not active may not be deactivated.

    >>> list_two.deactivate()
    Traceback (most recent call last):
    ...
    AssertionError: Only active mailing lists may be deactivated
    >>> list_four.deactivate()
    Traceback (most recent call last):
    ...
    AssertionError: Only active mailing lists may be deactivated


== Reactivating lists ==

A list which is inactive may be reactivated.

    >>> list_three.status.name
    'INACTIVE'
    >>> list_three.reactivate()

This doesn't immediately reactivate the mailing list though.  Mailman still
needs to query for the requested reactivations, take the necessary actions,
and report the reactivation results.

    >>> list_three.status.name
    'APPROVED'

But lists which are not inactive may not be reactivated.

    >>> list_three.reactivate()
    Traceback (most recent call last):
    ...
    AssertionError: Only inactive mailing lists may be reactivated


== Welcome messages ==

Mailing lists have a welcome message text which is sent to new members when
they subscribe to a list.  The welcome message can contain any text.

    >>> print list_one.welcome_message
    None
    >>> list_one.welcome_message = """\
    ... Welcome to the Team One mailing list."""
    >>> flush_database_updates()
    >>> list_one.welcome_message
    u'Welcome to the Team One mailing list.'

After changing the welcome message, the list's status should be MODIFIED.

    >>> list_one.status.name
    'MODIFIED'
    >>> sorted_lists(list_set.modified_lists)
    [<MailingList for team "team-one"; status=MODIFIED at ...>]

Eventually, Mailman will get around to acting on this modification.  When it
does so, the list's state transitions first to UPDATING so as to avoid
multiple modifications.  Transitioning to the ACTIVE state while still
MODIFIED is not allowed.

    >>> list_one.transitionToStatus(MailingListStatus.ACTIVE)
    Traceback (most recent call last):
    ...
    AssertionError: Not a valid state transition

What really happens is that the list's state is first transitioned to
UPDATING, and then to ACTIVE or FAILED.

    >>> list_one.startUpdating()
    >>> flush_database_updates()
    >>> list_one.status.name
    'UPDATING'
    >>> list_one.transitionToStatus(MailingListStatus.ACTIVE)
    >>> flush_database_updates()
    >>> list_one.status.name
    'ACTIVE'

A mailing list's welcome message can also be changed while it is in REGISTERED
status.  This is essentially equivalent to initializing the mailing list with
a particular welcome message.

    >>> team_five = new_team('team-five')
    >>> list_five = list_set.new(team_five)
    >>> list_five.welcome_message = u'Welcome to Team Five'
    >>> flush_database_updates()
    >>> list_five.status.name
    'REGISTERED'

You cannot change the welcome message text for a mailing list in anything but
ACTIVE or REGISTERED status.

    >>> list_two.welcome_message = """\
    ... This list has been declined."""
    Traceback (most recent call last):
    ...
    AssertionError: Only registered or active mailing lists may be modified

    >>> list_four.welcome_message = """\
    ... This list has been deactivated."""
    Traceback (most recent call last):
    ...
    AssertionError: Only registered or active mailing lists may be modified
