= Distribution Source Packages =

A distribution source package represents a named source package in a
distribution, independant of any particular release of that source
package.

This is useful for, among other things, tracking bugs in source
packages, ensuring that bug reports automatically carry forward from one
distribution series to the next.

== Fetching a Distribution Source Package ==

A common way to fetch a distribution source package is to start with the
distribution object:

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.webapp.testing import verifyObject
    >>> from canonical.launchpad.interfaces import (
    ...     IDistributionSet, IDistributionSourcePackage)
    >>> debian = getUtility(IDistributionSet).getByName("debian")
    >>> ubuntu = getUtility(IDistributionSet).getByName("ubuntu")

Use IDistribution.getSourcePackage to get a specific package by name:

    >>> debian_firefox = debian.getSourcePackage("mozilla-firefox")
    >>> debian_firefox.name
    u'mozilla-firefox'
    >>> IDistributionSourcePackage.providedBy(debian_firefox)
    True
    >>> verifyObject(IDistributionSourcePackage, debian_firefox)
    True

== Useful features ==

    >>> dsp = ubuntu.getSourcePackage("pmount")
    >>> dsp.displayname
    u'pmount in ubuntu'
    >>> dsp.bugtasks().count()
    0

=== Publishing-related properties ===

Publishing history of 'pmount in Ubuntu':

    >>> for p in dsp.publishing_history:
    ...     print " ".join((p.sourcepackagerelease.name,
    ...                     p.sourcepackagerelease.version,
    ...                     p.distroseries.name))
    pmount 0.1-2 hoary
    pmount 0.1-1 hoary

Current publishing records for 'pmount in Ubuntu':

    >>> for p in dsp.current_publishing_records:
    ...     print " ".join((p.sourcepackagerelease.name,
    ...                     p.sourcepackagerelease.version,
    ...                     p.distroseries.name))
    pmount 0.1-2 hoary

Current overall publications:

    >>> alsa_utils = ubuntu.getSourcePackage("alsa-utils")
    >>> pub = alsa_utils.latest_overall_publication
    >>> (pub.sourcepackagerelease.sourcepackagename.name,
    ...  pub.sourcepackagerelease.version,
    ...  pub.distroseries.name,
    ...  pub.status)
    (u'alsa-utils',
     u'1.0.9a-4ubuntu1',
     u'hoary',
     <DBItem PackagePublishingStatus.PUBLISHED, (2) Published>)
    >>> linux_source = ubuntu.getSourcePackage("linux-source-2.6.15")
    >>> pub = linux_source.latest_overall_publication
    >>> (pub.sourcepackagerelease.sourcepackagename.name,
    ...  pub.sourcepackagerelease.version,
    ...  pub.distroseries.name,
    ...  pub.status)
    (u'linux-source-2.6.15',
     u'2.6.15.3',
     u'hoary',
     <DBItem PackagePublishingStatus.PUBLISHED, (2) Published>)
    >>> commercial = ubuntu.getSourcePackage("commercialpackage")
    >>> pub = linux_source.latest_overall_publication
    >>> (pub.sourcepackagerelease.sourcepackagename.name,
    ...  pub.sourcepackagerelease.version,
    ...  pub.distroseries.name,
    ...  pub.status)
    (u'linux-source-2.6.15',
     u'2.6.15.3',
     u'hoary',
     <DBItem PackagePublishingStatus.PUBLISHED, (2) Published>)

=== Release-related properties ===

Releases of 'pmount in Ubuntu':

    >>> [release.version for release in dsp.releases]
    [u'0.1-2', u'0.1-1']

We can also get the releases of 'pmount in Ubuntu' along with the
relevant publishing information:

    >>> for release, pubs in dsp.getReleasesAndPublishingHistory():
    ...     print release.version
    ...     for pub in pubs:
    ...         print ' * %s - %s' % (pub.distroseries.name, pub.status.name)
    0.1-2
     * hoary - PUBLISHED
    0.1-1
     * hoary - SUPERSEDED

Current release of 'pmount in Ubuntu':

    >>> dsp.currentrelease.version
    u'0.1-2'

Check if 'currentrelease' works with version containing letters
(bug # 6040):

    >>> dsp2 = ubuntu.getSourcePackage("alsa-utils")
    >>> dsp2.currentrelease.version
    u'1.0.9a-4ubuntu1'

    >>> dsp3 = ubuntu.getSourcePackage("cnews")
    >>> dsp3.currentrelease.version
    u'cr.g7-37'

=== Grabbing DSPRs ===

To list the current 'pmount in Ubuntu' ISourcePackages, use
get_distroseries_packages():

    >>> [(sp.name, sp.distroseries.name)
    ...     for sp in dsp.get_distroseries_packages()]
    [(u'pmount', u'hoary')]

To retrieve a version of 'pmount in Ubuntu' as an
IDistributionSourcePackageRelease (IDSPR) or None if not found, use
getVersion():

    >>> dsp.getVersion('1.0') is None
    True

    >>> pmount_dspr = dsp.getVersion('0.1-1')
    >>> pmount_dspr.title
    u'pmount 0.1-1 (source) in Ubuntu'

    >>> for pub in pmount_dspr.publishing_history:
    ...     print pub.distroseries.name, pub.status.name
    hoary SUPERSEDED

'getVersion' also returns IDSPRs for REMOVED versions which allows
developers to investigate history of files already removed from the
archive (bug #60440):

    >>> ubuntutest = getUtility(IDistributionSet)["ubuntutest"]
    >>> alsa_dsp = ubuntutest.getSourcePackage("alsa-utils")
    >>> alsa_dspr = alsa_dsp.getVersion('1.0.9a-4')
    >>> alsa_dspr.title
    u'alsa-utils 1.0.9a-4 (source) in ubuntutest'

    >>> for pub in alsa_dspr.publishing_history:
    ...     is_removed = pub.dateremoved is not None
    ...     print pub.distroseries.name, pub.status.name, is_removed
    breezy-autotest DELETED True


== __hash__ ==

DistributionSourcePackage defines a custom __hash__ method, so that
different instances, representing the same packages, have the same hash.

    >>> pmount = ubuntu.getSourcePackage('pmount')
    >>> pmount_again = ubuntu.getSourcePackage('pmount')
    >>> pmount is pmount_again
    False
    >>> hash(pmount) == hash(pmount_again)
    True
    >>> pmount == pmount_again
    True

This means that packages can be used as keys in dictionaries.

    >>> pmount_marker = object()
    >>> firefox_marker = object()
    >>> mapping = {
    ...     pmount: pmount_marker,
    ...     ubuntu.getSourcePackage('mozilla-firefox'): firefox_marker,
    ...     }
    >>> mapping[pmount_again] is pmount_marker
    True
    >>> mapping[ubuntu.getSourcePackage('mozilla-firefox')] is firefox_marker
    True


== Upstream links ==

DistributionSourcePackages can be linked to upstream Products. You can
retrieve a DistributionSourcePackage's upstream product using its
upstream_product property.

    >>> firefox = ubuntu.getSourcePackage('mozilla-firefox')
    >>> print firefox.upstream_product.displayname
    Mozilla Firefox

If the package isn't linked to an upstream product, upstream_product
will be None.

    >>> print pmount.upstream_product
    None


== Finding archives where this package is published ==

A distribution source package can also find which archives
versions of a given source package have been published in.

    # First create some PPAs.
    >>> ppa_nightly = factory.makeArchive(name="nightly",
    ...                                   distribution=ubuntu)
    >>> ppa_beta = factory.makeArchive(name="beta",
    ...                                distribution=ubuntu)

    # Next publish some sources in them.
    >>> login('foo.bar@canonical.com')
    >>> from lp.soyuz.tests.test_publishing import SoyuzTestPublisher
    >>> publisher = SoyuzTestPublisher()
    >>> publisher.prepareBreezyAutotest()

    >>> from datetime import datetime
    >>> import pytz
    >>> from lp.soyuz.interfaces.publishing import PackagePublishingStatus
    >>> gedit_nightly_src_hist = publisher.getPubSource(
    ...     sourcename="gedit", archive=ppa_nightly,
    ...     date_uploaded=datetime(2010, 12 ,1, tzinfo=pytz.UTC),
    ...     status=PackagePublishingStatus.PUBLISHED)
    >>> gedit_beta_src_hist = publisher.getPubSource(
    ...     sourcename="gedit", archive=ppa_beta,
    ...     date_uploaded=datetime(2010, 11, 30, tzinfo=pytz.UTC),
    ...     status=PackagePublishingStatus.PUBLISHED)
    >>> gedit_main_src_hist = publisher.getPubSource(
    ...     sourcename="gedit", archive=ubuntu.main_archive,
    ...     date_uploaded=datetime(2010, 12, 30, tzinfo=pytz.UTC),
    ...     status=PackagePublishingStatus.PUBLISHED)


The results of findRelatedArchives() are sorted so that archive with the
most recent upload is first:

    >>> gedit_beta_src = ubuntu.getSourcePackage('gedit')
    >>> ppa_versions_for_gedit = gedit_beta_src.findRelatedArchives()
    >>> for ppa in ppa_versions_for_gedit:
    ...     print ppa.displayname
    PPA named nightly for Person...
    PPA named beta for Person...

You can choose to exclude a certain archive from the results - useful
if you want to find all *other* related archives:

    >>> ppa_versions_for_gedit = gedit_beta_src.findRelatedArchives(
    ...     exclude_archive=ppa_nightly)
    >>> for ppa in ppa_versions_for_gedit:
    ...     print ppa.displayname
    PPA named beta for Person...

Although findRelatedArchives() defaults to PPAs, it can be used to find
packages in other archives too:

    >>> archive_versions_for_gedit = gedit_beta_src.findRelatedArchives(
    ...     archive_purpose=None)
    >>> for archive in archive_versions_for_gedit:
    ...     print archive.displayname
    Primary Archive for Ubuntu Linux
    PPA named nightly for Person...
    PPA named beta for Person...

The closely-related findRelatedArchivePublications() decorates the results
so that the corresponding publications for each archive are returned too:

    >>> archive_pubs = gedit_beta_src.findRelatedArchivePublications()
    >>> for archive, pubs in archive_pubs:
    ...     print archive.displayname
    ...     for pub in pubs:
    ...         print " - %s in %s" % (
    ...             pub.source_package_version, pub.distroseries.displayname)
    PPA named nightly for Person...
     - 666 in Breezy Autotest
    PPA named beta for Person...
     - 666 in Breezy Autotest

