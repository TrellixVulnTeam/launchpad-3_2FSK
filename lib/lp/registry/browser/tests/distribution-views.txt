Distribution Pages
==================

Lists of distribution mirrors
-----------------------------

There are several pages listing the mirrors of a distribution, and they all
share a common base class which is responsible for ordering the mirrors by
country.

    >>> from zope.component import getMultiAdapter, getUtility
    >>> from lp.registry.interfaces.distribution import IDistributionSet
    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest

    >>> login("foo.bar@canonical.com")

    >>> ubuntu = getUtility(IDistributionSet).getByName("ubuntu")
    >>> ubuntu_cdmirrors = getMultiAdapter(
    ...     (ubuntu, LaunchpadTestRequest()), name="+cdmirrors")

    >>> country_and_mirrors = ubuntu_cdmirrors.getMirrorsGroupedByCountry()
    >>> for country_and_mirror in country_and_mirrors:
    ...     country = country_and_mirror['country']
    ...     mirrors = country_and_mirror['mirrors']
    ...     for mirror in mirrors:
    ...         assert mirror.country.name == country
    ...     print "%s: %d mirror(s)" % (country, len(mirrors))
    France: 2 mirror(s)
    Germany: 1 mirror(s)
    United Kingdom: 1 mirror(s)


== DistributionArchivesView ==

The DistributionArchivesView includes an archive_list property that
returns a list of copy archives only for the given distribution (because
only copy archives are exposed through the distribution/+archives UI):

    >>> distro_archives_view = create_initialized_view(ubuntu,
    ...                                                name="+archives")
    >>> archives = distro_archives_view.archive_list
    >>> archives.count()
    0

And then after creating a copy archive for Ubuntu:

    >>> copy_location = factory.makeCopyArchiveLocation(
    ...     distribution=ubuntu,
    ...     name="intrepid-security-rebuild")
    >>> archives = distro_archives_view.archive_list
    >>> archives.count()
    1


DistributionPackageSearchView
=============================

The DistributionPackageSearchView adds some functionality to the base
PackageSearchView class, specifically for making the results more useful.

By default the view will be initialized as a binary-package-name search,
and the search_by_binary_name property is used to determine the search
type (in templates):

Note: The substring search for binary names now uses the cached binary
names on the DistributionSourcePackageCache, which unfortunately are
not up-to-date in the test data. Hence only seeing mozilla-firefox returned
here.

    >>> distro_pkg_search_view = create_initialized_view(
    ...     ubuntu, name="+search",
    ...     form={'text': 'a'},
    ...     query_string='text=a')
    >>> distro_pkg_search_view.search_by_binary_name
    True
    >>> for package in distro_pkg_search_view.search_results:
    ...     print package.name
    mozilla-firefox

Additionally, a helper property 'source_search_url' is included providing
easy access to the equivalent search on sources:

    >>> print distro_pkg_search_view.source_search_url
    http://launchpad.dev/ubuntu/+search?search_type=source&text=a

Unicode form variables remain encoded as UTF-8 (as expected by the
server) when building the 'source_search_url'.

    >>> distro_pkg_search_view = create_initialized_view(
    ...     ubuntu, name="+search",
    ...     form={'text': u'\xe7'},
    ...     query_string='text=%C3%A7')

    >>> print distro_pkg_search_view.source_search_url
    http://launchpad.dev/ubuntu/+search?search_type=source&text=%C3%A7

But users can specify that the search should be on source-package-names
instead:

    >>> distro_pkg_search_view = create_initialized_view(
    ...     ubuntu, name="+search", form={
    ...         'text': 'a',
    ...         'search_type': 'source'
    ...     })
    >>> distro_pkg_search_view.search_by_binary_name
    False
    >>> for package in distro_pkg_search_view.search_results:
    ...     print package.name
    netapplet
    alsa-utils
    foobar
    mozilla-firefox
    commercialpackage

Unless the distribution being searched does not support binaries, in which
cases it will always be on source:

    >>> debian = factory.makeDistribution(
    ...     name='mydebian', displayname='debian-without-binaries')

    >>> debian.has_published_binaries
    False

    >>> distro_pkg_search_view = create_initialized_view(
    ...     debian, name="+search", form={'search_type': 'binary'})
    >>> distro_pkg_search_view.search_by_binary_name
    False


=== Exact matches ===

The DistributionPackageSearchView view has an exact_matches property
and a has_exact_matches property which are used to find packages that
match exactly on the binary/source name.

In the following example, there is one source package that has a binary
with the exact name 'mozilla-firefox':

    >>> distro_pkg_search_view = create_initialized_view(
    ...     ubuntu, name="+search", form={'text': 'mozilla-firefox'})
    >>> distro_pkg_search_view.has_exact_matches
    True
    >>> for package in distro_pkg_search_view.exact_matches:
    ...     print package.name
    mozilla-firefox

The view can also help the template know when to display exact matches.

    >>> distro_pkg_search_view.display_exact_matches
    True

Exact matches do not need to be displayed when the user views subsequent
batches.

    >>> distro_pkg_search_view = create_initialized_view(
    ...     ubuntu, name="+search", form={
    ...         'text': 'mozilla-firefox',
    ...         'batch': '2',
    ...         'start': '2',
    ...         })
    >>> distro_pkg_search_view.display_exact_matches
    False

But they are displayed when returning to the first batch.

    >>> distro_pkg_search_view = create_initialized_view(
    ...     ubuntu, name="+search", form={
    ...         'text': 'mozilla-firefox',
    ...         'batch': '2',
    ...         'start': '0',
    ...         })
    >>> distro_pkg_search_view.display_exact_matches
    True

Searches against source packages should not display exact matches either:

    >>> distro_pkg_search_view = create_initialized_view(
    ...     ubuntu, name="+search", form={
    ...         'text': 'mozilla-firefox',
    ...         'search_type': 'source',
    ...         })
    >>> distro_pkg_search_view.display_exact_matches
    False

The DistributionPackageSearchView also has a helper property to
help templates print the list of distroseries that an exactly-matched
package is available in:

    >>> distro_pkg_search_view.distroseries_names
    {u'mozilla-firefox': u'warty'}
    >>> distro_pkg_search_view = create_initialized_view(
    ...     ubuntu, name="+search", form={'text': 'foobar'})
    >>> distro_pkg_search_view.distroseries_names
    {u'foobar': ''}

Another helper on the DistributionPackageSearchView is the
matching_binary_names property which can be used by templates to get
a list of the binary names that matched the search term for each
package:

    >>> distro_pkg_search_view = create_initialized_view(
    ...     ubuntu, name="+search", form={'text': 'moz'})
    >>> distro_pkg_search_view.matching_binary_names
    {u'mozilla-firefox': u'mozilla-firefox, mozilla-firefox-data'}

The matching_binary_names property uses a protected helper method
'_listFirstFiveMatchingNames' which ensures only the first five matching
names are returned. An ellipse is used to indicate when more than five
names match:

    >>> print distro_pkg_search_view._listFirstFiveMatchingNames(
    ...     'moz', 
    ...     'mozilla-firefox mozilla-data moziki '
    ...     'limozine moza lamoz') # doctest: -ELLIPSIS
    mozilla-firefox, mozilla-data, moziki, limozine, moza, ...


Substring matches
=================

The DistributionPackageSearchView includes substring matches by default.

    >>> search_results = distro_pkg_search_view.search_results
    >>> search_results.count()
    1

    >>> for pkg in search_results:
    ...     print pkg.name
    mozilla-firefox


Distribution modification views
===============================


Registering a distribution
--------------------------

The +add view of the DistributionSet allows admins to register distributions.

    >>> distributionset = getUtility(IDistributionSet)
    >>> view = create_view(distributionset, '+add')
    >>> print view.label
    Register a new distribution

    >>> print view.page_title
    Register a new distribution

The view provides a cancel link.

    >>> print view.cancel_url
    http://launchpad.dev/distros

The view accepts the basic fields to register a distribution.

    >>> view.field_names
    ['name', 'displayname', 'title', 'summary', 'description', 'domainname',
     'members', 'official_malone', 'official_blueprints', 'official_rosetta',
     'official_answers']

    >>> form = {
    ...     'field.name': 'youbuntu',
    ...     'field.displayname': 'YoUbuntu',
    ...     'field.title': 'YoUbuntu OS',
    ...     'field.summary': 'summary',
    ...     'field.description': 'description',
    ...     'field.domainname': 'youbuntu.me',
    ...     'field.members': 'landscape-developers',
    ...     'field.actions.save': 'Save',
    ...     }
    >>> view = create_initialized_view(distributionset, '+add', form=form)
    >>> view.errors
    []
    >>> print view.next_url
    http://launchpad.dev/youbuntu

    >>> distribution = distributionset.getByName("youbuntu")
    >>> print distribution.name
    youbuntu


Editing a distribution
----------------------

The +edit view allows an owner or admin to change a distribution. It provides
a label, page_title, and cancel_url.

    >>> view = create_view(distribution, '+edit')
    >>> print view.label
    Change YoUbuntu details

    >>> print view.page_title
    Change YoUbuntu details

    >>> print view.cancel_url
    http://launchpad.dev/youbuntu

The view accepts most of the distribution fields.

    >>> distribution.official_malone
    False

    >>> view.field_names
    ['displayname', 'title', 'summary', 'description',
     'bug_reporting_guidelines', 'icon', 'logo', 'mugshot', 'official_malone',
     'enable_bug_expiration', 'official_blueprints', 'official_rosetta',
     'official_answers', 'translation_focus']

    >>> del form['field.name']
    >>> del form['field.actions.save']
    >>> form['field.bug_reporting_guidelines'] = 'guidelines'
    >>> form['field.official_malone'] = 'on'
    >>> form['field.actions.change'] = 'Change'
    >>> view = create_initialized_view(distribution, '+edit', form=form)
    >>> view.errors
    []
    >>> print view.next_url
    http://launchpad.dev/youbuntu

    >>> print distribution.bug_reporting_guidelines
    guidelines

    >>> distribution.official_malone
    True


Changing a distribution mirror administrator
--------------------------------------------

the +selectmirroradmins allows the owner or admin to change the mirror
administrator.

    >>> view = create_view(distribution, '+selectmirroradmins')
    >>> print view.label
    Change YoUbuntu's mirror administrator

    >>> print view.page_title
    Change YoUbuntu's mirror administrator

    >>> print view.cancel_url
    http://launchpad.dev/youbuntu

The view accepts the mirror_admin field.

    >>> print distribution.mirror_admin.name
    name16

    >>> view.field_names
    ['mirror_admin']

    >>> form = {
    ...     'field.mirror_admin': 'no-priv',
    ...     'field.actions.change': 'Change',
    ...     }
    >>> view = create_initialized_view(
    ...     distribution, '+selectmirroradmins', form=form)
    >>> view.errors
    []
    >>> print view.next_url
    http://launchpad.dev/youbuntu

    >>> print distribution.mirror_admin.name
    no-priv

