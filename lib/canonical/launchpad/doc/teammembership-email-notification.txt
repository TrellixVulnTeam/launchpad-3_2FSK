= Mail notifications for membership changes =

Whenever a membership status is changed, we should notify the team admins and
the member whose membership changed. There's a few cases where we might want
to notify only the team admins, but in most of the cases we'll be sending two
similar (but not identical) notifications: one for all team admins and another
for the member.

    >>> def by_to_addrs(a, b):
    ...     return cmp(a[1], b[1])

    >>> def setStatus(membership, status, reviewer=None, comment=None):
    ...     """Set the status of the given membership.
    ...
    ...     Also sets the reviewer and comment, calling flush_database_updates
    ...     and transaction.commit after, to ensure the changes are flushed to
    ...     the database.
    ...     """
    ...     membership.setStatus(
    ...         status, reviewer=reviewer, reviewercomment=comment)
    ...     flush_database_updates()
    ...     transaction.commit()

    >>> import email
    >>> from canonical.launchpad.mail import stub
    >>> def pop_notifications():
    ...     stub.test_emails.sort(by_to_addrs)
    ...     notifications = [
    ...         email.message_from_string(raw_message)
    ...         for fromaddr, toaddrs, raw_message in stub.test_emails]
    ...     stub.test_emails = []
    ...     return notifications

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.interfaces import (
    ...     IPersonSet, ITeamMembershipSet)
    >>> from canonical.lp.dbschema import TeamMembershipStatus
    >>> personset = getUtility(IPersonSet)
    >>> membershipset = getUtility(ITeamMembershipSet)
    >>> sabdfl = personset.getByName('sabdfl')
    >>> kamion = personset.getByName('kamion')
    >>> sampleperson = personset.getByName('name12')
    >>> ubuntu_team = personset.getByName('ubuntu-team')

Now Robert Collins proposes himself as a member of the Ubuntu Team. This
generates a notification email only to Ubuntu Team administrators.

    >>> lifeless = personset.getByName('lifeless')
    >>> lifeless.join(ubuntu_team)
    >>> membership = membershipset.getByPersonAndTeam(lifeless, ubuntu_team)
    >>> membership.status.title
    'Proposed'

    >>> transaction.commit()
    >>> len(stub.test_emails)
    1
    >>> [admins_notification] = pop_notifications()
    >>> print admins_notification['To']
    colin.watson@ubuntulinux.com, foo.bar@canonical.com,
    jeff.waugh@ubuntulinux.com, mark@hbd.com
    >>> admins_notification['Subject']
    'Launchpad: lifeless wants to join team ubuntu-team'
    >>> admins_notification['Reply-To']
    'robertc@robertcollins.net'
    >>> print admins_notification.get_payload() #doctest: -NORMALIZE_WHITESPACE
    Hello
    <BLANKLINE>
    Robert Collins (lifeless) wants to be a member of Ubuntu Team (ubuntu-
    team), but this is a moderated team, so that membership has to be
    approved.  You can approve, decline or leave it as proposed by following
    the link below.
    <BLANKLINE>
        http://launchpad.dev/~ubuntu-team/+member/lifeless
    <BLANKLINE>
    Regards,
    The Launchpad team

Declining a proposed member should generate notifications for both the member
and team admins.

    >>> stub.test_emails = []

    # Need to be logged in as a team admin to be able to change memberships of
    # that team.
    >>> login('mark@hbd.com')
    >>> setStatus(membership, TeamMembershipStatus.DECLINED, reviewer=sabdfl)
    >>> len(stub.test_emails)
    2

    >>> admins_notification, member_notification = pop_notifications()
    >>> print admins_notification['To']
    colin.watson@ubuntulinux.com, foo.bar@canonical.com,
    jeff.waugh@ubuntulinux.com, mark@hbd.com
    >>> admins_notification['Subject']
    'Launchpad: Membership change: lifeless in ubuntu-team'
    >>> print admins_notification.get_payload() #doctest: -NORMALIZE_WHITESPACE
    Hello,
    <BLANKLINE>
    The membership status of Robert Collins (lifeless) in the team Ubuntu
    Team (ubuntu-team) was changed by Mark Shuttleworth (sabdfl) from
    Proposed to Declined.
    <BLANKLINE>
    <BLANKLINE>
    Regards,
    The Launchpad team

    >>> member_notification['To']
    'robertc@robertcollins.net'
    >>> member_notification['Subject']
    'Launchpad: Membership change: lifeless in ubuntu-team'
    >>> print member_notification.get_payload() #doctest: -NORMALIZE_WHITESPACE
    Hello,
    <BLANKLINE>
    The status of your membership in the team Ubuntu Team (ubuntu-team) was
    changed by Mark Shuttleworth (sabdfl) from Proposed to Declined.
    <BLANKLINE>
    <BLANKLINE>
    Regards,
    The Launchpad team


The same goes for approving a proposed member.
    
    >>> daf = getUtility(IPersonSet).getByName('daf')
    >>> daf.join(ubuntu_team)
    >>> daf_membership = membershipset.getByPersonAndTeam(daf, ubuntu_team)
    >>> daf_membership.status.title
    'Proposed'

    # Remove notification of daf's membership pending approval from
    # stub.test_emails
    >>> transaction.commit()
    >>> [notification] = pop_notifications()
    >>> notification['Subject']
    'Launchpad: daf wants to join team ubuntu-team'

    >>> setStatus(daf_membership, TeamMembershipStatus.APPROVED, 
    ...           reviewer=sabdfl, comment='This is a nice guy; I like him')
    >>> stub.test_emails.sort(by_to_addrs)
    >>> len(stub.test_emails)
    2
    >>> member_notification, admins_notification = pop_notifications()
    >>> admins_notification['To']
    'daf@canonical.com'
    >>> admins_notification['Subject']
    'Launchpad: daf added to ubuntu-team'
    >>> print admins_notification.get_payload() #doctest: -NORMALIZE_WHITESPACE
    Hello,
    <BLANKLINE>
    The status of your membership in the team Ubuntu Team (ubuntu-team) was
    changed by Mark Shuttleworth (sabdfl) from Proposed to Approved.
    <BLANKLINE>
    Comment:
    This is a nice guy; I like him
    <BLANKLINE>
    <BLANKLINE>
    Regards,
    The Launchpad team

    >>> print member_notification['To']
    colin.watson@ubuntulinux.com, foo.bar@canonical.com,
    jeff.waugh@ubuntulinux.com, mark@hbd.com
    >>> member_notification['Subject']
    'Launchpad: daf added to ubuntu-team'
    >>> print member_notification.get_payload() #doctest: -NORMALIZE_WHITESPACE
    Hello,
    <BLANKLINE>
    The membership status of Dafydd Harries (daf) in the team Ubuntu Team
    (ubuntu-team) was changed by Mark Shuttleworth (sabdfl) from Proposed to
    Approved.
    <BLANKLINE>
    Comment:
    This is a nice guy; I like him
    <BLANKLINE>
    <BLANKLINE>
    Regards,
    The Launchpad team


The same for deactivating a membership.

    >>> stub.test_emails = []
    >>> setStatus(daf_membership, TeamMembershipStatus.DEACTIVATED,
    ...           reviewer=sabdfl)
    >>> stub.test_emails.sort(by_to_addrs)
    >>> len(stub.test_emails)
    2
    >>> admins_notification, member_notification = pop_notifications()
    >>> print admins_notification['To']
    colin.watson@ubuntulinux.com, foo.bar@canonical.com,
    jeff.waugh@ubuntulinux.com, mark@hbd.com
    >>> admins_notification['Subject']
    'Launchpad: Membership change: daf in ubuntu-team'
    >>> print admins_notification.get_payload() #doctest: -NORMALIZE_WHITESPACE
    Hello,
    <BLANKLINE>
    The membership status of Dafydd Harries (daf) in the team Ubuntu Team
    (ubuntu-team) was changed by Mark Shuttleworth (sabdfl) from Approved to
    Deactivated.
    <BLANKLINE>
    <BLANKLINE>
    Regards,
    The Launchpad team

    >>> member_notification['To']
    'daf@canonical.com'
    >>> member_notification['Subject']
    'Launchpad: Membership change: daf in ubuntu-team'
    >>> print member_notification.get_payload() #doctest: -NORMALIZE_WHITESPACE
    Hello,
    <BLANKLINE>
    The status of your membership in the team Ubuntu Team (ubuntu-team) was
    changed by Mark Shuttleworth (sabdfl) from Approved to Deactivated.
    <BLANKLINE>
    <BLANKLINE>
    Regards,
    The Launchpad team


== Adding new members ==

When a person is added as a member of a team by one of that team's
administrators, an email is sent to all team administrators and to the new
member.

    >>> cprov = personset.getByName('cprov')
    >>> marilize = personset.getByName('marilize')
    >>> ubuntu_team.addMember(marilize, reviewer=cprov)
    >>> transaction.commit()
    >>> len(stub.test_emails)
    2
    >>> admins_notification, member_notification = pop_notifications()

    >>> member_notification['To']
    'marilize@hbd.com'
    >>> print member_notification.get_payload() #doctest: -NORMALIZE_WHITESPACE
    Hello,
    <BLANKLINE>
    Celso Providelo (cprov) added you as a member of Ubuntu Team (ubuntu-
    team).
    <BLANKLINE>
    Regards,
    The Launchpad team

    >>> print admins_notification['To']
    colin.watson@ubuntulinux.com, jeff.waugh@ubuntulinux.com, mark@hbd.com,
    foo.bar@canonical.com
    >>> print admins_notification.get_payload() #doctest: -NORMALIZE_WHITESPACE
    Hello,
    <BLANKLINE>
    Marilize Coetzee (marilize) has been added as a member of Ubuntu Team
    (ubuntu-team) by Celso Providelo (cprov). Follow the link below for more
    details.
    <BLANKLINE>
        http://launchpad.dev/~ubuntu-team/+member/marilize
    <BLANKLINE>
    Regards,
    The Launchpad team


By default, if the newly added member is actually a team, we'll only send
an invitation to the team's admins, telling them that the membership will
only be activated if they accept the invitation.

    >>> mirror_admins = personset.getByName('ubuntu-mirror-admins')
    >>> from canonical.launchpad.helpers import contactEmailAddresses
    >>> mirror_admins.getTeamAdminsEmailAddresses()
    ['mark@hbd.com']
    >>> ubuntu_team.addMember(mirror_admins, reviewer=cprov)
    >>> transaction.commit()
    >>> len(stub.test_emails)
    1
    >>> [notification] = pop_notifications()
    >>> print notification['To']
    mark@hbd.com
    >>> print notification.get_payload() #doctest: -NORMALIZE_WHITESPACE
    Hello,
    <BLANKLINE>
    Celso Providelo (cprov) has invited Mirror Administrators (ubuntu-
    mirror-admins) (which you are an administrator of) to join Ubuntu Team
    (ubuntu-team).
    <BLANKLINE>
    You can accept or decline this invitation on the following page:
    <BLANKLINE>
        http://launchpad.dev/~ubuntu-mirror-admins/+invitation/ubuntu-team
    <BLANKLINE>
    Regards,
    The Launchpad team
    
If one of the admins accept the invitation, then a notification is sent to the
team which just became a member and to the admins of the hosting team.

    >>> comment = "Of course I want to be part of ubuntu!"
    >>> mirror_admins.acceptInvitationToBeMemberOf(ubuntu_team, comment)
    >>> flush_database_updates()
    >>> transaction.commit()

    >>> len(stub.test_emails)
    2
    >>> admins_notification, member_notification = pop_notifications()
    >>> print admins_notification['To']
    colin.watson@ubuntulinux.com, foo.bar@canonical.com,
    jeff.waugh@ubuntulinux.com
    >>> print member_notification.get_payload() #doctest: -NORMALIZE_WHITESPACE
    Hello,
    <BLANKLINE>
    Mark Shuttleworth (sabdfl) has accepted the invitation to make Mirror
    Administrators (ubuntu-mirror-admins) a member of Ubuntu Team (ubuntu-
    team).
    <BLANKLINE>
    Comment:
    Of course I want to be part of ubuntu!
    <BLANKLINE>
    <BLANKLINE>
    Regards,
    The Launchpad team

    >>> print member_notification['To']
    mark@hbd.com,karl@canonical.com
    >>> print member_notification.get_payload() #doctest: -NORMALIZE_WHITESPACE
    Hello,
    <BLANKLINE>
    Mark Shuttleworth (sabdfl) has accepted the invitation to make Mirror
    Administrators (ubuntu-mirror-admins) a member of Ubuntu Team (ubuntu-
    team).
    <BLANKLINE>
    Comment:
    Of course I want to be part of ubuntu!
    <BLANKLINE>
    <BLANKLINE>
    Regards,
    The Launchpad team


Similarly, a notification is sent if the invitation is declined.

    >>> landscape = personset.getByName('landscape-developers')
    >>> ubuntu_team.addMember(landscape, reviewer=cprov)

    # Reset stub.test_emails as we don't care about the notification triggered
    # by the addMember() call.
    >>> transaction.commit()
    >>> stub.test_emails = []

    >>> comment = "Landscape has nothing to do with ubuntu, unfortunately."
    >>> landscape.declineInvitationToBeMemberOf(ubuntu_team, comment)
    >>> flush_database_updates()
    >>> transaction.commit()

    >>> len(stub.test_emails)
    2
    >>> admins_notification, member_notification = pop_notifications()
    >>> print admins_notification['To']
    colin.watson@ubuntulinux.com, foo.bar@canonical.com,
    jeff.waugh@ubuntulinux.com, mark@hbd.com
    >>> print member_notification.get_payload() #doctest: -NORMALIZE_WHITESPACE
    Hello,
    <BLANKLINE>
    Mark Shuttleworth (sabdfl) has declined the invitation to make Landscape
    Developers (landscape-developers) a member of Ubuntu Team (ubuntu-team).
    <BLANKLINE>
    Comment:
    Landscape has nothing to do with ubuntu, unfortunately.
    <BLANKLINE>
    <BLANKLINE>
    Regards,
    The Launchpad team

    >>> print member_notification['To']
    test@canonical.com,guilherme.salgado@canonical.com
    >>> print member_notification.get_payload() #doctest: -NORMALIZE_WHITESPACE
    Hello,
    <BLANKLINE>
    Mark Shuttleworth (sabdfl) has declined the invitation to make Landscape
    Developers (landscape-developers) a member of Ubuntu Team (ubuntu-team).
    <BLANKLINE>
    Comment:
    Landscape has nothing to do with ubuntu, unfortunately.
    <BLANKLINE>
    <BLANKLINE>
    Regards,
    The Launchpad team

It's also possible to forcibly add a team as a member of another one, by
passing force_team_add=True to the addMember() method.

    >>> launchpad = personset.getByName('launchpad')
    >>> ubuntu_team.addMember(launchpad, reviewer=cprov, force_team_add=True)
    >>> flush_database_updates()
    >>> transaction.commit()
    >>> len(stub.test_emails)
    2
    >>> member_notification, admins_notification = pop_notifications()
    >>> print admins_notification['To']
    jeff.waugh@ubuntulinux.com,mark@hbd.com,colin.watson@ubuntulinux.com
    >>> print admins_notification.get_payload() #doctest: -NORMALIZE_WHITESPACE
    Hello,
    <BLANKLINE>
    Launchpad Developers (launchpad) has been added as a member of Ubuntu
    Team (ubuntu-team) by Celso Providelo (cprov). Follow the link below for
    more details.
    <BLANKLINE>
        http://launchpad.dev/~ubuntu-team/+member/launchpad
    <BLANKLINE>
    Regards,
    The Launchpad team

    >>> print member_notification['To']
    foo.bar@canonical.com
    >>> print member_notification.get_payload() #doctest: -NORMALIZE_WHITESPACE
    Hello,
    <BLANKLINE>
    Celso Providelo (cprov) added Launchpad Developers (launchpad) (which
    you are a member of) as a member of Ubuntu Team (ubuntu-team).
    <BLANKLINE>
    Regards,
    The Launchpad team

== Membership expiration warnings ==

When we get close to the expiration date of a given membership, an expiration
warning is sent to the member, so that he can contact the team's
administrators (or renew it himself when he has necessary rights) in case
he wants to retain that membership. This is done by the
flag-expired-memberships cronscript, which uses
ITeamMembership.sendExpirationWarningEmail to do its job.

    >>> import pytz
    >>> from datetime import datetime, timedelta
    >>> utc_now = datetime.now(pytz.timezone('UTC'))
    >>> kamion_on_ubuntu_team = membershipset.getByPersonAndTeam(
    ...     kamion, ubuntu_team)
    >>> kamion_on_ubuntu_team.setExpirationDate(
    ...     utc_now + timedelta(days=9), sabdfl)
    >>> flush_database_updates()

Kamion is an admin of the Ubuntu team, but team admins can't change the
expiration date of their own memberships, so he still has to contact one of
the other team admins.

    >>> kamion_on_ubuntu_team.status.name
    'ADMIN' 
    >>> kamion_on_ubuntu_team.sendExpirationWarningEmail()
    >>> transaction.commit()
    >>> [notification] = pop_notifications()
    >>> notification['To']
    'colin.watson@ubuntulinux.com'
    >>> notification['Subject']
    'Launchpad: ubuntu-team team membership about to expire'
    >>> print notification.get_payload() #doctest: -NORMALIZE_WHITESPACE
    Hi Colin Watson
    <BLANKLINE>
    On ... your membership
    of the Ubuntu Team (ubuntu-team) Launchpad team
    is due to expire.
    <http://launchpad.dev/~ubuntu-team>
    <BLANKLINE>
    To prevent this membership from expiring, you should get in touch
    with one of the team's administrators:
    Alexander Limi (limi) <http://launchpad.dev/~limi>
    Foo Bar (name16) <http://launchpad.dev/~name16>
    Jeff Waugh (jdub) <http://launchpad.dev/~jdub>
    Mark Shuttleworth (sabdfl) <http://launchpad.dev/~sabdfl>
    <BLANKLINE>
    If your membership does expire, we'll send you one more message to let
    you know it's happened.
    <BLANKLINE>
    Thanks for using Launchpad!
    <BLANKLINE>

In the case of the beta-testers team, the email is sent only to the
team's owner, which doesn't have the necessary rights to renew the
membership of his team, so he's instructed to contact one of the
ubuntu-team's admins.

    >>> beta_testers = personset.getByName('launchpad-beta-testers')
    >>> beta_testers_on_ubuntu_team = membershipset.getByPersonAndTeam(
    ...     beta_testers, ubuntu_team)
    >>> beta_testers_on_ubuntu_team.setExpirationDate(
    ...     utc_now + timedelta(days=9), sabdfl)
    >>> flush_database_updates()
    >>> beta_testers_on_ubuntu_team.sendExpirationWarningEmail()
    >>> transaction.commit()
    >>> [notification] = pop_notifications()
    >>> notification['To']
    'beta-admin@launchpad.net'
    >>> notification['Subject']
    'Launchpad: ubuntu-team team membership about to expire'
    >>> print notification.get_payload() #doctest: -NORMALIZE_WHITESPACE
    Hi,
    <BLANKLINE>
    On ..., nine days from now, the membership
    of Launchpad Beta Testers (launchpad-beta-testers) (which you are
    the owner of) in the Ubuntu Team (ubuntu-team) Launchpad team
    is due to expire.
    <http://launchpad.dev/~ubuntu-team>
    <BLANKLINE>
    To prevent this membership from expiring, you should get in touch
    with one of the team's administrators:
    Alexander Limi (limi) <http://launchpad.dev/~limi>
    Colin Watson (kamion) <http://launchpad.dev/~kamion>
    Foo Bar (name16) <http://launchpad.dev/~name16>
    Jeff Waugh (jdub) <http://launchpad.dev/~jdub>
    Mark Shuttleworth (sabdfl) <http://launchpad.dev/~sabdfl>
    <BLANKLINE>
    If the membership does expire, we'll send you one more message to let
    you know it's happened.
    <BLANKLINE>
    Thanks for using Launchpad!
    <BLANKLINE>

If the team's renewal policy is ONDEMAND, though, the member is invited to
renew his own membership.

    >>> from canonical.lp.dbschema import TeamMembershipRenewalPolicy
    >>> ubuntu_team.renewal_policy = TeamMembershipRenewalPolicy.ONDEMAND
    >>> ubuntu_team.defaultrenewalperiod = 365
    >>> flush_database_updates()
    >>> kamion_on_ubuntu_team.sendExpirationWarningEmail()
    >>> transaction.commit()
    >>> [notification] = pop_notifications()
    >>> notification['To']
    'colin.watson@ubuntulinux.com'
    >>> notification['Subject']
    'Launchpad: ubuntu-team team membership about to expire'
    >>> print notification.get_payload() #doctest: -NORMALIZE_WHITESPACE
    Hi Colin Watson
    <BLANKLINE>
    On ... from now, your membership
    of the Ubuntu Team (ubuntu-team) Launchpad team
    is due to expire.
    <http://launchpad.dev/~ubuntu-team>
    <BLANKLINE>
    If you want, you can renew this membership at
    <http://launchpad.dev/~kamion/+expiringmembership/ubuntu-team>
    <BLANKLINE>
    If your membership does expire, we'll send you one more message to let
    you know it's happened.
    <BLANKLINE>
    Thanks for using Launchpad!
    <BLANKLINE>

    >>> beta_testers_on_ubuntu_team.sendExpirationWarningEmail()
    >>> transaction.commit()
    >>> [notification] = pop_notifications()
    >>> notification['To']
    'beta-admin@launchpad.net'
    >>> notification['Subject']
    'Launchpad: ubuntu-team team membership about to expire'
    >>> print notification.get_payload() #doctest: -NORMALIZE_WHITESPACE
    Hi,
    <BLANKLINE>
    On ..., nine days from now, the membership
    of Launchpad Beta Testers (launchpad-beta-testers) (which you are
    the owner of) in the Ubuntu Team (ubuntu-team) Launchpad team
    is due to expire.
    <http://launchpad.dev/~ubuntu-team>
    <BLANKLINE>
    If you want, you can renew this membership at
    <http://.../~launchpad-beta-testers/+expiringmembership/...>
    <BLANKLINE>
    If the membership does expire, we'll send you one more message to let
    you know it's happened.
    <BLANKLINE>
    Thanks for using Launchpad!
    <BLANKLINE>

If the team's renewal policy is NONE but the member has the necessary rights
to change the expiration date of his own membership (i.e. by being the team's
owner), the notification he gets will contain a link to his memberhip page,
where he can extend it.

    >>> landscape.renewal_policy = TeamMembershipRenewalPolicy.NONE
    >>> landscape.teamowner.preferredemail.email
    u'test@canonical.com'
    >>> sampleperson_on_landscape = membershipset.getByPersonAndTeam(
    ...     sampleperson, landscape)
    >>> sampleperson_on_landscape.setExpirationDate(
    ...     utc_now + timedelta(days=9), sampleperson)
    >>> flush_database_updates()
    >>> sampleperson_on_landscape.sendExpirationWarningEmail()
    >>> transaction.commit()
    >>> [notification] = pop_notifications()
    >>> notification['To']
    'test@canonical.com'
    >>> notification['Subject']
    'Launchpad: landscape-developers team membership about to expire'
    >>> print notification.get_payload() #doctest: -NORMALIZE_WHITESPACE
    Hi Sample Person
    <BLANKLINE>
    On ..., nine days from now, your membership
    of the Landscape Developers (landscape-developers) Launchpad team
    is due to expire.
    <http://launchpad.dev/~landscape-developers>
    <BLANKLINE>
    To stay a member of this team you should extend your membership at
    <http://launchpad.dev/~landscape-developers/+member/name12>
    <BLANKLINE>
    If your membership does expire, we'll send you one more message to let
    you know it's happened.
    <BLANKLINE>
    Thanks for using Launchpad!
    <BLANKLINE>


== Membership expiration notification ==

For teams with a renewal policy other than AUTOMATIC, if a membership is not
renewed before its expiration date it'll be flagged as expired and a
notification is sent to the team admins and to the member whose membership
expired. If the renewal policy is AUTOMATIC, though, the memberships that
should expire will retain their status and have their dateexpires update. A
notification is also sent to the member and to team admins when a membership
is automatically renewed.

    >>> from zope.security.proxy import removeSecurityProxy
    >>> from canonical.lp.dbschema import TeamMembershipRenewalPolicy
    >>> utc_now = datetime.now(pytz.timezone('UTC'))
    >>> lp_admins = personset.getByName('admins')
    >>> print lp_admins.renewal_policy.title
    invite them to apply for renewal

    >>> sabdfl_on_admins = membershipset.getByPersonAndTeam(sabdfl, lp_admins)

    # Need to cheat here and set the expiry date manually because the expiry
    # date given to setExpirationDate() must be in the future.
    >>> removeSecurityProxy(sabdfl_on_admins).dateexpires = utc_now

    >>> ubuntu_team = personset.getByName('ubuntu-team')
    >>> ubuntu_team.renewal_policy = TeamMembershipRenewalPolicy.AUTOMATIC
    >>> ubuntu_team.defaultrenewalperiod = 365
    >>> jdub = personset.getByName('jdub')
    >>> jdub_on_ubuntu_team = membershipset.getByPersonAndTeam(
    ...     jdub, ubuntu_team)
    >>> removeSecurityProxy(jdub_on_ubuntu_team).dateexpires = utc_now
    >>> flush_database_updates()

    >>> from canonical.launchpad.interfaces import ILaunchpadCelebrities
    >>> membershipset.handleMembershipsExpiringToday(
    ...     reviewer=getUtility(ILaunchpadCelebrities).team_membership_janitor)
    >>> flush_database_updates()
    >>> transaction.commit()

    >>> len(stub.test_emails)
    6

The expiration/auto-renewal notifications are sent to each person
individually rather than sending a single email to everybody, so we'll
just show the recipients and the different messages we may send.

    >>> def print_distinct_messages_and_recipients():
    ...     """Pop all messages from stub.test_emails and print them with
    ...      their recipients.
    ...     
    ...     Since the same message may be sent more than once (for different
    ...     recipients), we print each distinct message only once and group
    ...     all recipients of that message together.
    ...     """
    ...     distinct_messages = {}
    ...     for message in pop_notifications():
    ...         recipients = set(
    ...             recipient.strip()
    ...             for recipient in message['To'].split(','))
    ...         body = message.get_payload()
    ...         if body not in distinct_messages:
    ...             distinct_messages[body] = recipients
    ...         else:
    ...             existing_recipients = distinct_messages[body]
    ...             distinct_messages[body] = existing_recipients.union(
    ...                 recipients)
    ...     for message in sorted(distinct_messages):
    ...         print 'To:', sorted(distinct_messages[message])
    ...         print message #doctest: -NORMALIZE_WHITESPACE
    ...         print "-"*40

    >>> print_distinct_messages_and_recipients()
    To: ['colin.watson@ubuntulinux.com', 'foo.bar@canonical.com', 'mark@hbd.com']
    Hello,
    <BLANKLINE>
    The membership of Jeff Waugh (jdub) in the Ubuntu Team (ubuntu-team)
    team has been automatically renewed until ...
    <BLANKLINE>
    Regards,
    The Launchpad team
    ----------------------------------------
    To: ['foo.bar@canonical.com', 'guilherme.salgado@canonical.com']
    Hello,
    <BLANKLINE>
    The membership of Mark Shuttleworth (sabdfl) in the Launchpad
    Administrators (admins) team has expired.
    <BLANKLINE>
    Regards,
    The Launchpad team
    ----------------------------------------
    To: ['mark@hbd.com']
    Hello,
    <BLANKLINE>
    Your membership in the Launchpad Administrators (admins) team has
    expired.
    <BLANKLINE>
    Regards,
    The Launchpad team
    ----------------------------------------
    To: ['jeff.waugh@ubuntulinux.com']
    Hello,
    <BLANKLINE>
    Your membership in the Ubuntu Team (ubuntu-team) team has been
    automatically renewed until ...
    <BLANKLINE>
    Regards,
    The Launchpad team
    ----------------------------------------


== Memberships renewed by the members themselves ==

Another possible renewal policy for teams is ONDEMAND, which means that team
members are invited to renew their membership once it gets close to their
expiration date. When a member renew his own membership, a notification is
sent to all team admins.

    >>> karl = personset.getByName('karl')
    >>> mirror_admins = personset.getByName('ubuntu-mirror-admins')
    >>> karl_on_mirroradmins = membershipset.getByPersonAndTeam(
    ...     karl, mirror_admins)
    >>> tomorrow = datetime.now(pytz.timezone('UTC')) + timedelta(days=1)
    >>> print karl_on_mirroradmins.status.title
    Approved
    >>> print karl_on_mirroradmins.dateexpires
    None

    >>> login(mirror_admins.teamowner.preferredemail.email)
    >>> karl_on_mirroradmins.setExpirationDate(
    ...     tomorrow, mirror_admins.teamowner)
    >>> ondemand = TeamMembershipRenewalPolicy.ONDEMAND
    >>> karl_on_mirroradmins.team.renewal_policy = ondemand
    >>> mirror_admins.defaultrenewalperiod = 365
    >>> flush_database_updates()

    >>> login(karl.preferredemail.email)
    >>> karl.renewTeamMembership(mirror_admins)
    >>> transaction.commit()
    >>> len(stub.test_emails)
    1

    >>> print_distinct_messages_and_recipients()
    To: ['mark@hbd.com']
    Hello,
    <BLANKLINE>
    Karl Tilbury (karl) renewed his/her own membership in the Mirror
    Administrators (ubuntu-mirror-admins) team until ...
    <BLANKLINE>
    Regards,
    The Launchpad team
    ----------------------------------------

== Some special cases ==

When creating a new team, the owner has his membership's status changed from
approved to admin, but he won't get a notification of that.

    >>> team = personset.newTeam(sabdfl, 'testteam', 'Test')
    >>> transaction.commit()
    >>> len(stub.test_emails)
    0

    # Other tests expect an empty stub.test_emails, but if this one above
    # fails, I don't want a non-empty stub.test_emails to cause the tests
    # below to fail too.
    >>> stub.test_emails = []

If cprov is made an administrator of ubuntu_team, he'll only get one email
notification.

    >>> cprov = personset.getByName('cprov')
    >>> cprov_membership = membershipset.getByPersonAndTeam(cprov, ubuntu_team)
    >>> login('mark@hbd.com')
    >>> setStatus(
    ...     cprov_membership, TeamMembershipStatus.ADMIN, reviewer=sabdfl)
    >>> len(stub.test_emails)
    2
    >>> member_notification, admins_notification = pop_notifications()
    >>> print admins_notification['To']
    colin.watson@ubuntulinux.com, foo.bar@canonical.com,
    jeff.waugh@ubuntulinux.com, mark@hbd.com
    >>> member_notification['To']
    'celso.providelo@canonical.com'

If a team admin changes his own membership, the notification sent will clearly
say that the change was performed by the user himself, and it will only be
sent to the team administrators.

    >>> jdub = getUtility(IPersonSet).getByName('jdub')
    >>> jdub_membership = membershipset.getByPersonAndTeam(jdub, ubuntu_team)
    >>> setStatus(jdub_membership, TeamMembershipStatus.APPROVED,
    ...           reviewer=jdub)
    >>> len(stub.test_emails)
    1
    >>> [admins_notification] = pop_notifications()
    >>> print admins_notification['To']
    celso.providelo@canonical.com, colin.watson@ubuntulinux.com,
    foo.bar@canonical.com, mark@hbd.com
    >>> admins_notification['Subject']
    'Launchpad: Membership change: jdub in ubuntu-team'
    >>> print admins_notification.get_payload() #doctest: -NORMALIZE_WHITESPACE
    Hello,
    <BLANKLINE>
    The membership status of Jeff Waugh (jdub) in the team Ubuntu Team
    (ubuntu-team) was changed by the user himself from Administrator to
    Approved.
    <BLANKLINE>
    <BLANKLINE>
    Regards,
    The Launchpad team


Deactivating the membership of a team also generates notifications for the
team which had the membership deactivated and to the administrators of the
hosting team. Note that the notification sent to the team whose membership
was deactivated will not talk about "your membership" as it wouldn't make
sense to the members of the team reading it.

    >>> mirror_admins_membership = membershipset.getByPersonAndTeam(
    ...     mirror_admins, ubuntu_team)
    >>> setStatus(mirror_admins_membership, TeamMembershipStatus.DEACTIVATED,
    ...           reviewer=sabdfl)
    >>> len(stub.test_emails)
    2
    >>> member_notification, admins_notification = pop_notifications()
    >>> admins_notification['To']
    'mark@hbd.com,karl@canonical.com'

    >>> print member_notification['To']
    celso.providelo@canonical.com, colin.watson@ubuntulinux.com,
    foo.bar@canonical.com
    >>> print member_notification.get_payload() #doctest: -NORMALIZE_WHITESPACE
    Hello,
    <BLANKLINE>
    The membership status of Mirror Administrators (ubuntu-mirror-admins) in
    the team Ubuntu Team (ubuntu-team) was changed by Mark Shuttleworth
    (sabdfl) from Approved to Deactivated.
    <BLANKLINE>
    <BLANKLINE>
    Regards,
    The Launchpad team

