When a new session is created, we log the referrer. This way we can
analyze how our users learn about Launchpad for the first time with a
reasonable degree of accuracy. We store this information in the session,
as the original referrer will be lost by the time a user has reached a
signup page, and also because we want to know about users who never bother
to signup.

Create a helper to load the referrer from the session database.

>>> def referrer(browser):
...     import re
...     from canonical.launchpad.webapp.pgsession import PGSessionDataContainer
...     raw_cookie = browser.headers['Set-Cookie']
...     client_id = re.search('^launchpad_tests=(.*?);', raw_cookie).group(1)
...     session_data_container = PGSessionDataContainer()
...     session_data = session_data_container[client_id]
...     session_pkg_data = session_data['launchpad.session']
...     referrer = session_pkg_data['initial_referrer']
...     return referrer

>>> browser.addHeader('Referer', 'http://www.example.com/?foo=bar')
>>> browser.open('http://launchpad.dev/')
>>> referrer(browser)
u'http://www.example.com/?foo=bar'

No referrer is handled too just fine, storing None in the session.

XXX: Tests show that when running Launchpad for real, this correctly
returns None as the referrer. However, the test browser sets it to
'localhost' for some reason when the Referer: header is not set.
-- StuartBishop 20060913

>>> anon_browser.open('http://features.launchpad.dev/')
>>> referrer(anon_browser)
u'localhost'

And crazy referrers are handled gracefully, such as non-UTF8 encoded. 
Information will be lost, but it is information we don't care about and
it is better than raising an exception with majorly broken browsers that
send headers through in invalid character sets.

>>> admin_browser.addHeader('Referer', 'bogus'.encode('UTF-16'))
>>> admin_browser.open('http://launchpad.dev/')
>>> referrer(admin_browser)
u'\ufffd\ufffdb\x00o\x00g\x00u\x00s\x00'

