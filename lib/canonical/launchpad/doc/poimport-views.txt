
PO Import Browser Views
-----------------------

Users can upload PO templates, PO files, and tarballs containing PO templates
and PO files to Rosetta. This test checks that this functionality works
properly.

    >>> from canonical.launchpad.ftests.harness import \
    ...     LaunchpadFunctionalTestSetup
    >>> from canonical.librarian.ftests.harness import LibrarianTestSetup
    >>> LaunchpadFunctionalTestSetup().setUp()
    >>> LibrarianTestSetup().setUp()

Get a PO template to import to.

    >>> from canonical.launchpad.database import POTemplate
    >>> potemplate = POTemplate.get(1)

Log in so that the browser code has a user to associate with the imports.

    >>> login('carlos@canonical.com')

Construct test request data.

    >>> from zope.publisher.browser import TestRequest, FileUpload
    >>> from StringIO import StringIO

    >>> class TestFileUpload(FileUpload):
    ...     def __init__(self, filename, stream):
    ...         self.filename = filename
    ...         for method in ['read', 'seek', 'tell']:
    ...             self.__dict__[method] = getattr(stream, method)

    >>> fileupload = TestFileUpload(
    ...     filename='foo.pot',
    ...     stream=StringIO('# Hello!'))

    >>> request = TestRequest(
    ...     environ={'REQUEST_METHOD': 'POST'},
    ...     form={
    ...         'UPLOAD': 1,
    ...         'file': fileupload,
    ...     })

Now ask the view to process it.

    >>> from canonical.launchpad.browser.potemplate import POTemplateView
    >>> view = POTemplateView(potemplate, request)
    >>> view.submitForm()
    >>> view.status_message
    'Thank you for your upload. The template content will appear in Rosetta in a few minutes.'

Commit the transaction so as to be able to access Librarian data.

    >>> import transaction
    >>> transaction.commit()

Check the data has been attached.

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.interfaces import ITranslationImportQueueSet
    >>> from canonical.librarian.interfaces import ILibrarianClient
    >>> translation_import_queue_set = getUtility(ITranslationImportQueueSet)
    >>> librarian_client = getUtility(ILibrarianClient)
    >>> entries = list(
    ...     translation_import_queue_set.getEntriesForProductSeries(
    ...         potemplate.productseries))
    >>> len(entries)
    1
    >>> librarian_client.getFileByAlias(entries[0].content.id).read()
    '# Hello!'

Also, check to be sure that the we get the right path with the .pot upload

    >>> entries[0].path
    u'po/evolution-2.2.pot'

Try the same thing all over again but with a tarball upload.

    >>> from canonical.launchpad.helpers import join_lines
    >>> pot_contents = join_lines(
    ...     '# This is the PO template.',
    ...     'msgid ""',
    ...     'msgstr ""',
    ...     '"Content-Type: text/plain; charset=ascii\\n"')

    >>> from canonical.launchpad.helpers import RosettaWriteTarFile
    >>> tarball = RosettaWriteTarFile.files_to_stream({
    ...     'foo/foo.pot': pot_contents,
    ...     'foo/es.po': '# This is the Spanish PO file.',
    ... })

    >>> fileupload = TestFileUpload(
    ...     filename='foo.tar.gz',
    ...     stream=tarball)

    >>> request = TestRequest(
    ...     environ={'REQUEST_METHOD': 'POST'},
    ...     form={
    ...         'UPLOAD': 1,
    ...         'file': fileupload,
    ...     })

    >>> view = POTemplateView(potemplate, request)
    >>> view.submitForm()
    >>> view.status_message
    'Thank you for your upload. 2 files from the tarball will be imported into Rosetta in a few minutes.'

Check the files are stored properly.

    >>> transaction.commit()

    >>> entries = list(
    ...     translation_import_queue_set.getEntriesForProductSeries(
    ...         potemplate.productseries))

We should have three entries, the previous one + the new additions.

    >>> len(entries)
    3
    >>> count = 0
    >>> for entry in entries:
    ...     content = librarian_client.getFileByAlias(entry.content.id).read()
    ...     if entry.path == 'foo/foo.pot':
    ...         count += 1
    ...         content == pot_contents
    ...     elif entry.path == 'foo/es.po':
    ...         count += 1
    ...         content == '# This is the Spanish PO file.'
    True
    True

Now let's test the upload view on POFile. This works very similarly. The extra
twist is that we check that the 'ispublished' attribute gets set.

First, our POFile object.

    >>> from canonical.launchpad.database import POFile
    >>> pofile = POFile.get(1)

Then a TestFileUpload and a TestRequest as before.

    >>> fileupload = TestFileUpload(
    ...     filename='es.po',
    ...     stream=StringIO('# Yo!'))

An 'upload_type' of 'user' means that the 'published' flag should become unset.

    >>> request = TestRequest(
    ...     environ={'REQUEST_METHOD': 'POST'},
    ...     form={
    ...         'UPLOAD': 1,
    ...         'file': fileupload,
    ...         'upload_type': 'user',
    ...     })

And submitting the form and checking the results works in a similar way also.

    >>> from canonical.launchpad.browser import POFileView
    >>> view = POFileView(pofile, request)
    >>> view.submitForm()

Check the status message.

    >>> view.status_message
    'Thank you for your upload. The translation content will appear in Rosetta in a few minutes.'

Check the import.

    >>> transaction.commit()

    >>> entries = list(
    ...     translation_import_queue_set.getEntriesForProductSeries(
    ...         pofile.potemplate.productseries))

We should have four entries, the previous one + the new additions.

    >>> len(entries)
    4
    >>> entry = None
    >>> content = None
    >>> for entry in entries:
    ...     if entry.path == 'es.po':
    ...         content = librarian_client.getFileByAlias(
    ...             entry.content.id).read()
    ...         break

    >>> content == '# Yo!'
    True

Check the 'ispublished' flag.

    >>> entry.ispublished
    False

    >>> LibrarianTestSetup().tearDown()
    >>> LaunchpadFunctionalTestSetup().tearDown()

