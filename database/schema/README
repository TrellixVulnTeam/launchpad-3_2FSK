How to make database schema changes
===================================

First - don't. Unless there is a problem doing so, get Stuart
or the acting DBA to do it by emailing the launchpad@ mailing list
with your request. The reason we are currently using launchpad@ is so that
other launchpad team members can see what the requests are and have a
chance to comment if it affects their work in any way.

The rest of these instructions are for the acting DBA or for 'we have 
to do this now' work.

1. `cd launchpad/database/schema; dropdb launchpad_test; make`

    This is the simplest way of making sure your database is clean.
    Failing to drop your database risks a bad sampledata export.

2.  Create a file launchpad/database/schema/patch-x-yy-0.sql, where
    'x' is the current major database revision number (and should not be
    changed except after a push to production) and yy is the next available
    number. It is important that yy is two digits, as otherwise the patch
    will be applied in the wrong order.

3.  Put the necessary commands in patch-x-yy-0.sql

4.  Inspect the launchpad_prod database on emperor. Check all affected tables
    to see if they contain data. If they do, it may be necessary to add extra
    commands to the patch to ensure data is migrated or else the patch will fail
    when applied to production.

5.  Run the commands in patch-x-yy-0.sql one at a time in an interactive
    session. This lets you catch errors and cases where the sample data
    needs to be migrated. Issue SQL commands as necessary o port sample
    data to the new schema.

6.  Run `make newsampledata` in launchpad/database/schema.

7.  Run `diff current.sql newsampledata.sql` in launchpad/database/sampledata
    to confirm the changes are sane

8.  Move newsampledata.sql to current.sql

9.  Run `make` in launchpad/database/schema. Alter patch as necessary
    to minimize noise.

10. Commit

11. Respond to message in launchpad@ informing the group the modification has
    been made.

Steps 6, 7 & 8 can be ommitted of course if no table modifications are being
made (eg. just indexes being added).


Production Database Upgrades
============================

Stop PostgreSQL:

    % pg_ctl -m fast stop

Start PostgreSQL without external connections

    % pg_ctl start -o '--tcpip-socket=false'

Duplicate the launchpad_prod database

    % createdb -E UNICODE --template=launchpad_prod launchpad_prod_20051225

Restart PostgreSQL with external connections

    % pg_ctl -m fast stop
    % pg_ctl start -l /var/log/postgresql/postgres.log

At this point, services can be restarted that don't automatically reconnect,
allowing a test upgrade to be done at leisure.

Do a test upgrade
-----------------

Make a test database from the snapshot we just made. We don't use the
snapshot in case we need a few attempts to get the upgrade running
cleanly.

    % createdb -E UNICODE --template=launchpad_prod_20051225 launchpad_tst

We need a copy of the code about to be rolled out to production.
You need to 'make build' in the root of this checkout or later steps will
fail with weird ImportError exceptions. 

    % make build

This checkout contains the patches we need to run:

First, determine the current patch level of the database

    % psql -d launchpad_tst -c 'select * from launchpaddatabaserevision'
    major | minor | patch
    -------+-------+-------
        6 |    25 |     0

Then, see what patches need to be run:
    % ls launchpad/database/schema/patch*.sql
    database/schema/patch-6-00-0.sql  database/schema/patch-6-17-0.sql
    database/schema/patch-6-01-0.sql  database/schema/patch-6-18-0.sql
    database/schema/patch-6-02-0.sql  database/schema/patch-6-19-0.sql
    database/schema/patch-6-03-0.sql  database/schema/patch-6-20-0.sql
    database/schema/patch-6-04-0.sql  database/schema/patch-6-21-0.sql
    database/schema/patch-6-05-0.sql  database/schema/patch-6-22-0.sql
    database/schema/patch-6-06-0.sql  database/schema/patch-6-23-0.sql
    database/schema/patch-6-07-0.sql  database/schema/patch-6-24-0.sql
    database/schema/patch-6-08-0.sql  database/schema/patch-6-25-0.sql
    database/schema/patch-6-09-0.sql  database/schema/patch-6-26-0.sql
    database/schema/patch-6-10-0.sql  database/schema/patch-6-27-0.sql
    database/schema/patch-6-11-0.sql  database/schema/patch-6-28-0.sql
    database/schema/patch-6-12-0.sql  database/schema/patch-6-29-0.sql
    database/schema/patch-6-13-0.sql  database/schema/patch-6-30-0.sql
    database/schema/patch-6-14-0.sql  database/schema/patch-6-31-0.sql
    database/schema/patch-6-15-0.sql  database/schema/patch-6-32-0.sql
    database/schema/patch-6-16-0.sql

First thing we need to do is recreate our stored procedures, as the patches
might rely on new ones:

    psql -d launchpad_tst -U postgres -f trusted.sql

We need to run each patch with a higher revision in sequence. Also, a visual
inspection of the patches doesn't hurt since it will be a pta to roll back
these changes after they have been applied to production.


    % psql -d launchpad_tst -U postgres
    launchpad_tst=# \i patch-6-26-0.sql
    SET
    ALTER TABLE
    UPDATE 1

If you get errors, then there are issues with installing that patch with the
production data. Fix the patch, and start again from a fresh copy of the
database.

You can rebuild the full text indexes - this step can be skipped if fti.py
has not been modified since last rollout.

    %  env PYTHONPATH=$HOME/dists/launchpad/lib LP_DBNAME=launchpad_tst \
        LP_DBUSER=postgres python fti.py

You should now rebuild the permissions. This step should not be skipped
because it is quick.

    % env PYTHONPATH=$HOME/dists/launchpad/lib LP_DBNAME=launchpad_tst \
        LP_DBUSER=postgres python security.py

For Real
--------

If all that worked correctly, do a few sanity checks on the database
relating to the tables the patches modified. And if the visual inspection
passes, you are ready to repeat the entire procedure again on the production
database. Shut down postgres as before, restart it without external
connections as before, and run all the patches as before (using
launchpad_prod instead of launchpad_tst).

Notes
=====

There is a Makefile in launchpad/database/schema that will
create the launchpad_test database (if it doesn't already exist),
drop all your tables and create the current schema with all patches
applied.

If you want to check anything into the launchpad/database/schema
directory, please do not give it a .sql extension or you will might
confuse the simple Makefile.

