Sprint Attendance Pages
=======================

SprintAttendanceAddView is the view that handles attendance to meetings.
The view descends from BaseSprintAttendanceAddView which provides date
handling.

    >>> from lp.blueprints.browser.sprintattendance import (
    ...     BaseSprintAttendanceAddView)
    >>> from canonical.launchpad.interfaces import ISprintSet

    >>> ubz = getUtility(ISprintSet)['ubz']
    >>> sprint_attendance_view = create_view(ubz, name='+attend')
    >>> isinstance(sprint_attendance_view, BaseSprintAttendanceAddView)
    True

The view captures the user's time_start and time_ends attendance.

    >>> sprint_attendance_view.field_names
    ['time_starts', 'time_ends']

A helper function to test date handling.

  >>> def create_sprint_attendance_view(sprint, dates):
  ...     time_starts, time_ends = dates
  ...     form = {
  ...         'field.time_starts': time_starts,
  ...         'field.time_ends': time_ends,
  ...         'field.actions.register': 'Register'}
  ...     return create_initialized_view(sprint, name='+attend', form=form)

This sprint doesn't have any attendees. It dose have the required dates set.

  >>> [attendee.name for attendee in ubz.attendees]
  []
  >>> ubz.time_starts
  datetime.datetime(2005, 10, 7, 23, 30, tzinfo=<UTC>)
  >>> ubz.time_ends
  datetime.datetime(2005, 11, 17, 0, 11, tzinfo=<UTC>)

  >>> login('test@canonical.com')

Choosing a starting date after the ending date returns a nice error message.

  >>> dates = ['2005-11-15', '2005-10-09']
  >>> sprint_attendance_view = create_sprint_attendance_view(ubz, dates)
  >>> print sprint_attendance_view.getFieldError('time_ends')
  The end time must be after the start time.

Choosing a starting date too far after the meeting's end returns an
error message.

  >>> dates = ['2006-01-01', '2006-02-01']
  >>> sprint_attendance_view = create_sprint_attendance_view(ubz, dates)
  >>> print sprint_attendance_view.getFieldError('time_starts')
  Please pick a date before 2005-11-16 19:11

Choosing a ending date more than a day before the meeting's start returns
an error message.

  >>> dates = ['2005-07-01', '2005-08-01']
  >>> sprint_attendance_view = create_sprint_attendance_view(ubz, dates)
  >>> print sprint_attendance_view.getFieldError('time_ends')
  Please pick a date after 2005-10-07 19:30

Entering a starting date just before the meeting's start date or a
finishing date just after the meeting's end date works because we assume
you wanted the meeting's start and end dates respectively.

  >>> dates = ['2005-10-07 09:00', '2005-11-17 19:05']
  >>> sprint_attendance_view = create_sprint_attendance_view(ubz, dates)
  >>> sprint_attendance_view.errors
  []

Sample Person is now listed as an attendee.

  >>> ubz = getUtility(ISprintSet)['ubz']
  >>> [attendee.name for attendee in ubz.attendees]
  [u'name12']
  >>> sprint_attendance = ubz.attendances[0]

  >>> ubz.time_starts == sprint_attendance.time_starts
  True
  >>> ubz.time_ends == sprint_attendance.time_ends
  True


Exporting the list of attendees
-------------------------------

The list of a sprint's attendees can be exported as a CSV file,
containing some details about each of the attendees.

If the person has specified their time zone in Launchpad, the CSV will
include it.

    >>> view = create_view(ubz, '+attendees-csv')
    >>> print view.render()
    Launchpad username,Display name,...Timezone,...
    name12,Sample Person...Australia/Perth...

However, some people may set their location/timezone as hidden, so if
that's the case we won't include the person's timezone.

    >>> person = factory.makePerson(
    ...     name='ubz-last-attendee', time_zone='Europe/London')
    >>> login_person(person)
    >>> person.setLocationVisibility(False)
    >>> dates = ['2005-10-17 09:00', '2005-11-17 19:05']
    >>> create_sprint_attendance_view(ubz, dates).initialize()

    >>> view = create_view(ubz, '+attendees-csv')
    >>> last_attendee = view.render().split('\n')[-2]
    >>> print last_attendee
    ubz-last-attendee,...
    >>> 'Europe' in last_attendee
    False
