= Editing PPA dependencies =

The PPA 'Edit dependency' view allows users to remove or add
dependencies to their PPAs via the web UI.

Only the owner of the PPA and Launchpad administrators may access this page.

Anonymous and unprivileged users cannot access Celso's PPA interface to
edit dependencies, even if they try the URL directly.

    >>> anon_browser.open('http://launchpad.dev/~cprov/+archive')
    >>> anon_browser.getLink('Edit dependencies').click()
    Traceback (most recent call last):
    ...
    LinkNotFoundError

    >>> anon_browser.open(
    ...     'http://launchpad.dev/~cprov/+archive/ppa/+edit-dependencies')
    Traceback (most recent call last):
    ...
    Unauthorized: ..., 'launchpad.Edit')

    >>> user_browser.open('http://launchpad.dev/~cprov/+archive/ppa')
    >>> user_browser.getLink('Edit dependencies').click()
    Traceback (most recent call last):
    ...
    LinkNotFoundError

    >>> user_browser.open(
    ...    'http://launchpad.dev/~cprov/+archive/ppa/+edit-dependencies')
    Traceback (most recent call last):
    ...
    Unauthorized: ..., 'launchpad.Edit')

Only Celso and an administrator can access the 'Edit dependencies'
page for Celso's PPA.

    >>> cprov_browser = setupBrowser(
    ...     auth="Basic celso.providelo@canonical.com:cprov")
    >>> cprov_browser.open('http://launchpad.dev/~cprov/+archive/ppa')
    >>> cprov_browser.getLink('Edit dependencies').click()
    >>> print cprov_browser.url
    http://launchpad.dev/~cprov/+archive/ppa/+edit-dependencies
    >>> cprov_browser.title
    'Edit dependencies for PPA for Celso Providelo'

    >>> admin_browser.open('http://launchpad.dev/~cprov/+archive/ppa')
    >>> admin_browser.getLink('Edit dependencies').click()
    >>> print admin_browser.url
    http://launchpad.dev/~cprov/+archive/ppa/+edit-dependencies
    >>> admin_browser.title
    'Edit dependencies for PPA for Celso Providelo'

Once accessed the page provides a way to remove recorded dependencies
via the POST form.

    >>> def print_ppa_dependencies(contents):
    ...     empty_dep = find_tag_by_id(contents, 'empty-dependencies')
    ...     if empty_dep is not None:
    ...         print extract_text(empty_dep)
    ...     dependencies = find_tags_by_class(contents, 'ppa-dependencies')
    ...     for dep in dependencies:
    ...         print extract_text(dep)

When the 'Edit dependencies' page is loaded it will list all dependencies.

    >>> print_ppa_dependencies(admin_browser.contents)
    No dependencies recorded for this PPA yet.


== Adding dependencies ==

As we can see Celso's PPA contains no dependencies, let's try
to add some.

The adding dependency input offers a interface to look for PPAs based
on the PPA fti and/or the PPA owner's fti via a IHugeVocabulary
popup. A valid term is the owner username.

An empty request doesn't change anything.

    >>> admin_browser.getControl("Add PPA dependency").value = ''
    >>> admin_browser.getControl("Save").click()

    >>> print_ppa_dependencies(admin_browser.contents)
    No dependencies recorded for this PPA yet.

An unknown term results in an error.

    >>> admin_browser.getControl("Add PPA dependency").value = 'whatever'
    >>> admin_browser.getControl("Save").click()
    >>> messages = get_feedback_messages(admin_browser.contents)
    >>> for msg in messages:
    ...     print msg
    There is 1 error.
    Invalid value

When a valid PPA is chosen the dependency is added, a notification
is rendered on top of the page and the list of dependencies available
for removal is updated.

    >>> admin_browser.getControl("Add PPA dependency").value = 'mark/ppa'
    >>> admin_browser.getControl("Save").click()
    >>> messages = get_feedback_messages(admin_browser.contents)
    >>> for msg in messages:
    ...     print msg
    Dependency added: PPA for Mark Shuttleworth

    >>> admin_browser.reload()
    >>> print_ppa_dependencies(admin_browser.contents)
    PPA for Mark Shuttleworth

Trying to add a dependency that is already recorded results in a error.

    >>> admin_browser.getControl("Add PPA dependency").value = 'mark/ppa'
    >>> admin_browser.getControl("Save").click()
    >>> messages = get_feedback_messages(admin_browser.contents)
    >>> for msg in messages:
    ...     print msg
    There is 1 error.
    This dependency is already registered.

Trying to add a dependency for the context PPA itself also results in
a error.

    >>> admin_browser.getControl("Add PPA dependency").value = 'cprov/ppa'
    >>> admin_browser.getControl("Save").click()
    >>> messages = get_feedback_messages(admin_browser.contents)
    >>> for msg in messages:
    ...     print msg
    There is 1 error.
    An archive should not depend on itself.

If it's a new dependency everything is fine.

    >>> admin_browser.getControl("Add PPA dependency").value = 'no-priv/ppa'
    >>> admin_browser.getControl("Save").click()
    >>> messages = get_feedback_messages(admin_browser.contents)
    >>> for msg in messages:
    ...     print msg
    Dependency added: PPA for No Privileges Person

Now Celso's PPA will list Mark's and No-Priv's PPA as its dependencies.

    >>> admin_browser.reload()
    >>> print_ppa_dependencies(admin_browser.contents)
    PPA for Mark Shuttleworth
    PPA for No Privileges Person

The dependencies are presented in a separated section (bellow the
sources.list widget).

    >>> user_browser.open('http://launchpad.dev/~cprov/+archive/ppa')
    >>> print_tag_with_id(user_browser.contents, 'archive-dependencies')
    Build dependencies:
    PPA for Mark Shuttleworth (included ... ago)
    PPA for No Privileges Person (included ... ago)


== Removing dependencies ==

One or more dependencies can be removed via this page, they are
presented as a vertical array of check-boxes labelled by dependency PPA
title.

If no dependency is selected and the configuration is save, no
dependencies get removed.

    >>> admin_browser.getControl("Save").click()
    >>> messages = get_feedback_messages(admin_browser.contents)

    >>> print_ppa_dependencies(admin_browser.contents)
    PPA for Mark Shuttleworth
    PPA for No Privileges Person

On successful removals, a notification is rendered and the list of
dependencies is refreshed.

    >>> admin_browser.getControl(
    ...     name="field.selected_dependencies").value = [
    ...     'mark/ppa', 'no-priv/ppa']
    >>> admin_browser.getControl("Save").click()
    >>> messages = get_feedback_messages(admin_browser.contents)
    >>> for msg in messages:
    ...     print msg
    Dependencies removed:
    PPA for Mark Shuttleworth
    PPA for No Privileges Person

    >>> print_ppa_dependencies(admin_browser.contents)
    No dependencies recorded for this PPA yet.

Once the dependencies are removed, the 'dependency-section' (including
the warning message) are omitted from the PPA overview page

    >>> user_browser.open('http://launchpad.dev/~cprov/+archive/ppa')
    >>> print_tag_with_id(user_browser.contents, 'archive-dependencies')
    Build dependencies:


== Primary dependencies ==

A user can modify how a PPA depends on its corresponding
primary archive.

A set of predefined options is presented as a radio button
selection.

When the page is loaded the selected option for 'Ubuntu dependencies'
field represents the current state of the PPA.

    >>> print_radio_button_field(
    ...     admin_browser.contents, 'primary_dependencies')
    ( ) Basic (only released packages).
    ( ) Security (basic dependencies and important security updates).
    (*) Default (security dependencies and recommended updates).
    ( ) Proposed (default dependencies and proposed updates).
    ( ) Backports (default dependencies and unsupported updates).

Same for the 'Ubuntu components' field:

    >>> print_radio_button_field(
    ...     admin_browser.contents, 'primary_components')
    (*) Use all Ubuntu components available.
    ( ) Use the same components used for each source in the Ubuntu
        primary archive.

The user can modify this aspect by selecting a different option and
clicking on 'Save'.

He will see a notification containing a summary of what was changed.

    >>> admin_browser.getControl(
    ...     "Proposed (default dependencies and proposed updates"
    ...     ).selected = True
    >>> admin_browser.getControl("Save").click()
    >>> messages = get_feedback_messages(admin_browser.contents)
    >>> for msg in messages:
    ...     print msg
    Primary dependency added: Primary Archive for Ubuntu Linux -
    PROPOSED (main, restricted, universe, multiverse)

The option submitted by the user is now selected when the page loads.

    >>> print_radio_button_field(
    ...     admin_browser.contents, 'primary_dependencies')
    ( ) Basic (only released packages).
    ( ) Security (basic dependencies and important security updates).
    ( ) Default (security dependencies and recommended updates).
    (*) Proposed (default dependencies and proposed updates).
    ( ) Backports (default dependencies and unsupported updates).

We will override the primary dependency configuration to only RELEASE
pocket.

    >>> admin_browser.getControl(
    ...     "Basic (only released packages).").selected = True
    >>> admin_browser.getControl("Save").click()
    >>> messages = get_feedback_messages(admin_browser.contents)
    >>> for msg in messages:
    ...     print msg
    Primary dependency added: Primary Archive for Ubuntu Linux -
    RELEASE (main, restricted, universe, multiverse)

Now we see a PPA configured to depend only on RELEASE pocket.

    >>> print_radio_button_field(
    ...     admin_browser.contents, 'primary_dependencies')
    (*) Basic (only released packages).
    ( ) Security (basic dependencies and important security updates).
    ( ) Default (security dependencies and recommended updates).
    ( ) Proposed (default dependencies and proposed updates).
    ( ) Backports (default dependencies and unsupported updates).

    >>> print_radio_button_field(
    ...     admin_browser.contents, 'primary_components')
    (*) Use all Ubuntu components available.
    ( ) Use the same components used for each source in the Ubuntu
        primary archive.

In order to make the PPA use the default dependencies again the user
can simply select this pre-defined option and the form will restore
the default dependencies for him.

    >>> admin_browser.getControl(
    ...     "Default (security dependencies and recommended updates"
    ...     ).selected = True
    >>> admin_browser.getControl("Save").click()
    >>> messages = get_feedback_messages(admin_browser.contents)
    >>> for msg in messages:
    ...     print msg
    Default primary dependencies restored.

The default option is now selected.

    >>> print_radio_button_field(
    ...     admin_browser.contents, 'primary_dependencies')
    ( ) Basic (only released packages).
    ( ) Security (basic dependencies and important security updates).
    (*) Default (security dependencies and recommended updates).
    ( ) Proposed (default dependencies and proposed updates).
    ( ) Backports (default dependencies and unsupported updates).

    >>> print_radio_button_field(
    ...     admin_browser.contents, 'primary_components')
    (*) Use all Ubuntu components available.
    ( ) Use the same components used for each source in the Ubuntu
        primary archive.

Now we can simply change the primary archive components field.

    >>> admin_browser.getControl(
    ...     "Use the same components used for each source in the Ubuntu "
    ...     "primary archive."
    ...     ).selected = True
    >>> admin_browser.getControl("Save").click()
    >>> messages = get_feedback_messages(admin_browser.contents)
    >>> for msg in messages:
    ...     print msg
    Primary dependency added: Primary Archive for Ubuntu Linux - UPDATES

    >>> print_radio_button_field(
    ...     admin_browser.contents, 'primary_dependencies')
    ( ) Basic (only released packages).
    ( ) Security (basic dependencies and important security updates).
    (*) Default (security dependencies and recommended updates).
    ( ) Proposed (default dependencies and proposed updates).
    ( ) Backports (default dependencies and unsupported updates).

    >>> print_radio_button_field(
    ...     admin_browser.contents, 'primary_components')
    ( ) Use all Ubuntu components available.
    (*) Use the same components used for each source in the Ubuntu
        primary archive.


== Everything in one click ==

The form can perform multiple actions in a single submit.

First we will create a PPA dependency for No privileged' PPA.

    >>> admin_browser.getControl("Add PPA dependency").value = 'no-priv/ppa'
    >>> admin_browser.getControl("Save").click()
    >>> messages = get_feedback_messages(admin_browser.contents)
    >>> for msg in messages:
    ...     print msg
    Dependency added: PPA for No Privileges Person

Now the PPA uses the default primary dependency configuration and
contains a extra dependency.

    >>> print_radio_button_field(
    ...     admin_browser.contents, 'primary_dependencies')
    ( ) Basic (only released packages).
    ( ) Security (basic dependencies and important security updates).
    (*) Default (security dependencies and recommended updates).
    ( ) Proposed (default dependencies and proposed updates).
    ( ) Backports (default dependencies and unsupported updates).

    >>> print_radio_button_field(
    ...     admin_browser.contents, 'primary_components')
    ( ) Use all Ubuntu components available.
    (*) Use the same components used for each source in the Ubuntu
        primary archive.

    >>> print_ppa_dependencies(admin_browser.contents)
    PPA for No Privileges Person

In a single submit we will remove the PPA dependency, add another one
from 'Mark Shuttleworth' PPA and modify the primary dependency to
RELEASE.

    >>> admin_browser.getControl(
    ...     name="field.selected_dependencies").value = ['no-priv/ppa']

    >>> admin_browser.getControl(
    ...     "Use all Ubuntu components available.").selected = True

    >>> admin_browser.getControl("Add PPA dependency").value = 'mark/ppa'

    >>> admin_browser.getControl(
    ...     "Basic (only released packages).").selected = True

    >>> admin_browser.getControl("Save").click()
    >>> messages = get_feedback_messages(admin_browser.contents)
    >>> for msg in messages:
    ...     print msg
    Primary dependency added:
       Primary Archive for Ubuntu Linux - RELEASE
       (main, restricted, universe, multiverse)
    Dependency added:
       PPA for Mark Shuttleworth
    Dependencies removed:
       PPA for No Privileges Person

All the modifications are immediately visible once the form is
processed.

    >>> print_radio_button_field(
    ...     admin_browser.contents, 'primary_dependencies')
    (*) Basic (only released packages).
    ( ) Security (basic dependencies and important security updates).
    ( ) Default (security dependencies and recommended updates).
    ( ) Proposed (default dependencies and proposed updates).
    ( ) Backports (default dependencies and unsupported updates).

    >>> print_radio_button_field(
    ...     admin_browser.contents, 'primary_components')
    (*) Use all Ubuntu components available.
    ( ) Use the same components used for each source in the Ubuntu
        primary archive.

    >>> print_ppa_dependencies(admin_browser.contents)
    PPA for Mark Shuttleworth


== Primary dependencies in the PPA index page ==

Primary dependencies are presented with pocket information in the PPA
index page (see `IArchivedependency.title`).

    >>> admin_browser.open('http://launchpad.dev/~cprov/+archive')
    >>> print admin_browser.title
    PPA for Celso Providelo

    >>> print_tag_with_id(admin_browser.contents, 'archive-dependencies')
    Build dependencies:
    PPA for Mark Shuttleworth (included ... ago)
    Primary Archive for Ubuntu Linux - RELEASE
    (main, restricted, universe, multiverse) (included ... ago)
    Edit dependencies

== Cancelling a form request ==

At anytime the form can be cancelled and the user will be taken to the
PPA context page and the action won't be executed.

    >>> admin_browser.getLink('Edit dependencies').click()

    >>> admin_browser.getControl("Add PPA dependency").value = 'no-priv/ppa'
    >>> admin_browser.getControl(
    ...     name="field.selected_dependencies").value = ['mark/ppa']
    >>> admin_browser.getControl(
    ...     "Default (security dependencies and recommended updates)."
    ...     ).selected = True

    >>> admin_browser.getLink("Cancel").click()
    >>> print admin_browser.title
    PPA for Celso Providelo

The dependencies were not modified.

    >>> print_tag_with_id(admin_browser.contents, 'archive-dependencies')
    Build dependencies:
    PPA for Mark Shuttleworth (included ... ago)
    Primary Archive for Ubuntu Linux - RELEASE
    (main, restricted, universe, multiverse) (included ... ago)
    Edit dependencies
