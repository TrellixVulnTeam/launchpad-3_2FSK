= Updating selected bug trackers =

The BugWatchUpdater class can be instructed to update only a subset of
bugtrackers. This is acheived by passing a list of bug tracker names to
the updateBugTrackers() method.

We'll update all bugtrackers so that the test doesn't try to make any
external connections.

    >>> from canonical.database.sqlbase import cursor, sqlvalues
    >>> from canonical.database.constants import UTC_NOW
    >>> cur = cursor()
    >>> cur.execute("UPDATE BugWatch SET lastchecked=%s" %
    ...     sqlvalues(UTC_NOW))
    >>> import transaction
    >>> transaction.commit()

    >>> from canonical.database.sqlbase import (
    ...     ZopelessTransactionManager)
    >>> from canonical.launchpad.scripts import FakeLogger
    >>> from canonical.launchpad.scripts.checkwatches import (
    ...     BugWatchUpdater)
    >>> transactionmgr = ZopelessTransactionManager._installed
    >>> updater = BugWatchUpdater(transactionmgr, log=FakeLogger())
    >>> updater._login()
    >>> updater.updateBugTrackers(['debbugs', 'gnome-bugzilla'])
    DEBUG...No watches to update on http://bugs.debian.org
    DEBUG...No watches to update on http://bugzilla.gnome.org/bugs

This functionality can also be used with the checkwatches cronscript,
allowing a user to pass a list of bugtrackers to check at the command
line.

    >>> import subprocess
    >>> process = subprocess.Popen(
    ...     ['cronscripts/checkwatches.py', '--bug-tracker=mozilla.org',
    ...      '--bug-tracker=debbugs', '-v', '--batch-size=10'],
    ...     stdin=subprocess.PIPE, stdout=subprocess.PIPE,
    ...     stderr=subprocess.PIPE)
    >>> (out, err) = process.communicate()
    >>> out
    ''
    >>> process.returncode
    0

    >>> print err
    INFO    creating lockfile
    DEBUG   Using a global batch size of 10
    DEBUG   No watches to update on https://bugzilla.mozilla.org/
    DEBUG   No watches to update on http://bugs.debian.org
    INFO    Time for this run: ... seconds.
    DEBUG   Removing lock file:...
    <BLANKLINE>

The help for the checkwatches cronscript explains the usage of the bug
tracker option fully.

    >>> process = subprocess.Popen(
    ...     ['cronscripts/checkwatches.py', '-h'],
    ...     stdin=subprocess.PIPE, stdout=subprocess.PIPE,
    ...     stderr=subprocess.PIPE)
    >>> (out, err) = process.communicate()
    >>> print out
    usage: checkwatches.py [options]
    <BLANKLINE>
    options:
      ...
      -t BUG_TRACKER, --bug-tracker=BUG_TRACKER
                            Only check a given bug tracker. Specifying
                            more than one bugtracker using this option
                            will check all the bugtrackers specified...
      -b BATCH_SIZE, --batch-size=BATCH_SIZE
                            Set the number of watches to be checked per
                            bug tracker in this run. If BATCH_SIZE is 0,
                            all watches on the bug tracker that are
                            eligible for checking will be checked.
