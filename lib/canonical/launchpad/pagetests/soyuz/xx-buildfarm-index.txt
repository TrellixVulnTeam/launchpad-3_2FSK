= BuildFarm page =

The BuildFarm page is accessible from the root page, although we don't
link to it yet because we are not yet sure of the benefits of doing
this, since the audience of this page is still restricted.

    >>> anon_browser.open('http://launchpad.dev/+builds')

The BuildFarm contains a list of all builders registered in Launchpad
ordered by architecture and a short summary about what they are
processing.

    >>> print extract_text(find_main_content(anon_browser.contents))
    Build machines for Launchpad
    Builder        Architecture Owner                   Status
    bob Automatic  386          Launchpad Buildd Admins Not available
    frog Automatic 386 Virtual  Launchpad Buildd Admins Not available
    Generated at ...

This page also presents 2 portlets, exposing the number of builds waiting
in queue for each supported architecture on each separated build-farm
we have, 'virtualised' (PPA) and 'non-virtualised' (PRIMARY and PARTNER).

    >>> def print_depth(contents, queue_name):
    ...     portlet = find_portlet(contents, queue_name)
    ...     if portlet is None:
    ...         print 'Not presented'
    ...         return
    ...     for td in portlet.fetch('td'):
    ...         print extract_text(td)

The portlet simply lists the the architectures and their pending
builds counter as:

  <ARCH 1>   <# of pending Builds>
  <ARCH 1>   <# of pending Builds>
  ...

Architectures with no pending builds are omitted.

    >>> print_depth(anon_browser.contents, 'Non-virtual build queue depth')
    i386     1

The portlet for the virtual build-farm is omitted, since the relevant
build queue is empty.

    >>> print_depth(anon_browser.contents, 'Virtual build queue depth')
    Not presented

In order to test the 'virtual' build queue depth portlet we will retry
a failed build in Celso's PPA.

    >>> from zope.component import getUtility
    >>> from canonical.database.sqlbase import flush_database_updates
    >>> from canonical.launchpad.interfaces import (
    ...     BuildStatus, IPersonSet)
    >>> from canonical.launchpad.ftests import login, logout

    >>> login('foo.bar@canonical.com')

    >>> cprov = getUtility(IPersonSet).getByName('cprov')
    >>> failed_build = cprov.archive.getBuildRecords(
    ...     build_state=BuildStatus.FAILEDTOBUILD)[0]
    >>> unused = failed_build.retry()

    >>> flush_database_updates()
    >>> logout()

Now we can see the populated portlet for the virtual build-farm,
exposing one pending build record.

    >>> anon_browser.reload()
    >>> print_depth(anon_browser.contents, 'Virtual build queue depth')
    i386     1

The non-virtual portlet is still present.

    >>> print_depth(anon_browser.contents, 'Non-virtual build queue depth')
    i386     1

From this page, users with the appropriate permission can register new
builders.

    >>> admin_browser.open("http://launchpad.dev/+builds/+index")
    >>> admin_browser.getLink("Add builder").click()
    >>> print admin_browser.title
    Register a new build machine

While anonymous users are not given the option to register a new build
and are not permitted if they go directly to the URL.

    >>> anon_browser.open("http://launchpad.dev/+builds/+index")
    >>> anon_browser.getLink("Add builder")
    Traceback (most recent call last):
    ...
    LinkNotFoundError

    >>> anon_browser.open("http://launchpad.dev/+builds/+new")
    Traceback (most recent call last):
    ...
    Unauthorized: ..., 'launchpad.Admin')
