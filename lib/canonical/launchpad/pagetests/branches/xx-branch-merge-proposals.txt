= Branch Merge Proposals =

Branch merge proposals are where you show the intent of merging
the code from one branch into another.

Any logged in user can register a merge proposal.  Registering
a merge proposal is done from the source branch, and the link
is `Propose for merging`.


== Registering a merge proposal ==

Users who are not logged on do not see the link to register.

    >>> anon_browser.open(
    ...     'http://code.launchpad.dev/~name12/gnome-terminal/klingon')
    >>> anon_browser.getLink('Propose for merging')
    Traceback (most recent call last):
    ...
    LinkNotFoundError

Logged in users can.

    >>> nopriv_browser = setupBrowser(auth="Basic no-priv@canonical.com:test")
    >>> nopriv_browser.open(
    ...     'http://code.launchpad.dev/~name12/gnome-terminal/klingon')
    >>> nopriv_browser.getLink('Propose for merging').click()
    >>> nopriv_browser.getControl(
    ...     name='field.target_branch.target_branch').value = (
    ...         '~name12/gnome-terminal/main')
    >>> nopriv_browser.getControl('Whiteboard').value = (
    ...     'This is the whiteboard')
    >>> nopriv_browser.getControl('Register').click()

Registering the merge proposal takes the user back to the
main page for the source branch.

    >>> print nopriv_browser.url
    http://code.launchpad.dev/~name12/gnome-terminal/klingon

Most of the time the merge proposal is looked at from the point
of view of either the source branch or the target branch.


== Landing Targets ==

When looked at from the point of view of the source branch, the
merge proposal is considered a "landing target" with an optional
"dependent branch".

    >>> def printMergeProposals(browser, id):
    ...     tag = find_tag_by_id(browser.contents, id)
    ...     if tag is None:
    ...         print tag
    ...     else:
    ...         for mp in tag.findAll(attrs={'class': 'mergeproposal'}):
    ...             print extract_text(mp)

    >>> printMergeProposals(nopriv_browser, 'landing-targets')
    ~name12/gnome-terminal/main - view proposal details
    This is the whiteboard
    Merge proposed by No Privileges Person
    Work in progress

Since the user who registered the merge proposal is different
to the owner of the source branch, they are shown explicitly.
If the branch owner registers the merge proposal, they are not
shown.

    >>> sample_browser = setupBrowser(auth="Basic test@canonical.com:test")
    >>> sample_browser.open(
    ...     'http://code.launchpad.dev/~name12/gnome-terminal/scanned')
    >>> sample_browser.getLink('Propose for merging').click()
    >>> sample_browser.getControl(
    ...     name='field.target_branch.target_branch').value = (
    ...         '~name12/gnome-terminal/main')
    >>> sample_browser.getControl('Whiteboard').value = (
    ...     'This is the whiteboard')
    >>> sample_browser.getControl('Register').click()

    >>> printMergeProposals(sample_browser, 'landing-targets')
    ~name12/gnome-terminal/main - view proposal details
    This is the whiteboard
    Work in progress


== Landing Candidates ==

From the point of view of the target branch, the proposals are
"landing candidates".  The most recently created merge proposals are
shown first.

    >>> browser.open(
    ...     'http://code.launchpad.dev/~name12/gnome-terminal/main')
    >>> printMergeProposals(browser, 'landing-candidates')
    ~name12/gnome-terminal/scanned (New) - view proposal details
      This is the whiteboard
      Work in progress
    ~name12/gnome-terminal/klingon (Experimental) - view proposal details
      This is the whiteboard
      Merge proposed by No Privileges Person
      Work in progress


== Viewing a proposal for merging ==

When looking at the details for a proposal to merge, three main things
are shown:
  * The proposal whiteboard
  * The revisions in the source branch that are not in the target branch
  * A details pagelet for the proposal.

Unfortunately it isn't easy creating branches on the fly and branching
and merging, so we have to settle for the sample data.

    >>> sample_browser.open(
    ...     'http://code.launchpad.dev/~sabdfl/firefox/release-0.9')
    >>> sample_browser.getLink('Propose for merging').click()
    >>> sample_browser.getControl(
    ...     name='field.target_branch.target_branch').value = (
    ...         '~name12/firefox/main')
    >>> sample_browser.getControl('Whiteboard').value = (
    ...     'This is the whiteboard')
    >>> sample_browser.getControl('Register').click()
    >>> printMergeProposals(sample_browser, 'landing-targets')
    ~name12/firefox/main - view proposal details
      This is the whiteboard
      Merge proposed by Sample Person
      Work in progress

    >>> sample_browser.getLink('view proposal details').click()
    >>> print sample_browser.title
    Proposal to merge branch

The whiteboard is shown:

    >>> print extract_text(find_tag_by_id(
    ...      sample_browser.contents, 'branch-whiteboard-value'))
    This is the whiteboard

The details of the proposal shows initially the source and target
branches, and the current status.

    >>> def print_summary(browser):
    ...     print extract_text(find_tag_by_id(
    ...         browser.contents, 'proposal-summary'))
    >>> print_summary(sample_browser)
    Source branch: ~sabdfl/firefox/release-0.9
    Target branch: ~name12/firefox/main
           Status: Work in progress

The summary of the revisions that are in the source branch but not
yet in the target branch are also shown.

    >>> print extract_text(find_tag_by_id(
    ...     sample_browser.contents, 'source-revisions'))
    Unmerged revisions
    1. By mark.shuttleworth on 2005-03-09
      Import of Mozilla Firefox 0.9
    >>> firefox_merge_url = sample_browser.url


== Editing a merge proposal ==

The branch merge poposal can be edited by the owner of the source or
target branches or the registrant of the merge proposal.

    >>> print_action_links(sample_browser.contents)
    Edit details: .../+merge/.../+edit
    Delete proposal to merge: .../+merge/.../+delete
    Work in progress (disabled)
    Request review: .../+merge/.../+request-review
    Review proposal: .../+merge/.../+review
    Mark as merged: .../+merge/.../+merged
    Resubmit proposal: .../+merge/.../+resubmit

Someone who is not logged in, or not the one of those that can alter the
proposal to merge get no actions.

    >>> browser.open(firefox_merge_url)
    >>> print_action_links(browser.contents)
    Edit details (disabled)
    Delete proposal to merge (disabled)
    Work in progress (disabled)
    Request review (disabled)
    Review proposal (disabled)
    Mark as merged (disabled)
    Resubmit proposal (disabled)

    >>> anon_browser.open(firefox_merge_url)
    >>> print_action_links(anon_browser.contents)
    Edit details (disabled)
    Delete proposal to merge (disabled)
    Work in progress (disabled)
    Request review (disabled)
    Review proposal (disabled)
    Mark as merged (disabled)
    Resubmit proposal (disabled)

When editing the proposal, the whiteboard can be altered, and the
button options are:

    >>> sample_browser.getLink('Edit details').click()
    >>> print_submit_buttons(sample_browser.contents)
    Update
    Cancel

    >>> print sample_browser.title
    Edit proposal to merge branch
    >>> sample_browser.getControl('Whiteboard').value = (
    ...     "This is the updated whiteboard.\n"
    ...     "Demo url: http://launchpad.dev/+foo")
    >>> sample_browser.getControl('Update').click()

On update, the user is taken back to the proposal details page.

    >>> print sample_browser.title
    Proposal to merge branch
    >>> print extract_text(find_tag_by_id(
    ...      sample_browser.contents, 'branch-whiteboard-value'))
    This is the updated whiteboard.
    Demo url: http://launchpad.dev/+foo


== Deleting merge proposals ==

Merge proposals can be deleted, when either abandoned or created in error.
When a merge proposal is deleted, the user is taken back to the main page
for the source_branch.

    >>> sample_browser.getLink('Delete proposal to merge').click()
    >>> sample_browser.getControl('Delete proposal').click()
    >>> print sample_browser.url
    http://code.launchpad.dev/~sabdfl/firefox/release-0.9

    >>> printMergeProposals(sample_browser, 'landing-targets')
    None


== Dependent Branches ==

When registering merge proposals, there is an optional dependent branch.
This is used when the source branch has branched of a branch other than
the target branch.

    >>> sample_browser.getLink('Propose for merging').click()
    >>> sample_browser.getControl(
    ...     name='field.target_branch.target_branch').value = (
    ...         '~name12/firefox/main')
    >>> sample_browser.getControl('Dependent Branch').value = (
    ...     '~sabdfl/firefox/release-0.8')
    >>> sample_browser.getControl('Whiteboard').value = (
    ...     'This is the whiteboard')
    >>> sample_browser.getControl('Register').click()
    >>> printMergeProposals(sample_browser, 'landing-targets')
    ~name12/firefox/main - view proposal details
    This is the whiteboard
    Merge proposed by Sample Person
    Dependent on ~sabdfl/firefox/release-0.8
    Work in progress

This association is also shown on the branch that is depended upon.

    >>> sample_browser.getLink('~sabdfl/firefox/release-0.8').click()
    >>> printMergeProposals(sample_browser, 'dependent-branches')
    ~sabdfl/firefox/release-0.9 - view proposal details
    This is the whiteboard
    Work in progress


== Marking as merged ==

When a branch has been merged into the target branch, the proposal should
be marked as merged.

Merged proposals are still listed on the source branch, but no longer shown
on the target branch.

    >>> nopriv_browser.open(
    ...     'http://code.launchpad.dev/~name12/gnome-terminal/klingon')
    >>> landing_targets = find_tag_by_id(
    ...     nopriv_browser.contents, 'landing-targets')

The edit link is shown after the branch link.

    >>> edit_link = landing_targets.fetch('a')[1]['href']
    >>> nopriv_browser.getLink(url=edit_link).click()

There is an action link here to mark as merged.

    >>> nopriv_browser.getLink('Mark as merged').click()

When marking a proposal as merged there is an optional revision number.
If this is set then the when setting the merge proposal as merged the
system looks for the revision in the history of the target branch,
and if found uses the revision date as the merged date.  If it cannot
find one, then the current time is used as the date merged.

    >>> nopriv_browser.getControl('Merged Revision Number').value = '42'
    >>> nopriv_browser.getControl('Mark as Merged').click()

The user is then taken to the proposal details page.  The source branch
is shown as a link.

    >>> nopriv_browser.getLink('~name12/gnome-terminal/klingon').click()
    >>> printMergeProposals(nopriv_browser, 'landing-targets')
    ~name12/gnome-terminal/main - view proposal details
      This is the whiteboard
      Merge proposed by No Privileges Person
      Merged ... ago at revision 42

Gone from the target branch.

    >>> nopriv_browser.getLink('~name12/gnome-terminal/main').click()
    >>> printMergeProposals(nopriv_browser, 'landing-candidates')
    ~name12/gnome-terminal/scanned (New) - view proposal details
      This is the whiteboard
      Work in progress


== Resubmitting proposals ==

If a proposal ends up getting rejected, the proposal can be resubmitted.
Actually you can resubmit a proposal that hasn't been superceded or merged
already, but mostly you resubmit rejected proposals.  When a proposal is
resubmitted, a new proposal is registered with the same source and target
branches but with the state set to work-in-progress.

    >>> sample_browser.open(
    ...     'http://code.launchpad.dev/~name12/gnome-terminal/scanned')
    >>> sample_browser.getLink('view proposal details').click()
    >>> sample_browser.getLink('Resubmit proposal').click()
    >>> print sample_browser.title
    Resubmit proposal to merge

    >>> sample_browser.getControl('Whiteboard').value = (
    ...     'Resubmitting due to extensive changes.')
    >>> sample_browser.getControl('Resubmit').click()

    >>> for message in get_feedback_messages(sample_browser.contents):
    ...     print extract_text(message)
    Please update the whiteboard for the new proposal.

    >>> sample_browser.getControl('Whiteboard').value = (
    ...     'Updated work')
    >>> sample_browser.getControl('Update').click()

The new merge proposal is created as work in progress, and there is
a link back to the superceded proposal.

    >>> print_summary(sample_browser)
    Source branch: ~name12/gnome-terminal/scanned
    Target branch: ~name12/gnome-terminal/main
           Status: Work in progress

    >>> print extract_text(find_tag_by_id(
    ...     sample_browser.contents, 'superceded-proposal'))
    This proposal supercedes an earlier proposal.

    >>> sample_browser.getLink('earlier proposal').click()
    >>> print_summary(sample_browser)
    Source branch: ~name12/gnome-terminal/scanned
    Target branch: ~name12/gnome-terminal/main
           Status: Superceded

    >>> print extract_text(find_tag_by_id(
    ...      sample_browser.contents, 'branch-whiteboard-value'))
    Resubmitting due to extensive changes.

The earlier superceded proposal also has a link back to the
new proposal that supercedes it.

    >>> print extract_text(find_tag_by_id(
    ...     sample_browser.contents, 'superceded-by'))
    This proposal has been superceded by a later proposal.
    >>> sample_browser.getLink('later proposal').click()

    >>> print extract_text(find_tag_by_id(
    ...      sample_browser.contents, 'branch-whiteboard-value'))
    Updated work


== Default target branches ==

Almost all of the proposals to merge branches will be created
on feature branches where the target branch is the development
focus branch.  With that in mind, we want the default option
(when proposing a new branch to land) to target the development
focus branch.

If there is no development focus branch, then just the normal
branch widget is shown.

    # A helpful function to determine target branch widgets.
    >>> import re
    >>> def get_target_branch_widgets(browser):
    ...     main = find_main_content(browser.contents)
    ...     return main.findAll(
    ...         'input', attrs={'name': re.compile('target_branch')})

    >>> nopriv_browser.open(
    ...     'http://code.launchpad.dev/~sabdfl/firefox/release-0.8')
    >>> nopriv_browser.getLink('Propose for merging').click()
    >>> for widget in get_target_branch_widgets(nopriv_browser):
    ...     print widget
    <input type="text" ...

Test validation of errors...

The target branch is a required field, so attempting to register without
setting it gives an appropriate error.

    >>> nopriv_browser.getControl('Register').click()
    >>> for message in get_feedback_messages(nopriv_browser.contents):
    ...     print extract_text(message)
    There is 1 error.
    Required input is missing.

Invalid errors are also shown.

    >>> nopriv_browser.getControl(
    ...     name='field.target_branch.target_branch').value = (
    ...         'fooix')
    >>> nopriv_browser.getControl('Register').click()
    >>> for message in get_feedback_messages(nopriv_browser.contents):
    ...     print extract_text(message)
    There is 1 error.
    Invalid value


When a branch is set as the development focus, then a radio button
is shown.

    >>> admin_browser.open('http://launchpad.dev/firefox/trunk')
    >>> admin_browser.getLink('Edit source').click()
    >>> admin_browser.getControl('Bazaar').click()
    >>> admin_browser.getControl(name='field.user_branch').value = (
    ...     '~name12/firefox/main')
    >>> admin_browser.getControl('Update Details').click()

    # Just show the radio buttons for the branch widgets.
    >>> def print_radio_options(browser):
    ...     widgets = get_target_branch_widgets(browser)
    ...     for widget in widgets:
    ...         if widget['type'] == 'radio':
    ...             try:
    ...                 checked = widget['checked']
    ...             except KeyError:
    ...                 checked = ''
    ...             print widget['value'], checked

Also the main development focus is selected.

    >>> nopriv_browser.open(
    ...     'http://code.launchpad.dev/~sabdfl/firefox/release-0.8')
    >>> nopriv_browser.getLink('Propose for merging').click()
    >>> print_radio_options(nopriv_browser)
    ~name12/firefox/main checked
    other

If the user has also targetted a branch other than the development
focus before, then that is also shown as a radio option.

    >>> nopriv_browser.getControl('Other').click()
    >>> nopriv_browser.getControl(
    ...     name='field.target_branch.target_branch').value = (
    ...         '~sabdfl/firefox/release-0.9')
    >>> nopriv_browser.getControl('Register').click()

    >>> nopriv_browser.open(
    ...     'http://code.launchpad.dev/~sabdfl/firefox/release-0.9.2')
    >>> nopriv_browser.getLink('Propose for merging').click()
    >>> print_radio_options(nopriv_browser)
    ~name12/firefox/main checked
    ~sabdfl/firefox/release-0.9
    other


== Registering a merge, and junk branches ==

Junk branches cannot be proposed for merging.  The action option is not
shown for junk branches.

    >>> nopriv_browser.open(
    ...     'http://code.launchpad.dev/~sabdfl/+junk/testdoc')
    >>> nopriv_browser.getLink('Propose for merging').click()
    Traceback (most recent call last):
    ...
    LinkNotFoundError

Even if the user hand crafts the URL to look like a proposal to merge,
they'll get a 404.

    >>> nopriv_browser.open(
    ...     'http://code.launchpad.dev/~sabdfl/+junk/testdoc/+register-merge')
    Traceback (most recent call last):
    ...
    NotFound: ...
