= Email notifications =

Notifications about changes to a mailing list's status are sent out
via email.

    >>> import email
    >>> from canonical.launchpad.mail import stub

    >>> from canonical.launchpad.tests.mail_helpers import pop_notifications

    >>> def print_distinct_messages_and_recipients(include_reply_to=False):
    ...     """Pop all messages from stub.test_emails and print them with
    ...      their recipients.
    ...
    ...     Since the same message may be sent more than once (for different
    ...     recipients), we print each distinct message only once and group
    ...     all recipients of that message together.
    ...     """
    ...     for message in pop_notifications():
    ...         body = message.get_payload()
    ...         # Strip the first line as it's different for each recipient.
    ...         body = body[body.find('\n')+1:]
    ...         print 'From:', message['From']
    ...         print 'To:', message['To']
    ...         if include_reply_to:
    ...             print 'Reply-To:', message['Reply-To']
    ...         print 'Subject:', message['Subject']
    ...         print body
    ...         print "-"*40


When a new email list becomes active, an email notification is sent to
all active team members.

    >>> from canonical.launchpad.ftests.mailinglists_helper import (
    ...		new_team, new_person, new_list_for_team)

    >>> team_one = new_team('team-one', with_list=False)
    >>> anne = new_person('Anne')

    # login() as an admin so that we can call IPerson.join() on any
    # person/team we want.
    >>> login('foo.bar@canonical.com')
    >>> anne.join(team_one)
    >>> # Clear out the team-membership status emails.
    >>> pop_notifications()
    [...]

    # This will take our team through the entire list creation
    # process, generating notification emails along the way.
    >>> list_one = new_list_for_team(team_one)
    >>> list_one.status.name
    'ACTIVE'

    >>> transaction.commit()	# Commit the emails.
    >>> len(stub.test_emails)
    2
    >>> print_distinct_messages_and_recipients(include_reply_to=True)
    From: Team One <noreply@launchpad.net>
    To: anne.person@example.com
    Reply-To: Team One <noreply@launchpad.net>
    Subject: New Mailing List for Team One
    <BLANKLINE>
    Team One has a new team mailing list.
    <BLANKLINE>
    If you would like to subscribe to the list, please use the link below
    to update your Mailing List Subscription preferences.
    <BLANKLINE>
      To subscribe:
    <BLANKLINE>
          http://launchpad.dev/~anne/+editemails
    <BLANKLINE>
    Regards,
    The Launchpad team
    ----------------------------------------
    From: Team One <noreply@launchpad.net>
    To: no-priv@canonical.com
    Reply-To: Team One <noreply@launchpad.net>
    Subject: New Mailing List for Team One
    <BLANKLINE>
    Team One has a new team mailing list.
    <BLANKLINE>
    If you would like to subscribe to the list, please use the link below
    to update your Mailing List Subscription preferences.
    <BLANKLINE>
      To subscribe:
    <BLANKLINE>
          http://launchpad.dev/~no-priv/+editemails
    <BLANKLINE>
    Regards,
    The Launchpad team
    ----------------------------------------


That notification is also sent to the individual members of all
sub-teams.  If a sub-team has a primary contact email address, that
address will be ignored, and the message will be sent to the
individual team members.

    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> salgado = getUtility(IPersonSet).getByName('salgado')

    >>> super_team = new_team('super-team', with_list=False)
    >>> sub_team = new_team('sub-team', with_list=False)
    >>> super_team.addMember(sub_team, salgado, force_team_add=True)
    >>> anne.join(super_team)
    >>> lars = new_person('Lars')
    >>> lars.join(sub_team)

    # Cris should receive a single email, even though she is a member
    # of both teams.
    >>> cris = new_person('Cris')
    >>> cris.join(super_team)
    >>> cris.join(sub_team)
    >>> # Clear out the team-membership status emails.
    >>> pop_notifications()
    [...]

    # Make sure the sub-team has a preferred email, so we can show
    # that it is being bypassed.
    >>> from canonical.launchpad.interfaces import IEmailAddressSet
    >>> emailset = getUtility(IEmailAddressSet)
    >>> email = emailset.new('foo@baz.com', sub_team)
    >>> sub_team.setContactAddress(email)
    >>> sub_team.preferredemail.email
    u'foo@baz.com'

    # This will take our team through the entire list creation
    # process, generating notification emails along the way.
    >>> super_list = new_list_for_team(super_team)
    >>> super_list.status.name
    'ACTIVE'

    >>> transaction.commit()	# Commit the emails.
    >>> len(stub.test_emails)
    4
    >>> print_distinct_messages_and_recipients(include_reply_to=True)
    From: Super Team <noreply@launchpad.net>
    To: anne.person@example.com
    Reply-To: Super Team <noreply@launchpad.net>
    Subject: New Mailing List for Super Team
    <BLANKLINE>
    Super Team has a new team mailing list.
    <BLANKLINE>
    If you would like to subscribe to the list, please use the link below
    to update your Mailing List Subscription preferences.
    <BLANKLINE>
      To subscribe:
    <BLANKLINE>
          http://launchpad.dev/~anne/+editemails
    <BLANKLINE>
    Regards,
    The Launchpad team
    ----------------------------------------
    From: Super Team <noreply@launchpad.net>
    To: cris.person@example.com
    Reply-To: Super Team <noreply@launchpad.net>
    Subject: New Mailing List for Super Team
    <BLANKLINE>
    Super Team has a new team mailing list.
    <BLANKLINE>
    If you would like to subscribe to the list, please use the link below
    to update your Mailing List Subscription preferences.
    <BLANKLINE>
      To subscribe:
    <BLANKLINE>
          http://launchpad.dev/~cris/+editemails
    <BLANKLINE>
    Regards,
    The Launchpad team
    ----------------------------------------
    From: Super Team <noreply@launchpad.net>
    To: lars.person@example.com
    Reply-To: Super Team <noreply@launchpad.net>
    Subject: New Mailing List for Super Team
    <BLANKLINE>
    Super Team has a new team mailing list.
    <BLANKLINE>
    If you would like to subscribe to the list, please use the link below
    to update your Mailing List Subscription preferences.
    <BLANKLINE>
      To subscribe:
    <BLANKLINE>
          http://launchpad.dev/~lars/+editemails
    <BLANKLINE>
    Regards,
    The Launchpad team
    ----------------------------------------
    From: Super Team <noreply@launchpad.net>
    To: no-priv@canonical.com
    Reply-To: Super Team <noreply@launchpad.net>
    Subject: New Mailing List for Super Team
    <BLANKLINE>
    Super Team has a new team mailing list.
    <BLANKLINE>
    If you would like to subscribe to the list, please use the link below
    to update your Mailing List Subscription preferences.
    <BLANKLINE>
      To subscribe:
    <BLANKLINE>
          http://launchpad.dev/~no-priv/+editemails
    <BLANKLINE>
    Regards,
    The Launchpad team
    ----------------------------------------


== Reactivated lists ==

Notification messages are not sent out when a list is reactivated.

    >>> renewed_team, renewed_list = new_team('renewed-team', with_list=True)
    >>> anne.join(renewed_team)
    >>> # Clear out the team-membership status emails, and the new
    >>> # list invitation emails.
    >>> pop_notifications()
    [...]

    # Fully rebuild our list from the ground up.
    >>> renewed_list.deactivate()
    >>> from canonical.launchpad.interfaces import MailingListStatus
    >>> renewed_list.transitionToStatus(MailingListStatus.INACTIVE)
    >>> renewed_list.reactivate()
    >>> renewed_list.startConstructing()
    >>> renewed_list.transitionToStatus(MailingListStatus.ACTIVE)
    >>> renewed_list.status.name
    'ACTIVE'

    >>> transaction.commit()	# Commit any outstanding emails.
    >>> len(stub.test_emails)
    0
