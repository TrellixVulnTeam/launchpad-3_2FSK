= Ubuntu PPAs =

The Ubuntu Linux page contains a link to get to the Personal Package Archives.

    >>> browser.open("http://launchpad.dev/ubuntu")
    >>> browser.getLink("Personal Package Archives").click()
    >>> browser.title
    'Ubuntu Linux Personal Package Archives'


== PPA main page ==

The PPA page contains a search box and a table of known PPAs with columns
Owner, Description, Sources and Binaries, the latter two being a count.

Along with the search form this page also presents a list of ubuntu
series and corresponding architectures supported for PPA.

    >>> print extract_text(
    ...    find_portlet(browser.contents, 'PPA supported series'))
    PPA supported series
    5.04
    "Hoary"
    - development
    i386
    (official)
    4.10
    "Warty"
    - current
    i386
    (official)


The sample data contains three PPAs.  Only Celso has any packages, with two
sources and one binary.

== Searching PPAs ==

By default only active (those with, at least one, PENDING or PUBLISHED
source record) PPAs are presented.

    >>> for ppa_row in find_tags_by_class(browser.contents, 'ppa_batch_row'):
    ...    print extract_text(ppa_row)
    Celso Providelo
    packages to help my friends.
    3
    3
    Mark Shuttleworth
    packages to help the humanity (you know, ubuntu)
    1
    1

We have a checkbox to allow inactive PPA results.

    >>> browser.getControl(name="show_inactive").value = True
    >>> browser.getControl("Search").click()

    >>> for ppa_row in find_tags_by_class(browser.contents, 'ppa_batch_row'):
    ...    print extract_text(ppa_row)
    Celso Providelo
    packages to help my friends.
    3
    3
    No Privileges Person
    I am not allowed to say, I have no privs.
    0
    0
    Mark Shuttleworth
    packages to help the humanity (you know, ubuntu)
    1
    1

This checkbox value is propagated to subsequent searches:

    >>> browser.getControl(name="show_inactive").value
    True

No data matches the non-existent search string "bustmybuffers".

    >>> field = browser.getControl("PPAs containing:")
    >>> field.value = 'bustmybuffers'
    >>> browser.getControl("Search").click()
    >>> len(find_tags_by_class(browser.contents, 'ppa_batch_row'))
    0

We have to update the archive caches, in order to be able to search
them properly, see doc/package-archive.txt.

    >>> from zope.component import getUtility

    >>> from canonical.database.sqlbase import flush_database_updates
    >>> from canonical.launchpad.interfaces import IDistributionSet
    >>> from canonical.launchpad.ftests import ANONYMOUS, login, logout

    >>> login(ANONYMOUS)
    >>> ubuntu = getUtility(IDistributionSet).getByName('ubuntu')
    >>> for archive in ubuntu.getAllPPAs():
    ...     archive.updateArchiveCache()
    >>> logout()
    >>> flush_database_updates()

In the three sample data PPAs, only one matches the search string "Celso".

    >>> field = browser.getControl("PPAs containing:")
    >>> field.value = 'Celso'
    >>> browser.getControl("Search").click()
    >>> len(find_tags_by_class(browser.contents, 'ppa_batch_row'))
    1


== Owner's PPA pages ==

Let's start by adding an extra package to Celso's archive:

    >>> import transaction
    >>> from canonical.launchpad.ftests.ppa import publishToPPA
    >>> login(ANONYMOUS)
    >>> publishToPPA("cprov", "warty", "commercialpackage", "1.0-1")
    >>> logout()
    >>> transaction.commit()
    >>> flush_database_updates()

And now on to the page itself. In the table rows, the "Owner" is a
clickable link to his PPA page:

    >>> browser.getLink("Celso Providelo").click()
    >>> browser.title
    'PPA for Celso Providelo'

The PPA page "Actions" portlet list all the related pages, only
'View build records' and 'View PPA' is allowed for unprivileged
access.

    >>> print extract_text(
    ...    find_portlet(browser.contents, 'Actions'))
    Actions
    View PPA
    Administer archive (disabled)
    Change details (disabled)
    View build records
    Delete packages (disabled)
    Edit dependencies (disabled)

The PPA page contains a portlet listing all series and architectures
which supports PPA building in ubuntu.

    >>> print extract_text(
    ...    find_portlet(browser.contents, 'PPA supported series'))
    PPA supported series
    5.04
    "Hoary"
    - development
    i386
    (official)
    4.10
    "Warty"
    - current
    i386
    (official)


Let's see his sources.list entries:

    >>> results = find_tag_by_id(browser.contents, 'sources-list-entries')
    >>> text = extract_text(results)
    >>> print text
    deb http://ppa.launchpad.dev/cprov/ubuntu breezy-autotest main
    deb-src http://ppa.launchpad.dev/cprov/ubuntu breezy-autotest main

and the select control that lets you update them:

    >>> print find_tag_by_id(browser.contents, 'series-widget-div')
    <div id="series-widget-div">
    ...
        <select id="field.series" name="field.series" size="1" onchange="updateSeries(this);">
            <option value="breezy-autotest">Breezy Badger Autotest</option>
            <option value="warty">The Warty Warthog Release</option>
        </select>
    ...

The page also shows some stats about Celso's PPA (number of sources. binaries
and estimated size).

    >>> results = find_tag_by_id(browser.contents, 'package_counters')
    >>> text = extract_text(results)
    >>> print text
    3 source packages
    (9.5 MiB)
    3 binary packages
    (3 bytes)
    Estimated archive size:
    9.5 MiB

The sample data has two packages belonging to Celso. Two table rows
will be presented to user containing:

 * SourcePackageRelease title (<source_name> - <source-version>),
 * Date Published,
 * target DistroSeries,
 * original Section

The headings:

    >>> print find_tag_by_id(browser.contents, 'packages_list')
    <table class="listing" id="packages_list">
    <thead>
    <tr class="ppa_package_row">
    <th colspan="2">Source</th>
    <th>Published</th>
    <th>Status</th>
    <th>Series</th>
    <th>Section</th>
    <th>Built</th>
    </tr>
    </thead>
    ...

The data:

    >>> def print_ppa_package_rows(contents):
    ...     for ppa_row in find_tags_by_class(contents, 'ppa_package_row'):
    ...         print extract_text(ppa_row)

    >>> print_ppa_package_rows(browser.contents)
    Source              Published   Status     Series      Section  Built
    cdrkit - 1.0        2007-07-09  Published  Breezy-a... Editors  i386
    comm... - 1.0-1                 Pending    Warty       Devel
    iceweasel - 1.0     2007-07-09  Published  Warty       Editors
    pmount - 0.1-1      2007-07-09  Published  Warty       Editors

Note that the changesfile link is not presented for anonymous access
neither for PPA owners.

It will only presented for users with admin permissions in the PPA in
question, i.e, launchpad-admins members. We have to restrict public
changesfile access (including PPA owner or team administrators) in
order to prevent 'replay attacks', as described in bug #159304.

The changesfile link is not presented when accessed by 'cprov' user,
the PPA owner.

    >>> cprov_browser = setupBrowser(
    ...     auth='Basic celso.providelo@canonical.com:cprov')
    >>> cprov_browser.open("http://launchpad.dev/~cprov/+archive")
    >>> print_ppa_package_rows(cprov_browser.contents)
    Source                    Published   Status     Series   Section  Built
    ...
    commercialpackage - 1.0-1             Pending    Warty    Devel
    ...

It's only presented when the cprov's PPA page is accessed by a
LP-admins user.

    >>> admin_browser.open("http://launchpad.dev/~cprov/+archive")
    >>> print_ppa_package_rows(admin_browser.contents)
    Source                         Published   Status  Series Section  Built
    ...
    comm... - 1.0-1  (changesfile)             Pending Warty  Devel
    ...

Each data row is expandable to contain some sections containing:

 * Publishing details
 * The source package's changelog
 * Any built packages and their description
 * The list of files for this package

    >>> iceweasel_data = find_tag_by_id(browser.contents, 'pub28')
    >>> print extract_text(iceweasel_data)
    Publishing details
      Published on 2007-07-09
    Changelog
    Builds
      i386
    Built Packages
      mozilla-firefox ff from iceweasel
    Files
      firefox-0.9.2.orig.tar.gz (9.5 MiB)
      iceweasel-1.0.dsc (123 bytes)
      mozilla-firefox_0.9_i386.deb (3 bytes)


== Searching an archive ==

We can search a PPA for a particular package.  A non-existent package shows
no results.

    >>> field = browser.getControl(name='field.name_filter')
    >>> field.value = 'nonexistentpackage'
    >>> browser.getControl("Search").click()
    >>> len(find_tags_by_class(browser.contents, 'ppa_package_row'))
    0

Searching for the package iceweasel show's that Celso is providing this.

    >>> field = browser.getControl(name='field.name_filter')
    >>> field.value = 'iceweasel'
    >>> browser.getControl("Search").click()
    >>> len(find_tags_by_class(browser.contents, 'ppa_package_row'))
    2

In order to have a wider coverage in search status filter we will
modify some publication in Celso's PPA to SUPERSEDED and DELETED
states.

    >>> from canonical.launchpad.interfaces import (
    ...     IPersonSet, PackagePublishingStatus)
    >>> from zope.component import getUtility
    >>> login('foo.bar@canonical.com')
    >>> cprov = getUtility(IPersonSet).getByName('cprov')
    >>> iceweasel_pub = cprov.archive.getPublishedSources(name='iceweasel')[0]
    >>> iceweasel_pub.secure_record.status = PackagePublishingStatus.SUPERSEDED
    >>> pmount_pub = cprov.archive.getPublishedSources(name='pmount')[0]
    >>> pmount_pub.secure_record.status = PackagePublishingStatus.DELETED
    >>> pmount_pub.secure_record.removed_by = cprov
    >>> pmount_pub.secure_record.removal_comment = 'nhack !'
    >>> logout()
    >>> transaction.commit()
    >>> flush_database_updates()

The default status filter is 'published', which means that, by
default, PPA pages will only present PUBLISHED or PENDING packages.

    >>> field = browser.getControl(name='field.name_filter')
    >>> field.value = ''
    >>> browser.getControl("Search").click()
    >>> for ppa_row in find_tags_by_class(browser.contents, 'ppa_package_row'):
    ...    print extract_text(ppa_row)
    Source          Published   Status     Series           Section  Built
    cdrkit - 1.0    2007-07-09  Published  Breezy-autotest  Editors  i386
    comm... - 1.0-1             Pending    Warty            Devel

Use can explicitly select 'published' filter and will get the same result.

    >>> browser.getControl(name='field.status_filter').value = ['published']
    >>> browser.getControl("Search").click()
    >>> for ppa_row in find_tags_by_class(browser.contents, 'ppa_package_row'):
    ...    print extract_text(ppa_row)
    Source          Published   Status     Series           Section  Built
    cdrkit - 1.0    2007-07-09  Published  Breezy-autotest  Editors  i386
    comm... - 1.0-1             Pending    Warty            Devel

When needed the users can select the 'superseded' filter and the
result will only contain packages SUPERSEDED or DELETED.

    >>> browser.getControl(name='field.status_filter').value = ['superseded']
    >>> browser.getControl("Search").click()
    >>> for ppa_row in find_tags_by_class(browser.contents, 'ppa_package_row'):
    ...    print extract_text(ppa_row)
    Source            Published    Status        Series   Section  Built
    iceweasel - 1.0   2007-07-09   Superseded    Warty    Editors
    pmount - 0.1-1    2007-07-09   Deleted       Warty    Editors

The 'Any Status' filter is also available, so the user can search over
any package ever published in the context PPA.

    >>> browser.getControl(name='field.status_filter').value = ['any']
    >>> browser.getControl("Search").click()
    >>> for ppa_row in find_tags_by_class(browser.contents, 'ppa_package_row'):
    ...    print extract_text(ppa_row)
    Source             Published    Status     Series      Section  Built
    cdrkit - 1.0       2007-07-09   Published  Breezy-a... Editors  i386
    comm... - 1.0-1                 Pending    Warty       Devel
    iceweasel - 1.0    2007-07-09   Superseded Warty       Editors
    pmount - 0.1-1     2007-07-09   Deleted    Warty       Editors


== Empty PPAs ==

An empty PPA lists no packages and uses apt sources lines for the
distribution's current release, as a guess.

    >>> anon_browser.open("http://launchpad.dev/~no-priv/+archive")
    >>> print extract_text(anon_browser.contents)
    PPA for No Privileges Person
    ...
    URL: http://ppa.launchpad.dev/no-priv/ubuntu
    ...
    deb http://ppa.launchpad.dev/no-priv/ubuntu hoary main
    deb-src http://ppa.launchpad.dev/no-priv/ubuntu hoary main
    ...
    This PPA does not contain any packages yet.
    ...


== PPA Builds ==

Each PPA provides a public page where the users can browse build
records by name and/or state. See pagetests/soyuz/23-builds-pages.txt
for more information.

    >>> anon_browser.open("http://launchpad.dev/~cprov/+archive")
    >>> anon_browser.getLink("View build records").click()

The only difference introduced in the PPA builds page is the fact that
it presents NEEDSBUILD records by default, which is the most accessed
status in the PPA workflow.

    >>> print extract_text(find_main_content(anon_browser.contents))
    Builds for PPA for Celso Providelo
    ...
    No 'Needs building' build records.


== Single-publication PPAs ==

Just quickly check if the singular form of this section is handled
properly.

    >>> anon_browser.open("http://launchpad.dev/~sabdfl/+archive")
    >>> anon_browser.title
    'PPA for Mark Shuttleworth'

    >>> results = find_tag_by_id(anon_browser.contents, 'package_counters')
    >>> text = extract_text(results)
    >>> print text
    1 source package
    (9.5 MiB)
    1 binary package
    (0 bytes)
    Estimated archive size:
    9.5 MiB

Mark has sources only published in one archive, so he has no
series-widget-div control to update them:

    >>> print find_tag_by_id(anon_browser.contents, 'series-widget-div')
    None

And the sources.list entries point to the right distribution release:

    >>> results = find_tag_by_id(anon_browser.contents, 'sources-list-entries')
    >>> text = extract_text(results)
    >>> print text
    deb http://ppa.launchpad.dev/sabdfl/ubuntu breezy-autotest main
    deb-src http://ppa.launchpad.dev/sabdfl/ubuntu breezy-autotest main


== Other Distribution PPAs ==

PPAs are targeted to a specific distribution and currently we only
allow Ubuntu PPAs, thus 'ubuntutest' PPAs page should be empty:

    >>> browser.open("http://launchpad.dev/ubuntutest")
    >>> browser.getLink("Personal Package Archives").click()
    >>> browser.title
    'Ubuntu Test Personal Package Archives'

    >>> len(find_tags_by_class(browser.contents, 'ppa_batch_row'))
    0


== Team PPA pages ==

Team PPA pages contain an extra column showing which team member uploaded
the package. First we need to set up a team PPA and publish something to it.

    >>> browser = setupBrowser(auth="Basic foo.bar@canonical.com:test")
    >>> browser.open("http://launchpad.dev/~ubuntu-team/+activate-ppa")
    >>> browser.getControl(name="field.accepted").value = True
    >>> browser.getControl('Activate').click()
    >>> ubuntu_ppa_url = browser.url

Publish mozilla-firefox to ubuntu-team's PPA and ensure that it is signed
by name16 (Foo Bar) who is a member - the signer is presented as the uploader
in the list.

    >>> from canonical.launchpad.ftests.ppa import publishToTeamPPA
    >>> login(ANONYMOUS)
    >>> publishToTeamPPA(team_name="ubuntu-team")
    >>> logout()
    >>> transaction.commit()
    >>> flush_database_updates()

Access ubuntu-team's PPA page:

    >>> browser.open(ubuntu_ppa_url)

The package row headings show an Uploader column:

    >>> print find_tag_by_id(browser.contents, 'packages_list')
    <table class="listing" id="packages_list">
    <thead>
    <tr class="ppa_package_row">
    <th colspan="2">Source</th>
    <th>Uploader</th>
    <th>Published</th>
    <th>Status</th>
    <th>Series</th>
    <th>Section</th>
    <th>Built</th>
    </tr>
    </thead>
    ...

The package row data shows the uploader:

    >>> print_ppa_package_rows(browser.contents)
    Source                 Uploader Published Status   Series  Section  Built
    mozilla-firefox - 0.9  name16             Pending  Hoary   Base

Links from files go to their on-archive locations:

    >>> browser.getLink("orig").url
    'http://.../firefox-0.9.2.orig.tar.gz'

The uploader name is linkified to that user's home page:

    >>> browser.getLink(url="~name16").click()
    >>> browser.url
    'http://launchpad.dev/~name16'


== PPA Built column ==

Each row in the PPA package list contains a special column that
summarises its 'build status'. It contains the following information
for each published source:

 * Completely built: green 'yes' icon only;

 * Build in progress: 'build-building' icon, followed by the
   architecture tags being built linking to the corresponding build
   page

 * Build failures: red 'no' icon, followed by the architecture tags
   which have failed to build linking to the corresponding build page.

Anyone can see the build status for package in Celso's PPA.

    >>> anon_browser.open("http://launchpad.dev/~cprov/+archive")

    >>> def print_built_status(contents):
    ...     rows = find_tags_by_class(contents, 'ppa_package_row')
    ...     headers = rows[0].findAll('th')
    ...     print extract_text(headers[0]), extract_text(headers[-1])
    ...     for row in rows[1:]:
    ...         columns = row.findAll('td')
    ...         name = extract_text(columns[0])
    ...         built_icon = columns[-1].img['src']
    ...         built_text = columns[-1].a
    ...         if built_text is not None:
    ...             built_text = built_text.renderContents()
    ...         print name, built_icon, built_text

    >>> print_built_status(anon_browser.contents)
    Source                    Built
    cdrkit - 1.0              /@@/no i386
    commercialpackage - 1.0-1 /@@/yes None

As mentioned before anyone can visualise 'at a glance' that there was
a failure while building 'cdrkit' source in Celso's PPA. They can also
easily see that the failure was in the i386 build, and optionally
click in the link to visit the build-record page (to check the dates
of downloading the buildlog).

    >>> anon_browser.getLink('i386').click()

    >>> print anon_browser.title
    Build details for i386 build of cdrkit 1.0 in ubuntu breezy-autotest RELEASE

This feature is also useful from the PPA owner perspective. When
Celso's visualise there that there was a failure while building
'cdrkit' on i386 he can quickly 'retry' the failure.

    >>> cprov_browser.open("http://launchpad.dev/~cprov/+archive")

    >>> cprov_browser.getLink('i386').click()
    >>> cprov_browser.getLink("Retry build").click()
    >>> cprov_browser.getControl("Retry Build").click()

At this point anyone can also visualise that 'cdrkit' source is being
built in Celso's PPA.

    >>> anon_browser.getLink('View PPA').click()
    >>> print_built_status(anon_browser.contents)
    Source                    Built
    cdrkit - 1.0              /@@/build-building i386
    commercialpackage - 1.0-1 /@@/yes None

Again the architecture tags listed on the 'built' column link to the
corresponding build page.

    >>> anon_browser.getLink('i386').click()
    >>> print anon_browser.title
    Build details for i386 build of cdrkit 1.0 in ubuntu breezy-autotest RELEASE
