Support Requests Expiration
===========================

It is not productive to have support requests lying around forever in
the support tracker. That's why we have a script which runs daily to
expire old tickets on which there was no activity for the past two
weeks.

The expiration period is set using the
config.tickettracker.days_before_expiration configuration variable. It
defaults to 15 days.

    >>> from canonical.config import config
    >>> config.tickettracker.days_before_expiration
    15

Only tickets in the OPEN or NEEDSINFO state are subject to expiration.


    (Sanity check in case somebody modifies the ticket sampledata and
    forget to update this script.)
    >>> from canonical.launchpad.database import Ticket
    >>> from canonical.lp.dbschema import TicketStatus
    >>> Ticket.select('status IN (%i,%i)' % (
    ...     TicketStatus.OPEN.value, TicketStatus.NEEDSINFO.value)).count()
    9

    (By default, all open and needs info ticket should expire. Make sure
    that no new tickets were recently added and will make this test fails
    in the future.)
    >>> Ticket.select(
    ...     "datelastresponse >= current_timestamp - interval '15 days' OR "
    ...    "datelastquery >= current_timestamp - interval '15 days'").count()
    0

    (We need to massage sample data a little. Since all expiration
    candidates in sample data would expire, do a little activity on
    some of these.)

    >>> from datetime import datetime, timedelta
    >>> from pytz import UTC
    >>> now = datetime.now(UTC)
    >>> two_weeks_ago = now - timedelta(days=14)
    >>> a_month_ago = now - timedelta(days=31)
    >>> from canonical.launchpad.interfaces import (
    ...     ILaunchBag, IPersonSet, ITicketSet)
    >>> login('no-priv@canonical.com')
    >>> no_priv = getUtility(ILaunchBag).user

    >>> ticketset = getUtility(ITicketSet)

    (A question was asked on that one a while ago.)
    >>> old_needs_info_ticket = ticketset.get(1)
    >>> old_needs_info_ticket.requestInfo(
    ...         no_priv, 'What Java version is installed?',
    ...         datecreated=a_month_ago)
    <TicketMessage...>

    (This one got an update from its owner recently.)
    >>> recent_open_ticket = ticketset.get(2)
    >>> recent_open_ticket.giveInfo(
    ...     'SVG works better now, but is still broken')
    <TicketMessage...>

    (This one was put in the NEEDSINFO state recently.)
    >>> recent_needsinfo_ticket = ticketset.get(4)
    >>> recent_needsinfo_ticket.requestInfo(
    ...     no_priv, 'What URL were you visiting?')
    <TicketMessage...>

    (Old open tickets.)
    >>> old_open_ticket = ticketset.get(5)

    (Commit the current transaction because the script will run in
    another transaction and thus it won't see the changes done on this
    test unless we commit.
    XXX flacoste 20061003 bug 3989: Unecessary flush_database_updates
    required.)
    >>> from canonical.database.sqlbase import flush_database_updates
    >>> flush_database_updates()
    >>> import transaction
    >>> transaction.commit()

    (Run the script.)
    >>> import subprocess
    >>> process = subprocess.Popen(
    ...     'cronscripts/expire-tickets.py', shell=True,
    ...     stdin=subprocess.PIPE, stdout=subprocess.PIPE,
    ...     stderr=subprocess.PIPE)
    >>> (out, err) = process.communicate()
    >>> print err
    INFO    creating lockfile
    INFO    Expiring OPEN and NEEDSINFO tickets without activity for the
            last 15 days.
    INFO    Found 7 tickets to expire.
    INFO    Expired 7 tickets.
    INFO    Finished expiration run.
    <BLANKLINE>
    >>> print out
    <BLANKLINE>
    >>> process.returncode
    0

    (Now we flush the caches, so that the above defined objects gets
    their content from the modified DB.)
    >>> from canonical.database.sqlbase import flush_database_caches
    >>> flush_database_caches()

The status of the OPEN and NEEDSINFO tickets that had recent activity
wasn't modified by the script:

    >>> print recent_open_ticket.status.title
    Open
    >>> print recent_needsinfo_ticket.status.title
    Needs information

But the other ones status was changed to 'Expired':

    >>> print old_needs_info_ticket.status.title
    Expired
    >>> print old_open_ticket.status.title
    Expired

The message explaining the reason for the expiration was posted by the
Support Tracker Janitor celebrity:

    >>> expiration_message = old_needs_info_ticket.messages[-1]
    >>> print expiration_message.action.name
    EXPIRE
    >>> print expiration_message.new_status.title
    Expired
    >>> print expiration_message.owner.name
    support-tracker-janitor

    >>> print expiration_message.text_contents
    This support request was expired because it remained in the
    Needs information state without activity for the last 15 days.


