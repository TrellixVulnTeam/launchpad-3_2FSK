Packaging views
===============

Packaging links connect a sourcepackage to a distroseries and a productseries.


Productseries linking packages
------------------------------

Distro series sourcepackages can be linked to product series using the
+ubuntupkg named view.

    >>> from canonical.launchpad.interfaces.launchpad import (
    ...     ILaunchpadCelebrities)

    >>> ubuntu = getUtility(ILaunchpadCelebrities).ubuntu
    >>> hoary = ubuntu.getSeries('hoary')
    >>> sourcepackagename = factory.makeSourcePackageName('hot')
    >>> sourcepackage = factory.makeSourcePackage(
    ...     sourcepackagename=sourcepackagename, distroseries=hoary)
    >>> spph = factory.makeSourcePackagePublishingHistory(
    ...     sourcepackagename=sourcepackagename, distroseries=hoary)
    >>> product = factory.makeProduct(name="hot", displayname='Hot')
    >>> productseries = factory.makeProductSeries(
    ...     product=product, name='hotter')
    >>> productseries.sourcepackages
    []
    >>> transaction.commit()

The view has a label and requires a distro series, source package name,
and a packaging contents.

    >>> view = create_view(productseries, '+ubuntupkg')
    >>> print view.label
    Ubuntu source packaging

    >>> print view.page_title
    Ubuntu source packaging

    >>> print view.field_names
    ['sourcepackagename', 'distroseries']

    >>> print view.cancel_url
    http://launchpad.dev/hot/hotter

    >>> series_names = [series.name for series in ubuntu.series]
    >>> view.setUpFields()
    >>> vocabulary_tokens = [
    ...     term.token
    ...     for term in view.form_fields['distroseries'].field.vocabulary
    ...     ]
    >>> assert vocabulary_tokens == series_names

    >>> form = {
    ...     'field.distroseries': 'hoary',
    ...     'field.sourcepackagename': 'hot',
    ...     'field.packaging': 'Primary Project',
    ...     'field.actions.continue': 'Continue',
    ...     }
    >>> view = create_initialized_view(
    ...     productseries, '+ubuntupkg', form=form)
    >>> view.errors
    []
    >>> for package in productseries.sourcepackages:
    ...     print package.name
    hot

    >>> transaction.commit()

Once a distro series sourcepackage is linked to a product series, no other
product series can link to it.

    >>> other_productseries = factory.makeProductSeries(
    ...     product=product, name='hotest')
    >>> form = {
    ...     'field.distroseries': 'hoary',
    ...     'field.sourcepackagename': 'hot',
    ...     'field.packaging': 'Primary Project',
    ...     'field.actions.continue': 'Continue',
    ...     }
    >>> view = create_initialized_view(
    ...     other_productseries, '+ubuntupkg', form=form)
    >>> for error in view.errors:
    ...     print error
    The <a href=".../hoary/+source/hot">hot</a> package in Hoary is already
    linked to another series.

A source package name must be provided.

    >>> form = {
    ...     'field.distroseries': 'hoary',
    ...     'field.sourcepackagename': '',
    ...     'field.packaging': 'Primary Project',
    ...     'field.actions.continue': 'Continue',
    ...     }
    >>> view = create_initialized_view(
    ...     productseries, '+ubuntupkg', form=form)
    >>> for error in view.errors:
    ...     print error
    ('sourcepackagename', u'Source Package Name', RequiredMissing())
    You must choose the source package name.

In the case of full functionality distributions like Ubuntu, the source
package must be published in the distro series.

    >>> vapor_spn = factory.makeSourcePackageName('vapor')
    >>> form = {
    ...     'field.distroseries': 'hoary',
    ...     'field.sourcepackagename': 'vapor',
    ...     'field.packaging': 'Primary Project',
    ...     'field.actions.continue': 'Continue',
    ...     }
    >>> view = create_initialized_view(
    ...     productseries, '+ubuntupkg', form=form)
    >>> for error in view.errors:
    ...     print error
    The source package is not published in Hoary.


Productseries linking Ubuntu packages
-------------------------------------

The +ubuntupkg named view allows the user to update the current linked
Ubuntu package.

    >>> view = create_initialized_view(productseries, '+ubuntupkg')

    >>> print view.label
    Ubuntu source packaging

    >>> print view.page_title
    Ubuntu source packaging

    >>> print view.field_names
    ['sourcepackagename', 'distroseries']

    >>> print view.cancel_url
    http://launchpad.dev/hot/hotter

The view restricts the packaging to Ubuntu series, and default is the current
Ubuntu series.

    >>> print view.default_distroseries.name
    hoary

    >>> print view.widgets['distroseries']._getDefault().name
    hoary

    >>> for term in view.widgets['distroseries'].vocabulary:
    ...     print term.title
    Breezy Badger Autotest (6.6.6)
    Grumpy (5.10)
    Hoary (5.04)
    Warty (4.10)

The sourcepackagename is None if the package link was never set. The view's
packaging history is empty, and the sourcepackagename widget is empty.

    >>> new_productseries = factory.makeProductSeries(
    ...     product=product, name='cold')
    >>> view = create_initialized_view(new_productseries, '+ubuntupkg')

    >>> print view.default_sourcepackagename
    None

    >>> print view.widgets.get('sourcepackagename')._getFormValue()
    <BLANKLINE>

    >>> print view.ubuntu_history
    []

Series have been packaged in Ubuntu do have the current information and
a history.

    >>> view = create_initialized_view(productseries, '+ubuntupkg')
    >>> print view.default_sourcepackagename.name
    hot

    >>> print view.widgets.get('sourcepackagename')._getFormValue().name
    hot

    >>> for packaging in view.ubuntu_history:
    ...     print packaging.distroseries.name
    ...     print packaging.sourcepackagename.name
    hoary hot

The package in the current Ubuntu series can be updated.

    >>> thunderbird_spn = factory.getOrMakeSourcePackageName('thunderbird')
    >>> spph = factory.makeSourcePackagePublishingHistory(
    ...     sourcepackagename=thunderbird_spn, distroseries=hoary)

    >>> form = {
    ...     'field.sourcepackagename': 'thunderbird',
    ...     'field.actions.continue': 'Update',
    ...     }
    >>> view = create_initialized_view(
    ...     productseries, '+ubuntupkg', form=form)
    >>> view.errors
    []

    >>> for packaging in view.ubuntu_history:
    ...     print packaging.distroseries.name
    ...     print packaging.sourcepackagename.name
    hoary thunderbird

It is not an error to submit the same sourcepackagename information, the
action is ignored because there is no change

    >>> form = {
    ...     'field.sourcepackagename': 'thunderbird',
    ...     'field.actions.continue': 'Update',
    ...     }
    >>> view = create_initialized_view(
    ...     productseries, '+ubuntupkg', form=form)
    >>> view.errors
    []

    >>> for packaging in view.ubuntu_history:
    ...     print packaging.distroseries.name
    ...     print packaging.sourcepackagename.name
    hoary thunderbird

When the current Ubuntu series changes, the sourcepackagename is not known,
and a new entry can be added to the packaging history.

    >>> from lp.registry.interfaces.distroseries import DistroSeriesStatus

    >>> login('admin@canonical.com')
    >>> hoary.status = DistroSeriesStatus.CURRENT
    >>> grumpy_series = ubuntu.getSeries('grumpy')
    >>> spph = factory.makeSourcePackagePublishingHistory(
    ...     sourcepackagename=sourcepackagename, distroseries=grumpy_series)
    >>> grumpy_series.status = DistroSeriesStatus.FROZEN

    >>> a_user = factory.makePerson(name="hedgehog")
    >>> login_person(a_user)
    >>> form = {
    ...     'field.sourcepackagename': 'hot',
    ...     'field.actions.continue': 'Update',
    ...     }
    >>> view = create_initialized_view(
    ...     productseries, '+ubuntupkg', form=form)
    >>> view.errors
    []

    >>> print view.default_distroseries.name
    grumpy

    >>> print view.default_sourcepackagename
    None

    >>> for packaging in view.ubuntu_history:
    ...     print packaging.distroseries.name
    ...     print packaging.sourcepackagename.name
    grumpy hot
    hoary thunderbird


Product packages view
----------------------

The +packages named view displays the packages links to the product's series.

    >>> view = create_initialized_view(product, name='+packages')
    >>> print view.label
    Linked packages

The view defines the all_packages property used by the PackagingDeleteView
to create a vocabulary.

    >>> for package in view.all_packaging:
    ...     print package.distroseries.name, package.productseries.name
    grumpy hotter
    hoary hotter

The view provides the series_packages property that returns a list of
dicts. Each dict as a series and a list of package dicts. The package dict
contains the package and field for form actions.

    >>> for series_dict in view.series_packages:
    ...     print series_dict['series'].name
    ...     for package_dict in series_dict['packagings']:
    ...         print package_dict['packaging'].distroseries.name
    ...         print package_dict['form_id']
    ...         print package_dict['field']
    cold
    hotter
      grumpy
        delete-grumpy-hot-hotter
        <input type="hidden" name="field.packaging" .../>
      hoary
        delete-hoary-thunderbird-hotter
        <input type="hidden" name="field.packaging" .../>
    trunk

The view provides the distro_packaging property that is a list of
dictionaries for the distributions and their packaging.  The list is
sorted by distribution with Ubuntu first and the rest in alphabetic
order.

    >>> view = create_initialized_view(product, name='+packages')
    >>> for distro_dict in view.distro_packaging:
    ...     print distro_dict['distribution'].name
    ubuntu

The +packages named view descends from PackagingDeleteView to provide remove
link actions for the product's linked packages.

    >>> from lp.registry.browser.packaging import PackagingDeleteView

    >>> isinstance(view, PackagingDeleteView)
    True

A packaging link can be deleted if the owner believes it is an error. The
package linked to hoary is wrong; thunderbird is the wrong sourcepackage.

    >>> view = create_initialized_view(product, name='+packages')
    >>> for package in view.all_packaging:
    ...     print package.distroseries.name, package.productseries.name
    grumpy hotter
    hoary hotter

    >>> [hoary_package] = [package for package in view.all_packaging
    ...                     if package.distroseries.name == 'hoary']
    >>> form = {
    ...     'field.packaging': '%s' % hoary_package.id,
    ...     'field.actions.delete_packaging': 'Delete upstream link',
    ...     }
    >>> view = create_initialized_view(product, name='+packages', form=form)
    >>> view.errors
    []
    >>> for package in view.all_packaging:
    ...     print package.distroseries.name, package.productseries.name
    grumpy hotter


Distro series +packaging view
-----------------------------

The DistroSeriesPackagesView shows the packages in a distro series that
are linked to upstream projects.

    >>> view = create_initialized_view(hoary, name='+packaging')
    >>> print view.label
    Mapping series packages to upstream project series

    >>> print view.page_title
    Upstream packaging links

The view provides a property to get the source packages that have
translations, but are not linked to an upstream project. The view filters
unpublished versions from full functionality distributions like Ubuntu.

    >>> hoary.getUnlinkedTranslatableSourcePackages()
    [<SourcePackage .../hoary/pmount>, <SourcePackage .../hoary/mozilla>]

    >>> view.show_unlinked_translatables
    True

    >>> view.unlinked_translatables
    [<SourcePackage ubuntu/hoary/pmount>]

A distro series can have thousands of upstream packaging links. The view
provides a batch navigator to access the packagings. The default batch size
is 200.

    >>> batch_navigator = view.cached_packagings
    >>> batch_navigator.default_size
    200

    >>> for packaging in batch_navigator.batch:
    ...     print packaging.sourcepackagename.name
    evolution
    mozilla-firefox
    netapplet

The show_unlinked_translatables property is False when the batch is after the
first batch.

    >>> view = create_initialized_view(
    ...     hoary, name='+packaging', query_string='start=2')
    >>> view.show_unlinked_translatables
    False
