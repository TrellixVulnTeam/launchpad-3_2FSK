Source Package Release
======================

The SourcePackageRelease table represents a particular release of a
SourcePackageName, but isn't tied to any particular DistroRelease
as the same release can appear in many.

Let's get one from the database:

   >>> from canonical.launchpad.database import SourcePackageRelease
   >>> spr = SourcePackageRelease.get(14)
   >>> print spr.name
   mozilla-firefox
   >>> print spr.version
   0.9

We can use the magic productrelease property to map this to a ProductRelease:

   >>> pr = spr.productrelease
   >>> print pr.product.name
   firefox
   >>> print pr.productseries.name
   milestones
   >>> print pr.version
   0.9

It should also work when the version has a dash and packaging revision
after it:

   >>> spr = SourcePackageRelease.get(16)
   >>> print spr.name
   netapplet
   >>> print spr.version
   1.0-1
   >>> pr = spr.productrelease
   >>> print pr.product.name
   netapplet
   >>> print pr.productseries.name
   releases
   >>> print pr.version
   1.0

If there isn't one, that should return None.

   >>> print SourcePackageRelease.get(20).productrelease
   None

Verify the 'meta_binary' attribute:

   >>> spr_test = SourcePackageRelease.get(20)
   >>> spr_test.name
   u'pmount'

   >>> from canonical.launchpad.interfaces import (
   ...    IDistroReleaseBinaryPackage) 

   >>> IDistroReleaseBinaryPackage.providedBy(spr_test.meta_binaries[0])
   True

It's time to check the translation upload function.

   >>> from canonical.librarian.ftests.harness import LibrarianTestSetup
   >>> LibrarianTestSetup().setUp()
   >>> import canonical.launchpad
   >>> import os.path
   >>> import transaction
   >>> from canonical.launchpad.interfaces import ITranslationImportQueue
   >>> from canonical.librarian.interfaces import ILibrarianClient
   >>> translation_import_queue = getUtility(ITranslationImportQueue)
   >>> client = getUtility(ILibrarianClient)

We need a test tarball uploaded into librarian to run this test.

   >>> test_file_name = os.path.join(
   ...     os.path.dirname(canonical.launchpad.__file__),
   ...     'doc/sourcepackagerelease-translations.tar.gz')
   >>> file = open(test_file_name)
   >>> size = len(file.read())
   >>> file.seek(0)
   >>> alias = client.addFile(
   ...     name='test.tar.gz',
   ...     size=size,
   ...     file=file,
   ...     contentType='application/x-gtar')

We need the commit to see the upload.

   >>> transaction.commit()

Before the upload, the queue should be empty.

   >>> len(translation_import_queue)
   0

Now we do the upload.

   >>> spr_test.attachTranslationFiles(alias, True)

The commit is needed to see the new entries

   >>> transaction.commit()

And the queue should have a new entry.

   >>> len(translation_import_queue)
   1

Now, the final import should work.
First, remove the recently seen cache from the import script.

    >>> from canonical.launchpad.scripts.po_import import ImportProcess
    >>> import os, os.path
    >>> if os.path.exists(ImportProcess.POIMPORT_RECENTLY_SEEN_PICKLE):
    ...     os.unlink(ImportProcess.POIMPORT_RECENTLY_SEEN_PICKLE)

    >>> import subprocess, sys
    >>> process = subprocess.Popen([
    ...     sys.executable, 'cronscripts/rosetta-poimport.py'
    ...     ], stdin=subprocess.PIPE, stdout=subprocess.PIPE,
    ...     stderr=subprocess.STDOUT
    ...     )
    >>> (output, empty) = process.communicate()
    >>> print output
    INFO    Importing: Spanish (es) translation of pmount in Ubuntu Hoary package "pmount"
    ...

Remove the new translation import cache so it doesn't confuse anything

    >>> os.unlink(ImportProcess.POIMPORT_RECENTLY_SEEN_PICKLE)

   >>> LibrarianTestSetup().tearDown()
