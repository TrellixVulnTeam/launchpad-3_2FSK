= FTPMASTER Tools =

This test commits to the test database in subprocesses and so needs to
force the DatabaseLayer to fully tear down and restore the database
after this test.

  >>> from canonical.testing.layers import DatabaseLayer
  >>> DatabaseLayer.force_dirty_database()

Queue Tool is a script designed to handle queue content.
This test  will check its output, since the script itself would
open a new connection, let's invoke it in dry-run mode.

  >>> import subprocess
  >>> import os
  >>> import sys
  >>> from canonical.config import config


  >>> script = os.path.join(config.root, "scripts", "ftpmaster-tools",
  ...                       "queue")

INFO

  >>> process = subprocess.Popen([sys.executable, script,
  ...                             "-s", "breezy-autotest", "info"],
  ...                             stdout=subprocess.PIPE)
  >>> stdout, stderr = process.communicate()
  >>> process.returncode
  0
  >>> print stdout
  Initialising connection to queue new
  Running: "info"
  Listing ubuntu/breezy-autotest (NEW) 6/6
  ---------|----|----------------------|----------------------|---------------
         7 | -- | netapplet-1.0.0.tar. | -                    | ...
           | * netapplet-1.0.0.tar.gz Format: DDTP_TARBALL
         6 | -- | netapplet-1.0.0.tar. | -                    | ...
           | * netapplet-1.0.0.tar.gz Format: DIST_UPGRADER
         4 | S- | alsa-utils           | 1.0.9a-4ubuntu1      | ...
           | * alsa-utils/1.0.9a-4ubuntu1 Component: main Section: base
         3 | S- | netapplet            | 0.99.6-1             | ...
           | * netapplet/0.99.6-1 Component: main Section: web
         2 | -B | pmount (i386)        | 0.1-1                | ...
           | N pmount/0.1-1/i386 Component: main Section: base Priority: IMPORTANT
         1 | -B | mozilla-firefox (i38 | 0.9                  | ...
           | N mozilla-firefox/0.9/i386 Component: main Section: base Priority: EXTRA
  ---------|----|----------------------|----------------------|---------------
                                                               6/6
							       total


Check the custom uploads presentation:

  >>> process = subprocess.Popen([sys.executable, script, "-Q", "unapproved",
  ...                             "-s", "breezy-autotest-updates", "info"],
  ...                             stdout=subprocess.PIPE)
  >>> stdout, stderr = process.communicate()
  >>> process.returncode
  0
  >>> print stdout
  Initialising connection to queue unapproved
  Running: "info"
  Listing ubuntu/breezy-autotest-updates (UNAPPROVED) 1/1
  ---------|----|----------------------|----------------------|---------------
         5 | -- | netapplet-1.0.0.tar. | -                    | ...
           | * netapplet-1.0.0.tar.gz Format: ROSETTA_TRANSLATIONS
  ---------|----|----------------------|----------------------|---------------
  1/1 total
  <BLANKLINE>


= Testing change-override behaviour =

Defining path to the script:

  >>> script = os.path.join(config.root, "scripts", "ftpmaster-tools",
  ...                       "change-override.py")


Testing source-only override of package 'mozilla-firefox', moving to
component 'universe':

  >>> process = subprocess.Popen([sys.executable, script, "-vt",
  ...                             "-s", "warty", "-x", "base",
  ...                             "-c", "main", "mozilla-firefox"],
  ...                            stdout=subprocess.PIPE,
  ...                            stderr=subprocess.PIPE,)
  >>> stdout, stderr = process.communicate()
  >>> process.returncode
  0
  >>> print stderr
  DEBUG   Acquiring lock
  DEBUG   Initialising connection.
  INFO    Override Component to: 'main'
  INFO    Override Section to: 'base'
  INFO    'mozilla-firefox - 0.9/main/base' source overridden
  INFO    Commiting transaction, changes will be visible after next publisher run.
  <BLANKLINE>


This is a full source and binary override of package 'mozilla-firefox' in warty,
moving to component 'universe':

  >>> process = subprocess.Popen([sys.executable, script, "-vS",
  ...                             "-s", "warty", "-c", "universe",
  ...                             "mozilla-firefox"],
  ...                             stdout=subprocess.PIPE,
  ...                             stderr=subprocess.PIPE,)
  >>> stdout, stderr = process.communicate()
  >>> process.returncode
  0

It will only override binaries currently published from that source package
version.  In the sample data, mozilla-firefox source gives mozilla-firefox
binary version 0.9.  The 1.0 version comes from the "iceweasel" source, so
only the 0.9 version is overridden:

  >>> import transaction
  >>> from canonical.launchpad.interfaces import IDistributionSet
  >>> transaction.abort()
  >>> warty386 = getUtility(IDistributionSet)['ubuntu']['warty']['i386']
  >>> for release in warty386.getBinaryPackage('mozilla-firefox').releases:
  ...     (release.version, release.component.name)
  (u'1.0', u'universe')
  (u'0.9', u'main')


Testing full (source and binary) override of package 'pmount', moving
to component 'main':

  >>> process = subprocess.Popen([sys.executable, script, "-vS",
  ...                             "-s", "hoary", "-x", "editors",
  ...                             "-c", "main", "pmount"],
  ...                            stdout=subprocess.PIPE,
  ...                            stderr=subprocess.PIPE,)
  >>> stdout, stderr = process.communicate()
  >>> process.returncode
  0
  >>> print stderr
  DEBUG   Acquiring lock
  DEBUG   Initialising connection.
  INFO    Override Component to: 'main'
  INFO    Override Section to: 'editors'
  INFO    'pmount - 0.1-2/main/editors' remained the same
  WARNING 'pmount' has no binaries published in hoary
  INFO    Commiting transaction, changes will be visible after next publisher run.
  <BLANKLINE>


Any error during the validation of the passed parameters results in
error result code and message describing the reason.

  >>> process = subprocess.Popen([sys.executable, script, "-vt",
  ...                             "-s", "hoary", "-x", "foo",
  ...                             "-c", "main", "cnew"],
  ...                            stdout=subprocess.PIPE,
  ...                            stderr=subprocess.PIPE,)
  >>> stdout, stderr = process.communicate()
  >>> process.returncode
  1
  >>> print stderr
  DEBUG   Acquiring lock
  DEBUG   Initialising connection.
  INFO    Override Component to: 'main'
  ERROR   foo is not a valid section for ubuntu/hoary.
  <BLANKLINE>



  >>> process = subprocess.Popen([sys.executable, script, "-vt",
  ...                             "-s", "hoary", "-c", "main", "bogus"],
  ...                            stdout=subprocess.PIPE,
  ...                            stderr=subprocess.PIPE,)
  >>> stdout, stderr = process.communicate()
  >>> process.returncode
  0
  >>> print stderr
  DEBUG   Acquiring lock
  DEBUG   Initialising connection.
  INFO    Override Component to: 'main'
  ERROR   'bogus' source isn't published in hoary
  INFO    Commiting transaction, changes will be visible after next publisher run.
  <BLANKLINE>
