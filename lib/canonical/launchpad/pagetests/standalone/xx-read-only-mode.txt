= Read-Only Mode =

During upgrades, Launchpad can be put into read-only mode using a config
file switch. When in read-only mode, queries can be made to the slave
database but attempts to access the master database or make database
changes fail, returning an error page to the user.

    >>> from canonical.config import config
    >>> def push_read_only_mode(flag):
    ...     config.push('read only mode', """
    ...         [launchpad]
    ...         read_only: %s""" % str(flag))
    >>> def pop_read_only_mode():
    ...     config.pop('read only mode')
    >>> push_read_only_mode(True)


== Notification of read-only mode. ==

Users are warned when Launchpad is running in read-only mode.

    >>> user_browser.open('http://launchpad.dev')
    >>> print extract_text(first_tag_by_class(
    ...     user_browser.contents, 'informational message'))
    Launchpad is undergoing maintenance
    ...

Anonymous users are also warned, or they might try to signup.

    >>> anon_browser.open("http://launchpad.dev/~name16")
    >>> print extract_text(first_tag_by_class(
    ...     anon_browser.contents, 'informational message'))
    Launchpad is undergoing maintenance
    ...

There is no warning on the SSO server, as it is not affected by this mode.

    >>> user_browser.open('http://openid.launchpad.dev')
    >>> print first_tag_by_class(
    ...     user_browser.contents, 'informational message')
    None

There is no warning when Launchpad is running normally.

    >>> push_read_only_mode(False)
    >>> user_browser.open('http://launchpad.dev')
    >>> print first_tag_by_class(
    ...     user_browser.contents, 'informational message')
    None
    >>> pop_read_only_mode()


== Changes fail ==

Attempts to make changes raises an exception, which is rendered as a
nice 503 page for the user.

    >>> user_browser.handleErrors = True
    >>> user_browser.open('http://launchpad.dev/people/+me')
    >>> user_browser.getLink('Change details').click()
    >>> user_browser.getControl(name='field.displayname').value = 'Different'
    >>> user_browser.raiseHttpErrors = False
    >>> # XXX StuartBishop 20090423 bug=365378: raiseHttpErrors is broken,
    >>> # requiring the try/except dance.
    >>> try:
    ...     user_browser.getControl('Save Changes').click()
    ... except:
    ...     pass
    >>> print user_browser.headers.get('Status')
    503 Service Unavailable
    >>> print extract_text(first_tag_by_class(
    ...     user_browser.contents, 'exception'))
    Sorry, you can't do this right now

There are actually two exceptions that might trigger this error page.

    * Legacy code may trigger the ReadOnlyModeViolation exception by
      attempting to write to an object retrieved from the default Store. 

    * Code may trigger the ReadOnlyModeDisallowedStore exception by
      requesting a master Store.

Unfortunately it is difficult to ensure the same exception will
continue to be raised by the above test. Instead, we confirm that both
exceptions are rendered using the same view ensuring that the observed
behavior is the same.

    >>> from zope.app import zapi
    >>> from canonical.launchpad.webapp.interfaces import (
    ...     ReadOnlyModeDisallowedStore, ReadOnlyModeViolation)
    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest
    >>> request = LaunchpadTestRequest()
    >>> view_name = zapi.queryDefaultViewName(
    ...     ReadOnlyModeDisallowedStore, request)
    >>> view_name is not None
    True
    >>> disallowed_view = zapi.queryMultiAdapter(
    ...     (ReadOnlyModeDisallowedStore, request), name=view_name)

    >>> view_name = zapi.queryDefaultViewName(
    ...     ReadOnlyModeViolation, request)
    >>> view_name is not None
    True
    >>> violation_view = zapi.queryMultiAdapter(
    ...     (ReadOnlyModeViolation, request), name=view_name)

    >>> violation_view == disallowed_view
    True


== Cleanup ==

    >>> pop_read_only_mode()

