= Builder page =

An anonymous user visits the +builds page. He can see a summary of the
builder state. In the sampledata, the builder 'bob' is building
'mozilla-firefox'.

    >>> anon_browser.open("http://launchpad.dev/builders")
    >>> anon_browser.getLink("bob").click()

    >>> print extract_text(find_main_content(anon_browser.contents))
    Bob The Builder
    Bob The Builder builds Intel 386 binaries and is owned by
    Launchpad Buildd Admins.
    ...

    >>> print extract_text(find_portlet(
    ...     anon_browser.contents, 'View full history Current status'))
    View full history Current status
    i386 build of mozilla-firefox 0.9 in ubuntu hoary RELEASE
    Started ... ago.
    Tail of the builder log at ...
    Dummy sampledata entry, not processing

The anonymous user can see the builder details portlet and it contains
information about the builder itself, like name, architecture,
location and description.

    >>> print extract_text(
    ...     find_portlet(anon_browser.contents, 'Builder information'))
    Builder information
    Architecture: Intel 386
    Location: http://localhost:8221/
    Manual mode: False
    Owner: Launchpad Buildd Admins

The builder status is now displayed as normal text and not as as a
notification alert.

    >>> messages = get_feedback_messages(anon_browser.contents)
    >>> print messages
    []

== Builder Actions ==

All builder actions require authorization, some launchpad.Edit, some
launchpad.Admin, both are only granted to members of
'launchpad-buildd-admins' team and launchpad administrators.

Celso is a member of launchpad-buildd-admins, he has full access to
the builder actions.

    >>> cprov_browser = setupBrowser(
    ...     auth='Basic celso.providelo@canonical.com:cprov')

    >>> cprov_browser.open('http://launchpad.dev/builders')
    >>> cprov_browser.getLink('bob').click()

Celso sees the available actions in the 'Actions' portlet.

    >>> print extract_text(find_tag_by_id(cprov_browser.contents, 'actions'))
    Show build history
    Change details
    Change mode

See 'xx-builds-pages.txt' for documentation about 'Show build history'.'

Celso can modify the location and the visible details of the builder.

    >>> cprov_browser.getLink('Change details').click()
    >>> cprov_browser.getControl(name="field.name").value
    'bob'
    >>> cprov_browser.getControl(name="field.title").value
    'Bob The Builder'
    >>> cprov_browser.getControl(name="field.description").value
    'The default build-slave'
    >>> cprov_browser.getControl(name="field.processor").value
    ['386']
    >>> cprov_browser.getControl(name="field.owner").value
    'launchpad-buildd-admins'

Other administration fields are available on the 'Change details' form
as currently administrators are the only users with permission to use the
Edit page:

    >>> cprov_browser.getControl(name="field.manual").value
    False

    >>> cprov_browser.getControl(name="field.vm_host").value
    ''

    >>> cprov_browser.getControl(name="field.builderok").value
    False

    >>> cprov_browser.getControl(name="field.failnotes").value
    ''

    >>> cprov_browser.getControl(name="field.active").value
    True

Celso changes the builder title and the change takes effect immediately.

    # We use backslashreplace because the page title includes smart quotes.
    >>> from canonical.launchpad.helpers import backslashreplace
    >>> print backslashreplace(cprov_browser.title)
    Change details for builder \u201cBob The Builder\u201d

    >>> title = cprov_browser.getControl(name="field.title")
    >>> original_title = title.value
    >>> title.value = 'Donkey builder'
    >>> cprov_browser.getControl("Change").click()

    # Submitting the change details form redirects to the index page
    # for the builder.
    >>> print cprov_browser.title
    Build machine Donkey builder

Then restores it once he realises his mistake.

    >>> cprov_browser.getLink('Change details').click()
    >>> cprov_browser.getControl(
    ...     name="field.title").value = original_title
    >>> cprov_browser.getControl("Change").click()

By looking at 'details' portlet, Celso realises the builder is in
automatic (AUTO) mode.

    >>> details_portlet = find_portlet(
    ...     cprov_browser.contents, "Bob The Builder details")
    >>> print str(extract_text(details_portlet))
    Bob The Builder details
    Name: Bob The Builder
    Architecture: Intel 386
    Location: http://localhost:8221/
    Virtual: False
    Description
      The default build-slave
    Status
      Disabled
    Owner
      Launchpad Buildd Admins

He goes to the 'Change Mode' action page and change it to manual mode.

    >>> cprov_browser.getLink("Change mode").click()
    >>> cprov_browser.getControl(name="field.manual").value = True
    >>> cprov_browser.getControl("Change").click()

He can see now, in the details portlet that it say 'MANUAL' now.

    >>> details_portlet = find_portlet(
    ...     cprov_browser.contents, "Bob The Builder details")
    >>> print str(extract_text(details_portlet))
    Bob The Builder details
    Name: Bob The Builder
    Architecture: Intel 386
    Location: http://localhost:8221/
    Virtual: False
    Description
      The default build-slave
    Status
      Disabled
    Owner
      Launchpad Buildd Admins

Via the 'edit' form Celso can also modify the 'builderok',
'failure_notes', 'virtualized' and 'virtual machine' fields. All the
consequences of those modifications are covered in the buildd-admin
documentation.

The simplest and most effective thing a administrator can do in this
case is to bring the builder back to work.

    >>> cprov_browser.getLink("Change details").click()
    >>> cprov_browser.getControl(name="field.builderok").value = True
    >>> cprov_browser.getControl(name="field.manual").value = False
    >>> cprov_browser.getControl("Change").click()


== Marking a builder as inactive ==

The builder administrators can hide a builder from the public list
when they judge it convenient, for instance, when the builder present
transient failures or is used for another purpose.

    >>> cprov_browser.open('http://launchpad.dev/+builds')
    >>> cprov_browser.getLink('bob').click()
    >>> print cprov_browser.title
    Build machine Bob The Builder

Celso can toggle the active bit using the Change details form.

    >>> cprov_browser.getLink('Change details').click()
    >>> active = cprov_browser.getControl(name="field.active")
    >>> active.value
    True

    >>> active.value = False
    >>> cprov_browser.getControl("Change").click()

Once deactivated the builder is not be presented in the public Build
Farm list. Celso cannot see the link to it.

    >>> cprov_browser.getLink("Build Farm").click()

    >>> print extract_text(find_main_content(cprov_browser.contents))
    Launchpad build machines
    Register a new build machine
    PPA build machines
    386    0 builds waiting in queue
    frog   AUTO   Disabled
    Official distribution build machines
    Generated at ...

    >>> cprov_browser.getLink('bob').click()
    Traceback (most recent call last):
    ...
    LinkNotFoundError

But Celso can access the deactivated builder via its URL.

    >>> cprov_browser.open('http://launchpad.dev/+builds/bob')
    >>> print cprov_browser.title
    Build machine Bob The Builder


== Actions permissions ==

Normal users, such as No Privileges Person are not shown links, nor
can he access the pages by directly via URL.

    >>> user_browser.open("http://localhost/+builds/bob")
    >>> print extract_text(find_tag_by_id(user_browser.contents, 'actions'))
    Show build history
    Change details (disabled)
    Change mode (disabled)

    >>> user_browser.open("http://localhost/+builds/bob/+edit")
    Traceback (most recent call last):
    ...
    Unauthorized:...

    >>> user_browser.open("http://localhost/+builds/bob/+mode")
    Traceback (most recent call last):
    ...
    Unauthorized:...

The same is true for the anonymous user:

    >>> anon_browser.open("http://localhost/+builds/bob")
    >>> print extract_text(find_tag_by_id(anon_browser.contents, 'actions'))
    Show build history
    Change details (disabled)
    Change mode (disabled)

    >>> anon_browser.open("http://localhost/+builds/bob/+edit")
    Traceback (most recent call last):
    ...
    Unauthorized: ...

    >>> anon_browser.open("http://localhost/+builds/bob/+mode")
    Traceback (most recent call last):
    ...
    Unauthorized: ...

