== Manage-Chroot Tool ==

This tool is used for add or update chroots for a suites
(distrorelease + pocket). This scripts is based on the
IDistroArchrelease.addOrUpdateChroot method, which is better tested in
doc/pocketchroot.txt.


It requires local librarian server working:

  >>> from canonical.librarian.ftests.harness import LibrarianTestSetup
  >>> LibrarianTestSetup().setUp()


Let's setup the script runner:

  >>> import subprocess
  >>> import os
  >>> import sys
  >>> from canonical.config import config

  >>> script = os.path.join(config.root, "scripts", "ftpmaster-tools",
  ...                       "manage-chroot.py")


Bogus file from LP root path:

  >>> filepath = os.path.join(config.root, "COPYING")


Adding a new chroot for hoary-security:

  >>> process = subprocess.Popen([sys.executable, script,
  ...                             "hoary-security", "i386", filepath],
  ...                            stdout=subprocess.PIPE,
  ...                            stderr=subprocess.PIPE,)
  >>> stdout, stderr = process.communicate()
  >>> process.returncode
  0
  >>> print stderr
  INFO    Success.
  <BLANKLINE>


Update the chroot in question as suggested:

  >>> process = subprocess.Popen([sys.executable, script,
  ...                             "hoary-security", "i386", filepath],
  ...                            stdout=subprocess.PIPE,
  ...                            stderr=subprocess.PIPE,)
  >>> stdout, stderr = process.communicate()
  >>> process.returncode
  0
  >>> print stderr
  INFO    Success.
  <BLANKLINE>


Check error on unknow suite:

  >>> process = subprocess.Popen([sys.executable, script,
  ...                             "hoary-foo", "i386", filepath],
  ...                            stdout=subprocess.PIPE,
  ...                            stderr=subprocess.PIPE,)
  >>> stdout, stderr = process.communicate()
  >>> process.returncode
  1
  >>> print stderr
  ERROR   Not found: 'hoary-foo'
  <BLANKLINE>


Not present file path:

  >>> filepath = os.path.join(config.root, "foo")

  >>> process = subprocess.Popen([sys.executable, script,
  ...                             "hoary", "i386", filepath],
  ...                            stdout=subprocess.PIPE,
  ...                            stderr=subprocess.PIPE,)
  >>> stdout, stderr = process.communicate()
  >>> process.returncode
  1
  >>> print stderr
  ERROR   Could not open: ...foo
  <BLANKLINE>



Remove locally started Librarian server

  >>> LibrarianTestSetup().tearDown()


Check the behavior with no Librarian instance running:

  >>> filepath = os.path.join(config.root, "COPYING")

  >>> process = subprocess.Popen([sys.executable, script,
  ...                             "hoary", "i386", filepath],
  ...                            stdout=subprocess.PIPE,
  ...                            stderr=subprocess.PIPE,)
  >>> stdout, stderr = process.communicate()
  >>> process.returncode
  1
  >>> print stderr
  ERROR   Librarian upload failed: (111, 'Connection refused')
  <BLANKLINE>
