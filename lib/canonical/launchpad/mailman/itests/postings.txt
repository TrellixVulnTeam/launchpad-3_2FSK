= Posting =

Only Launchpad members are allowed to post to team mailing lists.  A message
by a sender who is not a Launchpad member will be summarily discarded.

First, create the mailing list, which will send a notification messages
to all the members of the mailing list.  We can ignore these messages.

    >>> import itest_helper
    >>> list_one = itest_helper.create_list('itest-one')
    >>> smtpd.reset()


== Non-member postings ==

Postings from addresses that are not registered and verified with Launchpad
are summarily discarded.

    # Watch Mailman's logs/vette for possible log messages.
    >>> vette_watcher = itest_helper.LogWatcher('vette')

Inject a message from a non-member into Mailman's incoming queue.

    >>> from Mailman.Post import inject
    >>> inject('itest-one', """\
    ... From: zperson@example.net
    ... To: itest-one@lists.launchpad.dev
    ... Subject: A non-member post
    ... Message-ID: <first-injection>
    ...
    ... Hi, I am not a member of Launchpad (yet).
    ... """)
    >>> vette_watcher.wait()

Message from non-members who are in unknown standing do not get posted to the
mailing list.

    >>> len(smtpd.getMessages())
    0


== Unvalidated member postings ==

Similarly, an address that has been registered with Launchpad but not verified
will also be summarily discarded.  To demonstrate this, we'll add Anne as a
normal Launchpad user, but de-certify her alternative address.  This is
equivalent to making it unvalidated.

    >>> from canonical.launchpad.ftests.mailinglists_helper import (
    ...     get_alternative_email, new_person)
    >>> from canonical.database.sqlbase import commit
    >>> from canonical.launchpad.ftests import login, logout
    >>> login('foo.bar@canonical.com')
    >>> anne = new_person('Anne')
    >>> alternative_email = get_alternative_email(anne)
    >>> from canonical.launchpad.interfaces import EmailAddressStatus
    >>> alternative_email.status = EmailAddressStatus.NEW
    >>> commit()
    >>> print alternative_email.email, alternative_email.statusname
    aperson@example.org New Email Address

    >>> vette_watcher.resync()
    >>> inject('itest-one', """\
    ... From: aperson@example.org
    ... To: itest-one@lists.launchpad.dev
    ... Subject: A non-member post
    ... Message-ID: <second-injection>
    ...
    ... Hi, I am not a verified member of Launchpad (yet).
    ... """)
    >>> vette_watcher.wait()

As above, this message got summarily discarded.

    >>> len(smtpd.getMessages())
    0


== Unsubscribed Launchpad members ==

Since Anne's preferred email address is still validated, let's post this
message from that address.  However, because she has not yet joined the team
or subscribed to its mailing list, she still can't post to it.

    >>> print anne.preferredemail.email, anne.preferredemail.statusname
    anne.person@example.com Preferred Email Address
    >>> vette_watcher.resync()
    >>> inject('itest-one', """\
    ... From: anne.person@example.com
    ... To: itest-one@lists.launchpad.dev
    ... Subject: An unsubscribed post
    ... Message-ID: <third-injection>
    ...
    ... Hi, I am not a member of this team's list (yet).
    ... """)

    >>> vette_watcher.wait()
    >>> len(smtpd.getMessages())
    0

The message is held for team owner approval, both in Launchpad and in Mailman.

    >>> holds = itest_helper.pending_hold_ids('itest-one')
    >>> len(holds)
    1
    >>> itest_helper.print_mailman_hold('itest-one', holds[0])
    From: anne.person@example.com
    To: itest-one@lists.launchpad.dev
    Subject: An unsubscribed post
    Message-ID: <third-injection>
    <BLANKLINE>
    Hi, I am not a member of this team's list (yet).
    <BLANKLINE>
    
    >>> from canonical.launchpad.interfaces import IMessageSet
    >>> from zope.component import getUtility
    >>> messages = getUtility(IMessageSet).get('<third-injection>')
    >>> len(messages)
    1
    >>> print messages[0].text_contents
    Hi, I am not a member of this team's list (yet).
    <BLANKLINE>

The team administrator can accept or decline this posting.  By declining the
message, Launchpad forgets about it, but Mailman sends a rejection.

    >>> from canonical.launchpad.interfaces import (
    ...     IMessageApprovalSet, IPersonSet)
    >>> team_one = getUtility(IPersonSet).getByName('itest-one')
    >>> message_approval_set = getUtility(IMessageApprovalSet)
    >>> message_approval = message_approval_set.getMessageByMessageID(
    ...     '<third-injection>')
    >>> message_approval.status
    <DBItem PostedMessageStatus.NEW, (0) New status>

    >>> message_approval.reject(team_one.teamowner)
    >>> serial_watcher = itest_helper.LogWatcher('serial')
    >>> commit()
    >>> serial_watcher.wait()
    >>> message_approval = message_approval_set.getMessageByMessageID(
    ...     '<third-injection>')
    >>> message_approval.status
    <DBItem PostedMessageStatus.REJECTION, (0) New status>
    >>> holds = itest_helper.pending_hold_ids('itest-one')
    >>> len(holds)
    0


== Verified and registered member postings ==

Anne now joins the team and subscribes to the mailing list.  She can now post
to the mailing list.

    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> person_set = getUtility(IPersonSet)
    >>> team_one = person_set.getByName('itest-one')

    # Subscribe Anne with her preferred address.
    >>> anne.join(team_one)
    >>> list_one.subscribe(anne)
    >>> logout()
    >>> serial_watcher.resync()
    >>> commit()
    >>> serial_watcher.wait()

    >>> print anne.preferredemail.email, anne.preferredemail.statusname
    anne.person@example.com Preferred Email Address
    >>> smtpd.reset()
    >>> archive_watcher = itest_helper.LogWatcher('mhonarc')
    >>> smtp_watcher = itest_helper.LogWatcher('smtp')
    >>> inject('itest-one', """\
    ... From: anne.person@example.com
    ... To: itest-one@lists.launchpad.dev
    ... Subject: A member post
    ... Message-ID: <fifth-injection>
    ...
    ... Hi, I am now a member of this team's list!
    ... """)
    >>> smtp_watcher.wait()

Anne's message got posted to the mailing list.  Two copies were sent; one to
Anne herself as a member of the mailing list, and another to the
mail-archive.com archiving recipient.  These copies are very similar,
differing only in the headers used to do VERP bounce detection.

    >>> messages = smtpd.getMessages()
    >>> len(messages)
    2
    >>> from operator import itemgetter
    >>> messages.sort(key=itemgetter('sender'))

Here's the copy sent to Anne...

    >>> print messages[0].as_string()
    From: anne.person@example.com
    To: itest-one@lists.launchpad.dev
    Message-ID: <fifth-injection>
    Subject: [Itest-one] A member post
    ...
    Sender: itest-one-bounces+anne.person=example.com@lists.launchpad.dev
    Errors-To: itest-one-bounces+anne.person=example.com@lists.launchpad.dev
    Received: by smtp2mbox
    <BLANKLINE>
    Hi, I am now a member of this team's list!
    _______________________________________________
    Mailing list: http://launchpad.dev/~itest-one
    Post to     : itest-one@lists.launchpad.dev
    Unsubscribe : http://launchpad.dev/people/+me/+editemails
    More help   : http://help.launchpad.dev/ListHelp
    <BLANKLINE>
    <BLANKLINE>

...and the copy sent to the archives.

    >>> print messages[1].as_string()
    From: anne.person@example.com
    To: itest-one@lists.launchpad.dev
    Message-ID: <fifth-injection>
    Subject: [Itest-one] A member post
    ...
    Sender: itest-one-bounces+archive=mail-archive.com@lists.launchpad.dev
    Errors-To: itest-one-bounces+archive=mail-archive.com@lists.launchpad.dev
    Received: by smtp2mbox
    <BLANKLINE>
    Hi, I am now a member of this team's list!
    _______________________________________________
    Mailing list: http://launchpad.dev/~itest-one
    Post to     : itest-one@lists.launchpad.dev
    Unsubscribe : http://launchpad.dev/people/+me/+editemails
    More help   : http://help.launchpad.dev/ListHelp
    <BLANKLINE>
    <BLANKLINE>

In addition, the in-house MHonArc archiver has archived this message.

    >>> archive_watcher.wait()
    >>> from itest_helper import collect_archive_message_ids
    >>> collect_archive_message_ids('itest-one')
    ['fifth&#45;injection']

Anne cannot post from her alternative email address because it has not been
validated yet.

    >>> smtpd.reset()
    >>> vette_watcher.resync()
    >>> inject('itest-one', """\
    ... From: aperson@example.org
    ... To: itest-one@lists.launchpad.dev
    ... Subject: A non-member post
    ... Message-ID: <sixth-injection>
    ...
    ... Hi, I am not a verified member of this team (yet).
    ... """)

    >>> vette_watcher.wait()
    >>> len(smtpd.getMessages())
    0

However, once she validates this address, she can post from it.

    >>> alternative_email.status = EmailAddressStatus.VALIDATED
    >>> serial_watcher.resync()
    >>> commit()
    >>> serial_watcher.wait()

    >>> smtp_watcher.resync()
    >>> inject('itest-one', """\
    ... From: aperson@example.org
    ... To: itest-one@lists.launchpad.dev
    ... Subject: A member post
    ... Message-ID: <sixth-injection>
    ...
    ... Hi, I am now a verified member of this team!
    ... """)
    >>> smtp_watcher.wait()
    >>> messages = smtpd.getMessages()
    >>> len(messages)
    2
    >>> messages.sort(key=itemgetter('sender'))

    >>> print messages[0].as_string()
    From: aperson@example.org
    To: itest-one@lists.launchpad.dev
    Message-ID: <sixth-injection>
    Subject: [Itest-one] A member post
    ...
    Sender: itest-one-bounces+anne.person=example.com@lists.launchpad.dev
    Errors-To: itest-one-bounces+anne.person=example.com@lists.launchpad.dev
    Received: by smtp2mbox
    <BLANKLINE>
    Hi, I am now a verified member of this team!
    _______________________________________________
    Mailing list: http://launchpad.dev/~itest-one
    Post to     : itest-one@lists.launchpad.dev
    Unsubscribe : http://launchpad.dev/people/+me/+editemails
    More help   : http://help.launchpad.dev/ListHelp
    <BLANKLINE>
    <BLANKLINE>

    >>> print messages[1].as_string()
    From: aperson@example.org
    To: itest-one@lists.launchpad.dev
    Message-ID: <sixth-injection>
    Subject: [Itest-one] A member post
    ...
    Sender: itest-one-bounces+archive=mail-archive.com@lists.launchpad.dev
    Errors-To: itest-one-bounces+archive=mail-archive.com@lists.launchpad.dev
    Received: by smtp2mbox
    <BLANKLINE>
    Hi, I am now a verified member of this team!
    _______________________________________________
    Mailing list: http://launchpad.dev/~itest-one
    Post to     : itest-one@lists.launchpad.dev
    Unsubscribe : http://launchpad.dev/people/+me/+editemails
    More help   : http://help.launchpad.dev/ListHelp
    <BLANKLINE>
    <BLANKLINE>

There should also be no held requests pending.

    # Use a helper for complete safety.
    >>> itest_helper.num_requests_pending('itest-one')
    0


== Leaving and re-joining the team ==

Anne now leaves the team, but she does not unsubscribe from the mailing list.

    >>> login('foo.bar@canonical.com')
    >>> anne.leave(team_one)
    >>> logout()
    >>> serial_watcher.resync()
    >>> commit()
    >>> serial_watcher.wait()

Because she is not a team member, her message is discarded.

    >>> vette_watcher.resync()
    >>> smtpd.reset()
    >>> inject('itest-one', """\
    ... From: aperson@example.org
    ... To: itest-one@lists.launchpad.dev
    ... Subject: A non-team member post
    ... Message-ID: <eighth-injection>
    ...
    ... Hi, I am not a team member.
    ... """)
    >>> vette_watcher.wait()
    >>> len(smtpd.getMessages())
    0

Anne re-joins the team and once again can post to the mailing list.  She does
not need to re-subscribe to the mailing list.

    >>> login('foo.bar@canonical.com')
    >>> anne.join(team_one)
    >>> logout()
    >>> serial_watcher.resync()
    >>> commit()
    >>> serial_watcher.wait()

    >>> smtp_watcher.resync()
    >>> smtpd.reset()
    >>> inject('itest-one', """\
    ... From: aperson@example.org
    ... To: itest-one@lists.launchpad.dev
    ... Subject: A posting from a member once again
    ... Message-ID: <ninth-injection>
    ...
    ... Hi, I am a team member again!
    ... """)
    >>> smtp_watcher.wait()

    >>> messages = smtpd.getMessages()
    >>> len(messages)
    2
    >>> messages.sort(key=itemgetter('sender'))
    >>> for message in sorted(messages, key=itemgetter('sender')):
    ...     print message['sender']
    ...     print message['subject']
    itest-one-bounces+anne.person=example.com@lists.launchpad.dev
    [Itest-one] A posting from a member once again
    itest-one-bounces+archive=mail-archive.com@lists.launchpad.dev
    [Itest-one] A posting from a member once again


== First post moderation ==

Normally, Launchpad members who are not subscribed to the mailing list cannot
post to it.

    >>> login('foo.bar@canonical.com')
    >>> bart = new_person('Bart')
    >>> commit()
    >>> bart.personal_standing
    <DBItem PersonalStanding.UNKNOWN...

    >>> def print_message_summaries():
    ...     messages = sorted(smtpd.getMessages(), key=itemgetter('sender'))
    ...     print 'Number of messages:', len(messages)
    ...     for message in messages:
    ...         print message['sender']
    ...         print '   ', message['message-id']
    ...         print '   ', message['from']
    ...         print '   ', message['subject']

    >>> smtpd.reset()
    >>> vette_watcher.resync()
    >>> inject('itest-one', """\
    ... From: bperson@example.org
    ... To: itest-one@lists.launchpad.dev
    ... Subject: A non-member post
    ... Message-ID: <tenth-injection>
    ...
    ... Hi, I am not a member of the mailing list.
    ... """)
    >>> vette_watcher.wait()
    >>> print_message_summaries()
    Number of messages: 0

However, a Launchpad member in good standing is allowed to post to any mailing
list.

    >>> from canonical.launchpad.interfaces import PersonalStanding
    >>> login('foo.bar@canonical.com')
    >>> bart.personal_standing = PersonalStanding.GOOD
    >>> commit()

    >>> smtpd.reset()
    >>> inject('itest-one', """\
    ... From: bart.person@example.com
    ... To: itest-one@lists.launchpad.dev
    ... Subject: A member in good standing
    ... Message-ID: <eleventh-injection>
    ...
    ... Hi, I am a Launchpad member in good standing!
    ... """)
    >>> smtp_watcher.wait()
    >>> print_message_summaries()
    Number of messages: 2
    itest-one-bounces+anne.person=example.com@lists.launchpad.dev
        <eleventh-injection>
        bart.person@example.com
        [Itest-one] A member in good standing
    itest-one-bounces+archive=mail-archive.com@lists.launchpad.dev
        <eleventh-injection>
        bart.person@example.com
        [Itest-one] A member in good standing

A member in excellent standing can of course also post to the list.

    >>> bart.personal_standing = PersonalStanding.EXCELLENT
    >>> commit()

    >>> smtpd.reset()
    >>> inject('itest-one', """\
    ... From: bart.person@example.com
    ... To: itest-one@lists.launchpad.dev
    ... Subject: A member in excellent standing
    ... Message-ID: <twelfth-injection>
    ...
    ... Hi, I am a Launchpad member in excellent standing!
    ... """)
    >>> smtp_watcher.wait()
    >>> print_message_summaries()
    Number of messages: 2
    itest-one-bounces+anne.person=example.com@lists.launchpad.dev
        <twelfth-injection>
        bart.person@example.com
        [Itest-one] A member in excellent standing
    itest-one-bounces+archive=mail-archive.com@lists.launchpad.dev
        <twelfth-injection>
        bart.person@example.com
        [Itest-one] A member in excellent standing

But a person in poor standing may not post to the mailing list.

    >>> bart.personal_standing = PersonalStanding.POOR
    >>> commit()

    >>> smtpd.reset()
    >>> vette_watcher.resync()
    >>> inject('itest-one', """\
    ... From: bperson@example.org
    ... To: itest-one@lists.launchpad.dev
    ... Subject: A non-member post
    ... Message-ID: <thirteenth-injection>
    ...
    ... Hi, I am not a member of the mailing list.
    ... """)
    >>> vette_watcher.wait()
    >>> print_message_summaries()
    Number of messages: 0

    >>> logout()


== Preventing archiver forgeries ==

We archive messages by sending them to a special address owned by the Mail
Archive <http://www.mail-archive.com>.  This address becomes a recipient of
the mailing list, but we also prevent this address from being used to post
messages to the list.

    >>> from canonical.config import config
    >>> config.mailman.archive_address
    'archive@mail-archive.com'
    >>> smtpd.reset()
    >>> vette_watcher.resync()
    >>> inject('itest-one', """\
    ... From: %s
    ... To: itest-one@lists.launchpad.dev
    ... Subject: A forgery
    ... Message-ID: <seventh-injection>
    ...
    ... Hi, I am forging me some spam!
    ... """ % config.mailman.archive_address)

    >>> vette_watcher.wait()
    >>> len(smtpd.getMessages())
    0
