Displaying Information on Bugs and Bug Tasks
============================================

This document discusses TALES techniques and IBugTask object
attributes that may be useful to you, if you're writing some code to
display bug and bug task information.

Displaying an Icon with fmt:icon
--------------------------------

fmt:icon is a TALES adapter that renders an icon for a bugtask.
The icon is dependent on the importance of the IBugTask object.

Let's use a few examples to demonstrate:

  XXX: Brad Bollenbach, 2005-08-30: removeSecurityProxy usage in this
  test is a workaround for the following bug:

    https://launchpad.net/bugs/1971

  >>> from zope.security.proxy import removeSecurityProxy
  >>> from zope.component import getUtility
  >>> from canonical.launchpad.interfaces import IBugTaskSet
  >>> from canonical.launchpad.ftests import test_tales
  >>> from canonical.lp.dbschema import BugTaskImportance
  >>> from canonical.launchpad.ftests import login

  >>> login("foo.bar@canonical.com")
  >>> bugtaskset = getUtility(IBugTaskSet)
  >>> test_task = bugtaskset.get(4)
  >>> ORIGINAL_IMPORTANCE = test_task.importance

  >>> test_task.importance = BugTaskImportance.CRITICAL
  >>> test_tales("bugtask/fmt:icon", bugtask=test_task)
  '<img alt="(critical)" title="Critical importance" src="/@@/bug-critical" />'

  >>> test_task.importance = BugTaskImportance.HIGH
  >>> test_tales("bugtask/fmt:icon", bugtask=test_task)
  '<img alt="(high)" title="High importance" src="/@@/bug-high" />'

  >>> test_task.importance = BugTaskImportance.MEDIUM
  >>> test_tales("bugtask/fmt:icon", bugtask=test_task)
  '<img alt="(medium)" title="Medium importance" src="/@@/bug-medium" />'

  >>> test_task.importance = BugTaskImportance.LOW
  >>> test_tales("bugtask/fmt:icon", bugtask=test_task)
  '<img alt="(low)" title="Low importance" src="/@@/bug-low" />'

  >>> test_task.importance = BugTaskImportance.WISHLIST
  >>> test_tales("bugtask/fmt:icon", bugtask=test_task)
  '<img alt="(wishlist)" title="Wishlist" src="/@@/bug-wishlist" />'

  >>> test_task.importance = BugTaskImportance.UNDECIDED
  >>> test_tales("bugtask/fmt:icon", bugtask=test_task)
  '<img alt="(undecided)" title="Undecided" src="/@@/bug-undecided" />'

  >>> test_task.importance = ORIGINAL_IMPORTANCE


Displaying Status
-----------------

Sometimes it's useful to display the status of an IBugTask as a
human-readable string. So, instead of displaying something like:

  Status: Confirmed, Assignee: foo.bar@canonical.com

you might prefer that to read, simply:

  assigned to Foo Bar

Let's see some examples of how this works:

  >>> from canonical.launchpad.interfaces import ILaunchBag
  >>> from canonical.launchpad.browser.bugtask import render_bugtask_status
  >>> from canonical.lp.dbschema import BugTaskStatus
  >>> login("foo.bar@canonical.com")
  >>> foobar = getUtility(ILaunchBag).user

  >>> ORIGINAL_STATUS = test_task.status
  >>> ORIGINAL_ASSIGNEE = test_task.assignee

  >>> test_task.transitionToAssignee(None)
  >>> render_bugtask_status(test_task)
  'Confirmed (unassigned)'

  >>> test_task.transitionToAssignee(foobar)
  >>> test_task.transitionToStatus(BugTaskStatus.UNCONFIRMED)
  >>> render_bugtask_status(test_task)
  u'Unconfirmed, assigned to <img alt="" src="/@@/user" /> <a href=".../people/name16/+assignedbugs">Foo Bar</a>'

  >>> test_task.transitionToStatus(BugTaskStatus.CONFIRMED)
  >>> render_bugtask_status(test_task)
  u'Confirmed, assigned to <img alt="" src="/@@/user" /> <a href=".../people/name16/+assignedbugs">Foo Bar</a>'

  >>> test_task.transitionToStatus(BugTaskStatus.REJECTED)
  >>> render_bugtask_status(test_task)
  u'Rejected by <img alt="" src="/@@/user" /> <a href=".../people/name16/+assignedbugs">Foo Bar</a>'

  >>> test_task.transitionToAssignee(None)
  >>> render_bugtask_status(test_task)
  'Rejected (unassigned)'

  >>> test_task.transitionToStatus(BugTaskStatus.FIXRELEASED)
  >>> render_bugtask_status(test_task)
  'Fix released (unassigned)'

  >>> test_task.transitionToAssignee(foobar)
  >>> render_bugtask_status(test_task)
  u'Fix released, assigned to <img alt="" src="/@@/user" /> <a href="/people/name16/+assignedbugs">Foo Bar</a>'

This code also works for null bug tasks:

  >>> from canonical.launchpad.browser.bugtask import render_bugtask_status
  >>> from canonical.launchpad.components.bugtask import NullBugTask
  >>> from canonical.launchpad.database import Bug, Product
  >>> bug_one = Bug.get(1)
  >>> netapplet = Product.selectOneBy(name="netapplet")
  >>> null_bugtask = NullBugTask(bug=bug_one, product=netapplet)
  >>> render_bugtask_status(null_bugtask)
  u'Not reported in netapplet (upstream)'

Lastly, some cleanup:

  >>> test_task.transitionToStatus(ORIGINAL_STATUS)
  >>> test_task.transitionToAssignee(ORIGINAL_ASSIGNEE)

Status Elsewhere
----------------

It's often useful to present information about the status of a bug in
other contexts. IBugTask.statuselsewhere provides a human-readable
string containing such information.

The main questions of interest, in order, are:

  1. Has this bug been fixed elsewhere?

  2. Has this bug been reported elsewhere?

Let's see some examples:

  >>> bugtaskset.get(13).statuselsewhere
  'not filed elsewhere'

  >>> bugtaskset.get(2).statuselsewhere
  'filed in 2 other places'

  >>> bugtaskset.get(3).statuselsewhere
  'filed in 3 other places'

Let's take a random task related to task 2, mark it Fixed, and see how the
statuselsewhere value is affected:

  >>> related_task = bugtaskset.get(2).related_tasks[0]
  >>> ORIGINAL_STATUS = related_task.status
  >>> related_task.transitionToStatus(BugTaskStatus.FIXRELEASED)

  >>> bugtaskset.get(2).statuselsewhere
  'fixed in 1 of 3 places'

  >>> related_task.transitionToStatus(ORIGINAL_STATUS)

Null tasks are also supported:

  >>> null_bugtask.statuselsewhere
  'filed in 3 other places'

