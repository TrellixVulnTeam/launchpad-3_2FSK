Sprints / Meetings
==================

Sprints or meetings can be coordinated using Launchpad.

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.interfaces import (
    ...     ISprintSet, IPersonSet)
    >>> sprintset = getUtility(ISprintSet)

To find a sprint by name, use:

    >>> ubz = sprintset["gentoo"]

The major pillars, product, distribution and project, can all provide a
listing of up to 5 relevant events that are up-and-coming:

    >>> from canonical.launchpad.interfaces import (
    ...     IProductSet, IProjectSet, IDistributionSet)
    >>> productset = getUtility(IProductSet)
    >>> projectset = getUtility(IProjectSet)
    >>> distroset = getUtility(IDistributionSet)
    >>> firefox = productset.getByName('firefox')
    >>> for e in firefox.coming_sprints: print e.name
    futurista
    >>> ubuntu = distroset.getByName('ubuntu')
    >>> for e in ubuntu.coming_sprints: print e.name
    futurista
    >>> mozilla = projectset.getByName('mozilla')
    >>> for e in mozilla.coming_sprints: print e.name
    futurista


Specification Listings
======================

We should be able to get lists of specifications in different states
related to a sprint.

Basically, we can filter by completeness, and by whether or not the spec is
informational.

 >>> ubz = sprintset["ubz"]

 >>> from canonical.lp.dbschema import SpecificationFilter


First, there should be no informational specs for ubz:

 >>> filter = [SpecificationFilter.INFORMATIONAL]
 >>> ubz.specifications(filter=filter).count()
 1


There are 0 completed specs for UBZ:

 >>> filter = [SpecificationFilter.COMPLETE]
 >>> ubz.specifications(filter=filter).count()
 0


And there are three incomplete specs:

 >>> filter = [SpecificationFilter.INCOMPLETE]
 >>> for spec in ubz.specifications(filter=filter):
 ...    print spec.name, spec.is_complete
 svg-support False
 extension-manager-upgrades False
 e4x False


If we ask for all specs, we get them in the order of priority.

 >>> filter = [SpecificationFilter.ALL]
 >>> for spec in ubz.specifications(filter=filter):
 ...    print spec.priority.title, spec.name
 High svg-support
 Medium extension-manager-upgrades
 Not e4x


And if we ask just for specs, we get them all

 >>> for spec in ubz.specifications():
 ...     print spec.name, spec.is_complete
 svg-support False
 extension-manager-upgrades False
 e4x False


Inactive products are excluded from the listings.

 >>> from canonical.database.sqlbase import flush_database_updates
 >>> from canonical.launchpad.interfaces import IProductSet
 >>> from canonical.launchpad.ftests import login
 >>> firefox = getUtility(IProductSet).getByName('firefox')
 >>> login("foo.bar@canonical.com")
 >>> firefox.active = False
 >>> flush_database_updates()
 >>> ubz.specifications().count()
 0

Reset firefox so we don't mess up later tests.

 >>> firefox.active = True
 >>> flush_database_updates()

