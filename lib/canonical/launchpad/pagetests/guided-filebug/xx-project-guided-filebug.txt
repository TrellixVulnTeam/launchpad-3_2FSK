= Filing bugs on Projects =

Even though it's not possible to file bugs against projects directly,
it's still possible to file a bug from a project's main page.

    >>> user_browser.open('http://launchpad.dev/gnome')
    >>> user_browser.getLink(url='+filebug').click()
    >>> user_browser.url
    'http://launchpad.dev/gnome/+filebug'

The Project filebug page is like a Product's filebug page, except that
it also asks for a Product. Only Products that are using Bugs are
shown in the list of options.

    >>> user_browser.getControl('Project').options
    ['evolution']

After we selected a product and entered a summary, we get presented with
a list of possible duplicates.

    >>> user_browser.getControl('Project').value = ['evolution']
    >>> user_browser.getControl('Summary').value = 'Evolution crashes'
    >>> user_browser.getControl('Continue').click()

    >>> for message in find_tags_by_class(user_browser.contents, 'message'):
    ...     print message.renderContents()
    No similar bugs were found.

Entering a description and submitting the bug takes the user to the bug
page.

    >>> user_browser.getControl('Further information').value = 'Crash.'
    >>> user_browser.getControl('Submit Bug Report').click()
    >>> user_browser.url
    'http://bugs.launchpad.dev/evolution/+bug/...'
    >>> user_browser.title
    'Bug #... in Evolution: ...Evolution crashes...'


== Advanced filebug page ==

From the Project filebug page it's possible to go to the advanced
filebug page.

    >>> user_browser.open('http://launchpad.dev/gnome')
    >>> user_browser.getLink(url='+filebug').click()
    >>> user_browser.getLink('complicated bug filing form').click()
    >>> user_browser.url
    'http://launchpad.dev/gnome/+filebug-advanced'

    >>> user_browser.getControl('Project').value = ['evolution']
    >>> user_browser.getControl('Summary').value = 'Evolution crashes lots'
    >>> user_browser.getControl('Further information').value = 'Crash.'
    >>> user_browser.getControl('Submit Bug Report').click()
    >>> user_browser.url
    'http://bugs.launchpad.dev/evolution/+bug/...'
    >>> user_browser.title
    'Bug #... in Evolution: ...Evolution crashes...'


== Subscribing to a similar bug ==

If our bug is described by one of the suggested similar bugs, we can
subscribe to it instead of filing a new bug. This also loosely implies
a "me too" vote.

    >>> user_browser.open("http://bugs.launchpad.dev/gnome/+filebug")
    >>> user_browser.getControl('Project').value = ['evolution']
    >>> user_browser.getControl('Summary').value = 'Evolution crashes'
    >>> user_browser.getControl('Continue').click()

As before, we get a list of similar bugs to choose from, including the
bugs we filed recently.

    >>> from canonical.launchpad.ftests.bug import print_bugs_list
    >>> print_bugs_list(user_browser.contents, "similar-bugs")
    #... Evolution crashes
    New, last updated ...
    #... Evolution crashes lots
    New, last updated ...

This one matches, so we subscribe.

    >>> user_browser.getControl(
    ...     label='Evolution crashes lots').selected = True
    >>> user_browser.getControl('Subscribe to This Bug').click()

    >>> print user_browser.url
    http://bugs.launchpad.dev/evolution/+bug/...

But, of course, we're already subscribed because we created it.

    >>> for message in get_feedback_messages(user_browser):
    ...     print message
    You are already subscribed to this bug.


== Filing a bug when there are none similar ==

When no similar bugs are found the form works the same but appears
different in the user agent.

    >>> user_browser.open("http://launchpad.dev/gnome/+filebug")

Submitting some distinctive details...

    >>> user_browser.getControl('Project').value = ['evolution']
    >>> user_browser.getControl('Summary').value = (
    ...     'Faznambutron dumps core unless clenching')
    >>> user_browser.getControl('Continue').click()

...yields no similar bugs. In fact, the similar bugs table is not even
shown.

    >>> similar_bugs_list = find_tag_by_id(
    ...     user_browser.contents, "similar-bugs")
    >>> print similar_bugs_list
    None

But, as before, entering a description and submitting the bug takes
the user to the bug page.

    >>> user_browser.getControl('Further information').value = (
    ...     'Faznambutron is a plugin designed to ...')
    >>> user_browser.getControl('Submit Bug Report').click()
    >>> user_browser.url
    'http://bugs.launchpad.dev/evolution/+bug/...'
    >>> user_browser.title
    'Bug #... in Evolution: ...Faznambutron dumps core...'


== Empty Projects ==

It isn't possible to file a bug against an empty project. However, we give the
user some feedback in this regard. We need to create a new project first.

    >>> admin_browser.open('http://launchpad.dev/projectgroups/+new')
    >>> admin_browser.getControl('Name:', index=0).value = 'test-group'
    >>> admin_browser.getControl('Display Name:').value = 'Test Group'
    >>> admin_browser.getControl('Title:').value = 'Test Group'
    >>> admin_browser.getControl('Project Group Summary:').value = 'Summary'
    >>> admin_browser.getControl('Description:').value = 'Description'
    >>> admin_browser.getControl('Add').click()
    >>> admin_browser.url
    'http://launchpad.dev/test-group'

A user navigating to the filebug page will see an information message. The
user can only get to the filebug page by entering its URL directly because all
links to the page are disabled for empty project groups. Since there are users
who would navigate to the page in that manner we test it here.

    >>> user_browser.open('http://launchpad.dev/test-group/+filebug')
    >>> user_browser.url
    'http://launchpad.dev/test-group/+filebug'

    >>> for message in find_tags_by_class(user_browser.contents,
    ...     'informational message'):
    ...     print message.renderContents()
    There are no projects registered for Test Group that use Launchpad to
    track bugs.

If the project registrant visits the filebug page they will see an additional
message:

    >>> admin_browser.open('http://launchpad.dev/test-group/+filebug')

    >>> for message in find_tags_by_class(admin_browser.contents,
    ...     'warning message'):
    ...     print message.renderContents()
    There are no projects registered for Test Group. <br />
    You need to <a href="+newproduct">register another project that is
    part of Test Group</a> or associate an existing project with it.


== Projects With no Products Using Launchpad Bugs ==

If we add a new product to our test project (specifically one that doesn't use
Launchpad for bug tracking) information about that product will also be
displayed.

    >>> admin_browser.open('http://launchpad.dev/test-group/+newproduct')
    >>> admin_browser.getControl('Name:', index=0).value = 'testy'
    >>> admin_browser.getControl('Display Name:').value = 'Testy Product'
    >>> admin_browser.getControl('Title:').value = 'A Product for Testing'
    >>> admin_browser.getControl('Summary:').value = 'Used for testing'
    >>> admin_browser.getControl('Add').click()
    >>> admin_browser.url
    'http://launchpad.dev/testy'

The user will now see the new product on the project's +filebug page, but will
not be able to file a bug against it.

    >>> user_browser.reload()
    >>> for message in find_tags_by_class(user_browser.contents, 
    ...     'informational message'):
    ...     print message.renderContents()
    There are no projects registered for Test Group that use Launchpad to
    track bugs.

Testy Product doesn't use define an external bug tracker and isn't registered
in any source packages and the user is told this.

    >>> print extract_text(find_tag_by_id(user_browser.contents,
    ...     'product-list-summary'))
    There is 1 project registered as part of Test Group but it does not use
    Launchpad as its bug tracker.

    >>> for tag in find_tags_by_class(
    ...     user_browser.contents, 'product-bug-options'):
    ...     print extract_text(tag)
    Testy Product
    Testy Product does not use an external bug tracker or has not registered
    it with launchpad.
    Testy Product is not registered with any source packages. You can help by
    linking them for us.

The user will also be presented with a link to the product's overview page:

    >>> user_browser.getLink('Testy Product').url
    'http://launchpad.dev/testy'

If we set up an external bug tracker for Testy Product, this will be reflected
in the Test Group's filebug page.

    >>> admin_browser.open('http://launchpad.dev/testy/+launchpad')
    >>> admin_browser.getControl(name='field.bugtracker').value = ['external']
    >>> admin_browser.getControl(
    ...     name='field.bugtracker.bugtracker').value = ['3']
    >>> admin_browser.getControl('Change').click()

And on the filebug page...

    >>> user_browser.reload()
    >>> print extract_text(find_tag_by_id(user_browser.contents,
    ...     'product-list-summary'))
    There is 1 project registered as part of Test Group but it does not use
    Launchpad as its bug tracker.

    >>> for tag in find_tags_by_class(
    ...     user_browser.contents, 'product-bug-options'):
    ...     print extract_text(tag)
    Testy Product
    External bug tracker: Debian Bug tracker.
    Testy Product is not registered with any source packages. You can help by
    linking them for us.

Finally, we add Testy Product to a source package:

    >>> admin_browser.open('http://bugs.launchpad.dev/testy/trunk/+ubuntupkg')
    >>> admin_browser.getControl(name='ubuntupkg').value = 'thunderbird'
    >>> admin_browser.getControl('Update').click()

And this is also shown on the filebug page:

    >>> user_browser.reload()
    >>> user_browser.reload()
    >>> print extract_text(find_tag_by_id(user_browser.contents,
    ...     'product-list-summary'))
    There is 1 project registered as part of Test Group but it does not use
    Launchpad as its bug tracker.

    >>> for tag in find_tags_by_class(
    ...     user_browser.contents, 'product-bug-options'):
    ...     print extract_text(tag)
    Testy Product
    External bug tracker: Debian Bug tracker.
    Source package: Ubuntu thunderbird (File a bug here)

We should be able to follow the link to the Ubuntu thunderbird source package
to file a bug:

    >>> user_browser.getLink('File a bug here').click()
    >>> user_browser.url
    'http://launchpad.dev/ubuntu/+source/thunderbird/+filebug'

If we add a second product to the project, this too will be shown on the
filebug page:

    >>> admin_browser.open('http://launchpad.dev/test-group/+newproduct')
    >>> admin_browser.getControl('Name:', index=0).value = 'second-test'
    >>> admin_browser.getControl('Display Name:').value = 'Another product'
    >>> admin_browser.getControl('Title:').value = 'For Testing'
    >>> admin_browser.getControl('Summary:').value = 'Used for testing'
    >>> admin_browser.getControl('Add').click()
    >>> admin_browser.url
    'http://launchpad.dev/second-test'

    >>> user_browser.open('http://launchpad.dev/test-group/+filebug')
    >>> print extract_text(find_tag_by_id(user_browser.contents,
    ...     'product-list-summary'))
    There are 2 projects registered as part of Test Group but none of them use
    Launchpad as their bug tracker.

    >>> for tag in find_tags_by_class(
    ...     user_browser.contents, 'product-bug-options'):
    ...     print extract_text(tag)
    Another product
    Another product does not use an external bug tracker or has not registered
    it with launchpad.
    Another product is not registered with any source packages. You can help
    by linking them for us.
    Testy Product
    External bug tracker: Debian Bug tracker.
    Source package: Ubuntu thunderbird (File a bug here)
