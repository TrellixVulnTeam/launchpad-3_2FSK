= Person's wikinames =

A person can have any number of WikiNames registered in Launchpad, and
they can be managed on the +editwikinames page.

    # A helper function for printing all wikinames of a person.
    >>> import re
    >>> def print_existing_wikinames(contents):
    ...     soup = find_main_content(contents)
    ...     wiki_url_inputs = soup.findAll(
    ...         'input', attrs={'name': re.compile(r'wiki_\d+')})
    ...     wiki_urls = [input['value'] for input in wiki_url_inputs]
    ...     wiki_name_inputs = soup.findAll(
    ...         'input', attrs={'name': re.compile(r'wikiname_\d+')})
    ...     wiki_names = [input['value'] for input in wiki_name_inputs]
    ...     print zip(wiki_urls, wiki_names)

Mark already has one WikiName registered.

    >>> browser.addHeader('Authorization', 'Basic mark@hbd.com:test')
    >>> browser.open('http://localhost/~sabdfl/+editwikinames')
    >>> print_existing_wikinames(browser.contents)
    [(u'https://wiki.ubuntu.com/', u'MarkShuttleworth')]

But he wants to register another one.

    >>> browser.getControl(name='newwiki').value = 'http://foo.bar/wiki/'
    >>> browser.getControl(name='newwikiname').value = 'FooBar'
    >>> browser.getControl('Save Changes').click()
    >>> browser.url
    'http://localhost/~sabdfl/+editwikinames'
    >>> print_existing_wikinames(browser.contents)
    [(u'https://wiki.ubuntu.com/', u'MarkShuttleworth'),
     (u'http://foo.bar/wiki/', u'FooBar')]

He can't have two identical wiki names, though.

    >>> browser.getControl(name='newwiki').value = 'http://foo.bar/wiki/'
    >>> browser.getControl(name='newwikiname').value = 'FooBar'
    >>> browser.getControl('Save Changes').click()
    >>> browser.url
    'http://localhost/~sabdfl/+editwikinames'
    >>> for message in find_tags_by_class(browser.contents, 'message'):
    ...     print message.renderContents()
    The WikiName http://foo.bar/wiki/FooBar already belongs to you.

Nor can he have a WikiName that is already registered in Launchpad.

    >>> browser.getControl(name='newwiki').value = 'https://wiki.ubuntu.com/'
    >>> browser.getControl(name='newwikiname').value = 'GuilhermeSalgado'
    >>> browser.getControl('Save Changes').click()
    >>> browser.url
    'http://localhost/~sabdfl/+editwikinames'
    >>> print "\n".join(get_feedback_messages(browser.contents))
    The WikiName https://wiki.ubuntu.com/GuilhermeSalgado is already
    registered by Guilherme Salgado.

A WikiName's URL can't be empty nor invalid.

    >>> browser.getControl(name='newwiki').value = ''
    >>> browser.getControl(name='newwikiname').value = 'FooBar'
    >>> browser.getControl('Save Changes').click()
    >>> browser.url
    'http://localhost/~sabdfl/+editwikinames'
    >>> print "\n".join(get_feedback_messages(browser.contents))
    Neither Wiki nor WikiName can be empty.

    >>> browser.getControl(name='newwiki').value = '/this-is-not-a-url/'
    >>> browser.getControl(name='newwikiname').value = 'FooBar'
    >>> browser.getControl('Save Changes').click()
    >>> browser.url
    'http://localhost/~sabdfl/+editwikinames'
    >>> print "\n".join(get_feedback_messages(browser.contents))
    "/this-is-not-a-url/" is not a valid URL.

Only http and https URLs are allowed for wikis.

    >>> browser.getControl(name='newwiki').value = "javascript:void"
    >>> browser.getControl(name='newwikiname').value = 'FooBar'
    >>> browser.getControl('Save Changes').click()
    >>> browser.url
    'http://localhost/~sabdfl/+editwikinames'
    >>> print "\n".join(get_feedback_messages(browser.contents))
    The URL scheme "javascript" is not allowed. Only http or https URLs may be
    used.

Mark can remove any of his wiki names, and here he'll remove the one he
just added.

    >>> browser.getControl('Remove', index=1).selected = True
    >>> browser.getControl('Save Changes').click()
    >>> browser.url
    'http://localhost/~sabdfl/+editwikinames'
    >>> print_existing_wikinames(browser.contents)
    [(u'https://wiki.ubuntu.com/', u'MarkShuttleworth')]
