= ExternalBugTracker: RT =

This covers the implementation of an ExternalBugTracker class for RT
instances.


== Basics ==

When importing bugs from remote RT instances, we use an RT-specific
implementation of ExternalBugTracker, RequestTracker.

    >>> from canonical.launchpad.components.externalbugtracker import (
    ...     RequestTracker)
    >>> from canonical.launchpad.interfaces import (
    ...     BugTrackerType, IExternalBugTracker)
    >>> from canonical.launchpad.ftests.externalbugtracker import (
    ...     new_bugtracker)
    >>> from canonical.launchpad.webapp.testing import verifyObject
    >>> verifyObject(
    ...     IExternalBugTracker,
    ...     RequestTracker(new_bugtracker(BugTrackerType.RT)))
    True


== Status Conversion ==

The RequestTracker class can convert the default RT ticket statuses into
Launchpad statuses:

    >>> rt = RequestTracker(new_bugtracker(BugTrackerType.RT))
    >>> rt.convertRemoteStatus('new').title
    'New'
    >>> rt.convertRemoteStatus('open').title
    'Confirmed'
    >>> rt.convertRemoteStatus('stalled').title
    'In Progress'
    >>> rt.convertRemoteStatus('rejected').title
    'Invalid'
    >>> rt.convertRemoteStatus('resolved').title
    'Fix Released'

Passing a status which the RequestTracker instance can't understand will
result in a status of 'Unknown' being returned:

    >>> rt.convertRemoteStatus('spam').title
    WARNING:...:Unknown status 'spam'.
    'Unknown'


== Initialisation ==

Calling initializeRemoteBugDB() on our RequestTracker instance and
passing it a set of remote bug IDs will fetch those bug IDs from the
server and file them in a local variable for later use.

We use a test-oriented implementation of RequestTracker for the purposes
of these tests, which allows us to not rely on a working network
connection.

    >>> from canonical.launchpad.ftests.externalbugtracker import (
    ...     TestRequestTracker)
    >>> rt = TestRequestTracker(new_bugtracker(BugTrackerType.RT))
    >>> rt.initializeRemoteBugDB([1585, 1586, 1587, 1588, 1589])
    >>> sorted(rt.bugs.keys())
    [1585, 1586, 1587, 1588, 1589]


== Export Methods ==

There are two means by which we can export RT bug statuses: on a
bug-by-bug basis and as a batch. When the number of bugs that need
updating is less than a given bug RT instances's batch_query_threshold
the bugs will be fetched one-at-a-time:

    >>> rt.batch_query_threshold
    10

    >>> rt.trace_calls = True
    >>> rt.initializeRemoteBugDB([1585, 1586, 1587, 1588, 1589])
    CALLED urlopen(u'REST/1.0/ticket/1585/show')
    CALLED urlopen(u'REST/1.0/ticket/1586/show')
    CALLED urlopen(u'REST/1.0/ticket/1587/show')
    CALLED urlopen(u'REST/1.0/ticket/1588/show')
    CALLED urlopen(u'REST/1.0/ticket/1589/show')

    >>> sorted(rt.bugs.keys())
    [1585, 1586, 1587, 1588, 1589]

If there are more than batch_query_threshold bugs to update then they are
fetched as a batch:

    >>> rt.batch_query_threshold = 4
    >>> rt.initializeRemoteBugDB([1585, 1586, 1587, 1588, 1589])
    CALLED urlopen(u'REST/1.0/search/ticket/')

    >>> sorted(rt.bugs.keys())
    [1585, 1586, 1587, 1588, 1589]


== Updating Bug Watches ==

First, we create some bug watches to test with. Example.com hosts an RT
instance which has several bugs that we wish to watch:

    >>> from canonical.launchpad.interfaces import (
    ...     IBugSet, IBugWatchSet, IPersonSet)
    >>> from canonical.launchpad.ftests.externalbugtracker import (
    ...     print_bugwatches)

Launchpad.dev bug #10 is the same bug as reported in example.com bug
#1585, so we add a watch against the remote bug.

    >>> example_bug_tracker = new_bugtracker(BugTrackerType.RT)
    >>> example_bug = getUtility(IBugSet).get(10)
    >>> sample_person = getUtility(IPersonSet).getByEmail(
    ...     'test@canonical.com')
    >>> example_bugwatch = example_bug.addWatch(
    ...     example_bug_tracker, 1585, sample_person)

    >>> print_bugwatches(example_bug_tracker.watches)
    Remote bug 1585: None

Our RequestTracker ExternalBugTracker can now process, and retrieve a
remote status for, the bug watch that we have created.

    >>> rt = TestRequestTracker(example_bug_tracker)
    >>> rt.updateBugWatches(example_bug_tracker.watches)
    INFO:...:Updating 1 watches on http://bugs.some.where

    >>> print_bugwatches(example_bug_tracker.watches)
    Remote bug 1585: new

We now add some more watches against remote bugs in the example.com bug
tracker with a variety of statuses.

    >>> from canonical.launchpad.interfaces import IBugSet, IBugWatchSet
    >>> print_bugwatches(example_bug_tracker.watches,
    ...     rt.convertRemoteStatus)
    Remote bug 1585: New

    >>> remote_bugs = [
    ...     1586,
    ...     1587,
    ...     1588,
    ...     1589,
    ... ]

    >>> bug_watch_set = getUtility(IBugWatchSet)
    >>> for remote_bug_id in remote_bugs:
    ...     bug_watch = bug_watch_set.createBugWatch(
    ...         bug=example_bug, owner=sample_person,
    ...         bugtracker=example_bug_tracker,
    ...         remotebug=str(remote_bug_id))

    >>> rt.trace_calls = True
    >>> rt.updateBugWatches(example_bug_tracker.watches)
    INFO:...:Updating 5 watches on http://bugs.some.where
    CALLED urlopen(u'REST/1.0/ticket/1585/show')
    CALLED urlopen(u'REST/1.0/ticket/1586/show')
    CALLED urlopen(u'REST/1.0/ticket/1587/show')
    CALLED urlopen(u'REST/1.0/ticket/1588/show')
    CALLED urlopen(u'REST/1.0/ticket/1589/show')

The bug statuses have now been imported from the Example.com bug
tracker, so the bug watches should now have valid Launchpad bug
statuses:

    >>> print_bugwatches(example_bug_tracker.watches,
    ...     rt.convertRemoteStatus)
    Remote bug 1585: New
    Remote bug 1586: Confirmed
    Remote bug 1587: In Progress
    Remote bug 1588: Fix Released
    Remote bug 1589: Invalid
