= Milestones =

A milestone is a significant event in a project. In Malone, milestones can be
defined to assign bug fixes to a specific release of some software.

This document is about milestones in Malone.


== Working with Milestones in Malone ==

All Milestone creation and retrieval is done through IMilestoneSet.
IMilestoneSet can be accessed as a utility.

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.interfaces import IMilestoneSet
    >>> milestoneset = getUtility(IMilestoneSet)

To retrieve all milestones, iterate over an IMilestoneSet object:

    >>> sorted(ms.id for ms in milestoneset)
    [1, 2, 3]

To create a new Milestone, use the .newMilestone(name, dateexpected=None)
method of a ProductSeries or DistroSeries:

    >>> from canonical.launchpad.interfaces import IProductSet
    >>> productset = getUtility(IProductSet)
    >>> upstream_firefox = productset.get(4)
    >>> ff_onedotzero = upstream_firefox.getSeries('1.0')
    >>> firefox_ms = ff_onedotzero.newMilestone(name = "1.0rc1")
    >>> print firefox_ms.name
    1.0rc1

To retrieve a specific Milestone, use IMilestoneSet.get:

    >>> firefox_ms_1_0 = milestoneset.get(1)
    >>> print firefox_ms_1_0.name
    1.0
    >>> print firefox_ms_1_0.displayname
    Mozilla Firefox: 1.0

Of course, you can also get them off a Product or Distribution using
the getMilestone() method:

    >>> ms = upstream_firefox.getMilestone('1.0rc1')
    >>> print ms.name
    1.0rc1

Trying to retrieve a milestone that does not exist from a product will
return None:

    >>> non_ms = upstream_firefox.getMilestone('0.99x1')
    >>> print non_ms
    None

Now, lets test all of that for DistroSeriess too!

    >>> from canonical.launchpad.interfaces import IDistributionSet
    >>> kubuntu = getUtility(IDistributionSet).getByName('kubuntu')
    >>> krunch = kubuntu.getSeries('krunch')
    >>> new_ms = krunch.newMilestone('1.3rc2')
    >>> print new_ms.name
    1.3rc2
    >>> print new_ms.distribution.name
    kubuntu
    >>> print new_ms.distroseries.name
    krunch
    >>> print kubuntu.getMilestone('foo2.3')
    None
    >>> print kubuntu.getMilestone('1.3rc2').dateexpected
    None

Trying to retrieve a milestone that doesn't exist will raise a
zope.exceptions.NotFoundError:

    >>> milestoneset.get(-1)
    Traceback (most recent call last):
      ...
    NotFoundError: 'Milestone with ID -1 does not exist'


== Project Milestones ==

The database associates milestones only with products and distroserieses.
The interface IProjectMilestone provides a virtual view of milestones
that are related to a project by collecting all milestones that are 
associated with products that belong to a project. 

The class ProjectMilestone collects the milestone names from products that
belong to one project and creates virtual milestones for each distinct
name.

project.all_milestones returns all milestones for this project. No product
belonging to the Gnome project has any milestones, hence Gnome itself has
neither any milestones.

    >>> from canonical.launchpad.interfaces import IProjectSet
    >>> gnome = getUtility(IProjectSet)['gnome']
    >>> for product in gnome.products:
    ...     print product.name, list(product.all_milestones)
    applets []
    evolution []
    gnome-terminal []
    gnomebaker []
    netapplet []
    >>> print gnome.all_milestones
    []

When a milestone for a product is defined, this milestone is "inherited"
by the project.

    >>> from canonical.launchpad.ftests.test_project_milestone import (
    ...     ProjectMilestoneTest)
    >>> test_helper = ProjectMilestoneTest(helper_only=True)
    >>> evolution_1_1 = test_helper.createProductMilestone(
    ...     '1.1', 'evolution', date_expected=None)
    >>> evolution = productset['evolution']
    >>> print [milestone.name for milestone in evolution.all_milestones]
    [u'1.1']
    >>> print [milestone.name for milestone in gnome.all_milestones]
    [u'1.1']

Adding a milestone with the same name to another Gnome product does not
increase the number of Gnome milestones.

    >>> applets_1_1 = test_helper.createProductMilestone(
    ...     '1.1', 'applets', date_expected=None)
    >>> applets = productset['applets']
    >>> print [milestone.name for milestone in applets.all_milestones]
    [u'1.1']
    >>> print [milestone.name for milestone in gnome.all_milestones]
    [u'1.1']
    
Since project milestones are generated from the names of the product
milestones, milestone names with typos like '1.1.' instead of '1.1' will
appear as separate project milestones.

    >>> netapplet_1_1 = test_helper.createProductMilestone(
    ...     '1.1.', 'netapplet', date_expected=None)
    >>> netapplet = productset['netapplet']
    >>> print [milestone.name for milestone in netapplet.all_milestones]
    [u'1.1.']
    >>> print [milestone.name for milestone in gnome.all_milestones]
    [u'1.1', u'1.1.']

A project milestone is visible, if at least one product milestone with the
same name is visible.

    >>> from canonical.launchpad.ftests import syncUpdate
    >>> print applets_1_1.visible, evolution_1_1.visible
    True True
    >>> print gnome.getMilestone('1.1').visible
    True
    >>> login('foo.bar@canonical.com')
    >>> applets_1_1.visible = False
    >>> syncUpdate(applets_1_1)
    >>> print gnome.getMilestone('1.1').visible
    True
    >>> evolution_1_1.visible = False
    >>> syncUpdate(evolution_1_1)
    >>> print gnome.getMilestone('1.1').visible
    False

The dateexpected attribute is set to the minimum of the dateexpected values
of the product milestones.

    >>> print applets_1_1.dateexpected, evolution_1_1.dateexpected
    None None
    >>> print gnome.getMilestone('1.1').dateexpected
    None
    >>> from datetime import datetime
    >>> applets_1_1.dateexpected = datetime(2007, 4, 2)
    >>> syncUpdate(applets_1_1)
    >>> print gnome.getMilestone('1.1').dateexpected
    2007-04-02 00:00:00
    >>> evolution_1_1.dateexpected = datetime(2007, 4, 1)
    >>> syncUpdate(evolution_1_1)
    >>> print gnome.getMilestone('1.1').dateexpected
    2007-04-01 00:00:00

All bugtasks that are associated with a product milestone are also associated
with the project milestone of the same name. For details, see
bugtask-search.txt

All specifications that are associated with a product milestone are also
associated with the project milestone of the same name. No product of the
Gnome project has yet any specifications.

    >>> for product in gnome.products:
    ...     print product.name, list(product.all_specifications)
    applets []
    evolution []
    gnome-terminal []
    gnomebaker []
    netapplet []
    >>> print list(gnome.getMilestone('1.1').specifications)
    []

When a specification for a product is created and assigned to a product
milestone, it is "inheritied" by the project milestone.

    >>> spec = test_helper.createSpecification('1.1', 'applets')
    >>> [spec.name for spec in applets.all_specifications]
    [u'applets-specification']
    >>> [spec.name for spec in gnome.getMilestone('1.1').specifications]
    [u'applets-specification']
