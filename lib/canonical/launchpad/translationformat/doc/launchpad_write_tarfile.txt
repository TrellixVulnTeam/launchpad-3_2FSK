LaunchpadWriteTarFile is a helper class to make .tar.gz generation
easy.

    >>> from StringIO import StringIO
    >>> from canonical.launchpad.translationformat.translation_export import (
    ...     LaunchpadWriteTarFile)

    # First, define a function we are going to use:
    >>> def examine_tarfile(tarfile):
    ...     names = tarfile.getnames()
    ...     # Calculate the length of the longest name.
    ...     max_length = len(sorted(names, key=len)[-1])
    ...     # Use this length to generate an appropriate format string.
    ...     format = '%%-%ds | %%s' % max_length
    ...
    ...     for name in names:
    ...         file = tarfile.extractfile(name)
    ...
    ...         if file is not None:
    ...             print format % (name, file.read())
    ...         else:
    ...             print format % (name, '')

    # Start off by creating a blank archive.
    # We'll need a filehandle to store it in.
    >>> buffer = StringIO()
    >>> archive = LaunchpadWriteTarFile(buffer)

We can add files individually.

    >>> archive.add_file('foo', '1')

Or add many files simultaneosly.

    >>> archive.add_files({'bar': '2', 'baz': '3'})

Once we are done adding files, the archive needs to be closed.

    >>> archive.close()

And now we can inspect the produced file.

    >>> import tarfile
    >>> buffer.seek(0)
    >>> archive = tarfile.open('', 'r', buffer)
    >>> examine_tarfile(archive)
    foo | 1
    bar | 2
    baz | 3

There are also some convenience methods for getting directly from a list
of files to a stream...

If we have a list of files:

    >>> files = {
    ...     'eins': 'zwei',
    ...     'drei': 'vier'
    ... }

...then we can easily turn it into a tarfile...

    >>> archive = LaunchpadWriteTarFile.files_to_tarfile(files)
    >>> examine_tarfile(archive)
    drei | vier
    eins | zwei

...or a stream...

    >>> stream = LaunchpadWriteTarFile.files_to_stream(files)
    >>> archive = tarfile.open('', 'r', stream)
    >>> examine_tarfile(archive)
    drei | vier
    eins | zwei

...or a data string.

    >>> data = LaunchpadWriteTarFile.files_to_string(files)
    >>> archive = tarfile.open('', 'r', StringIO(data))
    >>> examine_tarfile(archive)
    drei | vier
    eins | zwei

If a filename contains slashes, containing directories are automatically created.

    >>> archive = LaunchpadWriteTarFile.files_to_tarfile({
    ...     'uno/dos/tres/cuatro': 'blah'
    ...     })
    >>> examine_tarfile(archive)
    uno/                | 
    uno/dos/            | 
    uno/dos/tres/       | 
    uno/dos/tres/cuatro | blah

