= ITicketTarget Interface =

Launchpad includes a support request tracker. Tickets are associated to
objects implementing ITicketTarget. This file documents that interface
and can be used to validate implementation of this interface on a
particular object. (This object is made available through the 'target'
variable which is defined outside of this file, usually by a
LaunchpadFunctionalTestCase. This instance shouldn't have any tickets
associated with it at the start of the test.)

    # Some parts of the ITicketTarget interface are only accessible
    # to a registered user.
    >>> login('no-priv@canonical.com')
    >>> from zope.interface.verify import verifyObject
    >>> from canonical.launchpad.interfaces import ITicketTarget

    >>> verifyObject(ITicketTarget, target)
    True


== newTicket() ==

Tickets are always owned by a registered user.

    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> sample_person = getUtility(IPersonSet).getByEmail(
    ...     'test@canonical.com')

The newTicket() method is used to create ticket that will be associated
with the target. It takes as parameters the ticket's owner, title and
description. It also takes an optional parameter 'datecreated' parameter
which defaults to UTC_NOW.

    # Let's define now to a know value.
    >>> from datetime import datetime, timedelta
    >>> from pytz import UTC
    >>> now = datetime.now(UTC)

    >>> ticket = target.newTicket(sample_person, 'New ticket',
    ...     'Ticket description', datecreated=now)
    >>> print ticket.title
    New ticket
    >>> print ticket.description
    Ticket description
    >>> ticket.owner == sample_person
    True
    >>> ticket.datecreated == now
    True

The created ticket starts in the 'Open' status and should have the owner
subscribed to the ticket.

    >>> ticket.status.title
    'Open'

    >>> sample_person in [s.person for s in ticket.subscriptions]
    True

Anonymous users cannot use newTicket():

    >>> login(ANONYMOUS)
    >>> ticket = target.newTicket(sample_person, 'This will fail',
    ...     'Failed?')
    Traceback (most recent call last):
      ...
    Unauthorized...


== getTicket() ==

The getTicket() method is used to retrieve a ticket by id for a
particular target.

    >>> target.getTicket(ticket.id) == ticket
    True

If you pass in a non-existent id or a ticket for a different target, the
method must return None.

    >>> target.getTicket(2) is None
    True
    >>> target.getTicket(12345) is None
    True


== Creating some additional tickets ==

For the following methods, we will require some more tickets. Create five
new tickets. Odd tickets will be owned by foo_bar and even tickets will be
owned by sample_person.

    >>> login('no-priv@canonical.com')
    >>> foo_bar = getUtility(IPersonSet).getByEmail('foo.bar@canonical.com')
    >>> tickets = []
    >>> for num in range(5):
    ...     if num % 2:
    ...         owner = foo_bar
    ...     else:
    ...         owner = sample_person
    ...     description = ('Support request description%d.\n'
    ...         'This request index is %d.') % (num, num)
    ...     tickets.append(target.newTicket(
    ...         owner, 'Ticket title%d' % num, description,
    ...         datecreated=now+timedelta(seconds=num+1)))

For more variety, we will set the status of the last to INVALID and the
fourth one to ANSWERED.

    >>> login('foo.bar@canonical.com')
    >>> foo_bar = getUtility(IPersonSet).getByEmail('foo.bar@canonical.com')
    >>> message = tickets[-1].reject(
    ...     foo_bar, 'Invalid ticket.', datecreated=now+timedelta(hours=1))
    >>> message = tickets[3].giveAnswer(
    ...     sample_person, 'This is your answer.',
    ...     datecreated=now+timedelta(hours=1))

    # Flush those changes to the database.
    >>> from canonical.database.sqlbase import flush_database_updates
    >>> flush_database_updates()

And create another one that will also have the word 'new' in its
description.

    >>> login('test@canonical.com')
    >>> ticket = target.newTicket(sample_person, 'Another ticket',
    ...     'Another new ticket that is actually very new.',
    ...     datecreated=now+timedelta(hours=1))
    >>> login(ANONYMOUS)


== searchTickets() ==

The searchTickets() method is used to search for tickets.

=== search_text ===

The search_text parameter will select the tickets that contain the
passed in text. (The standard text searching algorithm is used, see
textsearching.txt.)

    >>> for t in target.searchTickets(search_text='new'):
    ...     print t.title
    New ticket
    Another ticket

The results here are sorted by relevancy. (In the last tickets, 'New'
appeared in the description which makes it less relevant than when the
word appears in the title.)

=== status ===

The searchTickets() method can also filter tickets by status:

    >>> from canonical.lp.dbschema import TicketStatus
    >>> for t in target.searchTickets(status=TicketStatus.OPEN):
    ...     print t.title
    Another ticket
    Ticket title2
    Ticket title1
    Ticket title0
    New ticket

In this previous example, because there is no sort text, the
default sort order is from newest to oldest.

    >>> for t in target.searchTickets(status=TicketStatus.INVALID):
    ...     print t.title
    Ticket title4

You can also pass in a list of status, and you can also use the
search_text and status parameters at the same time. This will search
OPEN and INVALID tickets with the word 'index'

    >>> for t in target.searchTickets(search_text='request index',
    ...         status=(TicketStatus.OPEN, TicketStatus.INVALID)):
    ...     print t.title
    Ticket title4
    Ticket title2
    Ticket title1
    Ticket title0

=== sort ===

You can control the sort order by passing one of the constants defined
in TicketSort. (We already saw the NEWEST_FIRST and RELEVANCY sort
order).

You can sort also from oldest to newest using the OLDEST_FIRST constant:

    >>> from canonical.lp.dbschema import TicketSort

    >>> for t in target.searchTickets(search_text='new',
    ...                               sort=TicketSort.OLDEST_FIRST):
    ...     print t.title
    New ticket
    Another ticket

You can sort by status, (the status order is OPEN, NEEDSINFO, ANSWERED,
SOLVED, EXPIRED, INVALID), this also sorts from newest to oldest as a
secondary key.

    >>> for t in target.searchTickets(search_text='request index',
    ...                               status=None,
    ...                               sort=TicketSort.STATUS):
    ...     print t.status.title, t.title
    Open Ticket title2
    Open Ticket title1
    Open Ticket title0
    Answered Ticket title3
    Invalid Ticket title4

(In the previous example, we used status=None to search for all
statuses, by default INVALID and EXPIRED tickets are excluded.)

If there is no search_text and the requested sort order is RELEVANCY,
the tickets will be sorted NEWEST_FIRST.

    >>> for t in target.searchTickets(sort=TicketSort.RELEVANCY):
    ...     print t.title
    Another ticket
    Ticket title3
    Ticket title2
    Ticket title1
    Ticket title0
    New ticket

('Ticket title4' is not shown in this case because it has INVALID as
its status.)

=== owner ===

You can also find ticket owner by a particular user by using the owner
parameter.

    >>> for t in target.searchTickets(owner=foo_bar):
    ...     print t.title
    Ticket title3
    Ticket title1

=== needs_attention_from ===

You can also search among the tickets that needs the attention of
somebody. A ticket needs the attention of a user if he owns it and that
it is in the NEEDSINFO or ANSWERED state. Tickets on which the user gave
an answer or requested for more information and that are back in the
OPEN state are also included.

    # One of Sample Person's ticket gets to need attention from Foo Bar.
    >>> login('foo.bar@canonical.com')
    >>> message = tickets[0].requestInfo(
    ...     foo_bar, 'Do you have a clue?',
    ...     datecreated=now+timedelta(hours=1))
    >>> login('test@canonical.com')
    >>> message = tickets[0].giveInfo(
    ... 'I do, now please help me.', datecreated=now+timedelta(hours=2))

    # Another one of Foo Bar's ticket needs attention.
    >>> message = tickets[1].requestInfo(
    ...     sample_person, 'And you, do you have a clue?',
    ...     datecreated=now+timedelta(hours=1))

    # Flush those changes to the database.
    >>> flush_database_updates()
    >>> login(ANONYMOUS)

    >>> for t in target.searchTickets(needs_attention_from=foo_bar):
    ...     print t.status.title, t.title, t.owner.displayname
    Answered Ticket title3 Foo Bar
    Needs information Ticket title1 Foo Bar
    Open Ticket title0 Sample Person

== findSimilarTickets() ==

The method findSimilarTickets() can be use to find tickets similar to a
sentence. The tickets don't have to contain all the words of the sentence,
just some.

    >>> for t in target.findSimilarTickets('new tickets with a title'):
    ...     print t.title
    New ticket
    Another ticket

In this case, it returned the same results than with the search 'new' because
all other words in the sentence are either common ('ticket', 'title') or stop
words ('with', 'a').


== Support contacts ==

Target can have support contacts. The list of support contacts for a
target is available through the support_contacts attribute.

    >>> list(target.support_contacts)
    []

There is also a direct_support_contacts which includes only the
support contacts registered explicitely on the ticket target. (In
general, it will be equal to support_contacts attribute, but some
ITicketTarget implementations may inherit support contacts
from other context. In these cases, that attribute would only contain
the support contacts defined in the current ITicketTarget context.)

    >>> list(target.direct_support_contacts)
    []

You add a support contact by using the addSupportContact method. This
is only available to registered users.

    >>> name18 = getUtility(IPersonSet).getByName('name18')
    >>> target.addSupportContact(name18)
    Traceback (most recent call last):
      ...
    Unauthorized...
    >>> login('no-priv@canonical.com')

This method will return True when the contact was added the list and
False when it was already on the list:

    >>> target.addSupportContact(name18)
    True
    >>> [p.name for p in target.support_contacts]
    [u'name18']
    >>> [p.name for p in target.direct_support_contacts]
    [u'name18']
    >>> target.addSupportContact(name18)
    False

Support contacts can be removed by using the removeSupportContact()
method. Like its counterpart, it returns True when the support contact
was removed and False when the person wasn't on the support contact
list.

    >>> target.removeSupportContact(name18)
    True
    >>> list(target.support_contacts)
    []
    >>> list(target.direct_support_contacts)
    []
    >>> target.removeSupportContact(name18)
    False

Only registered users can remove a support contact:

    >>> login(ANONYMOUS)
    >>> target.removeSupportContact(name18)
    Traceback (most recent call last):
      ...
    Unauthorized...
