Derive Distributions
--------------------

DistroSeries.deriveDistroSeries() allows us to derive one distroseries
from another. The to-be-derived distroseries can already exist, or is
can be created by deriveDistroSeries().


Set Up
======

    >>> from lp.testing.sampledata import ADMIN_EMAIL
    >>> from canonical.launchpad.testing.pages import webservice_for_person
    >>> from canonical.launchpad.webapp.interfaces import OAuthPermission

    >>> login(ADMIN_EMAIL)

    >>> soyuz_team = factory.makeTeam(name='soyuz-team')
    >>> parent_series = factory.makeDistroSeries(name="parentseries")
    >>> parent_series.driver = soyuz_team
    >>> child_series = factory.makeDistroSeries(name='child1')
    >>> child_series_with_parent = factory.makeDistroSeries(
    ...     name='child-with-parent', parent_series=parent_series)
    >>> other_series = factory.makeDistroSeries(name="otherseries")
    >>> other_series.driver = soyuz_team

    >>> distribution = factory.makeDistribution(
    ...     name='deribuntu', owner=soyuz_team)
    >>> version = "%s.0" % factory.getUniqueInteger()

    >>> logout()

    >>> soyuz_team_webservice = webservice_for_person(
    ...     soyuz_team.teamowner, permission=OAuthPermission.WRITE_PUBLIC)


Calling
=======

    >>> from canonical.launchpad.webapp import canonical_url
    >>> from canonical.launchpad.webapp.servers import WebServiceTestRequest

    >>> def ws_object(webservice, obj):
    ...     api_request = WebServiceTestRequest(
    ...         SERVER_URL=webservice.getAbsoluteUrl(""))
    ...     obj_url = canonical_url(obj, request=api_request)
    ...     return webservice.get(obj_url).jsonBody()

We can't call .deriveDistroSeries() with a distroseries that already
has a parent series.

    >>> ws_child_series_with_parent = ws_object(
    ...     soyuz_team_webservice, child_series_with_parent)
    >>> ws_other_series = ws_object(soyuz_team_webservice, other_series)
    >>> ws_distribution = ws_object(soyuz_team_webservice, distribution)

    >>> print soyuz_team_webservice.named_post(
    ...     ws_other_series['self_link'], 'deriveDistroSeries', {},
    ...     name=ws_child_series_with_parent['name'],
    ...     distribution=ws_child_series_with_parent['distribution_link'],
    ...     rebuild=False)
    HTTP/1.1 400 Bad Request
    ...
    DistroSeries ... parent series is ... but it must not be set

If we call it correctly, it works.

    >>> ws_parent_series = ws_object(soyuz_team_webservice, parent_series)
    >>> ws_child_series = ws_object(soyuz_team_webservice, child_series)

    >>> print soyuz_team_webservice.named_post(
    ...     ws_parent_series['self_link'], 'deriveDistroSeries', {},
    ...     name=ws_child_series['name'],
    ...     distribution=ws_child_series['distribution_link'],
    ...     rebuild=False)
    HTTP/1.1 200 Ok
    ...

If we call it with all of the arguments, it also works.

    >>> text = 'The Second Child'
    >>> print soyuz_team_webservice.named_post(
    ...     ws_parent_series['self_link'], 'deriveDistroSeries', {},
    ...     name='child2', distribution=ws_distribution['self_link'],
    ...     displayname=text, title=text, summary=text,
    ...     description=text, version=version,
    ...     architectures=('i386',), packagesets=('test1',),
    ...     rebuild=False)
    HTTP/1.1 200 Ok
    ...

And we can verify both jobs exist.

    >>> from zope.component import getUtility
    >>> from lp.soyuz.interfaces.distributionjob import (
    ...     IInitialiseDistroSeriesJobSource)
    >>> login(ADMIN_EMAIL)
    >>> jobs = sorted(
    ...     getUtility(IInitialiseDistroSeriesJobSource).iterReady(),
    ...     key=lambda x: x.distroseries.name)
    >>> for job in jobs:
    ...     print job.distroseries.name
    child1
    child2
