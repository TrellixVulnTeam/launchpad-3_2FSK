Project
=======

XXX: One day, someone needs to fill this out with more interesting tests
then the simple one I'm adding today.

>>> from zope.component import getUtility
>>> from canonical.launchpad.interfaces import (IProjectSet, IProject,
...     IProductSet, NotFoundError)
>>> from canonical.database.sqlbase import flush_database_updates
>>> from canonical.launchpad.ftests import login

Grab the gnome project from its project set:

>>> projectset = getUtility(IProjectSet)
>>> gnome = projectset["gnome"]

Set it as inactive, logging in as an admin:

>>> login("foo.bar@canonical.com")
>>> gnome.active = False
>>> flush_database_updates()

It had better not show up any longer!

>>> try:
...   projectset[gnome.name]
... except NotFoundError:
...   pass

But it should be shown using the getByName()

>>> projectset.getByName('gnome').name
u'gnome'

getByName() also accepts an argument to ignore inactive projects. 

>>> print projectset.getByName('gnome', ignore_inactive=True)
None


Specification Listings
======================

We should be able to generate filtered lists of specs on a project.

 >>> mozilla = projectset.getByName('mozilla')
 >>> from canonical.lp.dbschema import SpecificationFilter

First, there should be only one informational spec for mozilla:

 >>> filter = [SpecificationFilter.INFORMATIONAL]
 >>> for spec in mozilla.specifications(filter=filter):
 ...    print spec.name
 extension-manager-upgrades


There are no completed specs for mozilla:

 >>> filter = [SpecificationFilter.COMPLETE]
 >>> for spec in mozilla.specifications(filter=filter):
 ...    print spec.name


And there are five incomplete specs:

 >>> filter = [SpecificationFilter.INCOMPLETE]
 >>> mozilla.specifications(filter=filter).count()
 5

We can filter for specifications that contain specific text:

 >>> for spec in mozilla.specifications(filter=['install']):
 ...     print spec.name
 extension-manager-upgrades


Inactive products are excluded from the listings.

 >>> filter = [SpecificationFilter.INCOMPLETE]
 >>> mozilla.specifications(filter=filter).count()
 5
 >>> from canonical.database.sqlbase import flush_database_updates
 >>> firefox = getUtility(IProductSet).getByName('firefox')
 >>> firefox.active = False
 >>> flush_database_updates()
 >>> filter = [SpecificationFilter.INCOMPLETE]
 >>> mozilla.specifications(filter=filter).count()
 0

Reset firefox so we don't mess up later tests.

 >>> firefox.active = True
 >>> flush_database_updates()

