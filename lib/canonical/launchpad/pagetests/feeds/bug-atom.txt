= Atom Feeds =

Atom feeds produce XML not HTML.  Therefore we must parse the output as XML
using BeautifulStoneSoup instead of BeautifulSoup or the helper functions.

    >>> from BeautifulSoup import BeautifulStoneSoup as BSS
    >>> from BeautifulSoup import SoupStrainer

Please note that when displaying the results of the feeds in a reader
the order of entries may not be the same as generated.  Some readers
will arrange the entries in a different sort order based on the update
time.

Define a helper function for parsing the entries:

    >>> def parse_entries(contents):
    ...     entries = [tag for tag in BSS(browser.contents,
    ...                parseOnlyThese=SoupStrainer('entry'))]
    ...     return entries


== Latest bugs for a product ==

This feed gets the latest bugs reported against a product. The feed includes
summary information about the bugs such as ID, title, author, and a link to
the bug itself.

    >>> browser.open('http://feeds.launchpad.dev/jokosher/latest-bugs.atom')
    >>> browser.title
    'Bugs in Jokosher'
    >>> browser.url
    'http://feeds.launchpad.dev/jokosher/latest-bugs.atom'

    >>> soup = BSS(browser.contents, parseOnlyThese=SoupStrainer('id'))
    >>> print extract_text(soup.find('id'))
    http://feeds.launchpad.dev/jokosher/latest-bugs.atom
    >>> entries = parse_entries(browser.contents)
    >>> print len(entries)
    2
    >>> entry = entries[0]
    >>> print extract_text(entry.title)
    [12] Copy, Cut and Delete operations should work on selections
    >>> print extract_text(entry.author('name')[0])
    Foo Bar
    >>> print extract_text(entry.author('uri')[0])
    http://bugs.launchpad.dev/~name16

    >>> entry = entries[1]
    >>> print extract_text(entry.title)
    [11] Make Jokosher use autoaudiosink
    >>> print extract_text(entry.author('name')[0])
    Foo Bar
    >>> print extract_text(entry.author('uri')[0])
    http://bugs.launchpad.dev/~name16


== Latest bugs for a project ==

This feed gets the latest bugs for a project, and has the same type of content
as the latest bugs feed for a product.

    >>> browser.open('http://feeds.launchpad.dev/mozilla/latest-bugs.atom')
    >>> browser.title
    'Bugs in the Mozilla Project'
    >>> browser.url
    'http://feeds.launchpad.dev/mozilla/latest-bugs.atom'

    >>> soup = BSS(browser.contents, parseOnlyThese=SoupStrainer('id'))
    >>> print extract_text(soup.find('id'))
    http://feeds.launchpad.dev/mozilla/latest-bugs.atom
    >>> entries = parse_entries(browser.contents)
    >>> print len(entries)
    4

    >>> entry = entries[0]
    >>> print extract_text(entry.title)
    [9] Thunderbird crashes
    >>> print extract_text(entry.author('name')[0])
    Foo Bar
    >>> print extract_text(entry.author('uri')[0])
    http://bugs.launchpad.dev/~name16

    >>> entry = entries[1]
    >>> print extract_text(entry.title)
    [5] Firefox install instructions should be complete
    >>> print extract_text(entry.author('name')[0])
    Sample Person
    >>> print extract_text(entry.author('uri')[0])
    http://bugs.launchpad.dev/~name12


== Latest bugs for a person ==

This feed gets the latest bugs for a person.

    >>> browser.open('http://feeds.launchpad.dev/~name16/latest-bugs.atom')
    >>> browser.title
    'Bugs for Foo Bar'
    >>> browser.url
    'http://feeds.launchpad.dev/~name16/latest-bugs.atom'

    >>> soup = BSS(browser.contents, parseOnlyThese=SoupStrainer('id'))
    >>> print extract_text(soup.find('id'))
    http://feeds.launchpad.dev/~name16/latest-bugs.atom
    >>> entries = parse_entries(browser.contents)
    >>> print len(entries)
    6

    >>> entry = entries[0]
    >>> print extract_text(entry.title)
    [3] Bug Title Test
    >>> print extract_text(entry.author('name')[0])
    Foo Bar
    >>> print extract_text(entry.author('uri')[0])
    http://bugs.launchpad.dev/~name16

    >>> entry = entries[1]
    >>> print extract_text(entry.title)
    [12] Copy, Cut and Delete operations should work on selections
    >>> print extract_text(entry.author('name')[0])
    Foo Bar
    >>> print extract_text(entry.author('uri')[0])
    http://bugs.launchpad.dev/~name16


== Latest bugs for a team ==

This feed gets the latest bugs for a whole team.
First, make a team responsible for some bugs.

    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> from zope.component import getUtility
    >>> from canonical.launchpad.ftests import login, logout
    >>> one_mem_browser = setupBrowser(
    ...    auth='Basic one-membership@test.com:test')
    >>> personset = getUtility(IPersonSet)

Subscribe simple-team to a number of bugs.

    >>> one_mem_browser.open('http://launchpad.dev/bugs/1')
    >>> one_mem_browser.getLink('Subscribe someone else').click()
    >>> one_mem_browser.getControl('Person').value = 'simple-team'
    >>> one_mem_browser.getControl('Add').click()

    >>> one_mem_browser.open('http://launchpad.dev/bugs/2')
    >>> one_mem_browser.getLink('Subscribe someone else').click()
    >>> one_mem_browser.getControl('Person').value = 'simple-team'
    >>> one_mem_browser.getControl('Add').click()

    >>> one_mem_browser.open('http://launchpad.dev/bugs/3')
    >>> one_mem_browser.getLink('Subscribe someone else').click()
    >>> one_mem_browser.getControl('Person').value = 'simple-team'
    >>> one_mem_browser.getControl('Add').click()


Now we can do a query on the lastest bugs for simple team and expect
some results.

    >>> browser.open(
    ...    'http://feeds.launchpad.dev/~simple-team/latest-bugs.atom')
    >>> browser.title
    'Bugs for Simple Team'

    >>> soup = BSS(browser.contents, parseOnlyThese=SoupStrainer('id'))
    >>> print extract_text(soup.find('id'))
    http://feeds.launchpad.dev/~simple-team/latest-bugs.atom

    >>> entries = parse_entries(browser.contents)
    >>> print len(entries)
    3


== General bug search ==

This feed is the most useful of them all. Any bug search can be turned into
a feed.

    >>> import cgi
    >>> url = ("http://feeds.launchpad.dev/bugs/+bugs.atom?"
    ...        "field.searchtext=&search=Search+Bug+Reports&"
    ...        "field.scope=all&field.scope.target=")

The bug search feed is not enabled by default since it may represent a
performance problem in production.

    >>> from zope.security.interfaces import Unauthorized
    >>> from canonical.config import config
    >>> config.launchpad.is_bug_search_feed_active = False
    >>> try: 
    ...     browser.open(url)
    ... except Unauthorized, info:
    ...     print Unauthorized, info
    zope.security.interfaces.Unauthorized Bug search feed deactivated

The bug search feed can be tested after setting is_bug_search_feed_active
to True.

    >>> config.launchpad.is_bug_search_feed_active = True
    >>> browser.open(url)
    >>> config.launchpad.is_bug_search_feed_active = False
    >>> browser.title
    'Bugs from custom search'

    >>> soup = BSS(browser.contents, parseOnlyThese=SoupStrainer('id'))
    >>> feed_id = extract_text(soup.find('id'))
    >>> print feed_id
    http://feeds.launchpad.dev/bugs/+bugs.atom?field.scope.target=&amp;field.scope=all&amp;field.searchtext=&amp;search=Search+Bug+Reports

    >>> print cgi.escape(browser.url)
    http://feeds.launchpad.dev/bugs/+bugs.atom?field.scope.target=&amp;field.scope=all&amp;field.searchtext=&amp;search=Search+Bug+Reports

    >>> entries = parse_entries(browser.contents)
    >>> print len(entries)
    10

    >>> entry = entries[0]
    >>> print extract_text(entry.title)
    [3] Bug Title Test
    >>> print extract_text(entry.author('name')[0])
    Foo Bar
    >>> print extract_text(entry.author('uri')[0])
    http://bugs.launchpad.dev/~name16

    >>> entry = entries[1]
    >>> print extract_text(entry.title)
    [5] Firefox install instructions should be complete
    >>> print extract_text(entry.author('name')[0])
    Sample Person
    >>> print extract_text(entry.author('uri')[0])
    http://bugs.launchpad.dev/~name12


== Results for a single bug ==

This feed shows the status of a single bug.

    >>> browser.open('http://feeds.launchpad.dev/bugs/1/bug.atom')
    >>> browser.title
    'Bug 1'
    >>> entries = parse_entries(browser.contents)
    >>> print len(entries)
    1
    >>> entry = entries[0]
    >>> print extract_text(entry.title)
    [1] Firefox does not support SVG

== Feeds Configuration Options ==

The max_bug_feed_cache_minutes configuration is provided to allow
overriding the Expires and Cache-Control headers so that the feeds
will be cached longer by browsers and the reverse-proxy in front
of the feeds servers.

    >>> from canonical.launchpad.feed.bug import BugsFeedBase
    >>> from canonical.lazr.feed.feed import FeedBase
    >>> from zope.app.datetimeutils import rfc1123_date
    >>> import time
    >>> old_time = time.time
    >>> time.time = lambda: 17
    >>> browser.open('http://feeds.launchpad.dev/bugs/1/bug.atom')
    >>> config.launchpad.max_bug_feed_cache_minutes
    30
    >>> browser.headers['Expires']
    'Thu, 01 Jan 1970 00:30:17 GMT'
    >>> browser.headers['Cache-Control']
    'max-age=1800'
    >>> time.time = old_time
