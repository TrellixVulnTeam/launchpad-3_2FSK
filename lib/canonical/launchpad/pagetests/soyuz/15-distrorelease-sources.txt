= DistroRelease Source Pages =

In Launchpad, SourcePackageReleases are directly attached to a
DistroRelease by a publication record (see doc/publishing.txt).

A SourcePackage, or better names DistroReleaseSourcePackage, is a
collection of SourcePackageRelease once published in a given
DistroRelease.

Web UI exposes SourcePackages after obtain a valid pair DistroRelease
+ SourceName, and the url schema is:

$LP/distros/ubuntu/$DISTRORELEASE/+source/$SOURCENAME

A SourcePackageRelease once published in a DistroRelease is
represented by a DistroReleaseSourcePackageRelease and easily reached
by traversing a SourcePackage instance with a valid version, like:

$LP/distros/ubuntu/$DISTRORELEASE/+source/$SOURCENAME/$VERSION

We'll just go straight to the page this time, as the path to click
here is a bit involved.

  >>> browser.open(
  ...     'http://localhost/distros/ubuntu/warty/+source/mozilla-firefox')


This page provides its versions publications organised by pocket, as
we can see 'mozilla-firefox' is published twice in pocket RELEASE
(brain-dead sampledata):

  >>> print find_tag_by_id(browser.contents, 'publishings')
  <dl id="publishings">
  <dt><dfn>Release</dfn></dt>
  <dd>
  <p>The package versions that were published
  when the distribution release was made.
  For releases that are still under development,
  packages are published here only.
  </p>
  <ul>
  <li>
  <a href="http://localhost/distros/ubuntu/warty/+source/mozilla-firefox/0.9">mozilla-firefox 0.9</a>
  </li>
  <li>
  <a href="http://localhost/distros/ubuntu/warty/+source/mozilla-firefox/0.9">mozilla-firefox 0.9</a>
  </li>
  </ul>
  </dd>
  </dl>

It also provides the upstream relationships for this source, Project,
Product and Branches:

  >>> print find_tag_by_id(browser.contents, 'upstreams')
  <ul id="upstreams">
  <li>
  <b>Project:</b>
  <a href="/projects/mozilla">the Mozilla Project</a>
  </li>
  <li><b>Product:</b>
  <a href="/products/firefox">Mozilla Firefox</a>
  </li>
  <li><b>Branch: </b>
  <a href="http://localhost/products/firefox/trunk">trunk</a><br />
  </li>
  <small>(<a href="http://localhost/distros/ubuntu/warty/+source/mozilla-firefox/+packaging">update</a>)</small>
  </ul>

The user can also download the files for the "currentrelease" (last
published version) if they are available:

  >>> print find_tag_by_id(browser.contents, 'files')
  <div id="files">
  <ul class="download">
  <li>
  <a href="http://localhost:58000/3/firefox-0.9.2.tar.gz">firefox-0.9.2.tar.gz</a>
  (9.5 MiB)
  </li>
  </ul>
  </div>

This page also provides links to the binary packages generated by this
source in a specfic architecture:

  >>> print find_tag_by_id(browser.contents, 'binaries')
  <div id="binaries">
  <ul>
  <li>
  mozilla-firefox
  <span>
  (<a href="../../i386/mozilla-firefox">i386</a>)</span>
  </li>
  </ul>
  </div>


The '+changelog' page provides an aggregation of the changelogs for
SourcePackageReleases published in this DistroRelease.

The text is generated automatically by appending:

{{{
  SOURCENAME (VERSION) UPLOADDISTRORELEASE; urgency=URGENCY

  CHANGELOG

  -- UPLOADER-RFC-822 TIMESTAMP
}}}

for each published version.

  >>> browser.getLink("Change Log").click()
  >>> browser.url
  'http://localhost/distros/ubuntu/warty/+source/mozilla-firefox/+changelog'

  >>> print find_tag_by_id(browser.contents, 'changelog')
  <pre id="changelog">
  Mozilla dummy Changelog......
  <BLANKLINE>
  Mozilla dummy Changelog......
  <BLANKLINE>
  <BLANKLINE>
  </pre>


Back to the SourcePackage page:

  >>> browser.open(
  ...     'http://localhost/distros/ubuntu/warty/+source/mozilla-firefox')

We can visit a specific published release of "mozilla-firefox", this
page is provided by an DistroReleaseSourcePackageRelease instance:

  >>> browser.getLink("mozilla-firefox 0.9").click()
  >>> browser.url
  'http://localhost/distros/ubuntu/warty/+source/mozilla-firefox/0.9'

There we can see the respective 'changelog' content for this version:

  >>> print find_tag_by_id(browser.contents, 'changelog')
  <div id="changelog">
  <pre>Mozilla dummy Changelog......</pre>
  </div>

With the possibility to download the entire changesfile (if available):

  >>> print find_tag_by_id(browser.contents, 'changesfile')
  <div id="changesfile">
  <p>
  <a href="http://localhost:58000/1/netapplet-1.0.0.tar.gz">
             View changesfile
          </a>
  </p>
  </div>

And also download the files contained in this source, like '.orig',
'.diff' and the DSC:

  >>> print find_tag_by_id(browser.contents, 'files')
  <div id="files">
  <ul class="download">
  <li>
  <a href="http://localhost:58000/3/firefox-0.9.2.tar.gz">firefox-0.9.2.tar.gz</a>
  </li>
  </ul>
  </div>

