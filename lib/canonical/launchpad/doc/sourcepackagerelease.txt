Source Package Release
======================

The SourcePackageRelease table represents a particular release of a
SourcePackageName, but isn't tied to any particular DistroRelease
as the same release can appear in many.

Let's get one from the database:

   >>> from canonical.launchpad.database import SourcePackageRelease
   >>> spr = SourcePackageRelease.get(14)
   >>> print spr.name
   mozilla-firefox
   >>> print spr.version
   0.9

We can use the magic productrelease property to map this to a ProductRelease:

   >>> pr = spr.productrelease
   >>> print pr.product.name
   firefox
   >>> print pr.productseries.name
   milestones
   >>> print pr.version
   0.9

It should also work when the version has a dash and packaging revision
after it:

   >>> spr = SourcePackageRelease.get(16)
   >>> print spr.name
   netapplet
   >>> print spr.version
   1.0-1
   >>> pr = spr.productrelease
   >>> print pr.product.name
   netapplet
   >>> print pr.productseries.name
   releases
   >>> print pr.version
   1.0

If there isn't one, that should return None.

   >>> print SourcePackageRelease.get(20).productrelease
   None


Check ISourcePackageRelease.override() behaviour:

   >>> spr.component.name, spr.section.name
   (u'main', u'editors')

   >>> from canonical.launchpad.interfaces import (
   ...     IComponentSet, ISectionSet)
   >>> new_comp = getUtility(IComponentSet)['universe']
   >>> new_sec = getUtility(ISectionSet)['mail']

Override the current sourcepackagerelease with new component/section
pair:

   >>> spr.override(component=new_comp, section=new_sec)

   >>> spr.component.name, spr.section.name
   (u'universe', u'mail')

Abort transaction to avoid error propagation of the new attributes:

   >>> import transaction
   >>> transaction.abort()


Verify the 'meta_binary' attribute:

   >>> spr_test = SourcePackageRelease.get(20)
   >>> spr_test.name
   u'pmount'

   >>> from canonical.launchpad.interfaces import (
   ...    IDistroReleaseBinaryPackage)

   >>> IDistroReleaseBinaryPackage.providedBy(spr_test.meta_binaries[0])
   True
