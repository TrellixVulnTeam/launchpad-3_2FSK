= Answer Tracker FAQ Documents =

== IFAQTarget ==

The Answer Tracker offers features to manage answers to frequently asked
questions (also called FAQ). Like the regular questions, FAQ documents
are associated to distributions or products. The IFAQTarget interface
is provided by objects that can host FAQs.

    >>> from zope.interface.verify import verifyObject
    >>> from zope.security.proxy import removeSecurityProxy

    >>> from canonical.launchpad.interfaces import (
    ...     IDistributionSet, IProductSet, IFAQTarget)

    >>> firefox = getUtility(IProductSet).getByName('firefox')

    # removeSecurityProxy() is needed because not all interface
    # attributes are available to everybody.
    >>> verifyObject(IFAQTarget, removeSecurityProxy(firefox))
    True

    >>> ubuntu = getUtility(IDistributionSet).getByName('ubuntu')
    >>> verifyObject(IFAQTarget, removeSecurityProxy(ubuntu))
    True

Any user who has 'launchpad.Moderate' on the project can create a new
FAQ. (That permission is granted to project's registrant and answer
contacts.)

    >>> login('test@canonical.com')

    >>> from canonical.launchpad.interfaces import ILaunchBag
    >>> sample_person = getUtility(ILaunchBag).user
    >>> print firefox.owner.displayname
    Sample Person

    >>> firefox_faq = firefox.newFAQ(
    ...     sample_person, 'How can I see the Fnords?',
    ...     "Install the Fnords highlighter extension and see the Fnords!")

(The complete description of IFAQTarget is available in
lib/canonical/launchpad/interfaces/ftests/faqtarget.txt)


=== IFAQTarget adapters ===

Convenient adapters are available so that is possible to easily retrieve
a suitable IFAQTarget from objects that do not provide it directly.

It is possible to adapt an IDistributionSourcePackage to IFAQTarget,
(the distribution is really the appropriate IFAQTarget in this case):

    >>> mozilla_firefox = ubuntu.getSourcePackage('mozilla-firefox')
    >>> IFAQTarget.providedBy(mozilla_firefox)
    False
    >>> mozilla_firefox_faq_target = IFAQTarget(mozilla_firefox)
    >>> verifyObject(
    ...     IFAQTarget, removeSecurityProxy(mozilla_firefox_faq_target))
    True

It is also possible to adapt an IQuestion into an IFAQTarget. This
adaptation returns the IFAQTarget that should be use for the question.

    >>> firefox_question = firefox.getQuestion(1)
    >>> IFAQTarget.providedBy(firefox_question)
    False
    >>> question_faq_target = IFAQTarget(firefox_question)
    >>> verifyObject(IFAQTarget, removeSecurityProxy(question_faq_target))
    True


== IFAQCollection ==

The IFAQCollection interface is provided by objects that represents a
collection of FAQs. This interface can be used to retrieve and search
for FAQs. It is provided by product, distribution, and projects.

    >>> from canonical.launchpad.interfaces import IFAQCollection, IProjectSet
    >>> gnome = getUtility(IProjectSet).getByName('gnome')
    >>> verifyObject(IFAQCollection, gnome)
    True
    >>> verifyObject(IFAQCollection, ubuntu)
    True
    >>> verifyObject(IFAQCollection, firefox)
    True

(The complete description of IFAQCollection is available in
lib/canonical/launchpad/interfaces/ftests/faqcollection.txt)


== IFAQ ==

FAQ document provides the IFAQ interface.

    >>> from canonical.launchpad.interfaces import IFAQ
    >>> verifyObject(IFAQ, firefox_faq)
    True

The FAQ document information is available in the object attributes.

    >>> print firefox_faq.title
    How can I see the Fnords?
    >>> print firefox_faq.content
    Install the Fnords highlighter extension and see the Fnords!

    >>> print firefox_faq.owner.displayname
    Sample Person

The project that contains the FAQ is available using the target
attribute:

    >>> print firefox_faq.target.name
    firefox


== IFAQSet ==

There is a global utility registered under the IFAQSet interface that
can be used to retrieve all FAQs posted on Launchpad.

    >>> from canonical.launchpad.interfaces import IFAQSet
    >>> faqset = getUtility(IFAQSet)
    >>> verifyObject(IFAQSet, faqset)
    True

It provides the IFAQCollection interface.

    >>> verifyObject(IFAQCollection, faqset)
    True

It can retrieve any FAQ by id using the getFAQ() method.

    >>> faqset.getFAQ(firefox_faq.id) == firefox_faq
    True

The searchFAQs() method can be used to find FAQs by keywords or owner.

    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> foo_bar = getUtility(IPersonSet).getByEmail('foo.bar@canonical.com')
    >>> for faq in faqset.searchFAQs(
    ...     search_text='java | flash', owner=foo_bar):
    ...     print '%s (%s)' % (faq.title, faq.target.displayname)
    How do I install plugins (Shockwave, QuickTime, etc.)? (Mozilla Firefox)
    How can I play MP3/Divx/DVDs/Quicktime/Realmedia files
        or view Flash/Java web pages (Ubuntu)

(See lib/canonical/launchpad/interfaces/ftests/faqcollection.txt for
the full interface description.)


== Linking a FAQ to a question ==

An IFAQ can be used to answer a question. The linkFAQ() method on
IQuestion is used for that purpose. It takes as parameters the user
posting the answer, the FAQ containing the answer and a comment that
will be added to the question explaining the FAQ link.

    >>> fnord_question = firefox.newQuestion(
    ...     sample_person, 'Are there Fnords on the web?',
    ...     'Do Fnords also exists on the web?')

Any user can link an existing FAQ to a question.

    >>> login('no-priv@canonical.com')
    >>> no_priv = getUtility(ILaunchBag).user
    >>> message = fnord_question.linkFAQ(
    ...     no_priv, firefox_faq, 'See the FAQ.')

Once the FAQ is linked, the question is considered 'answered':

    >>> print message.action.title
    Answer
    >>> print fnord_question.status.title
    Answered

The 'faq' attribute contains the FAQ supposed to answer the question:

    >>> print fnord_question.faq.title
    How can I see the Fnords?

The FAQ's 'related_questions' attribute contains the questions that are
answered by the FAQ:

    # Flush the faq attribute change.
    >>> from canonical.launchpad.ftests import syncUpdate
    >>> syncUpdate(fnord_question)

    >>> for question in firefox_faq.related_questions:
    ...     print question.title
    Are there Fnords on the web?

A FAQ can be linked to multiple question:

    >>> other_question = firefox.getQuestion(4)
    >>> message = other_question.linkFAQ(
    ...     no_priv, firefox_faq,
    ...     'If you lose focus and gets stuck it must be the fnords!')

    >>> print other_question.faq.title
    How can I see the Fnords?
    >>> print other_question.status.title
    Answered

    >>> syncUpdate(other_question)
    >>> for question in firefox_faq.related_questions:
    ...     print question.title
    Firefox loses focus and gets stuck
    Are there Fnords on the web?

The FAQ link can be changed or removed by using the linkFAQ() method
again:

    >>> message = other_question.linkFAQ(
    ...     no_priv, None, "This has nothing to do with Fnords.")
    >>> print other_question.faq
    None

After this, only the original question will remain linked to the FAQ.

    >>> syncUpdate(other_question)
    >>> for question in firefox_faq.related_questions:
    ...     print question.title
    Are there Fnords on the web?

That change is also considered an answer:

    >>> print message.action.title
    Answer
    >>> print other_question.status.title
    Answered

It is not possible to modify the faq attribute directly:

    >>> fnord_question.faq = None
    Traceback (most recent call last):
      ...
    ForbiddenAttribute: ...

And it is not allowed to call linkFAQ() when the FAQ is already linked:

    >>> message = fnord_question.linkFAQ(
    ...     no_priv, firefox_faq, 'See the FAQ.')
    Traceback (most recent call last):
      ...
    AssertionError: cannot call linkFAQ() with already linked FAQ
