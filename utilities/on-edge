#!/usr/bin/python2.5
#
# Copyright 2010 Canonical Ltd.  This software is licensed under the
# GNU Affero General Public License version 3 (see the file LICENSE).

"""Usage: on-edge [-v] [--edge-only] [--staging-only]

This script consults the edge and staging servers to determine which revisions
they are running. Once it knows that, it prints a log of all the revisions of
stable and db-stable respectively that cannot be found on edge or staging.

Note that the stable branch is assumed to be in a directory called 'stable', a
sibling to the current branch directory. Likewise, db-stable is assumed to be
in '../db-stable', relative to this branch.
"""

import optparse
import os
import re
import sys

from bzrlib.transport import get_transport


class UsageError(Exception):
    """Raised when the user makes a dumb error."""


def get_staging_revision():
    """Get the revision of db-stable deployed on staging."""
    t = get_transport('https://staging.launchpad.net/')
    last_line = t.get_bytes('successful-updates.txt').splitlines()[-1]
    return int(last_line.split()[-1])


def get_edge_revision():
    """Get the revision of stable deployed on edge."""
    t = get_transport('https://edge.launchpad.net/')
    html = t.get_bytes('index.html')
    revision_re = re.compile(r'\(r(\d+)\)')
    for line in html.splitlines():
        matches = revision_re.search(line)
        if matches:
            return int(matches.group(1))
    raise ValueError("Could not find revision number on edge home page")


def bzr_log_to_tip(branch_path, revno):
    command = 'bzr log -r%s.. %s' % (revno + 1, branch_path)
    print
    os.system(command)
    print


def get_opt_parse():
    parser = optparse.OptionParser(
        description="Show local revisions that aren't on beta servers.")
    parser.add_option(
        '-v', '--verbose', action='store_true', help="Show revision log")
    parser.add_option(
        '--edge-only', action='store_true',
        help="Only show revisions not on edge. Do not consult staging.")
    parser.add_option(
        '--staging-only', action='store_true',
        help="Only show revisions not on staging. Do not consult edge.")
    return parser


def run(verbose, edge_only, staging_only):
    if edge_only and staging_only:
        raise UsageError("Cannot show only edge and only staging.")
    if not staging_only:
        edge_revision = get_edge_revision()
        if verbose:
            bzr_log_to_tip('../stable', edge_revision)
        print 'edge is running stable r%s' % edge_revision
    if not edge_only:
        staging_revision = get_staging_revision()
        if verbose:
            bzr_log_to_tip('../db-stable', staging_revision)
        print 'staging is running db-stable r%s' % staging_revision


def main(argv):
    parser = get_opt_parse()
    options, args = parser.parse_args(argv)
    if args:
        raise UsageError("Don't know what to do with arguments: %s" % args)
    run(options.verbose, options.edge_only, options.staging_only)


if __name__ == '__main__':
    try:
        sys.exit(main(sys.argv[1:]))
    except UsageError, e:
        print 'ERROR: %s' % e
        sys.exit(1)
