= Reset Password =

David Allouche forgot his password and he's going to use the forgotten
password form to reset it.

He locates the forgotten password link on the login page to visit
the page.

    >>> browser.open('http://launchpad.dev/+login')
    >>> browser.getLink('Forgotten your password?').click()

    >>> browser.url
    'http://launchpad.dev/+forgottenpassword'

    >>> browser.title
    'Need a new Launchpad password?'

He types the email address registered in Launchpad and submits the form.

    >>> from lp.testing.registration import set_captcha_answer
    >>> browser.getControl(name='email').value = (
    ...     'david.allouche@canonical.com')
    >>> set_captcha_answer(browser)
    >>> browser.getControl('Request Reset').click()
    >>> print extract_text(find_main_content(browser.contents))
    Need a new Launchpad password?
    We have sent you an email with instructions to reset your password.

David receives an email from Launchpad.

    # Get the to-addresses and link form the email.
    >>> from lp.services.mail import stub
    >>> from canonical.launchpad.ftests.logintoken import (
    ...     get_token_url_from_email)
    >>> len(stub.test_emails)
    1
    >>> from_addr, to_addrs, raw_msg = stub.test_emails.pop()
    >>> link = get_token_url_from_email(raw_msg)

The email was sent to him.

    >>> to_addrs
    ['david.allouche@canonical.com']

David uses the link in the email to visit the reset password page.

    >>> link
    'http://launchpad.dev/token/...'
    >>> browser.open(link)
    >>> browser.url
    'http://launchpad.dev/token/.../+resetpassword'

The token can only be used to reset the password.  Manually typing
another login token view name will redirect to the correct one:

    >>> wrong_link = link + "/+validateemail"
    >>> browser.open(wrong_link)
    >>> browser.url
    'http://launchpad.dev/token/.../+resetpassword'

He may now enter his password.  Unfortunately, he picks a password with
invalid characters:

    >>> browser.getControl(
    ...     name='field.email').value = 'david.allouche@canonical.com'
    >>> browser.getControl(name='field.password').value = 'é'
    >>> browser.getControl(name='field.password_dupe').value = 'é'
    >>> browser.getControl('Continue').click()

    >>> browser.url
    'http://launchpad.dev/token/.../+resetpassword'

    >>> print_feedback_messages(browser.contents)
    There is 1 error.
    The password provided contains non-ASCII characters.

This time, David corrects the password and continues:

    >>> browser.getControl(name='field.password').value = 'test2'
    >>> browser.getControl(name='field.password_dupe').value = 'test2'
    >>> browser.getControl('Continue').click()

    >>> browser.url
    'http://launchpad.dev'

    >>> print_feedback_messages(browser.contents)
    Your password has been reset successfully.

    >>> print extract_text(find_tag_by_id(browser.contents, 'logincontrol'))
    David Allouche...

Now that the token is consumed, he's not able to use it again.

    >>> browser.open(link)
    >>> print browser.title
    You have already done this
    >>> print extract_text(find_main_content(browser.contents))
    You reached this page probably because you followed a link received by
    email. That link was sent to confirm you have access to the email
    address it was sent to, but this confirmation was already concluded, so
    you don't need to do anything else.

It is now possible for David to log in with his new password.  He
logs out and then logs in again:

    >>> browser.open('http://launchpad.dev/+logout')
    >>> print_feedback_messages(browser.contents)
    You have been logged out

    >>> browser.getLink('Log in / Register').click()

    >>> browser.getControl(
    ...     'E-mail address:', index=0).value = 'david.allouche@canonical.com'
    >>> browser.getControl('Password').value = 'test2'
    >>> browser.getControl('Log In').click()

    >>> browser.url
    'http://launchpad.dev'

    >>> print extract_text(find_tag_by_id(browser.contents, 'logincontrol'))
    David Allouche...


== Reset is protected by a math captcha ==

When requesting a password reset David is presented with a simple math
problem which must be solved correctly before proceeding.

    >>> browser.open('http://launchpad.dev/+forgottenpassword')
    >>> browser.getControl(name='email').value = (
    ...     'david.allouche@canonical.com')
    >>> browser.getControl(name='captcha_submission').value = '-1'
    >>> browser.getControl('Request Reset').click()
    >>> print_feedback_messages(browser.contents)
    The answer to the simple math question was incorrect or missing. Please try again.


== Using email addresses other than the preferred one ==

Any of a person's validated email addresses can be used to reset his
password.

David has a second email address (david@canonical.com), which he will
use to reset his password now.

    >>> browser = setupBrowser()
    >>> browser.open('http://launchpad.dev/+login')
    >>> browser.getLink('Forgotten your password?').click()
    >>> browser.getControl(name='email').value = 'david@canonical.com'
    >>> set_captcha_answer(browser)
    >>> browser.getControl('Request Reset').click()
    >>> print_feedback_messages(browser.contents)

He follows the link sent to his email just like he did before.

    >>> len(stub.test_emails)
    1
    >>> from_addr, to_addrs, raw_msg = stub.test_emails.pop()
    >>> link = get_token_url_from_email(raw_msg)
    >>> browser.open(link)
    >>> browser.url
    'http://launchpad.dev/token/.../+resetpassword'

And then resets his password.

    >>> browser.getControl(name='field.email').value = 'david@canonical.com'
    >>> browser.getControl(name='field.password').value = 'test3'
    >>> browser.getControl(name='field.password_dupe').value = 'test3'
    >>> browser.getControl('Continue').click()
    >>> browser.url
    'http://launchpad.dev'
    >>> print_feedback_messages(browser.contents)
    Your password has been reset successfully.


== Teams do not have passwords ==

Teams do not have passwords, they cannot be reset.

    >>> browser.open('http://launchpad.dev/+forgottenpassword')
    >>> browser.getControl(name='email').value = 'support@ubuntu.com'
    >>> set_captcha_answer(browser)
    >>> browser.getControl('Request Reset').click()
    >>> print_feedback_messages(browser.contents)
    The email address support@ubuntu.com
    belongs to a team, and teams cannot log in to Launchpad.
