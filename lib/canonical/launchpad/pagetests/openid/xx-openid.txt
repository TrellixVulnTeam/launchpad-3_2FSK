OpenID
======

Launchpad is an OpenID server. If the URL is accessed by a web browser,
an informative message is displayed. We replicate the one from the
specification exactly, even though other OpenID servers take more
liberties.

>>> anon_browser.open('http://openid.launchpad.dev')
>>> print anon_browser.headers
Status: 200 Ok
...
Content-Type: text/html;charset=utf-8
...

>>> print anon_browser.contents
...
This is an OpenID server endpoint. For more information, see http://openid.net/
<BLANKLINE>


A Launchpad user's home page contains the required <link rel="openid.server" />
tag to allow OpenID consumers to determine the URL of the OpenID server to
be contacted.

XXX: This may be disabled before production rollout, until we are ready
to announce the OpenID service. Until then, consumers will need to use a
hardcoded URL or we set up some hidden URLs to be used
    -- StuartBishop 20070214

>>> anon_browser.open('http://launchpad.dev/~sabdfl')
>>> print '\n' + anon_browser.contents
<BLANKLINE>
...
<head>
...
<link rel="openid.server" href="http://openid.launchpad.dev/" />
</head>
...


After determining the URL of the OpenID server, the next thing a consumer
needs to do is associate with the server and get a shared secret via a
POST request.

>>> from urllib import urlencode
>>> anon_browser.open('http://openid.launchpad.dev/', data=urlencode({
...     'openid.mode': 'associate',
...     'openid.assoc_type': 'HMAC-SHA1',
...     }))
>>> print anon_browser.headers
Status: 200 Ok
...
Content-Type: text/plain
...
>>> print anon_browser.contents
assoc_handle:{HMAC-SHA1}{...}{...}
assoc_type:HMAC-SHA1
expires_in:1209600
mac_key:...
<BLANKLINE>

Get the association handle, which we will need for later tests.

>>> import re
>>> [assoc_handle] = re.findall('assoc_handle:(.*)', anon_browser.contents)


Once the shared secret is negotiated, the consumer can send
checkid_immediate and checkid_setup GET requests. checkid_immediate requests
will currently return "can't say" as we are not yet logged into Launchpad.

>>> args = urlencode({
...     'openid.mode': 'checkid_immediate',
...     'openid.identity': 'https://launchpad.dev/~sabdfl',
...     'openid.assoc_handle': assoc_handle,
...     'openid.return_to': 'http://example.com/',
...     })
>>> result = http("GET /?%s HTTP/1.1\nHost: openid.launchpad.dev\n" % args)
>>> print result
HTTP/1.1 302 Moved Temporarily
...
Location: http://example.com/?openid...
<BLANKLINE>


checkid_setup is interactive with the user, giving them the oppertunity
to log in and approve access to the consumer site. We can extract the
URL for the checkid_setup from the result of the previous test.

>>> [url] = re.findall('(?m)^Location: (.*)$', str(result))
>>> from cgi import parse_qs
>>> from urlparse import urlparse
>>> parameters = parse_qs(urlparse(url)[4])
>>> [setup_url] = parameters['openid.user_setup_url']

>>> anon_browser.open(setup_url)
>>> print anon_browser.contents

