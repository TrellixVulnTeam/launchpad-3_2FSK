Person
======

In Launchpad, the Person class is overloaded to represent both people
and teams. Let's log in as Robert Collins to ensure we have the
privileges to do what we're going to demonstrate.

>>> from zope.component import getUtility
>>> from canonical.launchpad.interfaces import IPersonSet
>>> from canonical.launchpad.ftests import login

>>> login("robertc@robertcollins.net")

Access to people (Persons or Teams) is done through the IPersonSet
utility:

>>> personset = getUtility(IPersonSet)
>>> buttsource = personset.getByName('buttsource')
>>> buttsource.teamowner is None
False
>>> lifeless = personset.getByName('lifeless')
>>> lifeless.teamowner is None
True

An IPerson has an inTeam method to allow us to easily check if a
person is a member of a team. It accepts the team name as a string,
which is the common use case when checking permissions.

>>> ddaa = personset.getByName('ddaa')
>>> lifeless.inTeam(buttsource) and ddaa.inTeam(buttsource)
True

If a Person is not a Team then the Person object will not provide the
ITeam interface.

>>> from canonical.launchpad.interfaces import ITeam
>>> ITeam.providedBy(lifeless)
False

If a Person is a Team then the Person will provide the ITeam interface.

>>> ITeam.providedBy(buttsource)
True

We don't support changing a Person into a Team or a Team into a Person.

>>> lifeless.teamowner = ddaa
>>> ITeam.providedBy(lifeless)
False
>>> buttsource.teamowner = None
>>> ITeam.providedBy(buttsource)
True

Searching for People
====================

If you want to do a more complex query to find people, use
IPersonSet.search.

>>> from canonical.launchpad.searchbuilder import NULL
>>> valid_people = personset.search(password = NULL)
>>> valid_people.count()
21

Passing no args would return all people:

>>> all_people = personset.search()
>>> all_people.count()
30