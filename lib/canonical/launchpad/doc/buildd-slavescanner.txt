Buildd Slave Scanner
====================

The Buildd Slave scanner is able to run over the build jobs being
processed in the current BuildFarm and collect information about the
status of the process, collect the results of finished jobs and
automaticaly dispatch new jobs to idle slaves.

  >>> from canonical.launchpad.scripts.builddmaster import BuilddMaster

The Master side of Buildd requires access to Launchpad Database, the
user designed for this kind of access is 'fiera', as in all test the
transaction should be retrieved.
 
  >>> import transaction

The master also requires an 'logging' instance to not compromise the
standard output with noisely output.

  >>> import logging

First let's test a essencial part of the BuilddMaster class, the
BuildersGroup() class.

  >>> from canonical.launchpad.database import DistroArchRelease

Select a sigle DistroArchRelease

  >>> archrelease = DistroArchRelease.get(1)

Create an empty BuilderGroup object
  
  >>> from canonical.launchpad.scripts.builddmaster import BuilderGroup
  >>> buildergroup = BuilderGroup(logging.getLogger(), transaction)
  
Mock Builders objects

  >>> class MockBuilder:
  ...     def __init__(self, slave):
  ...         self.slave = slave 
  ...         self.builderok = True
  ...         self.url = 'http://fake:0000'
  >>> class BrokenSlave:
  ...     def status(self):
  ...         raise xmlrpclib.Fault
  >>> class OkSlave:
  ...     def status(self):
  ...         return ('BuilderStatus.IDLE',)

  >>> builder1 = MockBuilder(BrokenSlave())
  >>> builder2 = MockBuilder(OkSlave())

  >>> buildergroup.builders = [builder1, builder2]

  >>> assert buildergroup.firstAvailable() is builder2

  >>> assert buildergroup.countAvailable() is 1


Now, goes throught BuilddMaster class itself.

  >>> bm = BuilddMaster(logging.getLogger(), transaction)
  
As we do when building the BuildQueue entries we need to recognise
all available distroarchrelease and figure out which slave builder
is able to build stuff properly for that one

  >>> for dar in DistroArchRelease.select():
  ...     bm.addDistroArchRelease(dar)
  ...     try:
  ...         bm.setupBuilders(dar)
  ...     except KeyError, e:
  ...         print ("Unable to setup builder for %s/%s/%s."
  ...		     % (dar.distrorelease.distribution.name,
  ...                   dar.distrorelease.name,
  ...                   dar.architecturetag))
  Unable to setup builder for ubuntu/warty/i386.
  Unable to setup builder for ubuntu/hoary/i386.
                
Since we don't have any builder available yet and the ETA to have
seems to be a little far, the next output are boring.

  >>> bm._archreleases
  {}

Scan active builders looking for information abut current jobs,
collect result of finished jobs, everything is stored directly in
the Launchpad DB.

  >>> bm.scanActiveBuilders()

Create a list of jobs separated by processor to turn the dispatch
process easier, than ry to dispatch them according his processor and
the available builder slaves at moment.
  
  >>> byproc = bm.sortAndSplitByProcessor()        
  >>> for proc, queueItems in byproc.iteritems():
  ...     bm.dispatchByProcessor(proc, queueItems)
