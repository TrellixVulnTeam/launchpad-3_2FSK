= ExternalBugTracker: Python =

This covers the implementation of the ExternalBugTracker class for Python
bugwatches.


== Basics ==

The Python bug tracker is a slight modification of the Roundup
bugtracker and as such the functionality for importing bugs from it is
housed within the Roundup ExternalBugTracker.


== Status Conversion ==

The basic Python bug statuses map to Launchpad bug statuses.
Roundup.convertRemoteStatus() handles the conversion.

Because Python bugtracker statuses are entirely numeric, we use the
convert_python_status() helper function to make the test more readable.

    >>> from canonical.launchpad.components.externalbugtracker import (
    ...     Roundup)
    >>> from canonical.launchpad.ftests.externalbugtracker import (
    ...     convert_python_status)
    >>> python = Roundup('http://bugs.python.org')
    >>> python.convertRemoteStatus(
    ...     convert_python_status('open', 'None')).title
    'New'
    >>> python.convertRemoteStatus(
    ...     convert_python_status('open', 'accepted')).title
    'Confirmed'
    >>> python.convertRemoteStatus(
    ...     convert_python_status('open', 'duplicate')).title
    'Confirmed'
    >>> python.convertRemoteStatus(
    ...     convert_python_status('open', 'fixed')).title
    'Fix Committed'
    >>> python.convertRemoteStatus(
    ...     convert_python_status('open', 'invalid')).title
    'Invalid'
    >>> python.convertRemoteStatus(
    ...     convert_python_status('open', 'later')).title
    'Confirmed'
    >>> python.convertRemoteStatus(
    ...     convert_python_status('open', 'out-of-date')).title
    'Invalid'
    >>> python.convertRemoteStatus(
    ...     convert_python_status('open', 'postponed')).title
    'Confirmed'
    >>> python.convertRemoteStatus(
    ...     convert_python_status('open', 'rejected')).title
    "Won't Fix"
    >>> python.convertRemoteStatus(
    ...     convert_python_status('open', 'remind')).title
    'Confirmed'
    >>> python.convertRemoteStatus(
    ...     convert_python_status('open', 'wontfix')).title
    "Won't Fix"
    >>> python.convertRemoteStatus(
    ...     convert_python_status('open', 'worksforme')).title
    'Invalid'
    >>> python.convertRemoteStatus(
    ...     convert_python_status('closed', 'None')).title
    "Won't Fix"
    >>> python.convertRemoteStatus(
    ...     convert_python_status('closed', 'accepted')).title
    'Fix Committed'
    >>> python.convertRemoteStatus(
    ...     convert_python_status('closed', 'fixed')).title
    'Fix Released'
    >>> python.convertRemoteStatus(
    ...     convert_python_status('closed', 'postponed')).title
    "Won't Fix"
    >>> python.convertRemoteStatus(
    ...     convert_python_status('pending', 'None')).title
    'Incomplete'
    >>> python.convertRemoteStatus(
    ...     convert_python_status('pending', 'postponed')).title
    "Won't Fix"

If the status isn't something that our Python ExternalBugTracker can
understand, Unknown will be returned and a warning logged.

    >>> python.convertRemoteStatus('7:13').title
    WARNING:...:Unknown status '7:13'
    'Unknown'

UNKNOWN_REMOTE_STATUS maps to Unknown without generating a warning. This
handles the case where we've tried to probe for a bug but didn't
succeed. For example, if the bug number was invalid.

    >>> from canonical.launchpad.interfaces import UNKNOWN_REMOTE_STATUS
    >>> python.convertRemoteStatus(UNKNOWN_REMOTE_STATUS).title
    'Unknown'


== Updating Bug Watches ==

First, we create some bug watches to test with:

    >>> from canonical.launchpad.database import BugTracker
    >>> from canonical.launchpad.interfaces import IBugSet, IPersonSet
    >>> from canonical.lp.dbschema import BugTrackerType

    >>> sample_person = getUtility(IPersonSet).getByEmail(
    ...     'test@canonical.com')

    >>> example_bug_tracker = BugTracker(
    ...     name="example-bugs",
    ...     title="Example.com Python",
    ...     bugtrackertype=BugTrackerType.ROUNDUP,
    ...     baseurl="http://bugs.python.org",
    ...     summary="Contains bugs for Example.com",
    ...     contactdetails="foo.bar@example.com",
    ...     owner=sample_person)

    >>> login('test@canonical.com')

    >>> example_bug = getUtility(IBugSet).get(10)
    >>> example_bugwatch = example_bug.addWatch(
    ...     example_bug_tracker, 1008, sample_person)

    >>> login('no-priv@canonical.com')

Collect the Example.com watches:

    >>> print_bugwatches(example_bug_tracker.watches)
    Remote bug 1008: None

And have a Python instance process them (we use a test-oriented Roundup
instance to save us from requiring a network connection):

    >>> from canonical.ftests.externalbugtracker import TestRoundup
    >>> python = TestRoundup(example_bug_tracker.baseurl)
    >>> python.updateBugWatches(example_bug_tracker.watches)
    >>> print_bugwatches(example_bug_tracker.watches)
    Remote bug 1008: 1:None

We'll add some more watches now.

    >>> from canonical.launchpad.interfaces import IBugSet, IBugWatchSet
    >>> print_bugwatches(example_bug_tracker.watches,
    ...     python.convertRemoteStatus)
    Remote bug 1008: New

    >>> remote_bugs = [
    ...     (1008, 'Confirmed'),
    ...     (1010, 'New'),
    ...     (1011, 'Confirmed'),
    ...     (1013, 'Fix Committed'),
    ...     (1014, "Won't Fix"),
    ...     (1018, 'Invalid'),
    ...     (1020, 'Invalid'),
    ...     (1021, 'Confirmed'),
    ...     (1025, 'Confirmed'),
    ...     (1028, "Won't Fix"),
    ...     (1031, 'Confirmed'),
    ...     (1033, 'Invalid'),
    ...     (1036, "Won't Fix"),
    ...     (1042, "Won't Fix"),
    ...     (1046, 'Fix Committed'),
    ...     (1048, "Won't Fix"),
    ...     (1053, 'Fix Released'),
    ... ]

    >>> bug_watch_set = getUtility(IBugWatchSet)
    >>> for remote_bug_id, remote_status in remote_bugs:
    ...     bug_watch = bug_watch_set.createBugWatch(
    ...         bug=example_bug, owner=sample_person,
    ...         bugtracker=example_bug_tracker,
    ...         remotebug=str(remote_bug_id))

    >>> python.trace_calls = True
    >>> python.updateBugWatches(example_bug_tracker.watches)
    CALLED urlopen(u'http://bugs.python.org/issue?...@startwith=0')

    >>> print_bugwatches(example_bug_tracker.watches,
    ...     python.convertRemoteStatus)
    Remote bug 1008: Confirmed
    Remote bug 1010: New
    Remote bug 1011: Confirmed
    Remote bug 1013: Fix Committed
    Remote bug 1014: Won't Fix
    Remote bug 1018: Invalid
    Remote bug 1020: Invalid
    Remote bug 1021: Confirmed
    Remote bug 1025: Confirmed
    Remote bug 1028: Won't Fix
    Remote bug 1031: Confirmed
    Remote bug 1033: Invalid
    Remote bug 1036: Won't Fix
    Remote bug 1042: Won't Fix
    Remote bug 1046: Fix Committed
    Remote bug 1048: Won't Fix
    Remote bug 1053: Fix Released

