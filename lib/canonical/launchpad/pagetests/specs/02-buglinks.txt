= Linking Specs and Bugs =

Specifications can be linked to bugs. Bug reports exposing problems that
will be solved by the specification are likely candidates for such
linking.

For example, in our sample data, bug #1 is about the lack of SVG support
in Mozilla Firefox. The 'svg-support' specification is exactly about SVG
support. That is why both were linked together. The linked bug appear in
the 'Related Bugs' portlet.

    >>> anon_browser.open(
    ...     'http://launchpad.dev/firefox/+spec/svg-support')
    >>> portlet = find_portlet(anon_browser.contents, 'Related bugs')
    >>> portlet.first('li', 'bug')
    <li class="bug">
    <a href=".../bugs/1">#1:
        Firefox does not support SVG</a>
    </li>


== Adding Links ==

Linking a bug report to a specification is done by using the
'Link to bug' link.

This link is only available to registered users:

    >>> anon_browser.getLink('Link to bug').click()
    Traceback (most recent call last):
      ...
    Unauthorized: ...

    >>> user_browser.open(
    ...     'http://launchpad.dev/firefox/+spec/svg-support')
    >>> user_browser.getLink('Link to bug').click()

To link the bug, the user enters the bug ID and clicks the 'Add'
button.

    >>> user_browser.getControl('Bug ID').value = '4'
    >>> user_browser.getControl('Link').click()

A notification message is displayed telling the user about the added
link.

    >>> soup = find_main_content(user_browser.contents)
    >>> soup.first('div', 'informational message')
    <div class="informational message">Added link to bug #4:
    ...Reflow problems with complex page layouts...</div>


== Removing Links ==

Oops, that was actually the wrong bug. So lets remove the link. This is
done by using the 'Remove bug link' link.

    >>> user_browser.getLink('Remove bug link').click()

The list of linked bugs is displayed. The user select the bug to remove
and click the 'Remove' button.

    >>> user_browser.getControl('#4: Reflow problems').selected = True
    >>> user_browser.getControl('Remove').click()

A confirmation is displayed to the user.

    >>> soup = find_main_content(user_browser.contents)
    >>> soup.first('div', 'informational message')
    <div class="informational message">Removed link to bug #4.</div>
