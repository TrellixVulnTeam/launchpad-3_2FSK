The TraverseWithGet class makes it easy to implement IPublishTraverse
just by defining a get() method like the one seen in Python's dict
class. In fact, a dict will work fine.

  >>> from canonical.lazr.rest.example.traversal import TraverseWithGet
  >>> class HasParent:
  ...     def __init__(self):
  ...         self.__parent__ = None

  >>> obj1, obj2 = HasParent(), HasParent()
  >>> context = {"name1":obj1, "name2":obj2}
  >>> request = object()
  >>> container = TraverseWithGet(context, request)

TraverseWithGet's publishTraverse() implementation automatically sets
the __parent__ attribute of the traversed-to object.

  >>> value = container.publishTraverse(request, "name1")
  >>> value == obj1
  True
  >>> value.__parent__ == context
  True

If the object cannot be found, publishTraverse raises a NotFound
error.

  >>> container.publishTraverse(request, "nosuchname")
  Traceback (most recent call last):
  ...
  NotFound: ... name: 'nosuchname'
