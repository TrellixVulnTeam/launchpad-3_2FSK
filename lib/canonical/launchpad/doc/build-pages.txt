= Build Pages =

For the subsequent tests we will use a specific 'pmount' build record
from the sampledata which happens to be in FAILEDTOBUILD status.

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.interfaces import (
    ...     BuildStatus, IDistributionSet)

    >>> ubuntu = getUtility(IDistributionSet).getByName('ubuntu')
    >>> hoary = ubuntu.getSeries('hoary')
    >>> hoary_pmount = hoary.getSourcePackage('pmount')

    >>> hoary_failed_build = hoary_pmount.getBuildRecords(
    ...      build_state=BuildStatus.FAILEDTOBUILD)[0]


== Build Structural Header and Menu ==

The IBuild record is adapted to a IStructuralHeaderPresentation by a
custom factory function, build_to_structuralheading, which reuses the
IBuild.archive header.

    >>> from canonical.launchpad.browser import build_to_structuralheading
    >>> import zope.i18n

As mentioned above, the build is targeted to the ubuntu PRIMARY
archive, so the page header refers to the distribution source package (see
browser.archive.archive_to_structuralheading).

    >>> hoary_failed_build_shp = build_to_structuralheading(
    ...     hoary_failed_build)
    >>> print zope.i18n.translate(hoary_failed_build_shp.getMainHeading())
    pmount

In a similar way, the menu presented in the build page depends on the
targeted archive. For instance the 'PPA' action-menu link is not
enabled for builds targeted to the PRIMARY archive.

    >>> from canonical.launchpad.browser import BuildContextMenu
    >>> build_menu = BuildContextMenu(hoary_failed_build)

    >>> print build_menu.links
    ['ppa', 'records', 'retry', 'rescore']

    >>> build_menu.is_ppa_build
    False

    >>> build_menu.ppa().enabled
    False

On the other hand, if we modify the build to be targeted to Celso's
PPA, its header will refer to the PPA owner.

    >>> from canonical.launchpad.interfaces import IPersonSet

    >>> cprov = getUtility(IPersonSet).getByName('cprov')
    >>> cprov_failed_build = cprov.archive.getBuildRecords(
    ...      build_state=BuildStatus.FAILEDTOBUILD)[0]

    >>> cprov_failed_build_shp = build_to_structuralheading(
    ...     cprov_failed_build)
    >>> print zope.i18n.translate(cprov_failed_build_shp.getMainHeading())
    Celso Providelo

Now we have a enabled 'PPA' action-menu item, since the build is
targeted to a PPA.

    >>> build_menu = BuildContextMenu(cprov_failed_build)

    >>> print build_menu.links
    ['ppa', 'records', 'retry', 'rescore']

    >>> build_menu.is_ppa_build
    True

    >>> build_menu.ppa().enabled
    True


== Build +index page ==

Setup an 'empty' request:

    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest
    >>> empty_request = LaunchpadTestRequest(form={})

Let's instantiate the view for +index:

    >>> from zope.component import getMultiAdapter
    >>> hoary_failed_build_view = getMultiAdapter(
    ...     (hoary_failed_build, empty_request), name="+index")

'BuildView.user_can_retry_build' property checks not only the
user's permissions to retry but also if a build is in a status that it
can be retried.

The build cannot be retried (see IBuild) because it's targeted to a
stable distroseries.

    >>> hoary_failed_build.can_be_retried
    False

    >>> hoary_failed_build_view.user_can_retry_build
    False

The Celso's PPA failed-to-build build record can be retried, since PPA
distroseries never freeze.

    >>> cprov_failed_build.can_be_retried
    True

While the build is now in a state to be rebuilt, the view property
still checks to ensure the user has the proper permission. Anonymous
users, obviously, don't have 'launchpad.Edit' permission on this
build.

    >>> cprov_failed_build_view = getMultiAdapter(
    ...     (cprov_failed_build, empty_request), name="+index")

    >>> cprov_failed_build_view.user_can_retry_build
    False

If accessed by an user with the required permission, Foo Bar in this
case, the 'user_can_retry_build' property finally returns True.

    >>> login("foo.bar@canonical.com")

    >>> cprov_failed_build_view = getMultiAdapter(
    ...     (cprov_failed_build, empty_request), name="+index")

    >>> cprov_failed_build_view.user_can_retry_build
    True

Buildd admins can retry any build as long is it's in a state that
permits it to be re-tried.  FAILEDTOBUILD is one of those states:

    >>> from canonical.launchpad.tests.test_publishing import (
    ...      SoyuzTestPublisher)
    >>> from canonical.launchpad.interfaces.publishing import (
    ...     PackagePublishingStatus)
    >>> test_publisher = SoyuzTestPublisher()
    >>> test_publisher.prepareBreezyAutotest()
    >>> test_source = test_publisher.getPubSource(
    ...     status=PackagePublishingStatus.PUBLISHED,
    ...     sourcename='sourceone')
    >>> [failed_build] = test_source.createMissingBuilds()
    >>> failed_build.buildstate = BuildStatus.FAILEDTOBUILD

    >>> failed_build.can_be_retried
    True

Mr "no privileges" has no rights to retry the build:

    >>> login("no-priv@canonical.com")
    >>> failed_build_view = getMultiAdapter(
    ...     (failed_build, empty_request), name="+index")
    >>> failed_build_view.user_can_retry_build
    False

If he is put in the buildd-admins group, however, he is now able to
retry it.

    >>> buildd_admins = getUtility(IPersonSet).getByName(
    ...     "launchpad-buildd-admins")
    >>> nopriv = getUtility(IPersonSet).getByName("no-priv")
    >>> login("foo.bar@canonical.com")
    >>> buildd_admins.addMember(nopriv, nopriv)

    >>> login("no-priv@canonical.com")
    >>> failed_build_view = getMultiAdapter(
    ...     (failed_build, empty_request), name="+index")
    >>> failed_build_view.user_can_retry_build
    True

See pagetests/soyuz/xx-build-record.txt for further information about
the build-retry permission system.
