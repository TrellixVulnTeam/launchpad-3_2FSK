This file lists all the karma events that Malone produces. First let's
import some stuff and define a function to help us make the
documentation cleaner:

    >>> from canonical.launchpad.interfaces import (IPersonSet, IMessageSet,
    ...     IKarmaActionSet, IDistributionSet, IBugSet)
    >>> foo_bar = getUtility(IPersonSet).getByEmail('foo.bar@canonical.com')

Setup an event listener to help ensure karma is assigned when it should.

    >>> from zope.event import notify
    >>> from canonical.launchpad.ftests.karma import KarmaAssignedEventListener
    >>> karma_helper = KarmaAssignedEventListener()
    >>> karma_helper.register_listener()

Foo Bar is the one that will get all the karma:

    >>> login('foo.bar@canonical.com')


Karma Actions
-------------

Create a bug:

    >>> from canonical.launchpad.event import (SQLObjectCreatedEvent,
    ...     SQLObjectModifiedEvent)
    >>> from canonical.launchpad.interfaces import CreateBugParams
    >>> debian = getUtility(IDistributionSet).getByName('debian')
    >>> params = CreateBugParams(
    ...     comment=u"Give me some karma!", title=u"New Bug", owner=foo_bar)
    >>> bug = debian.createBug(params)
    >>> notify(SQLObjectCreatedEvent(bug))
    Karma added: action=bugcreated, distribution=debian

Change the title of a bug:

    >>> from canonical.launchpad.webapp.snapshot import Snapshot
    >>> from canonical.launchpad.interfaces import IBug
    >>> old_bug = Snapshot(bug, providing=IBug)
    >>> bug.title = "Better Title"
    >>> notify(SQLObjectModifiedEvent(bug, old_bug, ['title']))
    Karma added: action=bugtitlechanged, distribution=debian

Change the description of a bug:

    >>> old_bug = Snapshot(bug, providing=IBug)
    >>> bug.description = "Description of bug"
    >>> notify(SQLObjectModifiedEvent(bug, old_bug, ['description']))
    Karma added: action=bugdescriptionchanged, distribution=debian

Add a web link to a bug:

    >>> from canonical.launchpad.interfaces import IBugExternalRefSet
    >>> link = getUtility(IBugExternalRefSet).createBugExternalRef(
    ...     bug, "http://www.com/", "Some link", foo_bar)
    >>> notify(SQLObjectCreatedEvent(link))
    Karma added: action=bugextrefadded, distribution=debian

Add a CVE reference to a bug:

    >>> from canonical.launchpad.interfaces import ICveSet
    >>> from canonical.launchpad.database import BugCve
    >>> from canonical.lp.dbschema import CveStatus
    >>> cve = getUtility(ICveSet).new('2003-1234', description="Blah blah",
    ...     status=CveStatus.CANDIDATE)
    >>> bugcve = BugCve(cve=cve, bug=bug)
    >>> notify(SQLObjectCreatedEvent(bugcve))
    Karma added: action=bugcverefadded, distribution=debian

Add watch for external bug to the bug:

    >>> from canonical.launchpad.interfaces import IBugTrackerSet
    >>> from canonical.launchpad.database import BugWatch
    >>> debbugs = getUtility(IBugTrackerSet)['debbugs']
    >>> bugwatch = BugWatch(
    ...     bug=bug,bugtracker=debbugs, remotebug=42, owner=foo_bar)
    >>> notify(SQLObjectCreatedEvent(bugwatch))
    Karma added: action=bugwatchadded, distribution=debian

Mark a bug task as fixed:

    >>> from canonical.launchpad.interfaces import IDistroBugTask
    >>> from canonical.lp.dbschema import BugTaskStatus
    >>> bugtask = bug.bugtasks[0]
    >>> old_bugtask = Snapshot(bugtask, providing=IDistroBugTask)
    >>> bugtask.transitionToStatus(BugTaskStatus.FIXRELEASED)
    >>> notify(SQLObjectModifiedEvent(bugtask, old_bugtask, ['status']))
    Karma added: action=bugfixed, distribution=debian

Reject a bug task:

    >>> old_bugtask = Snapshot(bugtask, providing=IDistroBugTask)
    >>> bugtask.transitionToStatus(BugTaskStatus.REJECTED)
    >>> notify(SQLObjectModifiedEvent(bugtask, old_bugtask, ['status']))
    Karma added: action=bugrejected, distribution=debian

Accept a bug task:

    >>> old_bugtask = Snapshot(bugtask, providing=IDistroBugTask)
    >>> bugtask.transitionToStatus(BugTaskStatus.CONFIRMED)
    >>> notify(SQLObjectModifiedEvent(bugtask, old_bugtask, ['status']))
    Karma added: action=bugaccepted, distribution=debian

Change a bug task's importance:

    >>> from canonical.lp.dbschema import BugTaskImportance
    >>> bugtask.importance = BugTaskImportance.HIGH
    >>> for importance in BugTaskImportance.items:
    ...     old_bugtask = Snapshot(bugtask, providing=IDistroBugTask)
    ...     bugtask.importance = importance
    ...     print importance.name
    ...     notify(SQLObjectModifiedEvent(bugtask, old_bugtask, ['importance']))
    UNDECIDED
    Karma added: action=bugtaskimportancechanged, distribution=debian
    WISHLIST
    Karma added: action=bugtaskimportancechanged, distribution=debian
    LOW
    Karma added: action=bugtaskimportancechanged, distribution=debian
    MEDIUM
    Karma added: action=bugtaskimportancechanged, distribution=debian
    HIGH
    Karma added: action=bugtaskimportancechanged, distribution=debian
    CRITICAL
    Karma added: action=bugtaskimportancechanged, distribution=debian
    UNKNOWN
    Karma added: action=bugtaskimportancechanged, distribution=debian

Create a new bug task on a product:

    >>> from canonical.launchpad.interfaces import IBugTaskSet, IProductSet
    >>> evolution = getUtility(IProductSet)['evolution']
    >>> evolution_task = getUtility(IBugTaskSet).createTask(
    ...     bug, product=evolution, owner=foo_bar)
    >>> notify(SQLObjectCreatedEvent(evolution_task))
    Karma added: action=bugtaskcreated, product=evolution

Create a new bug task on a distrorelease:

    >>> debian_woody = debian.getRelease("woody")
    >>> debian_woody_task = getUtility(IBugTaskSet).createTask(
    ...     bug, distrorelease=debian_woody, owner=foo_bar)
    >>> notify(SQLObjectCreatedEvent(debian_woody_task))
    Karma added: action=bugtaskcreated, distribution=debian

Accept a distro release task.

    >>> debian_woody_task.transitionToStatus(BugTaskStatus.UNCONFIRMED)
    >>> from canonical.launchpad.interfaces import IDistroReleaseBugTask
    >>> old_bugtask = Snapshot(
    ...     debian_woody_task, providing=IDistroReleaseBugTask)
    >>> debian_woody_task.transitionToStatus(BugTaskStatus.CONFIRMED)
    >>> notify(SQLObjectModifiedEvent(debian_woody_task, old_bugtask, ['status']))
    Karma added: action=bugaccepted, distribution=debian

Mark a bug as a duplicate:

    >>> bug_one = getUtility(IBugSet).get(1)
    >>> old_bug = Snapshot(bug, providing=IBug)
    >>> bug.duplicateof = bug_one

    (Notice how changing a bug with multiple bugtasks will assign karma to you
    once for each bugtask. This is so because we consider changes in a bug to
    be actual contributions to all bugtasks of that bug)
    >>> notify(SQLObjectModifiedEvent(bug, old_bug, ['duplicateof']))
    Karma added: action=bugmarkedasduplicate, product=evolution
    Karma added: action=bugmarkedasduplicate, distribution=debian
    Karma added: action=bugmarkedasduplicate, distribution=debian

Adding a comment generates a karma event, but gives no points:

    >>> from canonical.launchpad.interfaces import IBugMessageSet
    >>> comment = getUtility(IBugMessageSet).createMessage(
    ...     subject="foo", bug=bug, owner=foo_bar, content="bar")
    >>> notify(SQLObjectCreatedEvent(comment))
    Karma added: action=bugcommentadded, product=evolution
    Karma added: action=bugcommentadded, distribution=debian
    Karma added: action=bugcommentadded, distribution=debian

Now, let's ensure that we've covered every one of Malone's karma
actions, except for updating the obsolete "summary" and "priority":

    >>> from canonical.launchpad.database import KarmaCategory
    >>> bugs_category = KarmaCategory.byName('bugs')
    >>> bugs_karma_actions = bugs_category.karmaactions
    >>> summary_change = getUtility(
    ...     IKarmaActionSet).getByName('bugsummarychanged')
    >>> karma_helper.added_karma_actions.add(summary_change)
    >>> priority_change = getUtility(
    ...     IKarmaActionSet).getByName('bugtaskprioritychanged')
    >>> karma_helper.added_karma_actions.add(priority_change)
    >>> karma_helper.added_karma_actions == set(bugs_karma_actions)
    True

Unregister the event listener to make sure we won't interfere in other tests.

    >>> karma_helper.unregister_listener()

XXX Matthew Paul Thomas 2006-03-22: On 2007-03-23, a year after bug summaries
were removed, all the karma gained from updating bug summaries will have
expired. Then the 'bugsummarychanged' row should be removed from the database,
and summary_change can be removed from this test. The same applies to the
'bugtaskprioritychanged' row on about 2007-05-15.
