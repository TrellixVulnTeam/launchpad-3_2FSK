= Person and the Support Tracker =

== searchQuestions() ==

IPerson defines a searchQuestions() method which can be used to
select all or a subset of the support requests in which the person is
involved. This includes tickets which the person created, is assigned
to, is subscribed to, commented on, or answered. Various subsets can
be selected by using the following criteria status, search_text and
participation type.

    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> personset = getUtility(IPersonSet)
    >>> foo_bar = personset.getByEmail('foo.bar@canonical.com')

=== search_text ===

The search_text parameter will limit the tickets to those matching
the query using the regular full text algorithm.

    >>> for ticket in foo_bar.searchQuestions(search_text='firefox'):
    ...     print ticket.title, ticket.status.title
    Firefox loses focus and gets stuck              Open
    mailto: problem in webpage                      Solved
    Newly installed plug-in doesn't seem to be used Answered

=== sort ===

When using the search_text criteria, the default is to sort the results
by relevancy. One can use the sort parameter to change that. It takes
one of the constant defined in the QuestionSort enumeration.

    >>> from canonical.lp.dbschema import QuestionSort
    >>> for ticket in foo_bar.searchQuestions(
    ...         search_text='firefox', sort=QuestionSort.OLDEST_FIRST):
    ...     print ticket.id, ticket.title, ticket.status.title
    4 Firefox loses focus and gets stuck              Open
    6 Newly installed plug-in doesn't seem to be used Answered
    9 mailto: problem in webpage                      Solved

When no text search is done, the default sort order is
QuestionSort.NEWEST_FIRST.

    >>> for ticket in foo_bar.searchQuestions():
    ...     print ticket.id, ticket.title, ticket.status.title
    11 Continue playing after shutdown                      Open
    10 Play DVDs in Totem                                   Answered
     9 mailto: problem in webpage                           Solved
     8 Installation of Java Runtime Environment for Mozilla Answered
     7 Slow system                                          Needs information
     6 Newly installed plug-in doesn't seem to be used      Answered
     4 Firefox loses focus and gets stuck                   Open

=== status ===

The last searches showed that by default, not all statuses are searched
for by default (they excluded expired and invalid tickets). The status
parameter can be used to control the list of statuses to select:

    >>> from canonical.lp.dbschema import QuestionStatus
    >>> for ticket in foo_bar.searchQuestions(status=QuestionStatus.INVALID):
    ...     print ticket.title, ticket.status.title
    Firefox is slow and consumes too much RAM   Invalid

The status parameter can also take a list of statuses.

    >>> for ticket in foo_bar.searchQuestions(
    ...         status=[QuestionStatus.SOLVED, QuestionStatus.INVALID]):
    ...     print ticket.title, ticket.status.title
    mailto: problem in webpage                  Solved
    Firefox is slow and consumes too much RAM   Invalid

=== participation ===

By default, any types of relationship to a ticket is considered by
searchQuestions. This can customized through the participation parameter.
It takes one or a list of constants from the QuestionParticipation enumeration.

To select only tickets on which the person commented, the
QuestionParticipation.COMMENTER is used:

    >>> from canonical.lp.dbschema import QuestionParticipation
    >>> for ticket in foo_bar.searchQuestions(
    ...         participation=QuestionParticipation.COMMENTER, status=None):
    ...     print ticket.title
    Continue playing after shutdown
    Play DVDs in Totem
    mailto: problem in webpage
    Installation of Java Runtime Environment for Mozilla
    Newly installed plug-in doesn't seem to be used

QuestionParticipation.SUBSCRIBER will only select the tickets to which
the person is subscribed to:

    >>> for ticket in foo_bar.searchQuestions(
    ...         participation=QuestionParticipation.SUBSCRIBER, status=None):
    ...     print ticket.title
    Slow system
    Firefox is slow and consumes too much RAM

QuestionParticipation.OWNER selects the tickets that the person created:

    >>> for ticket in foo_bar.searchQuestions(
    ...         participation=QuestionParticipation.OWNER, status=None):
    ...     print ticket.title
    Slow system
    Firefox loses focus and gets stuck
    Firefox is slow and consumes too much RAM

QuestionParticipation.ANSWERER selects the tickets for which the person
was marked as the answerer:

    >>> for ticket in foo_bar.searchQuestions(
    ...         participation=QuestionParticipation.ANSWERER, status=None):
    ...     print ticket.title
    mailto: problem in webpage
    Firefox is slow and consumes too much RAM

QuestionParticipation.ASSIGNEE selects that tickets which are assigned to
the person:

    >>> for ticket in foo_bar.searchQuestions(
    ...         participation=QuestionParticipation.ASSIGNEE, status=None):
    ...     print ticket.title

If a list of these constants is used, all of these participation types
will be selected:

    >>> for ticket in foo_bar.searchQuestions(
    ...         participation=[
    ...             QuestionParticipation.OWNER, QuestionParticipation.ANSWERER],
    ...         status=None):
    ...     print ticket.title
    mailto: problem in webpage
    Slow system
    Firefox loses focus and gets stuck
    Firefox is slow and consumes too much RAM

=== language ===

By default, tickets in all languages are included in the results. It is
possible to filter tickets by the language they were writtenin . One or
a list of ILanguage object should be passed in the language parameter to
specify the language filter.

    >>> from canonical.launchpad.interfaces import ILanguageSet
    >>> spanish = getUtility(ILanguageSet)['es']
    >>> english = getUtility(ILanguageSet)['en']

Foo bar doesn't have any tickets written in Spanish.

    >>> for ticket in foo_bar.searchQuestions(language=spanish):
    ...     print ticket.title

But carlos has one.

    >>> carlos = getUtility(IPersonSet).getByName('carlos')
    >>> for ticket in carlos.searchQuestions(
    ...     language=[english, spanish]):
    ...     [ticket.title, ticket.language.code]
    [u'Problema al recompilar kernel con soporte smp (doble-n\xfacleo)',
     u'es']

=== needs_attention ===

The method accept a parameter called needs_attention which only selects
the tickets that needs attention from the person. This includes tickets
owned by the person in the ANSWERED or NEEDSINFO state. It also includes
tickets on which the person requested for more information or gave an
answer and that are back in the OPEN state.

    >>> for ticket in foo_bar.searchQuestions(needs_attention=True):
    ...     print ticket.status.title, ticket.owner.displayname, ticket.title
    Open              Sample Person Continue playing after shutdown
    Needs information Foo Bar       Slow system

=== Combination ===

The returned sets of tickets is the intersection of the sets delimited
by each criteria:

    >>> for ticket in foo_bar.searchQuestions(
    ...         search_text='firefox OR Java', status=QuestionStatus.ANSWERED,
    ...         participation=QuestionParticipation.COMMENTER):
    ...     print ticket.title, ticket.status.title
    Installation of Java Runtime Environment for Mozilla    Answered
    Newly installed plug-in doesn't seem to be used         Answered

== getSupportedLanguages() ==

IPerson also provides a getSupportedLanguages method which can be used
to retrieve the list of languages in which the person or team can
provide support.

    # Helper to see easily the languages in a list.
    >>> def language_codes(languages):
    ...     return sorted(str(language.code) for language in languages)

For a person, it is the same list than its list of known languages,
with the addition that English is always assumed to be supported:

    >>> sample_person = getUtility(IPersonSet).getByName('name16')
    >>> language_codes(sample_person.languages)
    []
    >>> language_codes(sample_person.getSupportedLanguages())
    ['en']

    >>> carlos = getUtility(IPersonSet).getByName('carlos')
    >>> language_codes(carlos.languages)
    ['ca', 'es']
    >>> language_codes(carlos.getSupportedLanguages())
    ['ca', 'en', 'es']

Also, note that all English variants will be excluded.

    >>> daf = getUtility(IPersonSet).getByName('daf')
    >>> language_codes(daf.languages)
    ['cy', 'en_GB', 'ja']
    >>> language_codes(daf.getSupportedLanguages())
    ['cy', 'en', 'ja']

For team with a list of known languages set, the same rule applies:

    >>> from canonical.launchpad.interfaces import ILanguageSet
    >>> ubuntu_team = getUtility(IPersonSet).getByName('ubuntu-team')
    >>> esperanto = getUtility(ILanguageSet)['eo']
    >>> ubuntu_team.addLanguage(esperanto)

    >>> language_codes(ubuntu_team.languages)
    ['eo']
    >>> language_codes(ubuntu_team.getSupportedLanguages())
    ['en', 'eo']

But when the list of known languages is not set, the list of supported
languages will be the union of all the members supported languages.

    >>> rosetta_admins = getUtility(IPersonSet).getByName(
    ...     'rosetta-admins')

    >>> carlos.inTeam(rosetta_admins)
    True
    >>> daf.inTeam(rosetta_admins)
    True

    >>> language_codes(rosetta_admins.languages)
    []
    >>> language_codes(rosetta_admins.getSupportedLanguages())
    ['ca', 'cy', 'en', 'es', 'ja']

These rules are applied recursively when teams are nested one inside
the other. For example, the 'Guadamen' team includes the Ubuntu Team
and doesn't have its list of known languages set, so it will be the
languages of the Ubuntu Team that will be used.

    >>> celso = getUtility(IPersonSet).getByName('cprov')
    >>> celso.inTeam(ubuntu_team)
    True
    >>> celso.addLanguage(getUtility(ILanguageSet)['es'])
    >>> language_codes(celso.languages)
    ['es']

    >>> guadamen_team = getUtility(IPersonSet).getByName('guadamen')
    >>> ubuntu_team.inTeam(guadamen_team)
    True

    >>> language_codes(guadamen_team.languages)
    []
    >>> language_codes(guadamen_team.getSupportedLanguages())
    ['en', 'eo']

    # Empty the list of known languages to use the list of the
    # Ubuntu team members.
    >>> ubuntu_team.removeLanguage(esperanto)
    >>> language_codes(guadamen_team.getSupportedLanguages())
    ['en', 'es']

== getQuestionLanguages() ==

IPerson also defines a getQuestionLanguages() attribute which contains the set
of languages used by all of the tickets in which this person is
involved.

    >>> sorted(language.code for language in foo_bar.getQuestionLanguages())
    [u'en']

This includes tickets which the person owns. But also, tickets that the
user subscribed to.

    >>> from canonical.launchpad.interfaces import IQuestionSet
    >>> pt_BR_ticket = getUtility(IQuestionSet).get(13)
    >>> login('foo.bar@canonical.com')
    >>> pt_BR_ticket.subscribe(foo_bar)
    <QuestionSubscription...>

    >>> sorted(language.code for language in foo_bar.getQuestionLanguages())
    [u'en', u'pt_BR']

And also tickets for which he's the answerer.

    >>> es_ticket = getUtility(IQuestionSet).get(12)
    >>> es_ticket.reject(foo_bar, 'Reject ticket.')
    <QuestionMessage...>

    >>> sorted(language.code for language in foo_bar.getQuestionLanguages())
    [u'en', u'es', u'pt_BR']

As well, as ticket which are assigned to the user.

    >>> pt_BR_ticket.assignee = carlos
    >>> from canonical.database.sqlbase import flush_database_updates
    >>> flush_database_updates()

    >>> sorted(language.code for language in carlos.getQuestionLanguages())
    [u'es', u'pt_BR']

And tickets on which the user commented:

    >>> en_ticket = getUtility(IQuestionSet).get(1)
    >>> login('carlos@canonical.com')
    >>> en_ticket.addComment(carlos, 'A simple comment.')
    <QuestionMessage...>

    >>> sorted(language.code for language in carlos.getQuestionLanguages())
    [u'en', u'es', u'pt_BR']
