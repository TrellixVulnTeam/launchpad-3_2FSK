
This test demonstrates the behaviour of initZopeless with implicitBegin=False,
especially the auto-reconnect on ztm.begin() (but not at any other time).

Make a TCP proxy to postgres. Note we have to match the version of
twisted we use with our version of Python.

    >>> import os
    >>> from canonical.database.ftests import PortForwardTestSetup
    >>> portforward = PortForwardTestSetup()
    >>> portforward.setUp()

Init Zopeless via the proxy, with implicit begin disabled.

    >>> from canonical.lp import initZopeless
    >>> ztm = initZopeless(dbhost='localhost port=5555',
    ...                    implicitBegin=False)

Without explicitly beginning, _connection is None, so queries will fail:

    >>> from canonical.launchpad.database import Person
    >>> print Person._connection
    None
    >>> Person.get(1)
    Traceback (most recent call last):
    ...
    AttributeError: 'NoneType' object has no attribute 'cache'

Begin, and issue a query:

    >>> ztm.begin()
    >>> print Person.get(1).name
    sabdfl

Errors in queries still propagate as normal:

    >>> print Person.select("garbage invalid sql")[0]
    Traceback (most recent call last):
    ...
    ProgrammingError: ERROR:  syntax error at or near "invalid" ...
    ...

Start a new transaction, to show that everything will recover smoothly.

    >>> ztm.abort()
    >>> print Person._connection
    None
    >>> ztm.begin()
    >>> print Person.get(1).name
    sabdfl

Break the connection by stopping the proxy.

    >>> portforward.tearDown()

Executing a query now blocks until the database connection can be
reestablished.

    >>> import threading
    >>> before_txn = threading.Event()
    >>> thread_result = []
    >>> def foo():
    ...     before_txn.set()
    ...     ztm.begin()
    ...     name = Person.get(1).name
    ...     thread_result.append(name)

Create the thread and ensure that it has started:

    >>> thread = threading.Thread(target=foo)
    >>> thread.start()
    >>> before_txn.wait()

Execution does complete, since the database connection can not be
established:

    >>> thread.join(1)
    >>> thread.isAlive()
    True

# TODO: test that the disconnection is logged -- spiv

Restart the proxy:

    >>> portforward.setUp()

Now, our blocked thread should've finished successfully.

    >>> thread.join()
    >>> thread.isAlive()
    False
    >>> thread_result
    [u'sabdfl']

The interrupted transaction in this thread still fails.

    >>> Person.get(2)
    Traceback (most recent call last):
    ...
    ProgrammingError: server closed the connection unexpectedly
    ...

Uninstall the zopeless transaction manager.

    >>> ztm.uninstall()

If we init Zopeless via the proxy, with implicitBegin disabled and using a
username that doesn't exist, it'll fail to connect and raise an exception (as
if implicitBegin was enabled):

    >>> ztm = initZopeless(dbuser='nonexistent', dbhost='localhost port=5555',
    ...                    implicitBegin=False)
    >>> ztm.begin()
    Traceback (most recent call last):
    ...
    OperationalError: ...
    >>> ztm.uninstall()

Clean up the proxy.

    >>> portforward.tearDown()

