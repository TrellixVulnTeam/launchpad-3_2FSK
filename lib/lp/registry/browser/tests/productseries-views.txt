= Set Up =

We will have to check for a BranchJob being created for a branch, so
let's put this check in a convenient function.

    >>> from zope.component import getUtility

For these tasks we need to log in.

    >>> login('foo.bar@canonical.com')

== ProductSeries view ==

The default view for the productseries includes a script that augments the
'Create milestone' link to show a formoverlay to create a milestone and
update the milestones and releases table.

    >>> from canonical.launchpad.testing.pages import find_tag_by_id

    >>> product = factory.makeProduct(name='app')
    >>> series = factory.makeSeries(name='simple', product=product)
    >>> view = create_view(series, '+index', principal=product.owner)
    >>> script = find_tag_by_id(view.render(), 'milestone-script')
    >>> print script
    <script id="milestone-script" type="text/javascript">
        YUI().use(... 'lp.milestoneoverlay', 'lp.milestonetable'...
            var series_uri = '/app/simple';
            var milestone_form_uri = '.../app/simple/+addmilestone/++form++';
            var milestone_row_uri_template =
                '/app/+milestone/{name}/+productseries-table-row';
            var milestone_rows_id = '#milestone-rows';...
            Y.on('domready', function () {
                var create_milestone_link = Y.get('.menu-link-create_milestone');
                create_milestone_link.addClass('js-action');...
                Y.lp.milestoneoverlay.attach_widget(config);...
                Y.lp.milestonetable.setup(table_config);...

If the Create milestone link is not enabled, the script is not present.

    >>> a_user = factory.makePerson(name="hedgehog")
    >>> login_person(a_user)
    >>> view = create_view(series, '+index', principal=a_user)
    >>> content = view.render()
    >>> print find_tag_by_id(content, 'milestone-script')
    None
    >>> 'var milestone_form_uri' in content
    False

The view also sets the class of the milestone and releases table which can
be removed by the in-page script. If the product series has no milestones,
the class table is 'listing unseen'.

    >>> print view.milestone_table_class
    listing unseen

When the product series has milestones, the class is just 'listing'.

    >>> milestone = series.newMilestone('12', code_name='twelve')
    >>> view = create_view(series, '+index')
    >>> print view.milestone_table_class
    listing

Obsolete series are less interesting that other series. The ProductSeriesView
has an is_obsolete property that templates can check when choosing the content
to display.

    >>> from lp.registry.interfaces.distroseries import DistroSeriesStatus

    >>> print series.status
    Active Development
    >>> view.is_obsolete
    False

    >>> series.status = DistroSeriesStatus.OBSOLETE
    >>> view = create_view(series, '+index')
    >>> view.is_obsolete
    True


Edit ProductSeries
------------------

The productseries +edit view provides a label and page_title for the page.

    >>> view = create_initialized_view(series, '+edit')
    >>> print view.label
    Edit App series simple

    >>> print view.page_title
    Edit App series simple

The view provides a cancel_url and a next_url.

    >>> print view.cancel_url
    http://launchpad.dev/app/simple

    >>> print view.next_url
    http://launchpad.dev/app/simple


Administer Productseries
------------------------

The productseries +review view allows an admin to administer the name and
parent project.

    >>> from canonical.launchpad.webapp.authorization import check_permission

    >>> login('admin@canonical.com')
    >>> view = create_initialized_view(series, '+review')
    >>> check_permission('launchpad.Admin', view)
    True

    >>> view.field_names
    ['product', 'name']

The view provides a label and page_title.

    >>> print view.label
    Administer App series simple

    >>> print view.page_title
    Administer App series simple

The view provides a cancel_url and a next_url.

    >>> print view.cancel_url
    http://launchpad.dev/app/simple

Users without edit permission cannot access the view.

    >>> login_person(a_user)
    >>> view = create_view(series, name='+review')
    >>> check_permission('launchpad.Admin', view)
    False


Link branch
-----------

The +linkbranch view allows a user to associate a series with a branch. It
provides a label and a page_title.

    >>> view = create_initialized_view(series, '+linkbranch')
    >>> print view.label
    Link an existing branch to App series simple

    >>> print view.page_title
    Link an existing branch to App series simple

There is a cancel_url property too.

    >>> print view.cancel_url
    http://launchpad.dev/app/simple


Delete ProductSeries
--------------------

Users with edit permission may delete a project's series. This person is
often the project's owner or series driver who has setup the series by
mistake.

    >>> from datetime import datetime
    >>> from pytz import UTC

    >>> product = factory.makeProduct(name="field", displayname='Field')
    >>> productseries = factory.makeProductSeries(
    ...     product=product, name='rabbit')

    # Hack the creation date for testing purposes.
    >>> test_date = datetime(2009, 05, 01, 19, 34, 24, tzinfo=UTC)
    >>> productseries.datecreated = test_date

Users without edit permission cannot access the view.

    >>> from canonical.launchpad.webapp.authorization import check_permission

    >>> login('no-priv@canonical.com')
    >>> view = create_view(productseries, name='+delete')
    >>> check_permission('launchpad.Edit', view)
    False

The project owner can access the view.

    >>> login_person(product.owner)
    >>> view = create_view(productseries, name='+delete')
    >>> check_permission('launchpad.Edit', view)
    True

The delete view has a label and page_title to explain what it does.

    >>> print view.label
    Delete Field series rabbit

    >>> print view.page_title
    Delete Field series rabbit

The view has a a next_url to the product used when the delete is successful,
though it is None by default. There is a cancel_url that links to the series.

    >>> print view.next_url
    None

    >>> print view.cancel_url
    http://launchpad.dev/field/rabbit

There are helper properties that list the associates objects with the
series, the most important of which are milestones. Bugtasks and
specifications that will be unassigned, and release files that will be
deleted are available.

    >>> view.milestones
    []
    >>> view.bugtasks
    []
    >>> view.specifications
    []
    >>> view.product_release_files
    []

Most series that are deleted do not have any related objects, but a small
portion do.

    >>> milestone_one = productseries.newMilestone('0.1', code_name='one')
    >>> release_one = milestone_one.createProductRelease(
    ...     product.owner, test_date)
    >>> milestone_one.active = False
    >>> milestone_two = productseries.newMilestone('0.2', code_name='two')
    >>> specification = factory.makeSpecification(product=product)
    >>> specification.milestone = milestone_one
    >>> bug = factory.makeBug(product=product)
    >>> bugtask = bug.bugtasks[0]
    >>> bugtask.milestone = milestone_two

    >>> view = create_view(productseries, name='+delete')
    >>> [milestone.name for milestone in view.milestones]
    [u'0.2', u'0.1']
    >>> view.has_bugtasks_and_specifications
    True
    >>> [bugtask.milestone.name for bugtask in view.bugtasks]
    [u'0.2']
    >>> [spec.milestone.name for spec in view.specifications]
    [u'0.1']

    # Listing and deleting product release files is done in the story
    # because they require the Librarian to be running.

Series that are the active focus of development cannot be deleted. The
view's can_delete property checks this rule.

    >>> productseries.is_development_focus
    False
    >>> view.can_delete
    True

    >>> active_series = product.getSeries('trunk')
    >>> active_series.is_development_focus
    True
    >>> active_view = create_view(active_series, '+delete')
    >>> active_view.can_delete
    False

The delete action will not delete a series that is the active focus of
development.

    >>> transaction.commit()
    >>> form = {
    ...     'field.actions.delete': 'Delete this Series',
    ...     }
    >>> active_view = create_initialized_view(
    ...     active_series, '+delete', form=form)
    >>> for error in active_view.errors:
    ...     print error
    You cannot delete a series that is the focus of development. Make another
    series the focus of development before deleting this one.
    >>> print active_series.product.name
    field

Calling the view's delete action on a series that can be deleted will
untarget the bugtasks and specifications that are targeted to the
series' milestones. The milestones, releases, and release files are
deleted.

    >>> view = create_initialized_view(productseries, '+delete', form=form)
    >>> for notification in view.request.response.notifications:
    ...     print notification.message
    Series rabbit deleted.

    >>> print view.next_url
    http://launchpad.dev/field
    >>> [milestone for milestone in product.all_milestones]
    []
    >>> [release for release in  product.releases]
    []
    >>> print specification.milestone
    None
    >>> print bugtask.milestone
    None

The series was not actually deleted because there are problematic objects
like translations. The series are assigned to the Obsolete Junk project.
The series name is changed to 'product_name-series_name-date_created' to
avoid conflicts.

    >>> from canonical.launchpad.interfaces.launchpad import (
    ...     ILaunchpadCelebrities)

    >>> obsolete_junk = getUtility(ILaunchpadCelebrities).obsolete_junk
    >>> productseries.product == obsolete_junk
    True
    >>> print productseries.name
    field-rabbit-20090501-193424


Linking packages
----------------

Distrobution sourcepackages can be linked to product series using the
+addpackage named view.

    >>> ubuntu = getUtility(ILaunchpadCelebrities).ubuntu
    >>> hoary = ubuntu.getSeries('hoary')
    >>> sourcepackagename = factory.makeSourcePackageName('hot')
    >>> sourcepackage = factory.makeSourcePackage(
    ...     sourcepackagename=sourcepackagename, distroseries=hoary)
    >>> product = factory.makeProduct(name="hot", displayname='Hot')
    >>> productseries = factory.makeProductSeries(
    ...     product=product, name='hotter')
    >>> productseries.sourcepackages
    []

The view has a label and requires a distro series, source package name,
and a packaging contents.

    >>> view = create_view(productseries, '+addpackage')
    >>> print view.label
    Add distribution packaging record

    >>> print view.field_names
    ['distroseries', 'sourcepackagename', 'packaging']

    >>> form = {
    ...     'field.distroseries': 'ubuntu/hoary',
    ...     'field.sourcepackagename': 'hot',
    ...     'field.packaging': 'Primary Product',
    ...     'field.actions.continue': 'Continue',
    ...     }
    >>> view = create_initialized_view(
    ...     productseries, '+addpackage', form=form)
    >>> view.errors
    []
    >>> for package in productseries.sourcepackages:
    ...     print package.name
    hot

It is an error to link a series to the same package twice.

    >>> form = {
    ...     'field.distroseries': 'ubuntu/hoary',
    ...     'field.sourcepackagename': 'hot',
    ...     'field.packaging': 'Primary Product',
    ...     'field.actions.continue': 'Continue',
    ...     }
    >>> view = create_initialized_view(
    ...     productseries, '+addpackage', form=form)
    >>> for error in view.errors:
    ...     print error
    This series is already packaged in Hoary

