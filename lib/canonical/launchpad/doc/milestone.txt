Milestones
==========

A milestone is a significant event in a project. A release of a new version of
a piece of software is a significant event (we're geeks, give us a break.) In
Malone, milestones can be defined to assign bug fixes to a specific release of
some software.

This document is about milestones in Malone.

Working with Milestones in Malone
=================================

All Milestone creation and retrieval is done through IMilestoneSet.
IMilestoneSet can be accessed as a utility.

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.interfaces import IMilestoneSet
    >>> milestoneset = getUtility(IMilestoneSet)

To retrieve all milestones, iterate over an IMilestoneSet object:

    >>> [ms.id for ms in milestoneset]
    [1, 2]

To create a new Milestone, use the .newMilestone(name, dateexpected=None)
method of a ProductSeries or DistroRelease:

    >>> from canonical.launchpad.interfaces import IProductSet
    >>> productset = getUtility(IProductSet)
    >>> upstream_firefox = productset.get(4)
    >>> ff_onedotzero = upstream_firefox.getSeries('1.0')
    >>> firefox_ms = ff_onedotzero.newMilestone(name = "1.0rc1")
    >>> print firefox_ms.name
    1.0rc1

To retrieve a specific Milestone, use IMilestoneSet.get:

    >>> firefox_ms_1_0 = milestoneset.get(1)
    >>> print firefox_ms_1_0.name
    1.0
    >>> print firefox_ms_1_0.displayname
    Mozilla Firefox: 1.0

Of course, you can also get them off a ProductSeries or DistroRelease using
the getMilestone() method:

    >>> ms = ff_onedotzero.getMilestone('1.0rc1')
    >>> print ms.name
    1.0rc1

Trying to retrieve a milestone that does not exist from a product will
return None:

    >>> non_ms = upstream_firefox.getMilestone('0.99x1')
    >>> print non_ms
    None

Now, lets test all of that for DistroReleases too!

    >>> from canonical.launchpad.interfaces import IDistributionSet
    >>> kubuntu = getUtility(IDistributionSet).getByName('kubuntu')
    >>> krunch = kubuntu.getRelease('krunch')
    >>> new_ms = krunch.newMilestone('1.3rc2')
    >>> print new_ms.name
    1.3rc2
    >>> print new_ms.distribution.name
    kubuntu
    >>> print new_ms.distrorelease.name
    krunch
    >>> print kubuntu.getMilestone('foo2.3')
    None
    >>> print kubuntu.getMilestone('1.3rc2').dateexpected
    None

Trying to retrieve a milestone that doesn't exist will raise a
zope.exceptions.NotFoundError:

    >>> milestoneset.get(-1)
    Traceback (most recent call last):
      ...
    NotFoundError: 'Milestone with ID -1 does not exist'

