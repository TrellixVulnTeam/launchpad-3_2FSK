= Editing PPA dependencies =

The PPA 'Edit dependency' view allows users to remove or add
dependencies to their PPAs via the web UI.

Only the owner of the PPA and Launchpad administrators may access this page.

Anonymous and unprivileged users cannot access Celso's PPA interface to
edit dependencies, even if they try the URL directly.

    >>> anon_browser.open('http://launchpad.dev/~cprov/+archive')
    >>> anon_browser.getLink('Edit dependencies').click()
    Traceback (most recent call last):
    ...
    LinkNotFoundError

    >>> anon_browser.open(
    ...     'http://launchpad.dev/~cprov/+archive/ppa/+edit-dependencies')
    Traceback (most recent call last):
    ...
    Unauthorized: ..., 'launchpad.Edit')

    >>> user_browser.open('http://launchpad.dev/~cprov/+archive/ppa')
    >>> user_browser.getLink('Edit dependencies').click()
    Traceback (most recent call last):
    ...
    LinkNotFoundError

    >>> user_browser.open(
    ...    'http://launchpad.dev/~cprov/+archive/ppa/+edit-dependencies')
    Traceback (most recent call last):
    ...
    Unauthorized: ..., 'launchpad.Edit')

Only Celso and an administrator can access the 'Edit dependencies'
page for Celso's PPA.

    >>> cprov_browser = setupBrowser(
    ...     auth="Basic celso.providelo@canonical.com:cprov")
    >>> cprov_browser.open('http://launchpad.dev/~cprov/+archive/ppa')
    >>> cprov_browser.getLink('Edit dependencies').click()
    >>> print cprov_browser.url
    http://launchpad.dev/~cprov/+archive/ppa/+edit-dependencies
    >>> cprov_browser.title
    'Edit dependencies for PPA for Celso Providelo'

    >>> admin_browser.open('http://launchpad.dev/~cprov/+archive/ppa')
    >>> admin_browser.getLink('Edit dependencies').click()
    >>> print admin_browser.url
    http://launchpad.dev/~cprov/+archive/ppa/+edit-dependencies
    >>> admin_browser.title
    'Edit dependencies for PPA for Celso Providelo'

Once accessed the page provides a way to remove recorded dependencies
via the POST form.

    >>> def print_ppa_dependencies(contents):
    ...     empty_dep = find_tag_by_id(contents, 'empty-dependencies')
    ...     if empty_dep is not None:
    ...         print extract_text(empty_dep)
    ...     dependencies = find_tags_by_class(contents, 'ppa_dependency_row')
    ...     for dep in dependencies:
    ...         print extract_text(dep)

When the 'Edit dependencies' page is loaded it will list all dependencies.

    >>> print_ppa_dependencies(admin_browser.contents)
    No dependencies recorded for this PPA yet.


== Adding dependencies ==

As we can see Celso's PPA contains no dependencies, let's try
to add some.

The adding dependency input offers a interface to look for PPAs based
on the PPA fti and/or the PPA owner's fti via a IHugeVocabulary
popup. A valid term is the owner username.

An empty or unknown term results in an error.

    >>> admin_browser.getControl("PPA Dependency").value = ''
    >>> admin_browser.getControl("Add Dependency").click()
    >>> messages = get_feedback_messages(admin_browser.contents)
    >>> for msg in messages:
    ...     print msg
    There is 1 error.
    Choose one dependency to add.

    >>> admin_browser.getControl("PPA Dependency").value = 'whatever'
    >>> admin_browser.getControl("Add Dependency").click()
    >>> messages = get_feedback_messages(admin_browser.contents)
    >>> for msg in messages:
    ...     print msg
    There is 1 error.
    Choose one dependency to add.

When a valid PPA is chosen the dependency is added, a notification
is rendered on top of the page and the list of dependencies available
for removal is updated.

    >>> admin_browser.getControl("PPA Dependency").value = 'sabdfl'
    >>> admin_browser.getControl("Add Dependency").click()
    >>> messages = get_feedback_messages(admin_browser.contents)
    >>> for msg in messages:
    ...     print msg
    Dependency added: PPA for Mark Shuttleworth

    >>> print_ppa_dependencies(admin_browser.contents)
    PPA for Mark Shuttleworth

Trying to add a dependency that is already recorded results in a error.

    >>> admin_browser.getControl("PPA Dependency").value = 'sabdfl'
    >>> admin_browser.getControl("Add Dependency").click()
    >>> messages = get_feedback_messages(admin_browser.contents)
    >>> for msg in messages:
    ...     print msg
    There is 1 error.
    This dependency is already recorded.

Trying to add a dependency for the context PPA itself also results in
a error.

    >>> admin_browser.getControl("PPA Dependency").value = 'cprov'
    >>> admin_browser.getControl("Add Dependency").click()
    >>> messages = get_feedback_messages(admin_browser.contents)
    >>> for msg in messages:
    ...     print msg
    There is 1 error.
    An archive should not depend on itself.

If it's a new dependency everything is fine.

    >>> admin_browser.getControl("PPA Dependency").value = 'no-priv'
    >>> admin_browser.getControl("Add Dependency").click()
    >>> messages = get_feedback_messages(admin_browser.contents)
    >>> for msg in messages:
    ...     print msg
    Dependency added: PPA for No Privileges Person

Now Celso's PPA will list Mark's and No-Priv's PPA as its dependencies.

    >>> print_ppa_dependencies(admin_browser.contents)
    PPA for Mark Shuttleworth
    PPA for No Privileges Person

The dependencies are presented in a separated section (bellow the
sources.list widget) associated with a warning, telling the users to
consider the dependencies in their systems if it becomes necessary.

    >>> user_browser.open('http://launchpad.dev/~cprov/+archive/ppa')
    >>> print extract_text(
    ...     find_tag_by_id(user_browser.contents, 'ppa-dependencies'))
    PPA dependencies
    When installing packages from this PPA you may need to enable one
    or more of the following PPAs, which have been considered for
    building packages in this context.
    PPA for Mark Shuttleworth (included ... ago)
    PPA for No Privileges Person (included ... ago)


== Removing dependencies ==

One or more dependencies can be removed via this page, they are
presented as a vertical array of check-boxes labeled by dependency PPA
title.

If no dependency is selected and the dependency removal is requested
an error is raised.

    >>> admin_browser.getControl("Remove Dependencies").click()
    >>> messages = get_feedback_messages(admin_browser.contents)
    >>> for msg in messages:
    ...     print msg
    There is 1 error.
    No dependencies selected.

    >>> print_ppa_dependencies(admin_browser.contents)
    PPA for Mark Shuttleworth
    PPA for No Privileges Person

On successful removals, a notification is rendered and the list of
dependencies is refreshed.

    >>> admin_browser.getControl(
    ...     "PPA for Mark Shuttleworth").selected = True
    >>> admin_browser.getControl(
    ...     "PPA for No Privileges Person").selected = True
    >>> admin_browser.getControl("Remove Dependencies").click()
    >>> messages = get_feedback_messages(admin_browser.contents)
    >>> for msg in messages:
    ...     print msg
    Dependencies removed:
    PPA for Mark Shuttleworth
    PPA for No Privileges Person

    >>> print_ppa_dependencies(admin_browser.contents)
    No dependencies recorded for this PPA yet.

Once the dependencies are removed, the 'dependency-section' (including
the warning message) are omitted from the PPA overview page

    >>> user_browser.open('http://launchpad.dev/~cprov/+archive/ppa')
    >>> print find_tag_by_id(user_browser.contents, 'ppa-dependencies')
    None
