= Support Tracker Email Notifications =

    # Let's define a helper function which commits the transaction, so
    # that the notifications are queued in stub.test_emails and pops these
    # notifications from the queue.
    >>> from canonical.launchpad.mail import stub
    >>> import email
    >>> import transaction
    >>> def pop_notifications():
    ...     transaction.commit()
    ...     notifications = [
    ...         email.message_from_string(raw_message)
    ...         for fromaddr, toaddrs, raw_message in sorted(stub.test_emails)
    ...     ]
    ...     stub.test_emails = []
    ...     return notifications

When a ticket is created or changed, an email notification is sent out,
informing the subscribers and the support contacts about the change.
Let's start with creating a ticket, and see what the resulting
notification looks like:

    >>> from zope.event import notify
    >>> from canonical.launchpad.event import SQLObjectCreatedEvent
    >>> from canonical.launchpad.interfaces import IDistributionSet
    >>> login('test@canonical.com')
    >>> sample_person = getUtility(ILaunchBag).user
    >>> ubuntu = getUtility(IDistributionSet).getByName('ubuntu')
    >>> ubuntu_ticket = ubuntu.newTicket(
    ...     sample_person, "Can't install Ubuntu",
    ...    "I insert the install CD in the CD-ROM drive, but it won't boot.")
    >>> notify(SQLObjectCreatedEvent(ubuntu_ticket))

The notifications get sent to the ticket's subscribers, the ticket's
target support contacts as well as to the ticket's assignee. Initially,
only the submitter, Sample Person, is subscribed to the ticket and there
 is no support contact registered on Ubuntu, so only 1 notification is
sent:

    >>> ubuntu.support_contacts
    []
    >>> [sub.person.displayname for sub in ubuntu_ticket.subscriptions]
    [u'Sample Person']
    >>> notifications = pop_notifications()
    >>> len(notifications)
    1

    >>> add_notification = notifications[0]
    >>> add_notification['From']
    'Sample Person <ticket...@support.launchpad.net>'
    >>> add_notification['To']
    'test@canonical.com'
    >>> add_notification['Subject']
    "[Question #...]: Can't install Ubuntu"
    >>> notification_body = add_notification.get_payload()
    >>> print notification_body #doctest: -NORMALIZE_WHITESPACE
    New question #... on Ubuntu:
    http://.../ubuntu/+ticket/...
    <BLANKLINE>
    I insert the install CD in the CD-ROM drive, but it won't boot.
    <BLANKLINE>

Register the Ubuntu Team as Ubuntu's support contact, so that they get
notified about the changes as well:

    >>> from canonical.launchpad.interfaces import ITicket, IPersonSet
    >>> ubuntu_team = getUtility(IPersonSet).getByName('ubuntu-team')
    >>> ubuntu.addSupportContact(ubuntu_team)
    True

And assign this ticket to Foo Bar, so that he will also receive
notifications:

    >>> login('foo.bar@canonical.com')
    >>> ubuntu_ticket.assignee = getUtility(ILaunchBag).user

== Edit Notifications ==

If we edit the title and description of the request, a notification will be
sent.

    >>> from canonical.launchpad.event import SQLObjectModifiedEvent
    >>> from canonical.launchpad.webapp.snapshot import Snapshot
    >>> from zope.interface import providedBy

    >>> login('no-priv@canonical.com')
    >>> no_priv = getUtility(ILaunchBag).user
    >>> unmodified_ticket = Snapshot(
    ...     ubuntu_ticket, providing=providedBy(ubuntu_ticket))
    >>> ubuntu_ticket.title = "Installer doesn't work on a Mac"
    >>> ubuntu_ticket.description = """I insert the install CD in the CD-ROM
    ... drive, but it won't boot.
    ...
    ... It boots straight into MacOS 9."""
    >>> notify(SQLObjectModifiedEvent(
    ...     ubuntu_ticket, unmodified_ticket, ['title', 'description']))

Three copies of the notification got sent, one to Sample Person, one to
Foo Bar, and one to Ubuntu Team:

    >>> from operator import itemgetter
    >>> notifications = sorted(pop_notifications(), key=itemgetter('To'))
    >>> [notification['To'] for notification in notifications]
    ['foo.bar@canonical.com', 'support@ubuntu.com', 'test@canonical.com']

    >>> edit_notification = notifications[0]
    >>> notification_body = edit_notification.get_payload(decode=True)
    >>> print notification_body #doctest: -NORMALIZE_WHITESPACE
    Question #... on Ubuntu changed:
    http://.../ubuntu/+ticket/...
    <BLANKLINE>
    Summary changed to:
    Installer doesn't work on a Mac
    <BLANKLINE>
    Description changed to:
    I insert the install CD in the CD-ROM
    drive, but it won't boot.
    <BLANKLINE>
    It boots straight into MacOS 9.
    <BLANKLINE>

XXX flacoste 2006/09/19 Add checks for notification of change to
assignee, status whiteboard, priority and source package.

If we trigger a modification event when no changes worth
notifying about was made, no notification is sent:

    >>> unmodified_ticket = Snapshot(
    ...     ubuntu_ticket, providing=providedBy(ubuntu_ticket))
    >>> notify(SQLObjectModifiedEvent(
    ...     ubuntu_ticket, unmodified_ticket, ['status']))

    >>> notifications = pop_notifications()
    >>> len(notifications)
    0

After receiving that notification, Foo Bar unassigned himself:

    >>> login('foo.bar@canonical.com')
    >>> ubuntu_ticket.assignee = None

== Bug Linking and Unlinking Notifications ==

If we create a bug from the support request, it will be reported as a
bug that has been linked to the request:

    >>> from canonical.launchpad.interfaces import CreateBugParams

    >>> login('no-priv@canonical.com')
    >>> unmodified_ticket = Snapshot(
    ...     ubuntu_ticket, providing=providedBy(ubuntu_ticket))
    >>> params = CreateBugParams(
    ...     owner=no_priv, title=ubuntu_ticket.title,
    ...     comment=ubuntu_ticket.description)
    >>> bug = ubuntu_ticket.target.createBug(params)
    >>> ubuntu_ticket.linkBug(bug)
    <TicketBug...>
    >>> notify(SQLObjectModifiedEvent(
    ...     ubuntu_ticket, unmodified_ticket, ['bugs']))

    >>> notifications = pop_notifications()
    >>> len(notifications)
    2
    >>> edit_notification = notifications[0]
    >>> notification_body = edit_notification.get_payload(decode=True)
    >>> print notification_body #doctest: -NORMALIZE_WHITESPACE
    Question #... on Ubuntu changed:
    http://.../ubuntu/+ticket/...
    <BLANKLINE>
        Linked to bug: #11
        http://.../bugs/11
    <BLANKLINE>

And if we remove the link again, we get:

    >>> unmodified_ticket = Snapshot(ubuntu_ticket,
    ...     providing=providedBy(ubuntu_ticket))
    >>> ubuntu_ticket.unlinkBug(bug)
    <TicketBug...>
    >>> notify(SQLObjectModifiedEvent(
    ...     ubuntu_ticket, unmodified_ticket, ['bugs']))

    >>> notifications = pop_notifications()
    >>> len(notifications)
    2

    >>> edit_notification = notifications[0]
    >>> notification_body = edit_notification.get_payload(decode=True)
    >>> print notification_body #doctest: -NORMALIZE_WHITESPACE
    Question #... on Ubuntu changed:
    http://.../ubuntu/+ticket/...
    <BLANKLINE>
        Removed link to bug: #11
        http://.../bugs/11
    <BLANKLINE>

== Workflow Notifications ==

Notifications are also sent when workflow actions are done on tickets.
The content of the notification will be different depending on the
workflow action done.

    >>> request_message = ubuntu_ticket.requestInfo(
    ...     no_priv, "What is your Mac model?")

    >>> notifications = pop_notifications()
    >>> [email_msg['To'] for email_msg in notifications]
    ['support@ubuntu.com', 'test@canonical.com']
    >>> support_notification = notifications[0]
    >>> support_notification['Subject']
    "[Question #...]: Re: Installer doesn't work on a Mac"

For workflow notifications, the content of the notification is slightly
different based on whether you are the request owner or somebody else.

For example, the notification to the support contacts and every other
subscribers except the request owner will look like this:

    >>> notification_body = support_notification.get_payload(decode=True)
    >>> print notification_body #doctest: -NORMALIZE_WHITESPACE
    Question #... on Ubuntu changed:
    http://.../ubuntu/+ticket/...
    <BLANKLINE>
        Status: Open => Needs information
    <BLANKLINE>
    No Privileges Person requested for more information:
    What is your Mac model?
    <BLANKLINE>

But the owner notification has a slightly different preamble and has
an extra footer.

    >>> notification_body = notifications[1].get_payload(decode=True)
    >>> print notification_body #doctest: -NORMALIZE_WHITESPACE
    Your question #... on Ubuntu changed:
    http://.../ubuntu/+ticket/...
    <BLANKLINE>
        Status: Open => Needs information
    <BLANKLINE>
    No Privileges Person requested for more information:
    What is your Mac model?
    <BLANKLINE>
    _______________________________________________________________________
    To answer this request for more information, you can either reply to
    this email or enter your reply at the following page:
    http://.../ubuntu/+ticket/...
    <BLANKLINE>

Of course, if the owner unsubscribe from the request, he won't receives
a notification.

    >>> login('test@canonical.com')
    >>> ubuntu_ticket.unsubscribe(sample_person)
    >>> message = ubuntu_ticket.giveInfo('A PowerMac 7200.')

    >>> notifications = pop_notifications()
    >>> [email_msg['To'] for email_msg in notifications]
    ['support@ubuntu.com']

    >>> notification_body = notifications[0].get_payload(decode=True)
    >>> print notification_body #doctest: -NORMALIZE_WHITESPACE
    Question #... on Ubuntu changed:
    http://.../ubuntu/+ticket/...
    <BLANKLINE>
        Status: Needs information => Open
    <BLANKLINE>
    Sample Person gave more information on the question:
    A PowerMac 7200.
    <BLANKLINE>

We already saw the notifications sent for the requestInfo() and
giveInfo() transitions, let's see the other ones.

    # Subscribe the owner back, to compare the different notifications
    # sent.
    >>> ubuntu_ticket.subscribe(sample_person)
    <TicketSubscription ...>

=== Notifications for expireTicket() ===

    >>> login('no-priv@canonical.com')
    >>> message = ubuntu_ticket.expireTicket(
    ...     no_priv, "Expired because of no recent activity.")

    >>> notifications = pop_notifications()
    >>> [email_msg['To'] for email_msg in notifications]
    ['support@ubuntu.com', 'test@canonical.com']

Default notification when the request is expired:

    >>> notification_body = notifications[0].get_payload(decode=True)
    >>> print notification_body #doctest: -NORMALIZE_WHITESPACE
    Question #... on Ubuntu changed:
    http://.../ubuntu/+ticket/...
    <BLANKLINE>
        Status: Open => Expired
    <BLANKLINE>
    No Privileges Person expired the question:
    Expired because of no recent activity.
    <BLANKLINE>

Notification received by the owner:

    >>> notification_body = notifications[1].get_payload(decode=True)
    >>> print notification_body #doctest: -NORMALIZE_WHITESPACE
    Your question #... on Ubuntu changed:
    http://.../ubuntu/+ticket/...
    <BLANKLINE>
        Status: Open => Expired
    <BLANKLINE>
    No Privileges Person expired the question:
    Expired because of no recent activity.
    <BLANKLINE>
    _______________________________________________________________________
    If you're still having this problem, you can reopen your question either
    by replying to this email or by going to the following page and
    entering more information about your problem:
    http://.../ubuntu/+ticket/...
    <BLANKLINE>

=== Notifications for reopen() ===

(This example will also show that comments are wrapped for 72 columns
display)

    >>> login('test@canonical.com')
    >>> message = ubuntu_ticket.reopen(
    ...     "I really need some help. I tried googling a bit but didn't find "
    ...     "anything useful.\n\nPlease provide some help to a newbie.")

    >>> notifications = pop_notifications()
    >>> [email_msg['To'] for email_msg in notifications]
    ['support@ubuntu.com', 'test@canonical.com']

Default notification when the owner reopens the request:

    >>> notification_body = notifications[0].get_payload(decode=True)
    >>> print notification_body #doctest: -NORMALIZE_WHITESPACE
    Question #... on Ubuntu changed:
    http://.../ubuntu/+ticket/...
    <BLANKLINE>
        Status: Expired => Open
    <BLANKLINE>
    Sample Person is still having a problem:
    I really need some help. I tried googling a bit but didn't find anything
    useful.
    <BLANKLINE>
    Please provide some help to a newbie.
    <BLANKLINE>

Notification received by the owner:

    >>> notification_body = notifications[1].get_payload(decode=True)
    >>> print notification_body #doctest: -NORMALIZE_WHITESPACE
    Your question #... on Ubuntu changed:
    http://.../ubuntu/+ticket/...
    <BLANKLINE>
        Status: Expired => Open
    <BLANKLINE>
    You are still having a problem:
    I really need some help. I tried googling a bit but didn't find anything
    useful.
    <BLANKLINE>
    Please provide some help to a newbie.
    <BLANKLINE>

=== Notifications for giveAnswer() ===

    >>> login('no-priv@canonical.com')
    >>> answer_message = ubuntu_ticket.giveAnswer(
    ...     no_priv, "Actually, your model is an OldWorld Mac. It needs "
    ...     "some configuration on the Mac side to boot the installer. You "
    ...     "will need to install BootX and some other files in your System "
    ...     "Folder.\n\nConsult "
    ...     "https://help.ubuntu.com/community/Installation/OldWorldMacs "
    ...     "for all the details.")

    >>> notifications = pop_notifications()
    >>> [email_msg['To'] for email_msg in notifications]
    ['support@ubuntu.com', 'test@canonical.com']

Default notification when an answer is proposed:

    >>> notification_body = notifications[0].get_payload(decode=True)
    >>> print notification_body #doctest: -NORMALIZE_WHITESPACE
    Question #... on Ubuntu changed:
    http://.../ubuntu/+ticket/...
    <BLANKLINE>
        Status: Open => Answered
    <BLANKLINE>
    No Privileges Person proposed the following answer:
    Actually, your model is an OldWorld Mac. It needs some configuration on
    the Mac side to boot the installer. You will need to install BootX and
    some other files in your System Folder.
    <BLANKLINE>
    Consult https://help.ubuntu.com/community/Installation/OldWorldMacs for
    all the details.
    <BLANKLINE>

Notification received by the owner:

    >>> notification_body = notifications[1].get_payload(decode=True)
    >>> print notification_body #doctest: -NORMALIZE_WHITESPACE
    Your question #... on Ubuntu changed:
    http://.../ubuntu/+ticket/...
    <BLANKLINE>
        Status: Open => Answered
    <BLANKLINE>
    No Privileges Person proposed the following answer:
    Actually, your model is an OldWorld Mac. It needs some configuration on
    the Mac side to boot the installer. You will need to install BootX and
    some other files in your System Folder.
    <BLANKLINE>
    Consult https://help.ubuntu.com/community/Installation/OldWorldMacs for
    all the details.
    <BLANKLINE>
    _______________________________________________________________________
    If this answers your question, please go to the following page to let us
    know that it is solved:
    http://.../ubuntu/+ticket/.../+confirm?answer_id=...
    <BLANKLINE>
    If you still need help, you can reply to this email or go to the
    following page to enter your feedback:
    http://.../ubuntu/+ticket/...
    <BLANKLINE>

=== Notifications for confirm() ===

    >>> login('test@canonical.com')
    >>> message = ubuntu_ticket.confirmAnswer(
    ...     "I've installed BootX and the installer CD is now booting. "
    ...     "Thanks!", answer=answer_message)

    >>> notifications = pop_notifications()
    >>> [email_msg['To'] for email_msg in notifications]
    ['support@ubuntu.com', 'test@canonical.com']

Default notification when the owner confirms an answer:

    >>> notification_body = notifications[0].get_payload(decode=True)
    >>> print notification_body #doctest: -NORMALIZE_WHITESPACE
    Question #... on Ubuntu changed:
    http://.../ubuntu/+ticket/...
    <BLANKLINE>
        Status: Answered => Solved
    <BLANKLINE>
    Sample Person confirmed that the question is solved:
    I've installed BootX and the installer CD is now booting. Thanks!
    <BLANKLINE>

Notification received by the owner:

    >>> notification_body = notifications[1].get_payload(decode=True)
    >>> print notification_body #doctest: -NORMALIZE_WHITESPACE
    Your question #... on Ubuntu changed:
    http://.../ubuntu/+ticket/...
    <BLANKLINE>
        Status: Answered => Solved
    <BLANKLINE>
    You confirmed that the question is solved:
    I've installed BootX and the installer CD is now booting. Thanks!
    <BLANKLINE>

=== Notifications for addComment() ===

    >>> login('no-priv@canonical.com')
    >>> message = ubuntu_ticket.addComment(
    ...     no_priv, "Unless you have lots of RAM... and even then, the "
    ...     "system will probably be very slow.")

    >>> notifications = pop_notifications()
    >>> [email_msg['To'] for email_msg in notifications]
    ['support@ubuntu.com', 'test@canonical.com']

Default notification when a comment is posted:

    >>> notification_body = notifications[0].get_payload(decode=True)
    >>> print notification_body #doctest: -NORMALIZE_WHITESPACE
    Question #... on Ubuntu changed:
    http://.../ubuntu/+ticket/...
    <BLANKLINE>
    No Privileges Person posted a new comment:
    Unless you have lots of RAM... and even then, the system will probably
    be very slow.
    <BLANKLINE>

Notification received by the owner:

    >>> notification_body = notifications[1].get_payload(decode=True)
    >>> print notification_body #doctest: -NORMALIZE_WHITESPACE
    Your question #... on Ubuntu changed:
    http://.../ubuntu/+ticket/...
    <BLANKLINE>
    No Privileges Person posted a new comment:
    Unless you have lots of RAM... and even then, the system will probably
    be very slow.
    <BLANKLINE>

=== Notifications for reject() ===

    >>> login('foo.bar@canonical.com')
    >>> foo_bar = getUtility(ILaunchBag).user
    >>> message = ubuntu_ticket.reject(
    ...     foo_bar, "Yeah! It will be awfully slow.")

    >>> notifications = pop_notifications()
    >>> [email_msg['To'] for email_msg in notifications]
    ['support@ubuntu.com', 'test@canonical.com']

Default notification when the request is rejected:

    >>> notification_body = notifications[0].get_payload(decode=True)
    >>> print notification_body #doctest: -NORMALIZE_WHITESPACE
    Question #... on Ubuntu changed:
    http://.../ubuntu/+ticket/...
    <BLANKLINE>
        Status: Solved => Invalid
    <BLANKLINE>
    Foo Bar rejected the question:
    Yeah! It will be awfully slow.
    <BLANKLINE>

Notification received by the owner:

    >>> notification_body = notifications[1].get_payload(decode=True)
    >>> print notification_body #doctest: -NORMALIZE_WHITESPACE
    Your question #... on Ubuntu changed:
    http://.../ubuntu/+ticket/...
    <BLANKLINE>
        Status: Solved => Invalid
    <BLANKLINE>
    Foo Bar rejected the question:
    Yeah! It will be awfully slow.
    <BLANKLINE>
    _______________________________________________________________________
    If you think that this rejection was a mistake, you can post a comment
    explaining your point of view either by replying to this email or at
    the following page:
    http://.../ubuntu/+ticket/...

=== Notifications for setStatus() ===

    >>> from canonical.lp.dbschema import TicketStatus
    >>> login('foo.bar@canonical.com')
    >>> message = ubuntu_ticket.setStatus(
    ...     foo_bar, TicketStatus.SOLVED, "The rejection was a mistake.")

    >>> notifications = pop_notifications()
    >>> [email_msg['To'] for email_msg in notifications]
    ['support@ubuntu.com', 'test@canonical.com']

Default notification when somebody changes the status:

    >>> notification_body = notifications[0].get_payload(decode=True)
    >>> print notification_body #doctest: -NORMALIZE_WHITESPACE
    Question #... on Ubuntu changed:
    http://.../ubuntu/+ticket/...
    <BLANKLINE>
        Status: Invalid => Solved
    <BLANKLINE>
    Foo Bar changed the question status:
    The rejection was a mistake.
    <BLANKLINE>

Notification received by the owner:

    >>> notification_body = notifications[1].get_payload(decode=True)
    >>> print notification_body #doctest: -NORMALIZE_WHITESPACE
    Your question #... on Ubuntu changed:
    http://.../ubuntu/+ticket/...
    <BLANKLINE>
        Status: Invalid => Solved
    <BLANKLINE>
    Foo Bar changed the question status:
    The rejection was a mistake.
    <BLANKLINE>

== Notifications and Teams ==

When a team is subscribed to a ticket, there are two cases two consider.
The first one is if the team has an email address set, a notification
will only be sent to that address. (That email address is assumed to
be a mailing list reaching all the team members.) We already saw an
example of that case with the Ubuntu Team in the examples above.

The other case is when the team doesn't have an email address set. In
that case, all the team members will be notified individually.

    >>> launchpad_devs = getUtility(IPersonSet).getByName('launchpad')
    >>> ubuntu_ticket.subscribe(launchpad_devs)
    <TicketSubscription...>

    >>> login('test@canonical.com')
    >>> message = ubuntu_ticket.addComment(sample_person, 'A comment.')

    >>> notifications = pop_notifications()
    >>> [email_msg['To'] for email_msg in notifications]
    ['foo.bar@canonical.com', 'support@ubuntu.com', 'test@canonical.com']

Of course, if the user is also individually subscribed to the ticket, he
will receives only one notification:

    >>> ubuntu_ticket.subscribe(foo_bar)
    <TicketSubscription...>

    >>> message = ubuntu_ticket.addComment(sample_person, 'A comment.')

    >>> notifications = pop_notifications()
    >>> [email_msg['To'] for email_msg in notifications]
    ['foo.bar@canonical.com', 'support@ubuntu.com', 'test@canonical.com']

== Notifications and Localized Requests ==

In general, only subscribers speaking the language of the ticket will
receive notifications related to it.

    # Register salgado as support, this makes the pt_BR language
    # supported in Ubuntu.
    >>> salgado = getUtility(IPersonSet).getByName('salgado')
    >>> ubuntu.addSupportContact(salgado)
    True
    >>> sorted([lang.code for lang in ubuntu.getSupportedLanguages()])
    [u'en', u'pt_BR']

    >>> from canonical.launchpad.interfaces import ILanguageSet
    >>> login('test@canonical.com')
    >>> pt_BR_ticket = ubuntu.newTicket(
    ...     sample_person, title=(
    ...     u"Abrir uma p\xe1gina que requer java quebra o firefox"),
    ...     description=(
    ...         u'Eu uso Ubuntu em um AMD64 e instalei o plugin java '
    ...         u'blackdown. O plugin \xe9 exibido em about:plugins e '
    ...         u'quando eu abro a pagina '
    ...         u'http://java.com/en/download/help/testvm.xml, ela carrega '
    ...         u'corretamente e mostra a minha versao do java. No entanto, '
    ...         u'mover o mouse na pagina faz com que o firefox quebre.'),
    ...     language=getUtility(ILanguageSet)['pt_BR'])
    >>> notify(SQLObjectCreatedEvent(pt_BR_ticket))
    >>> notifications = pop_notifications()
    >>> [email_msg['To'] for email_msg in notifications]
    ['guilherme.salgado@canonical.com', 'test@canonical.com']

    >>> from email.Header import decode_header, make_header
    >>> unicode(make_header(decode_header(notifications[0]['Subject'])))
    u'[Question #...]: Abrir uma p\xe1gina que requer java quebra o firefox'

Similarly, when a ticket in a non-English language is modified or its
status changed, only the subscribers speaking that language will receive
the notifications.

    >>> pt_BR_ticket.giveInfo("Veja o screenshot: http://tinyurl.com/y8jq8z")
    <TicketMessage...>
    >>> notifications = pop_notifications()
    >>> [email_msg['To'] for email_msg in notifications]
    ['guilherme.salgado@canonical.com', 'test@canonical.com']

The exception to these general rules is that when a request is created
in language spoken by none of the support contacts, each support
contact will receive an email notifying them that a request was posted
in an unsupported language.

For example, the French language is not spoken by any Ubuntu support
contacts. So after posting a request in French, a notification will be
sent to the support list about that request:

    >>> french = getUtility(ILanguageSet)['fr']
    >>> french_ticket = ubuntu.newTicket(
    ...     sample_person, title="Impossible d'installer Ubuntu",
    ...     description=u"Le CD ne semble pas fonctionn\xe9.",
    ...     language=french)
    >>> notify(SQLObjectCreatedEvent(french_ticket))
    >>> notifications = pop_notifications()
    >>> [email_msg['To'] for email_msg in notifications]
    ['guilherme.salgado@canonical.com', 'support@ubuntu.com',
     'test@canonical.com']

    >>> notifications[0]['Subject']
    "[Support #...]: (French) Impossible d'installer Ubuntu"

    >>> notification_body = notifications[0].get_payload(decode=True)
    >>> print notification_body #doctest: -NORMALIZE_WHITESPACE
    A question was asked in a language (French) spoken by
    none of the registered Ubuntu answer contacts.
    <BLANKLINE>
    http://.../ubuntu/+ticket/...

The notification received by the ticket owner contain a warning that
the request is in a language spoken by none of the support contacts:

    >>> notifications[-1]['Subject']
    "[Question #...]: Impossible d'installer Ubuntu"

    # Define a function that will replace non-ascii character with
    # its unicoded encoded value.
    # Effectively replace u'\xe9' by '\\e9'.
    >>> import re
    >>> def escape_utf8_payload(message):
    ...     charset = message.get_content_charset()
    ...     content = unicode(message.get_payload(decode=True), charset)
    ...     return content.encode('us-ascii', 'backslashreplace')

    >>> notification_body = escape_utf8_payload(notifications[-1])
    >>> print notification_body #doctest: -NORMALIZE_WHITESPACE
    New question #... on Ubuntu:
    http://.../ubuntu/+ticket/...
    <BLANKLINE>
    Le CD ne semble pas fonctionn\xe9.
    <BLANKLINE>
    _______________________________________________________________________
    WARNING: This question is asked in a language (French)
    spoken by none of the registered Ubuntu answer contacts.
    <BLANKLINE>

No notification will be sent to the support contacts when this ticket is
modified. Only the owner will receive a modification notification with a
warning appended to it.

    >>> unmodified_ticket = Snapshot(
    ...     french_ticket, providing=providedBy(french_ticket))
    >>> french_ticket.title = u"CD d'Ubuntu ne d\xe9marre pas"
    >>> notify(SQLObjectModifiedEvent(
    ...     french_ticket, unmodified_ticket, ['title']))

    >>> notifications = pop_notifications()
    >>> [email_msg['To'] for email_msg in notifications]
    ['test@canonical.com']

    >>> notification_body = escape_utf8_payload(notifications[0])
    >>> print notification_body #doctest: -NORMALIZE_WHITESPACE
    Your question #... on Ubuntu changed:
    http://.../ubuntu/+ticket/...
    <BLANKLINE>
    Summary changed to:
    CD d'Ubuntu ne d\xe9marre pas
    <BLANKLINE>
    _______________________________________________________________________
    WARNING: This question is asked in a language (French)
    spoken by none of the registered Ubuntu answer contacts.
    <BLANKLINE>

=== Localized Support Requests and Teams ===

There are some tricky issues when sending notifications to teams about a
support request. There are some cases to consider.

First, when the team has an explicit email address (which will be a
mailing list usually), we will notify the team only if the support
request language is in one of the team spoken languages. The team spoken
languages is either the list of languages associated to the team or
the list of the languages spoken by the team members.

For example, the rosetta admins team doesn't have any languages
configured. But among its members, Carlos speaks Spanish. So, the team
will be notified if a Spanish support request is created.

    >>> rosetta_admins = getUtility(IPersonSet).getByName('rosetta-admins')
    >>> [lang.code for lang in rosetta_admins.languages]
    []
    >>> carlos = getUtility(IPersonSet).getByName('carlos')
    >>> carlos.inTeam(rosetta_admins)
    True
    >>> spanish = getUtility(ILanguageSet)['es']
    >>> spanish in carlos.languages
    True

    >>> ubuntu.addSupportContact(rosetta_admins)
    True
    >>> spanish_ticket = ubuntu.newTicket(
    ...     sample_person, title="Necesidad ayuda con Firefox",
    ...     description="No puedo acceso al Internet en Firefox.",
    ...     language=spanish)
    >>> notify(SQLObjectCreatedEvent(spanish_ticket))
    >>> notifications = pop_notifications()
    >>> [email_msg['To'] for email_msg in notifications]
    ['rosetta@launchpad.net', 'test@canonical.com']

But if the team languages attribute is set, this set of languages will
be used. So, if the team only officially speaks French, it will only
receives notifications about French (and English) requests.

    >>> rosetta_admins.addLanguage(french)
    >>> notify(SQLObjectCreatedEvent(french_ticket))
    >>> notifications = pop_notifications()
    >>> [email_msg['To'] for email_msg in notifications]
    ['rosetta@launchpad.net', 'test@canonical.com']

The second case to consider is when the team doesn't use an explicit
address. When the team has configured its supported languages, all
team members will be contacted if the ticket language is supported.
For example, the Launchpad Developers team doesn't have any preferred
email address set. Its only member, Foo Bar will receive a notification
if the team supported languages includes the ticket language:

    >>> launchpad_devs = getUtility(IPersonSet).getByName('launchpad')
    >>> list(launchpad_devs.languages)
    []
    >>> [member.name for member in launchpad_devs.activemembers]
    [u'name16']
    >>> launchpad_devs.addLanguage(spanish)
    >>> ubuntu.addSupportContact(launchpad_devs)
    True

    >>> notify(SQLObjectCreatedEvent(spanish_ticket))
    >>> notifications = pop_notifications()
    >>> [email_msg['To'] for email_msg in notifications]
    ['foo.bar@canonical.com', 'test@canonical.com']

But when the team didn't configured its supported language set, only the
team members that speaks the language of the request will be notified.
For example, Carlos is a member of the admins team which doesn't have
a preferred address. So, he'll be the only member of the admin team
to be notified when a request in Spanish is posted.

    >>> admins = getUtility(IPersonSet).getByName('admins')
    >>> list(admins.languages)
    []
    >>> carlos.inTeam(admins)
    True
    >>> ubuntu.addSupportContact(admins)
    True

    >>> notify(SQLObjectCreatedEvent(spanish_ticket))
    >>> notifications = pop_notifications()
    >>> [email_msg['To'] for email_msg in notifications]
    ['carlos@canonical.com', 'foo.bar@canonical.com',
     'test@canonical.com']

When a team is a member of a team with no email address, these rules
are applied recursively. So, if we make GuadaMen team a member of the
admin team, its notification will be computed according to that
team settings. That is a notification will be sent to its preferred
address if Spanish is among its preferred languages:

    >>> guadamen = getUtility(IPersonSet).getByName('guadamen')
    >>> list(guadamen.languages)
    []
    >>> foobar = getUtility(IPersonSet).getByName('name16')

    # This call also generates email notifications, so we'll clean up
    # stub.test_emails after it
    >>> admins.addMember(guadamen, reviewer=foobar)
    >>> transaction.commit()
    >>> stub.test_emails = []

    >>> guadamen.addLanguage(spanish)

    >>> from canonical.launchpad.interfaces import IEmailAddressSet
    >>> guadamen_email = getUtility(IEmailAddressSet).new(
    ...     'maintainers@guadalinex.com', guadamen)
    >>> guadamen.validateAndEnsurePreferredEmail(guadamen_email)

    >>> notify(SQLObjectCreatedEvent(spanish_ticket))
    >>> notifications = pop_notifications()
    >>> [email_msg['To'] for email_msg in notifications]
    ['carlos@canonical.com', 'foo.bar@canonical.com',
     'maintainers@guadalinex.com', 'test@canonical.com']
