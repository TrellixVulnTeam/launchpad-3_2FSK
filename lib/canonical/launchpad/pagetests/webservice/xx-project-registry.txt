= Web Service Project Groups =


== Project group entry ==

Project groups are available at their canonical URL on the API virtual host.

    >>> from canonical.lazr.testing.webservice import pprint_entry

    >>> mozilla = webservice.get('/mozilla').jsonBody()
    >>> pprint_entry(mozilla)
    active: True
    active_milestones_collection_link: u'http://.../mozilla/active_milestones'
    all_milestones_collection_link: u'http://.../mozilla/all_milestones'
    bug_tracker_link: None
    date_created: u'...'
    description: u'The Mozilla Project...'
    display_name: u'the Mozilla Project'
    driver_link: None
    freshmeat_project: None
    homepage_content: None
    homepage_url: u'http://www.mozilla.org/'
    icon_link: u'http://.../mozilla/icon'
    logo_link: u'http://.../mozilla/logo'
    mugshot_link: u'http://.../mozilla/mugshot'
    name: u'mozilla'
    owner_link: u'http://.../~name12'
    projects_collection_link: u'http://.../mozilla/projects'
    registrant_link: u'http://.../~name12'
    resource_type_link: u'...'
    reviewed: False
    self_link: u'http://.../mozilla'
    sourceforge_project: None
    summary: u'The Mozilla Project...'
    title: u'The Mozilla Project'
    wiki_url: None

The milestones can be accessed through the active_milestones_collection_link
and the all_milestones_collection_link.

    >>> response = webservice.get(mozilla['active_milestones_collection_link'])
    >>> active_milestones = response.jsonBody()
    >>> print_self_link_of_entries(active_milestones)
    http://.../mozilla/+milestone/1.0

    >>> response = webservice.get(mozilla['all_milestones_collection_link'])
    >>> all_milestones = response.jsonBody()
    >>> print_self_link_of_entries(all_milestones)
    http://.../mozilla/+milestone/1.0


== Project entry ==

Projects are available at their canonical URL on the API virtual host.

    >>> firefox = webservice.get('/firefox').jsonBody()
    >>> pprint_entry(firefox)
    active: True
    active_milestones_collection_link: u'http://.../firefox/active_milestones'
    all_milestones_collection_link: u'http://.../firefox/all_milestones'
    branches_collection_link: u'http://.../firefox/branches'
    bug_tracker_link: None
    date_created: u'2004-09-24T20:58:02.185708+00:00'
    description: u'The Mozilla Firefox web browser'
    development_focus_link: u'http://.../firefox/trunk'
    display_name: u'Mozilla Firefox'
    download_url: None
    driver_link: None
    freshmeat_project: None
    homepage_url: None
    license_info: None
    licenses: []
    name: u'firefox'
    owner_link: u'http://.../~name12'
    programming_language: None
    project_group_link: u'http://.../mozilla'
    registrant_link: u'http://.../~name12'
    releases_collection_link: u'http://.../firefox/releases'
    resource_type_link: u'http://.../#project'
    screenshots_url: None
    self_link: u'http://.../firefox'
    series_collection_link: u'http://.../firefox/series'
    sourceforge_project: None
    summary: u'The Mozilla Firefox web browser'
    title: u'Mozilla Firefox'
    wiki_url: None

Branches can be accessed through the branches_collection_link.

    >>> response = webservice.get(firefox['branches_collection_link'])
    >>> branches = response.jsonBody()
    >>> print_self_link_of_entries(branches)
    http://.../~name12/firefox/main
    http://.../~sabdfl/firefox/release--0.9.1
    http://.../~sabdfl/firefox/release-0.8
    http://.../~sabdfl/firefox/release-0.9
    http://.../~sabdfl/firefox/release-0.9.2

The milestones can be accessed through the active_milestones_collection_link
and the all_milestones_collection_link.

    >>> response = webservice.get(firefox['active_milestones_collection_link'])
    >>> active_milestones = response.jsonBody()
    >>> print_self_link_of_entries(active_milestones)
    http://.../firefox/+milestone/1.0

    >>> response = webservice.get(firefox['all_milestones_collection_link'])
    >>> all_milestones = response.jsonBody()
    >>> print_self_link_of_entries(all_milestones)
    http://.../firefox/+milestone/1.0

The project group can be accessed through the project_group_link.

    >>> webservice.get(firefox['project_group_link']).jsonBody()['self_link']
    u'http://.../mozilla'

A list of series can be accessed through the series_collection_link.

    >>> response = webservice.get(firefox['series_collection_link'])
    >>> serieses = response.jsonBody()
    >>> print serieses['total_size']
    2
    >>> print_self_link_of_entries(serieses)
    http://.../firefox/1.0
    http://.../firefox/trunk

A list of releases can be accessed through the releases_collection_link.

    >>> response = webservice.get(firefox['releases_collection_link'])
    >>> releases = response.jsonBody()
    >>> print releases['total_size']
    4
    >>> print_self_link_of_entries(releases)
    http://.../firefox/1.0/1.0.0
    http://.../firefox/trunk/0.9
    http://.../firefox/trunk/0.9.1
    http://.../firefox/trunk/0.9.2

The development focus series can be accessed through the
development_focus_link.

    >>> response = webservice.get(firefox['development_focus_link'])
    >>> response.jsonBody()['self_link']
    u'http://.../firefox/trunk'

Attributes can be edited via the webservice.patch() method.

    >>> from simplejson import dumps
    >>> patch = {
    ...     u'driver_link': webservice.getAbsoluteUrl('/~sabdfl'),
    ...     u'homepage_url': u'http://sf.net/firefox',
    ...     u'licenses': [u'Python License', u'GNU GPL v2'],
    ...     u'bug_tracker_link':
    ...         webservice.getAbsoluteUrl('/bugs/bugtrackers/mozilla.org'),
    ...     }
    >>> print webservice.patch(
    ...     '/firefox', 'application/json', dumps(patch))
    HTTP/1.1 200 Ok
    ...
    >>> firefox = webservice.get('/firefox').jsonBody()
    >>> firefox['driver_link']
    u'http://.../~sabdfl'
    >>> firefox['homepage_url']
    u'http://sf.net/firefox'

    >>> webservice.get(firefox['driver_link']).jsonBody()['self_link']
    u'http://.../~sabdfl'
    >>> webservice.get(firefox['owner_link']).jsonBody()['self_link']
    u'http://.../~name12'
    >>> webservice.get(firefox['bug_tracker_link']).jsonBody()['self_link']
    u'http://.../bugs/bugtrackers/mozilla.org'

Read-only attributes, like registrant, cannot be modified via the
webservice.patch() method.

    >>> patch = {
    ...     u'registrant_link': webservice.getAbsoluteUrl('/~sabdfl'),
    ...     }
    >>> print webservice.patch(
    ...     '/firefox', 'application/json', dumps(patch))
    HTTP/1.1 400 Bad Request
    ...
    registrant_link: You tried to modify a read-only attribute.

    >>> firefox = webservice.get('/firefox').jsonBody()
    >>> firefox['registrant_link']
    u'http://.../~name12'


== Project collection ==

It is possible to get a batched list of all the projects.

    >>> project_collection = webservice.get("/projects").jsonBody()
    >>> project_collection['resource_type_link']
    u'http://.../#projects'
    >>> project_collection['total_size']
    22

    >>> from operator import itemgetter
    >>> project_entries = sorted(
    ...     project_collection['entries'], key=itemgetter('name'))
    >>> len(project_entries)
    5
    >>> project_entries[0]['self_link']
    u'http://.../arch-mirrors'
    >>> for project in project_entries:
    ...   print project['display_name']
    Arch mirrors
    Mozilla Firefox
    The Landscape Project
    Redfish
    Tomcat

It is possible to search for projects by a text string by adding
the ws.op=search parameter.

    >>> project_collection = webservice.get(
    ...   "/projects?ws.op=search&text=gnome").jsonBody()
    >>> project_collection['total_size']
    4


== Project series entry ==

The entry for a project series is available at its canonical URL on the
virtual host.

    >>> firefox_1_0 = webservice.get('/firefox/1.0').jsonBody()
    >>> pprint_entry(firefox_1_0)
    active_milestones_collection_link: u'http://.../firefox/1.0/active_milestones'
    all_milestones_collection_link: u'http://.../firefox/1.0/all_milestones'
    date_created: u'2005-06-06T08:59:51.898385+00:00'
    display_name: u'1.0'
    driver_link: None
    drivers_collection_link: u'http://.../firefox/1.0/drivers'
    name: u'1.0'
    owner_link: u'http://.../~name12'
    project_link: u'http://.../firefox'
    releases_collection_link: u'http://.../firefox/1.0/releases'
    resource_type_link: u'...'
    self_link: u'http://.../firefox/1.0'
    status: u'Active Development'
    summary: u'The 1.0 branch of the Mozilla web browser...'
    title: u'Mozilla Firefox Series: 1.0'


== Project release entry ==

Project releases are available at their canonical URL on the API virtual host.

    >>> firefox_1_0_0 = webservice.get('/firefox/1.0/1.0.0').jsonBody()
    >>> pprint_entry(firefox_1_0_0)
    project_series_link: u'http://.../firefox/1.0'
    resource_type_link: u'...'
    self_link: u'http://.../firefox/1.0/1.0.0'
    version: u'1.0.0'


== Milestone entry ==

The entry for a milestone is available at its canonical URL on the API virtual
host.

    >>> firefox_milestone_1_0 = webservice.get(
    ...     '/firefox/+milestone/1.0').jsonBody()
    >>> pprint_entry(firefox_milestone_1_0)
    date_targeted: u'2056-10-16T18:31:44.293448'
    description: None
    is_visible: True
    name: u'1.0'
    resource_type_link: u'...'
    self_link: u'http://.../firefox/+milestone/1.0'
    series_target_link: u'http://.../firefox/trunk'
    target_link: u'http://.../firefox'
    title: u'Milestone 1.0 for Mozilla Firefox'


== ProductRelease entries ==

    >>> releases = webservice.get(
    ...     '/firefox/1.0/releases').jsonBody()
    >>> pprint_entry(releases)
    entries: [...]
    resource_type_link: u'http://.../#product_release-page-resource'
    start: 0
    total_size: 1
    >>> entries = releases['entries']
    >>> len(entries) == releases['total_size']
    True
