Introduction
============

Bugs are problems that occur in software. In Malone, various things can be
added to, edited and removed from a bug over the course of a bug's lifetime. We
call this stuff bug activity. This document is about bug activity.

Bug Activity
============

During a bug's lifetime, one may:

o assign the bug to a source package

o assign the bug to a upstream product

o document a source package infestation

o document a product infestation

o add a cve reference number that relates to this bug

o add a subscriber to this bug

o add a web link related to this bug

o add a reference to a bug on an external bugtracker to track the status of the
  same bug as reported on other bug trackers

o mark the bug as a duplicate of another bug

Each of these can happen more than once to a bug over the course of its
lifetime. For auditing reasons, it's useful to track when these happen, why
these things happen, and who made them happen.

Tracking Bug Activity in Launchpad
==================================

Before going any further--because editing a bug requires an
authenticated user--let's login:

  >>> from canonical.launchpad.ftests import login
  >>> login("test@canonical.com")

Bug activity tracking is done using event subscribers. The handlers
are simple little functions.

  >>> from datetime import datetime
  >>> from zope.event import notify
  >>> from zope.interface import directlyProvides
  >>> from canonical.launchpad.event.sqlobjectevent import \
  ...     SQLObjectCreatedEvent, SQLObjectModifiedEvent
  >>> from canonical.launchpad.database import Bug, BugActivity, \
  ...     BugPackageInfestation, BugProductInfestation, \
  ...     BugTask
  >>> from canonical.launchpad.interfaces import IBugAddForm, \
  ...     IUpstreamBugTask, IDistroBugTask
  >>> from zope.publisher.browser import TestRequest

  >>> request = TestRequest()
  >>> def capture_state(obj, *fields):
  ...     class State: pass
  ...     state = State()
  ...     for field in fields:
  ...         setattr(state, field, getattr(obj, field))
  ...     return state

Here's a list of events that happen, and the resulting activity
logged:

  >>> from canonical.launchpad.database import Person
  >>> user = Person.get(12)

EVENT: user files a bug

  >>> bug = Bug(
  ...     title = "a test bug", summary = "this is only a test bug",
  ...     description = "this is only a test bug\nplease ignore",
  ...     owner = user.id)
  >>> bug.activity
  []
  >>> object_created = SQLObjectCreatedEvent(bug, request)
  >>> notify(object_created)
  >>> latest_activity = bug.activity[-1]
  >>> latest_activity.person == user.id
  True
  >>> latest_activity.whatchanged
  u'bug'
  >>> latest_activity.message
  u'added bug'

EVENT: bug edited

  >>> old_state = capture_state(
  ...     bug, "id", "title", "summary", "description", "name", "private",
  ...     "duplicateof")
  >>> bug.title = "new bug title"
  >>> bug_edited = SQLObjectModifiedEvent(
  ...     bug, old_state, ["title", "summary", "description"],
  ...     user, request)
  >>> notify(bug_edited)
  >>> latest_activity = bug.activity[-1]
  >>> latest_activity.whatchanged
  u'title'
  >>> latest_activity.oldvalue
  u'a test bug'
  >>> latest_activity.newvalue
  u'new bug title'

EVENT: bug gets assigned to a source package

  >>> source_package_assignment = BugTask(
  ...     bug = bug, sourcepackagename = 1, distribution = 1, owner = user.id)
  >>> source_package_assignment_added = SQLObjectCreatedEvent(
  ...     source_package_assignment, request)
  >>> notify(source_package_assignment_added)
  >>> latest_activity = bug.activity[-1]
  >>> latest_activity.whatchanged
  u'bug'
  >>> latest_activity.message
  u'assigned to source package mozilla-firefox'

EVENT: source package assignment edited

  >>> from canonical.lp.dbschema import BugTaskStatus
  >>> edit_fields = [
  ...     "distribution", "sourcepackagename", "binarypackagename",
  ...     "status", "priority", "severity", "assignee"]
  >>> old_source_package_assignment = capture_state(
  ...     source_package_assignment, *edit_fields)
  >>> directlyProvides(old_source_package_assignment, IDistroBugTask)
  >>> source_package_assignment.status = BugTaskStatus.ACCEPTED
  >>> source_package_assignment_edited = SQLObjectModifiedEvent(
  ...     source_package_assignment, old_source_package_assignment,
  ...     edit_fields, user, request)
  >>> notify(source_package_assignment_edited)
  >>> latest_activity = bug.activity[-1]
  >>> latest_activity.whatchanged
  u'mozilla-firefox: status'
  >>> latest_activity.oldvalue == BugTaskStatus.NEW.title
  True
  >>> latest_activity.newvalue == BugTaskStatus.ACCEPTED.title
  True

EVENT: bug gets assigned to an upstream product

  >>> product_assignment = BugTask(bug = bug, product = 8, owner = user.id)
  >>> product_assignment_added = SQLObjectCreatedEvent(
  ...     product_assignment, request)
  >>> notify(product_assignment_added)
  >>> latest_activity = bug.activity[-1]
  >>> latest_activity.whatchanged
  u'bug'
  >>> latest_activity.message
  u'assigned to upstream thunderbird'

EVENT: upstream product assignment edited

  >>> edit_fields = [
  ...     "product", "status", "priority", "severity", "milestone", "assignee"]
  >>> old_product_assignment = capture_state(product_assignment, *edit_fields)
  >>> directlyProvides(old_product_assignment, IUpstreamBugTask)
  >>> product_assignment.status = BugTaskStatus.REJECTED
  >>> product_assignment_edited = SQLObjectModifiedEvent(
  ...     product_assignment, old_product_assignment, edit_fields, user,
  ...     request)
  >>> notify(product_assignment_edited)
  >>> latest_activity = bug.activity[-1]
  >>> latest_activity.whatchanged
  u'thunderbird: status'
  >>> latest_activity.oldvalue == BugTaskStatus.NEW.title
  True
  >>> latest_activity.newvalue == BugTaskStatus.REJECTED.title
  True

EVENT: source package infestation gets documented

  >>> from canonical.lp.dbschema import BugInfestationStatus
  >>> right_now = datetime.now()
  >>> package_infestation = BugPackageInfestation(
  ...     bug=bug.id, explicit=True, datecreated=right_now,
  ...     creatorID=user.id, dateverified=right_now,
  ...     verifiedbyID=user.id, lastmodified=right_now,
  ...     lastmodifiedbyID=user.id, sourcepackagerelease=14,
  ...     infestationstatus=BugInfestationStatus.AFFECTED)
  >>> package_infesation_added = SQLObjectCreatedEvent(
  ...     package_infestation, request)
  >>> notify(package_infesation_added)
  >>> latest_activity = bug.activity[-1]
  >>> latest_activity.whatchanged
  u'bug'
  >>> latest_activity.message
  u'added infestation of package release mozilla-firefox 0.9'

EVENT: source package infestation edited

  >>> edit_fields = ["sourcepackagerelease", "infestationstatus"]
  >>> old_package_infestation = capture_state(package_infestation, *edit_fields)
  >>> package_infestation.infestationstatus = BugInfestationStatus.VICTIMIZED
  >>> package_infestation_edited = SQLObjectModifiedEvent(
  ...     package_infestation, old_package_infestation, edit_fields, user,
  ...     request)
  >>> notify(package_infestation_edited)
  >>> latest_activity = bug.activity[-1]
  >>> latest_activity.whatchanged
  u'mozilla-firefox 0.9: infestationstatus'
  >>> latest_activity.oldvalue == BugInfestationStatus.AFFECTED.title
  True
  >>> latest_activity.newvalue == BugInfestationStatus.VICTIMIZED.title
  True

EVENT: product infestation gets documented

  >>> right_now = datetime.now()
  >>> product_infestation = BugProductInfestation(
  ...     bug=bug.id, explicit=True, datecreated=right_now,
  ...     creatorID=user.id, dateverified=right_now,
  ...     verifiedbyID=user.id, lastmodified=right_now,
  ...     lastmodifiedbyID=user.id, productrelease=4,
  ...     infestationstatus=BugInfestationStatus.AFFECTED)
  >>> product_infesation_added = SQLObjectCreatedEvent(
  ...     product_infestation, request)
  >>> notify(product_infesation_added)
  >>> latest_activity = bug.activity[-1]
  >>> latest_activity.whatchanged
  u'bug'
  >>> latest_activity.message
  u'added infestation of product release firefox 0.9.1'

EVENT: product infestation edited

  >>> edit_fields = ["productrelease", "infestationstatus"]
  >>> old_product_infestation = capture_state(product_infestation, *edit_fields)
  >>> product_infestation.infestationstatus = BugInfestationStatus.UNKNOWN
  >>> product_infestation_edited = SQLObjectModifiedEvent(
  ...     product_infestation, old_product_infestation, edit_fields, user,
  ...     request)
  >>> notify(product_infestation_edited)
  >>> latest_activity = bug.activity[-1]
  >>> latest_activity.whatchanged
  u'firefox 0.9.1: infestationstatus'
  >>> latest_activity.oldvalue == BugInfestationStatus.AFFECTED.title
  True
  >>> latest_activity.newvalue == BugInfestationStatus.UNKNOWN.title
  True

EVENT: this bug report is marked as a duplicate of another bug report

  >>> edit_fields = [
  ...     "id", "title", "summary", "description", "name",
  ...     "private", "duplicateof"]
  >>> old_bug = capture_state(bug, *edit_fields)
  >>> bug.duplicateof = 1
  >>> bug_edited = SQLObjectModifiedEvent(
  ...     bug, old_bug, edit_fields, user, request)
  >>> notify(bug_edited)
  >>> latest_activity = bug.activity[-1]
  >>> latest_activity.whatchanged
  u'marked as duplicate'
  >>> latest_activity.oldvalue is None
  True
  >>> latest_activity.newvalue == u'1'
  True

For the future?
===============

At some point, we may find it useful to track the following events as well:

EVENT: add a subscriber to this bug

EVENT: add a web link related to this bug

EVENT: add a reference to a bug on an external bugtracker
