= Downloadable Files =

Launchpad can show you a product's downloadable files, by series, with
links to each.

Look at a project with no releases and ensure the download page does
not show any files.

    >>> anon_browser.open('http://launchpad.dev/aptoncd')
    >>> anon_browser.getLink('Downloads').click()
    >>> anon_browser.url
    'http://launchpad.dev/aptoncd/+download'
    >>> anon_browser.title
    'APTonCD project files'
    >>> content = find_main_content(anon_browser.contents)
    >>> form = content('form')[0]
    >>> para = form('p')[0]
    >>> print para.string.strip()
    No download files exist for this project.

Look at a project with a release but no download files.  Ensure the
download page does not show any files.

    >>> anon_browser.open('http://launchpad.dev/thunderbird')
    >>> anon_browser.getLink('Downloads').click()
    >>> anon_browser.url
    'http://launchpad.dev/thunderbird/+download'
    >>> content = find_main_content(anon_browser.contents)
    >>> form = content('form')[0]
    >>> para = form('p')[0]
    >>> print para.string.strip()
    No download files exist for this project.


== Deletion is only for the privileged ==

As an anonymous user the files for download should be shown, but not
the delete options.

    >>> anon_browser.open('http://launchpad.dev/firefox/+download')
    >>> anon_browser.url
    'http://launchpad.dev/firefox/+download'
    >>> content = find_main_content(anon_browser.contents)
    >>> row = content.find('table').find('tr')
    >>> print extract_text(row)
    Download
    Release
    Description

Again, for an authenticated user who is not the firefox product owner.

    >>> non_owner = setupBrowser(
    ...     auth='Basic celso.providelo@canonical.com:cprov')
    >>> non_owner.open('http://launchpad.dev/firefox/+download')
    >>> non_owner.url
    'http://launchpad.dev/firefox/+download'
    >>> content = find_main_content(non_owner.contents)
    >>> row = content.find('table').find('tr')
    >>> print extract_text(row)
    Download
    Release
    Description

Now, login as a firefox admin and see the delete fields.

    >>> firefox_owner = setupBrowser(
    ...     auth='Basic mark@hbd.com:test')
    >>> firefox_owner.open('http://launchpad.dev/firefox/+download')
    >>> firefox_owner.url
    'http://launchpad.dev/firefox/+download'
    >>> content = find_main_content(firefox_owner.contents)
    >>> row = content.find('table').find('tr')
    >>> print extract_text(row)
    Delete
    Download
    Release
    Description

A project owner should not see the delete button when there are no files.

    >>> tbird_owner = setupBrowser(
    ...     auth='Basic foo.bar@canonical.com:test')
    >>> tbird_owner.open('http://launchpad.dev/thunderbird')
    >>> tbird_owner.getLink('Downloads').click()
    >>> tbird_owner.title
    'Mozilla Thunderbird project files'
    >>> content = find_main_content(tbird_owner.contents)
    >>> form = content('form')[0]
    >>> para = form('p')
    >>> print para[0].string.strip()
    No download files exist for this project.
    >>> h2 = form('h2')[0]
    >>> print h2.string.strip()
    Release series &#8220;trunk&#8221;
    >>> print para[1].contents[0].string.strip()
    Add download file for release:...
    >>> tbird_owner.getControl('Delete Files')
    Traceback (most recent call last):
    ...
    LookupError: label 'Delete Files'

When a project has a series with one or more releases, an option to
add download files for each release in that series is presented.

Define a helper function for examining the series and
release output.
    >>> def extract_series_release(contents, action_url):
    ...     form = find_main_content(contents).find('form',
    ...                action="%s" % action_url)
    ...     for heading in form('h2'):
    ...         releases = heading.findNext('p')
    ...         print heading.string.strip()
    ...         print releases.contents[0].strip()
    ...         for link in releases('a'):
    ...             print link.contents[0]

    >>> firefox_owner.open('http://launchpad.dev/firefox/+download')
    >>> extract_series_release(firefox_owner.contents,
    ...                        firefox_owner.url)
    Release series &#8220;trunk&#8221;
    Add download file for release:
    0.9.2
    0.9.1
    0.9
    Release series &#8220;1.0&#8221;
    Add download file for release:
    1.0.0

If a project has a series with no releases associated with it, that
series should not show up in the list.

    >>> # Create an empty series.
    >>> firefox_owner.open('http://launchpad.dev/firefox')
    >>> firefox_owner.getLink('Register a series').click()
    >>> firefox_owner.getControl('Name').value="3.0"
    >>> firefox_owner.getControl('Summary').value="pi series"
    >>> firefox_owner.getControl('Register Series').click()
    >>> # Ensure it does not get listed.
    >>> firefox_owner.open('http://launchpad.dev/firefox/+download')
    >>> extract_series_release(firefox_owner.contents,
    ...                        firefox_owner.url)
    Release series &#8220;trunk&#8221;
    Add download file for release:
    0.9.2
    0.9.1
    0.9
    Release series &#8220;1.0&#8221;
    Add download file for release:
    1.0.0

If a release is added to the new series the series will appear in
the list.

    >>> # Add a release to the empty series.
    >>> firefox_owner.open('http://launchpad.dev/firefox')
    >>> firefox_owner.getLink('3.0').click()
    >>> firefox_owner.getLink('Add milestone').click()
    >>> firefox_owner.getControl('Name').value = '3.14159'
    >>> firefox_owner.getControl('Register milestone').click()
    >>> firefox_owner.getLink(url='+milestone/3.14159').click()
    >>> firefox_owner.getLink('Publish release').click()
    >>> firefox_owner.getControl('Publish release').click()
    >>> # See that it now appears in the list.
    >>> firefox_owner.open('http://launchpad.dev/firefox/+download')
    >>> extract_series_release(firefox_owner.contents,
    ...                        firefox_owner.url)
    Release series &#8220;trunk&#8221;
    Add download file for release:
    0.9.2
    0.9.1
    0.9
    Release series &#8220;3.0&#8221;
    Add download file for release:
    3.14159
    Release series &#8220;1.0&#8221;
    Add download file for release:
    1.0.0

== Adding new files ==

In order to add new files, the admin can click on the link release
link provided under the series name, or navigate to the product
release listing by selecting the individual release under the series
name on the product index page.  In the example below the firefox has
a 1.0 series with a 1.0.0 release.

First, let's use the links on the download files listing page.

Ensure a non-owner doesn't see the 'Add download file' link.

    >>> non_owner.open('http://launchpad.dev/firefox/+download')
    >>> non_owner.getLink('1.0.0')
    Traceback (most recent call last):
    ...
    LinkNotFoundError

To add a download file the release version link is used.

    >>> firefox_owner.open('http://launchpad.dev/firefox/+download')
    >>> firefox_owner.getLink('1.0.0').click()
    >>> firefox_owner.title
    'Add a file to Mozilla Firefox 1.0.0'

Ensure a non-owner doesn't see the 'Add download file' link after
navigating to the product release page.

    >>> non_owner.open('http://launchpad.dev/firefox/1.0/1.0.0')
    >>> non_owner.getLink('Add download file')
    Traceback (most recent call last):
    ...
    LinkNotFoundError

To add a download file the +adddownloadfile page is accessed.

    >>> firefox_owner.open('http://launchpad.dev/firefox/1.0/1.0.0')
    >>> firefox_owner.getLink('Add download file').click()

The maximum size of the upload file is shown on the page.

    >>> content = find_main_content(firefox_owner.contents)
    >>> print content
    <...
    ...You may upload files up to 200.0 MiB...

Create a file to upload, and upload it. We'll also upload a dummy signature.
Uploading file signatures is optional, so we'll just try it this once.

    >>> from cStringIO import StringIO
    >>> foo_file = StringIO('Foo installer package...')
    >>> foo_signature = StringIO('Dummy GPG signature for the Foo installer')
    >>> firefox_owner.getControl(name='field.filecontent').add_file(foo_file,
    ...    'text/plain', 'foo.txt')
    >>> firefox_owner.getControl(name='field.signature').add_file(
    ...    foo_signature, 'text/plain', 'foo.txt.asc')
    >>> firefox_owner.getControl('Description').value="Foo installer"
    >>> firefox_owner.getControl(
    ...     name="field.contenttype").displayValue = ["Installer file"]
    >>> firefox_owner.getControl("Upload").click()
    >>> get_feedback_messages(firefox_owner.contents)
    [u"Your file 'foo.txt' has been uploaded."]

A file can be uploaded without a GPG signature.

    >>> firefox_owner.open(
    ...     'http://launchpad.dev/firefox/1.0/1.0.0/+adddownloadfile')
    >>> bar_file = StringIO('Bar installer package...')
    >>> firefox_owner.getControl(name='field.filecontent').add_file(bar_file,
    ...    'text/plain', 'bar.txt')
    >>> firefox_owner.getControl('Description').value="Bar installer"
    >>> firefox_owner.getControl(
    ...     name="field.contenttype").displayValue = ["Installer file"]
    >>> firefox_owner.getControl("Upload").click()
    >>> get_feedback_messages(firefox_owner.contents)
    [u"Your file 'bar.txt' has been uploaded."]

In addition to the product owner and product series owner,
an admin can also delete a release file.

    >>> admin_browser.open(
    ...     'http://launchpad.dev/firefox/1.0/1.0.0')
    >>> checkbox = admin_browser.getControl(name='checkbox_0')
    >>> checkbox.value = checkbox.options
    >>> main_content = find_main_content(admin_browser.contents)
    >>> checkbox_tag = main_content.find(attrs={'name': 'checkbox_0'})
    >>> print 'Deleting:', extract_text(
    ...     checkbox_tag.parent.findNextSibling('td'))
    Deleting: bar.txt...
    >>> admin_browser.getControl("Delete Files").click()
    >>> get_feedback_messages(admin_browser.contents)
    [u'1 file has been deleted.']

Let's go back to the page where the files are listed and ensure it
shows up now.  Just to be sure, do it as the non-owner. We also see
the md5 digest of the file, and the signature that we uploaded.

    >>> non_owner.open('http://launchpad.dev/firefox/+download')
    >>> non_owner.url
    'http://launchpad.dev/firefox/+download'
    >>> content = find_main_content(non_owner.contents)
    >>> print content
    <...
    ...foo.txt...md5...sig...Foo installer...

Try to add a file with no description.

    >>> firefox_owner.open('http://launchpad.dev/firefox/1.0/1.0.0')
    >>> firefox_owner.getLink('Add download file').click()

Create a file to upload.

    >>> foo_file = StringIO('Foo installer package...')
    >>> firefox_owner.getControl(name='field.filecontent').add_file(foo_file,
    ...    'text/plain', 'foo.txt')
    >>> firefox_owner.getControl(
    ...     name="field.contenttype").displayValue = ["Installer file"]
    >>> firefox_owner.getControl("Upload").click()
    >>> for msg in get_feedback_messages(firefox_owner.contents):
    ...     print msg
    There is 1 error.
    Required input is missing.

Try to add a file that is empty.

    >>> firefox_owner.open('http://launchpad.dev/firefox/1.0/1.0.0')
    >>> firefox_owner.getLink('Add download file').click()

Create a file to upload.

    >>> foo_file = StringIO('')
    >>> firefox_owner.getControl(name='field.filecontent').add_file(foo_file,
    ...    'text/plain', 'foo.txt')
    >>> firefox_owner.getControl('Description').value="Foo installer"
    >>> firefox_owner.getControl(
    ...     name="field.contenttype").displayValue = ["Installer file"]
    >>> firefox_owner.getControl("Upload").click()
    >>> for msg in get_feedback_messages(firefox_owner.contents):
    ...     print msg
    There is 1 error.
    Cannot upload empty file.

Now let's successfully upload two more files.

    >>> firefox_owner.open('http://launchpad.dev/firefox/1.0/1.0.0')
    >>> firefox_owner.getLink('Add download file').click()
    >>> foo_file = StringIO('Foo2 installer package...')
    >>> firefox_owner.getControl(name='field.filecontent').add_file(foo_file,
    ...    'text/plain', 'foo2.txt')
    >>> firefox_owner.getControl('Description').value="Foo2 installer"
    >>> firefox_owner.getControl(
    ...     name="field.contenttype").displayValue = ["Installer file"]
    >>> firefox_owner.getControl("Upload").click()
    >>> get_feedback_messages(firefox_owner.contents)
    [u"Your file 'foo2.txt' has been uploaded."]

    >>> firefox_owner.open('http://launchpad.dev/firefox/1.0/1.0.0')
    >>> firefox_owner.getLink('Add download file').click()
    >>> foo_file = StringIO('Foo installer package...')
    >>> firefox_owner.getControl(name='field.filecontent').add_file(foo_file,
    ...    'text/plain', 'foo3.txt')
    >>> firefox_owner.getControl('Description').value="Foo3 installer"
    >>> firefox_owner.getControl(
    ...     name="field.contenttype").displayValue = ["Installer file"]
    >>> firefox_owner.getControl("Upload").click()
    >>> get_feedback_messages(firefox_owner.contents)
    [u"Your file 'foo3.txt' has been uploaded."]

Add a file to a different release on the same project.

    >>> firefox_owner.open('http://launchpad.dev/firefox/trunk/0.9')
    >>> firefox_owner.getLink('Add download file').click()
    >>> foo_file = StringIO('Foo installer package...')
    >>> firefox_owner.getControl(name='field.filecontent').add_file(foo_file,
    ...    'text/plain', 'foo09.txt')
    >>> firefox_owner.getControl('Description').value="Foo09 installer"
    >>> firefox_owner.getControl(
    ...     name="field.contenttype").displayValue = ["README File"]
    >>> firefox_owner.getControl("Upload").click()
    >>> get_feedback_messages(firefox_owner.contents)
    [u"Your file 'foo09.txt' has been uploaded."]

Examine all of the available files for download for firefox now.  They
are listed within series in reverse chronological order, except
'trunk' the developer focus, is first.

    >>> firefox_owner.open('http://launchpad.dev/firefox/+download')
    >>> firefox_owner.url
    'http://launchpad.dev/firefox/+download'
    >>> content = find_main_content(firefox_owner.contents)
    >>> rows = content.findAll('tr')
    >>> for row in rows[1:]:
    ...     a_list = row.findAll('a')
    ...     if len(a_list) > 0:
    ...        print a_list[0].string
    firefox-0.9.2.orig.tar.gz
    foo09.txt
    foo3.txt
    foo2.txt
    foo.txt


== Downloading and deleting files ==

Download one of the files.

    >>> from urllib import urlopen
    >>> from urlparse import urlparse

XXX Downloading via the testbrowser does not work
XXX unless the file is served by the Zope publisher.
XXX The link resolves to a Librarian URL, which cannot
XXX be served since it is external.
XXX Most of the following can be replaced by
XXX >>> firefox_owner.getLink('foo2.txt').click()
XXX when bug 113083 is fixed.
XXX Mon May  7 10:02:49 2007 -- bac

    >>> link = firefox_owner.getLink('foo2.txt')
    >>> url_path = urlparse(link.url)[2]
    >>> redirect_resp = http("""
    ...     GET %s HTTP/1.1""" % url_path)
    >>> location = redirect_resp.getOutput().split("\n")[3]
    >>> redirect_url = location.split()[1]
    >>> print urlopen(redirect_url).read()
    Foo2 installer package...

Delete the file foo2.txt.

    >>> firefox_owner.open('http://launchpad.dev/firefox/+download')
    >>> firefox_owner.url
    'http://launchpad.dev/firefox/+download'
    >>> checkbox = firefox_owner.getControl(
    ...     name="checkbox_2_0_1")
    >>> checkbox.value = checkbox.options
    >>> firefox_owner.getControl("Delete Files").click()
    >>> get_feedback_messages(firefox_owner.contents)
    [u'1 file has been deleted.']

Ensure the file is no longer listed.

    >>> firefox_owner.open('http://launchpad.dev/firefox/+download')
    >>> firefox_owner.url
    'http://launchpad.dev/firefox/+download'
    >>> content = find_main_content(firefox_owner.contents)
    >>> rows = content.findAll('tr')
    >>> for row in rows[1:]:
    ...     a_list = row.findAll('a')
    ...     if len(a_list) > 0:
    ...        print a_list[0].string
    firefox-0.9.2.orig.tar.gz
    foo09.txt
    foo3.txt
    foo.txt


== Listing on the ProductRelease page ==

Download files are shown on the page for the product release.

    >>> non_owner.open('http://launchpad.dev/firefox/trunk/0.9')
    >>> content = find_main_content(non_owner.contents)
    >>> rows = content.findAll('tr')
    >>> for row in rows[1:]:
    ...     a_list = row.findAll('a')
    ...     if len(a_list) > 0:
    ...        print a_list[0].string
    foo09.txt

Non-administrators do not have the delete option.

    >>> row = content.find('table').find('tr')
    >>> print extract_text(row)
    Download
    Description

And no "Delete Files" button is shown.

    >>> non_owner.getControl('Delete Files')
    Traceback (most recent call last):
    ...
    LookupError: label 'Delete Files'

As with the other listing, the administrators have the option to
delete files.  In this context the 'Release' column would be redundant
so it is not shown.

    >>> firefox_owner.open('http://launchpad.dev/firefox/trunk/0.9')
    >>> content = find_main_content(firefox_owner.contents)
    >>> row = content.find('table').find('tr')
    >>> print extract_text(row)
    Delete
    Download
    Description

A "Delete Files" button is available.

    >>> checkbox = firefox_owner.getControl(name="checkbox_0")
    >>> checkbox.value = checkbox.options
    >>> firefox_owner.getControl('Delete Files').click()
    >>> get_feedback_messages(firefox_owner.contents)
    [u'1 file has been deleted.']


== Scheme redirection ==

Files may be downloaded over http or https with the URL for the
librarian file constructed based upon the scheme of the original
request.  The Apache configuration for Launchpad production servers
sets a header called 'X-SCHEME' to indicate the original scheme
(http or https).

If the configuration 'use_https' is False then http will be used
regardless of the value of X-SCHEME.  In order to exercise the
use of X-SCHEME we must set 'use_https' to True and remember
to reset it when we're done.

    >>> from canonical.config import config
    >>> use_https_true_data = """
    ...     [vhosts]
    ...     use_https: True
    ...     """
    >>> config.push('use_https_true_data', use_https_true_data)

If the original scheme is https the redirect URL should be https too.

    >>> from textwrap import dedent
    >>> firefox_owner.open('http://launchpad.dev/firefox/+download')
    >>> link = firefox_owner.getLink('foo.txt')
    >>> url_path = urlparse(link.url)[2]
    >>> redirect_resp = http(dedent("""\
    ...     GET %s HTTP/1.1
    ...     X-SCHEME: https
    ...     """ % url_path))
    >>> location = redirect_resp.getOutput().split("\n")[3]
    >>> redirect_url = location.split()[1]
    >>> print redirect_url
    https://localhost:58000/.../foo.txt

However if the original scheme is http then the redirect URL should be
over http.

    >>> redirect_resp = http(dedent("""\
    ...     GET %s HTTP/1.1
    ...     X-SCHEME: http
    ...     """ % url_path))
    >>> location = redirect_resp.getOutput().split("\n")[3]
    >>> redirect_url = location.split()[1]
    >>> print redirect_url
    http://localhost:58000/.../foo.txt

When 'use_https' is False the result will always be http.

    >>> config_data = config.pop('use_https_true_data')
    >>> use_https_false_data = """
    ...     [vhosts]
    ...     use_https: False
    ...     """
    >>> config.push('use_https_false_data', use_https_false_data)
    >>> firefox_owner.open('http://launchpad.dev/firefox/+download')
    >>> link = firefox_owner.getLink('foo.txt')
    >>> url_path = urlparse(link.url)[2]
    >>> redirect_resp = http(dedent("""\
    ...     GET %s HTTP/1.1
    ...     X-SCHEME: https
    ...     """ % url_path))
    >>> location = redirect_resp.getOutput().split("\n")[3]
    >>> redirect_url = location.split()[1]
    >>> print redirect_url
    http://localhost:58000/.../foo.txt

    >>> redirect_resp = http(dedent("""\
    ...     GET %s HTTP/1.1
    ...     X-SCHEME: http
    ...     """ % url_path))
    >>> location = redirect_resp.getOutput().split("\n")[3]
    >>> redirect_url = location.split()[1]
    >>> print redirect_url
    http://localhost:58000/.../foo.txt

Return 'use_https' to its original value to not mess up future tests.

    >>> config_data = config.pop('use_https_false_data')
