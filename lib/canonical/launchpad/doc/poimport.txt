PO Imports
----------

The tale of a PO template and a PO file and how they get imported into
Rosetta.

    >>> from canonical.launchpad.ftests.harness import LaunchpadFunctionalTestSetup
    >>> from canonical.librarian.ftests.harness import LibrarianTestSetup

    >>> LaunchpadFunctionalTestSetup().setUp()
    >>> LibrarianTestSetup().setUp()


Here's some database classes we'll be using.

    >>> from canonical.launchpad.database import Person
    >>> from canonical.launchpad.database import POTemplate
    >>> from canonical.launchpad.database import POFile

We need this for the Librarian to work properly.

    >>> import transaction

Then, let's get a handle to our mailer. This is the thing we'll examine to show
what email has been sent, to whom, and what the body of the message contains:

    >>> import email
    >>> from canonical.launchpad.mail import stub

Here's a fake logger to capture any errors that happen.

    >>> class FakeLogger:
    ...     def log(self, *stuff, **kw):
    ...         print 'log>', ' '.join(stuff)
    ...
    ...         if 'exc_info' in kw:
    ...             import sys
    ...             import traceback
    ...             exception = traceback.format_exception(*sys.exc_info())
    ...             for thing in exception:
    ...                 for line in thing.splitlines():
    ...                     self.log(line)
    ...
    ...     warning = log

Now, is time to create the new potemplate

    >>> from canonical.launchpad.database import ProductRelease
    >>> release = ProductRelease.get(3)
    >>> release.productseries.product.name
    u'firefox'
    >>> series = release.productseries
    >>> from canonical.launchpad.database import POTemplateNameSet
    >>> ptn = POTemplateNameSet().new('firefox', 'Whatever')

    >>> from canonical.launchpad.database import POTemplateSubset
    >>> subset = POTemplateSubset(productseries=series)

Here's the person who'll be doing the import.

    >>> person = Person.get(1)

    >>> potemplate = subset.new(
    ...     potemplatename=ptn,
    ...     contents='# Not much.',
    ...     owner=person)

And this is the file that'll get imported.

    >>> potemplate_contents = r'''
    ... msgid ""
    ... msgstr ""
    ... "Content-Type: text/plain; charset=CHARSET\n"
    ... "Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\n"
    ...
    ... msgid "foo"
    ... msgstr ""
    ...
    ... msgid "bar"
    ... msgstr ""
    ...
    ... #: test.c:13
    ... msgid "baz"
    ... msgstr ""
    ...
    ... #, c-format
    ... msgid "Foo %s"
    ... msgstr ""
    ...
    ... #, c-format
    ... msgid "Singular %d"
    ... msgid_plural "Plural %d"
    ... msgstr[0] ""
    ... msgstr[1] ""
    ... '''

Importing happens in two steps. First, we attach the file data to the
template. The potemplate is always "published"

    >>> potemplate.attachRawFileData(potemplate_contents, True, person)

The file data is stored in the Librarian, so we have to commit the transaction
to make sure it's stored properly.

    >>> transaction.commit()

Second, we tell the PO template to import from the file data it has but first
check the number of activities the 'person' has done to be sure that Karma is
working.

    >>> len(person.activities)
    0
    >>> potemplate.doRawImport(FakeLogger())

The number of activities should be higher.

    >>> len(person.activities)
    1

Once we've done this, the correct message IDs should show up in the template.

    >>> potmsgsets = list(potemplate.getPOTMsgSets())
    >>> [potmsgset.primemsgid_.msgid for potmsgset in potmsgsets]
    [u'foo', u'bar', u'baz', u'Foo %s', u'Singular %d']

The file references field should be there

    >>> potmsgsets[2].filereferences
    u'test.c:13'

Now let's get a PO file to import.

    >>> pofile = potemplate.getOrCreatePOFile('cy')

It's newly created, so it has no message sets yet.

    >>> len(pofile.currentMessageSets())
    0

Here are the contents of the file we'll be importing.
It has some validation errros.

    >>> pofile_with_errors = r'''
    ... msgid ""
    ... msgstr ""
    ... "PO-Revision-Date: 2005-06-03 19:41+0100\n"
    ... "Last-Translator: Carlos Perello Marin <carlos@canonical.com>\n"
    ... "Content-Type: text/plain; charset=UTF-8\n"
    ... "Plural-Forms: nplurals=4; plural=n==1) ? 0 : n==2 ? 1 : (n != 8 || n != 11) ? 2 : 3;\n"
    ...
    ... msgid "foo"
    ... msgstr "blah"
    ...
    ... #, fuzzy
    ... msgid "bar"
    ... msgstr "heffalump"
    ...
    ... msgid "balloon"
    ... msgstr "blah"
    ...
    ... #, c-format
    ... msgid "Foo %s"
    ... msgstr "blah %i"
    ...
    ... #, c-format
    ... msgid "Singular %d"
    ... msgid_plural "Plural %d"
    ... msgstr[0] "Foos"
    ... msgstr[1] "Bars"
    ... msgstr[2] "Welsh power!"
    ... msgstr[3] "We have four!"
    ... '''

This is the dbschema that controls the validation of a translation.
    >>> from canonical.lp.dbschema import TranslationValidationStatus

The process of importing a PO file is much like that of importing a PO
template. Remember, we need to tell the system that this po file is a
"published" one.

    >>> pofile.attachRawFileData(pofile_with_errors, True, person)
    >>> transaction.commit()
    >>> pofile.doRawImport(FakeLogger())

And the number of activities performed is...

    >>> len(person.activities)
    2

Here's a current message set: i.e. it has a corresponding current message set
in the PO template. It should not be publishedfuzzy.

    >>> messageSets = list(pofile.currentMessageSets())
    >>> messageSets[0].potmsgset.primemsgid_.msgid
    u'foo'
    >>> messageSets[0].publishedfuzzy
    False

And should be accepted by our validator.

    >>> published = messageSets[0].publishedSubmission(0)
    >>> published.validationstatus == TranslationValidationStatus.OK
    True

And here's a non-current message set. It shouldn't be fuzzy either.

    >>> messageSets = list(pofile.messageSetsNotInTemplate())
    >>> messageSets[0].potmsgset.primemsgid_.msgid
    u'balloon'
    >>> messageSets[0].publishedfuzzy
    False

This message set should be fuzzy, however.

    >>> messageSet = pofile.messageSet(u'bar')
    >>> messageSet.publishedfuzzy
    True

And this one should have the validation status with an error.

    >>> messageSet = pofile.messageSet(u'Foo %s')
    >>> published = messageSet.publishedSubmission(0)
    >>> published.validationstatus == TranslationValidationStatus.UNKNOWNERROR
    True

Check that the plural form was imported correctly.

    >>> messageSet = pofile.messageSet(u'Singular %d')
    >>> published = messageSet.publishedSubmission(0)
    >>> published.validationstatus == TranslationValidationStatus.OK
    True
    >>> messageSet.published_texts
    [u'Foos', u'Bars', u'Welsh power!', u'We have four!']

The owner for those translations should be Carlos

    >>> published.person.displayname
    u'Carlos Perell\xf3 Mar\xedn'

Now, is time to check the notification email.

    >>> transaction.commit()

    >>> len(stub.test_emails)
    1

    >>> from_addr, to_addrs, raw_message = stub.test_emails.pop()
    >>> to_addrs
    ['mark@hbd.com']
    >>> msg = email.message_from_string(raw_message)
    >>> msg["Subject"]
    'Translation problems - Welsh (cy) - firefox in Mozilla Firefox\n\tMilestone Releases'
    >>> print msg.get_payload(decode=True)
    Hello Mark Shuttleworth,
    <BLANKLINE>
    On ... (just requested), you uploaded 5
    Welsh (cy) translations for firefox in Mozilla Firefox Milestone Releases in Rosetta.
    <BLANKLINE>
    There were problems with 1 of these translations.
    <BLANKLINE>
    4.  [msg 4]
    "format specifications in 'msgid' and 'msgstr' for argument 1 are not the same":
    <BLANKLINE>
    #, c-format
    msgid "Foo %s"
    msgstr "blah %i"
    <BLANKLINE>
    <BLANKLINE>
    <BLANKLINE>
    The other 4 translations have been accepted.
    <BLANKLINE>
    ...

Here are the contents of another file we'll be importing. It has no errros.

    >>> pofile_without_errors = r'''
    ... msgid ""
    ... msgstr ""
    ... "PO-Revision-Date: 2005-06-03 20:41+0100\n"
    ... "Last-Translator: Carlos Perello Marin <carlos@canonical.com>\n"
    ... "Content-Type: text/plain; charset=UTF-8\n"
    ... "Plural-Forms: nplurals=4; plural=n==1) ? 0 : n==2 ? 1 : (n != 8 || n != 11) ? 2 : 3;\n"
    ...
    ... msgid "foo"
    ... msgstr "blah"
    ... '''
    >>> pofile.attachRawFileData(pofile_without_errors, True, person)
    >>> transaction.commit()
    >>> pofile.doRawImport(FakeLogger())

And the number of activities performed is...

    >>> len(person.activities)
    3

Check the notification email about the success of this import without errors.

    >>> transaction.commit()

    >>> len(stub.test_emails)
    1

    >>> from_addr, to_addrs, raw_message = stub.test_emails.pop()
    >>> msg = email.message_from_string(raw_message)
    >>> msg["Subject"]
    'Translation import - Welsh (cy) - firefox in Mozilla Firefox\n\tMilestone Releases'
    >>> print msg.get_payload(decode=True)
    Hello Mark Shuttleworth,
    <BLANKLINE>
    ...

Now, is time to test a .pot import when we don't have any header.

    >>> potemplate_contents = r'''
    ... msgid "foo"
    ... msgstr ""
    ... '''
    >>> potemplate.attachRawFileData(potemplate_contents, True, person)
    >>> transaction.commit()
    >>> potemplate.doRawImport(FakeLogger())

And the number of activities performed is...

    >>> len(person.activities)
    4

The header should be the old one as this one does not have any:

    >>> print potemplate.header
    Content-Type: text/plain; charset=CHARSET
    Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;


Another test, try to import a .po file that is older than previous import...

    >>> print pofile.header
    PO-Revision-Date: 2005-06-03 20:41+0100
    ...

    >>> pofile_contents = r'''
    ... msgid ""
    ... msgstr ""
    ... "PO-Revision-Date: 2005-05-03 19:41+0100\n"
    ... "Last-Translator: Carlos Perello Marin <carlos@canonical.com>\n"
    ... "Content-Type: text/plain; charset=UTF-8\n"
    ... "Plural-Forms: nplurals=4; plural=n==1) ? 0 : n==2 ? 1 : (n != 8 || n != 11) ? 2 : 3;\n"
    ...
    ... msgid "foo"
    ... msgstr "blah"
    ... '''
    >>> pofile.attachRawFileData(pofile_contents, True, person)
    >>> transaction.commit()
    >>> pofile.doRawImport(FakeLogger())
    log> Got an old version for Welsh (cy) translation of firefox in Mozilla Firefox Milestone Releases

The rawimportstatus should be ignored.

    >>> from canonical.lp.dbschema import RosettaImportStatus
    >>> pofile.rawimportstatus == RosettaImportStatus.IGNORE
    True

The number of activities shouldn't change as the import was rejected.

    >>> len(person.activities)
    4

And the date should be the old one

    >>> print pofile.header
    PO-Revision-Date: 2005-06-03 20:41+0100
    ...

Finally, we need to test that the script is being executed without problems.
We tested already that the functionality works. Now it's time to know if the
cronscript has any problem.

XXX: Disabled as it stalls the tests.
    import subprocess
    subprocess.call('cronscripts/rosetta-poimport.py -q', shell=True)
    0

    >>> LibrarianTestSetup().tearDown()
    >>> LaunchpadFunctionalTestSetup().tearDown()
