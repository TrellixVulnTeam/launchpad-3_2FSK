= Rendering timeout exceptions =

When a page takes too long to render, a timeout exception is raised. A
timeout exception should provide IRequestExpired.

    >>> from zope.interface import implements
    >>> from canonical.database.interfaces import IRequestExpired
    >>> class TimeoutException:
    ...     implements(IRequestExpired)

After a timeout has happened, we can no longer do any more db queries,
since _check_expired() returns True.

    >>> from textwrap import dedent
    >>> from canonical.config import config
    >>> test_data = dedent("""
    ...     [database]
    ...     db_statement_timeout: 1000
    ...     """)
    >>> config.push('test_data', test_data)

    >>> from time import time
    >>> from canonical.launchpad.webapp.adapter import (
    ...     _check_expired, set_request_started)
    >>> login('no-priv@canonical.com') # Log in, to trigger a db query later.
    >>> too_early = time() - (config.database.db_statement_timeout / 1000 + 1)
    >>> set_request_started(too_early)
    >>> _check_expired(config.database.db_statement_timeout)
    True

Still, we can render the oops page, which gives the user the OOPS id.

    >>> from canonical.launchpad.webapp.interaction import (
    ...     get_current_principal)
    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest
    >>> request = LaunchpadTestRequest(
    ...     environ={'PATH_INFO': '/'})
    >>> request.oopsid = 'OOPS_ID_MARKER'
    >>> request.setPrincipal(get_current_principal())

    >>> from zope.component import getMultiAdapter
    >>> timeout_exception = TimeoutException()
    >>> exception_view = getMultiAdapter(
    ...     (timeout_exception, request), name="index.html")
    >>> print exception_view()
    <...OOPS_ID_MARKER...

    >>> test_config_data = config.pop('test_data')
