= Bug Reporting Tools =

In order to produce better bug reports, a bug reporting tool on the
user's computer can upload a message containing extra information about
the bug to Launchpad.

    >>> import os.path
    >>> from canonical.launchpad import ftests
    >>> testfiles = os.path.join(os.path.dirname(ftests.__file__), 'testfiles')
    >>> extra_filebug_data = open(
    ...     os.path.join(testfiles, 'extra_filebug_data.msg'))

    NOTE: The form names are used instead of their labels here, because
          external tools depend on them.
    >>> anon_browser.open('http://launchpad.dev/+storeblob')
    >>> anon_browser.getControl(name='field.blob').add_file(
    ...     extra_filebug_data, 'not/important', 'not.important')
    >>> anon_browser.getControl(name='FORM_SUBMIT').click()

After the file has been uploaded, the tool is given a token it can use
to give the data to the +filebug page.

    >>> for message in find_tags_by_class(anon_browser.contents, 'message'):
    ...     print message.renderContents()
    Your ticket is "..."

To avoid having the tool from parsing the HTML page, the token is
returned as a X-Launchpad-Blob-Token header in the response as well:

    >>> blob_token = anon_browser.headers['X-Launchpad-Blob-Token']

This token we can now pass to the +filebug page by appending it to the
URL as an extra path component, like '+filebug/12345abcde'.

== Guided +filebug ==

The most common case will be that the user is sent to the guided
+filebug page and the user goes through the workflow there.

    >>> filebug_url = (
    ...    'http://launchpad.dev/ubuntu/+source/mozilla-firefox/+filebug/'
    ...     '%s' % blob_token)
    >>> user_browser.open(filebug_url)

A notification will be shown to inform the user that additional
information will be added to the bug automatically.

    >>> for message in find_tags_by_class(user_browser.contents, 'message'):
    ...     print message.renderContents()
    Extra debug information will be added to the bug report automatically.

After the user fills in the summary and click on the button, we'll still
be on the same URL, with the token present.

    >>> user_browser.getControl('Summary').value
    ''
    >>> user_browser.getControl('Summary').value = 'A new bug'
    >>> user_browser.getControl('Continue').click()
    >>> user_browser.url == filebug_url
    True

Even if the form has errors the token will be present in the URL.

    >>> user_browser.getControl('Further information').value
    ''
    >>> user_browser.getControl('Submit Bug Report').click()
    >>> for error in find_tags_by_class(user_browser.contents, 'message error'):
    ...     print error.renderContents()
    There is 1 error.

    >>> user_browser.url == filebug_url
    True

If we go ahead submitting the bug, the bug will have all the extra
information specified in the extra filebug data.

    >>> user_browser.getControl('Further information').value = (
    ...     'A bug description.')
    >>> user_browser.getControl('Submit Bug Report').click()
    >>> user_browser.url
    'http://bugs.launchpad.dev/ubuntu/+source/mozilla-firefox/+bug/...'

Some extra text was appended to the description.

    >>> print find_tag_by_id(
    ...     user_browser.contents, 'bug-description').renderContents()
    <p>Binary package hint: mozilla-firefox</p>
    <p>A bug description.</p>
    <p>This should be added to the description.</p>

Two attachments were added.

    >>> attachment_portlet = find_portlet(
    ...     user_browser.contents, 'Bug attachments')
    >>> for li in attachment_portlet('li', 'download'):
    ...     print li.a.renderContents()
    attachment1
    Attachment description.

And three comments were added, including the empty comment that was
created for the attachments.

    >>> print_comments(user_browser.contents)
    <p>This should be added as a comment.</p>
    ----------------------------------------
    <p>This should be added as another comment.</p>
    ----------------------------------------
    Attachment: attachment1
    Attachment: Attachment description.
    ----------------------------------------

== Advanced +filebug ==

Even though the user will land on the guided +filebug initially, he may
choose to follow the link to the advanced +filebug page.

    >>> user_browser.open(
    ...     'http://launchpad.dev/firefox/+filebug/%s' % blob_token)
    >>> user_browser.getLink('complicated bug filing form').click()

The token is still present in the URL.

    >>> user_browser.url.endswith(blob_token)
    True

If we submit the bug, the same information as above will be added to the
bug.

    >>> user_browser.getControl('Summary').value = 'An advanced bug'
    >>> user_browser.getControl('Further information').value = (
    ...     'An advanced bug description.')
    >>> user_browser.getControl('Submit Bug Report').click()
    >>> user_browser.url
    'http://bugs.launchpad.dev/firefox/+bug/...'

    >>> print find_tag_by_id(
    ...     user_browser.contents, 'bug-description').renderContents()
    <p>An advanced bug description.</p>
    <p>This should be added to the description.</p>

Two attachments were added.

    >>> attachment_portlet = find_portlet(
    ...     user_browser.contents, 'Bug attachments')
    >>> for li in attachment_portlet('li', 'download'):
    ...     print li.a.renderContents()
    attachment1
    Attachment description.

And three comments were added, including the empty comment that was
created for the attachments.

    >>> print_comments(user_browser.contents)
    <p>This should be added as a comment.</p>
    ----------------------------------------
    <p>This should be added as another comment.</p>
    ----------------------------------------
    Attachment: attachment1
    Attachment: Attachment description.
    ----------------------------------------

=== Initial bug summary ===

If the uploaded message contains a Subject field in the initial headers,
that will be used to automatically fill in a suggested title.

    >>> extra_filebug_data_with_subject = open(
    ...     os.path.join(testfiles, 'extra_filebug_data_subject.msg'))
    >>> anon_browser.open('http://launchpad.dev/+storeblob')
    >>> anon_browser.getControl(name='field.blob').add_file(
    ...     extra_filebug_data_with_subject, 'not/important', 'not.important')
    >>> anon_browser.getControl(name='FORM_SUBMIT').click()
    >>> blob_token = anon_browser.headers['X-Launchpad-Blob-Token']

    >>> user_browser.open(
    ...    'http://launchpad.dev/ubuntu/+source/mozilla-firefox/+filebug/'
    ...     '%s' % blob_token)

    >>> user_browser.getControl('Summary').value
    'Initial bug summary'

The user can of course change the summary if he wants to.

    >>> user_browser.getControl('Summary').value = 'Another summary'
    >>> user_browser.getControl('Continue').click()
    >>> user_browser.getControl('Summary').value
    'Another summary'

=== Tags ===

If the uploaded message contains a Tags field, the tags widget will be
initialized with that value.

    >>> extra_filebug_data_with_subject = open(
    ...     os.path.join(testfiles, 'extra_filebug_data_tags.msg'))
    >>> anon_browser.open('http://launchpad.dev/+storeblob')
    >>> anon_browser.getControl(name='field.blob').add_file(
    ...     extra_filebug_data_with_subject, 'not/important', 'not.important')
    >>> anon_browser.getControl(name='FORM_SUBMIT').click()
    >>> blob_token = anon_browser.headers['X-Launchpad-Blob-Token']

    >>> user_browser.open(
    ...    'http://launchpad.dev/ubuntu/+source/mozilla-firefox/'
    ...     '+filebug-advanced/%s' % blob_token)

    >>> user_browser.getControl('Tags').value
    'foo bar'

The user can of course change the tags if he wants.

    >>> user_browser.getControl('Tags').value = 'bar baz'
    >>> user_browser.getControl('Summary').value = 'Bug Summary'
    >>> user_browser.getControl('Further information').value = (
    ...     'Bug description.')
    >>> user_browser.getControl('Submit Bug Report').click()
    >>> user_browser.url
    'http://bugs.launchpad.dev/ubuntu/+source/mozilla-firefox/+bug/...'

    >>> tags = find_tag_by_id(user_browser.contents, 'bug-tags')
    >>> print extract_text(tags)
    Tags: bar baz

The normal +filebug page has a hidden tags widget, so bugs filed via
that will get their tags set as well.

    >>> user_browser.open(
    ...    'http://launchpad.dev/ubuntu/+source/mozilla-firefox/+filebug/'
    ...     '%s' % blob_token)
    >>> user_browser.getControl('Summary').value = 'Bug Summary'
    >>> user_browser.getControl('Continue').click()

    >>> user_browser.getControl('Further information').value = (
    ...     'Bug description.')
    >>> user_browser.getControl('Submit Bug Report').click()
    >>> user_browser.url
    'http://bugs.launchpad.dev/ubuntu/+source/mozilla-firefox/+bug/...'

    >>> tags = find_tag_by_id(user_browser.contents, 'bug-tags')
    >>> print extract_text(tags)
    Tags: bar foo

