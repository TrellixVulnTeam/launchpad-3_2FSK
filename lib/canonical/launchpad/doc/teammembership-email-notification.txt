= Mail notifications for membership changes =

Whenever a membership status is changed, we should notify the team admins and
the member whose membership changed. There's a few cases where we might want
to notify only the team admins, but in most of the cases we'll be sending two
similar (but not identical) notifications: one for all team admins and another
for the member.

    >>> def by_to_addrs(a, b):
    ...     return cmp(a[1], b[1])

    >>> from zope.event import notify
    >>> from canonical.launchpad.event.team import JoinTeamRequestEvent
    >>> from canonical.launchpad.mail import stub
    >>> from canonical.launchpad.database import Person, TeamMembershipSet
    >>> from canonical.lp.dbschema import TeamMembershipStatus
    >>> sabdfl = Person.byName('sabdfl')
    >>> ubuntu_team = Person.byName('ubuntu-team')
    >>> membership = TeamMembershipSet().getProposedMemberships(ubuntu_team)[0]
    >>> membership.status.title
    'Proposed'

Declining a proposed member should generate notifications for both the member
and team admins.

    >>> stub.test_emails = []
    >>> membership.setStatus(TeamMembershipStatus.DECLINED, reviewer=sabdfl)
    >>> flush_database_updates()
    >>> transaction.commit()

    >>> test_emails = list(stub.test_emails)
    >>> test_emails.sort(by_to_addrs)
    >>> len(test_emails)
    2
    >>> from_addr, to_addr, raw_message = test_emails.pop()
    >>> print to_addr
    ['foo.bar@canonical.com', 'jeff.waugh@ubuntulinux.com', 'mark@hbd.com']
    >>> from_addr, to_addr, raw_message = test_emails.pop()
    >>> print to_addr
    ['andrew.bennetts@ubuntulinux.com']
    >>> flush_database_updates()

The same will not happen when somebody propose itself as a team member. In
this case we'll send notifications only to the team admins.

    >>> stub.test_emails = []
    >>> membership.person.join(ubuntu_team)
    True
    >>> notify(JoinTeamRequestEvent(membership.person, membership.team))
    >>> flush_database_updates()
    >>> transaction.commit()
    >>> len(stub.test_emails)
    1
    >>> from_addr, to_addr, raw_message = stub.test_emails.pop()
    >>> print to_addr
    ['foo.bar@canonical.com', 'jeff.waugh@ubuntulinux.com', 'mark@hbd.com']

Approving a proposed member should generate notifications for both the member
and team admins.
    
    >>> stub.test_emails = []
    >>> membership.setStatus(TeamMembershipStatus.APPROVED, reviewer=sabdfl)
    >>> flush_database_updates()
    >>> transaction.commit()
    >>> test_emails = list(stub.test_emails)
    >>> test_emails.sort(by_to_addrs)
    >>> len(test_emails)
    2
    >>> from_addr, to_addr, raw_message = test_emails.pop()
    >>> print to_addr
    ['foo.bar@canonical.com', 'jeff.waugh@ubuntulinux.com', 'mark@hbd.com']
    >>> from_addr, to_addr, raw_message = test_emails.pop()
    >>> print to_addr
    ['andrew.bennetts@ubuntulinux.com']

The same for deactivating a membership.

    >>> stub.test_emails = []
    >>> membership.setStatus(TeamMembershipStatus.DEACTIVATED, reviewer=sabdfl)
    >>> flush_database_updates()
    >>> transaction.commit()
    >>> test_emails = list(stub.test_emails)
    >>> test_emails.sort(by_to_addrs)
    >>> len(test_emails)
    2
    >>> from_addr, to_addr, raw_message = test_emails.pop()
    >>> print to_addr
    ['foo.bar@canonical.com', 'jeff.waugh@ubuntulinux.com', 'mark@hbd.com']
    >>> from_addr, to_addr, raw_message = test_emails.pop()
    >>> print to_addr
    ['andrew.bennetts@ubuntulinux.com']


== Some special cases ==

When creating a new team, the owner has his membership's status changed from
approved to admin, but he won't get a notification of that.


If member named 'name16' has his membership's status changed for team
'ubuntu-team', in which he's also an administrator, he'll only get one email
notification.


If member is actually a team, we should use a different email template because
it doesn't make sense to talk about "your membership" or things like that.


When an expiration date is changed, we also need to use a separate template
because the status wasn't actually changed.
