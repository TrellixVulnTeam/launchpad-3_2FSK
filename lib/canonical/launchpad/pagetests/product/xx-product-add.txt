== Adding products ==

First step in adding a project is hitting the registration link on the
project homepage:

    >>> user_browser = setupBrowser(auth='Basic test@canonical.com:test')
    >>> user_browser.open("http://launchpad.dev/projects")
    >>> user_browser.getLink("Register a project").click()
    >>> user_browser.url
    'http://launchpad.dev/projects/+new-guided'

The first page you get provides you with some more information about
registration:

    >>> print extract_text(find_main_content(user_browser.contents))
    Hi there!
    ...
    Launchpad is a service for registering and hosting software
    projects. Service is provided free for open source/free software
    projects. But let us steal a minute of your time to point out a few
    important things before you proceed with the actual registration. 
    ...

It hints to the existence of staging, the user guide and the tour:

    >>> user_browser.getLink("staging.launchpad.net").url
    'https://staging.launchpad.net/'
    >>> user_browser.getLink("our user handbook").url
    'https://help.launchpad.net/FeatureHighlights'
    >>> user_browser.getLink("take our guided tour").url
    'https://launchpad.net/+tour'

It even provides a direct link to shipit, since people are so confused
about it:

    >>> user_browser.getLink("shipit.ubuntu.com").url
    'https://shipit.ubuntu.com/'

Once you've read the spiel, you can follow on to the actual form:

    >>> user_browser.getLink("the registration form").click()
    >>> user_browser.url
    'http://launchpad.dev/projects/+new'

== The product registration form ==

Here we go:

    >>> user_browser.open("http://launchpad.dev/projects/+new")
    >>> h1 = find_main_content(user_browser.contents).find('h1')
    >>> print h1.renderContents()
    Register an upstream open source project

    >>> tags = find_tags_by_class(user_browser.contents, 
    ...     'documentDescription')
    >>> for tag in tags:
    ...     print extract_text(tag)
    Form filling fun! The more information you provide out here, the more
    attention and collaboration your project will be able to attract.
    And there's no wait -- once registered, you can immediately
    start using your project to track bugs, code, translations (and
    more).

Let's test if the validator is working for the URL fields

    >>> user_browser.getControl('Part of').value = 'mozilla'
    >>> user_browser.getControl('Name', index=0).value = 'testing'
    >>> user_browser.getControl('Display Name').value = 'Test Product'
    >>> user_browser.getControl('Title').value = 'This is a Test Product'
    >>> user_browser.getControl(name='field.description').value = (
    ...     'If you were describing a Test Product this would be a little '
    ...     'short but sweet.'
    ...     )
    >>> user_browser.getControl('Homepage URL').value = 'www.test.test.com/'
    >>> user_browser.getControl('Sourceforge Project').value = 'testing'
    >>> user_browser.getControl('Freshmeat Project').value = 'testmeat'
    >>> user_browser.getControl('Wiki URL').value = 'http://wiki.testing.com/'
    >>> user_browser.getControl(
    ...     'Screenshots URL').value = 'http://www.testing.com/screenshots/'
    >>> user_browser.getControl(
    ...     'Download URL').value = 'http://www.testing.com/download/'
    >>> user_browser.getControl(
    ...     'Programming Language').value = 'Visual Python++, C'
    >>> user_browser.getControl('Summary').value = 'This is the summary'
    >>> user_browser.getControl(name='field.licenses').value = ['GNU_GPL_V2']
    >>> user_browser.getControl(name='field.license_info').value = 'foo'
    >>> user_browser.getControl('Add').click()
    >>> user_browser.url
    'http://launchpad.dev/projects/+new'
    >>> print "\n".join(get_feedback_messages(user_browser.contents))
    There is 1 error.
    "www.test.test.com/" is not a valid URI

And just 'http://' for the url

    >>> user_browser.getControl('Homepage URL').value = 'http://'
    >>> user_browser.getControl('Add').click()
    >>> user_browser.url
    'http://launchpad.dev/projects/+new'
    >>> print "\n".join(get_feedback_messages(user_browser.contents))
    There is 1 error.
    http URIs must have a host name

Test that the validator requires a license to be selected in the form:

    >>> user_browser.getControl('Homepage URL').value = 'http://www.test.test.com/'
    >>> user_browser.getControl(name='field.licenses').value = []
    >>> user_browser.getControl('Add').click()
    >>> user_browser.url
    'http://launchpad.dev/projects/+new'
    >>> print "\n".join(get_feedback_messages(user_browser.contents))
    There is 1 error.
    Select all licenses for this software or select
    Other/Proprietary or Other/Open Source.


Test that the page to add a new product works.

    >>> user_browser.getControl(name='field.licenses').value = ['GNU_GPL_V2']
    >>> user_browser.getControl('Add').click()

    >>> user_browser.url
    'http://launchpad.dev/testing'


Test if we can see the page of the added product and tests if we can see the
Project.

    >>> anon_browser.open('http://launchpad.dev/testing')
    >>> 'This is a Test Product' in anon_browser.contents
    True
    >>> 'The Mozilla Project' in anon_browser.contents
    True


We should have an automatic trunk series for this new product too.

    >>> anon_browser.open("http://launchpad.dev/testing/trunk")
    >>> 'Release series overview' in anon_browser.contents
    True


Now we test if we leave the Home-page field empty. This should work,
since the field is not required.

    >>> user_browser.open('http://launchpad.dev/projects/+new')
    >>> user_browser.getControl('Part of').value = 'mozilla'
    >>> user_browser.getControl('Name', index=0).value = 'testing2'
    >>> user_browser.getControl('Display Name').value = 'Test Product'
    >>> user_browser.getControl('Title').value = 'This is a Test Product'
    >>> user_browser.getControl(name='field.description').value = (
    ...     'If you were describing a Test Product this would be a little '
    ...     'short but sweet.'
    ...     )
    >>> user_browser.getControl('Sourceforge Project').value = 'testing'
    >>> user_browser.getControl('Freshmeat Project').value = 'testmeat'
    >>> user_browser.getControl('Wiki URL').value = 'http://wiki.testing.com/'
    >>> user_browser.getControl(
    ...     'Screenshots URL').value = 'http://www.testing.com/screenshots/'
    >>> user_browser.getControl(
    ...     'Download URL').value = 'http://www.testing.com/download/'
    >>> user_browser.getControl(
    ...     'Programming Language').value = 'Visual Python++, C'
    >>> user_browser.getControl('Summary').value = 'This is the summary'
    >>> user_browser.getControl(name='field.licenses').value = [
    ...     'OTHER_PROPRIETARY']
    >>> user_browser.getControl(name='field.license_info').value = 'foo'
    >>> user_browser.getControl('Add').click()
    >>> user_browser.url
    'http://launchpad.dev/testing2'
    >>> 'Test Product' in user_browser.contents
    True

When a product is created with the license OTHER_PROPRIETARY an email
is sent to feedback@canonical.com.

The mail is sent when the transaction gets commited:

    >>> import transaction
    >>> transaction.commit()
    >>> import email
    >>> from canonical.launchpad.mail import stub
    >>> from_addr, to_addr, raw_message = stub.test_emails.pop()
    >>> msg = email.message_from_string(raw_message)
    >>> msg['To']
    'feedback@launchpad.net'
    >>> msg['From']
    'Launchpad <noreply@launchpad.net>'
    >>> msg['Subject']
    'Project License Submitted for testing2 by name12'
    >>> msg['Reply-To']
    'Sample Person <test@canonical.com>'
    >>> msg.get_payload()
    "...Other/Proprietary...

When a product is created with the license OTHER_OPEN_SOURCE an email
is also sent to feedback@canonical.com.

    >>> user_browser.open('http://launchpad.dev/projects/+new')
    >>> user_browser.getControl('Part of').value = 'mozilla'
    >>> user_browser.getControl('Name', index=0).value = 'foss'
    >>> user_browser.getControl('Display Name').value = 'Test Other'
    >>> user_browser.getControl('Title').value = 'This is a Test Product'
    >>> user_browser.getControl(name='field.description').value = (
    ...     'If you were describing a Test Product this would be a little '
    ...     'short but sweet.'
    ...     )
    >>> user_browser.getControl('Summary').value = 'This is the summary'
    >>> user_browser.getControl(name='field.licenses').value = [
    ...     'OTHER_OPEN_SOURCE']
    >>> user_browser.getControl(name='field.license_info').value = 'foo'
    >>> user_browser.getControl('Add').click()
    >>> user_browser.url
    'http://launchpad.dev/foss'
    >>> 'Test Product' in user_browser.contents
    True

The mail is sent when the transaction gets commited:

    >>> transaction.commit()
    >>> from_addr, to_addr, raw_message = stub.test_emails.pop()
    >>> msg = email.message_from_string(raw_message)
    >>> msg['To']
    'feedback@launchpad.net'
    >>> msg['From']
    'Launchpad <noreply@launchpad.net>'
    >>> msg['Subject']
    'Project License Submitted for foss by name12'
    >>> msg['Reply-To']
    'Sample Person <test@canonical.com>'
    >>> msg.get_payload()
    "...Other/Open Source...

Now let's try to insert a product with the same name (testing).

    >>> user_browser.open('http://launchpad.dev/projects/+new')
    >>> user_browser.getControl('Part of').value = 'mozilla'
    >>> user_browser.getControl('Name', index=0).value = 'testing'
    >>> user_browser.getControl('Display Name').value = 'Test Product'
    >>> user_browser.getControl('Title').value = 'This is a Test Product'
    >>> user_browser.getControl(name='field.description').value = (
    ...     'If you were describing a Test Product this would be a little '
    ...     'short but sweet.'
    ...     )
    >>> user_browser.getControl('Summary').value = 'This is the summary'
    >>> user_browser.getControl(name='field.licenses').value = ['GNU_GPL_V2']
    >>> user_browser.getControl(name='field.license_info').value = 'foo'
    >>> user_browser.getControl('Add').click()
    >>> user_browser.url
    'http://launchpad.dev/projects/+new'
    >>> print "\n".join(get_feedback_messages(user_browser.contents))
    There is 1 error.
    testing is already used by another project


Normal users don't get to see the owner and reviewed fields

    >>> user_browser.open('http://launchpad.dev/projects/+new')
    >>> user_browser.getControl('License reviewed')
    Traceback (most recent call last):
    ...
    LookupError:...
    >>> user_browser.getControl('Owner')
    Traceback (most recent call last):
    ...
    LookupError:...


And now, test with the David Allouche user, who is a member of the
vcs-imports team. This should fail suggesting an invalid owner, and
the reviewed value should be on.

    >>> browser = setupBrowser(auth='Basic david.allouche@canonical.com:test')
    >>> browser.open('http://launchpad.dev/projects/+new')
    >>> browser.getControl('Name', index=0).value = 'warpage'
    >>> browser.getControl('Owner').value = 'XXX'
    >>> browser.getControl('Display Name').value = 'dname'
    >>> browser.getControl('Title').value = 'title'
    >>> browser.getControl('Summary').value = 'summary'
    >>> browser.getControl(name='field.description').value = 'description'
    >>> browser.getControl(name='field.licenses').value = ['GNU_GPL_V2']
    >>> browser.getControl(name='field.license_info').value = 'foo'
    >>> browser.getControl('License reviewed').click()
    >>> browser.getControl('Add').click()
    >>> print browser.url
    http://launchpad.dev/projects/+new

    >>> '<p class="error message">There is 1 error.</p>' in browser.contents
    True
    >>> browser.getControl('License reviewed').selected
    True


And finally, submit a successful creation by an admin.

    >>> browser.getControl('Owner').value = 'sabdfl'
    >>> browser.getControl('Add').click()
    >>> print browser.url
    http://launchpad.dev/warpage

And now check it was correctly created:

    >>> from canonical.launchpad.database import Product
    >>> product = Product.selectOneBy(name="warpage")
    >>> print product.owner.name
    sabdfl
    >>> print product.license_reviewed
    True

It's also possible to set the product's icon/emblem at creation time.

    >>> user_browser.open('http://launchpad.dev/projects/+new')
    >>> user_browser.getControl('Part of').value = 'mozilla'
    >>> user_browser.getControl('Name', index=0).value = 'testing3'
    >>> user_browser.getControl('Display Name').value = 'Test Product #3'
    >>> user_browser.getControl('Title').value = 'This is a Test Product #3'
    >>> user_browser.getControl(name='field.description').value = (
    ...     'If you were describing a Test Product this would be a little '
    ...     'short but sweet.'
    ...     )
    >>> user_browser.getControl('Summary').value = 'This is the summary'
    >>> user_browser.getControl(name='field.licenses').value = ['GNU_GPL_V2']
    >>> user_browser.getControl(name='field.license_info').value = 'foo'

    >>> user_browser.getControl('Add').click()
    >>> user_browser.url
    'http://launchpad.dev/testing3'

