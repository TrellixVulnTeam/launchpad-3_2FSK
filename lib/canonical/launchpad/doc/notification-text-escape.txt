= Notification Text Escaping =

There are a number of user actions that may generate on-screen
notifications, such as moving a bug or deleting a branch.  Some of
these notifications display potentially unsafe text that is obtained
from the user.  In order to prevent a cross-site-scripting attack,
HTML characters in notifications must be escaped.  However, there are
special cases where notifications from known safe sources must be
allowed to pass HTML through.  This document exercises these
mechanisms.

    >>> from canonical.launchpad.webapp.notifications import (
    ...	     NotificationResponse, NotificationRequest)
    >>> def new_response():
    ...     response = NotificationResponse()
    ...     request = NotificationRequest()
    ...     request.response = response
    ...     response._request = request
    ...	    return response
    >>>

In the vast majority of cases, raw text that is passed into the
Notification object's addNotification() methods should
be CGI escaped.

    # check clean, unmarked text
    >>> response = new_response()
    >>> response.addNotification('clean')
    >>> for notification in response.notifications:
    ...   print notification.message
    clean

    # check dirty text containing markup
    >>> response = new_response()
    >>> response.addNotification(u'<br/>dirty')
    >>> for notification in response.notifications:
    ...     notification.message
    u'&lt;br/&gt;dirty'
    >>>

If the object passed to addNotification() publishes the
IStructuredString interface, then a string will be returned with the
appropriate sections escaped and unescaped.

    >>> from canonical.launchpad.webapp.menu import structured
    >>> from canonical.launchpad.webapp.interfaces import IStructuredString
    >>> msg = u'<b>%(escaped)s</b>'
    >>> structured_text = structured(msg, escaped=u'<br/>foo')
    >>> IStructuredString.providedBy(structured_text)
    True
    >>> structured_text.escapedtext
    u'<b>&lt;br/&gt;foo</b>'
    >>> response = new_response()
    >>> response.addNotification(structured_text)
    >>> for notification in response.notifications:
    ...     notification.message
    u'<b>&lt;br/&gt;foo</b>'
    >>>

Passing an object to addNotification() that is an instance of
zope.i18n.Message or zope.i18n.MessageID will be escaped in the same
manner as raw text.

    >>> import zope.i18n
    >>> msgtxt = zope.i18n.Message(u'<br/>foo')
    >>> msgidtxt = zope.i18n.MessageID(u'<br/>foo')
    >>> response = new_response()
    >>> response.addNotification(msgtxt)
    >>> response.addNotification(msgidtxt)
    >>> for notification in response.notifications:
    ...     notification.message
    u'&lt;br/&gt;foo'
    u'&lt;br/&gt;foo'
