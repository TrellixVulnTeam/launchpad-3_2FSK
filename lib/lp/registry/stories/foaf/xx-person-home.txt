= Personal Home Pages =

Launchpad creates profiles for people that have contributed to free
software (e.g. in a bug import or a translation template upload). It's
clearly stated that those people don't use Launchpad and why there's a
profile for them.

    >>> browser.open('http://launchpad.dev/~matsubara')
    >>> browser.title
    'Diogo Matsubara does not use Launchpad'

    >>> content = find_main_content(browser.contents).find('p')
    >>> print extract_text(content)
    Diogo Matsubara does not use Launchpad. This page was created on
    2006-12-13 when importing the Portuguese...


== Email address disclosure ==

Mark has a registered email address, and he has chosen to disclose it to
the world. Anonymous users cannot see Mark's address

    >>> anon_browser.open('http://launchpad.dev/~sabdfl')
    >>> print extract_text(
    ...     find_tag_by_id(anon_browser.contents, 'contact-details'))
    Email: Log in for email information.
    ...

A logged in user such as Sample Person, can see Mark's addresses.

    >>> sample_browser = setupBrowser(auth='Basic test@canonical.com:test')
    >>> sample_browser.open('http://launchpad.dev/~sabdfl')
    >>> print extract_text(
    ...     find_tag_by_id(sample_browser.contents, 'contact-details'))
    Email: mark@hbd.com
    ...

As for Sample Person, he has chosen not to disclose his email addresses.
unprivileged users like No Privileges Person cannot see his addresses:

    >>> user_browser.open('http://launchpad.dev/~name12')
    >>> print extract_text(
    ...     find_tag_by_id(user_browser.contents, 'contact-details'))
    Email: No public address provided.
    ...

But Foo Bar can:

    >>> admin_browser.open('http://launchpad.dev/~name12')
    >>> print extract_text(
    ...     find_tag_by_id(admin_browser.contents, 'contact-details'))
    Email: test@canonical.com
    (Contact this user)
           testing@canonical.com
    ...


== Open ID link ==

When a person visits his or her own page, they'll see their OpenID login URL.

    >>> user_browser.open('http://launchpad.dev/~no-priv')
    >>> print extract_text(
    ...     find_tag_by_id(user_browser.contents, 'openid-info'))
    OpenID login: http://launchpad.dev/~no-priv ...

The URL is followed by a helpful link.

    >>> print user_browser.getLink('(What\xe2\x80\x99s\xc2\xa0this?)').url
    http://launchpad.dev/+help/openid.html

However, when the user visits someone else's page, they see no such URL.

    >>> user_browser.open('http://launchpad.dev/~salgado')
    >>> print find_tag_by_id(user_browser.contents, 'openid-info')
    None

And there is no helpful link.

    >>> print user_browser.getLink(u"What&#8217;s\xa0this?").url
    Traceback (most recent call last):
    ...
    LinkNotFoundError


== Jabber IDs ==

A person's jabber IDs are only show to authenticated users.

    >>> user_browser.open('http://launchpad.dev/~sabdfl')
    >>> print extract_text(
    ...     find_tag_by_id(user_browser.contents, 'contact-details'))
    Email:...
    Jabber: markshuttleworth@jabber.org
    ...

    >>> anon_browser.open('http://launchpad.dev/~sabdfl')
    >>> print extract_text(
    ...     find_tag_by_id(anon_browser.contents, 'contact-details'))
    Email:...
    Jabber: &lt;email address hidden&gt;
    ...


== OpenPGP keys ==

In order to avoid email harvesters to find a person's email addresses just by
following the link to that person's OpenPGP keys, only authenticated users can
see the key ID with a link to the keyserver.

    >>> import re
    >>> user_browser.open('http://launchpad.dev/~name16')
    >>> details = find_tag_by_id(user_browser.contents, 'contact-details')
    >>> opengpg = details.find('th', text='OpenPGP keys:').parent.parent
    >>> print re.sub('\s+', ' ', str(opengpg))
    <tr>...<a href="http://keyserver...> 12345678</a>...

    >>> anon_browser.open('http://launchpad.dev/~name16')
    >>> details = find_tag_by_id(anon_browser.contents, 'contact-details')
    >>> opengpg = details.find('th', text='OpenPGP keys:').parent.parent
    >>> print re.sub('\s+', ' ', str(opengpg))
    <tr>...<td> 12345678 </td>...


== Languages ==

The contact details portlet shows the languages that the user speaks.
No Privileges Person can see the languages that sabdfl speaks.

    >>> user_browser.open('http://launchpad.dev/~carlos')
    >>> print extract_text(find_tag_by_id(user_browser.contents, 'languages'))
    Languages:
    Catalan, English, Spanish

When viewing his own page, No Privileges Person sees his languages and can
edit them.

    >>> user_browser.open('http://launchpad.dev/~no-priv')
    >>> languages_row = find_tag_by_id(user_browser.contents, 'languages')
    >>> print languages_row.td
    <td> English <a href=".../~no-priv/+editlanguages"...


== Summary Pagelets ==

A person's homepage also lists Karma and status information:

    >>> browser.open('http://launchpad.dev/~sabdfl')
    >>> print extract_text(find_tag_by_id(browser.contents, 'portlet-details'))
    Bragging rights
    Member since: 2005-06-06
    Karma: 130

Negative Ubuntu Code of Conduct signatory status is only displayed for
yourself; others won't see it:

    >>> "Signed Ubuntu Code of Conduct:" in browser.contents
    False

    >>> browser = setupBrowser(auth='Basic mark@hbd.com:test')
    >>> browser.open('http://launchpad.dev/~sabdfl')
    >>> print extract_text(find_tag_by_id(browser.contents, 'portlet-details'))
    Bragging rights
    ...
    Signed Ubuntu Code of Conduct: No

You can grab certain bits of information programatically:

    >>> print extract_text(find_tag_by_id(browser.contents, 'karma-total'))
    130
    >>> print extract_text(find_tag_by_id(browser.contents, 'member-since'))
    2005-06-06

Teams don't have member-since; they have created-date:

    >>> browser.open('http://launchpad.dev/~guadamen')
    >>> print extract_text(find_tag_by_id(browser.contents, 'created-date'))
    2005-06-06


=== Time zones ===

The user's time zone is displayed next to their location details:

    >>> browser.open('http://launchpad.dev/~name12')
    >>> print extract_text(
    ...     find_tag_by_id(browser.contents, 'portlet-map'))
    Location
    Time zone: Australia/Perth

Teams don't have a time zone field.

    >>> browser.open('http://launchpad.dev/~guadamen')
    >>> 'Time zone' in extract_text(
    ...     find_tag_by_id(browser.contents, 'portlet-map'))
    False


== Table of contributions ==

A person's home page also displays a table with the contributions made by that
person. This table includes 5 projects in which this person is most active
and also the areas in which (s)he worked on each project.

    >>> anon_browser.open('http://launchpad.dev/~name16')
    >>> table = find_tag_by_id(anon_browser.contents, 'contributions')
    >>> for tr in table.findAll('tr'):
    ...     print tr.find('th').find('a').renderContents()
    ...     for td in tr.findAll('td'):
    ...         img = td.find('img')
    ...         if img is not None:
    ...             print "\t", img['title']
    Evolution
       Bug Management
       Translations in Rosetta
    Ubuntu
       Bug Management
    gnomebaker
       Bug Management
    Mozilla Thunderbird
       Bug Management
    Mozilla Firefox
       Bug Management

If the person hasn't made any contributions, the table is not present in its
page.

    >>> anon_browser.open('http://launchpad.dev/~jdub')
    >>> print find_tag_by_id(anon_browser.contents, 'contributions')
    None

The same for teams.

    >>> anon_browser.open('http://launchpad.dev/~ubuntu-team')
    >>> print find_tag_by_id(anon_browser.contents, 'contributions')
    None
