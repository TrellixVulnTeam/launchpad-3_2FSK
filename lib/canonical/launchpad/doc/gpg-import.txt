OpenPGP Import
==============

The importKey method is exposed by IGPGHandler but it's only used
internally by retrieveKey method.

 >>> from zope.component import getUtility
 >>> from zope.interface.verify import verifyObject 

 >>> from canonical.launchpad.interfaces import (
 ...      IGPGHandler, IPymeKey)


Setup a IGPGHandler utility:

 >>> gpghandler = getUtility(IGPGHandler)

Return None if we try to import an empty content:

 >>> key = gpghandler.importKey(None)
 >>> assert key is None

Also return None for bogus content:

 >>> key = gpghandler.importKey('XXXXXXXXX')
 >>> assert key is None

Let's recover some coherent data and verify if it works as expected:

 >>> import os
 >>> from canonical.launchpad.ftests.keys_for_tests import gpgkeysdir
 >>> pubkey = open(os.path.join(gpgkeysdir, 'test@canonical.com.pub')).read()
 >>> key = gpghandler.importKey(pubkey)
 >>> assert key is not None
 >>> verifyObject(IPymeKey, key)
 True
 >>> key.fingerprint
 'A419AE861E88BC9E04B9C26FBA2B9389DFD20543'

Return None if we try to import a public key with damaged preamble: 

 >>> key = gpghandler.importKey(pubkey[1:])
 >>> assert key is None

Aparently GPGME is able to import an incomplete public key:

 >>> key = gpghandler.importKey(pubkey[:-300])
 >>> assert key is not None
 >>> verifyObject(IPymeKey, key)
 True
 >>> key.fingerprint
 'A419AE861E88BC9E04B9C26FBA2B9389DFD20543'
 
But we get an error if the damage is big: 
(what probably happened in bug # 2547)

 >>> key = gpghandler.importKey(pubkey[:-400])
 >>> assert key is None

Keyserver URLs
==============

The gpghandler can also provide us with convenient links to the
keyserver web interface. By default the action is to display the index
page:

 >>> gpghandler.getURLForKeyInServer("DFD20543")
 'http://localhost:11371/pks/lookup?search=0xDFD20543&op=index'

But you can also specify your own action:

 >>> gpghandler.getURLForKeyInServer("DFD20543", action="get")
 'http://localhost:11371/pks/lookup?search=0xDFD20543&op=get'

The fingerprint can be both 8-byte, as above, or a longer string such as
the 40-byte fingerprint we captured above:

 >>> fingerprint = "A419AE861E88BC9E04B9C26FBA2B9389DFD20543"
 >>> gpghandler.getURLForKeyInServer(fingerprint)
 'http://localhost:11371/pks/lookup?search=0xDFD20543&op=index'

Fingerprint sanitizing
======================

The GPG handler offers a convenience method to sanitize key
fingerprints:

 >>> print gpghandler.sanitizeFingerprint("XXXXX")
 None

 >>> fingerprint = 'C858 2652 1A6E F6A6 037B  B3F7 9FF2 583E 681B 6469'
 >>> print gpghandler.sanitizeFingerprint(fingerprint)
 C85826521A6EF6A6037BB3F79FF2583E681B6469

 >>> fingerprint = 'c858 2652 1a6e f6a6 037b  b3f7 9ff2 583e 681b 6469'
 >>> print gpghandler.sanitizeFingerprint(fingerprint)
 C85826521A6EF6A6037BB3F79FF2583E681B6469

 >>> print gpghandler.sanitizeFingerprint('681B 6469')
 None

 >>> print gpghandler.sanitizeFingerprint('abnckjdiue')
 None

 >>> fingerprint = 'c858 2652 1a6e f6a6 037b  b3f7 9ff2 583e 681b 6469 áéí'
 >>> print gpghandler.sanitizeFingerprint(fingerprint)
 C85826521A6EF6A6037BB3F79FF2583E681B6469

 >>> fingerprint = 'áéí c858 2652 1a6e f6a6 037b  b3f7 9ff2 583e 681b 6469 áéí'
 >>> print gpghandler.sanitizeFingerprint(fingerprint)
 None

