
Testing the Package Death Row
=============================

  >>> import datetime
  >>> import pytz
  >>> from canonical.database.sqlbase import flush_database_updates
  >>> from canonical.lp.dbschema import PackagePublishingStatus
  >>> from canonical.archivepublisher.deathrow import DeathRow
  >>> from canonical.archivepublisher.diskpool import DiskPool
  >>> from canonical.launchpad.database import Distribution
  >>> from canonical.launchpad.database import \
  ...   SecureBinaryPackagePublishingHistory as SBPPH
  >>> from canonical.launchpad.database import \
  ...   SecureSourcePackagePublishingHistory as SSPPH
  >>> from canonical.launchpad.database import \
  ...   SourcePackageReleaseFile as SPRF
  >>> class MockLogger:
  ...     def debug(self, s):
  ...         print "DEBUG:", s
  ...     def info(self, s):
  ...         print "INFO:", s
  ...     def exception(self, s):
  ...         print "EXC:", s

We're working inside Ubuntu:

  >>> distro = Distribution.selectOneBy(name="ubuntu")

Temporary directories to be used in tests:

  >>> import os
  >>> pool_path = '/tmp/pool'
  >>> os.makedirs(pool_path)
  >>> temp_path = '/tmp/temp'
  >>> os.makedirs(temp_path)


Nothing to do
=============

The no-operation use case:

  >>> dp = DiskPool(pool_path, temp_path, MockLogger())
  >>> dr = DeathRow(distro, dp, MockLogger())
  >>> dr.reap(dry_run=True)
  INFO: Removing 0 files marked for reaping
  INFO: Total bytes freed: 0
  DEBUG: Marking 0 condemned packages as removed.

Package Removal (dry-run)
=========================

And, if we mark some packages to be pending removal. Source publication
15 refers to alsa-utils_1.0.9a-4.dsc:

  >>> this_year = datetime.datetime.now().year
  >>> old_date = datetime.datetime(year=this_year - 2, month=1, day=1,
  ...                              tzinfo=pytz.timezone('UTC'))
  >>> future_date = datetime.datetime(year=this_year + 2, month=1, day=1,
  ...                                 tzinfo=pytz.timezone('UTC'))

  >>> pub = SSPPH.get(15)
  >>> print pub.dateremoved
  None
  >>> pub.status = PackagePublishingStatus.PENDINGREMOVAL
  >>> pub.scheduleddeletiondate = old_date

Source publication 12 includes alsa-utils_1.0.9a-4ubuntu1.dsc:

  >>> pub = SSPPH.get(12)
  >>> print pub.distroseries.name
  hoary
  >>> print pub.dateremoved
  None
  >>> pub.status = PackagePublishingStatus.PENDINGREMOVAL
  >>> pub.scheduleddeletiondate = old_date

But so does source publication 20, which we'll set to pending removal
but with a scheduled deletion date in the future. Because not all of the
references to the file are ready to be removed, the file will not be
deleted yet.

  >>> pub = SSPPH.get(20)
  >>> print pub.distroseries.name
  warty
  >>> print [f.libraryfile.filename
  ...        for f in pub.sourcepackagerelease.files]
  [u'alsa-utils_1.0.9a-4ubuntu1.dsc']
  >>> pub.status = PackagePublishingStatus.PENDINGREMOVAL
  >>> pub.scheduleddeletiondate = future_date

Knock off some binaries as well:

  >>> pub = SBPPH.get(19)
  >>> print pub.dateremoved
  None
  >>> pub.status = PackagePublishingStatus.PENDINGREMOVAL
  >>> pub.scheduleddeletiondate = old_date

  >>> pub = SBPPH.get(17)
  >>> print pub.dateremoved
  None
  >>> pub.status = PackagePublishingStatus.PENDINGREMOVAL
  >>> pub.scheduleddeletiondate = old_date

As above, both 19 and 21 refer to the same pmount binaries, and since 21
is not to be removed, we won't try and remove its files:

  >>> pub = SBPPH.get(19)
  >>> print [f.libraryfile.filename
  ...        for f in pub.binarypackagerelease.files]
  [u'pmount_1.9-1_all.deb']
  >>> pub = SBPPH.get(21)
  >>> print [f.libraryfile.filename
  ...        for f in pub.binarypackagerelease.files]
  [u'pmount_1.9-1_all.deb']

Flush our these updates and kick the DeathRow processor again.

  >>> flush_database_updates()
  >>> dp = DiskPool(pool_path, temp_path, MockLogger())
  >>> dr = DeathRow(distro, dp, MockLogger())
  >>> dr.reap(dry_run=True)
  INFO: Removing 2 files marked for reaping
  DEBUG: (Not really!) removing main linux-source-2.6.15/linux-2.6.12_2.6.12.20_i386.deb
  DEBUG: File to remove main linux-source-2.6.15/linux-2.6.12_2.6.12.20_i386.deb is not in pool, skipping
  DEBUG: (Not really!) removing main alsa-utils/alsa-utils_1.0.9a-4.dsc
  DEBUG: File to remove main alsa-utils/alsa-utils_1.0.9a-4.dsc is not in pool, skipping
  INFO: Total bytes freed: 0
  DEBUG: Marking 4 condemned packages as removed.

Note that while we are in dry run mode, the database queries are
actually executed; the process-death-row script however does not commit
the transaction when that flag is set.

Look at the results of our actions. Two packages removed and the date
removed properly set up:

  >>> pub = SSPPH.get(15)
  >>> pub.status == PackagePublishingStatus.REMOVED
  True
  >>> pub.dateremoved
  CURRENT_TIMESTAMP AT TIME ZONE 'UTC'
  >>> pub = SSPPH.get(12)
  >>> pub.status == PackagePublishingStatus.REMOVED
  True
  >>> pub.dateremoved
  CURRENT_TIMESTAMP AT TIME ZONE 'UTC'

Publication 20 of course is left alone:

  >>> pub = SSPPH.get(20)
  >>> pub.status == PackagePublishingStatus.REMOVED
  False

Package Removal (simulated real run)
====================================

Test that bytes freed computing is handled correctly:

  >>> def removeFileReturningSize(cn, sn, fn):
  ...    print "DEBUG: (Not really!) removing %s %s/%s" % (cn, sn, fn)
  ...    return 5
  >>> dr._removeFile = removeFileReturningSize
  >>> pub = SSPPH.get(2)
  >>> pub.status = PackagePublishingStatus.PENDINGREMOVAL
  >>> pub.scheduleddeletiondate = old_date
  >>> pub = SBPPH.get(21)
  >>> pub.status = PackagePublishingStatus.PENDINGREMOVAL
  >>> pub.scheduleddeletiondate = old_date
  >>> flush_database_updates()
  >>> dr.reap()
  INFO: Removing 2 files marked for reaping
  DEBUG: (Not really!) removing main pmount/pmount_1.9-1_all.deb
  DEBUG: (Not really!) removing main evolution/evolution-1.0.tar.gz
  INFO: Total bytes freed: 10
  DEBUG: Marking 2 condemned packages as removed.

Test that random exceptions are handled correctly:

  >>> def removeFileRaisingOtherException(cn, sn, fn):
  ...    print "DEBUG: (Not really!) removing %s %s/%s" % (cn, sn, fn)
  ...    raise TypeError
  >>> dr._removeFile = removeFileRaisingOtherException
  >>> pub = SSPPH.get(10)
  >>> pub.status = PackagePublishingStatus.PENDINGREMOVAL
  >>> pub.scheduleddeletiondate = old_date
  >>> flush_database_updates()
  >>> dr.reap()
  INFO: Removing 1 files marked for reaping
  DEBUG: (Not really!) removing main alsa-utils/alsa-utils_1.0.8-1ubuntu1.dsc
  EXC: Removing file main alsa-utils/alsa-utils_1.0.8-1ubuntu1.dsc generated exception, continuing
  INFO: Total bytes freed: 0
  DEBUG: Marking 1 condemned packages as removed.


Remove temporary diretories used for tests:

  >>> import shutil
  >>> shutil.rmtree(pool_path)
  >>> shutil.rmtree(temp_path)
