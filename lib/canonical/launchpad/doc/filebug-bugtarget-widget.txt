= The +filebug Bug Target Widget =

The general +filebug allows bugs to be filed on any product or package,
and to help with this, the FileBugTargetWidget is used.

    >>> from zope.interface.verify import verifyObject
    >>> from canonical.launchpad.interfaces import (
    ...     IGeneralBugAddForm, IMaloneApplication)
    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest
    >>> from canonical.widgets.bug import FileBugTargetWidget

    >>> empty_request = LaunchpadTestRequest()
    >>> widget = FileBugTargetWidget(
    ...     IGeneralBugAddForm['bugtarget'], empty_request)

The widget complies to both IInputWidget and IBrowserWidget.

    >>> from zope.app.form.interfaces import IInputWidget
    >>> from zope.app.form.browser.interfaces import IBrowserWidget
    >>> verifyObject(IInputWidget, widget)
    True
    >>> verifyObject(IBrowserWidget, widget)
    True

When the request is empty, the widet doesn't have any input:

    >>> widget.hasInput()
    False
    >>> widget.hasValidInput()
    False

It's a radio widget, so it assumes that it always will have input, so if
it doesn't it raises UnexpectedFormData

    >>> widget.getInputValue()
    Traceback (most recent call last):
    ...
    UnexpectedFormData: No valid option was selected.

By default the first option is selected:

    >>> print widget()
    <table>
      <tr>
        <td>
          <label>
            <input class="radioType" checked="checked"
                   id="field.bugtarget.package" name="field.bugtarget"
                   type="radio" value="package" />
    ...
            <input class="radioType" id="field.bugtarget.product"
                   name="field.bugtarget" type="radio" value="product" />
    ...

== Selecting a distribution ==

If we select a distribution, the distribution with that name is returned
by getInputValue().

    >>> from canonical.launchpad.interfaces import IDistribution
    >>> form = {'field.bugtarget': 'package',
    ...         'field.bugtarget.distribution': 'ubuntu'}
    >>> widget = FileBugTargetWidget(
    ...     IGeneralBugAddForm['bugtarget'], LaunchpadTestRequest(form=form))
    >>> widget.hasInput()
    True
    >>> selected_distribution = widget.getInputValue()
    >>> IDistribution.providedBy(selected_distribution)
    True
    >>> selected_distribution.name
    u'ubuntu'

If an non-existant distribution name is provided, a conversion error is
raised.

    >>> form['field.bugtarget.distribution'] = 'invalid'
    >>> widget = FileBugTargetWidget(
    ...     IGeneralBugAddForm['bugtarget'], LaunchpadTestRequest(form=form))
    >>> widget.hasInput()
    True
    >>> selected_distribution = widget.getInputValue()
    Traceback (most recent call last):
    ...
    ConversionError:...

If no distribution name is given at all, a MissingInput error is raised.

    >>> del form['field.bugtarget.distribution']
    >>> widget = FileBugTargetWidget(
    ...     IGeneralBugAddForm['bugtarget'], LaunchpadTestRequest(form=form))
    >>> widget.hasInput()
    True
    >>> selected_distribution = widget.getInputValue()
    Traceback (most recent call last):
    ...
    MissingInputError:...

== Selecting a package ==

If both a distribution and a package name is selected, a distribution
source package is returned.

    >>> from canonical.launchpad.interfaces import IDistributionSourcePackage
    >>> form = {'field.bugtarget': 'package',
    ...         'field.bugtarget.distribution': 'ubuntu',
    ...         'field.bugtarget.package': 'evolution'}
    >>> widget = FileBugTargetWidget(
    ...     IGeneralBugAddForm['bugtarget'], LaunchpadTestRequest(form=form))
    >>> widget.hasInput()
    True
    >>> selected_package = widget.getInputValue()
    >>> IDistributionSourcePackage.providedBy(selected_package)
    True
    >>> selected_package.distribution.name
    u'ubuntu'
    >>> selected_package.name
    u'evolution'

If a non-existant package is selected, a ConversionError is raised.

    >>> form['field.bugtarget.package'] = 'non-existant'
    >>> widget = FileBugTargetWidget(
    ...     IGeneralBugAddForm['bugtarget'], LaunchpadTestRequest(form=form))
    >>> widget.hasInput()
    True
    >>> selected_package = widget.getInputValue()
    Traceback (most recent call last):
    ...
    ConversionError:...


== Selecting a product ==

If a product is selected, the product with the given name is returned.

    >>> from canonical.launchpad.interfaces import IProduct
    >>> form = {'field.bugtarget': 'product',
    ...         'field.bugtarget.product': 'firefox'}
    >>> widget = FileBugTargetWidget(
    ...     IGeneralBugAddForm['bugtarget'], LaunchpadTestRequest(form=form))
    >>> widget.hasInput()
    True
    >>> selected_product = widget.getInputValue()
    >>> IProduct.providedBy(selected_product)
    True
    >>> selected_product.name
    u'firefox'

If a non-existant product name is entered, a Conversion error is raised.

    >>> form['field.bugtarget.product'] = u'non-existant'
    >>> widget = FileBugTargetWidget(
    ...     IGeneralBugAddForm['bugtarget'], LaunchpadTestRequest(form=form))
    >>> widget.hasInput()
    True
    >>> selected_product = widget.getInputValue()
    Traceback (most recent call last):
    ...
    ConversionError:...

If no product name is given at all, a MissingInput error is raised.

    >>> del form['field.bugtarget.product']
    >>> widget = FileBugTargetWidget(
    ...     IGeneralBugAddForm['bugtarget'], LaunchpadTestRequest(form=form))
    >>> widget.hasInput()
    True
    >>> selected_distribution = widget.getInputValue()
    Traceback (most recent call last):
    ...
    MissingInputError:...
