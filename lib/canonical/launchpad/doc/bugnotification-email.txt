Bug Notification Email
======================

This document describes the internal workings of how bug notification
emails are generated and how said emails are formatted. It does not
cover the various rules and semantics surrounding the notifications
themselves; for that, see bugnotifications.txt.

The reference spec associated with this document is available on the
Launchpad wiki:

    https://wiki.launchpad.canonical.com/FormattingBugNotifications

You need to be logged in to edit bugs in Malone, so let's get started:

    >>> from canonical.launchpad.ftests import login
    >>> login("test@canonical.com")

To avoid having one gargantuan super function that formats any kind of
object it gets passed, the formatting logic has been cut into two
pieces: generate_bug_edit_email and generate_bug_add_email.

    >>> from canonical.launchpad.mailnotification import (
    ...     generate_bug_add_email, generate_bug_edit_email)

Let's demonstrate what the bugmails will look like, by going through
the various events that can happen that would cause a notification to
be sent. We'll start by importing some things we'll need for the
examples that follow:

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.interfaces import (
    ...     IBugDelta, IBugSet, IPersonSet, IBugMessageSet, IBugTaskSet,
    ...     ICve)
    >>> from canonical.launchpad.components.bug import BugDelta

Filing a bug
------------

generate_bug_add_email accepts one argument: the IBug that was just
added. With that, it generates an appropriately-formatted notification
message, and returns it as a (subject, body) tuple.

So, let's pretend that we filed bug 4 just now:

    >>> bug_four = getUtility(IBugSet).get(4)

Let's take a look at what the notification email looks like:

    >>> subject, body = generate_bug_add_email(bug_four)
    >>> subject
    u'[Bug 4] Reflow problems with complex page layouts'
    >>> print body
    Public bug reported:
    <BLANKLINE>
    Affects: firefox (upstream)
           Severity: Normal
           Priority: Medium
             Status: Unconfirmed
    <BLANKLINE>
    Description:
    Malone pages that use more complex layouts with portlets and fancy CSS are
    sometimes not getting properly reflowed after rendering.


Editing a bug
-------------

generate_bug_edit_email accepts an object that provides IBugDelta, and
returns the subject and body of the email, as a tuple.

    >>> sample_person = getUtility(IPersonSet).get(12)
    >>> edited_bug = getUtility(IBugSet).get(2)

    >>> old_title = edited_bug.title
    >>> edited_bug.title = "the new title"
    >>> old_description = edited_bug.description
    >>> edited_bug.description = (
    ...     "The Trash folder seems to have significant problems! At the"
    ...     " moment, dragging an item to the Trash results in immediate"
    ...     " deletion. The item does not appear in the Trash, it is just"
    ...     " deleted from my hard disk. There is no undo or ability to"
    ...     " recover the deleted file. Help!")

    >>> bug_delta = BugDelta(
    ...     bug=edited_bug,
    ...     bugurl="http://www.example.com/bugs/2",
    ...     user=sample_person,
    ...     title={'new': edited_bug.title, 'old': old_title},
    ...     description={'new': edited_bug.description,
    ...                  'old': old_description})
    >>> IBugDelta.providedBy(bug_delta)
    True

    >>> subject, body = generate_bug_edit_email(bug_delta)
    >>> subject
    u'[Bug 2] the new title'
    >>> print body #doctest: -NORMALIZE_WHITESPACE
    ** Summary changed:
    <BLANKLINE>
    - Blackhole Trash folder
    + the new title
    ** Description changed:
    <BLANKLINE>
      The Trash folder seems to have significant problems! At the moment,
    - dragging an item to the trash results in immediate deletion. The item
    + dragging an item to the Trash results in immediate deletion. The item
      does not appear in the Trash, it is just deleted from my hard disk.
      There is no undo or ability to recover the deleted file. Help!


Another edit, this time a long description, showing that the description
is wrapped properly:

    >>> old_description = edited_bug.description
    >>> edited_bug.description = """\
    ... a new description that is quite long. but the nice thing is that the edit notification email generator knows how to indent and wrap descriptions, so this will appear quite nice in the actual email that gets sent.\n\nit's also smart enough to preserve whitespace, finally!"""

    >>> bug_delta = BugDelta(
    ...     bug=edited_bug,
    ...     bugurl="http://www.example.com/bugs/2",
    ...     user=sample_person,
    ...     description={'new': edited_bug.description,
    ...                  'old': old_description})
    >>> subject, body = generate_bug_edit_email(bug_delta)
    >>> subject
    u'[Bug 2] the new title'
    >>> print body #doctest: -NORMALIZE_WHITESPACE
    ** Description changed:
    <BLANKLINE>
    - The Trash folder seems to have significant problems! At the moment,
    - dragging an item to the Trash results in immediate deletion. The item
    - does not appear in the Trash, it is just deleted from my hard disk.
    - There is no undo or ability to recover the deleted file. Help!
    + a new description that is quite long. but the nice thing is that the
    + edit notification email generator knows how to indent and wrap
    + descriptions, so this will appear quite nice in the actual email that
    + gets sent.
    + 
    + it's also smart enough to preserve whitespace, finally!


Let's set the bug private (for demo purposes, we need to switch logins
to a user that is explicitly subscribed to this bug):

    >>> login("steve.alexander@ubuntulinux.com")

    >>> edited_bug.private = True
    >>> bug_delta = BugDelta(
    ...     bug = edited_bug,
    ...     bugurl = "http://www.example.com/bugs/2",
    ...     user = sample_person,
    ...     private = {'old' : False, 'new' : edited_bug.private})
    >>> subject, body = generate_bug_edit_email(bug_delta)
    >>> subject
    u'[Bug 2] the new title'
    >>> print body #doctest: -NORMALIZE_WHITESPACE
    ** Visibility changed to: Private

Now we set the bug public and check if the e-mail sent changed as well.

    >>> edited_bug.private = False 
    >>> bug_delta = BugDelta(
    ...     bug = edited_bug,
    ...     bugurl = "http://www.example.com/bugs/2",
    ...     user = sample_person,
    ...     private = {'old' : True, 'new' : edited_bug.private})
    >>> subject, body = generate_bug_edit_email(bug_delta)
    >>> subject
    u'[Bug 2] the new title'
    >>> print body #doctest: -NORMALIZE_WHITESPACE
    ** Visibility changed to: Public

Adding a new bug task
---------------------

Because adding a new task is sort of like "editing" a bug,
generate_bug_edit_email handles generating the email when a new task
is added to a bug. To demonstrate what this email looks like, let's
pretend we had just added task five:

    >>> ubuntu_mozilla_task = getUtility(IBugTaskSet).get(17)
    >>> bug_one = getUtility(IBugSet).get(1)

    >>> bug_delta = BugDelta(
    ...     bug = bug_one,
    ...     bugurl = "http://www.example.com/bugs/1",
    ...     user = sample_person,
    ...     added_bugtasks = ubuntu_mozilla_task)
    >>> subject, body = generate_bug_edit_email(bug_delta)
    >>> subject
    u'[Bug 1] Firefox does not support SVG'
    >>> print body #doctest: -NORMALIZE_WHITESPACE
    ** Also affects: mozilla-firefox (Ubuntu)
         Severity: Normal
         Priority: Medium
           Status: Unconfirmed

Editing a bug task
------------------

As you might expect, generate_bug_edit_email handles generating the
bugmail when a bug task is edited.

    >>> from canonical.launchpad.interfaces import IBugTaskDelta, IBugTaskSet
    >>> from canonical.launchpad.components.bugtask import BugTaskDelta
    >>> from canonical.lp.dbschema import BugTaskStatus

    >>> edited_bugtask = getUtility(IBugTaskSet).get(3)
    >>> edited_bugtask.status = BugTaskStatus.CONFIRMED
    >>> edited_bugtask.assignee = sample_person.id
    >>> bugtask_delta = BugTaskDelta(
    ...     bugtask=edited_bugtask,
    ...     status={'old' : BugTaskStatus.UNCONFIRMED, 'new' : edited_bugtask.status},
    ...     assignee={'old' : None, 'new' : edited_bugtask.assignee})
    >>> bug_delta = BugDelta(
    ...     bug=edited_bug,
    ...     bugurl="http://www.example.com/bugs/2",
    ...     user=sample_person,
    ...     bugtask_deltas=bugtask_delta)
    >>> subject, body = generate_bug_edit_email(bug_delta)
    >>> subject
    u'[Bug 2] the new title'
    >>> print body #doctest: -NORMALIZE_WHITESPACE
    ** Changed in: ubuntu (upstream)
         Assignee: (unassigned) => Sample Person
           Status: Unconfirmed => Confirmed

Let's take a look at how it looks like when a distribution task is
edited:

    >>> debian_bugtask = getUtility(IBugTaskSet).get(5)
    >>> print debian_bugtask.targetname
    mozilla-firefox (Debian)
    >>> debian_bugtask.assignee = None
    >>> bugtask_delta = BugTaskDelta(
    ...     bugtask=debian_bugtask,
    ...     assignee={'old' : sample_person, 'new' : None})
    >>> bug_delta = BugDelta(
    ...     bug=edited_bug,
    ...     bugurl="http://www.example.com/bugs/2",
    ...     user=sample_person,
    ...     bugtask_deltas=bugtask_delta)
    >>> subject, body = generate_bug_edit_email(bug_delta)
    >>> subject
    u'[Bug 2] the new title'
    >>> print body #doctest: -NORMALIZE_WHITESPACE
    ** Changed in: mozilla-firefox (Debian)
         Assignee: Sample Person => (unassigned)

Adding and editing web links
----------------------------

Adding a web link can be seen as "editing" a bug.

    >>> from zope.interface import implements
    >>> from canonical.launchpad.interfaces import IBugExternalRef
    >>> class MockBugExtRef:
    ...     implements(IBugExternalRef)
    ...     def __init__(self, bug, url, title, owner):
    ...         self.bug = bug
    ...         self.url = url
    ...         self.title = title
    ...         self.owner = owner
    >>> mock_ext_ref = MockBugExtRef(
    ...     bug = edited_bug,
    ...     url = "http://www.example.com/foo/bar",
    ...     title = "some title",
    ...     owner = sample_person.id)

    >>> bug_delta = BugDelta(
    ...     bug = edited_bug,
    ...     bugurl = "http://www.example.com/bugs/2",
    ...     user = sample_person,
    ...     external_reference = {'new': mock_ext_ref})
    >>> subject, body = generate_bug_edit_email(bug_delta)
    >>> subject
    u'[Bug 2] the new title'
    >>> print body #doctest: -NORMALIZE_WHITESPACE
    ** Web link added: http://www.example.com/foo/bar

Editing a web link shows the previous link as "Removed" and the newly
modified link as having been "Added" (though no actual "adding" or
"deleting" is actually taking place in the database.)

    >>> mock_ext_ref_edited = MockBugExtRef(
    ...     bug = edited_bug,
    ...     url = "http://www.example.com/foo/bar",
    ...     title = "some better title",
    ...     owner = sample_person.id)

    >>> bug_delta = BugDelta(
    ...     bug = edited_bug,
    ...     bugurl = "http://www.example.com/bugs/2",
    ...     user = sample_person,
    ...     external_reference = {
    ...         'old' : mock_ext_ref, 'new': mock_ext_ref_edited})
    >>> subject, body = generate_bug_edit_email(bug_delta)
    >>> subject
    u'[Bug 2] the new title'
    >>> print body #doctest: -NORMALIZE_WHITESPACE
    ** Web link removed: http://www.example.com/foo/bar
    <BLANKLINE>
    ** Web link added: http://www.example.com/foo/bar

Adding and editing bug watches
------------------------------

Here's an example that demonstrates the notification email that gets
generated when a bug watch is added:

    >>> from canonical.launchpad.interfaces import IBugWatch, IBugTrackerSet
    >>> bugtrackerset = getUtility(IBugTrackerSet)

    >>> class MockBugWatch:
    ...     implements(IBugWatch)
    ...     def __init__(self, bug, bugtracker, remotebug):
    ...         self.bug = bug
    ...         self.bugtracker = bugtracker
    ...         self.remotebug = remotebug
    ...         self.url = "%sshow_bug.cgi?id=%s" % (
    ...             bugtracker.baseurl, remotebug)
    >>> mock_bug_watch = MockBugWatch(
    ...     bug=edited_bug,
    ...     bugtracker=getUtility(IBugTrackerSet)["mozilla.org"],
    ...     remotebug="123")

    >>> bug_delta = BugDelta(
    ...     bug=edited_bug,
    ...     bugurl="http://www.example.com/bugs/2",
    ...     user=sample_person,
    ...     bugwatch={'new' : mock_bug_watch})
    >>> subject, body = generate_bug_edit_email(bug_delta)
    >>> subject
    u'[Bug 2] the new title'
    >>> print body #doctest: -NORMALIZE_WHITESPACE
    ** Bug watch added: The Mozilla.org Bug Tracker #123
       https://bugzilla.mozilla.org/show_bug.cgi?id=123

When edited, we display the change to a bug watch as though the
previous data was "removed" and the new, current data was "added."
Let's demonstrate with an example:

    >>> mock_bug_watch_edited = MockBugWatch(
    ...     bug=edited_bug,
    ...     bugtracker=getUtility(IBugTrackerSet)["mozilla.org"],
    ...     remotebug="12")

    >>> bug_delta = BugDelta(
    ...     bug=edited_bug,
    ...     bugurl="http://www.example.com/bugs/2",
    ...     user=sample_person,
    ...     bugwatch={'old' : mock_bug_watch, 'new' : mock_bug_watch_edited})
    >>> subject, body = generate_bug_edit_email(bug_delta)
    >>> subject
    u'[Bug 2] the new title'
    >>> print body #doctest: -NORMALIZE_WHITESPACE
    ** Bug watch removed: The Mozilla.org Bug Tracker #123
       https://bugzilla.mozilla.org/show_bug.cgi?id=123
    <BLANKLINE>
    ** Bug watch added: The Mozilla.org Bug Tracker #12
       https://bugzilla.mozilla.org/show_bug.cgi?id=12

We can also add a bugwatch while adding a new bugtask.
    
    >>> from canonical.launchpad.interfaces import IBugWatchSet
    >>> mozilla_bug_watch = getUtility(IBugWatchSet).get(1)
    >>> mozilla_bugtask = getUtility(IBugTaskSet).get(15)
    >>> mozilla_bugtask.bugwatch = mozilla_bug_watch 

    >>> bug_delta = BugDelta(
    ...     bug=edited_bug,
    ...     bugurl="http://www.example.com/bugs/2",
    ...     user=sample_person,
    ...     added_bugtasks=mozilla_bugtask)
    >>> subject, body = generate_bug_edit_email(bug_delta)
    >>> subject
    u'[Bug 2] the new title'
    >>> print body #doctest: -NORMALIZE_WHITESPACE
    ** Also affects: firefox (upstream) via
       https://bugzilla.mozilla.org//show_bug.cgi?id=42
         Severity: Major
         Priority: Medium
           Status: Unconfirmed


Adding and editing CVE relationships
------------------------------------

Adding a CVE will generate a notification that looks as follows:

    >>> from canonical.launchpad.interfaces import IBugCve
    >>> from canonical.lp.dbschema import CveStatus

    >>> class MockCVE:
    ...     implements(ICve)
    ...     def __init__(self, sequence, status, url, description):
    ...         self.sequence = sequence
    ...         self.status = status
    ...         self.displayname = 'CVE-' + sequence
    ...         self.description = description
    ...         self.url = url
    ...     @property
    ...     def title(self):
    ...         return '%s (%s)' % (self.displayname, self.status.title)
    >>> mock_cve = MockCVE(
    ...     sequence="2004-0718",
    ...     status=CveStatus.CANDIDATE,
    ...     url='http://cve.mitre.org/whatsit?id=CVE-2004-0718',
    ...     description="a test cve ref")

    >>> bug_delta = BugDelta(
    ...     bug=edited_bug,
    ...     bugurl="http://www.example.com/bugs/2",
    ...     user=sample_person,
    ...     cve={'new' : mock_cve})
    >>> subject, body = generate_bug_edit_email(bug_delta)
    >>> subject
    u'[Bug 2] the new title'
    >>> print body #doctest: -NORMALIZE_WHITESPACE
    ** CVE added: http://cve.mitre.org/whatsit?id=CVE-2004-0718

Similarly, removing a CVE ref will result in an email:

    >>> mock_cve_ref_removed = MockCVE(
    ...     sequence="2004-0719",
    ...     status=CveStatus.CANDIDATE,
    ...     url='http://cve.mitre.org/whatsit?id=CVE-2004-0719',
    ...     description="a test cve ref")

    >>> bug_delta = BugDelta(
    ...     bug=edited_bug,
    ...     bugurl="http://www.example.com/bugs/2",
    ...     user=sample_person,
    ...     cve={'old' : mock_cve_ref_removed})
    >>> subject, body = generate_bug_edit_email(bug_delta)
    >>> subject
    u'[Bug 2] the new title'
    >>> print body #doctest: -NORMALIZE_WHITESPACE
    ** CVE removed: http://cve.mitre.org/whatsit?id=CVE-2004-0719

Adding attachments
------------------

Adding an attachment will generate a notification that looks as follows:

    >>> class MockLibraryFile:
    ...     def __init__(self, url):
    ...         self.url = url
    >>> class MockAttachment:
    ...     def __init__(self, title, libraryfile):
    ...         self.title = title
    ...         self.libraryfile = libraryfile
    >>> attachment = MockAttachment(
    ...     title="A screenshot of the problem",
    ...     libraryfile=MockLibraryFile('http://foo.com/screenshot.png'))

    >>> bug_delta = BugDelta(
    ...     bug=edited_bug,
    ...     bugurl="http://www.example.com/bugs/2",
    ...     user=sample_person,
    ...     attachment={'new' : attachment})
    >>> subject, body = generate_bug_edit_email(bug_delta)
    >>> subject
    u'[Bug 2] the new title'
    >>> print body #doctest: -NORMALIZE_WHITESPACE
    ** Attachment added: "A screenshot of the problem"
       http://foo.com/screenshot.png
