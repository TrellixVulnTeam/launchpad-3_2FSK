= Deactivating mailing lists =

A team admin can deactivate a mailing list (although this is currently not
supported through the web interface).  Mailman handles this by archiving and
deleting the mailing list data, however it is easily recreated should the team
admin decide to reactivate the mailing list later.  Reactivation does not
require an expert's approval.

First, No Privileges Person will create a new team, called 'Team One' through
the web.  Then he will request a mailing list for that team, and an expert
will approve that request.

    >>> import itest_helper
    >>> browser = itest_helper.make_browser()
    >>> browser.open('http://launchpad.dev/people/+newteam')
    >>> browser.getControl(name='field.name').value = 'itest-one'
    >>> browser.getControl('Display Name').value = 'ITest One'
    >>> browser.getControl(name='field.subscriptionpolicy').displayValue = [
    ...     'Open Team']
    >>> browser.getControl('Create').click()
    >>> browser.getLink('Change contact address').click()
    >>> browser.getControl('Apply for Mailing List').click()

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.interfaces import (
    ...     ILaunchpadCelebrities, IMailingListSet, MailingListStatus)

    >>> list_set = getUtility(IMailingListSet)
    >>> experts = getUtility(ILaunchpadCelebrities).mailing_list_experts
    >>> lpadmin = list(experts.allmembers)[0]
    >>> list_one = list_set.get('itest-one')
    >>> list_one.review(lpadmin, MailingListStatus.APPROVED)
    >>> itest_helper.transactionmgr.commit()

    >>> itest_helper.wait_for_mailman()
    >>> from Mailman.Utils import list_names
    >>> sorted(name for name in list_names() if name.startswith('itest-'))
    ['itest-one']

Because the mailing list is active, there is no archived backup file.

    >>> from Mailman import mm_cfg
    >>> import os
    >>> backup_file = os.path.join(mm_cfg.VAR_PREFIX,
    ...                            'backups', 'itest-one.tgz')
    >>> os.path.exists(backup_file)
    False

Deactivation is not yet exposed in the web interface, so we'll simulate what
that would do.

    >>> list_one = list_set.get('itest-one')
    >>> list_one.deactivate()
    >>> itest_helper.transactionmgr.commit()
    >>> itest_helper.wait_for_mailman()

As far as Mailman is concerned, the mailing list no longer exists.

    >>> sorted(name for name in list_names() if name.startswith('itest-'))
    []

The list data has been backed up into the archive directory.  The backup is a
gzip'd tarfile containing the list's pickle data.

    >>> os.path.exists(backup_file)
    True
    >>> import tarfile
    >>> tarball = tarfile.open(backup_file, 'r:gz')
    >>> tarball.list()
    -.../lists/itest-one/
    -.../lists/itest-one/config.pck
    -.../lists/itest-one/config.pck.last
