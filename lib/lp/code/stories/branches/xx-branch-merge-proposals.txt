= Branch Merge Proposals =

Branch merge proposals are where you show the intent of merging
the code from one branch into another.

In order to test notifications, we need a subscriber for the branch.

    >>> from canonical.launchpad.ftests import login, logout
    >>> login('foo.bar@canonical.com')
    >>> from zope.component import getUtility
    >>> from lp.code.enums import (
    ...     BranchSubscriptionNotificationLevel, CodeReviewNotificationLevel)
    >>> from lp.registry.interfaces.person import IPersonSet
    >>> from lp.code.interfaces.branchlookup import IBranchLookup
    >>> subscriber = getUtility(IPersonSet).getByEmail(
    ...     'foo.bar@canonical.com')
    >>> branch = getUtility(IBranchLookup).getByUniqueName(
    ...     '~name12/firefox/main')
    >>> _unused = branch.subscribe(subscriber,
    ...     BranchSubscriptionNotificationLevel.NOEMAIL, None,
    ...     CodeReviewNotificationLevel.FULL)

Also subscribe to gnome-terminal, since Firefox tests are mixed with
Gnome Terminal tests.

    >>> branch = getUtility(IBranchLookup).getByUniqueName(
    ...     '~name12/gnome-terminal/main')
    >>> _unused = branch.subscribe(subscriber,
    ...     BranchSubscriptionNotificationLevel.NOEMAIL, None,
    ...     CodeReviewNotificationLevel.FULL)
    >>> logout()

Any logged in user can register a merge proposal.  Registering
a merge proposal is done from the source branch, and the link
is `Propose for merging`.


== Registering a merge proposal ==

Users who are not logged on do not see the link to register.

    >>> anon_browser.open(
    ...     'http://code.launchpad.dev/~name12/gnome-terminal/klingon')
    >>> anon_browser.getLink('Propose for merging')
    Traceback (most recent call last):
    ...
    LinkNotFoundError

Logged in users can.

    >>> nopriv_browser = setupBrowser(auth="Basic no-priv@canonical.com:test")
    >>> nopriv_browser.open(
    ...     'http://code.launchpad.dev/~name12/gnome-terminal/klingon')
    >>> nopriv_browser.getLink('Propose for merging').click()
    >>> nopriv_browser.getControl(
    ...     name='field.target_branch.target_branch').value = (
    ...         '~name12/gnome-terminal/main')

There is a cancel link shown with the buttons.

    >>> cancel = nopriv_browser.getLink('Cancel')
    >>> nopriv_browser.getControl('Propose Merge').click()

Registering the merge proposal takes the user to the new merge proposal.

    >>> print nopriv_browser.url
    http://code.launchpad.dev/~name12/gnome-terminal/klingon/+merge/...


== Editing a commit message ==

Since the plan is to merge a branch into another branch, it makes sense that a
commit message can be set.

    >>> nopriv_browser.getLink('Edit commit message').click()
    >>> nopriv_browser.getControl(name='field.commit_message').value = (
    ...     'Add more mojo')
    >>> nopriv_browser.getControl('Update').click()

    >>> print nopriv_browser.url
    http://code.launchpad.dev/~name12/gnome-terminal/klingon/+merge/1

    >>> def print_summary(browser):
    ...     print extract_text(find_tag_by_id(
    ...         browser.contents, 'proposal-summary'))
    >>> print_summary(nopriv_browser)
    Status: Needs review
    Proposed by: No Privileges Person ...
    Proposed branch: lp://dev/~name12/gnome-terminal/klingon
    Merge into: lp://dev/~name12/gnome-terminal/main
    Commit message: Add more mojo


== Landing Targets ==

When looked at from the point of view of the source branch, the
merge proposal is considered a "landing target" with an optional
"dependent branch".  These targets hang off the branch's index page on a
"Merges" page.

    >>> def printMergeProposals(browser, id):
    ...     tag = find_tag_by_id(browser.contents, id)
    ...     if tag is None:
    ...         print tag
    ...     else:
    ...         for mp in tag.findAll(attrs={'class': 'mergeproposal'}):
    ...             print extract_text(mp)

    >>> nopriv_browser.open(
    ...     'http://code.launchpad.dev/~name12/gnome-terminal/klingon')

Since the user who registered the merge proposal is different
to the owner of the source branch, they are shown explicitly.
If the branch owner registers the merge proposal, they are not
shown.

    >>> sample_browser = setupBrowser(auth="Basic test@canonical.com:test")
    >>> sample_browser.open(
    ...     'http://code.launchpad.dev/~name12/gnome-terminal/scanned')
    >>> sample_browser.getLink('Propose for merging').click()
    >>> sample_browser.getControl(
    ...     name='field.target_branch.target_branch').value = (
    ...         '~name12/gnome-terminal/main')
    >>> cancel = sample_browser.getLink('Cancel')
    >>> sample_browser.getControl('Propose Merge').click()

    >>> sample_browser.open(
    ...     'http://code.launchpad.dev/~name12/gnome-terminal/scanned/+merges')
    >>> printMergeProposals(sample_browser, 'landing-targets')
    lp://dev/~name12/gnome-terminal/main - view proposal details
    Needs review


== Viewing a proposal for merging ==

When looking at the details for a proposal to merge, three main things
are shown:
  * The proposal whiteboard
  * The revisions in the source branch that are not in the target branch
  * A details pagelet for the proposal.

Unfortunately it isn't easy creating branches on the fly and branching
and merging, so we have to settle for the sample data.

    >>> sample_browser.open(
    ...     'http://code.launchpad.dev/~mark/firefox/release-0.9')
    >>> sample_browser.getLink('Propose for merging').click()
    >>> sample_browser.getControl(
    ...     name='field.target_branch.target_branch').value = (
    ...         '~name12/firefox/main')
    >>> cancel = sample_browser.getLink('Cancel')
    >>> sample_browser.getControl('Propose Merge').click()
    >>> sample_browser.open(
    ...     'http://code.launchpad.dev/~mark/firefox/release-0.9/+merges')

    >>> sample_browser.getLink('view proposal details').click()
    >>> print sample_browser.title
    Proposal to merge lp://dev/~mark/firefox/release-0.9

The details of the proposal shows initially the source and target
branches, and the current status.

    >>> print_summary(sample_browser)
    Status: Needs review
    Proposed by: Sample Person ...
    Proposed branch: lp://dev/~mark/firefox/release-0.9
    Merge into: lp://dev/~name12/firefox/main
    Commit message: None

The summary of the revisions that are in the source branch but not
yet in the target branch are also shown.

    >>> print extract_text(find_tag_by_id(
    ...     sample_browser.contents, 'source-revisions'))
    Unmerged revisions
    1. By mark.shuttleworth on 2005-03-09
      Import of Mozilla Firefox 0.9
    >>> firefox_merge_url = sample_browser.url


== Deleting merge proposals ==

Merge proposals can be deleted, when either abandoned or created in error.
When a merge proposal is deleted, the user is taken back to the main page
for the source_branch.

    >>> sample_browser.getLink('Delete proposal to merge').click()
    >>> cancel = sample_browser.getLink('Cancel')
    >>> sample_browser.getControl('Delete proposal').click()
    >>> print sample_browser.url
    http://code.launchpad.dev/~mark/firefox/release-0.9

    >>> printMergeProposals(sample_browser, 'landing-targets')
    None


== Requesting reviews ==

You can request a review of a merge proposal.

    >>> sample_browser.open(
    ...    'http://code.launchpad.dev/~name12/gnome-terminal/klingon/+merge/1'
    ...    )
    >>> sample_browser.getLink('Request a review').click()
    >>> sample_browser.getControl('Reviewer').value = 'mark'
    >>> sample_browser.getControl('Review type').value = 'first'
    >>> sample_browser.getControl('Request Review').click()

The status of the merge proposal is updated to "Needs review".

    >>> print_summary(sample_browser)
    Status: Needs review
    Proposed ...
    Proposed branch: lp://dev/~name12/gnome-terminal/klingon
    Merge into: lp://dev/~name12/gnome-terminal/main
    Commit message: Add more mojo

Additional reviews can be requested.

    >>> sample_browser.getLink('Request another review').click()
    >>> sample_browser.getControl('Reviewer').value = 'name12'
    >>> sample_browser.getControl('Request Review').click()

You can even re-request the same person to review, so that a new email is
sent.

    >>> sample_browser.getLink('Request another review').click()
    >>> sample_browser.getControl('Reviewer').value = 'mark'
    >>> sample_browser.getControl('Review type').value = 'second'
    >>> sample_browser.getControl('Request Review').click()

Only the last request is listed, showing the last review type.

    >>> pending = find_tag_by_id(
    ...     sample_browser.contents, 'code-review-votes')
    >>> print extract_text(pending)
    Reviewer          Review Type    Date Requested    Status
    Sample Person                                      Pending [Review]
    Mark Shuttleworth second         ... ago           Pending
    Review via email: mp+1@code.launchpad.dev
                                                 Request another review


== Reviewing ==

People not logged in cannot perform reviews.

    >>> anon_browser.open('http://code.launchpad.dev/~name12/gnome-terminal'
    ...     '/klingon/+merge/1')
    >>> link = anon_browser.getLink('[Review]')
    Traceback (most recent call last):
    LinkNotFoundError

People who are logged in can perform reviews.

    >>> nopriv_browser.open('http://code.launchpad.dev/~name12/gnome-terminal'
    ...     '/klingon/+merge/1')
    >>> nopriv_browser.getLink('Add a review or comment').click()
    >>> nopriv_browser.getControl(name='field.comment').value = "Don't like it"
    >>> nopriv_browser.getControl(name='field.vote').getControl(
    ...     'Disapprove').click()
    >>> nopriv_browser.getControl('Save Comment').click()
    >>> pending = find_tag_by_id(
    ...     nopriv_browser.contents, 'code-review-votes')
    >>> print extract_text(pending)
    Reviewer                         Review Type  Date Requested Status
    No Privileges Person (community)                             Disapprove ...

People can claim reviews for teams of which they are a member.

    >>> sample_browser.open('http://code.launchpad.dev/~name12/gnome-terminal'
    ...     '/klingon/+merge/1')
    >>> sample_browser.getLink('Request another review').click()
    >>> sample_browser.getControl('Reviewer').value = 'hwdb-team'
    >>> sample_browser.getControl('Review type').value = 'claimable'
    >>> sample_browser.getControl('Request Review').click()
    >>> pending = find_tag_by_id(
    ...     sample_browser.contents, 'code-review-votes')
    >>> print extract_text(pending)
    Reviewer                         Review Type  Date Requested Status...
    HWDB Team                        claimable    ... ago        Pending ...
    >>> foobar_browser = setupBrowser(auth="Basic foo.bar@canonical.com:test")
    >>> foobar_browser.open('http://code.launchpad.dev/~name12/gnome-terminal'
    ...     '/klingon/+merge/1')
    >>> foobar_browser.getControl('Claim review').click()
    >>> pending = find_tag_by_id(
    ...     foobar_browser.contents, 'code-review-votes')

After claiming a review, the claimant is listed instead of their team.

    >>> print extract_text(pending)
    Reviewer                         Review Type  Date Requested Status...
    Foo Bar                          claimable    ... ago        Pending ...

The claimant can reassign the review to someone else.

    >>> foobar_browser.getLink('Reassign').click()
    >>> foobar_browser.getControl('Reviewer').value = 'hwdb-team'
    >>> foobar_browser.getControl('Reassign').click()
    >>> foobar_browser.open('http://code.launchpad.dev/~name12/gnome-terminal'
    ...     '/klingon/+merge/1')
    >>> pending = find_tag_by_id(
    ...     foobar_browser.contents, 'code-review-votes')

The review is now reassigned to the HWDB team.

    >>> print extract_text(pending)
    Reviewer                         Review Type  Date Requested Status...
    HWDB Team                        claimable    ... ago        Pending ...


== Marking as merged ==

When a branch has been merged into the target branch, the proposal should
be marked as merged.

Merged proposals are still listed on the source branch, but no longer shown
on the target branch.

    >>> nopriv_browser.open(
    ...     'http://code.launchpad.dev/~name12/gnome-terminal/klingon/+merges')
    >>> landing_targets = find_tag_by_id(
    ...     nopriv_browser.contents, 'landing-targets')

The edit link is shown after the branch link.

    >>> edit_link = landing_targets.fetch('a')[1]['href']
    >>> nopriv_browser.getLink(url=edit_link).click()

The edit icon at the end of the status allows the user to edit the status.

    >>> first_proposal_url = nopriv_browser.url
    >>> nopriv_browser.getLink('Change status').click()

When marking a proposal as merged there is an optional revision number.
If this is set then the when setting the merge proposal as merged the
system looks for the revision in the history of the target branch,
and if found uses the revision date as the merged date.  If it cannot
find one, then the current time is used as the date merged.

    >>> nopriv_browser.getControl(name='field.queue_status').displayValue = (
    ...     ['Merged'])
    >>> nopriv_browser.getControl('Change Status').click()
    >>> print nopriv_browser.url
    http://code.launchpad.dev/~name12/gnome-terminal/klingon/+merge/1

The proposal is now shown as have being merged.

    >>> print_summary(nopriv_browser)
    Status: Merged
    ...


Gone from the target branch.

    >>> nopriv_browser.getLink('~name12/gnome-terminal/main').click()
    >>> nopriv_browser.getLink(url="+merges").click()
    >>> printMergeProposals(nopriv_browser, 'landing-candidates')
    lp://dev/~name12/gnome-terminal/scanned (Development) - view proposal details
      Needs review

If the user subsequently wants to set the merged revision number,
this can be updated by selecting the edit icon shown in the table
next to the heading "Merged at revision".

    >>> sample_browser.open(
    ...     'http://code.launchpad.dev/~name12/gnome-terminal/klingon')
    >>> print extract_text(find_tag_by_id(
    ...     sample_browser.contents, 'landing-targets'))
    &raquo; Merged into lp://dev/~name12/gnome-terminal/main
    >>> sample_browser.getLink('Merged').click()
    >>> print_summary(sample_browser)
    Status: Merged
    ...
    Merged at revision: not available
    ...
    >>> sample_browser.getLink(url='+merged').click()
    >>> sample_browser.getControl('Merged Revision Number').value = '42'
    >>> sample_browser.getControl('Mark as Merged').click()

    >>> for message in get_feedback_messages(sample_browser.contents):
    ...     print extract_text(message)
    The proposal's merged revision has been updated.
    >>> print_summary(sample_browser)
    Status: Merged
    ...
    Merged at revision: 42
    ...
    >>> sample_browser.getLink('~name12/gnome-terminal/klingon').click()
    >>> print extract_text(find_tag_by_id(
    ...     sample_browser.contents, 'landing-targets'))
    &raquo; Merged into lp://dev/~name12/gnome-terminal/main at revision 42


== Resubmitting proposals ==

If a proposal ends up getting rejected, the proposal can be resubmitted.
Actually you can resubmit a proposal that hasn't been superseded or merged
already, but mostly you resubmit rejected proposals.  When a proposal is
resubmitted, a new proposal is registered with the same source and target
branches but with the state set to work-in-progress.

    >>> sample_browser.open(
    ...     'http://code.launchpad.dev/~name12/gnome-terminal/scanned/+merges')
    >>> sample_browser.getLink('view proposal details').click()
    >>> orig_url = sample_browser.url
    >>> sample_browser.getLink('Change status').click()
    >>> sample_browser.getControl(name='field.queue_status').displayValue = (
    ...     ['Resubmit'])

    >>> sample_browser.getControl('Change Status').click()

This takes the user to the resubmission page.

    >>> print sample_browser.title
    Resubmit proposal to merge

    >>> sample_browser.getControl('Resubmit').click()


The new merge proposal is created as needs review, and there is
a link back to the superseded proposal.

    >>> print_summary(sample_browser)
    Status: Needs review
    Proposed by: Sample Person ...
    Proposed branch: lp://dev/~name12/gnome-terminal/scanned
    Merge into: lp://dev/~name12/gnome-terminal/main
    Commit message: None

    >>> print extract_text(find_tag_by_id(
    ...     sample_browser.contents, 'superseded-proposal'))
    This proposal supersedes a proposal from ...

    >>> import re
    >>> sample_browser.getLink(
    ...     re.compile('proposal from .*')).click()
    >>> print_summary(sample_browser)
    Status: Superseded
    ...

The earlier superseded proposal also has a link back to the
new proposal that supersedes it.

    >>> print extract_text(find_tag_by_id(
    ...     sample_browser.contents, 'superseded-by'))
    This proposal has been superseded by a proposal from ...
    >>> link = sample_browser.getLink(re.compile('proposal from .*'))
    >>> superseding_url = link.url

The superseded proposal can't be made active because of the duplicate
proposal.  It can only be set to another inactive state like "rejected" or
"merged".

    >>> sample_browser.getLink('Change status').click()
    >>> def print_options(field):
    ...     for option in field.options:
    ...         print option
    >>> print_options(sample_browser.getControl(name='field.queue_status'))
    REJECTED
    MERGED
    SUPERSEDED

If we make the superseding proposal inactive, we can set the original back to
work-in-progress.

    >>> sample_browser.open(superseding_url)
    >>> sample_browser.getLink('Change status').click()
    >>> sample_browser.getControl(name='field.queue_status').displayValue = (
    ...     ['Merged'])
    >>> sample_browser.getControl('Change Status').click()
    >>> print_summary(sample_browser)
    Status: Merged
    ...
    >>> sample_browser.open(orig_url)
    >>> print_summary(sample_browser)
    Status: Superseded
    ...
    >>> sample_browser.getLink('Change status').click()
    >>> print_options(sample_browser.getControl(name='field.queue_status'))
    WORK_IN_PROGRESS
    NEEDS_REVIEW
    CODE_APPROVED
    REJECTED
    MERGED
    SUPERSEDED

Merged proposals can be reset to other values, because they may have been
marked merged by mistake, in the UI.

    >>> sample_browser.getControl(name='field.queue_status').displayValue = (
    ...     ['Merged'])
    >>> sample_browser.getControl('Change Status').click()
    >>> print_summary(sample_browser)
    Status: Merged
    ...
    >>> sample_browser.getLink('Change status').click()
    >>> print_options(sample_browser.getControl(name='field.queue_status'))
    WORK_IN_PROGRESS
    NEEDS_REVIEW
    CODE_APPROVED
    REJECTED
    MERGED
    SUPERSEDED


== Default target branches ==

Almost all of the proposals to merge branches will be created
on feature branches where the target branch is the development
focus branch.  With that in mind, we want the default option
(when proposing a new branch to land) to target the development
focus branch.

If there is no development focus branch, then just the normal
branch widget is shown.

    # A helpful function to determine target branch widgets.
    >>> import re
    >>> def get_target_branch_widgets(browser):
    ...     main = find_main_content(browser.contents)
    ...     return main.findAll(
    ...         'input', attrs={'name': re.compile('target_branch')})

    >>> nopriv_browser.open(
    ...     'http://code.launchpad.dev/~mark/firefox/release-0.8')
    >>> nopriv_browser.getLink('Propose for merging').click()
    >>> for widget in get_target_branch_widgets(nopriv_browser):
    ...     print widget
    <input type="text" ...

Test validation of errors...

The target branch is a required field, so attempting to register without
setting it gives an appropriate error.

    >>> nopriv_browser.getControl('Propose Merge').click()
    >>> for message in get_feedback_messages(nopriv_browser.contents):
    ...     print extract_text(message)
    There is 1 error.
    Required input is missing.

Invalid errors are also shown.

    >>> nopriv_browser.getControl(
    ...     name='field.target_branch.target_branch').value = (
    ...         'fooix')
    >>> nopriv_browser.getControl('Propose Merge').click()
    >>> for message in get_feedback_messages(nopriv_browser.contents):
    ...     print extract_text(message)
    There is 1 error.
    Invalid value


When a branch is set as the development focus, then a radio button
is shown.

    >>> admin_browser.open('http://launchpad.dev/firefox/trunk')
    >>> admin_browser.getLink('Link to branch').click()
    >>> admin_browser.getControl(name='field.branch').value = (
    ...     '~name12/firefox/main')
    >>> admin_browser.getControl('Update').click()

    # Just show the radio buttons for the branch widgets.
    >>> def print_radio_options(browser):
    ...     widgets = get_target_branch_widgets(browser)
    ...     for widget in widgets:
    ...         if widget['type'] == 'radio':
    ...             try:
    ...                 checked = widget['checked']
    ...             except KeyError:
    ...                 checked = ''
    ...             print widget['value'], checked

Also the main development focus is selected.

    >>> nopriv_browser.open(
    ...     'http://code.launchpad.dev/~mark/firefox/release-0.8')
    >>> nopriv_browser.getLink('Propose for merging').click()
    >>> print_radio_options(nopriv_browser)
    ~name12/firefox/main checked
    other

If the user has also targeted a branch other than the development
focus before, then that is also shown as a radio option.

    >>> nopriv_browser.getControl('Other').click()
    >>> nopriv_browser.getControl(
    ...     name='field.target_branch.target_branch').value = (
    ...         '~mark/firefox/release-0.9')
    >>> nopriv_browser.getControl('Propose Merge').click()

    >>> nopriv_browser.open(
    ...     'http://code.launchpad.dev/~mark/firefox/release-0.9.2')
    >>> nopriv_browser.getLink('Propose for merging').click()
    >>> print_radio_options(nopriv_browser)
    ~name12/firefox/main checked
    ~mark/firefox/release-0.9
    other


=== Merge Proposal Bug and Spec Links ===

A branch merge proposal should show the bugs fixed and/or specs implemented
in the source branch.

    >>> def print_bugs_and_specs(browser):
    ...     links = find_tag_by_id(browser.contents,
    ...         'related-bugs-and-blueprints')
    ...     if links == None:
    ...         print links
    ...     else:
    ...         print extract_text(links)

    >>> login('admin@canonical.com')
    >>> bmp = factory.makeBranchMergeProposal()
    >>> bug = factory.makeBug(title="Bug for linking")
    >>> link = bmp.source_branch.linkBug(bug, bmp.source_branch.owner)
    >>> bmp_url = canonical_url(bmp)
    >>> logout()
    >>> nopriv_browser.open(bmp_url)
    >>> print_bugs_and_specs(nopriv_browser)
    Linked bug reports and blueprints
    Bug #...: Bug for linking (Undecided &ndash; New)

There shouldn't be a 'Linked bug reports and blueprints' section if there are
none

    >>> nopriv_browser.open(first_proposal_url)
    >>> print_bugs_and_specs(nopriv_browser)
    None


=== Target branch edge cases ===

When the development focus branch is proposed for merging,
don't suggest that we merge it onto itself.

    >>> nopriv_browser.open(
    ...     'http://code.launchpad.dev/~name12/firefox/main')
    >>> nopriv_browser.getLink('Propose for merging').click()
    >>> print_radio_options(nopriv_browser)
    ~mark/firefox/release-0.9 checked
    other

If we are looking to propose a branch that has been targeted before,
we don't show that branch as a possible target (as it is the source
branch).

    >>> nopriv_browser.open(
    ...     'http://code.launchpad.dev/~mark/firefox/release-0.9')
    >>> nopriv_browser.getLink('Propose for merging').click()
    >>> print_radio_options(nopriv_browser)
    ~name12/firefox/main checked
    other


== Registering a merge, and junk branches ==

Junk branches cannot be proposed for merging.  The action option is not
shown for junk branches.

    >>> nopriv_browser.open(
    ...     'http://code.launchpad.dev/~mark/+junk/testdoc')
    >>> nopriv_browser.getLink('Propose for merging').click()
    Traceback (most recent call last):
    ...
    LinkNotFoundError

Even if the user hand crafts the URL to look like a proposal to merge,
they'll get a 404.

    >>> nopriv_browser.open(
    ...     'http://code.launchpad.dev/~mark/+junk/testdoc/+register-merge')
    Traceback (most recent call last):
    ...
    NotFound: ...

== Displaying a review diff ==

Create merge proposal with a review diff, and go to its index page.

    >>> login('admin@canonical.com')
    >>> from lp.code.model.diff import StaticDiff
    >>> from difflib import unified_diff
    >>> diff_text = ''.join(
    ...     unified_diff('', ['Fake Diff' + u'\u1010'.encode('utf-8')]))
    >>> review_diff = StaticDiff.acquireFromText(
    ...     'a', 'b', diff_text)
    >>> transaction.commit()
    >>> bmp = factory.makeBranchMergeProposal(review_diff=review_diff)
    >>> url = canonical_url(bmp)
    >>> logout()
    >>> def get_review_diff():
    ...    nopriv_browser.open(url)
    ...    return find_tag_by_id(nopriv_browser.contents, 'review-diff')

The text of the review diff is in the page.
    >>> print repr(extract_text(get_review_diff()))
    u'Review Diff\nDownload diff\n1\n...Fake Diff\u1010'

If no diff is present, nothing is shown.
    >>> login('admin@canonical.com')
    >>> bmp.review_diff = None
    >>> logout()
    >>> print get_review_diff()
    None

If the review diff is empty, then we say it is empty.

    >>> login('admin@canonical.com')
    >>> bmp.review_diff = StaticDiff.acquireFromText('c', 'd', '')
    >>> logout()
    >>> print extract_text(get_review_diff())
    Review Diff
    Empty
