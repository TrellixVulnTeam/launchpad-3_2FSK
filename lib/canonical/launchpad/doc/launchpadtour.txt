= LaunchpadTourView =

LaunchpadTourView is a base view to handle appliation tours. The tour
is described in an external XML file.

== XML file structure ==

The tour is described in an XML file containing a root <tour> element.
Each screen describing usually one set of feature is contained in a
<screen> element. The <screen> element can contains up to four <callout>
elements that describe a particular callout marker that will appear on
the screenshot.

    >>> import os
    >>> import tempfile

    # Create a temporary directory where we will hold our test XML file.
    >>> tmpdir = tempfile.mkdtemp(prefix='test-launchpadtour')
    >>> tour_xml_file = os.path.join(tmpdir, 'tour.xml')
    >>> file(tour_xml_file, "w").write('''<?xml version="1.0"?>
    ...     <tour next="bugs">
    ...       <title>Application Name</title>
    ...       <screen>
    ...         <title>Feature 1</title>
    ...         <summary>Summary of feature 1</summary>
    ...         <screenshot>/+icing/marketing-screenshot1.png</screenshot>
    ...         <callout top="100" left="30">Item 1</callout>
    ...         <callout top="" left="">Item 2</callout>
    ...       </screen>
    ...       <screen>
    ...         <title>Feature 2</title>
    ...         <summary>Summary of feature 2</summary>
    ...         <screenshot>/+icing/marketing-screenshot2.png</screenshot>
    ...         <callout top="12" left="36">Item 1</callout>
    ...         <callout top="50" left="10">A callout with <b>HTML</b> text
    ...             in. Including a <a href="/">link</a>.
    ...         </callout>
    ...         <callout top="" left="">Item 3</callout>
    ...       </screen>
    ...       <screen>
    ...         <title>Feature 3</title>
    ...         <summary>Summary of feature 3</summary>
    ...         <screenshot>/+icing/marketing-screenshot3.png</screenshot>
    ...         <callout top="100" left="30">Item 1</callout>
    ...         <callout top="5" left="5">Item 2</callout>
    ...       </screen>5
    ...     </tour>
    ...     ''')

== The view ==

    >>> from canonical.launchpad.webapp.interfaces import ILaunchpadApplication
    >>> from canonical.launchpad.webapp.launchpadtour import LaunchpadTourView
    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest

    >>> request = LaunchpadTestRequest()
    >>> context = getUtility(ILaunchpadApplication)
    >>> tour_view = LaunchpadTourView( context, request, tour_xml_file)

The title of the tour is available in the title attribute.

    >>> print tour_view.title
    Application Name

A tour is made of several screens elements. The list of screens is
available using the screen_titles attributes.

    >>> for title in tour_view.screen_titles:
    ...     print title
    Feature 1
    Feature 2
    Feature 3

== Current screen ==

The current screen is tracked using the current_screen_index attribute.
Unless there is a 'screen' parameter in the request, it will default to
the first screen. (This attribute is only available after the
initialize() method has been called.)

    >>> tour_view.initialize()
    >>> tour_view.current_screen_index
    0

    >>> request = LaunchpadTestRequest(form={'screen':'2'})
    >>> tour_view = LaunchpadTourView(context, request, tour_xml_file)
    >>> tour_view.initialize()
    >>> tour_view.current_screen_index
    2

Passing an invalid screen reference will raise UnexpectedFormData.

    >>> tour_view = LaunchpadTourView(
    ...     context, LaunchpadTestRequest(form={'screen':'10'}), tour_xml_file)
    >>> tour_view.initialize()
    Traceback (most recent call last):
    ...
    UnexpectedFormData: No such screen: 10

    >>> tour_view = LaunchpadTourView(
    ...     context, LaunchpadTestRequest(form={'screen':'aName'}),
    ...     tour_xml_file)
    >>> tour_view.initialize()
    Traceback (most recent call last):
    ...
    UnexpectedFormData: Invalid screen reference: aName

== Screen description ==

The currently displayed screen is available in the current_screen
attribute. The screen is described as a dict containing a title,
summary, screenshot and callouts keys.

    >>> request = LaunchpadTestRequest(form={'screen': '1'})
    >>> tour_view = LaunchpadTourView(request, request, tour_xml_file)
    >>> tour_view.initialize()
    >>> screen = tour_view.current_screen
    >>> print screen['title']
    Feature 2
    >>> print screen['summary']
    Summary of feature 2

The screenshot contains the URI to the screenshot.

    >>> print screen['screenshot']
    /+icing/marketing-screenshot2.png

The callouts is a list of dicts containg keys for the callout text,
callout number and top and left position on the screenshot.

    >>> len(screen['callouts'])
    3
    >>> callout = screen['callouts'][0]
    >>> print callout['text']
    Item 1
    >>> print callout['number']
    1
    >>> print callout['top']
    12
    >>> print callout['left']
    36

Note that the callout content is interpreted as a proper XHTML string.

    >>> print screen['callouts'][1]['text']
    A callout with <b>HTML</b> text in. Including a <a href="/">link</a>.

== Callouts layout ==

The current_screen_callouts_layout return the screen callouts in a
special order for layout. When there are three or four callouts, the third
is returned before the second so that the callout #2 ends under #1. (It is
layed out 1 3 2 4 but will look

1 3
2 4

onscreen.

    >>> for callout in tour_view.current_screen_callouts_layout:
    ...     print callout['number']
    1
    3
    2

== Screen navigation ==

The next_screen_index attribute gives the index of the next screen in
the tour.

    >>> tour_view.next_screen_index
    2

It is None when the current screen is the last one.

    >>> request = LaunchpadTestRequest(form={'screen': '2'})
    >>> tour_view = LaunchpadTourView(request, request, tour_xml_file)
    >>> tour_view.initialize()

    >>> tour_view.next_screen_index is None
    True

== Tour navigation ==

It is possible to link one application tour to another one by using
the 'next' attribute on the 'tour' root element in the XML description.
This attribute should contain the name of one of the configured vhost.

If that attribute was set, the link to the next tour will be available
in the view 'next_tour_url' property.

    >>> print tour_view.next_tour_url
    http://bugs.launchpad.dev/+tour

== Registering from ZCML ==

Finally, it is possible to register a LaunchpadTourView from ZCML. The
browser:tour is available for this purpose.

    >>> from zope.configuration import xmlconfig
    >>> zcmlcontext = xmlconfig.string("""
    ... <configure xmlns:browser="http://namespaces.zope.org/browser">
    ...   <include file="lib/canonical/launchpad/webapp/meta.zcml" />
    ...   <include file="lib/zope/app/meta.zcml" />
    ...   <browser:tour
    ...       for="canonical.launchpad.webapp.interfaces.ILaunchpadApplication"
    ...       name="+test-bugs-tour"
    ...       tour="%s"
    ...       />
    ... </configure>
    ... """ % tour_xml_file )

    >>> from zope.component import getMultiAdapter
    >>> request = LaunchpadTestRequest()
    >>> tour_view = getMultiAdapter((context, request), name='+test-bugs-tour')
    >>> print tour_view.title
    Application Name

    # Cleanup behind us
    >>> import shutil
    >>> shutil.rmtree(tmpdir)