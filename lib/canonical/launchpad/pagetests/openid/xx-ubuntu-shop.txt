The Ubuntu shop uses email address to log in as opposed to the more
unfriendly OpenID identity URLs.

We are going to fake a consumer for these examples. In order to ensure
that the consumer is being fed the correct replies, we register a view
that renders the parameters in the response in an easily testable format.

>>> from StringIO import StringIO
>>> from canonical.launchpad.webapp.publisher import LaunchpadView
>>> from zope.publisher.interfaces.browser import IBrowserPublisher
>>> from zope.interface import implements
>>> class ConsumerView(LaunchpadView):
...     implements(IBrowserPublisher)
...     def render(self):
...         out = StringIO()
...         print >> out, 'Consumer received %s' % self.request.method
...         keys = sorted(self.request.form.keys())
...         for key in keys:
...             print >> out, '%s:%s' % (key, self.request.form[key])
...         return out.getvalue()
...     def browserDefault(self, request):
...         return self, ()
...
>>> from zope.security.checker import defineChecker, Checker, CheckerPublic
>>> defineChecker(ConsumerView, Checker({
...     '__call__': CheckerPublic,
...     'browserDefault': CheckerPublic,
...     'render': CheckerPublic,
...     }))
>>> from zope.app.testing.ztapi import browserView
>>> browserView(None, '+openid-consumer', ConsumerView)


The shop gets the user's email address and calculates an identity URL.

>>> email_url = 'http://openid.launchpad.dev/+openid/+email/mark@hbd.com'


This URL redirects to a permanent identity URL using $Person.id as a key.
This permanent identity URL tells the consumer the actual identity URL to
authenticate against, using the OpenID delegation feature.

>>> anon_browser.open(email_url)
>>> print anon_browser.url
http://openid.launchpad.dev/+openid/+id/temp1
>>> print anon_browser.contents
<html>
<head>
<link rel="openid.server" href="http://openid.launchpad.dev/">
</head>
<body>
<h1>OpenID Identity URL temp1</h1>
</body>
</html>
<BLANKLINE>


The end result should be that the shop, after getting the email address
from the user, will obtain a permanent identity URL it can use as a key.
The shop will authenticate using the standard Lauchpad OpenID identity of
the form http://openid.launchpad.dev/~sabdfl so no new code is required
there.
