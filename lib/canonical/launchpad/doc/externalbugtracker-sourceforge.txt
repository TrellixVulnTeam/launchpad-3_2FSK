= ExternalBugTracker: SourceForge =

This covers the implementation of the ExternalBugTracker class for SourceForge
bugwatches.


== Basics ==

The ExternalBugTracker descendant class which implements methods for updating
bug watches on SourceForge bug trackers is externalbugtracker.Roundup, which
implements IExternalBugTracker.

    >>> from canonical.launchpad.components.externalbugtracker import (
    ...     SourceForge)
    >>> from canonical.launchpad.interfaces.externalbugtracker import (
    ...     IExternalBugtracker)
    >>> from canonical.launchpad.webapp.testing import verifyObject
    >>> verifyObject(IExternalBugtracker,
    ...     SourceForge('http://sourceforge.net/'))
    True


== Status Conversion ==

The basic SourceForge bug statuses (i.e. those available by default in new
SourceForge instances) map to Launchpad bug statuses.
SourceForge.convertRemoteStatus() handles the conversion.

    >>> sourceforge = SourceForge('http://sourceforge.eggs')
    >>> sourceforge.convertRemoteStatus('Open').title
    'New'
    >>> sourceforge.convertRemoteStatus('Closed').title
    'Fix Released'
    >>> sourceforge.convertRemoteStatus('Pending').title
    'Incomplete'
    >>> sourceforge.convertRemoteStatus('Open:Accepted').title
    'Confirmed'
    >>> sourceforge.convertRemoteStatus('Open:Duplicate').title
    'Confirmed'
    >>> sourceforge.convertRemoteStatus('Open:Fixed').title
    'Fix Committed'
    >>> sourceforge.convertRemoteStatus('Open:Invalid').title
    'Invalid'
    >>> sourceforge.convertRemoteStatus('Open:Later').title
    'Confirmed'
    >>> sourceforge.convertRemoteStatus('Open:Out of Date').title
    'Invalid'
    >>> sourceforge.convertRemoteStatus('Open:Postponed').title
    'Confirmed'
    >>> sourceforge.convertRemoteStatus('Open:Rejected').title
    "Won't Fix"
    >>> sourceforge.convertRemoteStatus('Open:Remind').title
    'Confirmed'
    >>> sourceforge.convertRemoteStatus("Open:Won't Fix").title
    "Won't Fix"
    >>> sourceforge.convertRemoteStatus('Open:Works For Me').title
    'Invalid'
    >>> sourceforge.convertRemoteStatus('Closed:Accepted').title
    'Fix Committed'
    >>> sourceforge.convertRemoteStatus('Closed:Fixed').title
    'Fix Released'
    >>> sourceforge.convertRemoteStatus('Closed:Postponed').title
    "Won't Fix"
    >>> sourceforge.convertRemoteStatus('Pending:Postponed').title
    "Won't Fix"

If the status isn't something that our SourceForge ExternalBugTracker can
understand, Unknown will be returned and a warning logged.

    >>> sourceforge.convertRemoteStatus('eggs').title
    WARNING:...:Unknown status 'eggs'
    'Unknown'

UNKNOWN_REMOTE_STATUS maps to Unknown without generating a warning. This
handles the case where we've tried to probe for a bug but didn't succeed. For
example, if the bug number was invalid.

    >>> from canonical.launchpad.interfaces import UNKNOWN_REMOTE_STATUS
    >>> sourceforge.convertRemoteStatus(UNKNOWN_REMOTE_STATUS).title
    'Unknown'


== Initialization ==

Calling initializeRemoteBugDB() on our SourceForge instance and passing
it a set of remote bug IDs will fetch those bug IDs from the server and
file them in a local variable for later use.

We use a test-oriented implementation for the purposes of these tests,
which overrides ExternalBugTracker.urlopen() so that we don't have to
rely on a working network connection.

    >>> from canonical.launchpad.ftests.externalbugtracker import (
    ...     TestSourceForge, print_bugwatches)
    >>> sourceforge = TestSourceForge('http://test.sourceforge')
    >>> sourceforge.initializeRemoteBugDB([1722250])
    >>> sorted(sourceforge.bugs.keys())
    [1722250]


== Updating Bug Watches ==

First, we create some bug watches to test with:

    >>> from canonical.launchpad.database import BugTracker
    >>> from canonical.launchpad.interfaces import IBugSet, IPersonSet
    >>> from canonical.lp.dbschema import BugTrackerType

    >>> sample_person = getUtility(IPersonSet).getByEmail('test@canonical.com')

    >>> example_bug_tracker = BugTracker(
    ...     name="example-bugs",
    ...     title="Example.com SourceForge",
    ...     bugtrackertype=BugTrackerType.ROUNDUP,
    ...     baseurl="http://sourceforge.test",
    ...     summary="Contains bugs for Example.com",
    ...     contactdetails="foo.bar@example.com",
    ...     owner=sample_person)

    >>> login('test@canonical.com')

    >>> example_bug = getUtility(IBugSet).get(10)
    >>> example_bugwatch = example_bug.addWatch(
    ...     example_bug_tracker, 1722250, sample_person)

    >>> login('no-priv@canonical.com')

Collect the Example.com watches:

    >>> print_bugwatches(example_bug_tracker.watches)
    Remote bug 1722250: None

And have a SourceForge instance process them:

    >>> sourceforge = TestSourceForge(example_bug_tracker.baseurl)
    >>> sourceforge.updateBugWatches(example_bug_tracker.watches)
    >>> print_bugwatches(example_bug_tracker.watches)
    Remote bug 1722250: Open:None

We'll add some more watches now.

    >>> from canonical.launchpad.interfaces import IBugSet, IBugWatchSet
    >>> print_bugwatches(example_bug_tracker.watches,
    ...     sourceforge.convertRemoteStatus)
    Remote bug 1722250: New

    >>> remote_bugs = [
    ...     (1722251, 'Confirmed'),
    ...     (1722252, 'Incomplete'),
    ...     (1722253, 'Incomplete'),
    ...     (1722254, 'In Progress'),
    ...     (1722255, 'In Progress'),
    ...     (1722256, 'Fix Committed'),
    ...     (1722257, 'Fix Released'),
    ...     (1722258, 'Incomplete'),
    ...     (1722259, 'Incomplete'),
    ... ]

    >>> bug_watch_set = getUtility(IBugWatchSet)
    >>> for remote_bug_id, remote_status in remote_bugs:
    ...     bug_watch = bug_watch_set.createBugWatch(
    ...         bug=example_bug, owner=sample_person,
    ...         bugtracker=example_bug_tracker,
    ...         remotebug=str(remote_bug_id))

    >>> sourceforge.trace_calls = True
    >>> sourceforge.updateBugWatches(example_bug_tracker.watches)
    CALLED _getPage(u'support/tracker.php?aid=1722250')
    CALLED _getPage(u'support/tracker.php?aid=1722251')
    CALLED _getPage(u'support/tracker.php?aid=1722252')
    CALLED _getPage(u'support/tracker.php?aid=1722253')
    CALLED _getPage(u'support/tracker.php?aid=1722254')
    CALLED _getPage(u'support/tracker.php?aid=1722255')
    CALLED _getPage(u'support/tracker.php?aid=1722256')
    CALLED _getPage(u'support/tracker.php?aid=1722257')
    CALLED _getPage(u'support/tracker.php?aid=1722258')
    CALLED _getPage(u'support/tracker.php?aid=1722259')

    >>> print_bugwatches(example_bug_tracker.watches,
    ...     sourceforge.convertRemoteStatus)
    Remote bug 1722250: New
    Remote bug 1722251: Won't Fix
    Remote bug 1722252: Incomplete
    Remote bug 1722253: Won't Fix
    Remote bug 1722254: Invalid
    Remote bug 1722255: Confirmed
    Remote bug 1722256: Won't Fix
    Remote bug 1722257: Fix Committed
    Remote bug 1722258: Invalid
    Remote bug 1722259: Won't Fix
