Person
======

In Launchpad, the Person class is overloaded to represent both people
and teams. Let's log in as Robert Collins to ensure we have the
privileges to do what we're going to demonstrate.

>>> from zope.component import getUtility
>>> from zope.interface.verify import verifyObject
>>> from canonical.launchpad.interfaces import IPersonSet, IPerson
>>> from canonical.launchpad.ftests import login
>>> from canonical.launchpad.helpers import contactEmailAddresses

>>> login("robertc@robertcollins.net")

>>> personset = getUtility(IPersonSet)


Verify that foobar (a Person object) correctly implements IPerson.

>>> foobar = personset.getByName('name16')
>>> verifyObject(IPerson, foobar)
True


Access to people (Persons or Teams) is done through the IPersonSet
utility:

You can create a new person using the createPersonAndEmail method of 
IPersonSet. All you need for that is a valid email address.
>>> p, email = personset.createPersonAndEmail('randomuser@randomhost.com')
>>> p.teamowner is None
True

>>> buttsource = personset.getByName('buttsource')
>>> buttsource.teamowner is None
False
>>> lifeless = personset.getByName('lifeless')
>>> lifeless.teamowner is None
True

An IPerson has an inTeam method to allow us to easily check if a
person is a member of a team. It accepts an object implementing 
IPerson, which is the common use case when checking permissions.

>>> ddaa = personset.getByName('ddaa')
>>> lifeless.inTeam(buttsource) and ddaa.inTeam(buttsource)
True

If a Person is not a Team then the Person object will not provide the
ITeam interface.

>>> from canonical.launchpad.interfaces import ITeam
>>> ITeam.providedBy(lifeless)
False

If a Person is a Team then the Person will provide the ITeam interface.

>>> ITeam.providedBy(buttsource)
True

If a team doesn't have a contact email address, all notifications we send to
the team will go to the preferred email of each member.

>>> contactEmailAddresses(buttsource)
set([u'david.allouche@canonical.com', u'robertc@robertcollins.net', u'foo.bar@canonical.com'])

We don't support changing a Person into a Team or a Team into a Person.

>>> lifeless.teamowner = ddaa
>>> ITeam.providedBy(lifeless)
False
>>> buttsource.teamowner = None
>>> ITeam.providedBy(buttsource)
True


Renaming
--------

All persons have a unique name in launchpad, so to allow them to change their
names, we must make sure that name is not already in use by someone else.

>>> from canonical.launchpad.interfaces.person import PersonNameField
>>> field = PersonNameField(__name__='name', title=u'Unique name',
...                         description=u'', readonly=False, required=True)
>>> field = field.bind(lifeless)
>>> field.context == lifeless
True

You can always use your own name.
>>> field.validate(lifeless.name)

Or a name that is not already in use.
>>> field.validate(u'namenotinuse')

But you can't use Mark's name, of course. ;)
>>> field.validate(u'sabdfl')
Traceback (most recent call last):
...
NameAlreadyTaken: sabdfl


Merging
-------

The method to perform the low level merging of two Persons
should only be used by the one true account merge workflow.

>>> foo = personset.getByName('name16')
>>> sample = personset.getByName('name12')
>>> admins = personset.getByName('admins')

We can't merge teams

>>> personset.merge(admins, foo)
Traceback (most recent call last):
...
TypeError: ...

>>> personset.merge(foo, admins)
Traceback (most recent call last):
...
TypeError: ...

Nor can we merge an account that still has email addresses attached to it

>>> nonempty, email = personset.createPersonAndEmail('empty@somehost.com')
>>> personset.merge(nonempty, sample)
Traceback (most recent call last):
...
ValueError: ...

Now we remove the only email address nonempty had.

>>> email.destroySelf()
>>> empty = nonempty

Must login as 'sabdfl' cause he's the owner of the Ubuntu Team.
>>> login('mark@hbd.com')
>>> ubuntu_team = personset.getByName('name17')
>>> ubuntu_team.teamowner = empty
>>> personset.merge(empty, sample)

>>> from canonical.launchpad.database import Person
>>> cur = Person._connection._connection.cursor()
>>> cur.execute("select p1.name from person as p1, person as p2 where "
...             "p1.id = p2.teamowner and p2.name = 'name17'")
>>> cur.fetchone()[0]
u'sabdfl'

The account that has been merged is flagged. We can use this to eliminate
merged accounts from lists etc.

>>> cur.execute("SELECT merged FROM Person WHERE name='empty'")
>>> cur.fetchone()[0]
12

>>> cur.execute("SELECT merged FROM Person WHERE name='name12'")
>>> cur.fetchone()[0] is None
True


People can have karma in Launchpad
==================================

Depending on the action a given person performs in Launchpad, that person can
earn some karma points. This is useful to know how active a user is in
Launchpad.

Salgado wrote the karma framework. Let's give him some karma points.

>>> from canonical.lp.dbschema import KarmaActionName
>>> salgado = personset.getByName('salgado')
>>> salgado.assignKarma(KarmaActionName.BUGFIXED)
>>> salgado.karma
0

The value that you get through IPerson.karma is a cached value that's
calculated daily. That's why it still 0. To calculate the karma of a given
person at runtime we have to use IKarmaSet:

>>> from canonical.launchpad.interfaces import IKarmaSet
>>> getUtility(IKarmaSet).getSumByPerson(salgado)
10
