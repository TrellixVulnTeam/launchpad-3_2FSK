PO Import test with a .po file that lacks X-Rosetta-Export-Date header
----------------------------------------------------------------------

When we import a .po file as not 'published', it needs to have a header
named 'X-Rosetta-Export-Date' to be able to detect conflicts with other
translations done for the same POFile while we do translations offline.
Without that header, we cannot detect conflicts, so we don't accept that
file. We should notify the user about that error so they have a chance to
fix it.

If the file being imported is 'published', we don't care about
X-Rosetta-Export-Date header. That's because published translations don't
change translations being used in Rosetta, it's just a reference of what
upstream has and they only add active translations if there isn't one already
so there aren't conflicts to solve.

Let's check that we don't accept .po imports that aren't exported first from
Rosetta.

This test makes sure we send such email.

Here are some imports we need to get this test running.

  >>> from canonical.database.sqlbase import flush_database_updates
  >>> from canonical.launchpad.interfaces import IPersonSet
  >>> from canonical.launchpad.interfaces import IPOTemplateNameSet
  >>> from canonical.launchpad.interfaces import ITranslationImportQueue
  >>> from canonical.launchpad.database import POTemplateSubset
  >>> import datetime
  >>> import pytz
  >>> UTC = pytz.timezone('UTC')
  >>> translation_import_queue = getUtility(ITranslationImportQueue)

We need this for the Librarian to work properly.

  >>> import transaction

And also, the DBSchema to change the imports status

  >>> from canonical.launchpad.interfaces import RosettaImportStatus

Then, let's get a handle to our mailer. This is the thing we'll examine to show
what email has been sent, to whom, and what the body of the message contains:

  >>> import email
  >>> from canonical.launchpad.mail import stub

Login as an admin to be able to do changes to the import queue.

  >>> login('carlos@canonical.com')

Here's the person who'll be doing the import.

  >>> person_set = getUtility(IPersonSet)
  >>> person = person_set.getByName('sabdfl')

Now, is time to create the new potemplate

  >>> from canonical.launchpad.database import ProductRelease
  >>> release = ProductRelease.get(3)
  >>> release.productseries.product.name
  u'firefox'
  >>> series = release.productseries
  >>> ptn = getUtility(IPOTemplateNameSet)['firefox']
  >>> subset = POTemplateSubset(productseries=series)
  >>> potemplate = subset.new(
  ...     potemplatename=ptn,
  ...     path='po/firefox.pot',
  ...     owner=person)

We create the POFile object where we are going to attach the .po file.

  >>> pofile = potemplate.newPOFile('cy')

And now, we import a .po file, as not published, that lacks the header
'X-Rosetta-Export-Date'. That header is the one that notes that the file
comes from a previous export from Rosetta and when did it happen.

  >>> pofile_contents = r'''
  ... msgid ""
  ... msgstr ""
  ... "PO-Revision-Date: 2005-06-03 19:41+0100\n"
  ... "Last-Translator: Carlos Perello Marin <carlos@canonical.com>\n"
  ... "Content-Type: text/plain; charset=UTF-8\n"
  ...
  ... msgid "foo"
  ... msgstr "blah"
  ... '''
  >>> published = False
  >>> entry = translation_import_queue.addOrUpdateEntry(
  ...     pofile.path, pofile_contents, published, person,
  ...     productseries=series, potemplate=potemplate, pofile=pofile)
  >>> transaction.commit()

We must approve the entry to be able to import it.

  >>> entry.status = RosettaImportStatus.APPROVED
  >>> flush_database_updates()

We do the import.

  >>> pofile.importFromQueue()

The status is now FAILED:

  >>> entry.status == RosettaImportStatus.FAILED
  True

And we sent an email with the notification of the error.

We need to commit the transaction to get the email.

  >>> transaction.commit()

There is one email and it's for the error we produced.

  >>> len(stub.test_emails)
  1
  >>> from_addr, to_addrs, raw_message = stub.test_emails.pop()
  >>> msg = email.message_from_string(raw_message)
  >>> msg["Subject"]
  'Import problem - Welsh (cy) - firefox in Mozilla Firefox trunk'
  >>> print msg.get_payload(decode=True)
  Hello Mark Shuttleworth,
  <BLANKLINE>
  On ..., you uploaded a file with
  Welsh (cy) translations for firefox in Mozilla Firefox trunk in Launchpad.
  <BLANKLINE>
  We were unable to import it because either this file did not
  originate in Launchpad, or you removed the tag we use to mark files
  exported from Launchpad.
  <BLANKLINE>
  The reason we require that tag is to prevent translators who work
  offline from inadvertently reverting translations made by others.
  <BLANKLINE>
  To fix the problem, please get the latest export from Launchpad,
  apply your changes and upload the merged file.
  <BLANKLINE>
  For your convenience, you can get the file you uploaded at:
  http://localhost:58000/.../firefox-cy.po
  <BLANKLINE>
  Thank you,
  <BLANKLINE>
  The Launchpad team
  <BLANKLINE>

We should also be sure that we don't block any import 'published'. That
kind of import is not blocked if they lack the 'X-Rosetta-Export-Date' header.

We need to fetch again some SQLObjects because we did a transaction commit.

  >>> release = ProductRelease.get(3)
  >>> series = release.productseries
  >>> subset = POTemplateSubset(productseries=series)
  >>> potemplate = subset.getPOTemplateByName('firefox')
  >>> pofile = potemplate.getPOFileByLang('cy')
  >>> person = person_set.getByName('sabdfl')

Now, attach the file again, but this time as published.

  >>> published = True
  >>> entry = translation_import_queue.addOrUpdateEntry(
  ...     pofile.path, pofile_contents, published, person,
  ...     productseries=series, potemplate=potemplate, pofile=pofile)
  >>> transaction.commit()

We must approve the entry to be able to import it.

  >>> entry.status = RosettaImportStatus.APPROVED
  >>> flush_database_updates()

We do the import.

  >>> pofile.importFromQueue()

The status is now IMPORTED:

  >>> entry.status == RosettaImportStatus.IMPORTED
  True

And we sent an email with the notification of the import.

We need to commit the transaction to get the email.

  >>> transaction.commit()

There is one email and it's a confirmation of the import.

  >>> len(stub.test_emails)
  1
  >>> from_addr, to_addrs, raw_message = stub.test_emails.pop()
  >>> msg = email.message_from_string(raw_message)
  >>> msg["Subject"]
  'Translation import - Welsh (cy) - firefox in Mozilla Firefox trunk'
