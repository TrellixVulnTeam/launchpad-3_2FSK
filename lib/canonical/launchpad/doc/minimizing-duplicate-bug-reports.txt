Minimizing Duplicate Bug Reports
================================

Malone does its best to discourage duplicate bug report filing. The
default filebug workfow, for example, guides the user through a search
for duplicate bugs before allowing the bug to actually be filed.

IBugTarget has a getMostCommonBugs() method which returns a
list of bugs ordered by number of dupes, most to least.

    (First, let's add some more duplicate bug sample data.)

    >>> from zope.component import getUtility
    >>> from canonical.database.sqlbase import flush_database_updates
    >>> from canonical.launchpad.interfaces import (
    ...     IBugSet, CreateBugParams, IProductSet, ILaunchBag)

    >>> login("no-priv@canonical.com")

    >>> bugset = getUtility(IBugSet)
    >>> bug_five = bugset.get(5)
    >>> bug_one = bugset.get(1)

    >>> firefox = getUtility(IProductSet).getByName("firefox")
    >>> current_user = getUtility(ILaunchBag).user
    >>> params = CreateBugParams(
    ...     owner=current_user, title="a duplicate bug",
    ...     comment="this bug is a duplicate")
    >>> bug_five_dupe = firefox.createBug(params)
    >>> bug_five_dupe.duplicateof = bug_five
    >>> bug_one_dupe = firefox.createBug(params)
    >>> bug_one_dupe.duplicateof = bug_one

    >>> flush_database_updates()

By default, 10 bugs are returned by the getMostCommonBugs method.

    >>> for bug in firefox.getMostCommonBugs(current_user):
    ...     print "%s, %s" % (bug.title, bug.duplicates.count())
    Firefox install instructions should be complete, 2
    Firefox does not support SVG, 1

If we ask for just one bug, we get only one.

    >>> for bug in firefox.getMostCommonBugs(current_user, limit=1):
    ...     print "%s, %s" % (bug.title, bug.duplicates.count())
    Firefox install instructions should be complete, 2

getMostCommonBugs is also privacy aware. If bug one is marked private,
we will no longer see it in the results, because no-priv, is not
subscribed to the bug.

    >>> print current_user.name
    no-priv

    >>> bug_one.isSubscribed(current_user)
    False
    >>> bug_one.private = True
    >>> flush_database_updates()

    >>> for bug in firefox.getMostCommonBugs(current_user):
    ...     print "%s, %s" % (bug.title, bug.duplicates.count())
    Firefox install instructions should be complete, 2

An admin will, of course, see the private bug.

    >>> login("foo.bar@canonical.com")

    >>> current_user = getUtility(ILaunchBag).user

    >>> for bug in firefox.getMostCommonBugs(current_user):
    ...     print "%s, %s" % (bug.title, bug.duplicates.count())
    Firefox install instructions should be complete, 2
    Firefox does not support SVG, 1

When the context has /no/ duplicate bugs, an empty list is returned.

    >>> from canonical.launchpad.interfaces import IDistributionSet

    >>> kubuntu = getUtility(IDistributionSet).getByName("kubuntu")
    >>> kubuntu.getMostCommonBugs(current_user)
    []
