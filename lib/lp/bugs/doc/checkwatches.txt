checkwatches.py
===============

The updating and syncing of bug watches is done by a cronscript. We
can't test it properly, since we don't yet have a mock HTTP server we
can use for testing, so let's just make sure that it doesn't try to
contact any external servers.

    >>> from canonical.database.sqlbase import cursor, sqlvalues
    >>> from canonical.database.constants import UTC_NOW
    >>> cur = cursor()
    >>> cur.execute("UPDATE BugWatch SET lastchecked=%s" %
    ...     sqlvalues(UTC_NOW))
    >>> import transaction
    >>> transaction.commit()

We'll add a bug watch to the Gnu Savannah bug tracker so that
checkwatches will try to get an ExternalBugTracker with which to update
the watch.

    >>> from canonical.config import config
    >>> from canonical.launchpad.interfaces import ILaunchpadCelebrities
    >>> from lp.testing.factory import LaunchpadObjectFactory
    >>> from canonical.testing import LaunchpadZopelessLayer

    >>> LaunchpadZopelessLayer.switchDbUser('launchpad')

    >>> factory = LaunchpadObjectFactory()
    >>> savannah = getUtility(ILaunchpadCelebrities).savannah_tracker
    >>> bug_watch = factory.makeBugWatch(bugtracker=savannah)

    >>> transaction.commit()
    >>> LaunchpadZopelessLayer.switchDbUser(config.checkwatches.dbuser)

    >>> import subprocess
    >>> process = subprocess.Popen(
    ...     ['cronscripts/checkwatches.py', '-v'],
    ...     stdin=subprocess.PIPE, stdout=subprocess.PIPE,
    ...     stderr=subprocess.PIPE)
    >>> (out, err) = process.communicate()
    >>> out
    ''
    >>> process.returncode
    0

    >>> print err
    INFO    creating lockfile
    DEBUG   Using a global batch size of None
    DEBUG   No watches to update on http://bugs.debian.org
    DEBUG   No watches to update on mailto:bugs@example.com
    WARNING ExternalBugtracker for BugTrackerType 'SAVANE' is not known.
    DEBUG   No watches to update on http://bugzilla.gnome.org/bugs
    DEBUG   No watches to update on http://sourceforge.net/
    DEBUG   No watches to update on http://bugzilla.gnome.org/
    DEBUG   No watches to update on https://bugzilla.mozilla.org/
    DEBUG   Skipping updating Ubuntu Bugzilla watches.
    INFO    Time for this run: ... seconds.
    DEBUG   Removing lock file:...
    <BLANKLINE>

OOPSes reported by the checkwatches process are raised using the
CheckWatchesErrorUtility. The errors have 'CW' in their oops prefix
and their type is 'BugWatchUpdateWarning'.

    >>> from lp.bugs.scripts.checkwatches import (
    ...     CheckWatchesErrorUtility)
    >>> error_utility = CheckWatchesErrorUtility()
    >>> report = error_utility.getLastOopsReport()
    >>> report.id
    'OOPS-...TCW...'
    >>> report.type
    'BugWatchUpdateWarning'

    >>> from sys import stdout
    >>> def dump_last_oops():
    ...     error_utility.getLastOopsReport().write(stdout)

    >>> dump_last_oops()
    Oops-Id: OOPS-...TCW...
    Exception-Type: BugWatchUpdateWarning
    Exception-Value: ExternalBugtracker for BugTrackerType 'SAVANE' ...
    Date: ...
    Page-Id:
    Branch: ...
    Revision: ...
    User: None
    URL: None
    Duration: -1
    <BLANKLINE>
    error-explanation=ExternalBugtracker for ... is not known.

We set a default timeout on checkwatches to 30 seconds. In order to test
this, we can monkey-patch urllib2.urlopen so that it always raises a
timeout and call the checkwatches cronscript machinery directly.

First, we create some bug watches to test with:

    >>> from canonical.launchpad.database import BugTracker
    >>> from canonical.launchpad.interfaces import (
    ...     BugTrackerType, IBugSet)
    >>> from lp.bugs.scripts.checkwatches import (
    ...     BugWatchUpdater)
    >>> from canonical.launchpad.interfaces import (
    ...     IPersonSet)
    >>> sample_person = getUtility(IPersonSet).getByEmail(
    ...     'test@canonical.com')

    >>> example_bug_tracker = BugTracker(
    ...     name="example-bugs",
    ...     title="Example.com Roundup",
    ...     bugtrackertype=BugTrackerType.ROUNDUP,
    ...     baseurl="http://bugs.example.com",
    ...     summary="Contains bugs for Example.com",
    ...     contactdetails="foo.bar@example.com",
    ...     owner=sample_person)

    >>> login('test@canonical.com')

    >>> example_bug = getUtility(IBugSet).get(10)
    >>> example_bugwatch = example_bug.addWatch(
    ...     example_bug_tracker, '1',
    ...     getUtility(ILaunchpadCelebrities).janitor)

    >>> login('no-priv@canonical.com')

Next, we monkey-patch urllib2.urlopen so that it always times out.

The timeout will also produce an OOPS report and the OOPS id will be
included in the logged error message. The URL field of the OOPS report
will also be automatically filled from the baseurl OOPS property.

    >>> import socket
    >>> import urllib2
    >>> urlopen = urllib2.urlopen

    >>> transaction.commit()
    >>> def do_not_urlopen(url=None, data=None):
    ...     raise socket.timeout("Connection timed out.")
    >>> try:
    ...     urllib2.urlopen = do_not_urlopen
    ...     updater = BugWatchUpdater(transaction)
    ...     updater._login()
    ...     updater.updateBugTrackers(
    ...         bug_tracker_names=[example_bug_tracker.name])
    ... finally:
    ...     urllib2.urlopen = urlopen
    ERROR...Connection timed out when updating ... (OOPS-...)

    >>> dump_last_oops()
    Oops-Id: OOPS-...TCW...
    Exception-Type: timeout
    Exception-Value: Connection timed out.
    Date: ...
    Page-Id:
    Branch: ...
    Revision: ...
    User: None
    URL: http://bugs.example.com
    Duration: -1
    <BLANKLINE>
    baseurl=http://bugs.example.com
    bugtracker=example-bugs
    error-explanation=Connection timed out ... http://bugs.example.com
    <BLANKLINE>
    <BLANKLINE>
    Traceback (most recent call last):
    ...
    timeout: Connection timed out.

Errors that occur when updating a bug watch are recorded against that
bug watch. The timeout will be recorded against the bug watch we just
created in its last_error_type field.

    >>> from canonical.launchpad.interfaces import BugWatchErrorType
    >>> example_bugwatch.last_error_type == BugWatchErrorType.TIMEOUT
    True

Another error which may occur and which checkwatches is responsible for
handling is UnknownBugTrackerTypeError, which is raised when
checkwatches attempts to instantiate the ExternalBugtracker descendant
for a bugtracker which Launchpad doesn't support.

We can demonstrate this by altering the get_external_bugtracker method
of the externalbugtracker module to ensure that it raises this error.

    >>> from lp.bugs import externalbugtracker
    >>> real_get_external_bugtracker = (
    ...     externalbugtracker.get_external_bugtracker)

    >>> def broken_get_external_bugtracker(bugtracker):
    ...     bugtrackertype = bugtracker.bugtrackertype
    ...     raise externalbugtracker.UnknownBugTrackerTypeError(
    ...         bugtrackertype.name, bugtracker.name)

    >>> login(ANONYMOUS)
    >>> example_bugwatch.lastchecked = None
    >>> try:
    ...     externalbugtracker.get_external_bugtracker = (
    ...         broken_get_external_bugtracker)
    ...     updater = BugWatchUpdater(transaction)
    ...     updater._login()
    ...     updater.updateBugTracker(example_bug_tracker)
    ... finally:
    ...     externalbugtracker.get_external_bugtracker = (
    ...         real_get_external_bugtracker)
    WARNING:...:ExternalBugtracker for BugTrackerType 'ROUNDUP' is not
    known.

The bug watch's last error type field will have been updated to reflect
the error that was raised:

    >>> example_bugwatch.last_error_type.title
    'Unsupported Bugtracker'


Batched Bugwatch Updating
-------------------------

checkwatches.py will only update those bugs that need updating, but
there is a further limit on the amount of bugs which will be updated for
a given ExternalBugTracker in each checkwatches run: the batch size.

We need to add some bug watches again since
BugWatchUpdate.updateBugTracker() automatically rolls back the
transaction if something goes wrong.

    >>> login('test@canonical.com')
    >>> for bug_id in range(1, 10):
    ...     example_bugwatch = example_bug.addWatch(
    ...         example_bug_tracker, str(bug_id),
    ...         getUtility(ILaunchpadCelebrities).janitor)

Since we know how many bugwatches example_bug has we will be able to see
when checkwatches only updates a subset of them.

    >>> example_bug.watches.count()
    9

Since our example bug tracker is a Roundup bug tracker we can
monkey-patch the Roundup ExternalBugTrackerClass in order to set its
batch size. We will also monkey-patch urllib2.urlopen again so that no
requests are actually made.

    >>> from lp.bugs import externalbugtracker
    >>> from canonical.launchpad.scripts import FakeLogger
    >>> updater = BugWatchUpdater(transaction)
    >>> original_log = updater.log
    >>> batch_size = externalbugtracker.Roundup.batch_size
    >>> transaction.commit()
    >>> try:
    ...     updater._login()
    ...     urllib2.urlopen = do_not_urlopen
    ...     externalbugtracker.Roundup.batch_size = 5
    ...     updater.log = FakeLogger()
    ...     updater.updateBugTrackers([example_bug_tracker.name])
    ... finally:
    ...     updater.log = original_log
    ...     externalbugtracker.Roundup.batch_size = batch_size
    ...     urllib2.urlopen = urlopen
    DEBUG Using a global batch size of None
    INFO Updating 5 watches for 5 bugs on http://bugs.example.com
    ERROR Connection timed out when updating ... (OOPS-...)


Updating all the watches on a bug tracker
-----------------------------------------

It's possible to update all the watches on a bug tracker using
checkwatches. This is handled by the Checkwatches script's
updateAllWatches() method.
