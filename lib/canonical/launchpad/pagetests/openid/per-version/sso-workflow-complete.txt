= Launchpad Single-Signon Workflow: The whole process =

If a user wants to use a Launchpad-SSO web site, but does not have a
Launchpad account, they can register directly from the login page.

By doing so they will get an SSO account, but that it will have no
associated person as they're not actually using Launchpad (yet).

First we will set up the helper view that lets us test the final
portion of the authentication process:

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> from openid.consumer.consumer import Consumer
    >>> from openid.fetchers import setDefaultFetcher
    >>> from openid.store.memstore import MemoryStore
    >>> from canonical.launchpad.testing.openidhelpers import (
    ...     complete_from_browser, make_identifier_select_endpoint,
    ...     PublisherFetcher)
    >>> setDefaultFetcher(PublisherFetcher())

The authentication process is started by the relying party issuing a
checkid_setup request, sending the user to Launchpad:

    >>> openid_store = MemoryStore()
    >>> consumer = Consumer(session={}, store=openid_store)

    >>> request = consumer.beginWithoutDiscovery(
    ...     make_identifier_select_endpoint(PROTOCOL_URI))
    >>> browser.open(request.redirectURL(
    ...     'http://launchpad.dev/', 'http://launchpad.dev/+openid-consumer'))

At this point, we are at the login page.  Let's create a new account for
an email address that has not been registered:

    >>> print browser.title
    Launchpad Login Service
    >>> browser.getControl(name='field.email').value = 'new-user@example.com'
    >>> browser.getControl('No, I want to create an account now').click()
    >>> browser.getControl('Continue').click()
    >>> soup = find_main_content(browser.contents)
    >>> print soup.find('h1').renderContents()
    Registration mail sent

Following the link sent by email will take the user to the page where
they enter their name and password to complete the registration.

    >>> from canonical.launchpad.mail import stub
    >>> from canonical.launchpad.ftests.logintoken import (
    ...     get_token_url_from_email)
    >>> from_addr, to_addr, msg = stub.test_emails.pop()
    >>> token_url = get_token_url_from_email(msg)
    >>> browser.open(token_url)
    >>> print browser.url
    http://openid.launchpad.dev/token/.../+newaccount

    >>> browser.getControl('Name').value = 'New User'
    >>> browser.getControl('Create password').value = 'test'
    >>> browser.getControl(name='field.password_dupe').value = 'test'
    >>> browser.getControl('Continue').click()

Now the user is logged in with their new account, and has been
directed back to the original site:

    >>> print browser.url
    http://launchpad.dev/+openid-consumer?...

And the response matches the new OpenID:

    >>> login('new-user@example.com')
    >>> from canonical.launchpad.interfaces.account import IAccountSet
    >>> account = getUtility(IAccountSet).getByEmail('new-user@example.com')
    >>> expected_claimed_id = (
    ...     'http://openid.launchpad.dev/+id/' + account.openid_identifier)
    >>> logout()

    >>> info = complete_from_browser(consumer, browser, expected_claimed_id)
    >>> print info.status
    success
    >>> info.endpoint.claimed_id == expected_claimed_id
    True

Since this account was created using OpenID, we will not create an entry in
the Person table for it.

    >>> login('new-user@example.com')
    >>> print getUtility(IPersonSet).getByAccount(account)
    None
    >>> logout()

That account can obviously be used in further OpenID interactions.

    >>> browser = setupBrowser()
    >>> request = consumer.beginWithoutDiscovery(
    ...     make_identifier_select_endpoint(PROTOCOL_URI))
    >>> browser.open(request.redirectURL(
    ...     'http://launchpad.dev/', 'http://launchpad.dev/+openid-consumer'))

    >>> print browser.title
    Launchpad Login Service
    >>> browser.getControl(name='field.email').value = 'new-user@example.com'
    >>> browser.getControl(name='field.password').value = 'test'
    >>> browser.getControl('Continue').click()

    # Here we see the OpenID interaction completed successfully.
    >>> info = complete_from_browser(consumer, browser, expected_claimed_id)
    >>> print info.status
    success

If the user forgets their password, it's possible to reset it.

    >>> browser = setupBrowser()
    >>> request = consumer.beginWithoutDiscovery(
    ...     make_identifier_select_endpoint(PROTOCOL_URI))
    >>> browser.open(request.redirectURL(
    ...     'http://launchpad.dev/', 'http://launchpad.dev/+openid-consumer'))

    >>> print browser.title
    Launchpad Login Service
    >>> browser.getControl(name='field.email').value = 'new-user@example.com'
    >>> browser.getControl("I've forgotten my password").click()
    >>> browser.getControl('Continue').click()

    >>> soup = find_main_content(browser.contents)
    >>> print soup.find('h1').renderContents()
    Forgotten your password?

    >>> from_addr, to_addr, msg = stub.test_emails.pop()
    >>> token_url = get_token_url_from_email(msg)
    >>> browser.open(token_url)
    >>> print browser.url
    http://.../+resetpassword

    >>> browser.getControl('Email').value = 'new-user@example.com'
    >>> browser.getControl('Password').value = 'test2'
    >>> browser.getControl(name='field.password_dupe').value = 'test2'
    >>> browser.getControl('Continue').click()

    # Here we see the OpenID interaction completed successfully.
    >>> info = complete_from_browser(consumer, browser, expected_claimed_id)
    >>> print info.status
    success

And then log back in, using the new password.

    >>> browser = setupBrowser()
    >>> request = consumer.beginWithoutDiscovery(
    ...     make_identifier_select_endpoint(PROTOCOL_URI))
    >>> browser.open(request.redirectURL(
    ...     'http://launchpad.dev/', 'http://launchpad.dev/+openid-consumer'))

    >>> print browser.title
    Launchpad Login Service
    >>> browser.getControl(name='field.email').value = 'new-user@example.com'
    >>> browser.getControl(name='field.password').value = 'test2'
    >>> browser.getControl('Continue').click()

    # Here we see the OpenID interaction completed successfully.
    >>> info = complete_from_browser(consumer, browser, expected_claimed_id)
    >>> print info.status
    success


== Browsing launchpad.net ==

If the user uses the same browser "window" to navigate into Launchpad,
they will see everything just like an anonymous user would.

    >>> browser.open('http://launchpad.dev/')
    >>> print extract_text(find_tag_by_id(browser.contents, 'logincontrol'))
    Log in / Register

And they will be asked to login if they try to do anything that requires a
logged in user.

    >>> browser.handleErrors = True
    >>> browser.open('http://launchpad.dev/people/+me')
    >>> browser.url
    'http://launchpad.dev/people/+me/+login'

If they login with their existing credentials, we will automatically create
an associated Person entry for that account.

    >>> browser.handleErrors = False
    >>> browser.getControl(
    ...     'E-mail address:', index=0).value = 'new-user@example.com'
    >>> browser.getControl('Password').value = 'test2'
    >>> browser.getControl('Log In').click()

    >>> browser.url
    'http://launchpad.dev/~new-user'
    >>> print extract_text(find_tag_by_id(browser.contents, 'logincontrol'))
    New User...
    >>> login('new-user@example.com')
    >>> getUtility(IPersonSet).getByAccount(account)
    <Person ... new-user ...
    >>> logout()

== Cleanup ==

    >>> setDefaultFetcher(None)
