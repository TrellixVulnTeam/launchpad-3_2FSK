Buildd Slave
============

Buildd Slave is an application independent of Launchpad Database, so
it has its own configuration file and depends only of sbuild package

It consists basically of an wrapper of sbuild process through an XMLRPC
Server interface. It requires read access to the current Librarian machine 
to download needed files for the build job.

See more initialization details in canonical/buildd/ftests/harness.py

  >>> from canonical.buildd.ftests import BuilddSlaveTestSetup
   
  >>> BuilddSlaveTestSetup().setUp()

Use simple xmlrpclib client to certify the BuildSlave is running

  >>> import xmlrpclib
  >>> s = xmlrpclib.Server('http://localhost:8221/')
  >>> s.echo('Hello World')
  ['Hello World']

Pass a file to the slave and ensure it gives us the correct sha1sum back

  >>> helloworld = "Hello World\n"
  >>> sum = s.storefile(helloworld)
  >>> sum
  '648a6a6ffffdaa0badb23b8baf90b6168dd16b3a'

Fetch the file back and verify that it is correct

  >>> str(s.fetchfile(sum)) == helloworld
  True

As of slave protocol version two, /filecache/SHA1SUM is an alternative way
to retrieve files from the slave. Verify it works...

  >>> from urllib2 import urlopen
  >>> f = urlopen("http://localhost:8221/filecache/"+sum)
  >>> hw_str = f.read()
  >>> f.close()
  >>> hw_str == helloworld
  True

Tested, time to shutdown

  >>> BuilddSlaveTestSetup().tearDown()


# XXX cprov 20050630
# As soon as we have better control of the environment we can try to
# simulate the some certified build job, maybe the historical 'at'
# that build even 'under the water'.
