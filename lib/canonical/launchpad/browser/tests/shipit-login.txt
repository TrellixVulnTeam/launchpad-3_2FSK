= Logging into shipit =

ShipIt uses the Launchpad Login Service as its OpenID provider.  When a user
tries to log into shipit, they will be taken to the Login Service, where they
will be asked to authenticate using their Launchpad account.

    # Change the rooturl of our openid vhost.  This is necessary so that the
    # python OpenID library can access the OpenID provider (made available by
    # the AppServerLayer) using HTTP requests instead of going directly
    # through zope3's publication machinery.
    >>> from canonical.launchpad.webapp.vhosts import allvhosts
    >>> orig_value = allvhosts.configs['openid'].rooturl
    >>> allvhosts.configs['openid'].rooturl = (
    ...     'http://openid.launchpad.dev:8085/')

    >>> browser.open('http://shipit.ubuntu.dev')
    >>> browser.getLink('Log In').click()

    >>> print browser.title
    OpenID transaction in progress

    # In a real browser, this form would have been auto-submitted using
    # javascript, but here we have to do that manually.
    >>> browser.getControl('Continue').click()
    >>> print browser.title
    Launchpad Login Service

If they don't have a Launchpad account, they can create one.

    >>> browser.getControl(name='field.email').value = 'new-user@example.com'
    >>> browser.getControl('No, I want to create an account now').click()
    >>> browser.getControl('Continue').click()
    >>> soup = find_main_content(browser.contents)
    >>> print soup.find('h1').renderContents()
    Registration mail sent

Once they complete the account creation (by following the link sent to their
email address), they are redirected back to shipit.

    >>> from canonical.launchpad.mail import stub
    >>> from canonical.launchpad.ftests.logintoken import (
    ...     get_token_url_from_email)
    >>> from_addr, to_addr, msg = stub.test_emails.pop()
    >>> token_url = get_token_url_from_email(msg)
    >>> browser.open(token_url)
    >>> print browser.url
    http://openid.launchpad.dev.../+newaccount

    >>> browser.getControl('Name').value = 'New User'
    >>> browser.getControl('Create password').value = 'test'
    >>> browser.getControl(name='field.password_dupe').value = 'test'
    >>> browser.getControl('Continue').click()

Once redirected back, they will be logged in.

    >>> print browser.url
    http://shipit.ubuntu.dev/myrequest
    >>> print extract_text(find_tags_by_class(browser.contents, 'login')[0])
    Logged in as New User...

If the user did not authorize the OpenID provider to send his details to
Shipit, an error message would be shown, explaining that the login was not
successful.

    >>> browser.open('http://shipit.ubuntu.dev')
    >>> browser.getControl('Log Out').click()
    >>> browser.getLink('Log In').click()

    >>> print browser.title
    OpenID transaction in progress

    # In a real browser, this form would have been auto-submitted using
    # javascript, but here we have to do that manually.
    >>> browser.getControl('Continue').click()
    >>> print browser.title
    Authenticate to http://shipit.ubuntu.dev

    >>> browser.getControl('Not Now').click()
    >>> print browser.title
    ShipIt - Unsuccessful login

    >>> print extract_text(find_tags_by_class(browser.contents, 'error')[0])
    User cancelled
    >>> print find_tags_by_class(browser.contents, 'login')
    []

Undo the config change we did.

    >>> allvhosts.configs['openid'].rooturl = orig_value
