Ticket Email Notifications
==========================

When a ticket is created or changed, an email notification is sent out,
informing the subscribers and the support contacts about the change.
Let's start with creating a ticket, and see what the resulting
notification looks like:

    >>> from zope.event import notify
    >>> from canonical.launchpad.event import SQLObjectCreatedEvent
    >>> from canonical.launchpad.interfaces import IDistributionSet
    >>> login('test@canonical.com')
    >>> sample_person = getUtility(ILaunchBag).user
    >>> ubuntu = getUtility(IDistributionSet).getByName('ubuntu')
    >>> ubuntu_ticket = ubuntu.newTicket(
    ...     sample_person, "Can't install Ubuntu",
    ...    "I insert the install CD in the CD-ROM drive, but it won't boot.")
    >>> notify(SQLObjectCreatedEvent(ubuntu_ticket))

Notifications emails are sent once the transaction is commited.

    >>> import transaction
    >>> transaction.commit()

The notifications get sent to the ticket's subscribers and the ticket's
target support contacts. Initially, only the submitter, Sample Person,
is subscribed to the ticket and there is no support contact registered
on Ubuntu, so only 1 notification is sent:

    >>> ubuntu.support_contacts
    []
    >>> [sub.person.displayname for sub in ubuntu_ticket.subscriptions]
    [u'Sample Person']
    >>> from canonical.launchpad.mail import stub
    >>> len(stub.test_emails)
    1

    >>> import email
    >>> notifications = [
    ...     email.message_from_string(raw_message)
    ...     for from_addr, to_addrs, raw_message in sorted(stub.test_emails)
    ...     ]
    >>> add_notification = notifications[0]
    >>> add_notification['From']
    'Sample Person <ticket...@support.launchpad.net>'
    >>> add_notification['To']
    'test@canonical.com'
    >>> add_notification['Subject']
    "[Support #...]: Can't install Ubuntu"
    >>> notification_body = add_notification.get_payload()
    >>> print notification_body #doctest: -NORMALIZE_WHITESPACE
    New support request #... on Ubuntu:
    http://.../distros/ubuntu/+ticket/...
    <BLANKLINE>
    I insert the install CD in the CD-ROM drive, but it won't boot.
    <BLANKLINE>

    >>> stub.test_emails = []

Let's simulate that the no-priv answers the support ticket. This
involves only creating a new message. We also register the Ubuntu Team
as Ubuntu's support contact, so that they get notified about the
changes as well:

    >>> from canonical.launchpad.event import SQLObjectModifiedEvent
    >>> from canonical.launchpad.webapp.snapshot import Snapshot
    >>> from canonical.launchpad.interfaces import ITicket, IPersonSet
    >>> from zope.interface import providedBy

    >>> ubuntu_team = getUtility(IPersonSet).getByName('ubuntu-team')
    >>> ubuntu.addSupportContact(ubuntu_team)
    True
    >>> login('no-priv@canonical.com')
    >>> no_priv = getUtility(ILaunchBag).user
    >>> unmodified_ticket = Snapshot(
    ...     ubuntu_ticket, providing=providedBy(ubuntu_ticket))
    >>> comment = ubuntu_ticket.newMessage(
    ...     no_priv, ubuntu_ticket.followup_subject,
    ...     'You have to change the boot order in the BIOS.')
    >>> notify(SQLObjectModifiedEvent(
    ...     ubuntu_ticket, unmodified_ticket, ['messages']))

Now two copies of the notification got sent, one to Sample Person, and
one to Ubuntu Team:

    >>> transaction.commit()
    >>> len(stub.test_emails)
    2

    >>> notifications = [
    ...     email.message_from_string(raw_message)
    ...     for from_addr, to_addrs, raw_message in sorted(stub.test_emails)
    ...     ]
    >>> [email_msg['To'] for email_msg in notifications]
    ['support@ubuntu.com', 'test@canonical.com']
    >>> edit_notification = notifications[0]
    >>> edit_notification['Subject']
    "[Support #...]: Re: Can't install Ubuntu"

    >>> notification_body = edit_notification.get_payload(decode=True)
    >>> print notification_body #doctest: -NORMALIZE_WHITESPACE
    Support request #... on Ubuntu changed:
    http://.../distros/ubuntu/+ticket/...
    <BLANKLINE>
    Comment:
    You have to change the boot order in the BIOS.
    <BLANKLINE>

    >>> stub.test_emails = []

If we trigger a modification event, even though no changes worth
notifying about was made, no notification is sent:

    >>> unmodified_ticket = Snapshot(
    ...     ubuntu_ticket, providing=providedBy(ubuntu_ticket))
    >>> notify(SQLObjectModifiedEvent(
    ...     ubuntu_ticket, unmodified_ticket, ['status']))

    >>> transaction.commit()
    >>> len(stub.test_emails)
    0

If we create a bug from the support request, it will be reported as a
bug that has been linked to the request:

    >>> from canonical.launchpad.interfaces import CreateBugParams

    >>> unmodified_ticket = Snapshot(
    ...     ubuntu_ticket, providing=providedBy(ubuntu_ticket))
    >>> params = CreateBugParams(
    ...     owner=no_priv, title=ubuntu_ticket.title,
    ...     comment=ubuntu_ticket.description)
    >>> bug = ubuntu_ticket.target.createBug(params)
    >>> ubuntu_ticket.linkBug(bug)
    <TicketBug...>
    >>> notify(SQLObjectModifiedEvent(
    ...     ubuntu_ticket, unmodified_ticket, ['bugs']))

    >>> transaction.commit()
    >>> len(stub.test_emails)
    2

    >>> notifications = [
    ...     email.message_from_string(raw_message)
    ...     for from_addr, to_addrs, raw_message in sorted(stub.test_emails)
    ...     ]
    >>> edit_notification = notifications[0]
    >>> notification_body = edit_notification.get_payload(decode=True)
    >>> print notification_body #doctest: -NORMALIZE_WHITESPACE
    Support request #... on Ubuntu changed:
    http://.../distros/ubuntu/+ticket/...
    <BLANKLINE>
        Linked to bug: #11
        http://.../bugs/11
    <BLANKLINE>

    >>> stub.test_emails = []

And if we remove the link again, we get:

    >>> unmodified_ticket = Snapshot(ubuntu_ticket,
    ...     providing=providedBy(ubuntu_ticket))
    >>> ubuntu_ticket.unlinkBug(bug)
    <TicketBug...>
    >>> notify(SQLObjectModifiedEvent(
    ...     ubuntu_ticket, unmodified_ticket, ['bugs']))

    >>> transaction.commit()
    >>> len(stub.test_emails)
    2

    >>> notifications = [
    ...     email.message_from_string(raw_message)
    ...     for from_addr, to_addrs, raw_message in sorted(stub.test_emails)
    ...     ]
    >>> edit_notification = notifications[0]
    >>> notification_body = edit_notification.get_payload(decode=True)
    >>> print notification_body #doctest: -NORMALIZE_WHITESPACE
    Support request #... on Ubuntu changed:
    http://.../distros/ubuntu/+ticket/...
    <BLANKLINE>
        Removed link to bug: #11
        http://.../bugs/11
    <BLANKLINE>

    >>> stub.test_emails = []

Edits to the title and description also causes notifications to be sent:

    >>> unmodified_ticket = Snapshot(
    ...     ubuntu_ticket, providing=providedBy(ubuntu_ticket))
    >>> ubuntu_ticket.title = 'Better Title'
    >>> ubuntu_ticket.description = """A better description.
    ...
    ... The description spans more than one line."""
    >>> notify(SQLObjectModifiedEvent(
    ...     ubuntu_ticket, unmodified_ticket, ['title', 'description']))

    >>> transaction.commit()
    >>> len(stub.test_emails)
    2

    >>> notifications = [
    ...     email.message_from_string(raw_message)
    ...     for from_addr, to_addrs, raw_message in sorted(stub.test_emails)
    ...     ]
    >>> edit_notification = notifications[0]
    >>> notification_body = edit_notification.get_payload(decode=True)
    >>> print notification_body #doctest: -NORMALIZE_WHITESPACE
    Support request #... on Ubuntu changed:
    http://.../distros/ubuntu/+ticket/...
    <BLANKLINE>
    Summary changed to:
    Better Title
    <BLANKLINE>
    Description changed to:
    A better description.
    <BLANKLINE>
    The description spans more than one line.
    <BLANKLINE>

    >>> stub.test_emails = []
