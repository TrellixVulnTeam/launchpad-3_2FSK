
CVE IMPORT PROCESS
==================

Launchpad has a cronscript (in "cronscripts/update-cve.py") that will fetch
the latest CVE database, in XML format, from the web, and then ensure that
the CVE data in it is correctly reflected in the local Launchpad database.
It takes care to reflect the correct description, status (Entry, Candidate,
or Deprecated), as well as all the References for that CVE entry.

This documentation test will describe and test the behaviour of this
infrastructure. Note that it assumes that the XML format is not changing,
and it does not attempt to connect to the outside world to verify that is
the case.

    >>> from canonical.launchpad.ftests.harness import LaunchpadFunctionalTestSetup
    >>> from canonical.librarian.ftests.harness import LibrarianTestSetup
    >>> LaunchpadFunctionalTestSetup().setUp()
    >>> LibrarianTestSetup().setUp()

This is a workaround to give this test the same permissions as the cron script
has.

    >>> from canonical.launchpad.ftests import login
    >>> login("daf@canonical.com")

This is a dummy logger class to capture the import's log messages.

    >>> import sys
    >>> import traceback

    >>> class FakeLogger:
    ...     messages = []
    ...
    ...     def log(self, *stuff):
    ...         self.messages.append(' '.join(stuff))
    ...
    ...     debug = info = warn = error = log
    ...
    ...     def exception(self, *stuff):
    ...         self.log(*stuff)
    ...
    ...         for line in traceback.format_exception(*sys.exc_info()):
    ...             if line.strip():
    ...                 self.log(line)


We need to create a DOM structure describing the XML database. We have two
little db's for this test, an initial one, and then an update. We will
simulate fetching the first db, and processing it, then processing the
second one, which should update a bunch of the CVE's.

    >>> from xml.dom.minidom import parseString
    >>> init_db = parseString(
    ...     open('lib/canonical/launchpad/scripts/tests/cvedb_init.xml').read())
    >>> update_db = parseString(
    ...     open('lib/canonical/launchpad/scripts/tests/cvedb_update.xml').read())

OK. So now lets import the first XML database. First, lets se how many CVE
entries are in the database.

    >>> from canonical.launchpad.database import Cve
    >>> print Cve.select().count()
    10

Now, let's do the import of the initial CVE db.

    >>> from canonical.launchpad.scripts.cveimport import update_one_cve
    >>> items = init_db.getElementsByTagName('item')
    >>> logger = FakeLogger()
    >>> for item in items:
    ...     update_one_cve(item, logger)

Let's print out the log and see how she looks.

    >>> print '\n'.join(logger.messages)
    CVE-1999-0002 created
    Creating new SGI reference for 1999-0002
    Creating new BID reference for 1999-0002
    Creating new XF reference for 1999-0002
    CVE-1999-0003 created
    Creating new CERT reference for 1999-0003
    Creating new SGI reference for 1999-0003
    Creating new XF reference for 1999-0003
    Creating new XF reference for 1999-0003
    CVE-1999-0005 created
    Creating new CERT reference for 1999-0005
    Creating new BID reference for 1999-0005
    CVE-1999-0007 created
    Creating new CERT reference for 1999-0007
    Creating new XF reference for 1999-0007
    CVE-2005-2761 created
    Creating new MISC reference for 2005-2761
    Creating new DEBIAN reference for 2005-2761
    CVE-2005-2762 created
    CVE-2005-2763 created
    CVE-2005-2764 created

And lets make sure we got the right number of CVE entries.

    >>> print Cve.select().count()
    18

We will make a note of the CVE modification time of 1999-0002. When we
update it later, we can use this modification time to check that its
modification time is being updated correctly.

    >>> c = Cve.bySequence('2005-2734')
    >>> mod_time = c.datemodified

And while we are here, make a note of the number of references for that CVE
entry.

    >>> print len(c.references)
    6

Now, let's run an import of the update db.

    >>> items = update_db.getElementsByTagName('item')
    >>> logger = FakeLogger()
    >>> for item in items:
    ...     update_one_cve(item, logger)
    >>> print '\n'.join(logger.messages)
    CVE-1999-0002 created
    Creating new SGI reference for 1999-0002
    Creating new BID reference for 1999-0002
    Creating new XF reference for 1999-0002
    CVE-1999-0003 created
    Creating new CERT reference for 1999-0003
    Creating new SGI reference for 1999-0003
    Creating new XF reference for 1999-0003
    Creating new XF reference for 1999-0003
    CVE-1999-0005 created
    Creating new CERT reference for 1999-0005
    Creating new BID reference for 1999-0005
    CVE-1999-0007 created
    Creating new CERT reference for 1999-0007
    Creating new XF reference for 1999-0007
    CVE-2005-2761 created
    Creating new MISC reference for 2005-2761
    Creating new DEBIAN reference for 2005-2761
    CVE-2005-2762 created
    CVE-2005-2763 created
    CVE-2005-2764 created
    Creating new CERT reference for 1999-0002
    Creating new CIAC reference for 1999-0002
    Creating new NAI reference for 1999-0003
    Creating new SGI reference for 1999-0003
    Creating new BID reference for 1999-0003
    Creating new SUN reference for 1999-0005
    Creating new XF reference for 1999-0005
    CVE-1999-0006 created
    Creating new CERT reference for 1999-0006
    Creating new SGI reference for 1999-0006
    Creating new AUSCERT reference for 1999-0006
    Creating new XF reference for 1999-0006
    Creating new BID reference for 1999-0006
    CVE-1999-0007 updated description
    Creating new SECUNIA reference for 2005-2761
    CVE-2005-2734 updated description
    Removing BID reference for 2005-2734
    Removing BUGTRAQ reference for 2005-2734
    Removing CONFIRM reference for 2005-2734
    Removing SECTRACK reference for 2005-2734
    Removing SECUNIA reference for 2005-2734
    Removing XF reference for 2005-2734
    CVE-2005-2764 updated description
    CVE-2005-2765 created
    Creating new MSKB reference for 2005-2765
    CVE-2005-2766 created
    Creating new BUGTRAQ reference for 2005-2766

Let's make sure we got the new CVE's.

    >>> print Cve.select().count()
    21

And lets make sure the modification time of 2005-2734 was updated, as were
the number of comments.

    >>> c.sync()
    >>> print mod_time < c.datemodified
    True
    >>> print len(c.references)
    0

