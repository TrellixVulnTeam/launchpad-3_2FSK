checkwatches.py
===============

The updating and syncing of bug watches is done by a cronscript. We
can't test it properly, since we don't yet have a mock HTTP server we
can use for testing, so let's just make sure that it doesn't try to
contact any external servers.

    >>> from canonical.database.sqlbase import cursor, sqlvalues
    >>> from canonical.database.constants import UTC_NOW
    >>> cur = cursor()
    >>> cur.execute("UPDATE BugWatch SET lastchecked=%s" %
    ...     sqlvalues(UTC_NOW))
    >>> import transaction
    >>> transaction.commit()

We'll add a bug watch to the Gnu Savannah bug tracker so that
checkwatches will try to get an ExternalBugTracker with which to update
the watch.

    >>> from canonical.config import config
    >>> from canonical.launchpad.interfaces import ILaunchpadCelebrities
    >>> from lp.testing.factory import LaunchpadObjectFactory
    >>> from canonical.testing import LaunchpadZopelessLayer

    >>> LaunchpadZopelessLayer.switchDbUser('launchpad')

    >>> factory = LaunchpadObjectFactory()
    >>> savannah = getUtility(ILaunchpadCelebrities).savannah_tracker
    >>> bug_watch = factory.makeBugWatch(bugtracker=savannah)

    >>> transaction.commit()
    >>> LaunchpadZopelessLayer.switchDbUser(config.checkwatches.dbuser)

    >>> import subprocess
    >>> process = subprocess.Popen(
    ...     ['cronscripts/checkwatches.py', '-v'],
    ...     stdin=subprocess.PIPE, stdout=subprocess.PIPE,
    ...     stderr=subprocess.PIPE)
    >>> (out, err) = process.communicate()
    >>> out
    ''
    >>> process.returncode
    0

    >>> print err
    INFO    creating lockfile
    DEBUG   Using a global batch size of None
    DEBUG   No watches to update on http://bugs.debian.org
    DEBUG   No watches to update on mailto:bugs@example.com
    WARNING ExternalBugtracker for BugTrackerType 'SAVANE' is not known.
    DEBUG   No watches to update on http://bugzilla.gnome.org/bugs
    DEBUG   No watches to update on http://sourceforge.net/
    DEBUG   No watches to update on http://bugzilla.gnome.org/
    DEBUG   No watches to update on https://bugzilla.mozilla.org/
    DEBUG   Skipping updating Ubuntu Bugzilla watches.
    INFO    Time for this run: ... seconds.
    DEBUG   Removing lock file:...
    <BLANKLINE>

OOPSes reported by the checkwatches process are raised using the
CheckWatchesErrorUtility. The errors have 'CW' in their oops prefix
and their type is 'BugWatchUpdateWarning'.

    >>> from lp.bugs.scripts.checkwatches import (
    ...     CheckWatchesErrorUtility)
    >>> error_utility = CheckWatchesErrorUtility()
    >>> report = error_utility.getLastOopsReport()
    >>> report.id
    'OOPS-...TCW...'
    >>> report.type
    'BugWatchUpdateWarning'

    >>> from sys import stdout
    >>> def dump_last_oops():
    ...     error_utility.getLastOopsReport().write(stdout)

    >>> dump_last_oops()
    Oops-Id: OOPS-...TCW...
    Exception-Type: BugWatchUpdateWarning
    Exception-Value: ExternalBugtracker for BugTrackerType 'SAVANE' ...
    Date: ...
    Page-Id:
    Branch: ...
    Revision: ...
    User: None
    URL: None
    Duration: -1
    <BLANKLINE>
    error-explanation=ExternalBugtracker for ... is not known.

We set a default timeout on checkwatches to 30 seconds. In order to test
this, we can monkey-patch urllib2.urlopen so that it always raises a
timeout and call the checkwatches cronscript machinery directly.

First, we create some bug watches to test with:

    >>> from canonical.launchpad.database import BugTracker
    >>> from canonical.launchpad.interfaces import (
    ...     BugTrackerType, IBugSet)
    >>> from lp.bugs.scripts.checkwatches import (
    ...     BugWatchUpdater)
    >>> from canonical.launchpad.interfaces import (
    ...     IPersonSet)
    >>> sample_person = getUtility(IPersonSet).getByEmail(
    ...     'test@canonical.com')

    >>> example_bug_tracker = BugTracker(
    ...     name="example-bugs",
    ...     title="Example.com Roundup",
    ...     bugtrackertype=BugTrackerType.ROUNDUP,
    ...     baseurl="http://bugs.example.com",
    ...     summary="Contains bugs for Example.com",
    ...     contactdetails="foo.bar@example.com",
    ...     owner=sample_person)

    >>> login('test@canonical.com')

    >>> example_bug = getUtility(IBugSet).get(10)
    >>> example_bugwatch = example_bug.addWatch(
    ...     example_bug_tracker, '1',
    ...     getUtility(ILaunchpadCelebrities).janitor)

    >>> login('no-priv@canonical.com')

Next, we monkey-patch urllib2.urlopen so that it always times out.

The timeout will also produce an OOPS report and the OOPS id will be
included in the logged error message. The URL field of the OOPS report
will also be automatically filled from the baseurl OOPS property.

    >>> import socket
    >>> import urllib2
    >>> urlopen = urllib2.urlopen

    >>> transaction.commit()
    >>> def do_not_urlopen(url=None, data=None):
    ...     raise socket.timeout("Connection timed out.")
    >>> try:
    ...     urllib2.urlopen = do_not_urlopen
    ...     updater = BugWatchUpdater(transaction)
    ...     updater._login()
    ...     updater.updateBugTrackers(
    ...         bug_tracker_names=[example_bug_tracker.name])
    ... finally:
    ...     urllib2.urlopen = urlopen
    ERROR...Connection timed out when updating ... (OOPS-...)

    >>> dump_last_oops()
    Oops-Id: OOPS-...TCW...
    Exception-Type: timeout
    Exception-Value: Connection timed out.
    Date: ...
    Page-Id:
    Branch: ...
    Revision: ...
    User: None
    URL: http://bugs.example.com
    Duration: -1
    <BLANKLINE>
    baseurl=http://bugs.example.com
    bugtracker=example-bugs
    error-explanation=Connection timed out ... http://bugs.example.com
    <BLANKLINE>
    <BLANKLINE>
    Traceback (most recent call last):
    ...
    timeout: Connection timed out.

Errors that occur when updating a bug watch are recorded against that
bug watch. The timeout will be recorded against the bug watch we just
created in its last_error_type field.

    >>> from canonical.launchpad.interfaces import BugWatchErrorType
    >>> example_bugwatch.last_error_type == BugWatchErrorType.TIMEOUT
    True

Another error which may occur and which checkwatches is responsible for
handling is UnknownBugTrackerTypeError, which is raised when
checkwatches attempts to instantiate the ExternalBugtracker descendant
for a bugtracker which Launchpad doesn't support.

We can demonstrate this by altering the get_external_bugtracker method
of the externalbugtracker module to ensure that it raises this error.

    >>> from lp.bugs import externalbugtracker
    >>> real_get_external_bugtracker = (
    ...     externalbugtracker.get_external_bugtracker)

    >>> def broken_get_external_bugtracker(bugtracker):
    ...     bugtrackertype = bugtracker.bugtrackertype
    ...     raise externalbugtracker.UnknownBugTrackerTypeError(
    ...         bugtrackertype.name, bugtracker.name)

    >>> login(ANONYMOUS)
    >>> example_bugwatch.lastchecked = None
    >>> try:
    ...     externalbugtracker.get_external_bugtracker = (
    ...         broken_get_external_bugtracker)
    ...     updater = BugWatchUpdater(transaction)
    ...     updater._login()
    ...     updater.updateBugTracker(example_bug_tracker)
    ... finally:
    ...     externalbugtracker.get_external_bugtracker = (
    ...         real_get_external_bugtracker)
    WARNING:...:ExternalBugtracker for BugTrackerType 'ROUNDUP' is not
    known.

The bug watch's last error type field will have been updated to reflect
the error that was raised:

    >>> example_bugwatch.last_error_type.title
    'Unsupported Bugtracker'


Batched Bugwatch Updating
-------------------------

checkwatches.py will only update those bugs that need updating, but
there is a further limit on the amount of bugs which will be updated for
a given ExternalBugTracker in each checkwatches run: the batch size.

We need to add some bug watches again since
BugWatchUpdate.updateBugTracker() automatically rolls back the
transaction if something goes wrong.

    >>> login('test@canonical.com')
    >>> for bug_id in range(1, 10):
    ...     example_bugwatch = example_bug.addWatch(
    ...         example_bug_tracker, str(bug_id),
    ...         getUtility(ILaunchpadCelebrities).janitor)

Since we know how many bugwatches example_bug has we will be able to see
when checkwatches only updates a subset of them.

    >>> example_bug.watches.count()
    9

Since our example bug tracker is a Roundup bug tracker we can
monkey-patch the Roundup ExternalBugTrackerClass in order to set its
batch size. We will also monkey-patch urllib2.urlopen again so that no
requests are actually made.

    >>> from lp.bugs import externalbugtracker
    >>> from canonical.launchpad.scripts import FakeLogger
    >>> updater = BugWatchUpdater(transaction)
    >>> original_log = updater.log
    >>> batch_size = externalbugtracker.Roundup.batch_size
    >>> transaction.commit()
    >>> try:
    ...     updater._login()
    ...     urllib2.urlopen = do_not_urlopen
    ...     externalbugtracker.Roundup.batch_size = 5
    ...     updater.log = FakeLogger()
    ...     updater.updateBugTrackers([example_bug_tracker.name])
    ... finally:
    ...     updater.log = original_log
    ...     externalbugtracker.Roundup.batch_size = batch_size
    ...     urllib2.urlopen = urlopen
    ...     updater._logout()
    DEBUG Using a global batch size of None
    INFO Updating 5 watches for 5 bugs on http://bugs.example.com
    ERROR Connection timed out when updating ... (OOPS-...)


Updating all the watches on a bug tracker
-----------------------------------------

It's possible to update all the watches on a bug tracker using
checkwatches using BugWatchUpdater's updateAllWatches() method.
updateAllWatches() accepts a bug_tracker_name argument because it's
called by the checkwatches script, which doesn't know or care about
IBugTracker and instances thereof.

If we look at our Savannah bug tracker, we'll see that it's got one bug
watch.

    >>> savannah.watches.count()
    1

We'll set the lastchecked time on that Savannah instance to make sure
that it looks as though it has been updated recently

    >>> import pytz
    >>> from datetime import datetime
    >>> login('test@canonical.com')
    >>> for watch in savannah.watches:
    ...     watch.lastchecked = datetime.now(pytz.timezone('UTC'))

So our Savannah instance now has no watches that need checking.

    >>> savannah.getBugWatchesNeedingUpdate(23).count()
    0

However, updateAllWatches() will update every watch, whether they've
been recently checked or not.

We'll create a helper method here, because we want to monkey patch the
BugWatchUpdater's logger.

    >>> def update_all(bug_tracker_name, batch_size=None):
    ...     updater = BugWatchUpdater(transaction)
    ...     updater.log = FakeLogger()
    ...     updater.updateAllWatches(bug_tracker_name, batch_size)

    >>> update_all('savannah', batch_size)
    INFO Resetting 1 bug watches for bug tracker 'savannah'
    INFO Updating 1 watches on bug tracker 'savannah'
    WARNING ExternalBugtracker for BugTrackerType 'SAVANE' is not known.
    INFO 0 watches left to check on bug tracker 'savannah'

We can see that the Savannah bug watch has been updated recently. Also,
its last_error_type field will be set to "Unsupported bug tracker"
since that's the error that was raised during the update.

    >>> for watch in savannah.watches:
    ...     print "%s, %s" % (
    ...         watch.lastchecked is not None, watch.last_error_type.title)
    True, Unsupported Bugtracker

If a bug tracker doesn't have any watches to update, updateAllWatches()
will ignore it.

    >>> login('test@canonical.com')
    >>> empty_tracker = factory.makeBugTracker(
    ...     'http://example.com', BugTrackerType.ROUNDUP)
    >>> update_all(empty_tracker.name)
    INFO Bug tracker 'auto-example.com' doesn't have any watches. Ignoring.

Similarly, updateAllWatches() will ignore the bug tracker if it doesn't exist.
ignore it.

    >>> update_all('nah-this-wont-work')
    INFO Bug tracker 'nah-this-wont-work' doesn't exist. Ignoring.

The batch_size parameter is set, the watches will be updated in batches.
We'll add some more watches in order to demonstrate this.

    >>> transaction.commit()
    >>> LaunchpadZopelessLayer.switchDbUser('launchpad')
    >>> for i in range(5):
    ...     bug_watch = factory.makeBugWatch(bugtracker=empty_tracker)
    >>> transaction.commit()
    >>> LaunchpadZopelessLayer.switchDbUser(config.checkwatches.dbuser)

    >>> empty_tracker.watches.count()
    5

With a batch_size of 1, only one bug watch will be updated at once.
We'll use a custom BugWatchUpdater to make sure that no connections are
made.

    >>> class NonConnectingUpdater(BugWatchUpdater):
    ...
    ...     def updateBugTracker(self, bug_tracker, batch_size):
    ...         # Update as many watches as the batch size says.
    ...         watches_to_update = (
    ...             bug_tracker.getBugWatchesNeedingUpdate(23)[:batch_size])
    ...
    ...         for watch in watches_to_update:
    ...             watch.lastchecked = datetime.now(pytz.timezone('UTC'))

    >>> non_connecting_updater = NonConnectingUpdater(transaction)
    >>> non_connecting_updater.log = FakeLogger()
    >>> non_connecting_updater.updateAllWatches(
    ...     empty_tracker.name, 1)
    INFO Resetting 5 bug watches for bug tracker 'auto-example.com'
    INFO Updating 5 watches on bug tracker 'auto-example.com'
    INFO 4 watches left to check on bug tracker 'auto-example.com'
    INFO 3 watches left to check on bug tracker 'auto-example.com'
    INFO 2 watches left to check on bug tracker 'auto-example.com'
    INFO 1 watches left to check on bug tracker 'auto-example.com'
    INFO 0 watches left to check on bug tracker 'auto-example.com'


Updating all watches from the command line
------------------------------------------

In order to update all bug watches from the checkwatches command line,
a user needs to pass the '--all' option to the checkwatches cron script.

    >>> import subprocess
    >>> process = subprocess.Popen(
    ...     ['cronscripts/checkwatches.py', '-vvt', 'savannah', '--all'],
    ...     stdin=subprocess.PIPE, stdout=subprocess.PIPE,
    ...     stderr=subprocess.PIPE)
    >>> (out, err) = process.communicate()
    >>> out
    ''

    >>> process.returncode
    0

    >>> print err
    INFO    creating lockfile
    INFO    Resetting 1 bug watches for bug tracker 'savannah'
    INFO    Updating 1 watches on bug tracker 'savannah'
    WARNING ExternalBugtracker for BugTrackerType 'SAVANE' is not known.
    INFO    0 watches left to check on bug tracker 'savannah'
    INFO    Time for this run...
    DEBUG   Removing lock file...
    <BLANKLINE>

