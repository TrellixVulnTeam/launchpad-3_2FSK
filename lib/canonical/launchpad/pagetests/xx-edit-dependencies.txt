= Editing PPA dependencies =

The PPA 'Edit dependency' view allows users to remove or add
dependencies to their PPAs via the web UI.

Only the owner of the PPA and Launchpad administrators may access this page.

Anonymous and an ordinary user cannot access Celso's PPA interface to
edit dependencies, even if they try the URL directly.

    >>> anon_browser.open('http://launchpad.dev/~cprov/+archive')
    >>> anon_browser.getLink('Edit dependencies').click()
    Traceback (most recent call last):
    ...
    LinkNotFoundError

    >>> anon_browser.open(
    ...     'http://launchpad.dev/~cprov/+archive/+edit-dependencies')
    Traceback (most recent call last):
    ...
    Unauthorized: ..., 'launchpad.Edit')

    >>> user_browser.open('http://launchpad.dev/~cprov/+archive')
    >>> user_browser.getLink('Edit dependencies').click()
    Traceback (most recent call last):
    ...
    LinkNotFoundError

    >>> user_browser.open(
    ...    'http://launchpad.dev/~cprov/+archive/+edit-dependencies')
    Traceback (most recent call last):
    ...
    Unauthorized: ..., 'launchpad.Edit')

Only Celso and Foo bar can access the 'Edit dependencies' page for
Celso's PPA.

    >>> cprov_browser = setupBrowser(
    ...     auth="Basic celso.providelo@canonical.com:cprov")
    >>> cprov_browser.open('http://launchpad.dev/~cprov/+archive')
    >>> cprov_browser.getLink('Edit dependencies').click()
    >>> cprov_browser.title
    'Edit PPA for Celso Providelo dependencies'

    >>> admin_browser.open('http://launchpad.dev/~cprov/+archive')
    >>> admin_browser.getLink('Edit dependencies').click()
    >>> admin_browser.title
    'Edit PPA for Celso Providelo dependencies'

Once accessed the page provides a way to removed recorded dependencies
via POST form.

    >>> def print_ppa_dependencies(contents):
    ...     empty_dep = find_tag_by_id(contents, 'empty-dependencies')
    ...     if empty_dep is not None:
    ...         print extract_text(empty_dep)
    ...     dependencies = find_tags_by_class(contents, 'ppa_dependency_row')
    ...     for dep in dependencies:
    ...         print extract_text(dep)

When the 'Edit dependencies' page is loaded it will list all dependencies.

    >>> print_ppa_dependencies(admin_browser.contents)
    This PPA does not contain any dependency.


== Adding dependencies ==

As we can see Celso's PPA does not contain any dependency, let's try
to add some.

The adding dependency input offers a interface to look for PPAs based
on the PPA fti and/or the PPA owner fti via a IHugeVocabulary
popup. A valid term is the owner username.

Empty or unknown given terms result in a error.

    >>> admin_browser.getControl(
    ...    name='field.dependency_candidate').value = ''
    >>> admin_browser.getControl("Add Dependency").click()
    >>> messages = get_feedback_messages(admin_browser.contents)
    >>> for msg in messages:
    ...     print msg
    There is 1 error.
    Choose one dependency to add.

    >>> admin_browser.getControl(
    ...    name='field.dependency_candidate').value = 'whatever'
    >>> admin_browser.getControl("Add Dependency").click()
    >>> messages = get_feedback_messages(admin_browser.contents)
    >>> for msg in messages:
    ...     print msg
    There is 1 error.
    Choose one dependency to add.

When a 'valid' PPA is chosen the dependency is added, a notification
is rendered on top of the page and the list of dependencies available
for removal is updated.

    >>> admin_browser.getControl(
    ...    name='field.dependency_candidate').value = 'sabdfl'
    >>> admin_browser.getControl("Add Dependency").click()
    >>> messages = get_feedback_messages(admin_browser.contents)
    >>> for msg in messages:
    ...     print msg
    Dependency added: PPA for Mark Shuttleworth

    >>> print_ppa_dependencies(admin_browser.contents)
    PPA for Mark Shuttleworth

Trying to add a already recored dependency result is a error.

    >>> admin_browser.getControl(
    ...    name='field.dependency_candidate').value = 'sabdfl'
    >>> admin_browser.getControl("Add Dependency").click()
    >>> messages = get_feedback_messages(admin_browser.contents)
    >>> for msg in messages:
    ...     print msg
    There is 1 error.
    This dependency is already recorded.

If it's a new dependency everything is fine.

    >>> admin_browser.getControl(
    ...    name='field.dependency_candidate').value = 'no-priv'
    >>> admin_browser.getControl("Add Dependency").click()
    >>> messages = get_feedback_messages(admin_browser.contents)
    >>> for msg in messages:
    ...     print msg
    Dependency added: PPA for No Privileges Person

Now Celso's PPA should list Mark's and No-Priv's PPA as its dependencies.

    >>> admin_browser.reload()
    >>> print_ppa_dependencies(admin_browser.contents)
    PPA for Mark Shuttleworth
    PPA for No Privileges Person

The dependencies are also listed in the PPA overview 'sources.list'
widget.

    >>> anon_browser.open('http://launchpad.dev/~cprov/+archive')
    >>> results = find_tag_by_id(
    ...     anon_browser.contents, 'sources-list-entries')
    >>> text = extract_text(results)
    >>> print text
    deb http://ppa.launchpad.dev/cprov/ubuntu breezy-autotest main
    deb http://ppa.launchpad.dev/sabdfl/ubuntu breezy-autotest main
    deb http://ppa.launchpad.dev/no-priv/ubuntu breezy-autotest main
    deb-src http://ppa.launchpad.dev/cprov/ubuntu breezy-autotest main
    deb-src http://ppa.launchpad.dev/sabdfl/ubuntu breezy-autotest main
    deb-src http://ppa.launchpad.dev/no-priv/ubuntu breezy-autotest main


== Removing dependencies ==

One or more dependencies can be removed via this page, they are
presented as a MultiCheckboxWidget.

If no dependency is selected and the dependency removal is requested
an error is raised.

    >>> admin_browser.getControl("Remove Dependencies").click()
    >>> messages = get_feedback_messages(admin_browser.contents)
    >>> for msg in messages:
    ...     print msg
    There is 1 error.
    No dependencies selected.

    >>> print_ppa_dependencies(admin_browser.contents)
    PPA for Mark Shuttleworth
    PPA for No Privileges Person

On successful removals, a notification is rendered and the list of
dependencies is refreshed.

    >>> admin_browser.getControl(
    ...    name='field.selected_dependencies').value = ['sabdfl', 'no-priv']
    >>> admin_browser.getControl("Remove Dependencies").click()
    >>> messages = get_feedback_messages(admin_browser.contents)
    >>> for msg in messages:
    ...     print msg
    Dependencies removed:
    PPA for Mark Shuttleworth
    PPA for No Privileges Person

    >>> print_ppa_dependencies(admin_browser.contents)
    This PPA does not contain any dependency.

And the PPA overview 'sources.list' widget is also up to date.

    >>> anon_browser.open('http://launchpad.dev/~cprov/+archive')
    >>> results = find_tag_by_id(
    ...     anon_browser.contents, 'sources-list-entries')
    >>> text = extract_text(results)
    >>> print text
    deb http://ppa.launchpad.dev/cprov/ubuntu breezy-autotest main
    deb-src http://ppa.launchpad.dev/cprov/ubuntu breezy-autotest main
