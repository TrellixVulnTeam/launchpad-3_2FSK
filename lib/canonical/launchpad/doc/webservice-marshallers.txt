= LAZR's field marshallers =

LAZR defines an interface for converting between the values that
come in on an HTTP request, and the object values appropriate for schema
fields. This is similar to Zope's widget interface, but much smaller.

To test the various marshallers we create a dummy request and
application root.

    >>> from canonical.launchpad.webapp.servers import WebServiceTestRequest
    >>> from canonical.launchpad.webapp.servers import WebServicePublication
    >>> request = WebServiceTestRequest(method='GET')
    >>> request.setPublication(WebServicePublication(None))
    >>> login(ANONYMOUS, request)
    >>> request.processInputs()

    >>> from canonical.launchpad.systemhomes import WebServiceApplication
    >>> root = WebServiceApplication()
    >>> from canonical.launchpad.interfaces import IOpenLaunchBag
    >>> getUtility(IOpenLaunchBag).add(root)


== IFieldMarshaller and SimpleFieldMarshaller ==

There is a SimpleFieldMarshaller class that provides a good base to
implement that interface.

    >>> from zope.interface.verify import verifyObject
    >>> from canonical.lazr.interfaces import IFieldMarshaller
    >>> from canonical.lazr.rest import SimpleFieldMarshaller
    >>> from zope.schema import Text

    >>> field = Text(__name__='field_name')
    >>> marshaller = SimpleFieldMarshaller(field, request)
    >>> verifyObject(IFieldMarshaller, marshaller)
    True


=== representation_name ===

The representation_name attribute is used to retrieve the name under
which the field should be stored in the JSON representation. In the
simple case, it's the same name than the field.

    >>> marshaller.representation_name
    'field_name'


=== marshall_from_json_data() ===

The marshall_from_json_data() method is used during PUT and PATCH
requests to transform the value provided in the JSON representation to
a value the underlying schema field. In the simple case, the value is
returned unchanged.

    >>> marshaller.marshall_from_json_data("foo")
    'foo'
    >>> marshaller.marshall_from_json_data(4)
    4
    >>> marshaller.marshall_from_json_data(u"unicode\u2122")
    u'unicode\u2122'
    >>> marshaller.marshall_from_json_data("")
    ''
    >>> print marshaller.marshall_from_json_data(None)
    None


== marshall_from_request() ===

The marshall_from_request() method is used during operation invocation
to transform a value submitted via the query string or form-encoded POST
data into a value the will be accepted by the underlying schema field.

SimpleFieldMarshaller tries first to parse the value as a JSON-encoded
string, the resulting value is passed on to marshall_from_json_data().

    >>> print marshaller.marshall_from_request("null")
    None
    >>> marshaller.marshall_from_request("true")
    True
    >>> marshaller.marshall_from_request("false")
    False
    >>> marshaller.marshall_from_request('["True", "False"]')
    [u'True', u'False']
    >>> marshaller.marshall_from_request("1")
    1
    >>> marshaller.marshall_from_request("-10.5")
    -10.5
    >>> marshaller.marshall_from_request('"a string"')
    u'a string'
    >>> marshaller.marshall_from_request('"false"')
    u'false'
    >>> marshaller.marshall_from_request('"null"')
    u'null'

Invalid JSON-encoded strings are interpreted as string literals and
passed on directly to marshall_from_json_data(). That's for the
convenience of web clients, they don't need to encode string values in
quotes, or can pass lists using multiple key-value pairs.

    >>> marshaller.marshall_from_request(u"a string")
    u'a string'
    >>> marshaller.marshall_from_request('False')
    'False'
    >>> marshaller.marshall_from_request("")
    ''
    >>> marshaller.marshall_from_request(['value1', 'value2'])
    ['value1', 'value2']


=== unmarshall() ===

The unmarshall() method is used to convert the field's value to a value
that can be serialized to JSON as part of an entry representation.  The
first parameter is the entry that the value is part of (for fields that
will transform the value into a URL for example), the second on is the
value to convert.  In the simple case, the value is returned unchanged.

    >>> marshaller.unmarshall(None, 'foo')
    'foo'
    >>> print marshaller.unmarshall(None, None)
    None


== Basic types marshallers ==

=== Bool ===

The marshaller for a Bool field checks that the JSON value is either
True or False. A ValueError is raised when its not the case.

    >>> from zope.component import getMultiAdapter
    >>> from zope.schema import Bool
    >>> field = Bool()
    >>> marshaller = getMultiAdapter((field, request), IFieldMarshaller)
    >>> verifyObject(IFieldMarshaller, marshaller)
    True

    >>> marshaller.marshall_from_json_data(True)
    True
    >>> marshaller.marshall_from_json_data(False)
    False
    >>> marshaller.marshall_from_json_data("true")
    Traceback (most recent call last):
      ...
    ValueError: not a boolean: 'true'
    >>> marshaller.marshall_from_json_data(1)
    Traceback (most recent call last):
      ...
    ValueError: not a boolean: 1

None is passed through though.

    >>> print marshaller.marshall_from_json_data(None)
    None

Booleans are encoded using the standard JSON representation of 'true' or
'false'.

    >>> marshaller.marshall_from_request(u"true")
    True
    >>> marshaller.marshall_from_request(u"false")
    False

    >>> marshaller.marshall_from_request('True')
    Traceback (most recent call last):
      ...
    ValueError: not a boolean: 'True'


=== Int ===

The marshaller for an Int field checks that the JSON value is an
integer. A ValueError is raised when its not the case.

    >>> from zope.schema import Int
    >>> field = Int()
    >>> marshaller = getMultiAdapter((field, request), IFieldMarshaller)
    >>> verifyObject(IFieldMarshaller, marshaller)
    True

    >>> marshaller.marshall_from_json_data(-10)
    -10
    >>> marshaller.marshall_from_json_data("-10")
    Traceback (most recent call last):
      ...
    ValueError: not an integer: '-10'

None is passed through though.

    >>> print marshaller.marshall_from_json_data(None)
    None

Integers are encoded using strings when in a request.

    >>> marshaller.marshall_from_request("4")
    4
    >>> marshaller.marshall_from_request(u"4")
    4


=== Float ===

The marshaller for a Float field checks that the JSON value is indeed a
float.  A ValueError is raised when its not the case.

    >>> from zope.schema import Float
    >>> field = Float()
    >>> marshaller = getMultiAdapter((field, request), IFieldMarshaller)
    >>> verifyObject(IFieldMarshaller, marshaller)
    True

    >>> marshaller.marshall_from_json_data(1.0)
    1.0
    >>> marshaller.marshall_from_json_data(-1.0)
    -1.0
    >>> marshaller.marshall_from_json_data("true")
    Traceback (most recent call last):
      ...
    ValueError: not a float: 'true'

None is passed through though.

    >>> print marshaller.marshall_from_json_data(None)
    None

And integers are automatically converted to a float.

    >>> marshaller.marshall_from_json_data(1)
    1.0

Floats are encoded using the standard JSON representation.

    >>> marshaller.marshall_from_request(u"1.2")
    1.2
    >>> marshaller.marshall_from_request(u"-1.2")
    -1.2
    >>> marshaller.marshall_from_request(u"-1")
    -1.0

    >>> marshaller.marshall_from_request('True')
    Traceback (most recent call last):
      ...
    ValueError: not a float: 'True'


=== Text ===

The marshaller for IText field checks that the value is a unicode
string. A ValueError is raised when that's not the case.

    >>> from zope.schema import Text
    >>> field = Text()
    >>> marshaller = getMultiAdapter((field, request), IFieldMarshaller)
    >>> verifyObject(IFieldMarshaller, marshaller)
    True

    >>> marshaller.marshall_from_json_data(u"Test")
    u'Test'
    >>> marshaller.marshall_from_json_data(1.0)
    Traceback (most recent call last):
      ...
    ValueError: not a unicode string: 1.0
    >>> marshaller.marshall_from_json_data('Test')
    Traceback (most recent call last):
      ...
    ValueError: not a unicode string: 'Test'

None is passed through though.

    >>> print marshaller.marshall_from_json_data(None)
    None

When coming from the request, everything is interpreted as a unicode
string:

    >>> marshaller.marshall_from_request('a string')
    u'a string'
    >>> marshaller.marshall_from_request(['a', 'b'])
    u"['a', 'b']"
    >>> marshaller.marshall_from_request('true')
    u'True'
    >>> marshaller.marshall_from_request('')
    u''

Except that 'null' still returns None.

    >>> print marshaller.marshall_from_request('null')
    None


=== Bytes ===

Since there is no way to represent a bytes string in JSON, all strings
are converted to a byte string using UTF-8 encoding. If the value isn't
a string, a ValueError is raised.

    >>> from zope.schema import Bytes
    >>> field = Bytes(__name__='data')
    >>> marshaller = getMultiAdapter((field, request), IFieldMarshaller)
    >>> verifyObject(IFieldMarshaller, marshaller)
    True

    >>> marshaller.marshall_from_json_data(u"Test")
    'Test'
    >>> marshaller.marshall_from_json_data(u'int\xe9ressant')
    'int\xc3\xa9ressant'
    >>> marshaller.marshall_from_json_data(1.0)
    Traceback (most recent call last):
      ...
    ValueError: not a string: 1.0

Again, except for None which is passed through.

    >>> print marshaller.marshall_from_json_data(None)
    None

When coming over the request, the value is also converted into a UTF-8
encoded string.

    >>> marshaller.marshall_from_request(u"Test")
    'Test'
    >>> marshaller.marshall_from_request(u'int\xe9ressant')
    'int\xc3\xa9ressant'
    >>> marshaller.marshall_from_request('1.0')
    '1.0'

But again, None is returned as is.

    >>> print marshaller.marshall_from_request('null')
    None

Since multipart/form-data can be used to upload data, file-like objects
are read.

    >>> from cStringIO import StringIO
    >>> marshaller.marshall_from_request(StringIO('A line of data'))
    'A line of data'

Bytes field used in an entry are stored in the librarian, so their
representation name states that it's a link.

    >>> marshaller.representation_name
    'data_link'

And the unmarshall() method returns a link that will serve the file.

    >>> from canonical.lazr.rest import EntryResource
    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> from zope.component import getUtility
    >>> entry_resource = EntryResource(
    ...     getUtility(IPersonSet).getByName('name16'), request)

(The value would be the BytesStorage instance used to store the
content, but it's not needed.)

    >>> marshaller.unmarshall(entry_resource, None)
    u'http://.../~name16/data'


== Choice marshallers ==

The marshaller for a Choice is chosen based on the Choice's
vocabulary.

    >>> from zope.schema import Choice


=== Choice for IVocabularyTokenized ===

The default marshaller will use the vocabulary getTermByToken to
retrieve the value to use. It raise an error if the value isn't in the
vocabulary.

    >>> field = Choice(__name__='simple', values=[10, 'a value', True])
    >>> marshaller = getMultiAdapter((field, request), IFieldMarshaller)
    >>> verifyObject(IFieldMarshaller, marshaller)
    True
    >>> marshaller.marshall_from_json_data(10)
    10
    >>> marshaller.marshall_from_json_data("a value")
    'a value'
    >>> marshaller.marshall_from_json_data(True)
    True
    >>> marshaller.marshall_from_request('true')
    True
    >>> marshaller.marshall_from_request('a value')
    'a value'
    >>> marshaller.marshall_from_request('10')
    10

    >>> marshaller.marshall_from_json_data('100')
    Traceback (most recent call last):
      ...
    ValueError: '100' isn't a valid token

None is always returned unchanged.

    >>> print marshaller.marshall_from_json_data(None)
    None


=== Choice of EnumeratedTypes ===

The JSON representation of the enumerated value is its title.  A string
that corresponds to one of the values is marshalled to the appropriate
value. A string that doesn't correspond to any enumerated value results
in a helpful ValueError.

    >>> from canonical.launchpad.interfaces import BugTaskStatus
    >>> field = Choice(vocabulary=BugTaskStatus)
    >>> marshaller = getMultiAdapter((field, request), IFieldMarshaller)
    >>> verifyObject(IFieldMarshaller, marshaller)
    True

    >>> marshaller.marshall_from_json_data("Triaged")
    <DBItem BugTaskStatus.TRIAGED...>

    >>> marshaller.marshall_from_json_data("NoSuchStatus")
    Traceback (most recent call last):
    ...
    ValueError: Invalid value "NoSuchStatus". Acceptable values are: ...

    >>> marshaller.marshall_from_json_data("triaged")
    Traceback (most recent call last):
    ...
    ValueError: Invalid value "triaged". Acceptable values are: ...

None is returned unchanged:

    >>> print marshaller.marshall_from_json_data(None)
    None


=== Choice of SQLObjectVocabularyBase ===

For vocabularies based on SQLObjectVocabularyBase, the values are
interpreted as URLs referencing objects on the web service. If the given
string is a URL corresponding to a vocabulary item, the marshaller
returns that item. Otherwise it raises a ValueError.

    # Bind the field, to resolve the vocabulary name.
    >>> field = Choice(__name__='some_person', vocabulary='ValidPersonOrTeam')
    >>> field = field.bind(None)
    >>> marshaller = getMultiAdapter((field, request), IFieldMarshaller)
    >>> verifyObject(IFieldMarshaller, marshaller)
    True

    >>> from canonical.launchpad.interfaces import IPerson
    >>> person = marshaller.marshall_from_request(
    ...     "http://api.launchpad.dev/beta/~salgado")
    >>> IPerson.providedBy(person)
    True
    >>> person.name
    u'salgado'

    >>> from canonical.launchpad.interfaces import IPerson
    >>> ubuntu_team = marshaller.marshall_from_json_data(
    ...     "http://api.launchpad.dev/beta/~ubuntu-team")
    >>> ubuntu_team.name
    u'ubuntu-team'

    >>> marshaller.marshall_from_request(
    ...     "http://api.launchpad.dev/beta/~nosuchperson")
    Traceback (most recent call last):
    ...
    ValueError: No such object "http://api.launchpad.dev/beta/~nosuchperson".

    >>> marshaller.marshall_from_json_data("salgado")
    Traceback (most recent call last):
    ...
    ValueError: No such object "salgado".

Instead of unmarshall() returning the Person object (which
wouldn't look nice in a JSON representation), this marshaller returns
the URL to that object.

    >>> person_resource = EntryResource(person, request)

    >>> marshaller.unmarshall(person_resource, person)
    u'http://.../~salgado'

This marshaller also appends '_link' to the representation name of
this field, so that clients can know this is a link to another
resource and not a random string.

    >>> marshaller.representation_name
    'some_person_link'


== Collections ==

The most complicated kind of marshaller is one that manages a
collection of objects associated with some other object. The generic
collection marshaller will take care of marshalling to the proper
collection type, and of marshalling the individual items using the
marshaller for its value_type.

    >>> from zope.schema import List, Tuple, Set
    >>> list_of_strings_field = List(value_type=Text())
    >>> tuple_of_ints_field = Tuple(value_type=Int())
    >>> set_of_choices_field = Set(
    ...  value_type=Choice(vocabulary='ValidPersonOrTeam')).bind(None)

    >>> list_marshaller = getMultiAdapter(
    ...     (list_of_strings_field, request), IFieldMarshaller)
    >>> verifyObject(IFieldMarshaller, list_marshaller)
    True

    >>> tuple_marshaller = getMultiAdapter(
    ...     (tuple_of_ints_field, request), IFieldMarshaller)
    >>> verifyObject(IFieldMarshaller, tuple_marshaller)
    True

    >>> set_marshaller = getMultiAdapter(
    ...     (set_of_choices_field, request), IFieldMarshaller)
    >>> verifyObject(IFieldMarshaller, set_marshaller)
    True

The only JSON representation for the collection itself is a list, since
that's the only sequence type available in JSON. Anything else will
raise a ValueError.

    >>> list_marshaller.marshall_from_json_data([u"Test"])
    [u'Test']

    >>> list_marshaller.marshall_from_json_data(u"Test")
    Traceback (most recent call last):
      ...
    ValueError: not a list: u'Test'

None is passed through though.

    >>> print list_marshaller.marshall_from_json_data(None)
    None

ValueError is also raised if one of the value in the list doesn't
validate against the more specific marshaller.

    >>> list_marshaller.marshall_from_json_data([u'Text', 1, 2])
    Traceback (most recent call last):
      ...
    ValueError: not a unicode string: 1

The return type is correctly typed to the concrete collection.

    >>> tuple_marshaller.marshall_from_json_data([1, 2, 3])
    (1, 2, 3)
    >>> set_marshaller.marshall_from_json_data(
    ...     ['http://api.launchpad.dev/beta/~salgado',
    ...      'http://api.launchpad.dev/beta/~ubuntu-team'])
    Set([<Person...>, <Person...>])

When coming from the request, either a list or a JSON-encoded
representation is accepted. The normal request rules for the underlying
are then followed.

    >>> list_marshaller.marshall_from_request([u'1', u'2'])
    [u'1', u'2']
    >>> list_marshaller.marshall_from_request('["1", "2"]')
    [u'1', u'2']

    >>> tuple_marshaller.marshall_from_request([u'1', u'2'])
    (1, 2)

Except that 'null' still returns None.

    >>> print list_marshaller.marshall_from_request('null')
    None

Also, as a convenience for web client, not to have to JSON encode list
of one value, if the input value isn't a list. The single value will be
interpreted as the sole element of a list.

    >>> tuple_marshaller.marshall_from_request('1')
    (1,)

    >>> list_marshaller.marshall_from_request('test')
    [u'test']

The unmarshall() method will return a list containing the unmarshalled
representation of each its members.

    >>> sorted(set_marshaller.unmarshall(None, set([person, ubuntu_team])))
    [u'http://.../~salgado', u'http://.../~ubuntu-team']


== CollectionField ==

Since CollectionField are really a list of references to other objects,
and they are exposed using a dedicated ColletionResource, the marshaller
for this kind of field is simpler.  Let's do an example with a
collection of IPerson objects associated with some IPerson. (This
might be the list of teams in which a person has a membership, or
something like that.)

    >>> from zope.schema import Object
    >>> from canonical.lazr.rest.schema import CollectionField
    >>> field = CollectionField(
    ...     __name__='person_memberships', value_type=Object(schema=IPerson))
    >>> marshaller = getMultiAdapter((field, request), IFieldMarshaller)
    >>> verifyObject(IFieldMarshaller, marshaller)
    True

Instead of serving the actual collection, collection marshallers serve
a URL to that collection.

    >>> marshaller.unmarshall(person_resource, ["member 1", "member 2"])
    u'http://.../~salgado/person_memberships'

They also annotate the representation name of the field, so that
clients know this is a link to a collection-type resource.

    >>> marshaller.representation_name
    'person_memberships_collection_link'
