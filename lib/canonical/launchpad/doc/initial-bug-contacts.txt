Package Bug Contact
===================

The package bug contact is zero, one or more people or teams that get
explicitly Cc'd to all public bugs filed on a package.

The package bug contacts are obtained from looking at the
PackageBugContact table.

The list of package bug contacts are accessed through the
IDistributionSourcePackage.bugcontacts attribute. When there are no
contacts associated with a package, an empty list is returned:

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.interfaces import (
    ...     IDistributionSet, IDistributionSourcePackage)

    >>> debian = getUtility(IDistributionSet).getByName("debian")
    >>> debian_firefox = debian.getSourcePackage("mozilla-firefox")

    >>> debian_firefox.bugcontacts
    []

Adding a package bug contact is done with the
IDistributionSourcePackage.addBugContact method. You have to be logged
in to call this method:

    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> sample_person = getUtility(IPersonSet).get(12)

    >>> debian_firefox.addBugContact(sample_person)
    Traceback (most recent call last):
      ...
    Unauthorized: ...

Let's login then to add a bugcontact:

    >>> from canonical.launchpad.ftests import login
    >>> login("foo.bar@canonical.com")

    >>> debian_firefox.addBugContact(sample_person)
    >>> [pbc.bugcontact.name for pbc in debian_firefox.bugcontacts]
    [u'name12']

Trying to add a bug contact to a package when that person or team is
already one of the bug contacts on that package will raise a
DuplicateBugContactError.

    >>> debian_firefox.addBugContact(sample_person)
    Traceback (most recent call last):
      ...
    DuplicateBugContactError: ...

Let's add an ITeam as one of the bug contacts:

    >>> ubuntu_team = getUtility(IPersonSet).get(17)
    >>> debian_firefox.addBugContact(ubuntu_team)

    >>> sorted([pbc.bugcontact.name for pbc in debian_firefox.bugcontacts])
    [u'name12', u'name17']

To remove a bug contact, use IDistributionSourcePackage.removeBugContact:

    >>> debian_firefox.removeBugContact(sample_person)
    >>> sorted([pbc.bugcontact.id for pbc in debian_firefox.bugcontacts])
    [17]

Trying to remove a bug contact that doesn't exist on a source package raises a
DeleteBugContactError.

    >>> foobar = getUtility(IPersonSet).get(16)
    >>> print foobar.name
    name16
    >>> debian_firefox.removeBugContact(foobar)
    Traceback (most recent call last):
      ...
    DeleteBugContactError: ...

To find out if an IPerson or ITeam is bug contact, use
IDistributionSourcePackage.isBugContact. For pragmatic reasons (in particular,
it makes the implementation of some of IDistributionSourcePackage's other
methods simpler) IDistributionSourcePackage.isBugContact will return either the
appropriate PackageBugContact record or False:

    >>> debian_firefox.isBugContact(ubuntu_team)
    <PackageBugContact ...>
    >>> debian_firefox.isBugContact(foobar)
    False

Package Bug Contacts and Bug Tasks
----------------------------------

Often a bug gets reported on package foo, when it should have been
reported on bar. When a user, likely a bug triager or developer, changes
the package, the bug contacts for the previous package get unsubscribed
from the bug report, and the bug contacts for the new package get
subscribed.

To demonstrate, let's change the source package for bug #1 in
mozilla-firefox in Ubuntu to be pmount in Ubuntu, and see how the
subscribers list changes.

    >>> ubuntu = getUtility(IDistributionSet).getByName("ubuntu")

    >>> ubuntu_firefox = ubuntu.getSourcePackage("mozilla-firefox")
    >>> ubuntu_
