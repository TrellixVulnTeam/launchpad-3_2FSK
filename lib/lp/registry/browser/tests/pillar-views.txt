Pillar views
============

Pillar views are used to display IPillar objects link distributions and
products in a consistent fashion.

The +get-involved presentation creates a portlet of links to encourage
project involvement. Only links to official applications are rendered.


    >>> distribution = factory.makeDistribution(name='umbra')
    >>> login_person(distribution.owner)
    >>> view = create_view(
    ...     distribution, '+get-involved', principal=distribution.owner)

The has_involvement property is used to determine if the portlet should
be rendered. The newly created pillar does not use any launchpad applications.

    >>> view.has_involvement
    False

    >>> print view.render()
    <BLANKLINE>

Pillars that do use launchpad applications have an involvement menu.

    >>> distribution.official_answers = True
    >>> distribution.official_malone = True
    >>> view = create_view(
    ...     distribution, '+get-involved', principal=distribution.owner)
    >>> view.has_involvement
    True

    >>> view.official_malone
    True
    >>> view.official_answers
    True
    >>> view.official_rosetta
    False
    >>> view.official_blueprints
    False
    >>> view.official_codehosting
    False

The view provides a list of enabled links that is rendered by the template.

    >>> for link in view.enabled_links:
    ...     print link.name
    report_bug ask_question

    >>> print view.render()
    <div id="involvement" class="portlet involvement">
      <h2>Get Involved</h2>
      <ul>
        <li>
          <a href="..." class="...bugs">Report a bug</a>
        </li>
        <li>
          <a href="..." class="...answers">Ask a question</a>
        </li>
      </ul>
    </div>

Products are are supported.

    >>> product = factory.makeProduct(name='bread')
    >>> login_person(product.owner)
    >>> product.official_blueprints = True
    >>> view = create_view(product, '+get-involved')
    >>> view.official_blueprints
    True

Project are supported too, but they only display the applications used by
their products.

    >>> project_group = factory.makeProject(name='box', owner=product.owner)
    >>> product.project = project_group

    >>> view = create_view(project_group, '+get-involved')
    >>> view.official_blueprints
    True

Projects cannot make links to register a branch, so official_code is always
false.

    >>> product.official_codehosting = True
    >>> view = create_view(product, '+get-involved')
    >>> view.official_codehosting
    True

    >>> view = create_view(project_group, '+get-involved')
    >>> view.official_codehosting
    False

DistroSeries can use this view. The distribution is used to set the links.

    >>> series = factory.makeDistroRelease(distribution=distribution)
    >>> view = create_view(series, '+get-involved')
    >>> for link in view.enabled_links:
    ...     print link.name
    report_bug ask_question

ProductSeries can use this view. The product is used to set the links.

    >>> series = factory.makeProductSeries(product=product)
    >>> view = create_view(series, '+get-involved')
    >>> for link in view.enabled_links:
    ...     print link.name
    submit_code register_blueprint

DistributionSourcePackages can use this view. The distribution is used to
set the links.  Despite the fact that the distribution uses blueprints,
the blueprint link is not enabled for DistributionSourcePackages.

    >>> login_person(distribution.owner)
    >>> distribution.official_blueprints = True
    >>> package = factory.makeDistributionSourcePackage(
    ...     distribution=distribution)
    >>> view = create_view(package, '+get-involved')
    >>> for link in view.enabled_links:
    ...     print link.name
    report_bug ask_question


Involvement links
-----------------

The pillar involvement view uses the InvolvedMenu when rendering links:

    >>> from operator import attrgetter
    >>> from canonical.launchpad.webapp.tales import MenuAPI

    >>> view = create_view(product, '+get-involved')
    >>> menuapi = MenuAPI(view)
    >>> for link in sorted(
    ...     menuapi.navigation.values(), key=attrgetter('sort_key')):
    ...     print link.url
    http://bugs.launchpad.dev/bread/+filebug
    http://answers.launchpad.dev/bread/+addquestion
    http://translations.launchpad.dev/bread
    http://code.launchpad.dev/bread/+addbranch
    http://blueprints.launchpad.dev/bread/+addspec
