
Bug Comments
============

The BugComment class is a content class assembled by browser code; it
abstracts a single bug comment, has an index, and can be rendered
independently.

    >>> from zope.component import getMultiAdapter
    >>> from canonical.launchpad.interfaces import IBugSet
    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest

Handling of the bug's first comment
-----------------------------------

The bug's description starts out identical to its first comment. In the course
of a bug's life, the description may be updated, but the first comment stays
intact. To improve readability, we never display the first comment in the bug
page, and this is why getBugCommentsForDisplay doesn't return it:

    >>> bug_ten = getUtility(IBugSet).get(10)
    >>> bug_ten_bugtask = bug_ten.bugtasks[0]

    >>> bug_view = getMultiAdapter(
    ...     (bug_ten_bugtask, LaunchpadTestRequest()), name='+index')
    >>> bug_view.initialize()
    >>> rendered_comments = bug_view.getBugCommentsForDisplay()
    >>> [bug_comment.index for bug_comment in rendered_comments]
    [1]

In the case of bug 10, the first comment is identical to the bug's
description:

    >>> bug_view.wasDescriptionModified()
    False

And in this case we don't say anything special in the UI. If the description
was updated, the UI includes a note on this matter and a link to the original
comment.

The first comment may have bug attachments. While it is not possible to
add an attachment via the web interface to the first comment, bugs
submitted via the email interface can have file attachments, which
are stored as bug attchments of the first comment. Similary, the first
comment of bugs imported from other bug trackers may have attachments.
We display these attachments in the comment section of the Web UI,
hence getBugCommentsForDisplay returns the first comment, if it has
attachments.

Currently, the first comment of bug 11 has no attachments, hence
BugTaskView.getCommentForDisplay does not return the first comment.

    >>> bug_11 = getUtility(IBugSet).get(11)
    >>> bug_11_bugtask = bug_11.bugtasks[0]
    >>> bug_11_view = getMultiAdapter(
    ...     (bug_11_bugtask, LaunchpadTestRequest()), name='+index')
    >>> bug_11_view.initialize()
    >>> rendered_comments = bug_11_view.getBugCommentsForDisplay()
    >>> [bug_comment.index for bug_comment in rendered_comments]
    [1, 2, 3, 4, 5, 6]

If we add an attachment to the first comment, this comment is included
in getBugCommentsForDisplay...

    >>> import StringIO
    >>> login("test@canonical.com")
    >>> attachment = bug_11.addAttachment(
    ...     owner=None, data=StringIO.StringIO('whatever'),
    ...     comment=bug_11.initial_message, filename='test.txt',
    ...     is_patch=False, content_type='text/plain',
    ...     description='sample data')
    >>> bug_11_view = getMultiAdapter(
    ...     (bug_11_bugtask, LaunchpadTestRequest()), name='+index')
    >>> bug_11_view.initialize()
    >>> rendered_comments = bug_11_view.getBugCommentsForDisplay()
    >>> [bug_comment.index for bug_comment in rendered_comments]
    [0, 1, 2, 3, 4, 5, 6]
    >>>

...but the attribute text_for_display of the first comment is empty.
This allows us to display the attachments of the initial message
as the first comment, without repeating the text of the bug report.

   >>> rendered_comments[0].text_for_display
   ''
   >>> print rendered_comments[0].text_contents
   I've had problems when switching from Jokosher...


Comment truncation
------------------

If a comment is too long, we truncate it before we display it and
display a link to view the full comment. Let's change the default
threshold so that all comments truncate.

    >>> from canonical.config import config
    >>> max_comment_size = """
    ...     [malone]
    ...     max_comment_size: 20
    ...     """
    >>> config.push('max_comment_size', max_comment_size)

(For bug comments the context isn't too important, so we get the page using
just any of the bug's bugtask.)

    >>> bug_two = getUtility(IBugSet).get(2)
    >>> bug_two_bugtask = bug_two.bugtasks[0]
    >>> bug_view = getMultiAdapter(
    ...     (bug_two_bugtask, LaunchpadTestRequest()), name='+index')
    >>> bug_view.initialize()

If we get the bug comments from the view we can see that the two additional
comments have been truncated:

    >>> [(bug_comment.index, bug_comment.was_truncated)
    ...  for bug_comment in bug_view.getBugCommentsForDisplay()]
    [(1, True), (2, True)]

Let's take a closer look at one of the truncated comments. We can
display the truncated text using text_for_display:

    >>> comment_one = bug_view.getBugCommentsForDisplay()[0]
    >>> print comment_one.text_for_display #doctest: -ELLIPSIS
    This would be a real...

The UI will display information about the comment being truncated and
provide a link to view the full comment.

Comments with multiple chunks
-----------------------------

Bug 10 has two comments: one which is the initial description, and one
which is a multi-chunk comment added through the email interface. To grab
/all/ BugComments related to it, we use the browser function
get_comments_for_bugtask:

    >>> from canonical.launchpad.browser.bugtask import get_comments_for_bugtask
    >>> all_comments = get_comments_for_bugtask(bug_ten_bugtask)

    >>> [bug_comment.index for bug_comment in all_comments]
    [0, 1]
    >>> all_comments[0].text_for_display
    u'test bug'
    >>> all_comments[1].text_for_display
    u'Welcome to Canada!\n\nUnicode\u2122 text'

Note that multi-chunk comments are only created by the email interface
itself; adding comments through the web UI always places them in the
same chunk.


Comment titles
--------------

This function also eliminates redundant message titles. We have a policy of
only displaying message titles when these are "new" to the bug. That means
they are different to the bug title, and different to the previous message.

The function sets a comment.display_title to True if the title should be
displayed.

    >>> bug_11 = getUtility(IBugSet).get(11)
    >>> all_comments = get_comments_for_bugtask(bug_11.bugtasks[0])
    >>> for comment in all_comments:
    ...     print comment.display_title, comment.title
    False Make Jokosher use autoaudiosink
    False Re: Make Jokosher use autoaudiosink
    False Re: Make Jokosher use autoaudiosink
    True Autoaudiosink is no longer under development
    False Re: Autoaudiosink is no longer under development
    True This is a really new title
    False Re: Make Jokosher use autoaudiosink
    >>> bug_12 = getUtility(IBugSet).get(12)
    >>> all_comments = get_comments_for_bugtask(bug_12.bugtasks[0])
    >>> for comment in all_comments:
    ...     print comment.display_title, comment.title
    False Copy, Cut and Delete operations should work on selections
    False Re: Copy, Cut and Delete operations should work on selections
    False Re: Copy, Cut and Delete operations should work on selections
    False Re: Copy, Cut and Delete operations should work on selections
    False Re: Copy, Cut and Delete operations should work on selections


Comment omission
----------------

If a comment made by the same user is strictly identical to its previous
comment in sequence, it will be omitted. Let's add some comments and
attachments to a bug to see this in action:

    >>> from canonical.launchpad.interfaces import ILaunchBag, IPersonSet
    >>> import StringIO
    >>> user = getUtility(ILaunchBag).user
    >>> different_user = getUtility(IPersonSet).getByName('name16')

    >>> login("test@canonical.com")
    >>> bug_three = getUtility(IBugSet).get(3)
    >>> m1 = bug_three.newMessage(owner=user, subject="Hi", content="Hello there")
    >>> m2 = bug_three.newMessage(owner=user, subject="Hi", content="Hello there")
    >>> m3 = bug_three.newMessage(owner=user, subject="Ho", content="Hello there")
    >>> m4 = bug_three.newMessage(owner=user, subject="Ho", content="Hello there")
    >>> file_ = StringIO.StringIO("Bogus content makes the world go round")
    >>> a1 = bug_three.addAttachment(owner=user, data=file_, description="Ho",
    ...                              filename="munchy", comment="Hello there")
    >>> m6 = bug_three.newMessage(owner=user, subject="Ho", content="Hello there")
    >>> m7 = bug_three.newMessage(owner=different_user, subject="Ho", content="Hello there")
    >>> bug_three.messages.count()
    8

Now checking what gets displayed. m2 and m4 should be omitted, as they are
identical to the comment that precedes them in order; Although m7 is identical
to its preceding comment, it was made by a different user so it shouldn't be
hidden.

    >>> bug_three_bugtask = bug_three.bugtasks[0]
    >>> bug_view = getMultiAdapter(
    ...     (bug_three_bugtask, LaunchpadTestRequest()), name='+index')
    >>> bug_view.initialize()
    >>> [(c.index, c.title, c.text_for_display)
    ...  for c in bug_view.getBugCommentsForDisplay()]
    [(1, u'Hi', u'Hello there'),
     (3, u'Ho', u'Hello there'),
     (5, u'Ho', u'Hello there'),
     (6, u'Ho', u'Hello there'),
     (7, u'Ho', u'Hello there')]

Wrapping up
-----------

Be nice and restore the comment size to what it was originally.

    >>> config_data = config.pop('max_comment_size')

