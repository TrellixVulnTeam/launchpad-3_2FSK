Project
=======

A Project is basically a group of Products, making it possible to for
example see all bugs in the Project's Product, or make them share a
common external bug tracker.

We can get a project using IProjectSet, by supplying the project's name.

    >>> from zope.interface.verify import verifyObject
    >>> from canonical.launchpad.interfaces import IProjectSet, IProject

    >>> gnome = getUtility(IProjectSet)['gnome']
    >>> gnome.name
    u'gnome'
    >>> verifyObject(IProject, gnome)
    True

If there is no project with the specified name, a NotFoundError will be
raised.

    >>> getUtility(IProjectSet)['non-existant']
    Traceback (most recent call last):
    ...
    NotFoundError:...

The same will happen if we set a product to be inactive. This is a good
way of hiding bogus projects, without actually deleting them from the
db, since the __getitem__ method of IProjectSet is used to traverse to
the project.

    >>> from canonical.database.sqlbase import flush_database_updates
    >>> login("foo.bar@canonical.com")
    >>> gnome.active = False
    >>> flush_database_updates()


    >>> gnome = getUtility(IProjectSet)['gnome']
    Traceback (most recent call last):
    ...
    NotFoundError:...

The inactive project will still be accessible using
IProjectSet.getByName(), though.
But it should be shown using the getByName()

    >>> gnome = getUtility(IProjectSet).getByName('gnome')
    >>> gnome.name
    u'gnome'
    >>> gnome.active
    False

getByName() also accepts an argument to ignore inactive projects.

    >>> print getUtility(IProjectSet).getByName('gnome', ignore_inactive=True)
    None


Specification Listings
======================

We should be able to generate filtered lists of specs on a project.

 >>> mozilla = getUtility(IProjectSet).getByName('mozilla')
 >>> from canonical.lp.dbschema import SpecificationFilter

First, there should be only one informational spec for mozilla:

 >>> filter = [SpecificationFilter.INFORMATIONAL]
 >>> for spec in mozilla.specifications(filter=filter):
 ...    print spec.name
 extension-manager-upgrades


There are no completed specs for mozilla:

 >>> filter = [SpecificationFilter.COMPLETE]
 >>> for spec in mozilla.specifications(filter=filter):
 ...    print spec.name


And there are five incomplete specs:

 >>> filter = [SpecificationFilter.INCOMPLETE]
 >>> mozilla.specifications(filter=filter).count()
 5

We can filter for specifications that contain specific text:

 >>> for spec in mozilla.specifications(filter=['install']):
 ...     print spec.name
 extension-manager-upgrades


Inactive products are excluded from the listings.

 >>> filter = [SpecificationFilter.INCOMPLETE]
 >>> mozilla.specifications(filter=filter).count()
 5

 >>> from canonical.launchpad.interfaces import IProductSet
 >>> firefox = getUtility(IProductSet).getByName('firefox')
 >>> firefox.active = False
 >>> flush_database_updates()
 >>> filter = [SpecificationFilter.INCOMPLETE]
 >>> mozilla.specifications(filter=filter).count()
 0

Reset firefox so we don't mess up later tests.

 >>> firefox.active = True
 >>> flush_database_updates()

We can get all the specifications via the all_specifications property,
and all valid specifications via the valid_specifications property:

 >>> for spec in mozilla.all_specifications:
 ...    print spec.name
 svg-support
 canvas
 extension-manager-upgrades
 mergewin
 e4x

 >>> for spec in mozilla.valid_specifications:
 ...    print spec.name
 svg-support
 canvas
 extension-manager-upgrades
 mergewin
 e4x
