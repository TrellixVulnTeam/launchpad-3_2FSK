= Person RDF Pages =

We export FOAF RDF metadata from the /~Person.name/+index document.

    >>> from BeautifulSoup import BeautifulSoup, SoupStrainer
    >>> anon_browser.open("http://launchpad.dev/~name16")
    >>> strainer = SoupStrainer(['link'], {'type': ['application/rdf+xml']})
    >>> soup = BeautifulSoup(anon_browser.contents, parseOnlyThese=strainer)
    >>> print soup.renderContents()
    <link rel="meta" type="application/rdf+xml" title="FOAF" href="+rdf" />

== Individual RDF ==

And this is what the FOAF document for an individual actually looks
like. It includes GPG information, if the user has any.

    >>> anon_browser.open("http://launchpad.dev/~name16/+rdf")
    >>> print anon_browser.contents
    <?xml version="1.0" encoding="utf-8"...?>
    <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
             xmlns:foaf="http://xmlns.com/foaf/0.1/"
             xmlns:lp="https://launchpad.net/rdf/launchpad#"
             xmlns:wot="http://xmlns.com/wot/0.1/">
      <foaf:Person>
        <foaf:name>Foo Bar</foaf:name>
        <foaf:nick>name16</foaf:nick>
        <foaf:mbox_sha1sum>D248D2313390766929B6CEC214BD9B640F5EA7E7</foaf:mbox_sha1sum>
        <wot:hasKey>
          <wot:PubKey>
            <wot:hex_id>12345678</wot:hex_id>
            <wot:length>1024</wot:length>
            <wot:fingerprint>ABCDEF0123456789ABCDDCBA0000111112345678</wot:fingerprint>
            <wot:pubkeyAddress rdf:resource="http://keyserver.ubuntu.com:11371/pks/lookup?search=0xABCDEF0123456789ABCDDCBA0000111112345678&amp;op=index"/>
          </wot:PubKey>
        </wot:hasKey>
      </foaf:Person>
    </rdf:RDF>

It also includes SSH keys:

    >>> anon_browser.open("http://launchpad.dev/~name12/+rdf")
    >>> print anon_browser.contents
    <?xml version="1.0" encoding="utf-8"...?>
    ...
    <foaf:name>Sample Person</foaf:name>
    ...
    <lp:sshPubKey>AAAAB3NzaC1kc3MAAAE...</lp:sshPubKey>
    ...

And it's valid XML and RDF:

    >>> from xml.dom.minidom import parseString
    >>> document = parseString(str(anon_browser.contents))
    >>> print document.documentElement.nodeName
    rdf:RDF

== Team RDF ==

Teams also have an RDF export, which includes information for each
member of the team. Let's add a logo to Mark's user so we can see the
output:

    >>> from canonical.launchpad.ftests import set_branding
    >>> mark_browser = setupBrowser(auth='Basic mark@hbd.com:test')
    >>> mark_browser.open('http://launchpad.dev/~sabdfl/+branding')
    >>> set_branding(mark_browser, icon=False)
    >>> mark_browser.getControl('Change Branding').click()

Now, generate the RDF itself:

    >>> from canonical.launchpad.helpers import backslashreplace
    >>> anon_browser.open("http://launchpad.dev/~testing-spanish-team/+rdf")
    >>> print backslashreplace(anon_browser.contents)
    <?xml version="1.0" encoding="utf-8"...?>
    <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
             xmlns:foaf="http://xmlns.com/foaf/0.1/"
             xmlns:lp="https://launchpad.net/rdf/launchpad#"
             xmlns:wot="http://xmlns.com/wot/0.1/">
      <foaf:Group>
        <foaf:name>testing Spanish team</foaf:name>
        <foaf:nick>testing-spanish-team</foaf:nick>
        <foaf:member>
            <foaf:Person>
              <foaf:name>Carlos Perell\xf3 Mar\xedn</foaf:name>
              <foaf:nick>carlos</foaf:nick>
               <foaf:mbox_sha1sum>BCB3DF72647D7B136A3C33005318D63974179452</foaf:mbox_sha1sum>
            </foaf:Person>
        </foaf:member>
        <foaf:member>
          <foaf:Person>
            <foaf:name>Foo Bar</foaf:name>
            <foaf:nick>name16</foaf:nick>
            <foaf:mbox_sha1sum>D248D2313390766929B6CEC214BD9B640F5EA7E7</foaf:mbox_sha1sum>
            <wot:hasKey>
              <wot:PubKey>
                <wot:hex_id>12345678</wot:hex_id>
    ...
              </wot:PubKey>
            </wot:hasKey>
          </foaf:Person>
        </foaf:member>
        <foaf:member>
          <foaf:Person>
            <foaf:name>Mark Shuttleworth</foaf:name>
            <foaf:nick>sabdfl</foaf:nick>
            <foaf:img rdf:resource="http://.../logo.png"/>
            <foaf:img rdf:resource="http://.../mugshot.png"/>
            <foaf:mbox_sha1sum>AE66EB0C5FB38548B843EA8EFA71707A8F822E06</foaf:mbox_sha1sum>
            <lp:sshPubKey>AAAAB3NzaC1kc3MAAABBAL5VoWG5sy3CnLYeOw47L8m9A15hA/PzdX2u0B7c2Z1ktFPcEaEuKbLqKVSkXpYm7YwKj9y88A9Qm61CdvI0c50AAAAVAKGY0YON9dEFH3DzeVYHVEBGFGfVAAAAQCoe0RhBcefm4YiyQVwMAxwTlgySTk7FSk6GZ95EZ5Q8/OTdViTaalvGXaRIsBdaQamHEBB+Vek/VpnF1UGGm8YAAABAaCXDl0r1k93JhnMdF0ap4UJQ2/NnqCyoE8Xd5KdUWWwqwGdMzqB1NOeKN6ladIAXRggLc2E00UsnUXh3GE3Rgw==</lp:sshPubKey>
    ...
      </foaf:Group>
    </rdf:RDF>


== Corner Cases ==

Note how ascii and non-ascii names are rendered properly:

    >>> from BeautifulSoup import BeautifulSoup, SoupStrainer
    >>> strainer = SoupStrainer(['foaf:name'])
    >>> soup = BeautifulSoup(anon_browser.contents, parseOnlyThese=strainer)
    >>> for tag in soup:
    ...   tag.renderContents()
    'testing Spanish team'
    'Carlos Perell\xc3\xb3 Mar\xc3\xadn'
    'Foo Bar'
    'Mark Shuttleworth'
    'Miroslav Kure'
    'Valentina Commissari'

If the team has no active members no <foaf:member> elements will be
present:

    >>> anon_browser.open("http://launchpad.dev/~name21/+rdf")
    >>> strainer = SoupStrainer(['foaf:member'])
    >>> soup = BeautifulSoup(anon_browser.contents, parseOnlyThese=strainer)
    >>> len(soup)
    0

And nothing about them is rendered at all:

    >>> print anon_browser.contents
    <?xml version="1.0" encoding="utf-8"...?>
    <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
             xmlns:foaf="http://xmlns.com/foaf/0.1/"
             xmlns:lp="https://launchpad.net/rdf/launchpad#"
             xmlns:wot="http://xmlns.com/wot/0.1/">
      <foaf:Group>
        <foaf:name>Hoary Gnome Team</foaf:name>
        <foaf:nick>name21</foaf:nick>
      </foaf:Group>
    </rdf:RDF>

The pages still work fine for teams whose members have not set up
mugshots or images for them:

    >>> anon_browser.open("http://launchpad.dev/~name18/+rdf")
    >>> strainer = SoupStrainer(['foaf:member'])
    >>> soup = BeautifulSoup(anon_browser.contents, parseOnlyThese=strainer)
    >>> len(soup)
    6
    >>> strainer = SoupStrainer(['foaf:img'])
    >>> soup = BeautifulSoup(anon_browser.contents, parseOnlyThese=strainer)
    >>> len(soup)
    0

