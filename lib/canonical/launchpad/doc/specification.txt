Specifications
==============

A feature specification is a document that describes an idea for an
enhancement to a product. Launchpad allows you to register your
specification and then walk it through the approval process. You can have
specifications for products, and also for distributions.

All Milestone creation and retrieval is done through IMilestoneSet.
IMilestoneSet can be accessed as a utility.

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.interfaces import ISpecificationSet
    >>> specset = getUtility(ISpecificationSet)

To create a new Specification, use ISpecificationSet.new:

    >>> from canonical.launchpad.interfaces import IProductSet
    >>> productset = getUtility(IProductSet)
    >>> upstream_firefox = productset.get(4)
    >>> from canonical.launchpad.database import Person
    >>> from canonical.lp.dbschema import SpecificationPriority
    >>> from canonical.lp.dbschema import SpecificationStatus
    >>> sabdfl = Person.byName('sabdfl')
    >>> newspec = specset.new('mng', 'Support MNG Format', 'http://www.silly.me/SpecName', 'we really need this', SpecificationStatus.APPROVED, sabdfl, product=upstream_firefox)
    >>> print newspec.name
    mng

It should be possible to retrieve a specification by its name 
    >>> specset.getByName('mng').name
    u'mng'

And if we try to retrieve a non-existent specification we should get None 
    >>> print specset.getByName('nonexistentspec')
    None

It's also possible to retrieve a specification by its URL
    >>> specset.getByURL('http://developer.mozilla.org/en/docs/SVG').specurl
    u'http://developer.mozilla.org/en/docs/SVG'

And if there's no specification with the given URL we should get None
    >>> print specset.getByURL('http://no-url.com')
    None

A specification could be attached to a distribution, or a product. We call
this the specification target.

    >>> print newspec.target.name
    firefox

We attach now a spec to a distribution.

    >>> from canonical.launchpad.interfaces import ILaunchpadCelebrities
    >>> ubuntu = getUtility(ILaunchpadCelebrities).ubuntu
    >>> sabdfl = Person.byName('sabdfl')
    >>> ubuspec = specset.new('fix-spec-permissions',
    ...                       'Fix Specification Permissions',
    ...                       'http://www.ubuntu.com/FixBrokenSpecPerms',
    ...                       'we really need this',
    ...                       SpecificationStatus.APPROVED,
    ...                       sabdfl,
    ...                       distribution=ubuntu)
    >>> print ubuspec.name
    fix-spec-permissions

The Ubuntu distro is owned by the Ubuntu team, ubuntu-team. jdub is a member,
and therefore should be able to edit any spec attached to it (but not
specs attached to mozilla-firefox).

    >>> from canonical.launchpad.helpers import check_permission
    >>> print ubuntu.owner.name
    ubuntu-team
    >>> jdub = Person.byName('jdub')
    >>> jdub.inTeam(ubuntu.owner)
    True
    >>> login(jdub.preferredemail.email)
    >>> check_permission('launchpad.Edit', ubuspec)
    True
    >>> check_permission('launchpad.Edit', newspec)
    False


SpecificationDelta
------------------

When we modify a specification, we can get a delta of the changes using
ISpecification.getDelta(). If there are no changes, None will be
returned:

    >>> from canonical.launchpad.helpers import Snapshot
    >>> from canonical.launchpad.interfaces import ISpecification
    >>> unmodified_spec = Snapshot(ubuspec, providing=ISpecification)
    >>> unmodified_spec.getDelta(ubuspec, jdub) is None
    True

Now, let's do a bunch of changes, and see what the result looks like:

    >>> ubuspec.title = 'New Title'
    >>> ubuspec.summary = 'New summary.'
    >>> ubuspec.specurl = 'http://www.ubuntu.com/NewSpec'
    >>> ubuspec.distrorelease = ubuntu.getRelease('hoary')
    >>> ubuspec.name = 'new-spec'
    >>> ubuspec.priority = SpecificationPriority.LOW
    >>> ubuspec.status = SpecificationStatus.DRAFT
    >>> ubuspec.whiteboard = 'New whiteboard comments.'
    >>> ubuspec.approver = sabdfl
    >>> ubuspec.assignee = jdub
    >>> ubuspec.drafter = jdub
    >>> ubuspec.linkBug(2)
    <...>

    >>> delta = ubuspec.getDelta(unmodified_spec, jdub)
    >>> delta.specification == ubuspec
    True
    >>> delta.user == jdub
    True

    >>> print delta.title
    New Title
    >>> print delta.summary
    New summary.
    >>> print delta.whiteboard
    New whiteboard comments.
    >>> print delta.specurl
    http://www.ubuntu.com/NewSpec
    >>> print delta.distrorelease.name
    hoary

    >>> print delta.name['old']
    fix-spec-permissions
    >>> print delta.name['new']
    new-spec

    >>> print delta.priority['old'].title
    Undefined
    >>> print delta.priority['new'].title
    Low

    >>> print delta.status['old'].title
    Approved
    >>> print delta.status['new'].title
    Drafting

    >>> print delta.approver['old'] is None
    True
    >>> print delta.approver['new'] == sabdfl
    True

    >>> print delta.assignee['old'] is None
    True
    >>> print delta.assignee['new'] == jdub
    True

    >>> print delta.drafter['old'] is None
    True
    >>> print delta.drafter['new'] == jdub
    True

    >>> [linked_bug.id for linked_bug in delta.bugs_linked]
    [2]

    >>> delta.bugs_unlinked is None
    True
    >>> delta.milestone is None
    True
    >>> delta.productseries is None
    True
    >>> delta.target is None
    True
