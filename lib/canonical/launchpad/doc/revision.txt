= Bazaar Revisions =

Branches are collection of revisions, and a revision can exist independently
from any branch. Revisions are created automatically by scanning branches, they
have no creation interface and Launchpad cannot create or modify them.

== Creating revisions ==

XXX: Revisions have an owner attribute. As a convention, the owner of a
Revision is always the Launchpad Admins team. The Revision.owner attribute will
be removed soon. -- DavidAllouche 2005-10-08

>>> from canonical.launchpad.database import Person
>>> admins = Person.selectOneBy(name='admins')

The creator of a revision is identified by a RevisionAuthor. A RevisionAuthor
is not a person because that is only an informational attribute, and even if we
trust it, there's really no simple way to map that reliably to persons.

>>> from canonical.launchpad.database import RevisionAuthor
>>> author = RevisionAuthor(name='ddaa@localhost')
>>> author.name
u'ddaa@localhost'

The log-body of a revision is the commit message of that revision.

>>> log_body_1 = "Initial import"
>>> log_body_2 = "Fix froboizer"

The revision-id is the globally unique id used by the revision control. For
native Bazaar2 revisions it's a GUID, for Bazaar2 imports it's a string based
on the Arch revision id.

>>> revision_id_1 = "Arch-1:ddaa@example.com/junk--devel--base-0"
>>> revision_id_2 = "some random unique string, we do not care, really"

The revision_date is the commit date recorded by the revision control system,
while the date_created is the time when the database record was created.

>>> from datetime import datetime
>>> from pytz import UTC
>>> date = datetime(2005, 3, 8, 12, 0, tzinfo=UTC)
>>> from canonical.launchpad.database import Revision
>>> revision_1 = Revision(owner=admins, log_body=log_body_1,
...     revision_author=author, revision_id=revision_id_1, revision_date=date)

== Parents ==

Bazaar revisions can have multiple parents, the "leftmost" parent is the
revision that was used as a base when committing, other parents are used to
record merges. All revisions except initial imports have at least one parent.

Parents are accessed through their revision_id without using a foreign key so
we can represent revisions whose at least one parent is a ghost revision.

>>> revision_2 = Revision(owner=admins, log_body=log_body_2,
...     revision_author=author, revision_id=revision_id_2, revision_date=date)

>>> from canonical.launchpad.database import RevisionParent
>>> rev2_parent = RevisionParent(sequence=0, revision=revision_2,
...                              parent_id=revision_1.revision_id)

== Branch ancestry ==

Revisions are associated to branches through the BranchRevision table. A given
revision may appear in different positions in different branches thanks to
Bazaar converge-on-pull logic.

>>> from canonical.launchpad.interfaces import IBranchSet
>>> branch = getUtility(IBranchSet).get(1)
>>> branch.revision_history.count()
0

BranchRevision rows are created using `BranchRevisionSet.new`, or using the
convenience method `Branch.createBranchRevision`.

>>> from canonical.launchpad.interfaces import IBranchRevisionSet
>>> rev_no_1 = getUtility(IBranchRevisionSet).new(
...     branch=branch, sequence=1, revision=revision_1)
>>> rev_no_2 = branch.createBranchRevision(sequence=2, revision=revision_2)
>>> rev_no_1.branch == rev_no_2.branch == branch
True

The Branch.revision_history property (covered in doc/branch.txt) is a
convenience that calls the BranchRevisionSet.getRevisionHistoryForBranch
method.

  >>> from canonical.launchpad.interfaces import IBranchSet, IBranchRevisionSet
  >>> branch = getUtility(IBranchSet).getByUniqueName(
  ...     '~name12/+junk/junk.contrib')

  >>> branch_revision_set = getUtility(IBranchRevisionSet)
  >>> history = branch_revision_set.getRevisionHistoryForBranch(branch)
  >>> for branch_revision in history:
  ...     print branch_revision.sequence, branch_revision.revision.id
  6 9
  5 8
  4 11
  3 10
  2 5
  1 4

The full ancestry of a branch is recorded. That includes the history commits on
this branch, but also revisions that were merged into this branch. Such merged
revisions are associated to the branch using BranchRevision whose sequence
attribute is None.

  >>> from canonical.launchpad.database import BranchRevisionSet
  >>> ancestry = BranchRevisionSet().getAncestryForBranch(branch)
  >>> for branch_revision in sorted(ancestry,
  ...         key=lambda r:(r.sequence, r.revision.id), reverse=True):
  ...     print branch_revision.sequence, branch_revision.revision.id
  6 9
  5 8
  4 11
  3 10
  2 5
  1 4
  None 7
  None 6

Note that BranchRevisionSet.getAncestryForBranch is only useful for testing.
If you need to operate on the ancestry of a branch, you should write a more
focused query to avoid creating the tens of thousands of objects necessary to
represent the ancestry of a large branch.


=== Deleting BranchRevisions ===

If a branch gets overwritten or some revisions get uncommitted,
Launchpad's view of the branch will differ from the actual state of the
branch. If the bzr branch now has fewer revisions than Launchpad's view
of the branch, then some of BranchRevision records will need to be
removed.

BranchRevision records are deleted using the `BranchRevisionSet.delete`
method.


First, get a branch via the IPersonSet utility:

  >>> from zope.component import getUtility
  >>> from canonical.launchpad.interfaces import IPersonSet
  >>> person = getUtility(IPersonSet).getByEmail('test@canonical.com')
  >>> branch = person.getBranch(None, 'junk.dev')

The last commit on this branch has the revision number 6.

  >>> [revno_6] = branch.latest_revisions(1)
  >>> revno_6.sequence
  6
  >>> revno_6.branch == branch
  True
  >>> print revno_6.revision.revision_id
  foo@localhost-20051031170357-1301ad6d387feb23

We remove the last revision from the branch. This is similar to what
"bzr uncommit" does.

  >>> from canonical.launchpad.interfaces import IBranchRevisionSet
  >>> getUtility(IBranchRevisionSet).delete(revno_6.id)

Afterwards, the last commit on the branch has revision number 5.

  >>> branch.latest_revisions(1)[0].sequence
  5

Note that while the BranchRevision object linking the revision to the
branch has been destroyed, the associated revision object is not (it
may be referenced by some other branch):

  >>> from canonical.launchpad.interfaces import IRevisionSet
  >>> revision = getUtility(IRevisionSet).getByRevisionId(
  ...     'foo@localhost-20051031170357-1301ad6d387feb23')
  >>> print revision.revision_id
  foo@localhost-20051031170357-1301ad6d387feb23


== IRevisionSet.new() ==

Revision objects can be created using the IRevisionSet utility.
Associated RevisionAuthor and RevisionParent objects will be created
as needed.

  >>> revision = getUtility(IRevisionSet).new(
  ...     revision_id='rev-3',
  ...     log_body='commit message',
  ...     revision_date=date,
  ...     revision_author='ddaa@localhost',
  ...     owner=admins,
  ...     parent_ids=['rev-1', 'rev-2'])
  >>> print revision.revision_id
  rev-3
  >>> print revision.log_body
  commit message
  >>> print revision.revision_date
  2005-03-08 12:00:00+00:00
  >>> print revision.revision_author.name
  ddaa@localhost
  >>> for parent_id in revision.parent_ids:
  ...     print parent_id
  rev-1
  rev-2
