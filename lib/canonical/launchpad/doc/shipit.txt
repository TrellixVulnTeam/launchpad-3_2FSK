ShipIt
======

ShipIt is our application to ship Ubuntu CDs to our users. Any user can
make an request with any number of CDs, and as soon as the request is approved,
these CDs are sent to the user.

  >>> from datetime import date
  >>> from zope.component import getUtility
  >>> from zope.interface.verify import verifyObject
  >>> from canonical.lp.dbschema import ShipItFlavour, ShipItArchitecture
  >>> from canonical.database.sqlbase import flush_database_updates
  >>> from canonical.launchpad.ftests import login
  >>> from canonical.launchpad.database import ShippingRun
  >>> from canonical.launchpad.interfaces import (
  ...    IStandardShipItRequestSet, IShippingRequestSet, IPersonSet,
  ...    IShippingRequest, ILaunchBag, ShippingRequestStatus, IShipmentSet,
  ...    ShippingRequestPriority)
  >>> requestset = getUtility(IShippingRequestSet)
  >>> foobar = getUtility(IPersonSet).getByEmail('foo.bar@canonical.com')

Let's create a new request for foo.bar@canonical.com.

  >>> UBUNTU = ShipItFlavour.UBUNTU
  >>> X86 = ShipItArchitecture.X86
  >>> AMD64 = ShipItArchitecture.AMD64
  >>> PPC = ShipItArchitecture.PPC
  >>> recipient = foobar
  >>> country = 31 # Brazil
  >>> city = 'some city'
  >>> addressline1 = 'address1'
  >>> name = 'the name'
  >>> phone = '+551635015218'
  >>> reason = ("I'm going to give away some CDs in the next meeting of my "
  ...           "city's LUG.")
  >>> request = requestset.new(recipient, name, country, city,
  ...                          addressline1, phone, reason=reason)
  >>> quantities = {UBUNTU: {X86: 30, AMD64: 5, PPC: 2}}
  >>> request.setQuantities(quantities)

A request can be a custom or a standard one; if the request contains custom
quantities for any flavour, then that request is considered custom.

  >>> request.containsCustomQuantitiesOfFlavour(ShipItFlavour.KUBUNTU)
  False
  >>> request.containsCustomQuantitiesOfFlavour(ShipItFlavour.UBUNTU)
  True
  >>> request.isCustom()
  True

We're not allowed to add a second request for the same recipient, while the
existing one is not yet exported.

  >>> request = requestset.new(recipient, name, country, city,
  ...                          addressline1, phone, reason=reason)
  Traceback (most recent call last):
  ...
  AssertionError

  >>> verifyObject(IShippingRequest, request)
  True

  >>> request.getTotalCDs()
  37
  >>> recipient.currentShipItRequest() == request
  True
  
If a request is not approved yet, it'll have approved == None. If it was
approved, then approved will be True.

  >>> request.approved is None
  True

The number of CDs can be altered by the user, if he wants.

  >>> login('foo.bar@canonical.com')
  >>> quantities = {UBUNTU: {X86: 10, AMD64: 3, PPC: 1}}
  >>> request.setQuantities(quantities)
  >>> request.getTotalCDs()
  14

When a request is approved, you must specify the approved quantities.

  >>> login('marilize@hbd.com')
  >>> request.approve(whoapproved=getUtility(ILaunchBag).user)
  >>> request.approved
  True
  >>> request.whoapproved.displayname
  u'Marilize Coetzee'
  >>> quantities = request.getRequestedCDsGroupedByFlavourAndArch()
  >>> quantities[UBUNTU][X86].quantityapproved
  10
  >>> quantities[UBUNTU][AMD64].quantityapproved
  3
  >>> quantities[UBUNTU][PPC].quantityapproved
  1

The approved quantities can be changed only if the request is approved.

  >>> quantities = {UBUNTU: {X86: 5, AMD64: 3, PPC: 2}}
  >>> request.setApprovedQuantities(quantities)
  >>> [(reqcds.flavour.name, reqcds.architecture.name, reqcds.quantityapproved)
  ...   for reqcds in request.getAllRequestedCDs()]
  [('UBUNTU', 'X86', 5), ('UBUNTU', 'AMD64', 3), ('UBUNTU', 'PPC', 2)]

We can also mark a request as pending approval, automatically cleaning the
approved quantities.

  >>> request.clearApproval()
  >>> request.approved is None
  True
  >>> flush_database_updates()
  >>> [(reqcds.flavour.name, reqcds.architecture.name, reqcds.quantityapproved)
  ...   for reqcds in request.getAllRequestedCDs()]
  [('UBUNTU', 'X86', 0), ('UBUNTU', 'AMD64', 0), ('UBUNTU', 'PPC', 0)]

If a request hasn't been exported yet, it can still be denied.

  >>> request.deny()
  >>> request.approved
  False

A request can also be cancelled, and this means the approved and
quantity*approved will be set back to None.

  >>> request.cancel(getUtility(ILaunchBag).user)
  >>> request.cancelled
  True
  >>> request.whocancelled.displayname
  u'Marilize Coetzee'
  >>> flush_database_updates()

When a request is cancelled it'll not show up as the recipient's current
request.

  >>> recipient.currentShipItRequest() is None
  True

Instead, it'll be part of the past requests of that recipient.

  >>> request in recipient.pastShipItRequests()
  True


Searching for requests
----------------------

We have 15 requests, and two of them are cancelled

  >>> sorted(shipreq.recipient.name 
  ...        for shipreq in requestset.search(include_cancelled=True))
  [u'cprov', u'ddaa', u'ddaa', u'ddaa', u'debonzi', u'jblack', u'jblack',
   u'jdub', u'jordi', u'kreutzm', u'lifeless', u'marilize', u'name16',
   u'no-priv', u'stub']

  >>> sorted(shipreq.recipient.name for shipreq in requestset.search())
  [u'ddaa', u'ddaa', u'ddaa', u'debonzi', u'jblack', u'jblack', u'jdub',
   u'jordi', u'kreutzm', u'lifeless', u'marilize', u'no-priv', u'stub']

From the thirteen non-cancelled, 2 are pending review, because their
recipients asked for extra CDs.

  >>> pending = ShippingRequestStatus.PENDING
  >>> for request in requestset.search(status=pending):
  ...     print request.id, ":", request.reason
  12 : I want 100 more CDs.
  13 : I need 50 more CDs to give away to my friends.


All other requests are automatically approved.

  >>> approved = ShippingRequestStatus.APPROVED
  >>> sorted((shipreq.id, shipreq.recipient.name) 
  ...         for shipreq in requestset.search(status=approved))
  [(1, u'no-priv'), (2, u'stub'), (3, u'kreutzm'), (4, u'lifeless'),
   (5, u'ddaa'), (7, u'debonzi'), (14, u'jblack'), (15, u'ddaa'),
   (16, u'jordi'), (17, u'jblack'), (18, u'ddaa')]


It's also possible to search for requests containing CDs of a given flavour or
of a given distrorelease (or both, obviously).

  >>> kubuntu = ShipItFlavour.KUBUNTU
  >>> [(shipreq.recipient.displayname , shipreq.id)
  ...  for shipreq in requestset.search(flavour=kubuntu)]
  [(u'David Allouche', 5), (u'Daniel Henrique Debonzi', 7),
   (u'Jordi Mallach', 16), (u'James Blackwell', 17)]

  >>> from canonical.lp.dbschema import ShipItDistroRelease
  >>> dapper = ShipItDistroRelease.DAPPER
  >>> [(shipreq.recipient.displayname , shipreq.id)
  ...  for shipreq in requestset.search(distrorelease=dapper)]
  [(u'Robert Collins', 4), (u'No Privileges Person', 1),
   (u'Helge Kreutzmann', 3), (u'David Allouche', 5),
   (u'Daniel Henrique Debonzi', 7), (u'Jordi Mallach', 16),
   (u'David Allouche', 18), (u'Jeff Waugh', 12), (u'Marilize Coetzee', 13),
   (u'James Blackwell', 17), (u'Stuart Bishop', 2)]

  >>> edubuntu = ShipItFlavour.EDUBUNTU
  >>> [(shipreq.recipient.displayname , shipreq.id)
  ...  for shipreq in requestset.search(distrorelease=dapper, flavour=edubuntu)]
  [(u'Jordi Mallach', 16), (u'David Allouche', 18), (u'Marilize Coetzee', 13)]


Another way of searching is by using any part of the recipient's name or the
beginning of his email address.

  >>> [shipreq.recipient.displayname 
  ...  for shipreq in requestset.search(recipient_text='Kreutzmann')]
  [u'Helge Kreutzmann']

  >>> [shipreq.recipient.preferredemail.email
  ...  for shipreq in requestset.search(recipient_text='Stuart.Bishop')]
  [u'stuart.bishop@canonical.com']

  >>> [shipreq.recipient.preferredemail.email
  ...  for shipreq in requestset.search(status=ShippingRequestStatus.PENDING,
  ...                                   recipient_text='marilize')]
  [u'marilize@hbd.com']


Exporting requests
------------------

When exporting requests, we'll want to get all approved requests that weren't
approved yet, with a given priority. This is done using the
getUnshippedRequestsIDs method of ShippingRequestSet.

  >>> import transaction
  >>> transaction.commit()
  >>> high = ShippingRequestPriority.HIGH
  >>> unshipped_requests = requestset.getUnshippedRequestsIDs(high)
  >>> len(unshipped_requests)
  1

To actually export the files and upload them to Librarian we use
ShippingRequestSet.exportRequestsToFiles(). Let's do an export of all high
priority requests.

  >>> from canonical.librarian.ftests.harness import LibrarianTestSetup
  >>> LibrarianTestSetup().setUp()

  >>> requestset.exportRequestsToFiles(high, transaction)
  >>> flush_database_updates()
  >>> run = ShippingRun.select(orderBy='-datecreated', limit=1)[0]
  >>> run.requests.count()
  1
  >>> run.requests[0].highpriority
  True
  >>> print run.csvfile.read()
  "recordnr","Ship to company","Ship to name","Ship to addr1","Ship to addr2","Ship to city","Ship to county","Ship to zip","Ship to country","Ship to phone","Ship to email address","ship Ubuntu quantity PC","ship Ubuntu quantity 64-bit PC","ship Ubuntu quantity Mac","ship Kubuntu quantity PC","ship Kubuntu quantity 64-bit PC","ship Kubuntu quantity Mac","ship Edubuntu quantity PC","ship Edubuntu quantity 64-bit PC","ship Edubuntu quantity Mac","token","Ship via","display"
  "16","Something","Jordi Mallach","Somewhere","in this world","whatever","not mandatory","999432423","IO","+55 16 3374-2027","jordi@ubuntu.com","0","0","0","5","0","0","5","0","0","...","TNT","0"
  <BLANKLINE>



Now we do an export of all normal priority requests that are ready to be
shipped, by running the shipit-exports cronscript.

  >>> sorted(requestset.getUnshippedRequestsIDs(ShippingRequestPriority.NORMAL))
  [1, 2, 3, 4, 5, 7]

  >>> import subprocess
  >>> process = subprocess.Popen(
  ...     'cronscripts/shipit-exports.py -q --priority=normal', shell=True,
  ...     stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  >>> (out, err) = process.communicate()
  >>> out, err
  ('', '')
  >>> process.returncode
  0

  >>> transaction.commit()
  >>> flush_database_updates()
  >>> len(requestset.getUnshippedRequestsIDs(ShippingRequestPriority.NORMAL))
  0
  >>> run = ShippingRun.select(orderBy='-datecreated', limit=1)[0]
  >>> sorted([request.id for request in run.requests])
  [1, 2, 3, 4, 5, 7]

  >>> run.requests[0].highpriority
  False

  >>> LibrarianTestSetup().tearDown()


Generating reports
------------------

To help Jane with marketing decisions, we need to generate periodic reports
based on shipit data.

One of the reports we can generate gives us information about orders shipped
to each country.

The generateCountryBasedReport() method accepts a current_release_only
argument that, if True, will include only requests of
ShipItConstants.current_distrorelease.

  >>> csv_file = requestset.generateCountryBasedReport(
  ...     current_release_only=False)
  >>> for line in csv_file.readlines():
  ...     line.strip()
  'Country,Shipped Ubuntu x86 CDs,Shipped Ubuntu AMD64 CDs,Shipped Ubuntu PPC CDs,Shipped Kubuntu x86 CDs,Shipped Kubuntu AMD64 CDs,Shipped Kubuntu PPC CDs,Shipped Edubuntu x86 CDs,Shipped Edubuntu AMD64 CDs,Shipped Edubuntu PPC CDs,Normal-prio shipments,High-prio shipments,Average request size,Percentage of requested CDs that were approved,Percentage of total shipped CDs,Continent'
  'Bermuda,8,1,1,0,0,0,0,0,0,1,0,10,100.00%,9.80%,North America'
  'British Indian Ocean Territory,9,6,10,6,5,0,5,0,0,3,1,10,100.00%,40.20%,Asia'
  'Burkina Faso,10,0,0,0,0,0,0,0,0,1,0,10,100.00%,9.80%,Africa'
  'China,0,1,0,0,0,0,0,0,0,1,0,1,100.00%,0.98%,Asia'
  'France,0,0,0,0,0,0,1,0,0,1,0,1,100.00%,0.98%,Europe'
  'Heard Island and McDonald Islands,5,0,0,0,0,0,0,0,0,1,0,5,100.00%,4.90%,Antarctica'
  'United States,9,6,9,0,0,0,0,0,0,1,0,24,100.00%,23.53%,North America'
  '\xc3\x85land Islands,0,0,0,8,2,0,0,0,0,0,1,10,100.00%,9.80%,Europe'

  >>> csv_file = requestset.generateCountryBasedReport(
  ...     current_release_only=True)
  >>> for line in csv_file.readlines():
  ...     line.strip()
  'Country,Shipped Ubuntu x86 CDs,Shipped Ubuntu AMD64 CDs,Shipped Ubuntu PPC CDs,Shipped Kubuntu x86 CDs,Shipped Kubuntu AMD64 CDs,Shipped Kubuntu PPC CDs,Shipped Edubuntu x86 CDs,Shipped Edubuntu AMD64 CDs,Shipped Edubuntu PPC CDs,Normal-prio shipments,High-prio shipments,Average request size,Percentage of requested CDs that were approved,Percentage of total shipped CDs,Continent'
  'Bermuda,8,1,1,0,0,0,0,0,0,3,0,3,100.00%,18.52%,North America'
  'British Indian Ocean Territory,0,0,1,6,5,0,5,0,0,3,2,3,100.00%,31.48%,Asia'
  'Burkina Faso,10,0,0,0,0,0,0,0,0,1,0,10,100.00%,18.52%,Africa'
  'China,0,1,0,0,0,0,0,0,0,1,0,1,100.00%,1.85%,Asia'
  'France,0,0,0,0,0,0,1,0,0,1,0,1,100.00%,1.85%,Europe'
  'Heard Island and McDonald Islands,5,0,0,0,0,0,0,0,0,1,0,5,100.00%,9.26%,Antarctica'
  '\xc3\x85land Islands,0,0,0,8,2,0,0,0,0,0,2,5,100.00%,18.52%,Europe'


There's another report which gives us the number of shipments of all shipment
sizes we had.

The generateShipmentSizeBasedReport() method accepts a current_release_only
argument that, if True, will include only requests of
ShipItConstants.current_distrorelease.

  >>> csv_file = requestset.generateShipmentSizeBasedReport(
  ...     current_release_only=False)
  >>> for line in csv_file.readlines():
  ...     line.strip()
  'Number of CDs,Number of Shipments'
  '1,2'
  '2,1'
  '5,2'
  '10,4'
  '24,2'

  >>> csv_file = requestset.generateShipmentSizeBasedReport(
  ...     current_release_only=True)
  >>> for line in csv_file.readlines():
  ...     line.strip()
  'Number of CDs,Number of Shipments'
  '1,2'
  '2,1'
  '5,2'
  '10,4'


There's also a report of requests by week.

  >>> start_date = date(2006, 1, 20)
  >>> end_date = date(2006, 4, 1)
  >>> csv_file = requestset.generateWeekBasedReport(start_date, end_date)
  >>> for line in csv_file.readlines():
  ...     line.strip()
  'Year,Week number,Requests,Ubuntu Requested PC CDs,Ubuntu Requested 64-bit PC CDs,Ubuntu Requested Mac CDs,Kubuntu Requested PC CDs,Kubuntu Requested 64-bit PC CDs,Kubuntu Requested Mac CDs,Edubuntu Requested PC CDs,Edubuntu Requested 64-bit PC CDs,Edubuntu Requested Mac CDs'
  '2006,4,0,0,0,0,0,0,0,0,0,0'
  '2006,5,1,8,1,1,0,0,0,0,0,0'
  '2006,6,0,0,0,0,0,0,0,0,0,0'
  '2006,7,0,0,0,0,0,0,0,0,0,0'
  '2006,8,0,0,0,0,0,0,0,0,0,0'
  '2006,9,5,10,0,1,6,5,0,6,0,0'
  '2006,10,2,10,0,0,0,0,0,5,0,0'
  '2006,11,1,0,0,0,8,2,0,0,0,0'
  '2006,12,0,0,0,0,0,0,0,0,0,0'
  '2006,13,1,5,0,0,0,0,0,0,0,0'


All these reports are generated periodically and stored in the Librarian by
the shipit-reports cronscript.

  >>> LibrarianTestSetup().setUp()

  >>> process = subprocess.Popen(
  ...     'cronscripts/shipit-reports.py -q', shell=True,
  ...     stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  >>> (out, err) = process.communicate()
  >>> out, err
  ('', '')
  >>> process.returncode
  0

  >>> LibrarianTestSetup().tearDown()
