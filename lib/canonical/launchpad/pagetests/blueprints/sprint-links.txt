It is possible to link a specification to a sprint. This pagetest does
that.

The process is a two-step one: first the spec is nominated for the sprint
agenda, and then it is approved. If, however, the person nominating the spec
also has permission to approve it, then it should be approved automatically
for the agenda.

First we open the page for the spec on Support <canvas> objects from the
sample data. We will use Sample Person, who has no special privileges.

  >>> browser.addHeader('Authorization', 'Basic test@canonical.com:test')
  >>> browser.open('http://blueprints.launchpad.dev/firefox/+spec/canvas')
  >>> browser.isHtml
  True
  >>> 'Accepted' in browser.contents # make sure the page is not polluted
  False
  >>> 'Proposed' in browser.contents # make sure the page is not polluted
  False

Then we are going to propose it for the meeting agenda:

  >>> browser.getLink('Propose for meeting agenda').click()
  >>> browser.title
  'Put blueprint on sprint agenda'

The page contains a link back to the blueprint, in case we change our
mind.

    >>> back_link = browser.getLink('Support <canvas> Objects')
    >>> back_link.url
    'http://blueprints.launchpad.dev/firefox/+spec/canvas'

Now  with a POST, we try to Add the spec to the Guacamole sprint.

  >>> sprint_field = browser.getControl(name='field.sprint')
  >>> sprint_field.value = ['uds-guacamole']
  >>> browser.getControl('Continue').click()
  >>> browser.url # we should have been redirected to the spec page
  'http://.../firefox/+spec/canvas'

Now we test to see if the sprint was added correctly to the
specification page.

  >>> 'uds-guacamole' in browser.contents
  True
  >>> 'Accepted' in browser.contents
  False
  >>> 'Proposed' in browser.contents
  True


Sprint Drivers
==============

The control of the sprint agenda is managed by the sprint drivers. These are
the registrant of the sprint, and the designated driver if one has been
assigned. This allows people to register a sprint and have a team of people
who then take charge of the agenda.

In the case above, the spec ended up "proposed". Now we will nominate a spec
to the Paris summit, for which Sample Person is the driver. This time, if we
nominate the spec as Sample Person, it should end up approved immediately.

It's VERY IMPORTANT that this test pass because we cannot test this in
doctests, since it depends on Browser View code to work (the database
classes don't know about their own permissions and security).

  >>> browser.open('http://blueprints.launchpad.dev/kubuntu/+spec/kde-desktopfile-langpacks')
  >>> 'Approved for the meeting agenda' in browser.contents
  False
  >>> browser.getLink('Propose for meeting agenda').click()
  >>> sprint_field = browser.getControl(name='field.sprint')
  >>> sprint_field.value = ['paris']
  >>> browser.getControl('Continue').click()
  >>> 'paris' in browser.contents
  True
  >>> 'Approved for the meeting agenda' in browser.contents
  True

Now, if we change our mind, we can go and decline the spec.

First, make sure the page has no "Declined" text.

  >>> 'Declined' not in browser.contents
  True

Now go and change that and verify.

  >>> browser.getLink('Approved').click()
  >>> browser.url
  'http://.../kubuntu/+spec/kde-desktopfile-langpacks/paris'
  >>> back_link = browser.getLink('KDE Desktop File Language Packs')
  >>> back_link.url
  'http://blueprints.launchpad.dev/kubuntu/+spec/kde-desktopfile-langpacks'
  >>> browser.getControl('Decline').click()
  >>> 'Declined for the meeting' not in browser.contents
  False

Alright. Now lets go accept it again.

  >>> browser.getLink('Declined').click()
  >>> browser.getControl('Accept').click()
  >>> 'Declined for the meeting' not in browser.contents
  True

And finally, we will test the Cancel button on that page.

  >>> browser.getLink('Approved').click()
  >>> browser.getControl('Cancel').click()
  >>> 'Declined for the meeting' not in browser.contents
  True

