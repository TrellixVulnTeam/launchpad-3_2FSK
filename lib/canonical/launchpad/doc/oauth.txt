= OAuth (http://oauth.net/core/1.0/) =

This is a mechanism for allowing a third party application to access
Launchpad on a user's behalf.  These applications are identified by a
unique key and are stored as OAuthConsumers.

These applications (also called consumers) are managed by the
OAuthConsumerSet utility.

    >>> from canonical.launchpad.webapp.testing import verifyObject
    >>> from canonical.launchpad.interfaces import (
    ...     IOAuthConsumer, IOAuthConsumerSet, IOAuthRequestToken,
    ...     IPersonSet, OAuthPermission)
    >>> consumer_set = getUtility(IOAuthConsumerSet)
    >>> verifyObject(IOAuthConsumerSet, consumer_set)
    True

    >>> consumer = consumer_set.new(key='asdfg')
    >>> verifyObject(IOAuthConsumer, consumer)
    True

    >>> consumer_set.getByKey('asdfg') == consumer
    True

    >>> print consumer_set.getByKey('gfdsa')
    None

As mentioned above, the keys are unique, so we can't create a second
Consumer with the same key.

    >>> consumer_set.new(key='asdfg')
    Traceback (most recent call last):
    ...
    AssertionError: ...

== Request tokens ==

When a consumer wants to access protected resources on Launchpad, it
must first ask for an OAuthRequestToken, which is then used when the
consumer sends the user to the Launchpad authorization page.  The
request tokens are created using IOAuthConsumer.newRequestToken().

    >>> request_token = consumer.newRequestToken()
    >>> verifyObject(IOAuthRequestToken, request_token)
    True

Initially, a token does not have a person or permission associated
with it as the consumer doesn't know what the user's identity is on
Launchpad.

    >>> print request_token.person
    None
    >>> print request_token.permission
    None
    >>> print request_token.date_reviewed
    None
