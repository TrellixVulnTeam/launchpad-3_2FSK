= Creating Branches =

In the past, there were two very distinct ways of creating branches
in Launchpad.  The first was to use the UI, and the other was to
push the branch to Launchpad.  The first method only created MIRRORED
branches, and the second only HOSTED.

Many users were confused with this, and tried to create HOSTED branches
using the user interface.  Now they can.


== Creating a hosted branch ==

Hosted branches use Launchpad as their primary location.

    >>> browser = setupBrowser(auth="Basic test@canonical.com:test")
    >>> browser.open('http://code.launchpad.dev/redfish')
    >>> browser.getLink("Register a branch").click()

    >>> browser.getControl('Hosted').click()
    >>> browser.getControl('Name').value = 'hosted-branch'

Branch URLs are not valid for hosted branches.

    >>> browser.getControl('Branch URL').value = (
    ...     'http://example.com/hosted-branch')
    >>> browser.getControl('Register Branch').click()
    >>> for message in get_feedback_messages(browser.contents):
    ...     print message
    There is 1 error.
    Branch URLs cannot be set for Hosted branches.

    >>> browser.getControl('Branch URL').value = ''
    >>> browser.getControl('Register Branch').click()

    >>> def print_branch_info(browser):
    ...     branch_info = find_tag_by_id(browser.contents, 'branch-info')
    ...     print extract_text(branch_info)
    >>> print_branch_info(browser)
    Branch information
    Project: Redfish (Unspecified)
    Owner: Sample Person
    Review team: Sample Person
    Status: Development


== Creating a mirrored branch ==

Mirrored branches are primarily hosted outside of Launchpad, and Launchpad
mirrors the branch.

    >>> browser.open('http://code.launchpad.dev/redfish')
    >>> browser.getLink("Register a branch").click()

    >>> # Show that mirrored is selected by default.
    >>> print_radio_button_field(browser.contents, 'branch_type')
    ( ) Hosted
    (*) Mirrored
    ( ) Remote
    >>> browser.getControl('Name').value = 'mirrored-branch'

Branch URLs are required for mirrored branches.

    >>> browser.getControl('Register Branch').click()
    >>> for message in get_feedback_messages(browser.contents):
    ...     print message
    There is 1 error.
    Branch URLs are required for Mirrored branches.

    >>> browser.getControl('Branch URL').value = (
    ...     'http://example.com/mirrored-branch')
    >>> browser.getControl('Register Branch').click()

    >>> print_branch_info(browser)
    Branch information
    Project: Redfish (Unspecified)
    Owner: Sample Person
    Review team: Sample Person
    Status: Development
    Location: http://example.com/mirrored-branch
    Last mirrored: Not mirrored yet
    Next mirror: As soon as possible


== Creating a remote branch ==

The contents of Remote branches are not accessible through Launchpad.

    >>> browser.open('http://code.launchpad.dev/redfish')
    >>> browser.getLink("Register a branch").click()

    >>> browser.getControl('Remote').click()
    >>> browser.getControl('Name').value = 'remote-branch'

A remote branch may have a URL, but doesn't have to.

    >>> browser.getControl('Branch URL').value = (
    ...     'http://example.com/remote-branch')
    >>> browser.getControl('Register Branch').click()
    >>> print_branch_info(browser)
    Branch information
    Project: Redfish (Unspecified)
    Owner: Sample Person
    Review team: Sample Person
    Status: Development
    Location: http://example.com/remote-branch


== Finding product/+addbranch ==

We should be able to create a new branch from a product.

First, check that the +addbranch link is visible on the product code
facet page.

    >>> user_browser.open('http://code.launchpad.dev/applets')
    >>> print user_browser.url
    http://code.launchpad.dev/applets

Let's make sure we can load the branch creation form on a product.

    >>> user_browser.getLink("Register a branch").click()
    >>> print user_browser.url
    http://code.launchpad.dev/applets/+addbranch


== Adding a branch to a product ==

Now, post the branch creation form for the product.

    >>> user_browser.open('http://launchpad.dev/applets/+addbranch')

The specified URL has a trailing slash. In the next test, we will check that it
has been stripped.

    >>> user_browser.getControl('Branch URL').value = (
    ...     'http://example.com/applets/main/')

    >>> user_browser.getControl('Name').value = 'main'
    >>> user_browser.getControl('Experimental').click()
    >>> user_browser.getControl('Register Branch').click()

Posting the form should succeed and redirect to the page of the newly
registered branch. We check that the final slash of the URL was stripped by
matching for the angle brackets of an enclosing tag.

    >>> user_browser.url
    'http://code.launchpad.dev/~no-priv/applets/main'

    >>> print extract_text(find_tag_by_id(user_browser.contents, 'privacy'))
    This branch is public
    >>> print extract_text(find_main_content(user_browser.contents))
    Gnome Applets ...
    lp://dev/~no-priv/applets/main ...
    ...http://example.com/applets/main...


This page includes a link to other branches associated
with that product, and a link to other branches maintained by that person.

    >>> print extract_text(find_tags_by_class(
    ...     user_browser.contents, 'related', only_first=True))
    Nearby
    Other Gnome Applets branches
    Other branches owned by No Privileges Person


== Finding person/+addbranch ==

The user is only able to register a branch where either they or a team
that they are a member of are the owner, so the 'Register branch' option
is only shown on the code pages for teams that the user is a member of,
and their own code page.

Since no-priv is not a member of lifeless, the Register branch link is not
shown.

    >>> user_browser.open('http://code.launchpad.dev/~lifeless')
    >>> user_browser.getLink("Register a branch")
    Traceback (most recent call last):
    ...
    LinkNotFoundError

    >>> browser.open('http://code.launchpad.dev/~landscape-developers')
    >>> browser.getLink("Register a branch").click()
    >>> print browser.getControl('Owner').displayValue
    ['Landscape Developers (landscape-developers)']

The user is able to change the owner of the branch to any team that
the user is a member of, or to themselves.

    >>> for option in browser.getControl('Owner').displayOptions:
    ...     print option
    Sample Person (name12)
    HWDB Team (hwdb-team)
    Landscape Developers (landscape-developers)
    Launchpad Users (launchpad-users)
    Ubuntu Gnome Team (name18)
    Warty Security Team (name20)


== Conflict on unique name ==

Trying to register a branch with a product and that matches an existing branch
owned by the user would cause a database integrity error, because the triplet
owner-product-name is unique for all branches.

For this example, we will use ~name12/gnome-terminal/main. Check that it
already exists.

    >>> browser.open(
    ...     'http://launchpad.dev/~name12/+branch/gnome-terminal/main')

Try a adding a conflicting branch from the product/+addbranch form.

    >>> browser.open('http://launchpad.dev/gnome-terminal/+addbranch')
    >>> browser.getControl('Branch URL').value = (
    ...     'http://example.com/gnome-terminal/main-dup')

Trying to post the form without filling a name at all should not cause an oops!

    >>> browser.getControl('Register Branch').click()
    >>> browser.url
    'http://launchpad.dev/gnome-terminal/+addbranch'

Now, complete the form, but give a name that is alredy in use for that owner
and product.

    >>> browser.getControl('Name').value = 'main'
    >>> browser.getControl('Register Branch').click()

That should give us the form back with an error message.

    >>> browser.url
    'http://launchpad.dev/gnome-terminal/+addbranch'
    >>> for message in get_feedback_messages(browser.contents):
    ...     print extract_text(message)
    There is 1 error.
    You already have a branch for GNOME Terminal called main.

If the user is trying to add a branch for a team that conflicts,
then the team name is given in the error message.

    >>> browser.open('http://launchpad.dev/gnome-terminal/+addbranch')
    >>> browser.getControl('Owner').displayValue = [
    ...     'Landscape Developers']
    >>> browser.getControl('Name').value = 'main'
    >>> browser.getControl('Hosted').click()
    >>> browser.getControl('Register Branch').click()
    >>> print browser.url
    http://code.launchpad.dev/~landscape-developers/gnome-terminal/main
    >>> for message in get_feedback_messages(browser.contents):
    ...     print extract_text(message)

Now registering again with the same name.

    >>> browser.open('http://launchpad.dev/gnome-terminal/+addbranch')
    >>> browser.getControl('Owner').displayValue = [
    ...     'Landscape Developers']
    >>> browser.getControl('Name').value = 'main'
    >>> browser.getControl('Hosted').click()
    >>> browser.getControl('Register Branch').click()
    >>> for message in get_feedback_messages(browser.contents):
    ...     print extract_text(message)
    There is 1 error.
    Landscape Developers already has a branch for GNOME Terminal called main.


== Checking URLs ==

URL validation should check that the entered URL is not the root of a site.

    >>> user_browser.open('http://code.launchpad.dev/firefox')
    >>> user_browser.getLink("Register a branch").click()
    >>> user_browser.getControl('Branch URL').value = 'http://example.com'
    >>> user_browser.getControl('Name').value = 'unique-name'
    >>> user_browser.getControl('Register Branch').click()
    >>> messages = find_tags_by_class(user_browser.contents, 'message')
    >>> for element in messages:
    ...     print element.renderContents()
    There is 1 error.
    URLs for branches cannot point to the root of a site.


URL validation should check that the entered URL is not from Launchpad.

    >>> user_browser.open('http://code.launchpad.dev/firefox')
    >>> user_browser.getLink("Register a branch").click()
    >>> user_browser.getControl('Branch URL').value = (
    ...     'http://code.launchpad.dev/~testuser/')
    >>> user_browser.getControl('Name').value = 'unique-name'
    >>> user_browser.getControl('Register Branch').click()
    >>> for message in get_feedback_messages(user_browser.contents):
    ...     print message
    There is 1 error.
    For Launchpad to mirror a branch, the original branch cannot be on
    launchpad.dev.

As well as checking against the root site set in the config, a check
is also done against the value stored as a database constraint.

    >>> user_browser.open('http://code.launchpad.dev/firefox')
    >>> user_browser.getLink("Register a branch").click()
    >>> user_browser.getControl('Branch URL').value = (
    ...     'http://bazaar.launchpad.net/foo/bar/')
    >>> user_browser.getControl('Name').value = 'unique-name'
    >>> user_browser.getControl('Register Branch').click()
    >>> for message in get_feedback_messages(user_browser.contents):
    ...     print message
    There is 1 error.
    For Launchpad to mirror a branch, the original branch cannot be on
    http://bazaar.launchpad.net.

Trailing slashes on URLs are removed.

    >>> user_browser.getControl('Branch URL').value = (
    ...     'sftp://example.com/~lifeless/pyresources/')
    >>> user_browser.getControl('Register Branch').click()
    >>> print_tag_with_id(user_browser.contents, 'branch-info')
    Branch information
    Project: ...
    ...
    Location: sftp://example.com/~lifeless/pyresources
    ...


== Attempting to create a branch in a forbidden project ==

The branch visibility policy for a product may specify that certain
groups of people cannot create branches.  An example of this in the
sample data is the landscape project.  Only landscape developers can
create branches for landscape.

When registering a branch from the product pages, there is no product widget,
so errors are set at the page level.

    >>> user_browser.open('http://code.launchpad.dev/landscape')
    >>> user_browser.getLink("Register a branch").click()
    >>> user_browser.getControl('Branch URL').value = 'http://foo.com/bar'
    >>> user_browser.getControl('Name').value = 'landscape1'
    >>> user_browser.getControl('Register Branch').click()
    >>> messages = find_tags_by_class(user_browser.contents, 'message')
    >>> for element in messages:
    ...     print element.renderContents()
    There is 1 error.
    You are not allowed to create branches in The Landscape Project.
