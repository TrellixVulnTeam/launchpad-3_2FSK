# Copyright 2010 Canonical Ltd.  This software is licensed under the
# GNU Affero General Public License version 3 (see the file LICENSE).

"""The innards of the Bug Heat cronscript."""

__metaclass__ = type
__all__ = [
    'BugHeatCalculator',
    ]


class BugHeatConstants:

    PRIVACY = 150
    SECURITY = 250
    DUPLICATE = 6
    AFFECTED_USER = 4
    SUBSCRIBER = 2


class BugHeatCalculator:
    """A class to calculate the heat for a bug."""

    def __init__(self, bug):
        self.bug = bug

    def _getHeatFromPrivacy(self):
        """Return the heat generated by the bug's `private` attribute."""
        if self.bug.private:
            return BugHeatConstants.PRIVACY
        else:
            return 0

    def _getHeatFromSecurity(self):
        """Return the heat generated if the bug is security related."""
        if self.bug.security_related:
            return BugHeatConstants.SECURITY
        else:
            return 0

    def _getHeatFromDuplicates(self):
        """Return the heat generated by the bug's duplicates."""
        return self.bug.duplicates.count() * BugHeatConstants.DUPLICATE

    def _getHeatFromAffectedUsers(self):
        """Return the heat generated by the bug's affected users."""
        return (
            self.bug.users_affected.count() * BugHeatConstants.AFFECTED_USER)

    def _getHeatFromSubscribers(self):
        """Return the heat generated by the bug's subscribers."""
        direct_subscribers = self.bug.getDirectSubscribers()
        subscribers_from_dupes = self.bug.getSubscribersFromDuplicates()

        subscriber_count = (
            len(direct_subscribers) + len(subscribers_from_dupes))
        return subscriber_count * BugHeatConstants.SUBSCRIBER

    def getBugHeat(self):
        """Return the total heat for the current bug."""
        total_heat = sum([
            self._getHeatFromAffectedUsers(),
            self._getHeatFromDuplicates(),
            self._getHeatFromPrivacy(),
            self._getHeatFromSecurity(),
            self._getHeatFromSubscribers(),
            ])

        return total_heat

