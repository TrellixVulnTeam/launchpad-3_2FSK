
Ticket Tracking System
======================

Launchpad includes a tech support ticket tracker. Tickets are created and
accessed using the ITicketTarget interface. This interface is available on
products, distributions and sourcepackages.

    (Some of the attributes of the ITicketTarget interface are only
    available to logged in users.)
    >>> login('no-priv@canonical.com')

    >>> from zope.interface.verify import verifyObject
    >>> from canonical.launchpad.interfaces import (
    ...     IDistributionSet, IProductSet, IPersonSet, ITicketTarget)

    >>> firefox = getUtility(IProductSet)['firefox']
    >>> verifyObject(ITicketTarget, firefox)
    True

    >>> ubuntu = getUtility(IDistributionSet).getByName('ubuntu')
    >>> verifyObject(ITicketTarget, ubuntu)
    True

    >>> firefox_package = ubuntu.currentrelease.getSourcePackage(
    ...     'mozilla-firefox')
    >>> verifyObject(ITicketTarget, firefox_package)
    True

You create a new ticket by calling the newTicket() method of an ITicketTarget
attribute.

    >>> sample_person = getUtility(IPersonSet).getByEmail('test@canonical.com')
    >>> firefox_ticket = firefox.newTicket(
    ...     sample_person, "Firefox ticket", "Unable to use Firefox")

(The complete ITicketTarget interface is documented in
../interfaces/ftests/tickettarget.txt.)

ITicket
-------

Tickets are manipulated through the ITicket interface:

    >>> from canonical.launchpad.interfaces import ITicket
    >>> verifyObject(ITicket, firefox_ticket)
    True

The person who submitted the ticket is available in the owner field.

    >>> firefox_ticket.owner == sample_person
    True

When the ticket is created, the owner is added to the ticket's subscribers:

    >>> sample_person in [s.person for s in firefox_ticket.subscriptions]
    True

The ticket status is 'Open':

    >>> firefox_ticket.status.title
    'Open'

And the creation time is recorded in the datecreated attribute:

    >>> from datetime import datetime, timedelta
    >>> from pytz import UTC
    >>> now = datetime.now(UTC)
    >>> now - firefox_ticket.datecreated < timedelta(seconds=5)
    True

The target onto which the ticket was created is available throught the target
attribute:

    >>> firefox_ticket.target == firefox
    True

Subscriptions and Notifications
-------------------------------

Whenever a ticket is created or changed, email notifications will be
sent. To receive such notification, one can subscribe to the bug using
the subscribe() method.

    >>> no_priv = getUtility(IPersonSet).getByName('no-priv')
    >>> subscription = firefox_ticket.subscribe(no_priv)

The list of subscriptions is available in the subscriptions attribute.
In the current case, the subscribers will include the owner
('Sample Person') and the newly subscribed person.

    >>> [s.person.displayname for s in firefox_ticket.subscriptions]
    [u'Sample Person', u'No Privileges Person']

To remove a person from the subscriptions list, we use the unsubscribe()
method.

    >>> firefox_ticket.unsubscribe(no_priv)
    >>> [s.person.displayname for s in firefox_ticket.subscriptions]
    [u'Sample Person']

The persons who are on the subscription list are said to be directly
subscribed to the ticket. They explicitely choose to get notifications
about that particular ticket. This list of persons is available through
the getDirectSubscribers() method.

    >>> [person.displayname
    ...     for person in firefox_ticket.getDirectSubscribers()]
    [u'Sample Person']

There is also a list of 'indirect' subscribers to the ticket. These
are persons that didn't explicitely subscribed to the ticket, but that
will receive notifications for other reason. The only current reason is
because they are a support contact for the ticket target.

    (There is no support contact on the firefox product)
    >>> [person.displayname
    ...     for person in firefox_ticket.getIndirectSubscribers()]
    []
    >>> firefox.addSupportContact(no_priv)
    True
    >>> import operator
    >>> notified = sorted(firefox_ticket.getIndirectSubscribers(),
    ...                   key=operator.attrgetter('displayname'))
    >>> [person.displayname for person in notified]
    [u'No Privileges Person']

There is a special case for when the ticket's is associated to a source
package. The support contacts for both the distribution and the source
package are part of the indirect subscribers list.

    (Let's register some support contacts for the distribution and
    the package.)
    >>> list(ubuntu.support_contacts)
    []
    >>> list(firefox_package.support_contacts)
    []
    >>> ubuntu_team = getUtility(IPersonSet).getByName('ubuntu-team')
    >>> ubuntu.addSupportContact(ubuntu_team)
    True
    >>> firefox_package.addSupportContact(no_priv)
    True
    >>> package_ticket = firefox_package.newTicket(
    ...     sample_person, 'Upgrading to Firefox 1.5 breaks theme',
    ...     "The FnordsHighlighter theme doesn't work after upgrade.")
    >>> [s.person.displayname for s in package_ticket.subscriptions]
    [u'Sample Person']
    >>> notified = sorted(package_ticket.getIndirectSubscribers(),
    ...                   key=operator.attrgetter('displayname'))
    >>> [person.displayname for person in notified]
    [u'No Privileges Person', u'Ubuntu Team']

Notifications are sent to the list of direct and indirect subscribers.
The notification recipients list can be obtained by using the
getSubscribers() method.

    >>> notified = sorted(firefox_ticket.getSubscribers(),
    ...                   key=operator.attrgetter('displayname'))
    >>> [person.displayname for person in notified]
    [u'No Privileges Person', u'Sample Person']

(More documentation on the ticket notifications can be found in
'ticket-notifications.txt'.)

ITicket Workflow
----------------

The ticket status is usually changed through methods implementating the ticket
workflow.

Sample Person was the one who filed the ticket, so he can reject the
ticket if he thinks it's not relevant anymore:

    >>> firefox_ticket.reject(sample_person)
    True
    >>> firefox_ticket.status.title
    'Invalid'

He can also reopen it:

    >>> firefox_ticket.reopen(sample_person)
    <TicketReopening at ...>
    >>> firefox_ticket.status.title
    'Open'

Now let's log in as another, non admin, user to show that anyone can edit a
ticket. First of all the title and description don't say much about the
problem, so let's ask Sample Person to clarify.

    >>> login('no-priv@canonical.com')
    >>> no_priv = getUtility(ILaunchBag).user

    >>> now_plus_one_hour = (now + timedelta(hours=1))

    >>> comment = firefox_ticket.newMessage(
    ...     no_priv, firefox_ticket.followup_subject,
    ...     'Could you please describe what the problem is?',
    ...     when=now_plus_one_hour)

When some other Person than the submitter comments on a ticket,
datelastresponse gets set to the comment's creation date.

    >>> firefox_ticket.datelastresponse == now_plus_one_hour
    True

The comment returned by newMessage is an object providing the
ITicketMessage interface.

    >>> from canonical.launchpad.interfaces import ITicketMessage
    >>> verifyObject(ITicketMessage, comment)
    True

We also assign the ticket to ourselves to show that we're working on
the issue.

    >>> firefox_ticket.assignee = no_priv

Sample Person replies:

    >>> now_plus_two_hours = now_plus_one_hour + timedelta(hours=1)
    >>> login('test@canonical.com')
    >>> sample_person = getUtility(ILaunchBag).user
    >>> comment = firefox_ticket.newMessage(
    ...     sample_person, firefox_ticket.followup_subject,
    ...     'When I start Firefox, all I get is a blank page. I want to '
    ...     'have a search page at start-up?',
    ...     when=now_plus_two_hours)

When the submitter adds a comment, datelastquery gets set to the
comment's date:

    >>> firefox_ticket.datelastresponse == now_plus_one_hour
    True
    >>> firefox_ticket.datelastquery == now_plus_two_hours
    True

Now it's clear what the problem is, so let's edit the title and
description to describe the problem:

    >>> login('no-priv@canonical.com')
    >>> firefox_ticket.title = 'No home page is set.'
    >>> firefox_ticket.description = (
    ...     'When Firefox is started, an empty page is shown. I want a '
    ...     'search page to be shown.')

Let's help Sample Person with his problem by providing an answer:

    >>> comment = firefox_ticket.newMessage(
    ...     no_priv, firefox_ticket.followup_subject,
    ...     "Go to 'http://www.google.com', enter the preferences "
    ...     "dialog, and choose 'Use Current Page'.",
    ...     when=now_plus_two_hours + timedelta(minutes=30))


Sample Person is happy with the answer, so he closes the ticket:

    >>> login('test@canonical.com')
    >>> now_plus_three_hours = now_plus_two_hours + timedelta(hours=1)
    >>> comment = firefox_ticket.newMessage(
    ...     sample_person, firefox_ticket.followup_subject, 'Thanks!',
    ...     when=now_plus_three_hours)
    >>> firefox_ticket.acceptAnswer(sample_person, when=now_plus_three_hours)
    >>> firefox_ticket.status.title
    'Answered'

Since No Privileges Person was the last, non-submitter, to comment on
the ticket, he's considered as the one who answered it:

    >>> print firefox_ticket.answerer.displayname
    No Privileges Person
    >>> firefox_ticket.dateanswered == now_plus_three_hours
    True

The comments posted on a ticket are available through the messages
attribute.

    >>> for msg in firefox_ticket.messages:
    ...     print "%-30s %10s %10s" % (
    ...         msg.owner.displayname, msg.action.title, msg.newstatus.title)
    No Privileges Person              Comment       Open
    Sample Person                     Comment       Open
    No Privileges Person              Comment       Open
    Sample Person                     Comment       Open

Bug Linking
-----------

Ticket implements the IBugLinkTarget interface which makes it possible to
link bug report to ticket.

    >>> from canonical.launchpad.interfaces import IBugLinkTarget
    >>> verifyObject(IBugLinkTarget, firefox_ticket)
    True

(See buglink.txt for the documentation and test of the IBugLinkTarget
interface.)

When a bug is linked to a ticket, the ticket's owner is subscribed to the bug.

    >>> from canonical.launchpad.interfaces import IBugSet
    >>> bug7 = getUtility(IBugSet).get(7)
    >>> bug7.isSubscribed(firefox_ticket.owner)
    False
    >>> firefox_ticket.linkBug(bug7)
    <TicketBug...>
    >>> bug7.isSubscribed(firefox_ticket.owner)
    True

When the link is removed, the owner is unsubscribed:

    >>> firefox_ticket.unlinkBug(bug7)
    <TicketBug...>
    >>> bug7.isSubscribed(firefox_ticket.owner)
    False

ITicketSet
----------

ITicketSet can be used to get a ticket with a specific id:

    >>> from canonical.launchpad.interfaces import ITicketSet
    >>> ticket_set = getUtility(ITicketSet)
    >>> verifyObject(ITicketSet, ticket_set)
    True

    >>> ticket_one = ticket_set.get(1)
    >>> ticket_one.title
    u'Firefox cannot render Bank Site'

If no ticket exists, a default value is returned:

    >>> default = object()
    >>> ticket_nonexistant = ticket_set.get(123456, default=default)
    >>> ticket_nonexistant is default
    True

If no default value is given, None is returned:

    >>> ticket_set.get(123456) is None
    True
