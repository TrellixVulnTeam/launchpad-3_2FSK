= Exceptions on the web service =

Exceptions on the LAZR web service are handled like other exceptions
occurring during zope publication: a view is looked-up and used to
return the response to the client.


== WebServiceExceptionView ==

WebServiceExcpetionView is a generic view class that can handle
exceptions during web service requests.

    >>> from canonical.lazr.rest.error import WebServiceExceptionView

That view returns the exception message as content, and sets the
result code to the one specified using the webservice_error() directive.

    >>> from canonical.lazr.rest.declarations import webservice_error
    >>> class InvalidInput(Exception):
    ...     """Client provided by input."""
    ...     webservice_error(400)

It also prints a traceback of the exception based on a configuration
variable or if the logged in user is a developer.

    >>> from textwrap import dedent
    >>> from canonical.config import config
    >>> from canonical.lazr.testing.webservice import FakeRequest

    >>> from zope.component import provideUtility
    >>> from zope.interface import implements
    >>> from canonical.launchpad.webapp.interfaces import ILaunchBag
    >>> class FakeLaunchBag:
    ...     implements(ILaunchBag)
    ...     developer = False
    >>> the_launchbag = FakeLaunchBag()
    >>> provideUtility(the_launchbag, ILaunchBag)

    >>> config.push('traceback_off', dedent('''
    ...     [canonical]
    ...     show_tracebacks: False'''))

    >>> def render_error_view(error, request):
    ...     """Create a WebServiceExceptionView to render the exception.
    ...
    ...     The exception is raised, because exception view can be expected
    ...     to be called from within an exception handler.
    ...     """
    ...     try:
    ...         raise error
    ...     except Exception, error:
    ...         return WebServiceExceptionView(error, request)()

In the simple case where the user is not a developer and tracebacks are
off, the view simpy return the exception message and set the status code
to the one related to the exception.

    >>> request = FakeRequest()
    >>> render_error_view(
    ...     InvalidInput("foo@bar isn't a valid email address"), request)
    "foo@bar isn't a valid email address"
    >>> request.response.headers['Content-Type']
    'text/plain'
    >>> request.response.status
    400

When the request contains an OOPSID, it will be set in the X-Lazr-OopsId
header:

    >>> print request.response.headers.get('X-Lazr-OopsId')
    None
    >>> request = FakeRequest()
    >>> request.oopsid = 'OOPS-001'
    >>> ignored = render_error_view(InvalidInput('bad email'), request)
    >>> print request.response.headers['X-Lazr-OopsId']
    OOPS-001

A traceback dump is included in the response if the show_tracebacks
variable is on, or if the user is a developer.

    >>> the_launchbag.developer = True
    >>> print render_error_view(InvalidInput('bad email'), request)
    bad email
    <BLANKLINE>
    Traceback (most recent call last):
     ...
    InvalidInput: bad email

    >>> the_launchbag.developer = False
    >>> config.push('traceback_on', dedent('''
    ...     [canonical]
    ...     show_tracebacks: True'''))

    >>> print render_error_view(InvalidInput('bad email'), request)
    bad email
    <BLANKLINE>
    Traceback (most recent call last):
     ...
    InvalidInput: bad email

    >>> ignored = config.pop('traceback_off')

