Package Bug Contact
===================

The package bug contact is zero, one or more people or teams that get
explicitly Cc'd to all public bugs filed on a package.

The package bug contacts are obtained from looking at the
PackageBugContact table.

The list of package bug contacts are accessed through the
IDistributionSourcePackage.bugcontacts attribute. When there are no
contacts associated with a package, an empty list is returned:

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.interfaces import (
    ...     IDistributionSet, IDistributionSourcePackage)

    >>> debian = getUtility(IDistributionSet).getByName("debian")
    >>> debian_firefox = debian.getSourcePackage("mozilla-firefox")

    >>> debian_firefox.bugcontacts
    []

Adding a package bug contact is done with the
IDistributionSourcePackage.addBugContact method. You have to be logged
in to call this method:

    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> sample_person = getUtility(IPersonSet).get(12)

    >>> debian_firefox.addBugContact(sample_person)
    Traceback (most recent call last):
      ...
    Unauthorized: ...

Let's login then to add a bugcontact:

    >>> from canonical.launchpad.ftests import login
    >>> login("foo.bar@canonical.com")

    >>> debian_firefox.addBugContact(sample_person)
    >>> [pbc.bugcontact.name for pbc in debian_firefox.bugcontacts]
    [u'name12']

Trying to add a bug contact to a package when that person or team is
already one of the bug contacts on that package will raise a
DuplicateBugContactError.

    >>> debian_firefox.addBugContact(sample_person)
    Traceback (most recent call last):
      ...
    DuplicateBugContactError: ...

Let's add an ITeam as one of the bug contacts:

    >>> ubuntu_team = getUtility(IPersonSet).get(17)
    >>> debian_firefox.addBugContact(ubuntu_team)

    >>> sorted([pbc.bugcontact.name for pbc in debian_firefox.bugcontacts])
    [u'name12', u'name17']

To remove a bug contact, use IDistributionSourcePackage.removeBugContact:

    >>> debian_firefox.removeBugContact(sample_person)
    >>> sorted([pbc.bugcontact.id for pbc in debian_firefox.bugcontacts])
    [17]

Trying to remove a bug contact that doesn't exist on a source package raises a
DeleteBugContactError.

    >>> foobar = getUtility(IPersonSet).get(16)
    >>> print foobar.name
    name16
    >>> debian_firefox.removeBugContact(foobar)
    Traceback (most recent call last):
      ...
    DeleteBugContactError: ...

To find out if an IPerson or ITeam is bug contact, use
IDistributionSourcePackage.isBugContact. For pragmatic reasons (in particular,
it makes the implementation of some of IDistributionSourcePackage's other
methods simpler) IDistributionSourcePackage.isBugContact will return either the
appropriate PackageBugContact record or False:

    >>> debian_firefox.isBugContact(ubuntu_team)
    <PackageBugContact ...>
    >>> debian_firefox.isBugContact(foobar)
    False

Package Bug Contacts and Bug Tasks
----------------------------------

Often a bug gets reported on package foo, when it should have been
reported on bar. When a user, likely a bug triager or developer, changes
the source package, the bug contacts for the new package get
subscribed. The bug contacts of the previous package also remain
subscribed.

To demonstrate, let's change the source package for bug #1 in
mozilla-firefox in Ubuntu to be pmount in Ubuntu, and see how the
subscribers list changes.

    >>> from canonical.launchpad.interfaces import IBugTaskSet

    >>> ubuntu = getUtility(IDistributionSet).getByName("ubuntu")

    >>> ubuntu_firefox = ubuntu.getSourcePackage("mozilla-firefox")
    >>> ubuntu_pmount = ubuntu.getSourcePackage("pmount")

    >>> bug_one_in_ubuntu_firefox = getUtility(IBugTaskSet).get(17)

Foo Bar, a package bug contact for ubuntu mozilla-firefox and ubuntu
pmount is currently not subscribed to bug 1.

    >>> sorted(
    ...     [subscription.person.displayname for subscription in
    ...      bug_one_in_ubuntu_firefox.bug.subscriptions])
    [u'Sample Person', u'Steve Alexander']

Changing the package for bug_one_in_ubuntu_firefox to pmount will
subscribe Foo Bar to the bug:

    >>> from zope.event import notify

    >>> import transaction
    >>> from canonical.launchpad.event.sqlobjectevent import (
    ...     SQLObjectModifiedEvent)
    >>> from canonical.launchpad.helpers import capture_state
    >>> from canonical.launchpad.components.bugtask import mark_task
    >>> from canonical.launchpad.interfaces import IDistroBugTask
    >>> from canonical.launchpad.mail import stub

    >>> old_state = capture_state(
    ...     bug_one_in_ubuntu_firefox, "id", "status", "severity",
    ...     "binarypackagename", "sourcepackagename", "priority",
    ...     "assignee", "bugwatch", "milestone", "distribution")

    >>> mark_task(old_state, IDistroBugTask)

    >>> bug_one_in_ubuntu_firefox.sourcepackagename = (
    ...     ubuntu_pmount.sourcepackagename)

    >>> source_package_changed = SQLObjectModifiedEvent(
    ...     bug_one_in_ubuntu_firefox, old_state,
    ...     ["id", "title", "sourcepackagename"])

    >>> notify(source_package_changed)
    >>> transaction.commit()

With the source package changed, we can see that Foo Bar is now
subscribed:

    >>> sorted(
    ...     [subscription.person.displayname for subscription in
    ...      bug_one_in_ubuntu_firefox.bug.subscriptions])
    [u'Foo Bar', u'Sample Person', u'Steve Alexander']

Foo Bar is sent an email giving him complete information about the bug
that has just been retargeted, including the title, description, status,
priority, etc.

    >>> import email

    >>> def by_to_addrs(a, b):
    ...     return cmp(a[1], b[1])

    >>> test_emails = list(stub.test_emails)
    >>> test_emails.sort(by_to_addrs)

    >>> len(test_emails)
    4
    >>> from_addr, to_addr, raw_message = test_emails.pop(1)
    >>> print from_addr
    bounces@canonical.com
    >>> print to_addr
    ['foo.bar@canonical.com']

    >>> msg = email.message_from_string(raw_message)
    >>> msg['Subject']
    '[Bug 1] Firefox does not support SVG'
    >>> print msg.get_payload(decode=True)
    Public bug reported:
    http://.../malone/bugs/...

If a bug is private, no changes are made to the subscriber list when a
bug is reassigned to a different package. So, if Mark Shuttleworth
becomes a bug contact for ubuntu mozilla-firefox:

    >>> sabdfl = getUtility(IPersonSet).get(1)
    >>> ubuntu_firefox.addBugContact(sabdfl)

and the bug is made private:

    >>> bug_one_in_ubuntu_firefox.bug.private = True

and then the bug gets reassigned to mozilla firefox:

    >>> old_state = capture_state(
    ...     bug_one_in_ubuntu_firefox, "id", "status", "severity",
    ...     "binarypackagename", "sourcepackagename", "priority",
    ...     "assignee", "bugwatch", "milestone", "distribution")

    >>> mark_task(old_state, IDistroBugTask)

    >>> bug_one_in_ubuntu_firefox.sourcepackagename = (
    ...     ubuntu_firefox.sourcepackagename)

    >>> source_package_changed = SQLObjectModifiedEvent(
    ...     bug_one_in_ubuntu_firefox, old_state,
    ...     ["id", "title", "sourcepackagename"])

    >>> notify(source_package_changed)

the bug contacts remain unchanged:

    >>> sorted(
    ...     [subscription.person.displayname for subscription in
    ...      bug_one_in_ubuntu_firefox.bug.subscriptions])
    [u'Foo Bar', u'Sample Person', u'Steve Alexander']
