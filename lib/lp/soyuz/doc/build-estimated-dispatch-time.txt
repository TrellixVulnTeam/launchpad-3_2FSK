In order to exercise the estimation of build job start times a setup
with one job building and another job pending/waiting is to be created.

Activate the builders present in sampledata; we need to be logged in
as a member of launchpad-buildd-admin:

    >>> from canonical.launchpad.ftests import login
    >>> login('celso.providelo@canonical.com')
    >>> from canonical.launchpad.interfaces import IBuilderSet
    >>> builder_set = getUtility(IBuilderSet)

Do we have two builders?

    >>> builder_set.count()
    2

These are the builders available.

    >>> from canonical.launchpad.ftests import syncUpdate
    >>> for b in builder_set:
    ...     b.builderok = True
    ...     print "builder: name='%s', id=%d" % (b.name, b.id)
    ...     syncUpdate(b)
    builder: name='bob', id=1
    builder: name='frog', id=2

The 'alsa-utils' package is the one to be built (in the ubuntu/hoary
distroseries).

    >>> from canonical.launchpad.interfaces import IDistributionSet
    >>> ubuntu = getUtility(IDistributionSet)['ubuntu']
    >>> hoary = ubuntu['hoary']
    >>> hoary.main_archive.require_virtualized
    False

    >>> from lp.registry.interfaces.pocket import (
    ...     PackagePublishingPocket)
    >>> alsa_hoary = hoary.getSourcePackage('alsa-utils')
    >>> alsa_spr = alsa_hoary['1.0.9a-4'].sourcepackagerelease
    >>> print alsa_spr.title
    alsa-utils - 1.0.9a-4

Create new Build and BuildQueue instances (in ubuntu/hoary/i386) for
the pending job.

    >>> from datetime import timedelta
    >>> from canonical.launchpad.interfaces import BuildStatus
    >>> alsa_build = alsa_spr.createBuild(
    ...     hoary['i386'], PackagePublishingPocket.RELEASE,
    ...     hoary.main_archive)
    >>> alsa_bqueue = alsa_build.createBuildQueueEntry()
    >>> alsa_bqueue.lastscore = 500
    >>> alsa_build.buildstate = BuildStatus.NEEDSBUILD

Access the currently building job via the builder.

    >>> from datetime import datetime
    >>> import pytz
    >>> UTC = pytz.timezone('UTC')
    >>> bob_the_builder = builder_set.get(1)
    >>> cur_bqueue = bob_the_builder.currentjob
    >>> cur_build = cur_bqueue.build

Make sure the job at hand is currently being built.

    >>> from canonical.launchpad.interfaces import BuildStatus
    >>> cur_build.buildstate == BuildStatus.BUILDING
    True

The start time estimation mechanism for a pending job N depends on
proper "build start time" and "estimated build duration" values for
other jobs that are either currently building or pending but ahead
of job N in the build queue. These values will now be set for the job
that is currently building.

    >>> cur_bqueue.lastscore = 1111
    >>> cur_bqueue.buildstart = datetime(2008, 4, 1, 10, 45, 39,
    ...                                  tzinfo=UTC)
    >>> print cur_bqueue.buildstart
    2008-04-01 10:45:39+00:00

Please note that the "estimated build duration" is an internal property
and not meant to be viewed or modified by an end user.

    >>> from zope.security.proxy import removeSecurityProxy
    >>> naked_build = removeSecurityProxy(cur_build)
    >>> naked_build.estimated_build_duration = timedelta(minutes=56)

The estimated start time for the pending job is either now or lies
in the future.

    >>> now = datetime.utcnow()
    >>> estimate = alsa_build.getEstimatedBuildStartTime()
    >>> estimate > now
    True

The estimated build start time may only be requested for jobs that are
pending.

    >>> cur_build.getEstimatedBuildStartTime()
    Traceback (most recent call last):
    ...
    AssertionError: The start time is only estimated for pending builds.

Now let's add two PPA packages to the mix in order to show how builds
associated with disabled archives get ignored when it comes to the calculation
of estimated dispatch times.

We first add a build for the 'pmount' source package to cprov's PPA.

    >>> from lp.registry.interfaces.person import IPersonSet
    >>> cprov = getUtility(IPersonSet).getByName('cprov')
    >>> [pmount_source] = cprov.archive.getPublishedSources(
    ...     name='pmount', version='0.1-1')
    >>> pmount_spr = pmount_source.sourcepackagerelease
    >>> print pmount_spr.title
    pmount - 0.1-1

    >>> pmount_build = pmount_spr.createBuild(
    ...     hoary['i386'], PackagePublishingPocket.RELEASE, cprov.archive)
    >>> pmount_bqueue = pmount_build.createBuildQueueEntry()
    >>> pmount_bqueue.lastscore = 66
    >>> pmount_build.buildstate = BuildStatus.NEEDSBUILD
    >>> naked_build = removeSecurityProxy(pmount_build)
    >>> naked_build.estimated_build_duration = timedelta(minutes=12)

Followed by another build for the 'iceweasel' source package that is added
to mark's PPA.

    >>> mark = getUtility(IPersonSet).getByName('mark')
    >>> [iceweasel_source] = cprov.archive.getPublishedSources(
    ...     name='iceweasel', version='1.0')
    >>> iceweasel_spr = iceweasel_source.sourcepackagerelease
    >>> print iceweasel_spr.title
    iceweasel - 1.0

    >>> iceweasel_build = iceweasel_spr.createBuild(
    ...     hoary['i386'], PackagePublishingPocket.RELEASE, mark.archive)
    >>> iceweasel_bqueue = iceweasel_build.createBuildQueueEntry()
    >>> iceweasel_bqueue.lastscore = 666
    >>> iceweasel_build.buildstate = BuildStatus.NEEDSBUILD
    >>> naked_build = removeSecurityProxy(iceweasel_build)
    >>> naked_build.estimated_build_duration = timedelta(minutes=48)

Since the 'iceweasel' build has a higher score (666) than the 'pmount'
build (66) its estimated dispatch time is essentially "now".

    >>> now = datetime.utcnow()
    >>> estimate = iceweasel_build.getEstimatedBuildStartTime()
    >>> estimate > now
    True
    >>> estimate - now
    datetime.timedelta(0, 0, ...)

The 'pmount' build comes next in the queue and its estimated dispatch
time is the estimated build time of the 'iceweasel' package i.e. 2880
seconds (48 minutes * 60).

    >>> estimate = pmount_build.getEstimatedBuildStartTime()
    >>> estimate > now
    True
    >>> estimate - now
    datetime.timedelta(0, 2880, ...)

Now mark's PPA will be disabled. This has the effect that all builds
associated with it (i.e. the 'iceweasel' build) are ignored while
calculating the estimated dispatch time and the latter becomes effectively
"now" for the 'pmount' build.

    >>> mark.archive.enabled = False
    >>> syncUpdate(mark.archive)
    >>> estimate = pmount_build.getEstimatedBuildStartTime()
    >>> estimate > now
    True
    >>> estimate - now
    datetime.timedelta(0, 0, ...)
