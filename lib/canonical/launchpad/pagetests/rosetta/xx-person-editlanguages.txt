= A person's +editlanguages page =

Carlos is a translator who translates things into Spanish with Rosetta.
He is on Rosetta About page and wants to change his preferred languages.

    >>> browser = setupBrowser(auth='Basic carlos@canonical.com:test')
    >>> browser.open('http://translations.launchpad.dev/translations/+about')

So, he looks for the 'Your preferred languages' portlet for the
'Select Languages...' link, and clicks on that which will take him to
his +editlanguages page.

    >>> portlet = find_portlet(browser.contents, 'Your languages')
    >>> print extract_text(portlet.find('ul'))
    Catalan
    Spanish
    >>> browser.getLink('Select Languages...').click()
    >>> print extract_text(find_main_content(browser.contents).find('h1'))
    Your language preferences

So far, he has Spanish selected as one of his preferred languages, but
not Welsh. English is checked but it is not a translatable language.

    >>> browser.getControl('Catalan').selected
    True
    >>> browser.getControl('Spanish').selected
    True
    >>> browser.getControl('Welsh').selected
    False
    >>> browser.getControl('English', index=0).selected
    True

Now let's suppose that Carlos decides that he doesn't like Spanish
after all, and that Welsh is a much nicer language. When he adjusts
his preferences, Spanish will no longer be selected, and Welsh will.

    >>> browser.getControl('Spanish').selected = False
    >>> browser.getControl('Welsh').selected = True
    >>> browser.getControl('Save').click()

After he submits the form, he should again be redirected back to
Rosetta's About page. The 'Your preferred languages' portlet displays
his two translatable languages. The page displays two messages
confirming his changes. The 'Your preferred languages' portlet
displays his translatable languages.

    >>> for message in find_tags_by_class(browser.contents, 'message'):
    ...     print message.renderContents()
    Added Welsh to your preferred languages.
    Removed Spanish from your preferred languages.

    # XXX: salgado 2006-11-21 bug 98437:
    # This test is commented out because redirects will not work
    # because the HTTP_REFFERER is localhost.
    #>>> browser.url
    #'http://launchpad.dev/translations/+about'
    >>> browser.open('http://translations.launchpad.dev/translations/+about')
    >>> portlet = find_portlet(browser.contents, 'Your languages')
    >>> print extract_text(portlet.find('ul'))
    Catalan
    Welsh

Joao, a Brazilian, travels to Liechtenstein for business and views the
languages page from there.

    >>> browser = setupBrowser('Basic test@canonical.com:test')
    >>> # Fake request from a Liechtenstein IP address by setting
    >>> # X-Forwarded-For in the http header, like a proxy would.
    >>> browser.addHeader('X-Forwarded-For', '87.239.200.0')
    >>> browser.addHeader('Accept-Language', 'pt_br, Espa\xf1ol')
    >>> browser.open(
    ...     'http://translations.launchpad.dev/~name12/+editlanguages')

Since Joao doesn't have a preferred language set, Launchpad determines
it from the browser headers.  His secondary language choice, Spanish, is
misconfigured (the language name is not spelled in proper UTF-8) but the
pt_br language code is recognized properly.

    >>> portlet = find_tag_by_id(browser.contents, 'portlet-browser-languages')
    >>> print extract_text(portlet)
    Your browser languages
    Portuguese (Brazil)

Launchpad detects that the requesting IP address (87.239.200.0) is in a
range assigned to Liechtenstein.

    >>> country_portlet = find_portlet(browser.contents,
    ...     'Languages in Liechtenstein')
    >>> country_portlet is None
    False

The system has no information about languages spoken in Liechtenstein,
so instead Joao is shown how to provide the administrators with this
information.

    >>> def find_spoken_languages(spoken_in):
    ...     """Screen-scrape list of "spoken-in" languages out of html."""
    ...     list_items = spoken_in.findAll('li', 'language')
    ...     return [li.contents for li in list_items]

    >>> print find_spoken_languages(country_portlet)
    []
    >>> print country_portlet.first('a')['href']
    https://answers.launchpad.net/rosetta/

Back home in Brazil, Joao gets the equivalent for Brazil, where the
equivalent information is known.

    >>> browser = setupBrowser('Basic test@canonical.com:test')
    >>> browser.addHeader('X-Forwarded-For', '201.68.7.102')
    >>> browser.open(
    ...     'http://translations.launchpad.dev/~name12/+editlanguages')
    >>> country_portlet = find_portlet(browser.contents,
    ...     'Languages in Brazil')
    >>> print find_spoken_languages(country_portlet)
    [[u'Portuguese (Brazil)']]

We also have a page under the launchpad root, called +editmylanguages,
with launchpad.AnyPerson as permission. This is the page to which we
direct non-logged in users to edit their preferred languages.

    >>> anon_browser.handleErrors = True
    >>> anon_browser.open('http://launchpad.dev/+editmylanguages')
    >>> anon_browser.url
    'http://launchpad.dev/+editmylanguages/+login'

    >>> anon_browser.open('http://launchpad.dev/+editmylanguages/+login')
    >>> anon_browser.getControl('E-mail address:', index=0).value = (
    ...     'no-priv@canonical.com')
    >>> anon_browser.getControl('Password:').value = 'test'
    >>> anon_browser.getControl(name='loginpage_submit_login').click()
    >>> anon_browser.url
    'http://launchpad.dev/~no-priv/+editlanguages'


== Adding languages to teams ==

Team admins may set their team's preferred languages to select the
which languages they support in the Answer Tracker. Sample Person
is the admin for Landscape Developers. He decides he wants the team
to support Spanish questions for Ubuntu, so he sets the team's
preferred languages.

    >>> browser = setupBrowser(auth='Basic test@canonical.com:test')
    >>> browser.open('http://launchpad.dev/~landscape-developers')
    >>> browser.title
    'Landscape Developers in Launchpad'

    >>> browser.getLink('Set preferred languages').click()
    >>> print extract_text(find_main_content(browser.contents).find('h1'))
    Landscape Developers's language preferences

    >>> browser.getControl('Spanish').selected = True
    >>> browser.getControl('Save').click()
    >>> for message in find_tags_by_class(browser.contents, 'message'):
    ...     print extract_text(message)
    Added Spanish to Landscape Developers's preferred languages.


== Admins may set a Person's languages ==

Admins can change a user's language settings if needed. Foo Bar, a
Launchpad Admin has a question from No Privileges Person claiming that
he cannot add Esperanto to his languages. Foo Bar visits No Privileges
Person's page to do it himself.

    >>> admin_browser.open('http://launchpad.dev/~no-priv')
    >>> admin_browser.title
    'No Privileges Person in Launchpad'

    >>> admin_browser.getLink('Set preferred languages').click()
    >>> print extract_text(
    ...     find_main_content(admin_browser.contents).find('h1'))
    No Privileges Person's language preferences

    >>> admin_browser.getControl('Esperanto').selected = True
    >>> admin_browser.getControl('Save').click()
    >>> for message in find_tags_by_class(admin_browser.contents, 'message'):
    ...     print extract_text(message)
    Added Esperanto to No Privileges Person's preferred languages.    
