If a branch fails to mirror, that information is displayed in the mirror's
page, together with the last failure message we got when mirroring.

    >>> browser = setupBrowser(
    ...     auth='Basic james.blackwell@ubuntulinux.com:jblack')
    >>> browser.open('http://launchpad.dev/~jblack/+junk/devel-1.0')
    >>> def print_browser_tag(browser, tag_id):
    ...     tag = find_tag_by_id(browser.contents, tag_id)
    ...     if tag is None:
    ...         print tag
    ...     else:
    ...         print extract_text(tag)
    >>> print_browser_tag(browser, 'mirror-failure')
    Launchpad has not been able to mirror this branch. The last attempt
    was ...
    (I do not like Arch, so I am pretending it failed to mirror.).
    Launchpad will try again shortly.

Someone who is a bazaar expert is also able to see the detailed message.

    >>> ddaa_browser = setupBrowser(
    ...     auth='Basic david.allouche@canonical.com:test')
    >>> ddaa_browser.open('http://launchpad.dev/~jblack/+junk/devel-1.0')
    >>> print_browser_tag(ddaa_browser, 'mirror-failure')
    Launchpad has not been able to mirror this branch. The last attempt
    was ...
    (I do not like Arch, so I am pretending it failed to mirror.).
    Launchpad will try again shortly.

Launchpad admins can also see the detailed message.

    >>> admin_browser.open('http://launchpad.dev/~jblack/+junk/devel-1.0')
    >>> print_browser_tag(admin_browser, 'mirror-failure')
    Launchpad has not been able to mirror this branch. The last attempt
    was ...
    (I do not like Arch, so I am pretending it failed to mirror.).
    Launchpad will try again shortly.

If the user is not logged in, or is not the owner of the branch (or
not in some expert team like bazaar experts, or Launchpad Admins) they
get a summary failure message.

    >>> anon_browser.open('http://launchpad.dev/~jblack/+junk/devel-1.0')
    >>> print_browser_tag(anon_browser, 'mirror-failure')
    This branch has not been mirrored, as Launchpad has been unable to
    access it.

If a branch failed to mirror but no failure message was stored, we properly
report the absence of an error message.

    >>> admin_browser.open('http://launchpad.dev/~stevea/thunderbird/main')
    >>> print_browser_tag(admin_browser, 'mirror-failure')
    This branch may be out of date, as Launchpad was not able to
    access it ... (no error message available).
    Launchpad will try again shortly.

If a branch has a sftp or bzr+ssh URL, immediately display an error message
(even before mirroring is attempted) and do not display the mirror failure
message.

XXX: We need to use flush_database_updates before every commit for the test
browser to see the changes we make to the content object. See bug 3989.
-- David Allouche 2007-03-23

    >>> import transaction
    >>> from canonical.database.sqlbase import flush_database_updates
    >>> from canonical.launchpad.database import BranchSet
    >>> thunderbird_main = BranchSet().getByUniqueName(
    ...     '~stevea/thunderbird/main')
    >>> thunderbird_main.url = 'sftp://example.com/thunderbird'
    >>> flush_database_updates()
    >>> transaction.commit()
    >>> anon_browser.open('http://launchpad.dev/~stevea/thunderbird/main')
    >>> print_browser_tag(anon_browser, 'mirror-failure')
    None
    >>> print_browser_tag(anon_browser, 'mirror-of-ssh')
    Launchpad cannot mirror this branch because its URL uses sftp or bzr+ssh.


Ultimately, if a branch was successfully mirrored, then we obviously won't
display any failure-related information.

    >>> anon_browser.open('http://launchpad.dev/~name12/gnome-terminal/2.6')
    >>> print_browser_tag(anon_browser, 'mirror-failure')
    None


If a remote branch specifies an url with the scheme 'sftp' or 'bzr+ssh'
then there is no error shown.

    >>> from canonical.launchpad.testing import LaunchpadObjectFactory
    >>> factory = LaunchpadObjectFactory()
    >>> from canonical.launchpad.ftests import ANONYMOUS, login, logout
    >>> login(ANONYMOUS)
    >>> from canonical.launchpad.interfaces import BranchType
    >>> remote_branch = factory.makeBranch(
    ...     BranchType.REMOTE,
    ...     url='bzr+ssh://example.com/remote/branch')
    >>> from canonical.launchpad.webapp import canonical_url
    >>> branch_location = canonical_url(remote_branch)
    >>> flush_database_updates()
    >>> transaction.commit()
    >>> logout()

    >>> browser = setupBrowser()
    >>> browser.open(branch_location)
    >>> print find_tag_by_id(browser.contents, 'mirror-failure')
    None
    >>> print find_tag_by_id(browser.contents, 'mirror-of-ssh')
    None


A hosted branch with an error message does show a mirror-failure.

    >>> login(ANONYMOUS)
    >>> hosted_branch = factory.makeBranch()
    >>> hosted_branch.mirrorFailed(
    ...     'Some weird internal failure.')
    >>> branch_location = canonical_url(hosted_branch)
    >>> flush_database_updates()
    >>> transaction.commit()
    >>> logout()

    >>> browser = setupBrowser()
    >>> browser.open(branch_location)
    >>> print_browser_tag(browser, 'mirror-failure')
    Some weird internal failure.
