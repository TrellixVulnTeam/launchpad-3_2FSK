= NascentUpload Announcements =

NascentUpload announces uploads according its final status (NEW,
AUTO-APPROVED, UNAPPROVED) and its destination pocket:

 * NEW to RELEASE (via insecure): submitter set (changes signer,
   Changed-by and maintainer) receives an 'new' warning message.

 * UNAPPROVED to frozen-RELEASE/UPDATES/BACKPORTS/PROPOSED (via insecure):
   submitter set receives an 'unapproved' warning (announcement is
   sent after the upload gets reviewed by archive-admin at queue time).

 * AUTO-APPROVED to RELEASE (via insecure): submitter set receives an
   'acceptance' warning and the target distroseries changeslist
   address receives an 'announcement' message.

 * AUTO-APPROVED to BACKPORTS (via sync): submitter set receives an
   'acceptance' warning ('announcement' is skipped).

 * AUTO-APPROVED sources to SECURITY (via security): submitter set
   receives an 'acceptance' warning and the target distroseries
   changeslist address receives an 'announcement' message.

 * AUTO-APPROVED binaries to SECURITY (via security): submitter set
   receives only an 'acceptance' warning ('announcement' is skipped).

 * NEW, AUTO-APPROVED or UNAPPROVED source uploads targeted to section
   'translations' (all policies, all pockets) do not generate any
   messages. Remembering that NEW and UNAPPROVED messages are also
   suppressed in 'queue' application.

It's important to notice that all types of upload-notification
contains the special header 'X-Katie', its presence is checked by
third part application and also in our changeslist (gutsy-changes@).
See further information in bug #121752.

We need to be logged into the security model in order to get any further

  >>> login('foo.bar@canonical.com')

Helper functions to examine emails that were sent:

  >>> import email
  >>> from canonical.launchpad.mail import stub
  >>> def by_to_addrs(a, b):
  ...     return cmp(a[1], b[1])
  >>> from canonical.launchpad.tests.mail_helpers import pop_notifications

For the purpose of this test, hoary needs to be an open (development)
distroseries so that we can upload to it. Also adjust 'changeslist'
address:

  >>> from canonical.launchpad.interfaces import (
  ...     DistroSeriesStatus, IDistributionSet)
  >>> ubuntu = getUtility(IDistributionSet)['ubuntu']
  >>> hoary = ubuntu['hoary']
  >>> hoary.status = DistroSeriesStatus.DEVELOPMENT
  >>> hoary.changeslist = "hoary-announce@lists.ubuntu.com"

NEW source upload to RELEASE pocket via 'sync' policy (it presents
the same behaviour than using insecure policy, apart from allowing
unsigned changes):

  >>> from canonical.archiveuploader.nascentupload import NascentUpload
  >>> from canonical.archiveuploader.tests import (
  ...    datadir, getPolicy, mock_logger, mock_logger_quiet)

  >>> sync_policy = getPolicy(
  ...     name='sync', distro='ubuntu', distroseries='hoary')

  >>> bar_src = NascentUpload(
  ...     datadir('suite/bar_1.0-1/bar_1.0-1_source.changes'),
  ...     sync_policy, mock_logger_quiet)
  >>> bar_src.process()

  >>> bar_src.logger = mock_logger
  >>> result = bar_src.do_accept()
  DEBUG: Creating queue entry
  ...
  DEBUG: Sent a mail:
  ...
  DEBUG: NEW: bar_1.0.orig.tar.gz
  DEBUG: NEW: bar_1.0-1.diff.gz
  DEBUG: NEW: bar_1.0-1.dsc
  ...
  DEBUG: above if files already exist in other distroseries.
  ...
  DEBUG: -- 
  DEBUG: You are receiving this email because you are the uploader, maintainer or
  DEBUG: signer of the above package.

There is only one email generated:

  >>> [notification] = pop_notifications()

  >>> notification['X-Katie']
  'Launchpad actually'

  >>> notification['Subject']
  'New: bar 1.0-1 (source)'

  >>> notification['To']
  'Daniel Silverstone <daniel.silverstone@canonical.com>'

Let's ACCEPT bar sources in order to make the next uploads of this
series *known* in hoary:

  >>> bar_src.queue_root.setAccepted()
  >>> bar_src.queue_root.realiseUpload()

Make the uploaded orig file available to librarian lookups

  >>> import transaction
  >>> transaction.commit()

Ensure the previous transaction is *really* in the database before the next
test:

  >>> from canonical.launchpad.ftests import syncUpdate
  >>> syncUpdate(bar_src.queue_root)

Uploading the same package again will result in a rejection email:

  >>> bar_src = NascentUpload(
  ...     datadir('suite/bar_1.0-1/bar_1.0-1_source.changes'),
  ...     sync_policy, mock_logger_quiet)
  >>> bar_src.process()

  >>> bar_src.logger = mock_logger
  >>> result = bar_src.do_accept()
  DEBUG: Creating queue entry
  DEBUG: Setting it to ACCEPTED
  ...
  DEBUG: Sending rejection email.
  ...
  DEBUG: Rejected:
  DEBUG: The source bar - 1.0-1 is already accepted in ubuntu/hoary and you cannot upload the same version within the same distribution. You have to modify the source version and re-upload.
  ...

  >>> [notification] = pop_notifications()

  >>> notification['X-Katie']
  'Launchpad actually'

  >>> notification['To']
  'Daniel Silverstone <daniel.silverstone@canonical.com>'


NEW binary upload to RELEASE pocket via 'sync' policy (we need to
override sync policy to allow binary uploads):

  >>> modified_sync_policy = getPolicy(
  ...     name='sync', distro='ubuntu', distroseries='hoary')
  >>> modified_sync_policy.can_upload_binaries = True

  >>> bar_src = NascentUpload(
  ...     datadir('suite/bar_1.0-1_binary/bar_1.0-1_i386.changes'),
  ...     modified_sync_policy, mock_logger_quiet)
  >>> bar_src.process()

  >>> bar_src.logger = mock_logger
  >>> result = bar_src.do_accept()
  DEBUG: Creating queue entry
  DEBUG: Not sending email, upload contains binaries.

We simply ignore messages generated at this step because they are not
going to exist in production. We simply need this binary to be published
in order to test other features in post-release pockets.

   >>> ignore = pop_notifications()

Let's accept & publish bar binary in order to make the next uploads of
this series *known* in hoary:

  >>> bar_src.queue_root.setAccepted()
  >>> bar_src.queue_root.realiseUpload()


NEW source uploads for 'translations' section via sync policy:

  >>> modified_sync_policy = getPolicy(
  ...     name='sync', distro='ubuntu', distroseries='hoary')

  >>> lang_pack = NascentUpload(
  ...     datadir('language-packs/language-pack-pt_1.0-1_source.changes'),
  ...     modified_sync_policy, mock_logger_quiet)
  >>> lang_pack.process()

  >>> lang_pack.logger = mock_logger
  >>> result = lang_pack.do_accept()
  DEBUG: Creating queue entry
  DEBUG: Skipping acceptance and announcement, it is a language-package upload.

  >>> lang_pack.queue_root.status.name
  'NEW'

No messages were generated since this upload is targeted for the
'translation' section:

  >>> transaction.commit()
  >>> len(stub.test_emails)
  0

Accept and publish this series:

  >>> lang_pack.queue_root.setAccepted()
  >>> lang_pack.queue_root.realiseUpload()


AUTO_APPROVED source uploads for 'translations' section:

  >>> modified_sync_policy = getPolicy(
  ...     name='sync', distro='ubuntu', distroseries='hoary')

  >>> lang_pack = NascentUpload(
  ...     datadir('language-packs/language-pack-pt_1.0-2_source.changes'),
  ...     modified_sync_policy, mock_logger_quiet)
  >>> lang_pack.process()

  >>> lang_pack.logger = mock_logger
  >>> result = lang_pack.do_accept()
  DEBUG: Creating queue entry
  DEBUG: Setting it to ACCEPTED
  DEBUG: Creating PENDING publishing record.
  DEBUG: Skipping acceptance and announcement, it is a language-package upload.

  >>> lang_pack.queue_root.status.name
  'DONE'

Again, no messages were generated since this upload is targeted for
'translation' section:

  >>> transaction.commit()
  >>> len(stub.test_emails)
  0


Release hoary, enable uploads to post-release pockets:

  >>> hoary.status = DistroSeriesStatus.CURRENT


Import the test keys to use 'insecure' policy.

  >>> from canonical.launchpad.ftests import import_public_test_keys
  >>> import_public_test_keys()


UNAPPROVED source uploads for 'translations' section via insecure:

  >>> insecure_policy = getPolicy(
  ...     name='insecure', distro='ubuntu', distroseries=None)
  >>> insecure_policy.setDistroSeriesAndPocket('hoary-updates')

  >>> lang_pack = NascentUpload(
  ...     datadir('language-packs/language-pack-pt_1.0-3_source.changes'),
  ...     insecure_policy, mock_logger_quiet)
  >>> lang_pack.process()
  >>> lang_pack.logger = mock_logger
  >>> result = lang_pack.do_accept()
  DEBUG: Creating queue entry
  DEBUG: Setting it to UNAPPROVED
  DEBUG: Skipping acceptance and announcement, it is a language-package upload.

  >>> lang_pack.queue_root.status.name
  'UNAPPROVED'

UNAPPROVED message was also skipped for an upload targeted to
'translation' section:

  >>> transaction.commit()
  >>> len(stub.test_emails)
  0


An UNAPPROVED binary upload via insecure will send one email saying that
the upload is waiting for approval:

  >>> bar_src = NascentUpload(
  ...     datadir('suite/bar_1.0-2/bar_1.0-2_source.changes'),
  ...     insecure_policy, mock_logger_quiet)
  >>> bar_src.process()

  >>> bar_src.logger = mock_logger
  >>> result = bar_src.do_accept()
  DEBUG: Creating queue entry
  ...

  >>> [notification] = pop_notifications()

  >>> notification['X-Katie']
  'Launchpad actually'

  >>> notification['To']
  'Foo Bar <foo.bar@canonical.com>,\n\tDaniel Silverstone <daniel.silverstone@canonical.com>'

  >>> notification['Subject']
  'Waiting for approval: bar 1.0-2 (source)'


UNAPPROVED upload to BACKPORTS via insecure policy will send a notification
saying they are waiting for approval:

  >>> unapproved_backports_policy = getPolicy(
  ...     name='insecure', distro='ubuntu', distroseries=None)
  >>> unapproved_backports_policy.setDistroSeriesAndPocket('hoary-backports')
  >>> bar_src = NascentUpload(
  ...     datadir('suite/bar_1.0-3_valid/bar_1.0-3_source.changes'),
  ...     unapproved_backports_policy, mock_logger_quiet)
  >>> bar_src.process()
  >>> bar_src.logger = mock_logger
  >>> result = bar_src.do_accept()
  DEBUG: Creating queue entry
  DEBUG: Setting it to UNAPPROVED
  ...

  >>> [notification] = pop_notifications()

  >>> notification['X-Katie']
  'Launchpad actually'

  >>> notification['To']
  'Foo Bar <foo.bar@canonical.com>,\n\tDaniel Silverstone <daniel.silverstone@canonical.com>'

  >>> notification['Subject']
  'Waiting for approval: bar 1.0-3 (source)'


AUTO-APPROVED upload to BACKPORTS pocket via 'sync' policy:

  >>> modified_sync_policy = getPolicy(
  ...     name='sync', distro='ubuntu', distroseries=None)
  >>> modified_sync_policy.setDistroSeriesAndPocket('hoary-backports')

  >>> bar_src = NascentUpload(
  ...     datadir('suite/bar_1.0-4/bar_1.0-4_source.changes'),
  ...     modified_sync_policy, mock_logger_quiet)
  >>> bar_src.process()

  >>> bar_src.logger = mock_logger
  >>> result = bar_src.do_accept()
  DEBUG: Creating queue entry
  DEBUG: Setting it to ACCEPTED
  DEBUG: Creating PENDING publishing record.
  DEBUG: Building recipients list.
  ...
  DEBUG: Skipping announcement, it is a BACKPORT.
  DEBUG: Sent a mail:
  ...
  DEBUG: Accepted:
  DEBUG:  OK: bar_1.0.orig.tar.gz
  DEBUG:  OK: bar_1.0-4.diff.gz
  DEBUG:  OK: bar_1.0-4.dsc
  DEBUG:      -> Component: main Section: devel
  ...
  DEBUG: Announcing to hoary-announce@lists.ubuntu.com
  DEBUG:
  DEBUG: Thank you for your contribution to Ubuntu Linux.
  ...
  DEBUG: -- 
  DEBUG: You are receiving this email because you are the uploader, maintainer or
  DEBUG: signer of the above package.

There is one email generated:

  >>> [notification] = pop_notifications()

  >>> notification['X-Katie']
  'Launchpad actually'

  >>> notification['To']
  'Celso Providelo <celso.providelo@canonical.com>'

  >>> notification['Subject']
  'Accepted: bar 1.0-4 (source)'

Remove orig.tar.gz pumped from librarian to disk during the upload
checks:

 >>> import os
 >>> os.remove(os.path.join(datadir('suite/bar_1.0-4'), 'bar_1.0.orig.tar.gz'))


AUTO-APPROVED source upload to SECURITY pocket via 'security' policy:

  >>> security_policy = getPolicy(
  ...     name='security', distro='ubuntu', distroseries=None)
  >>> security_policy.setDistroSeriesAndPocket('hoary-security')

  >>> bar_src = NascentUpload(
  ...     datadir('suite/bar_1.0-2/bar_1.0-2_source.changes'),
  ...     security_policy, mock_logger_quiet)
  >>> bar_src.process()

  >>> bar_src.logger = mock_logger
  >>> result = bar_src.do_accept()
  DEBUG: Creating queue entry
  DEBUG: Setting it to ACCEPTED
  DEBUG: Creating PENDING publishing record.
  DEBUG: Building recipients list.
  ...
  DEBUG: Sent a mail:
  ...
  DEBUG: Accepted:
  DEBUG:  OK: bar_1.0.orig.tar.gz
  DEBUG:  OK: bar_1.0-2.diff.gz
  DEBUG:  OK: bar_1.0-2.dsc
  DEBUG:      -> Component: main Section: devel
  ...
  DEBUG: Announcing to hoary-announce@lists.ubuntu.com
  ...

  >>> import operator
  >>> msgs = pop_notifications(sort_key=operator.itemgetter('To'))
  >>> len(msgs)
  2

  >>> [message['To'] for message in msgs]
  ['Daniel Silverstone <daniel.silverstone@canonical.com>', 'hoary-announce@lists.ubuntu.com']

  >>> [message['Subject'] for message in msgs]
  ['Accepted: bar 1.0-2 (source)', 'Accepted: bar 1.0-2 (source)']

  >>> [message['X-Katie'] for message in msgs]
  ['Launchpad actually', 'Launchpad actually']

Remove orig.tar.gz pumped from librarian to disk during the upload
checks:

 >>> os.remove(os.path.join(datadir('suite/bar_1.0-2'), 'bar_1.0.orig.tar.gz'))


DEBIAN SYNC upload of a source via the 'sync' policy.
These uploads do not generate any announcement emails for auto-accepted
packages, just the upload notification.

Make hoary developmental again, as syncs only happen at that stage of a
distroseries.

  >>> hoary.status = DistroSeriesStatus.DEVELOPMENT

  >>> bar_src = NascentUpload(
  ...     datadir(
  ...          'suite/bar_1.0-5_debian_auto_sync/bar_1.0-5_source.changes'),
  ...     sync_policy, mock_logger_quiet)
  >>> bar_src.process()

  >>> bar_src.logger = mock_logger
  >>> result = bar_src.do_accept()
  DEBUG: Creating queue entry
  ...

One email generated:

  >>> [notification] = pop_notifications()
  >>> notification['Subject']
  'Accepted: bar 1.0-5 (source)'


In contrast, manual sync uploads do generate the announcement:

  >>> bar_src = NascentUpload(
  ...     datadir(
  ...          'suite/bar_1.0-6/bar_1.0-6_source.changes'),
  ...     sync_policy, mock_logger_quiet)
  >>> bar_src.process()

  >>> bar_src.logger = mock_logger
  >>> result = bar_src.do_accept()
  DEBUG: Creating queue entry
  ...

Two emails generated:

  >>> msgs = pop_notifications(sort_key=operator.itemgetter('To'))
  >>> len(msgs)
  2

  >>> [message['To'] for message in msgs]
  ['Celso Providelo <celso.providelo@canonical.com>',
      'hoary-announce@lists.ubuntu.com']

  >>> [message['Subject'] for message in msgs]
  ['Accepted: bar 1.0-6 (source)', 'Accepted: bar 1.0-6 (source)']

Reset hoary back to released and remove disk files created during processing:

  >>> hoary.status = DistroSeriesStatus.CURRENT
  >>> os.remove(os.path.join(datadir('suite/bar_1.0-5_debian_auto_sync'),
  ...     'bar_1.0.orig.tar.gz'))
  >>> os.remove(os.path.join(datadir('suite/bar_1.0-6'),
  ...     'bar_1.0.orig.tar.gz'))


AUTO-APPROVED binary upload to SECURITY pocket via 'security' policy:

  >>> security_policy = getPolicy(
  ...     name='security', distro='ubuntu', distroseries=None)
  >>> security_policy.setDistroSeriesAndPocket('hoary-security')

  >>> bar_bin = NascentUpload(
  ...     datadir('suite/bar_1.0-2_binary/bar_1.0-2_i386.changes'),
  ...     security_policy, mock_logger_quiet)
  >>> bar_bin.process()

  >>> bar_bin.logger = mock_logger
  >>> result = bar_bin.do_accept()
  DEBUG: Creating queue entry
  DEBUG: Setting it to ACCEPTED
  DEBUG: Building recipients list.
  ...
  DEBUG: Skipping announcement, it is a binary upload to SECURITY.
  DEBUG: Sent a mail:
  ...
  DEBUG: Accepted:
  DEBUG:  OK: bar_1.0-2_i386.deb
  ...
  DEBUG: Thank you for your contribution to Ubuntu Linux.
  ...
  DEBUG: -- 
  DEBUG: You are receiving this email because you are the uploader, maintainer or
  DEBUG: signer of the above package.

One email generated:

  >>> [notification] = pop_notifications()

  >>> notification['X-Katie']
  'Launchpad actually'

  >>> notification['To']
  'Daniel Silverstone <daniel.silverstone@canonical.com>'

  >>> notification['Subject']
  'Accepted: bar 1.0-2 (i386)'


A mixed mode upload to the SECURITY pocket via the 'security' policy
will generate a notification to the uploader and an announcement to
the distroseries changes list.

First, upload and accept foo_1.0-1_mixed to make 'foo' source
and binary known in hoary, then our operations in post-release
pockets can work:

  >>> hoary.status = DistroSeriesStatus.DEVELOPMENT
  >>> modified_sync_policy = getPolicy(
  ...     name='sync', distro='ubuntu', distroseries='hoary')
  >>> modified_sync_policy.can_upload_mixed = True
  >>> modified_sync_policy.can_upload_binaries = True
  >>> modified_sync_policy.can_upload_source = True
  >>> foo_v1 = NascentUpload(
  ...     datadir('suite/foo_1.0-1_mixed/foo_1.0-1_i386.changes'),
  ...     modified_sync_policy, mock_logger_quiet)
  >>> foo_v1.process()
  >>> result = foo_v1.do_accept()
  >>> foo_v1.queue_root.setAccepted()
  >>> foo_v1.queue_root.realiseUpload()
  >>> hoary.status = DistroSeriesStatus.CURRENT

Get rid of any emails generated:

  >>> msgs = pop_notifications()

Now we can upload a security fix:

  >>> security_policy = getPolicy(
  ...     name='security', distro='ubuntu', distroseries=None)
  >>> security_policy.setDistroSeriesAndPocket('hoary-security')
  >>> foo_mixed = NascentUpload(
  ...     datadir('suite/foo_1.0-2.1/foo_1.0-2.1_source.changes'),
  ...     security_policy, mock_logger_quiet)
  >>> foo_mixed.process()
  >>> foo_mixed.logger = mock_logger
  >>> result = foo_mixed.do_accept()
  DEBUG: Creating queue entry
  ...

Two emails generated:

  >>> msgs = pop_notifications(sort_key=operator.itemgetter('To'))
  >>> len(msgs)
  2

  >>> [message['To'] for message in msgs]
  ['Daniel Silverstone <daniel.silverstone@canonical.com>',
    'hoary-announce@lists.ubuntu.com']

  >>> [message['Subject'] for message in msgs]
  ['Accepted: foo 1.0-2.1 (source)', 'Accepted: foo 1.0-2.1 (source)']

  >>> [message['X-Katie'] for message in msgs]
  ['Launchpad actually', 'Launchpad actually']


Dry run uploads should not generate any emails.  Call do_accept with
notify=False:

  >>> sync_policy = getPolicy(
  ...     name='sync', distro='ubuntu', distroseries='hoary')

  >>> bar_src = NascentUpload(
  ...     datadir('suite/bar_1.0-1/bar_1.0-1_source.changes'),
  ...     sync_policy, mock_logger_quiet)
  >>> bar_src.process()

  >>> bar_src.logger = mock_logger
  >>> result = bar_src.do_accept(notify=False)

No emails generated:

  >>> msgs = pop_notifications()
  >>> len(msgs)
  0

Rejections with notify=False will also not generate any emails.

  >>> result = bar_src.do_reject(notify=False)
  >>> msgs = pop_notifications()
  >>> len(msgs)
  0

The PackageUpload record created by NascentUpload will be in the NEW
state if the package was not previously uploaded.  When accepted by an
archive admin using the queue tool, the queue tool will call
PackageUpload.notify() directly.  One of the arguments it can specify is
dry_run, which when True will not send any emails.  It will also log at
the INFO level what it /would/ have sent.

  >>> from canonical.launchpad.interfaces import PackageUploadStatus
  >>> random_package_upload = hoary.getQueueItems()[2]
  >>> random_package_upload.notify(dry_run=True, logger=mock_logger)
  DEBUG: Building recipients list.
  ...
  INFO: Would have sent a mail:
  INFO:   Subject: Accepted: bar 1.0-2 (i386)
  INFO:   Sender: Root <root@localhost>
  INFO:   Recipients: Daniel Silverstone <daniel.silverstone@canonical.com>
  INFO:   Bcc: Root <root@localhost>
  INFO:   Body:
  INFO: Accepted:
  INFO:  OK: bar_1.0-2_i386.deb
  ...

No emails generated:

  >>> msgs = pop_notifications()
  >>> len(msgs)
  0

Uploads with UTF-8 characters in email addresses in the changes file are 
permitted, but converted to ASCII, which is a limitation of the mailer.
However, UTF-8 in the mail content is preserved.

  >>> hoary.status = DistroSeriesStatus.DEVELOPMENT
  >>> anything_policy = getPolicy(
  ...     name='anything', distro='ubuntu', distroseries='hoary')
  >>> bar_upload = NascentUpload(
  ...     datadir(
  ...         'suite/bar_1.0-10_utf8_changesfile/bar_1.0-10_source.changes'),
  ...     anything_policy, mock_logger_quiet)
  >>> bar_upload.process()

  >>> bar_upload.logger = mock_logger
  >>> result = bar_upload.do_accept()
  DEBUG: Creating queue entry
  ...

  >>> msgs = pop_notifications(sort_key=operator.itemgetter('To'))
  >>> len(msgs)
  2

"Cihar" should actually be "Čihař" but the mailer will convert to ASCII.

  >>> [message['From'] for message in msgs]
  ['Root <root@localhost>', 'Non-ascii changed-by Cihar <daniel.silverstone@canonical.com>']

UTF-8 text in the changes file that is sent on the email is preserved
in the MIME encoding.

  >>> print msgs[0].get_payload() # doctest: -NORMALIZE_WHITESPACE
  Accepted:
  ...
  Maintainer: Non-ascii maintainer =C4=8Ciha=C5=99 <launchpad@lists.canonical=
  .com>
  Changed-By: Non-ascii changed-by =C4=8Ciha=C5=99 <daniel.silverstone@canoni=
  cal.com>
  ...
     * Non-ascii text: =C4=8Ciha=C5=99
  ...

