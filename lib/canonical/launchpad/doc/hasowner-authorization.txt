= IHasOwner =

Objects which provide that interface can only be changed by the owner
itself or a Launchpad admin.

    # First we define a class which only provides IHasOwner.
    >>> from zope.interface import implements
    >>> from lp.registry.interfaces.person import IPersonSet
    >>> from lp.registry.interfaces.role import IHasOwner
    >>> salgado = getUtility(IPersonSet).getByName('salgado')
    >>> class FooObject:
    ...     implements(IHasOwner)
    ...     owner = salgado

Salgado is the owner of any FooObject we create, so he can edit it.

    >>> foo = FooObject()
    >>> from zope.component import queryAdapter
    >>> from canonical.launchpad.webapp.interfaces import IAuthorization
    >>> authorization = queryAdapter(foo, IAuthorization, 'launchpad.Edit')
    >>> print authorization.checkAccountAuthenticated(salgado.account)
    True

So can a member of the Launchpad admins team.

    >>> mark = getUtility(IPersonSet).getByName('mark')
    >>> admins = getUtility(IPersonSet).getByName('admins')
    >>> print mark.inTeam(admins)
    True
    >>> print authorization.checkAccountAuthenticated(mark.account)
    True

But someone who's not salgado nor a member of the admins team won't be
able to.

    >>> sample_person = getUtility(IPersonSet).getByName('name12')
    >>> print sample_person.inTeam(admins)
    False
    >>> print authorization.checkAccountAuthenticated(sample_person)
    False
