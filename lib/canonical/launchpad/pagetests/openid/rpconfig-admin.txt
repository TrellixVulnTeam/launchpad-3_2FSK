= Managing OpenID Relying Party Configurations =

While Launchpad can act as an OpenID Provider for any Relying Party,
it can provide a better user experience for RPs that it knows about,
including:

 * A human readable name for the RP.
 * A logo for the RP to display on the login page.
 * Some descriptive text indicating why the user should authenticate
   to the RP.
 * A creation rationale for new accounts created as part of the login
   process for this RP.

The pages used to view and edit these configurations are only visible
to Launchpad administrators:

    >>> user_browser.open('http://openid.launchpad.dev/+rpconfig')
    Traceback (most recent call last):
      ...
    Unauthorized: ...
    >>> admin_browser.open('http://openid.launchpad.dev/+rpconfig')
    >>> print admin_browser.title
    OpenID Relying Party Configurations


== Adding RP Configurations ==

We can add new RP configurations from this page:

    >>> admin_browser.getLink('Add an RP config').click()
    >>> print admin_browser.url
    http://openid.launchpad.dev/+rpconfig/+add

    >>> import os
    >>> from canonical.config import config
    >>> logo_file = os.path.join(
    ...     config.root, 'lib/canonical/launchpad/images/nyet-logo.png')

    >>> admin_browser.getControl('Trust Root').value = 'http://example.com/'
    >>> admin_browser.getControl('Display Name').value = 'Example RP'
    >>> admin_browser.getControl('Description').value = 'example description'
    >>> admin_browser.getControl(name='field.logo.action').value = ['change']
    >>> admin_browser.getControl(name='field.logo.image').add_file(
    ...     open(logo_file), 'image/png', 'logo.png')
    >>> admin_browser.getControl('Full name').click()
    >>> admin_browser.getControl('Email address').click()
    >>> admin_browser.getControl('Create').click()
    >>> print admin_browser.url
    http://openid.launchpad.dev/+rpconfig

The new RP configuration page is now included in the list:

    >>> print admin_browser.contents
    <...
    <td><a href="...">Example RP</a></td>
    <td>http://example.com/</td>
    ...

The RP config contains all the information we'd expect:

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.ftests import ANONYMOUS, login, logout
    >>> from canonical.launchpad.interfaces import IOpenIDRPConfigSet

    >>> login(ANONYMOUS)
    >>> rpconfig = getUtility(IOpenIDRPConfigSet).getByTrustRoot(
    ...     'http://example.com/')
    >>> print rpconfig.displayname
    Example RP
    >>> print rpconfig.description
    example description
    >>> print rpconfig.logo.filename
    logo.png
    >>> print rpconfig.allowed_sreg
    [u'email', u'fullname']
    >>> print rpconfig.creation_rationale.name
    OWNER_CREATED_UNKNOWN_TRUSTROOT
    >>> logout()


== Editing RP Configurations ==

We can also edit existing RP configurations:

    >>> admin_browser.getLink('Example RP').click()
    >>> print admin_browser.url
    http://openid.launchpad.dev/+rpconfig/...

    >>> admin_browser.getControl('Description').value = 'new description'
    >>> admin_browser.getControl('Launchpad ID').click()
    >>> admin_browser.getControl('Save').click()
    >>> print admin_browser.url
    http://openid.launchpad.dev/+rpconfig

The changes have now been made to the RP configuration:

    >>> login(ANONYMOUS)
    >>> rpconfig = getUtility(IOpenIDRPConfigSet).getByTrustRoot(
    ...     'http://example.com/')
    >>> print rpconfig.description
    new description
    >>> print rpconfig.allowed_sreg
    [u'email', u'fullname', u'nickname']
    >>> logout()


== Deleting RP Configurations ==

RP configurations can be deleted from the edit form:

    >>> admin_browser.getLink('Example RP').click()
    >>> admin_browser.getControl('Remove').click()
    >>> print admin_browser.url
    http://openid.launchpad.dev/+rpconfig

The RP configuration has now been removed:

    >>> login(ANONYMOUS)
    >>> rpconfig = getUtility(IOpenIDRPConfigSet).getByTrustRoot(
    ...     'http://example.com/')
    >>> print rpconfig
    None
    >>> logout()
