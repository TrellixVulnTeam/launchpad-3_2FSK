Support Request Workflow
========================

The status of a support request changes based on the action done by
users on the request. To demonstrate the workflow, we will use the
existing ticket #2 on the Firefox product which was filed by
'Sample Person'.

    (We will use one browser objects for the owner, and one for the user
    providing support, 'No Privileges Person' here.)

    >>> from zope.testbrowser.testing import Browser
    >>> owner_browser = Browser()
    >>> owner_browser.handleErrors = False
    >>> owner_browser.addHeader(
    ...     "Authorization", 'Basic test@canonical.com:test')

    >>> support_browser = Browser()
    >>> support_browser.handleErrors = False
    >>> support_browser.addHeader(
    ...     'Authorization', 'Basic no-priv@canonical.com:test')

    (Define some utility functions to retrieve easily the last comment
    added and the status of the request.)

    >>> from BeautifulSoup import BeautifulSoup
    >>> def find_request_status(contents):
    ...     soup = BeautifulSoup(contents)
    ...     return soup.find('b', text='Status:').next.strip()
    ...
    >>> def  find_last_comment(contents):
    ...     soup = BeautifulSoup(contents)
    ...     return soup.fetch('div', 'boardCommentBody')[-1]

Logging In
----------

To participate in a support request, the user must be logged in.

    >>> anon_browser.open(
    ...     'http://launchpad.dev/products/firefox/+ticket/2')
    >>> content = find_main_content(anon_browser.contents)
    >>> print content.fetch('div')[-1].renderContents()
    To post a message you must <a href="+login">log in</a>.

Requesting for More Information
-------------------------------

It's not unusual that the original message of a support request is terse
and quite vague. In these cases, to help the user, some more information
will be required.

To request for more information from the ticket owner, a user enters the
question in the 'Message' field and clicks on the
'Add Information Request' button.

    >>> support_browser.open(
    ...     'http://launchpad.dev/products/firefox/+ticket/2')
    >>> support_browser.getControl('Message').value = (
    ...     "Can you provide an example of an URL displaying the problem?")
    >>> support_browser.getControl('Add Information Request').click()

The message was added to the request and the status of the ticket
was changed to 'Needs information':

    >>> print find_request_status(support_browser.contents)
    Needs information
    >>> print find_last_comment(
    ...     support_browser.contents).renderContents()
    <p>Can you provide an example of an URL displaying the problem?</p>

Of course, if you don't add a message, clicking on the button will give
you an error.

    >>> support_browser.getControl('Add Information Request').click()
    >>> soup = BeautifulSoup(support_browser.contents)
    >>> print soup.first('div', 'message').renderContents()
    Please enter a message.

Answering with More Information
-------------------------------

When the request is in the 'Needs information' state, it means that the
request owner should come back and provide more information. He can do
so by entering the reply in the 'Message' box and clicking on the
"I'm Providing More Information" button.

    >>> owner_browser.open(
    ...     'http://launchpad.dev/products/firefox/+ticket/2')
    >>> owner_browser.getControl('Message').value = (
    ...     "The following SVG doesn't display properly:\n"
    ...     "http://www.w3.org/2001/08/rdfweb/rdfweb-chaals-and-dan.svg")
    >>> owner_browser.getControl("I'm Providing More Information").click()

Once the owner replied with the, hopefully, requested information, the
status is changed to Open and his answer appended to the request.

    >>> print find_request_status(owner_browser.contents)
    Open
    >>> print find_last_comment(owner_browser.contents).renderContents()
    <p>The following SVG doesn't display properly:<br />
    <a...>http://www.w3.org/2001/08/rdfweb/rdfweb-chaals-and-dan.svg</a></p>

Giving an Answer
----------------

Once the request is clarified, it is easier for a user to give an answer
to the request. This is done by entering the answer in the 'Message' box
and clicking the 'Add Answer' button.

    >>> support_browser.open(
    ...     'http://launchpad.dev/products/firefox/+ticket/2')
    >>> support_browser.getControl('Message').value = (
    ...     "New version of the firefox package are available with SVG "
    ...     "support enabled. You can use apt-get or adept to upgrade.")
    >>> support_browser.getControl('Add Answer').click()

This moves the the support request to the Answered state and adds the
answer to the request:

    >>> print find_request_status(support_browser.contents)
    Answered
    >>> print find_last_comment(
    ...     support_browser.contents).renderContents()
    <p>New version of the firefox package are available with SVG support
    enabled. You can use apt-get or adept to upgrade.</p>

Confirming an Answer
--------------------

When the owner comes back on the request page, he will now see a new
'This Solved my Problem' button near the answer.

    >>> owner_browser.open(
    ...     'http://launchpad.dev/products/firefox/+ticket/2')
    >>> soup = BeautifulSoup(owner_browser.contents)
    >>> soup.fetch('div', 'boardComment')[-1].first('input', type='submit')
    <input type="submit" name="field.actions.confirm"
     value="This Solved my Problem" />

(Not altough we have three comments on the support request, that's the
only one that has this button. Only answers have this button.)

Clicking that button will confirm that the answer solved the problem.

    >>> owner_browser.getControl('This Solved my Problem').click()

This changes the status of the request to 'Solved' and mark
'No Privileges Person' as the answerer.

    >>> print find_request_status(owner_browser.contents)
    Solved
    >>> soup = BeautifulSoup(owner_browser.contents)
    >>> print soup.first(
    ...     'b', text='Answered by:').findNext('a').renderContents()
    No Privileges Person

Since no message can be provided when that button is clicked. A default
confirmation message was appended to the request:

    >>> print find_last_comment(owner_browser.contents).renderContents()
    <p>User confirmed that the request is solved.</p>

The confirmed answer is also highlighted.

    >>> bestAnswer = soup.fetch('div', 'boardComment')[-2]
    >>> print bestAnswer.first('strong').renderContents()
    Marked as best answer.
    >>> print soup.first(
    ...     'div', 'boardCommentBody highlighted').renderContents()
    <p>New version of the firefox package are available with SVG support
    enabled. You can use apt-get or adept to upgrade.</p>

Adding a Comment
----------------

When the request is Solved, it is possible to add comments to the
request. The user simply enters the comment in the 'Message' box and
clicks the 'Add Comment' button.

    >>> owner_browser.getControl('Message').value = (
    ...     "The example now displays correctly. Thanks.")
    >>> owner_browser.getControl('Add Comment').click()

This appends the comment to the request and it doesn't change the
status:

    >>> print find_request_status(owner_browser.contents)
    Solved
    >>> print find_last_comment(owner_browser.contents).renderContents()
    <p>The example now displays correctly. Thanks.</p>

Reopening
---------

It can happen that, altough the owner confirmed the request as solved,
the original problem reappears. In this case, he can reopen the request
by entering a new message and clicking the
"I'm Still Having This Problem" button.

    >>> owner_browser.getControl('Message').value = (
    ...     "Actually, there are still SVGs that do not display correctly. "
    ...     "For example, the following\n"
    ...     "http://people.w3.org/maxf/ChessGML/immortal.svg doesn't display "
    ...     "correctly.")
    >>> owner_browser.getControl("I'm Still Having This Problem").click()

This appends the new information to the request and changes the request
status to 'Open'.

    >>> print find_request_status(owner_browser.contents)
    Open
    >>> print find_last_comment(owner_browser.contents).renderContents()
    <p>Actually, there are still SVGs that do not display correctly.
    For example, the following<br />
    <a...>http://people.w3.org/maxf/ChessGML/immortal.svg</a> doesn't
    display correctly.</p>

This also removes the highlighting from the previous answer and sets
the answerer back to None.

    >>> soup = BeautifulSoup(owner_browser.contents)
    >>> print soup.first(
    ...     'b', text='Answered by:').findNext('i').renderContents()
    Not yet answered
    >>> bestAnswer = soup.fetch('div', 'boardComment')[-4]
    >>> bestAnswer.first('strong') is None
    True
    >>> bestAnswer.first('div', 'boardCommentBody')
    <div class="boardCommentBody"><p>New version of the firefox package
    are available with SVG support enabled. You can use apt-get or adept to
    upgrade.</p></div>

In addition, this creates a reopening record that is displayed in the
reopening portlet.

    >>> portlet = find_portlet(
    ...     owner_browser.contents, 'This request was reopened')
    >>> print portlet.fetch('a')[-1].renderContents()
    Sample Person

Self-Answer
-----------

The owner can also gives an answer to his own request. He simply have
to enter his answer in the 'Message' box and click the
'I Solved my Problem' button.

    >>> owner_browser.getControl('Message').value = (
    ...     "OK, this example requires some SVG features that will only be "
    ...     "available in Firefox 2.0.")
    >>> owner_browser.getControl("I Solved my Problem").click()

This appends the message to the request and sets its status to 'Solved'.

    >>> print find_request_status(owner_browser.contents)
    Solved
    >>> soup = BeautifulSoup(owner_browser.contents)
    >>> print soup.first(
    ...     'b', text='Answered by:').findNext('a').renderContents()
    Sample Person

It also records the owner as the answerer and marks his answer with the
"Best answer" flag.

    >>> bestAnswer = soup.fetch('div', 'boardComment')[-1]
    >>> print bestAnswer.first('strong').renderContents()
    Marked as best answer.
    >>> print soup.first(
    ...     'div', 'boardCommentBody highlighted').renderContents()
    <p>OK, this example requires some SVG features that will only be available
    in Firefox 2.0.</p>

Confirming Link
===============

When an answer is posted on a ticket, its owner will usually receive a
notification by email. That email includes a link that can be used by
the owner to confirm that the answer solved his problem.

When the URL is used when the ticket isn't in the right state, the user
will be redirected to the ticket page and a notification will be
displayed:

    >>> owner_browser.open(
    ...     'http://launchpad.dev/products/firefox/+ticket/6/+confirm?'
    ...     'answer_id=1')
    >>> owner_browser.url
    'http://.../firefox/+ticket/6'
    >>> soup = BeautifulSoup(owner_browser.contents)
    >>> print soup.first('div', 'error message').renderContents()
    The support request is not in a state where you can confirm an
    answer.

    (Let's setup an answer that can be confirmed on that ticket, since
    sampledata doesn't have any support request in that state.)
    >>> from zope.component import getUtility
    >>> from canonical.launchpad.ftests import login, logout
    >>> login('foo.bar@canonical.com')
    >>> from canonical.launchpad.interfaces import ITicketSet, ILaunchBag
    >>> ticket_6 = getUtility(ITicketSet).get(6)

    # The owner isn't subscribed to that request, so subscribe him.
    >>> ticket_6.subscribe(ticket_6.owner)
    <TicketSubscription...>
    >>> foo_bar = getUtility(ILaunchBag).user
    >>> answer_message = ticket_6.giveAnswer(
    ...     foo_bar, 'Restarting Firefox should load the new plug-in.')

    # Send out notification emails
    >>> import transaction
    >>> transaction.commit()
    >>> logout()

    # Get the confirmation URL from the notification
    >>> import email
    >>> import re
    >>> from canonical.launchpad.mail import stub
    >>> notification = email.message_from_string(stub.test_emails[-1][2])
    >>> urls = re.findall('(http:[^\s]+)+', notification.get_payload())
    >>> confirm_url = urls[-2].decode('quoted-printable')
    >>> print confirm_url
    http://launchpad.dev/products/firefox/+ticket/6/+confirm?answer_id=...

If a cropped URL or forged URL is used, an UnexpectedFormData error will
be displayed. In the following example, the answer_id parameter refers
to an answer not part of that support request, it mimics a badly
handcrafted URL:

    >>> owner_browser.open(
    ...     'http://launchpad.dev/products/firefox/+ticket/6/+confirm?'
    ...     'answer_id=3')
    Traceback (most recent call last):
      ...
    UnexpectedFormData...

    >>> owner_browser.open(
    ...     'http://launchpad.dev/products/firefox/+ticket/6/+confirm')
    Traceback (most recent call last):
      ...
    UnexpectedFormData...

The page is only accessible to the ticket owner:

    >>> support_browser.open(confirm_url)
    Traceback (most recent call last):
      ...
    Unauthorized...

On the confirmation page, the user can see the answer that he is
confirming.

    >>> owner_browser.open(confirm_url)
    >>> soup = BeautifulSoup(owner_browser.contents)
    >>> for comment in  soup.fetch('div', 'boardCommentBody'):
    ...     print comment.renderContents()
    <p>Restarting Firefox should load the new plug-in.</p>

To confirm the answer, he needs to click the 'This Solved my Problem'
button. He can enter an optional message along his confirmation.

    >>> owner_browser.getControl('Message').value = (
    ...     "Thanks! This indeed solved the problem.")
    >>> owner_browser.getControl('This Solved my Problem').click()

This adds his comment to the request and mark the support request
'Solved.'

    >>> print find_request_status(owner_browser.contents)
    Solved
    >>> print find_last_comment(owner_browser.contents).renderContents()
    <p>Thanks! This indeed solved the problem.</p>

History
=======

The history of the ticket is available on the 'History' page.

    >>> anon_browser.open(
    ...     'http://launchpad.dev/products/firefox/+ticket/2')
    >>> anon_browser.getLink('History').click()
    >>> print anon_browser.title
    History of support request #2

It lists all the actions performed through workflow on the request:

    >>> soup = BeautifulSoup(anon_browser.contents)
    >>> action_listing = soup.first('table', 'listing')
    >>> for header in action_listing.fetch('th'):
    ...     print header.renderContents()
    Date
    Who
    Action
    New State
    >>> for row in action_listing.first('tbody').fetch('tr'):
    ...     cells = row.fetch('td')
    ...     who = cells[1].first('a').renderContents()
    ...     action = cells[2].renderContents()
    ...     new_status = cells[3].renderContents()
    ...     print who, action, new_status
    Foo Bar              Reject                       Invalid
    Foo Bar              Change status                Open
    No Privileges Person Request for more information Needs information
    Sample Person        Give more information        Open
    No Privileges Person Answer                       Answered
    Sample Person        Confirm                      Solved
    Sample Person        Comment                      Solved
    Sample Person        Reopen                       Open
    Sample Person        Confirm                      Solved
