= Forwarding bugs upstream =

The +choose-affected-product page is, in fact, a wizard-like page which
allows the user to select the affected product, specify a remote bug URL
and create the actual bugtask/watch (also creating the bugtracker if
necessary).

Trying to add an upstream task to a bug on the evolution package in Ubuntu
will cause the product-selection step to be skipped because the package is
linked to the evolution upstream product.

    >>> user_browser.open(
    ...  'http://launchpad.dev/ubuntu/+source/evolution/+bug/6')
    >>> user_browser.getLink(url='+choose-affected-product').click()
    >>> user_browser.getControl('Project').value
    Traceback (most recent call last):
    ...
    LookupError: label 'Project'
    >>> user_browser.getControl(name='field.product').value
    'evolution'

If this wasn't what we intended, we can go back to choose another
product, though.

    >>> user_browser.getLink('Choose another project').click()
    >>> user_browser.url
    'http://bugs.launchpad.dev/ubuntu/+source/evolution/+bug/6/+choose-affected-product?field.product=evolution'

    >>> user_browser.getControl('Project').value
    'evolution'

Just in case we change our mind, there is a cancel link that points
back to the bug page:

    >>> cancel_link = user_browser.getLink('Cancel')
    >>> cancel_link.url
    'http://bugs.launchpad.dev/ubuntu/+source/evolution/+bug/6'

But we'll choose Thunderbird.

    >>> user_browser.getControl('Project').value = 'thunderbird'
    >>> user_browser.getControl('Continue').click()

Since Thunderbird doesn't use Launchpad, a form is shown asking for
bug URLs and suchlike:

    >>> from lp.bugs.tests.bug import print_upstream_linking_form
    >>> print_upstream_linking_form(user_browser)
    (*) I have the URL for the upstream bug:
        [          ]
    ( ) I have already emailed an upstream bug contact:
        [          ]
    ( ) I just want to register that it is upstream right now; I
        don't have any way to link it.

We can just link upstream without a URL to say that this has been
dealt with, but we can't reference it.

    >>> user_browser.getControl('I just want to register').selected = True
    >>> print_upstream_linking_form(user_browser)
    ( ) I have the URL for the upstream bug:
        [          ]
    ( ) I have already emailed an upstream bug contact:
        [          ]
    (*) I just want to register that it is upstream right now; I
        don't have any way to link it.

    >>> user_browser.getControl('Add to Bug Report').click()
    >>> user_browser.url
    'http://bugs.launchpad.dev/thunderbird/+bug/6'

Let's add the evolution task as well.

    >>> user_browser.open(
    ...  'http://launchpad.dev/ubuntu/+source/evolution/+bug/6')
    >>> user_browser.getLink(url='+choose-affected-product').click()
    >>> user_browser.url
    'http://.../ubuntu/+source/evolution/+bug/6/+choose-affected-product'

    >>> user_browser.getControl('Add to Bug Report').click()

    >>> user_browser.url
    'http://bugs.launchpad.dev/evolution/+bug/6'

== Error messages ==

If we try to add an upstream task without specifying a product:

    >>> user_browser.open(
    ...     'http://launchpad.dev/debian/+source/mozilla-firefox/+bug/3')
    >>> user_browser.getLink(url='+choose-affected-product').click()
    >>> user_browser.url
    'http://.../debian/+source/mozilla-firefox/+bug/3/+choose-affected-product'

    >>> user_browser.getControl('Project').value
    ''
    >>> user_browser.getControl('Continue').click()
    >>> user_browser.url
    'http://.../debian/+source/mozilla-firefox/+bug/3/+choose-affected-product'

We get a nice error message.

    >>> print get_feedback_messages(user_browser.contents)
    [u'There is 1 error.', u'Required input is missing.']

If we enter a product name that doesn't exist, we inform the user
about this and ask him to search for the product.

    >>> user_browser.getControl('Project').value = 'no-such-product'
    >>> user_browser.getControl('Continue').click()
    >>> user_browser.url
    'http://.../debian/+source/mozilla-firefox/+bug/3/+choose-affected-product'
    >>> print get_feedback_messages(user_browser.contents)
    [u'There is 1 error.',
     u'There is no project in Launchpad named "no-such-product"...]

    >>> search_link = user_browser.getLink('search for it')
    >>> search_link.url
    'http://bugs.launchpad.dev/projects'

Since we don't restrict the input, the user can write anything, so we
need to make sure that everything is quoted before displaying the input.

    >>> user_browser.open(
    ...     'http://launchpad.dev/debian/+source/mozilla-firefox/+bug/3'
    ...     '/+choose-affected-product')

    >>> user_browser.getControl('Project').value = 'N\xc3\xb6 Such Product&<>'
    >>> user_browser.getControl('Continue').click()
    >>> user_browser.url
    'http://.../debian/+source/mozilla-firefox/+bug/3/+choose-affected-product'
    >>> print get_feedback_messages(user_browser.contents)
    [u'There is 1 error.',
     u'There is no project in Launchpad named "N\xf6 Such Product&amp;&lt...]

== Linking to bug watches ==

Now we add an upstream task, while adding this new bugtask we can also
specify a bug watch. If we inadvertently left some leading or trailing white
space in the bug URL it will be stripped.

    >>> user_browser.open(
    ...     'http://launchpad.dev/debian/+source/mozilla-firefox/'
    ...     '+bug/3/+choose-affected-product')
    >>> user_browser.getControl('Project').value = 'alsa-utils'
    >>> user_browser.getControl('Continue').click()

    >>> user_browser.getControl('I have the URL').selected = True
    >>> user_browser.getControl(name='field.bug_url').value = (
    ...     '   https://bugzilla.mozilla.org/show_bug.cgi?id=1234   ')
    >>> user_browser.getControl('Add to Bug Report').click()

Launchpad redirects to the newly created bugtask page, with a row for the
new bug watch.

    >>> user_browser.url
    'http://bugs.launchpad.dev/alsa-utils/+bug/3'
    >>> affects_table = find_tags_by_class(user_browser.contents, 'listing')[0]
    >>> target_cell = affects_table.tbody.tr.td

    >>> from lp.bugs.tests.bug import print_bug_affects_table
    >>> print_bug_affects_table(user_browser.contents)
    alsa-utils
    ...

And we can check that the remote bug number was stripped.

    >>> user_browser.getLink('mozilla.org #1234')
    <Link text='mozilla.org #1234'
      url='https://bugzilla.mozilla.org/show_bug.cgi?id=1234'>

And now we try to add the same upstream again.

    >>> user_browser.getLink(url='+choose-affected-product').click()
    >>> user_browser.url
    'http://bugs.launchpad.dev/alsa-utils/+bug/3/+choose-affected-product'

    >>> user_browser.getControl('Project').value = 'alsa-utils'
    >>> user_browser.getControl('Continue').click()
    >>> user_browser.url
    'http://bugs.launchpad.dev/alsa-utils/+bug/3/+choose-affected-product'

We get a nice error message.

    >>> print get_feedback_messages(user_browser.contents)
    [u'There is 1 error.',
     u'A fix for this bug has already been requested for alsa-utils']

We can add another upstream to the bug.

    >>> user_browser.getControl('Project').value = 'evolution'
    >>> user_browser.getControl('Continue').click()
    >>> user_browser.getControl('Add to Bug Report').click()
    >>> user_browser.url
    'http://bugs.launchpad.dev/evolution/+bug/3'

But if we try to change it to the target of an existing upstream bugtask,
our validator springs into action.

    >>> user_browser.getLink(url='evolution/+bug/3/+editstatus').click()
    >>> user_browser.url
    'http://bugs.launchpad.dev/evolution/+bug/3/+editstatus'
    >>> user_browser.getControl('Project').value = 'alsa-utils'
    >>> user_browser.getControl('Save Changes').click()
    >>> user_browser.url
    'http://bugs.launchpad.dev/evolution/+bug/3/+editstatus'
    >>> print get_feedback_messages(user_browser.contents)
     [u'There is 1 error in the data you entered...
      u'A fix for this bug has already been requested for alsa-utils']
