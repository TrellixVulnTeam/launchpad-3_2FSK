POTMsgSet tests
===============

POTMsgSet represents messages to translate that a POTemplate file has.

We need to get a POTMsgSet object to performe this test.

    >>> from zope.component import getUtility
    >>> from canonical.database.sqlbase import flush_database_updates
    >>> from canonical.launchpad.interfaces import IPOTemplateSet
    >>> potemplate_set = getUtility(IPOTemplateSet)
    >>> potemplate = potemplate_set['pmount'][0]


POTMsgSet.getPOMsgSet
------------------

A request for a POMsgSet with a variant field value should not break.

    >>> potmsgsets = potemplate.getPOTMsgSets()
    >>> potmsgset = potmsgsets.next()
    >>> potmsgset.getPOMsgSet('en', 'boldquot') is None
    True

POTMsgSet.normalizeWhitespaces
-------------------------------

This function copies the leading and trailing whitespaces from
POTMsgSet's msgid into the 'text' argument.

As this test is too specific, we are going to change a msgid as we need for
every test.

    >>> potmsgset = potemplate.createMessageSetFromText(u'normal string')
    >>> text = u'another normal string'

    In this case, it should not change.

    >>> potmsgset.normalizeWhitespaces(text)
    u'another normal string'

    Let's try with a 'text' that has some leading and trailing whitespaces,
    they will disappear as the msgid does not have them.

    >>> text = u' a string with \n whitespaces \n'
    >>> potmsgset.normalizeWhitespaces(text)
    u'a string with \n whitespaces'

    Now, the msgid will have a leading whitespace. That means that 'text'
    should have it too.

    >>> potmsgset = potemplate.createMessageSetFromText(
    ...     u'\nnormal string with leading newline')
    >>> potmsgset.normalizeWhitespaces(text)
    u'\na string with \n whitespaces'

    If 'text' has only whitespaces and nothing else, we should get the empty
    string.

    >>> text = u'\n'
    >>> potmsgset.normalizeWhitespaces(text)
    ''

    And if 'text' is None, we get 'text' unchanged.

    >>> potmsgset.normalizeWhitespaces(None) is None
    True

POTMsgSet.convertDotToSpace
------------------------------

This method changes the u'\u2022' char by the normal white space.

As this test is too specific, we are going to change a msgid as we need for
every test.

    >>> potmsgset = potemplate.createMessageSetFromText(u'normal string without the point')
    >>> text = u'another normal string'

    In this case, it should not change.

    >>> potmsgset.convertDotToSpace(text)
    u'another normal string'

    Let's try with a 'text' that has the char.

    >>> text = u'a string with the char \u2022'
    >>> potmsgset.convertDotToSpace(text)
    u'a string with the char  '

    Now, msgid will have also that char, so 'text' should not change.

    >>> potmsgset = potemplate.createMessageSetFromText(
    ...    u'normal string with the char \u2022')
    >>> potmsgset.convertDotToSpace(text)
    u'a string with the char \u2022'


POTMsgSet.normalizeNewLines
------------------------------

This method syncs the new line chars to use the same as the associated msgid.

As this test is too specific, we are going to change a msgid as we need for
every test.

    >>> potmsgset_windows = potemplate.createMessageSetFromText(u'\r\n')
    >>> potmsgset_unix = potemplate.createMessageSetFromText(u'\n')
    >>> potmsgset_mac = potemplate.createMessageSetFromText(u'\r')
    >>> text_windows = u'\r\n'
    >>> text_unix = u'\n'
    >>> text_mac = u'\r'

    If both are the same, the text should not change.

    >>> potmsgset_windows.normalizeNewLines(text_windows) == text_windows
    True
    >>> potmsgset_mac.normalizeNewLines(text_mac) == text_mac
    True
    >>> potmsgset_unix.normalizeNewLines(text_unix) == text_unix
    True

    Let's mix some of them and see how they became always as the potmsgset.

    >>> potmsgset_windows.normalizeNewLines(text_mac) == text_windows
    True
    >>> potmsgset_windows.normalizeNewLines(text_unix) == text_windows
    True
    >>> potmsgset_mac.normalizeNewLines(text_windows) == text_mac
    True
    >>> potmsgset_mac.normalizeNewLines(text_unix) == text_mac
    True
    >>> potmsgset_unix.normalizeNewLines(text_mac) == text_unix
    True
    >>> potmsgset_unix.normalizeNewLines(text_windows) == text_unix
    True

    And finally, check to be sure that the broken options are detected.

    >>> potmsgset_windows.normalizeNewLines(text_mac+text_windows)
    Traceback (most recent call last):
    ...
    BrokenTextError: ...
    >>> potmsgset_windows.normalizeNewLines(text_unix+text_windows)
    Traceback (most recent call last):
    ...
    BrokenTextError: ...
    >>> potmsgset_windows.normalizeNewLines(text_unix+text_mac)
    Traceback (most recent call last):
    ...
    BrokenTextError: ...

POTMsgSet.applySanityFixes
--------------------------

This function applies all checks we know to fix broken input

As this test is very, we wil create a msgid just for this test. We are going
to use a msgid with a leading and a trailing newline.

    >>> potmsgset = potemplate.createMessageSetFromText(
    ...     u'\nnormal string with\nleading and trailing newline\n')

And the text we are going to check will have them too, but we are going to
use '\r\n' like when we get a form submission.

    >>> text = u'\r\nTranslation\r\nto test\r\n'
    >>> potmsgset.applySanityFixes(text)
    u'\nTranslation\nto test\n'
