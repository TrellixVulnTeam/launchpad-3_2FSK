= Claiming a person =

Matsubara was browsing through Launchpad anonymously and found a page
for himself, even though he has never used Launchpad (what a lie!).

    >>> browser.open('http://launchpad.dev/~matsubara')
    >>> browser.url
    'http://launchpad.dev/~matsubara'

He was wondering who created that when he saw a very prominent link,
saying 'Are you Diogo Matsubara?'.  He promptly clicked on it.

    >>> import re
    >>> soup = find_main_content(browser.contents)
    >>> print re.sub(r'\s+', ' ', soup('h1')[0].findNext('p').renderContents())
    Diogo Matsubara does not use Launchpad. This page was created...
    ...2006-12-13...when importing the Portuguese (Brazil) (pt_BR)...

    >>> browser.getLink("Are you Diogo Matsubara?").click()

Clicking on that link brought him to a page where he can claim that
Launchpad profile.

    >>> browser.url
    'http://launchpad.dev/%7Ematsubara/+claim'

He first tries it with an old email address he had, but we tell him that
the given email address is not associated with that profile.

    >>> browser.getControl('Email address').value = 'non@existent.org'
    >>> browser.getControl('E-mail Me').click()
    >>> soup = find_main_content(browser.contents)
    >>> for tag in soup('div', 'message'):
    ...     print tag.renderContents()
    We couldn't find this email address. Please try another one that could
    possibly be associated with this profile. Note that this profile's name
    (matsubara) was generated based on the email address it's associated with.

Then he tries with Sample Person's email address.

    >>> browser.getControl('Email address').value = 'test@canonical.com'
    >>> browser.getControl('E-mail Me').click()
    >>> soup = find_main_content(browser.contents)
    >>> for tag in soup('div', 'message'):
    ...     print tag.renderContents()
    This email address is associated with yet another Launchpad profile, which
    you seem to have used at some point. If that's the case, you can <a
    href="/people/+requestmerge?field.dupe_person=matsubara">combine this
    profile with the other one</a> (you'll have to log in with the other
    profile first, though). If that's not the case, please try with a
    different email address.

And once again he tries with an email address he found in Launchpad, but
this one is associated with an unvalidated profile.

    >>> browser.getControl('Email address').value = 'morten@wtf.dk'
    >>> browser.getControl('E-mail Me').click()
    >>> soup = find_main_content(browser.contents)
    >>> for tag in soup('div', 'message'):
    ...     print tag.renderContents()
    Although this email address is not associated with this profile, it's
    associated with yet another one. You can <a
    href="http://launchpad.dev/~morten/+claim">claim that other
    profile</a> and then later <a href="/people/+requestmerge">combine</a>
    both of them into a single one.

Now he finally remembered his email address.

    >>> browser.getControl('Email address').value = 'matsubara@async.com.br'
    >>> browser.getControl('E-mail Me').click()

    >>> from lp.services.mail import stub
    >>> from canonical.launchpad.ftests.logintoken import (
    ...     get_token_url_from_email)
    >>> from_addr, to_addr, msg = stub.test_emails.pop()
    >>> to_addr
    ['matsubara@async.com.br']
    >>> token_url = get_token_url_from_email(msg)
    >>> token_url
    'http://launchpad.dev/token/...'

    >>> browser.open(token_url)
    >>> browser.url == "%s/+claimprofile" % token_url
    True

    >>> browser.getControl(name='field.password').value = 'foo'
    >>> browser.getControl(name='field.password_dupe').value = 'foo'
    >>> browser.getControl('Continue').click()

    >>> browser.url
    'http://launchpad.dev/~matsubara'
    >>> soup = find_main_content(browser.contents)
    >>> for tag in soup('div', 'informational message'):
    ...     print tag.renderContents()
    Profile claimed successfully

It's also possible that a person tries to claim an account that has a
preferred email but no password, like some accounts imported from
Ubuntu's bugzilla. Although these accounts are not considered valid
(that's why they can be claimed) they /do/ have a preferred email and we
need to handle this.

    # To see kiko's email we must be logged in, so we'll use user_browser.
    >>> user_browser.open('http://launchpad.dev/~kiko')
    >>> unregistered_user_info = find_tag_by_id(
    ...     user_browser.contents, 'not-lp-user-or-team')
    >>> unregistered_user_info.li.renderContents()
    '...christian.reis@ubuntulinux.com...'
    >>> unregistered_user_info.a.renderContents()
    'Are you Christian Reis?'

    >>> anon_browser.open('http://launchpad.dev/~kiko')
    >>> anon_browser.getLink("Are you Christian Reis?").click()
    >>> anon_browser.url
    'http://launchpad.dev/%7Ekiko/+claim'

    >>> anon_browser.getControl('Email address').value = (
    ...     'christian.reis@ubuntulinux.com')
    >>> anon_browser.getControl('E-mail Me').click()

    >>> from_addr, to_addr, msg = stub.test_emails.pop()
    >>> to_addr
    ['christian.reis@ubuntulinux.com']
    >>> token_url = get_token_url_from_email(msg)
    >>> token_url
    'http://launchpad.dev/token/...'

    >>> anon_browser.open(token_url)
    >>> anon_browser.url == "%s/+claimprofile" % token_url
    True

    >>> anon_browser.getControl(name='field.password').value = 'foo'
    >>> anon_browser.getControl(name='field.password_dupe').value = 'foo'
    >>> anon_browser.getControl('Continue').click()

    >>> anon_browser.url
    'http://launchpad.dev/~kiko'
    >>> soup = find_main_content(anon_browser.contents)
    >>> for tag in soup('div', 'informational message'):
    ...     print tag.renderContents()
    Profile claimed successfully

Trying to access +claim for an already active team 404s as you would
expect it to (we shouldn't be linking to from anywhere):

    >>> user_browser.open("http://launchpad.dev/~ubuntu-team/+claim")
    Traceback (most recent call last):
    ...
    NotFound:...
