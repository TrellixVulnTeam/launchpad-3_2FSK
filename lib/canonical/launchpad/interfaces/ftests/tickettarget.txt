ITicketTarget Interface
=======================

Launchpad includes a support request tracker. Tickets are associated to
objects implementing ITicketTarget. This file documents that interface
and canonical be used to validate implementation of this interface on a
particular object. (This object is made available through the 'target'
variable which is defined outside of this file, usually by a
LaunchpadFunctionalTestCase. This instance shouldn't have any tickets
associated with it at the start of the test.)

    (Some part of the ITicketTarget interface is only accessible
    to registered user.)
    >>> login('no-priv@canonical.com')
    >>> from zope.interface.verify import verifyObject
    >>> from canonical.launchpad.interfaces import ITicketTarget

    >>> verifyObject(ITicketTarget, target)
    True


newTicket()
-----------

Tickets are always owned by a registered user.

    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> sample_person = getUtility(IPersonSet).getByEmail(
    ...     'test@canonical.com')

The newTicket() method is used to create ticket that will be associated
with the target. It takes as parameters the ticket's owner, title and
description.

    >>> ticket = target.newTicket(sample_person, 'New ticket',
    ...     'Ticket description')
    >>> print ticket.title
    New ticket
    >>> print ticket.description
    Ticket description
    >>> ticket.owner == sample_person
    True
    >>> ticket.status.title
    'Open'

The created ticket starts in the 'Open' status and should have the owner
subscribed to the ticket.

    >>> sample_person in [s.person for s in ticket.subscriptions]
    True

The newTicket() method takes an optional argument 'datecreated'.
It defaults to the current time.

    >>> from datetime import datetime, timedelta
    >>> from pytz import UTC
    >>> now = datetime.now(UTC)

    >>> ticket.datecreated - now < timedelta(seconds=3)
    True

    >>> one_hour_before_now = now - timedelta(hours=1)
    >>> ticket = target.newTicket(sample_person, 'Ticket in the past',
    ...     'New ticket created one hour before now.',
    ...     datecreated=one_hour_before_now)
    >>> ticket.datecreated == one_hour_before_now
    True

Anonymous users cannot use newTicket():

    >>> login(ANONYMOUS)
    >>> ticket = target.newTicket(sample_person, 'This will fail',
    ...     'Failed?')
    Traceback (most recent call last):
      ...
    Unauthorized...


getTicket()
-----------

The getTicket() method is used to retrieve a ticket by id for a
particular target.

    >>> target.getTicket(ticket.id) == ticket
    True

If you pass in a non-existent id or a ticket for a different target, the
method must return None.

    >>> target.getTicket(2) is None
    True
    >>> target.getTicket(12345) is None
    True


Creating some additional tickets
-------------------------------

For the following methods, we will require some more tickets. Create five
new tickets.

    >>> login('no-priv@canonical.com')
    >>> tickets = []
    >>> for num in range(5):
    ...     description = ('Support request description%d.\n'
    ...         'This request index is %d.') % (num, num)
    ...     tickets.append(target.newTicket(sample_person,
    ...         'Ticket title%d' % num, description,
    ...         datecreated=now+timedelta(seconds=num)))

For more variety, we will set the status of the last to REJECTED and the
fourth one to ANSWERED.

    >>> from canonical.lp.dbschema import TicketStatus

    >>> tickets[-1].status = TicketStatus.REJECTED
    >>> tickets[3].status = TicketStatus.ANSWERED

    (Flush those changes to the database)
    >>> from canonical.database.sqlbase import flush_database_updates
    >>> flush_database_updates()

And create another one that will also have the word 'new' in its
description.

    >>> ticket = target.newTicket(sample_person, 'Another ticket',
    ...     'Another new ticket that is actually very new.',
    ...     datecreated=now+timedelta(hours=1))
    >>> login(ANONYMOUS)

tickets()
---------

The tickets() method returns the tickets created on the target. They are
sorted from most recent to least recent.

    >>> for t in target.tickets():
    ...     print t.title
    Another ticket
    Ticket title4
    Ticket title3
    Ticket title2
    Ticket title1
    Ticket title0
    New ticket
    Ticket in the past

You can retrieve the X most recent tickets, by passing the wanted
quantity as parameter:

    >>> for t in target.tickets(5):
    ...     print t.title
    Another ticket
    Ticket title4
    Ticket title3
    Ticket title2
    Ticket title1


searchTickets()
---------------

The searchTickets() method is used to search for tickets.

    >>> for t in target.searchTickets(search_text='new'):
    ...     print t.title
    New ticket
    Another ticket
    Ticket in the past

The results here are sorted by relevancy. (In the last tickets, 'New'
appeared in the description which makes it less relevant than when the
word appears in the title.)

The searchTickets() method can also filter tickets by status:

    >>> for t in target.searchTickets(status=TicketStatus.OPEN):
    ...     print t.title
    Another ticket
    Ticket title2
    Ticket title1
    Ticket title0
    New ticket
    Ticket in the past

In this previous example, because there is no sort text, the
default sort order is from newest to oldest.

    >>> for t in target.searchTickets(status=TicketStatus.REJECTED):
    ...     print t.title
    Ticket title4

You can also pass in a list of status, and you can also use the
search_text and status parameters at the same time. This will search
OPEN and REJECTED tickets with the word 'index'

    >>> for t in target.searchTickets(search_text='request index',
    ...         status=(TicketStatus.OPEN, TicketStatus.REJECTED)):
    ...     print t.title
    Ticket title4
    Ticket title2
    Ticket title1
    Ticket title0

You can control the sort order by passing one of constants defined in
TicketSort. (We already saw the NEWEST_FIRST and RELEVANCY sort order).

You can sort also from oldest to newest using the OLDEST_FIRST constant:

    >>> from canonical.launchpad.interfaces import TicketSort

    >>> for t in target.searchTickets(search_text='new',
    ...                               sort=TicketSort.OLDEST_FIRST):
    ...     print t.title
    Ticket in the past
    New ticket
    Another ticket

If there is no search_text and the requested sort order is RELEVANCY,
the tickets will be sorted NEWEST_FIRST.

    >>> for t in target.searchTickets(sort=TicketSort.RELEVANCY):
    ...     print t.title
    Another ticket
    Ticket title3
    Ticket title2
    Ticket title1
    Ticket title0
    New ticket
    Ticket in the past

('Ticket title4' which has status REJECTED is not shown in this case,
because the searchTickets() method only searches through OPEN and
ANSWERED tickets by default.)


Support contacts
----------------

Target can have support contacts. The list of support contacts for a
target is available through the support_contacts attribute.

    >>> list(target.support_contacts)
    []

You add a support contact by using the addSupportContact method. This
is only available to registered users.

    >>> name18 = getUtility(IPersonSet).getByName('name18')
    >>> target.addSupportContact(name18)
    Traceback (most recent call last):
      ...
    Unauthorized...
    >>> login('no-priv@canonical.com')

This method will return True when the contact was added the list and
False when it was already on the list:

    >>> target.addSupportContact(name18)
    True
    >>> list([p.name for p in target.support_contacts])
    [u'name18']
    >>> target.addSupportContact(name18)
    False

Support contacts are automatically subscribed to the target's new
tickets.

    >>> ticket = target.newTicket(sample_person, 'Yet another ticket',
    ...     'The support contact will be subscribed to this one.')
    >>> name18 in [s.person for s in ticket.subscriptions]
    True

Support contacts can be removed by using the removeSupportContact()
method. Like its counterpart, it returns True when the support contact
was removed and False when the person wasn't on the support contact
list.

    >>> target.removeSupportContact(name18)
    True
    >>> list(target.support_contacts)
    []
    >>> target.removeSupportContact(name18)
    False

Only registered users can remove a support contact:

    >>> login(ANONYMOUS)
    >>> target.removeSupportContact(name18)
    Traceback (most recent call last):
      ...
    Unauthorized...
