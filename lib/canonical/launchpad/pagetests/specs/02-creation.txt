= Creating Blueprints =

Blueprints can be created from multiple locations within Launchpad. In
particular, logged-in users can create blueprints from distribution pages, from 
project pages and from project group pages. It's also possible to create a 
blueprint from the Blueprints home page.

Let's start by demonstrating that users can register blueprints while looking
at a distribution. In this case, Ubuntu:

    >>> user_browser.open('http://blueprints.launchpad.dev/ubuntu')
    >>> user_browser.getLink('Register').click()
    >>> user_browser.url
    'http://blueprints.launchpad.dev/ubuntu/+addspec'

By default, new blueprints have the 'New' status:

    >>> user_browser.getControl('Status').value
    ['New']

Users can also register blueprints while looking at a project:

    >>> user_browser.open('http://blueprints.launchpad.dev/firefox')
    >>> user_browser.getLink('Register').click()
    >>> user_browser.url
    'http://blueprints.launchpad.dev/firefox/+addspec'

Finally, users can also register blueprints while looking at a project group:

    >>> user_browser.open('http://blueprints.launchpad.dev/mozilla')
    >>> user_browser.getLink('Register').click()  
    >>> user_browser.url
    'http://blueprints.launchpad.dev/mozilla/+addspec'

Let's go one step further and actually register a blueprint for the Ubuntu 
distribution:

    >>> user_browser.open('http://blueprints.launchpad.dev/ubuntu/+addspec')
    >>> control = user_browser.getControl
    >>> summary = ("Users are increasingly using multiple networks. Being able "
    ...            "to seamlessly move between networks whilst remembering the "
    ...            "correct settings for each network would greatly enhance "
    ...            "Ubuntu's usability for mobile professionals. Many network "
    ...            "dependent services should only be run when the system is "
    ...            "positive that it has a network. This would greatly enhance "
    ...            "the system's flexibility and responsiveness.")
    >>> control('Name').value = 'networkmagic'
    >>> control('Title').value = 'Network Magic: Automatic Network Detection'
    >>> control('URL').value = 'http://wiki.ubuntu.com/NetworkMagic'
    >>> control('Status').value = ['Approved']
    >>> control('Summary').value = summary
    >>> control('Assignee').value = 'daf@canonical.com'
    >>> control('Drafter').value = 'carlos@canonical.com'
    >>> control('Approver').value = 'tsukimi@quaqua.net'
    >>> control('Register').click()
    >>> user_browser.url
    'http://blueprints.launchpad.dev/ubuntu/+spec/networkmagic'

Observe that logged-on users can now see the blueprint:

    >>> url = 'http://blueprints.launchpad.dev/ubuntu/+spec/networkmagic'
    >>> user_browser.open(url)
    >>> user_browser.url
    'http://blueprints.launchpad.dev/ubuntu/+spec/networkmagic'

It's not possible to register a blueprint with the same name as an existing
blueprint:

    >>> user_browser.open('http://blueprints.launchpad.dev/ubuntu/+addspec')
    >>> control('Name').value = 'networkmagic'
    >>> control('Title').value = 'Network Magic: Automatic Network Detection'
    >>> control('URL').value = 'http://wiki.ubuntu.com/NetworkMagicNew'
    >>> control('Status').value = ['Approved']
    >>> control('Summary').value = summary
    >>> control('Assignee').value = 'daf@canonical.com'
    >>> control('Drafter').value = 'carlos@canonical.com'
    >>> control('Approver').value = 'tsukimi@quaqua.net'
    >>> control('Register').click()
    >>> user_browser.url
    'http://blueprints.launchpad.dev/ubuntu/+addspec'
    >>> for message in find_tags_by_class(user_browser.contents, 'message'):
    ...      print message.renderContents()
    There is 1 error...already in use by another blueprint...

Additionally, blueprint names must conform to a set pattern:

    >>> user_browser.open('http://blueprints.launchpad.dev/ubuntu/+addspec')
    >>> control('Name').value = 'NetworkMagic!'
    >>> control('Title').value = 'Network Magic: Automatic Network Detection'
    >>> control('URL').value = 'http://wiki.ubuntu.com/NetworkMagicBang'
    >>> control('Summary').value = summary
    >>> control('Status').value = ['Approved']
    >>> control('Assignee').value = 'daf@canonical.com'
    >>> control('Drafter').value = 'carlos@canonical.com'
    >>> control('Approver').value = 'tsukimi@quaqua.net'
    >>> control('Register').click()
    >>> user_browser.url
    'http://blueprints.launchpad.dev/ubuntu/+addspec'
    >>> for message in find_tags_by_class(user_browser.contents, 'message'):
    ...      print message.renderContents()
    There is 1 error...Invalid name...

However, some invalid names can be transformed into valid names. When it is 
clear that a valid name can be produced by removing trailing spaces or by 
converting upper case characters to their lower case equivalents, this is done 
automatically for the user:

    >>> user_browser.open('http://blueprints.launchpad.dev/ubuntu/+addspec')
    >>> control('Name    ').value = 'New-Network-Magic'
    >>> control('Title   ').value = 'Network Magic: Automatic Network Detection'
    >>> control('URL     ').value = 'http://wiki.ubuntu.com/NewNetworkMagic'
    >>> control('Summary ').value = summary
    >>> control('Status  ').value = ['Approved']
    >>> control('Assignee').value = 'daf@canonical.com'
    >>> control('Drafter ').value = 'carlos@canonical.com'
    >>> control('Approver').value = 'tsukimi@quaqua.net'
    >>> control('Register').click()
    >>> user_browser.url
    'http://blueprints.launchpad.dev/ubuntu/+spec/new-network-magic'
    >>> print user_browser.contents
    <...Blueprint overview...

It's not possible to register a blueprint with the same URL as an existing
blueprint:

    >>> user_browser.open('http://blueprints.launchpad.dev/ubuntu/+addspec')
    >>> control('Name').value = 'dupenetworkmagic'
    >>> control('Title').value = 'This is a dupe Network Magic Spec'
    >>> control('URL').value = 'http://wiki.ubuntu.com/NetworkMagic'
    >>> control('Summary').value = summary
    >>> control('Status').value = ['Approved']
    >>> control('Assignee').value = 'daf@canonical.com'
    >>> control('Drafter').value = 'carlos@canonical.com'
    >>> control('Approver').value = 'tsukimi@quaqua.net'
    >>> control('Register').click()
    >>> user_browser.url
    'http://blueprints.launchpad.dev/ubuntu/+addspec'
    >>> for message in find_tags_by_class(user_browser.contents, 'message'):
    ...      print message.renderContents()
    There is 1 error...already registered by another blueprint...


== Project group blueprint registration ==

Users can register blueprints while looking at a project group. In this case, 
the user is asked to specify a project from the list of projects in the group:

    >>> user_browser.open('http://blueprints.launchpad.dev/mozilla/+addspec')
    >>> control('For').value = ['thunderbird']
    >>> control('Name').value = 'gee-whizz-wotzit'
    >>> control('Title').value = 'Grand amazing tool'
    >>> control('URL').value = 'http://wiki.mozilla.org/WhizzWotzit'
    >>> control('Status').value = ['Approved']
    >>> control('Assignee').value = 'daf@canonical.com'
    >>> control('Drafter').value = 'carlos@canonical.com'
    >>> control('Approver').value = 'tsukimi@quaqua.net'
    >>> control('Summary').value = ('This widget is the latest and greatest in '
    ...                              'a long range of wotzits. All wotzits are '
    ...                              'known to be particularly resilient.')
    >>> control('Register').click()
    >>> user_browser.url
    'http://blueprints.launchpad.dev/thunderbird/+spec/gee-whizz-wotzit'


== System-wide blueprint registration ==

Users can register blueprints while looking at the Blueprints home page. In
this case, the user is asked to specify a project from the list of all projects
in Launchpad:

    >>> user_browser.open('http://blueprints.launchpad.dev/specs/+new')
    >>> control('For').value = 'ubuntu'
    >>> control('Name').value = 'brandnewspec'
    >>> control('Title').value = 'Network Voodoo: Automatic Network Detection'
    >>> control('URL').value = 'http://wiki.ubuntu.com/NetworkVoodoo'
    >>> control('Summary').value = summary
    >>> control('Status').value = ['Approved']
    >>> control('Assignee').value = 'daf@canonical.com'
    >>> control('Drafter').value = 'carlos@canonical.com'
    >>> control('Approver').value = 'tsukimi@quaqua.net'
    >>> control('Register').click()
    >>> user_browser.url
    'http://blueprints.launchpad.dev/ubuntu/+spec/brandnewspec'

== Registration and sprint proposal ==

When registering a blueprint, it is possible to immediately propose it for
a sprint.

=== Registering and proposing for a sprint from a project ===

When registering a blueprint for a project, we specify the `sprint` field to
propose the blueprint we register for that sprint. If the user has permissions
the blueprint will be automatically added to the agenda for the sprint.

    >>> sample_browser = setupBrowser('Basic test@canonical.com:test')
    >>> sample_browser.open('http://blueprints.launchpad.dev/jokosher')
    >>> sample_browser.getLink('Register blueprint').click()
    >>> sample_browser.getControl('Name').value = 'spec-for-sprint'
    >>> sample_browser.getControl('Title').value = 'Spec for Sprint'
    >>> summary = "A spec to be discussed at a sprint"
    >>> sample_browser.getControl('Summary').value = summary
    >>> sample_browser.getControl('Propose for sprint').value = ['paris']
    >>> sample_browser.getControl('Register Blueprint').click()
    >>> sample_browser.url
    'http://blueprints.launchpad.dev/jokosher/+spec/spec-for-sprint'
    >>> sample_browser.open('http://blueprints.launchpad.dev/sprints/paris')
    >>> find_tag_by_id(sample_browser.contents, 'speclisting')
    <...spec-for-sprint...>

=== Registering and proposing for a sprint from a sprint ===

When registering a blueprint from a sprint, it is necessary to fill in the
target field. The sprint field isn't present, since it is implicitly known from
the context.

When a user without permissions to the sprint registers a new blueprint, it is
proposed for this sprint, but not added to the agenda. A priviledged user can
accept or reject the proposal from the agenda page.

    >>> user_browser.open(
    ...     'http://blueprints.launchpad.dev/sprints/futurista/+addspec')
    >>> user_browser.getControl('For').value = 'jokosher'
    >>> user_browser.getControl('Name').value = 'another-spec-for-sprint'
    >>> user_browser.getControl('Title').value = 'Another Spec for Sprint'
    >>> user_browser.getControl('Summary').value = (
    ...     "Another spec to be discussed at a sprint")
    >>> user_browser.getControl('Register Blueprint').click()
    >>> user_browser.url
    'http://blueprints.launchpad.dev/sprints/futurista'
    >>> 'another-spec-for-sprint' in user_browser.contents
    False
    >>> admin_browser.open(
    ...     'http://blueprints.launchpad.dev/sprints/futurista/+settopics')
    >>> find_tag_by_id(admin_browser.contents, 'speclisting')
    <...another-spec-for-sprint...>
