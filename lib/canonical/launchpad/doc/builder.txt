Builder Classes
===============

This test aims to meet the requirements of
<https://launchpad.canonical.com/BasicTestCoverage> for the Builder class,
which represents the Buildd Slave entity.

Need auxiliar methods from zope toolchain:

 >>> from zope.interface.verify import verifyObject
 >>> from zope.component import getUtility

Importing Builder content class and its interface:

 >>> from canonical.launchpad.database import Builder
 >>> from canonical.launchpad.interfaces import IBuilder

Get an instance of Builder from the current sampledata:

 >>> builder = Builder.get(1)

Test some attributes:

 >>> builder.id, builder.name
 (1, u'bob')

Test 'status' property:

 >>> builder.failnotes = 'Could not open Socket'
 >>> builder.status
 u'NOT OK : Could not open Socket (AUTO)'

 >>> builder.builderok = True
 >>> builder.status
 u'BUILDING i386 build of mozilla-firefox 0.9 in ubuntu hoary (AUTO)'

 >>> builder.manual = True
 >>> builder.status
 u'BUILDING i386 build of mozilla-firefox 0.9 in ubuntu hoary (MANUAL)'

Confirm we can get the slave xmlrpc interface

 >>> s = builder.slave

Confirm that the urlbase is correct in that slave. (If the protocol changes,
this may change too)

 >>> s.urlbase == builder.url
 True

Check if the instace corresponds to the declared interface:

 >>> verifyObject(IBuilder, builder)
 True


Now perform the tests for the Builder ContentSet class, BuilderSet.

Check if it can be imported:

 >>> from canonical.launchpad.interfaces import IBuilderSet

Check we can use the set as a utility:

 >>> builderset = getUtility(IBuilderSet)

Check if the instance returned as utility corresponds to its
respective interface:

 >>> verifyObject(IBuilderSet, builderset)
 True

Check if the instance is iterable:

 >>> for b in builderset:
 ...     b.id
 1

Check if the __getitem__ method:

 >>> builderset['bob'].name
 u'bob'

Check now the specific method in the utility as new():

 >>> bnew = builderset.new(1, 'http://dummy.com:8221/', 'dummy',
 ...	                   'Dummy Title', 'eh ?', 1)
 >>> bnew.name
 u'dummy'

 Check get() which returns a correspondent Builder instance to a given
 id:

 >>> builderset.get(bnew.id).name
 u'dummy'

Or raises an SQLObjectNotFound exception:

 >>> from sqlobject import SQLObjectNotFound
 >>> try:
 ...    builderset.get(100)
 ... except SQLObjectNotFound, info:
 ...    "%s" % info
 'The object Builder by the ID 100 does not exist'

count() return the number of builder instance we have stored:

 >>> builderset.count()
 2

getBuilder() method returns all the builders available. It seems the
same than the own instance but we have plans to turn it aware of some
attributes of builder instance as: builderok and trust.

 >>> for b in builderset.getBuilders():
 ...     b.name
 u'bob'
 u'dummy'


