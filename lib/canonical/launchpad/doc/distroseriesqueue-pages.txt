= PackageUpload View Classes and Pages =

The QueueItemsView (browser/queue.py) is extended by the default view
for IDistroSeries context (IDistroSeriesView)

Let's instantiate the view for +queue for anonymous access:

  >>> from zope.component import queryMultiAdapter
  >>> from zope.publisher.browser import TestRequest
  >>> from canonical.launchpad.interfaces import IDistributionSet

  >>> ubuntu = getUtility(IDistributionSet)['ubuntu']
  >>> breezy_autotest = ubuntu['breezy-autotest']

  >>> request = TestRequest(form={})
  >>> queue_view = queryMultiAdapter(
  ...     (breezy_autotest, request), name="+queue")

View parameters need to be set properly before start:

  >>> queue_view.setupQueueList()

After setup we have a 'batched' list:

  >>> from canonical.launchpad.webapp.interfaces import IBatchNavigator
  >>> from canonical.launchpad.webapp.testing import verifyObject
  >>> verifyObject(IBatchNavigator, queue_view.batchnav)
  True

  >>> len(queue_view.batchnav.currentBatch())
  6

The local state (PackageUploadStatus, dbschema)

  >>> queue_view.state.name
  'NEW'

A list of available actions in this queue:

  >>> queue_view.availableActions()
  []

Let's instantiate the view for a specific queue:

  >>> from canonical.launchpad.interfaces import PackageUploadStatus
  >>> request = TestRequest(
  ...     form={'queue_state': PackageUploadStatus.DONE.value})
  >>> warty = ubuntu['warty']
  >>> queue_view = queryMultiAdapter((warty, request), name="+queue")
  >>> queue_view.setupQueueList()
  >>> queue_view.state.name
  'DONE'
  >>> len(queue_view.batchnav.currentBatch())
  1

Unexpected values for queue_state results in a proper error, anything
that can't be can't fit as an integer is automatically assume as the
default value (NEW queue).

  >>> request = TestRequest(
  ...     form={'queue_state': 'foo'})
  >>> warty = ubuntu['warty']
  >>> queue_view = queryMultiAdapter((warty, request), name="+queue")
  >>> queue_view.setupQueueList()
  >>> queue_view.state.name
  'NEW'
  >>> len(queue_view.batchnav.currentBatch())
  0

If a invalid integer is posted it raises.

  >>> request = TestRequest(
  ...     form={'queue_state': '10'})
  >>> warty = ubuntu['warty']
  >>> queue_view = queryMultiAdapter((warty, request), name="+queue")
  >>> queue_view.setupQueueList()
  Traceback (most recent call last):
  ...
  UnexpectedFormData: No suitable status found for value "10"

Anonymous users also have access to all queues, including UNAPPROVED
but they are not allowed to perform any action.

  >>> request = TestRequest(
  ...     form={'queue_state': PackageUploadStatus.UNAPPROVED.value})
  >>> queue_view = queryMultiAdapter(
  ...     (breezy_autotest, request), name="+queue")
  >>> queue_view.setupQueueList()
  >>> queue_view.state.name
  'UNAPPROVED'
  >>> len(queue_view.batchnav.currentBatch())
  5

  >>> queue_view.availableActions()
  []

Now, let's instantiate the view for +queue as a privileged user:

  >>> login('foo.bar@canonical.com')

  >>> queue_view = queryMultiAdapter(
  ...     (breezy_autotest, request), name="+queue")
  >>> queue_view.setupQueueList()
  >>> queue_view.availableActions()
  ['Accept', 'Reject']

Attempt to view and act on UNAPPROVED queue works for administrators.

  >>> request = TestRequest(
  ...     form={'queue_state': PackageUploadStatus.UNAPPROVED.value})
  >>> queue_view = queryMultiAdapter(
  ...     (breezy_autotest, request), name="+queue")
  >>> queue_view.setupQueueList()
  >>> queue_view.state.name
  'UNAPPROVED'
  >>> queue_view.availableActions()
  ['Accept', 'Reject']

Action on presented queue are controlled and performed by the
'performAction' method, which return a HTML-formatted report text
about the actions performed.

It accepts the 'Accept'/'Reject' and 'QUEUE_ID' arguments via POST.

Accepting an item from NEW queue.

  >>> from canonical.launchpad.interfaces import IPackageUploadSet
  >>> getUtility(IPackageUploadSet).get(1).status.name
  'NEW'
  >>> getUtility(IPackageUploadSet).get(3).status.name
  'NEW'

  >>> request = TestRequest(
  ...     form={'queue_state': PackageUploadStatus.NEW.value,
  ...           'Accept': 'Accept',
  ...           'QUEUE_ID': ['1', '3']})
  >>> request.method = 'POST'

Add fake librarian files so that email notifications work:

  >>> from canonical.archiveuploader.tests import (
  ...     insertFakeChangesFileForAllPackageUploads)
  >>> insertFakeChangesFileForAllPackageUploads()

Anonymous attempts to accept queue items are ignored and an error
message is presented.

  >>> login(ANONYMOUS)
  >>> queue_view = queryMultiAdapter(
  ...     (breezy_autotest, request), name="+queue")
  >>> queue_view.setupQueueList()
  >>> queue_view.performQueueAction()
  >>> print queue_view.error
  You do not have permission to act on queue items.

  >>> getUtility(IPackageUploadSet).get(1).status.name
  'NEW'
  >>> getUtility(IPackageUploadSet).get(3).status.name
  'NEW'

Privileged user can accept queue items.

  >>> login('foo.bar@canonical.com')
  >>> queue_view = queryMultiAdapter(
  ...     (breezy_autotest, request), name="+queue")
  >>> queue_view.setupQueueList()

  >>> queue_view.performQueueAction()
  u'Accepting Results:<br><br>OK: mozilla-firefox, OK: netapplet'

  >>> getUtility(IPackageUploadSet).get(1).status.name
  'ACCEPTED'
  >>> getUtility(IPackageUploadSet).get(3).status.name
  'DONE'

Rejection an item from NEW queue:

  >>> target = getUtility(IPackageUploadSet).get(2)
  >>> target.status.name
  'NEW'

  >>> request = TestRequest(
  ...     form={'queue_state': PackageUploadStatus.NEW.value,
  ...           'Reject': 'Reject',
  ...           'QUEUE_ID': '2'})
  >>> request.method = 'POST'

Anonymous attempts to reject queue items are ignored and an error
message is presented.

  >>> login(ANONYMOUS)
  >>> queue_view = queryMultiAdapter(
  ...     (breezy_autotest, request), name="+queue")
  >>> queue_view.setupQueueList()
  >>> queue_view.performQueueAction()
  >>> print queue_view.error
  You do not have permission to act on queue items.

  >>> target.status.name
  'NEW'

Privileged user can reject queue items.

  >>> login('foo.bar@canonical.com')
  >>> queue_view = queryMultiAdapter(
  ...     (breezy_autotest, request), name="+queue")
  >>> queue_view.setupQueueList()

  >>> queue_view.performQueueAction()
  u'Rejecting Results:<br><br>OK: pmount'

  >>> target.status.name
  'REJECTED'

We created librarian files that need cleaning up before leaving the test.

  >>> from canonical.librarian.ftests.harness import cleanupLibrarianFiles
  >>> cleanupLibrarianFiles()
