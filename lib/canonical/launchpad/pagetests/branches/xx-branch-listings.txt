= Branch Listing Pages =

Pages that want to display lists of branches use the branch-listing
page template, and views derived from BranchListingView.

The branch listing page template and associated view provide batching
of the branches, filtering of the lifecycle statuses, ordering of
various kinds and badge decoration.

Branch listing pages now hide dormant branches by default.  Dormant
branches are branches that have not been updated or committed to for
some time.  Since this is a time based change all the branches
are reset here to be recently updated.

    >>> from canonical.launchpad.ftests.branch_helper import (
    ...     reset_all_branch_last_modified)
    >>> reset_all_branch_last_modified()


== Branch Batching ==

Batching is applied to branch listings where there are many items.
Luckily for us, many is 5 in the tests.

Sample Person is used as the logged in user in order to show his private
branches in the listings.

    >>> browser = setupBrowser(auth='Basic test@canonical.com:test')
    >>> browser.open('http://code.launchpad.dev/~name12')
    >>> links = find_tag_by_id(browser.contents, 'branch-batch-links')
    >>> print links.renderContents()
    <BLANKLINE>
    ...1...&rarr;...6...of 12 results...

    >>> table = find_tag_by_id(browser.contents, 'branchtable')
    >>> for row in table.thead.fetch('tr'):
    ...     print extract_text(row)
    Name
    Status
    Last Modified
    Last Commit

Unfortunately our sample data is somewhat lacking in the last commit
fields.  There are a couple of branches that have them, but most don't
and are really just branch metadata without the revisions behind them.

    >>> for row in table.tbody.fetch('tr'):
    ...     print extract_text(row)
    ~name12/firefox/main                New          ...
    ~name12/gnome-terminal/2.6          Mature       ...
    ~name12/gnome-terminal/main         Development  ...
    ~name12/gnome-terminal/klingon      Experimental ...
    ~launchpad/gnome-terminal/launchpad New          ...
    ~name12/gnome-terminal/mirrored     New          ...

    >>> browser.getLink('Next').click()
    >>> links = find_tag_by_id(browser.contents, 'branch-batch-links')
    >>> print links.renderContents()
    <BLANKLINE>
    ...7...&rarr;...12...of 12 results...

    >>> table = find_tag_by_id(browser.contents, 'branchtable')
    >>> for row in table.tbody.fetch('tr'):
    ...     print extract_text(row)
    ~name12/gnome-terminal/pushed           New           ...
    ~name12/gnome-terminal/scanned          New           ...
    ~name12/landscape/feature-x             New           ...
    ~landscape-developers/landscape/trunk   New           ...
    ~name12/+junk/junk.dev                  Experimental  ...
    ~name12/+junk/junk.contrib              New           ...

If the branch listing has few enough entries that batching isn't
needed, then the table is sortable and no batching navigation links are shown.

    >>> browser.open('http://code.launchpad.dev/~name12')
    >>> browser.getLink('Subscribed').click()
    >>> links = find_tag_by_id(browser.contents, 'branch-batch-links')
    >>> links is None
    True


== Lifecycle Filtering ==

When the branches for a person is first loaded, only the 'Current'
branches are shown.  Current branches are those that have a
lifecycle status of New, Development, Experimental or Mature.
Merged or Abandoned branches are not shown.

    >>> browser.open('http://code.launchpad.dev/~name12')
    >>> table = find_tag_by_id(browser.contents, 'branchtable')
    >>> for row in table.tbody.fetch('tr'):
    ...     print extract_text(row)
    ~name12/firefox/main                 New          ...
    ~name12/gnome-terminal/2.6           Mature       ...
    ~name12/gnome-terminal/main          Development  ...
    ~name12/gnome-terminal/klingon       Experimental ...
    ~launchpad/gnome-terminal/launchpad  New          ...
    ~name12/gnome-terminal/mirrored      New          ...

There is a select control that is used to define which
subset of the branches are shown.

    >>> filter_control = browser.getControl(name='field.lifecycle')
    >>> filter_control
    <ListControl name='field.lifecycle' type='select'>
    >>> filter_control.displayValue
    ['Any active status']
    >>> filter_control.displayOptions
    ['Any active status', 'Any status', 'New', 'Experimental', 'Development', 'Mature', 'Merged', 'Abandoned']

Changing the value of the select control will (in a javascript
enabled browser) cause the form to be submitted automatically.
For browsers with javascript disabled, there is a form submit
button.

    >>> filter_control.displayValue = ['Any status']
    >>> browser.getControl('Filter').click()

Now all types of branches should be shown.

    >>> links = find_tag_by_id(browser.contents, 'branch-batch-links')
    >>> print links.renderContents()
    <BLANKLINE>
    ...1...&rarr;...6...of 14 results...

    >>> table = find_tag_by_id(browser.contents, 'branchtable')
    >>> for row in table.tbody.fetch('tr'):
    ...     print extract_text(row)
    ~name12/firefox/main             New             ...
    ~name12/gnome-terminal/2.4       Abandoned       ...
    ~name12/gnome-terminal/slowness  Merged          ...
    ~name12/gnome-terminal/2.6       Mature          ...
    ~name12/gnome-terminal/main      Development     ...
    ~name12/gnome-terminal/klingon   Experimental    ...

    >>> browser.getLink('Next').click()
    >>> links = find_tag_by_id(browser.contents, 'branch-batch-links')
    >>> print links.renderContents()
    <BLANKLINE>
    ...7...&rarr;...12...of 14 results...

    >>> table = find_tag_by_id(browser.contents, 'branchtable')
    >>> for row in table.tbody.fetch('tr'):
    ...     print extract_text(row)
    ~launchpad/gnome-terminal/launchpad   New     ...
    ~name12/gnome-terminal/mirrored       New     ...
    ~name12/gnome-terminal/pushed         New     ...
    ~name12/gnome-terminal/scanned        New     ...
    ~name12/landscape/feature-x           New     ...
    ~landscape-developers/landscape/trunk New     ...


Selecting an individual lifecycle status from the select control
will cause only branches with that status to be listed.

    >>> browser.getControl(name='field.lifecycle').displayValue = ['Abandoned']
    >>> browser.getControl('Filter').click()
    >>> table = find_tag_by_id(browser.contents, 'branchtable')
    >>> for row in table.tbody.fetch('tr'):
    ...     print extract_text(row)
    ~name12/gnome-terminal/2.4    Abandoned     ...

If anyone tries to hack the URL, and put in an invalid
status value, it will default to current branches.

    >>> browser.open(
    ...  'http://launchpad.dev/~name12/+branches?field.lifecycle=Fubar')
    >>> browser.getControl(name='field.lifecycle').displayValue
    ['Any active status']
    >>> table = find_tag_by_id(browser.contents, 'branchtable')
    >>> for row in table.tbody.fetch('tr'):
    ...     print extract_text(row)
    ~name12/firefox/main                  New          ...
    ~name12/gnome-terminal/2.6            Mature       ...
    ~name12/gnome-terminal/main           Development  ...
    ~name12/gnome-terminal/klingon        Experimental ...
    ~launchpad/gnome-terminal/launchpad   New          ...
    ~name12/gnome-terminal/mirrored       New          ...

If the user does have branches, but they are not visible with
the current filter, the table is shown, and a (hopefully)
helpful message supplied.

    >>> browser.open('http://code.launchpad.dev/'
    ...   '~launchpad/+branches?field.lifecycle=Mature')
    >>> browser.getControl(name='field.lifecycle').displayValue
    ['Mature']
    >>> message = find_tag_by_id(browser.contents, 'no-branch-message')
    >>> print message.renderContents()
    There are branches related to Launchpad Developers...

If the user does not have any branches, then we say so.

    >>> browser.open('http://code.launchpad.dev/'
    ...   '~no-priv?field.lifecycle=Mature')
    >>> browser.getControl(name='field.lifecycle').displayValue
    ['Mature']
    >>> message = find_tag_by_id(browser.contents, 'no-branch-message')
    >>> print message.renderContents()
    There are no branches related to No Privileges Person in Launchpad...


== Branch Badge Decoration ==

We display badges for associated bugs.

    >>> def branchSummary(browser):
    ...     table = find_tag_by_id(browser.contents, 'branchtable')
    ...     for row in table.tbody.fetch('tr'):
    ...         cells = row.findAll('td')
    ...         first_cell = cells[0]
    ...         anchors = first_cell.fetch('a')
    ...         print anchors[0].get('href')
    ...         # Badges in the next cell
    ...         for img in cells[1].findAll('img'):
    ...             print img['title']

    >>> browser.open('http://code.launchpad.dev/firefox/+branches')
    >>> branchSummary(browser)
    /~name12/firefox/main
      Linked to a bug
    /~sabdfl/firefox/release--0.9.1
    /~sabdfl/firefox/release-0.8
    /~sabdfl/firefox/release-0.9
    /~sabdfl/firefox/release-0.9.2
      Linked to a bug

If the bug is not visible to the user that is looking at the page, then the
badge is not shown.

    >>> browser.open('http://bugs.launchpad.dev/firefox/+bug/4')
    >>> browser.getLink('Set privacy/security').click()
    >>> browser.getControl('This bug report should be private').click()
    >>> browser.getControl('Change').click()

Now the badge is still shown for Sample Person...

    >>> browser.open('http://code.launchpad.dev/firefox/+branches')
    >>> branchSummary(browser)
    /~name12/firefox/main
      Linked to a bug
    /~sabdfl/firefox/release--0.9.1
    /~sabdfl/firefox/release-0.8
    /~sabdfl/firefox/release-0.9
    /~sabdfl/firefox/release-0.9.2
      Linked to a bug

... but not for an anonymous user.

    >>> anon_browser.open('http://code.launchpad.dev/firefox/+branches')
    >>> branchSummary(anon_browser)
    /~name12/firefox/main
      Linked to a bug
    /~sabdfl/firefox/release--0.9.1
    /~sabdfl/firefox/release-0.8
    /~sabdfl/firefox/release-0.9
    /~sabdfl/firefox/release-0.9.2


== Sorting Branch Listings ==

Aside from the implicitly sorted listings of recently registered,
imported and changed branches, all branch listings have a widget that
allows changing the sort order.

On a listing that can have branches from more than one product (such
as the listing of branches owned by a person), the default ordering is
by product name (which is of course called "project name" in the UI).

    >>> browser.open('http://code.launchpad.dev/~name12')
    >>> sort_by_control = browser.getControl(name='field.sort_by')
    >>> sort_by_control.value
    ['by project name']
    >>> for option in sort_by_control.options:
    ...     print option
    by project name
    by lifecycle status
    by author name
    by branch name
    by registrant name
    most recently changed first
    least recently changed first
    newest first
    oldest first

On a listing that can only have branches from one product, the default
is to sort by lifecycle status, and product name is not one of the
options that can be selected.

    >>> browser.open('http://code.launchpad.dev/gnome-terminal/+branches')
    >>> sort_by_control = browser.getControl(name='field.sort_by')
    >>> sort_by_control.value
    ['by lifecycle status']
    >>> sort_by_control.value = ['by project name']
    Traceback (most recent call last):
      ...
    ItemNotFoundError: insufficient items with name 'by project name'
    >>> for option in sort_by_control.options:
    ...     print option
    by most interesting
    by lifecycle status
    by author name
    by branch name
    by registrant name
    most recently changed first
    least recently changed first
    newest first
    oldest first

If you filter by a specific lifecycle status then ordering by
lifecycle ceases to be relevant, and the default is to sort by author.

    >>> browser.open('http://code.launchpad.dev/gnome-terminal/+branches')
    >>> status_control = browser.getControl(name='field.lifecycle')
    >>> status_control.value = ['MATURE']
    >>> browser.getControl('Filter').click()
    >>> browser.getControl(name='field.sort_by').value
    ['by most interesting']

The implicitly sorted listings do not have an ordering widget at all.

    >>> browser.open('http://code.launchpad.dev/+recently-registered-branches')
    >>> browser.getControl(name='field.sort_by').value
    Traceback (most recent call last):
    ...
    LookupError: name 'field.sort_by'

Finally, sorting by a particular criterion has the desired effect.

    >>> browser.open('http://code.launchpad.dev/gnome-terminal/+branches')
    >>> table = find_tag_by_id(browser.contents, 'branchtable')
    >>> for row in table.tbody.fetch('tr'):
    ...     print extract_text(row)
    ~name12/gnome-terminal/2.6            Mature       ...
    ~name12/gnome-terminal/main           Development  ...
    ~name12/gnome-terminal/klingon        Experimental ...
    ~launchpad/gnome-terminal/launchpad   New          ...
    ~vcs-imports/gnome-terminal/import    New          ...
    ~name12/gnome-terminal/mirrored       New          ...

    >>> browser.getControl(name='field.sort_by').value = ['by author name']
    >>> browser.getControl('Filter').click()
    >>> table = find_tag_by_id(browser.contents, 'branchtable')
    >>> for row in table.tbody.fetch('tr'):
    ...     print extract_text(row)
    ~launchpad/gnome-terminal/launchpad    New             ...
    ~name12/gnome-terminal/klingon         Experimental    ...
    ~name12/gnome-terminal/2.6             Mature          ...
    ~name12/gnome-terminal/main            Development     ...
    ~vcs-imports/gnome-terminal/import     New             ...
    ~name12/gnome-terminal/mirrored        New             ...


== Highlighting the development focus branch ==

The branch associated with the development focus series is highlighted
on the branch listings using the same CSS style that is used to
highlight the development focus series on the product overview page.

Firstly we need to make the "main" branch of gnome-terminal the
development focus branch.

    >>> admin_browser.open('http://launchpad.dev/gnome-terminal/trunk')
    >>> admin_browser.getLink('Edit source').click()
    >>> admin_browser.getControl('Bazaar').click()
    >>> admin_browser.getControl(name='field.user_branch').value = (
    ...     '~name12/gnome-terminal/main')
    >>> admin_browser.getControl('Update Details').click()

Now when we look at the branches for gnome-terminal, the main branch
now shows as the "Current development focus".  This is indicated by
both the series link in the first column with the branch unique name,
but also with a star with the badges.

    >>> browser.open('http://code.launchpad.dev/gnome-terminal')
    >>> table = find_tag_by_id(browser.contents, 'branchtable')
    >>> # The development focus is always first.
    >>> row = table.tbody.fetch('tr')[0]
    >>> cols = row.fetch('td')
    >>> print extract_text(cols[0])
    ~name12/gnome-terminal/main  Series: trunk
    >>> print cols[1].renderContents()
    <img src="/@@/favourite-yes" title="Current development focus" />

If a branch is associated with more than one series, then the links
are comma separated and in alphabetical order.

    >>> admin_browser.open('http://launchpad.dev/gnome-terminal')
    >>> admin_browser.getLink('Register a series').click()
    >>> admin_browser.getControl('Name').value = 'pre-1.0'
    >>> admin_browser.getControl('Summary').value = 'summary'
    >>> admin_browser.getControl('Branch').value = (
    ...     '~name12/gnome-terminal/main')
    >>> admin_browser.getControl('Register Series').click()

    >>> admin_browser.open('http://launchpad.dev/gnome-terminal')
    >>> admin_browser.getLink('Register a series').click()
    >>> admin_browser.getControl('Name').value = 'alpha'
    >>> admin_browser.getControl('Summary').value = 'summary'
    >>> admin_browser.getControl('Branch').value = (
    ...     '~name12/gnome-terminal/main')
    >>> admin_browser.getControl('Register Series').click()

The current development focus is shown first though.

    >>> browser.open('http://code.launchpad.dev/gnome-terminal/+branches')
    >>> table = find_tag_by_id(browser.contents, 'branchtable')
    >>> print extract_text(table.tbody.fetch('tr')[1])
    ~name12/gnome-terminal/main  Series: trunk, alpha, pre-1.0  ...


== Hidden dormant branches ==

Dormant branches are thost that have not been edited or pushed
to in a significant period of time.  If a product has more branches
than would fit on one page, then the dormant branches are hidden
initially, and the user can uncheck the checkbox to get all branches
shown.

Here we are going to make two of Sample Person's branches dormant so
they are not shown by default.

    >>> browser.open('http://code.launchpad.dev/gnome-terminal/+branches')
    >>> table = find_tag_by_id(browser.contents, 'branchtable')
    >>> for row in table.tbody.fetch('tr'):
    ...     print extract_text(row)
    ~name12/gnome-terminal/2.6                             Mature       ...
    ~name12/gnome-terminal/main ...                        Development  ...
    ~name12/gnome-terminal/klingon                         Experimental ...
    ~launchpad/gnome-terminal/launchpad                    New          ...
    ~vcs-imports/gnome-terminal/import                     New          ...
    ~name12/gnome-terminal/mirrored                        New          ...

    >>> from canonical.launchpad.ftests.branch_helper import (
    ...     make_branch_dormant)
    >>> make_branch_dormant('~name12/gnome-terminal/klingon')
    >>> make_branch_dormant('~name12/gnome-terminal/mirrored')

The default listing now doesn't show these two branches.

    >>> browser.open('http://code.launchpad.dev/gnome-terminal/+branches')
    >>> browser.getControl(name='field.hide_dormant').value
    True
    >>> table = find_tag_by_id(browser.contents, 'branchtable')
    >>> for row in table.tbody.fetch('tr'):
    ...     print extract_text(row)
    ~name12/gnome-terminal/2.6                            Mature      ...
    ~name12/gnome-terminal/main ...                       Development ...
    ~launchpad/gnome-terminal/launchpad                   New         ...
    ~vcs-imports/gnome-terminal/import                    New         ...
    ~name12/gnome-terminal/pushed                         New         ...
    ~name12/gnome-terminal/scanned                        New         ...

If we specify that the listing should show dormant branches they
are shown.

    >>> browser.getControl(name='field.hide_dormant').value = False
    >>> browser.getControl('Filter').click()
    >>> table = find_tag_by_id(browser.contents, 'branchtable')
    >>> for row in table.tbody.fetch('tr'):
    ...     print extract_text(row)
    ~name12/gnome-terminal/2.6                             Mature       ...
    ~name12/gnome-terminal/main ...                        Development  ...
    ~name12/gnome-terminal/klingon                         Experimental ...
    ~launchpad/gnome-terminal/launchpad                    New          ...
    ~vcs-imports/gnome-terminal/import                     New          ...
    ~name12/gnome-terminal/mirrored                        New          ...


== The last commit ==

The last commit column shows the revision number, and part of the
revision log for the last commit that Launchpad knows about.  The
revision number is linked to code browse if the branch is not private.
The revision author is shown in the column after the last commit to
allow the user to sort on the revision author column.

    >>> browser.open('http://code.launchpad.dev/firefox/+branches')
    >>> for commit in find_tags_by_class(browser.contents, 'lastCommit'):
    ...     print extract_text(commit)
    1.  Import of Mozilla Firefox 0.9.1
    1.  Import of Mozilla Firefox 0.9
    1.  Import of Mozilla Firefox 0.9.2

The entire commit message is shown in a div that gets shown when
the user moves the mouse over the last commit for a particular branch.

    >>> for commit in find_tags_by_class(browser.contents, 'popupTitle'):
    ...     print extract_text(commit)
    Author: mark.shuttleworth
    Revision Date: 2005-03-09 23:45:00 WST
    Import of Mozilla Firefox 0.9.1
    Author: mark.shuttleworth
    Revision Date: 2005-03-09 23:50:00 WST
    Import of Mozilla Firefox 0.9
    Author: mark.shuttleworth
    Revision Date: 2005-03-09 23:40:00 WST
    Import of Mozilla Firefox 0.9.2
