The ValidPersonOrTeamCache is an eager materialized view, containing a
cached list of Person.id that are considered 'valid'.

    >>> from canonical.database.sqlbase import cursor
    >>> cur = cursor()
    >>> def is_valid(person_id):
    ...     cur.execute("""
    ...         SELECT COUNT(*)>0 FROM ValidPersonOrTeamCache
    ...         WHERE id = %(person_id)s
    ...         """, vars())
    ...     return bool(cur.fetchone()[0])

    >>> sabdfl_id = 1
    >>> stub_id = 22
    >>> is_valid(sabdfl_id)
    True
    >>> is_valid(stub_id)
    True

Setup some constants we will use later

    >>> from canonical.lp.dbschema import EmailAddressStatus
    >>> new = EmailAddressStatus.NEW.value
    >>> preferred = EmailAddressStatus.PREFERRED.value
    >>> validated = EmailAddressStatus.VALIDATED.value

This table is maintained by triggers, so that relevant changes to the data
will be automatically reflected in the cache

People are not valid if they have been merged into another account

    >>> cur.execute("""
    ...     UPDATE Person SET merged = %(stub_id)s WHERE id=%(sabdfl_id)s
    ...     """, vars())
    >>> is_valid(sabdfl_id)
    False
    >>> cur.execute("""
    ...     UPDATE Person SET merged = NULL WHERE id=%(sabdfl_id)s
    ...     """, vars())
    >>> is_valid(sabdfl_id)
    True

People are not valid if they don't have a password

    >>> cur.execute("""
    ...     UPDATE Person SET password = NULL WHERE id = %(sabdfl_id)s
    ...     """, vars())
    >>> is_valid(sabdfl_id)
    False

But teams are

    >>> cur.execute("""
    ...     UPDATE Person SET teamowner = %(stub_id)s WHERE id = %(sabdfl_id)s
    ...     """, vars())
    >>> is_valid(sabdfl_id)
    True

    >>> cur.execute("""
    ...     UPDATE Person SET teamowner = NULL WHERE id = %(sabdfl_id)s
    ...     """, vars())
    >>> is_valid(sabdfl_id)
    False
    >>> cur.execute("""
    ...     UPDATE Person SET password = 'whatever' WHERE id = %(sabdfl_id)s
    ...     """, vars())
    >>> is_valid(sabdfl_id)
    True

A valid person needs to have a preferred email address set

    >>> is_valid(sabdfl_id)
    True
    >>> cur.execute("""
    ...     UPDATE EmailAddress SET status=%(new)s
    ...     WHERE person = %(sabdfl_id)s
    ...     """, vars())
    >>> is_valid(sabdfl_id)
    False
    >>> cur.execute("""
    ...     UPDATE EmailAddress SET status=%(preferred)s
    ...     WHERE person = %(sabdfl_id)s
    ...     """, vars())
    >>> is_valid(sabdfl_id)
    True

We support changing the owner of a email address

    >>> cur.execute("""
    ...     UPDATE EmailAddress
    ...         SET person = %(stub_id)s, status = %(validated)s
    ...     WHERE email = 'mark@hbd.com'
    ...     """, vars())
    >>> is_valid(sabdfl_id)
    False
    >>> is_valid(stub_id)
    True
    >>> cur.execute("""
    ...     UPDATE EmailAddress
    ...         SET person = %(sabdfl_id)s, status = %(preferred)s
    ...     WHERE email = 'mark@hbd.com'
    ...     """, vars())
    >>> is_valid(sabdfl_id)
    True
    >>> is_valid(stub_id)
    True

is_valid is set correctly no matter the order in which the tables are
updated.

    >>> cur.execute("""
    ...     UPDATE EmailAddress SET status = %(new)s
    ...     WHERE person = %(stub_id)s
    ...     """, vars())
    >>> is_valid(stub_id)
    False

    >>> cur.execute("""
    ...     UPDATE Person SET password = NULL
    ...     WHERE id = %(stub_id)s
    ...     """, vars())
    >>> is_valid(stub_id)
    False

    >>> cur.execute("""
    ...     UPDATE Person SET password = 'whatever'
    ...     WHERE id = %(stub_id)s
    ...     """, vars())
    >>> is_valid(stub_id)
    False

    >>> cur.execute("""
    ...     UPDATE EmailAddress SET status = %(preferred)s
    ...     WHERE person = %(stub_id)s AND email = 'stuart@stuartbishop.net'
    ...     """, vars())
    >>> is_valid(stub_id)
    True

Creating and deleting rows will populate things correctly

    >>> is_valid(888888)
    False
    >>> cur.execute("""
    ...     INSERT INTO Person (id, name, displayname, password)
    ...     VALUES (888888, 'tempy', 'tempy the temp account', 'secret')
    ...     """)
    >>> is_valid(888888)
    False
    >>> cur.execute("""
    ...     INSERT INTO EmailAddress (person, email, status)
    ...     VALUES (888888, 'tempy@example.com', %(preferred)s)
    ...     """, vars())
    >>> is_valid(888888)
    True
    >>> cur.execute("DELETE FROM EmailAddress WHERE person = 888888")
    >>> is_valid(888888)
    False

Note that teams don't need a preferred email address to be considered valid

    >>> is_valid(999999)
    False
    >>> cur.execute("""
    ...     INSERT INTO Person (id, name, displayname, teamowner)
    ...     VALUES (999999, 'tempyteam', 'tempy the temp team', %(stub_id)s)
    ...     """, vars())
    >>> is_valid(999999)
    True
    >>> cur.execute("""
    ...     INSERT INTO EmailAddress (person, email, status)
    ...     VALUES (999999, 'tempy@examplecom', %(preferred)s)
    ...     """, vars())
    >>> is_valid(999999)
    True
    >>> cur.execute("DELETE FROM EmailAddress WHERE person = 999999")
    >>> is_valid(999999)
    True

