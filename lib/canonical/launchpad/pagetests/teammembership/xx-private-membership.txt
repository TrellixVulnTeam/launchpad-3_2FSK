= Teams with Private Membership =

If a team's visibility attribute is set to Private Membership, only
launchpad admins and members of that team can see the membership.

Create a test team with private membership and a test member. Even
though no-priv is a proposed member by requesting to join this moderated
team, he still does not get access to the membership list.

    >>> from canonical.launchpad.ftests import login, logout
    >>> login('foo.bar@canonical.com')
    >>> from BeautifulSoup import BeautifulSoup as Soup
    >>> from zope.component import getUtility
    >>> from canonical.launchpad.interfaces import (
    ...     IPersonSet, PersonCreationRationale, PersonVisibility)
    >>> person_set = getUtility(IPersonSet)
    >>> member, email = person_set.createPersonAndEmail(
    ...     'member@canonical.com', PersonCreationRationale.UNKNOWN,
    ...     name='member', displayname="Gold Member", password='test')
    >>> member.setPreferredEmail(email)
    >>> team_owner = person_set.getByName('name16')
    >>> nopriv = person_set.getByName('no-priv')
    >>> team = person_set.newTeam(team_owner, 'myteam', 'My Team')
    >>> team.addMember(member, team_owner)
    >>> member in team.activemembers
    True
    >>> nopriv.join(team)
    >>> nopriv in team.proposedmembers
    True
    >>> team.visibility = PersonVisibility.PRIVATE_MEMBERSHIP
    >>> from canonical.database.sqlbase import flush_database_updates
    >>> flush_database_updates()
    >>> logout()


    >>> def print_members(contents, type):
    ...     table = find_tag_by_id(contents, type)
    ...     for link in table.findAll('a'):
    ...         if link.renderContents() != 'Edit' and not link.find('img'):
    ...             print link.renderContents()


== Membership Page ==

This +members page will raise an exception for unauthorized users.

    >>> nopriv_browser = setupBrowser(auth='Basic no-priv@canonical.com:test')
    >>> nopriv_browser.open('http://launchpad.dev/~myteam/+members')
    Traceback (most recent call last):
    ...
    Unauthorized: ...

The +members page is visible for someone on the team.

    >>> browser = setupBrowser(auth='Basic member@canonical.com:test')
    >>> browser.open('http://launchpad.dev/~myteam/+members')
    >>> print_members(browser.contents, 'activemembers')
    Foo Bar
    Gold Member
    >>> print_members(browser.contents, 'proposedmembers')
    No Privileges Person

== Team Page ==

An unauthorized user cannot see the recently approved members,
recently applied members, or the membership summary on the ~myteam page.

    >>> nopriv_browser.open('http://launchpad.dev/~myteam')
    >>> soup = Soup(nopriv_browser.contents)
    >>> soup.find('div', id='recently-approved')
    >>> soup.find('div', id='recently-applied')
    >>> soup.find('table', id='membership-summary')
    <...You are not allowed to view this team's membership...

A team member will be able to see these parts of the team page.

    >>> browser.open('http://launchpad.dev/~myteam')
    >>> soup = Soup(browser.contents)
    >>> soup.find('div', id='recently-approved')
    <...<a href="/~member">Gold Member (member)</a>...


    >>> soup.find('div', id='recently-applied')
    <...<a href="/~no-priv">No Privileges Person (no-priv)</a>...

    >>> soup.find('table', id='membership-summary')
    <...2 active members...1 proposed members...

== Team Participation ==

On the person page, it will show which teams they belong to. Although, it
would be time consuming to gather the entire team membership, we don't want
to leak this information, so MyTeam which has a private membership won't
show up below.

    >>> nopriv_browser.open('http://launchpad.dev/~name16')
    >>> soup = Soup(nopriv_browser.contents)
    >>> a_tags = soup.find('table', id='participation').findAll('a')
    >>> for a_tag in a_tags:
    ...     print a_tag.contents
    [u'GuadaMen']
    [u'Launchpad Administrators']
    [u'Launchpad Buildd Admins']
    [u'Launchpad Developers']

Another member of MyTeam can see that name16 (Foo Bar) participates in
MyTeam.

    >>> browser.open('http://launchpad.dev/~name16')
    >>> soup = Soup(browser.contents)
    >>> a_tags = soup.find('table', id='participation').findAll('a')
    >>> for a_tag in a_tags:
    ...     print a_tag.contents
    [u'GuadaMen']
    [u'Launchpad Administrators']
    [u'Launchpad Buildd Admins']
    [u'Launchpad Developers']
    [u'My Team']

== Teams with Icons ==

The person page also shows a list of icons for all the teams that have
custom icons that the person belongs to. We need to filter out teams
with private membership.

First, we will add a custom icon to two teams.

    >>> from canonical.launchpad.ftests import set_branding
    >>> admin_browser = setupBrowser(auth='Basic mark@hbd.com:test')
    >>> admin_browser.open('http://launchpad.dev/~myteam/+branding')
    >>> set_branding(admin_browser)
    >>> admin_browser.getControl('Change Branding').click()

    >>> admin_browser.open('http://launchpad.dev/~guadamen/+branding')
    >>> set_branding(admin_browser)
    >>> admin_browser.getControl('Change Branding').click()

The user which is not on myteam will only see guadamen listed.

    >>> nopriv_browser.open('http://launchpad.dev/~name16')
    >>> soup = Soup(nopriv_browser.contents)
    >>> for a_tag in soup.find('div', id='teams_with_icons').findAll('a'):
    ...     print a_tag['href']
    /~guadamen


Another team member will see both the icons for guadamen and myteam.

    >>> browser.open('http://launchpad.dev/~name16')
    >>> soup = Soup(browser.contents)
    >>> for a_tag in soup.find('div', id='teams_with_icons').findAll('a'):
    ...     print a_tag['href']
    /~guadamen
    /~myteam
