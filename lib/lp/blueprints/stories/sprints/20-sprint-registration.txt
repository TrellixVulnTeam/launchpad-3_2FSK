= Sprint Registration =

It should be possible to register yourself to attend the sprint:

    >>> browser.addHeader('Authorization', 'Basic test@canonical.com:test')

    >>> browser.open('http://launchpad.dev/sprints/ubz')

    >>> browser.getLink('Register yourself').click()
    >>> browser.url
    'http://launchpad.dev/sprints/ubz/+attend'

    >>> browser.title
    'Register your attendance at Ubuntu Below Zero'

Invalid dates, for instance entering a starting date after the ending date,
are reported as errors to the users. (See also the tests in
lib/canonical/launchpad/doc/sprintattendance-pages.txt)

By default, the form will be pre-filled out with arrival and departure dates
that correspond to the full length of the conference and imply the user will
be available to participate in any session.

    >>> browser.getControl('From').value
    '2006-01-10 08:30'
    >>> browser.getControl('To').value
    '2006-02-12 17:00'

We accept a starting date up to one day before the sprint starts (which we
will map to starting at the start of the sprint), and a departure date up to
one day after the sprint ends.

    >>> browser.getControl('From').value = '2006-01-10 10:30:00'
    >>> browser.getControl('To').value = '2005-02-04 20:11:00'
    >>> browser.getControl('Register').click()

    >>> print browser.url
    http://launchpad.dev/sprints/ubz/+attend
    >>> for tag in find_tags_by_class(browser.contents, 'message'):
    ...     print tag.renderContents()
    There is 1 error.
    Please pick a date after 2006-01-10 08:30

An attendance that starts after the end of the sprint is also an error:

    >>> browser.getControl('From').value = '2010-01-10 10:30:00'
    >>> browser.getControl('To').value = '2010-07-10 22:11:00'
    >>> browser.getControl('Register').click()

    >>> print browser.url
    http://launchpad.dev/sprints/ubz/+attend
    >>> for tag in find_tags_by_class(browser.contents, 'message'):
    ...     print tag.renderContents()
    There are 2 errors.
    Please pick a date before 2006-02-12 17:00
    Please pick a date before 2006-02-13 17:00


Similarly, an attendance that ends before the start of a sprint is an
error:

    >>> browser.getControl('From').value = '1980-01-10 10:30:00'
    >>> browser.getControl('To').value = '1990-07-10 22:11:00'
    >>> browser.getControl('Register').click()

    >>> print browser.url
    http://launchpad.dev/sprints/ubz/+attend
    >>> for tag in find_tags_by_class(browser.contents, 'message'):
    ...     print tag.renderContents()
    There are 2 errors.
    Please pick a date after 2006-01-09 08:30
    Please pick a date after 2006-01-10 08:30

With the dates fixed, Sample person can attend the sprint.  The user
is staying an extra week past the end of the sprint, which is fine
since the date range overlaps that of the sprint.

    >>> browser.getControl('From').value = '2006-01-10 10:30:00'
    >>> browser.getControl('To').value = '2006-02-12 20:11:00'
    >>> browser.getControl('Register').click()
    >>> browser.url
    'http://launchpad.dev/sprints/ubz'

Now, Sample Person should be listed as an attendee.

    >>> def print_attendees(sprint_page):
    ...     """Print the attendees listed in the attendees portlet."""
    ...     attendees_portlet = find_portlet(sprint_page, 'Attendees')
    ...     for li in attendees_portlet.fetch('ul')[0].fetch('li'):
    ...         print li.a.string.encode('ascii', 'xmlcharrefreplace')

    >>> print_attendees(browser.contents)
    Sample Person

If we return to the "Register Yourself" form, the previously entered
dates are prefilled (they have been clamped to the sprint duration):

    >>> browser.getLink('Register yourself').click()
    >>> print browser.getControl('From').value
    2006-01-10 10:30
    >>> print browser.getControl('To').value
    2006-02-12 17:00

Also, it is possible to register someone else. Let's register Carlos.

    >>> browser.open('http://launchpad.dev/sprints/ubz')
    >>> browser.getLink('Register someone else').click()
    >>> browser.url
    'http://launchpad.dev/sprints/ubz/+register'

By default, the form is pre-filled with attendance times that match the
start and end of the conference.

    >>> browser.getControl('From').value
    '2006-01-10 08:30'
    >>> browser.getControl('To').value
    '2006-02-12 17:00'

Sample Person can set a specific start and end time for participation,
and specify that he is registering Carlos.

    >>> browser.getControl('Attendee').value = 'carlos@canonical.com'
    >>> browser.getControl('From').value = '2006-01-10 18:30:00'
    >>> browser.getControl('To').value = '2006-02-12 15:11:00'
    >>> browser.getControl('Register').click()

    >>> browser.url
    'http://launchpad.dev/sprints/ubz'

Sample Person registers Salgado as well.

    >>> browser.getLink('Register someone else').click()
    >>> browser.url
    'http://launchpad.dev/sprints/ubz/+register'
    >>> browser.getControl('Attendee').value = 'guilherme.salgado@canonical.com'
    >>> browser.getControl('Register').click()

And verifies that Carlos and Salgado are now listed:

     >>> print_attendees(browser.contents)
     Carlos Perell&#243; Mar&#237;n
     Sample Person
     Guilherme Salgado

In order to make it easy to organize a meeting, we provide a facility
for exporting the list of attendees in CSV format to registered users,
drivers, owners, and admins.

First, we add a couple of IRC nicknames for Carlos.

    >>> from canonical.launchpad.ftests import login, logout
    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> from canonical.launchpad.database import IrcID
    >>> from zope.component import getUtility
    >>> login('carlos@canonical.com')
    >>> carlos = getUtility(IPersonSet).getByName('carlos')
    >>> IrcID(person=carlos, network='freenode', nickname='carlos')
    <IrcID at ...>
    >>> IrcID(person=carlos, network='QuakeNet', nickname='qarlos')
    <IrcID at ...>
    >>> sorted([ircid.nickname for ircid in carlos.ircnicknames])
    [u'carlos', u'qarlos']
    >>> logout()

    >>> browser.getLink('Export attendees to CSV').click()
    >>> print browser.headers['content-type']
    text/csv
    >>> print browser.contents
    Launchpad username,Display name,Email,IRC nickname,Phone,Organization,City,Country,Timezone,Arriving,Leaving
    carlos,Carlos Perelló Marín,carlos@canonical.com,"carlos, qarlos",,,,,,2006-01-10T09:00:00Z,2006-02-12T05:41:00Z
    name12,Sample Person,,,,,,,Australia/Perth,2006-01-10T01:00:00Z,2006-02-12T07:30:00Z
    salgado,Guilherme Salgado,guilherme.salgado@canonical.com,,+55 16 3374-2027,Something,whatever,France,,2006-01-09T23:00:00Z,2006-02-12T07:30:00Z
    <BLANKLINE>

    >>> carlos_browser = setupBrowser(auth='Basic carlos@canonical.com:test')
    >>> carlos_browser.open('http://launchpad.dev/sprints/ubz')
    >>> carlos_browser.getLink('Export attendees to CSV').click()
    >>> print browser.headers['content-type']
    text/csv

    >>> admin_browser.open('http://launchpad.dev/sprints/ubz')
    >>> admin_browser.getLink('Export attendees to CSV').click()
    >>> print browser.headers['content-type']
    text/csv

Unregistered and anonymous users cannot access the CSV report.

    >>> user_browser.open('http://launchpad.dev/sprints/ubz')
    >>> user_browser.getLink('Export attendees to CSV').click()
    Traceback (most recent call last):
    ...
    LinkNotFoundError

    >>> anon_browser.open('http://launchpad.dev/sprints/ubz/+attendees-csv')
    Traceback (most recent call last):
    ...
    Unauthorized:...
