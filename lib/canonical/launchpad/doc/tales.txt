= TALES expressions =

There are several kinds of TALES expressions we've implemented in
Launchpad, to help make it easier to create page templates, without
the need to introduce complex Python code in the template itself.

First, let's bring in a small helper function:

   >>> from canonical.launchpad.ftests import test_tales


== The count: namespace to get numbers ==

count:len gives you a number which is len(thing).

   >>> test_tales('foo/count:len', foo=[])
   0
   >>> test_tales('foo/count:len', foo=[1, 2, 3])
   3
   >>> test_tales('foo/count:len', foo=object())
   Traceback (most recent call last):
   ...
   TypeError: len() of unsized object


== The fmt: namespace to get strings ==

To display the icon for a milestone, use image:icon:

   >>> from canonical.launchpad.database import MilestoneSet
   >>> milestone = MilestoneSet().get(1)
   >>> test_tales("milestone/image:icon", milestone=milestone)
   '<img ... src="/@@/milestone" />'

The same image:icon, as well as a image:logo and a image:logo is also
available for Person, Product, Project, Sprint and Distributions, since
they all implement IHasLogo,.IHasMugshot and IHasIcon.

    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> person = getUtility(IPersonSet).getByName('sabdfl')
    >>> test_tales("person/image:icon", person=person)
    '<img ... src="/@@/person" />'
    >>> test_tales("person/image:logo", person=person)
    '<img ... src="/@@/person-logo" />'

The Mugshot is presented in a div, floating right, with the mugshot inside
it:

    >>> test_tales("person/image:mugshot", person=person)
    '<div...<img...src="/@@/person-mugshot" />.../div>'

For people we even have different images in case the person in question is not
an actual launchpad user.

    >>> spiv = getUtility(IPersonSet).getByName('spiv')
    >>> spiv.is_valid_person
    False
    >>> test_tales("person/image:icon", person=spiv)
    '<img ... src="/@@/person-inactive" />'
    >>> test_tales("person/image:logo", person=spiv)
    '<img ... src="/@@/person-inactive-logo" />'
    >>> test_tales("person/image:mugshot", person=spiv)
    '...<img...src="/@@/person-inactive-mugshot" />...'

One other thing we have for people is fmt:link, which gives us a link to that
person's page, containing the person name and an icon.

    >>> test_tales("person/fmt:link", person=person)
    u'<a ...><img ... src="/@@/person" />&nbsp;Mark Shuttleworth</a>'

    >>> test_tales("person/fmt:link", person=spiv)
    u'<a ...><img ... src="/@@/person-inactive" />&nbsp;Andrew Bennetts</a>'

    >>> ubuntu_team = getUtility(IPersonSet).getByName('ubuntu-team')
    >>> test_tales("person/fmt:link", person=ubuntu_team)
    u'<a ...><img ... src="/@@/team" />&nbsp;Ubuntu Team</a>'

The fmt:link formatter uses additional path components to extend the
link:

    >>> test_tales("person/fmt:link/foo/bar", person=spiv)
    u'<a href=".../~spiv/foo/bar">...'

We also have image:icon for KarmaCategory:

    >>> from canonical.launchpad.database import KarmaCategory
    >>> for category in KarmaCategory.select(orderBy='title'):
    ...     print test_tales("category/image:icon", category=category)
    <img ... title="Answer Tracker" src="/@@/question" />
    <img ... title="Bug Management" src="/@@/bug" />
    <img ... title="Specification Tracking" src="/@@/blueprint" />
    <img ... title="Translations in Rosetta" src="/@@/translation" />

datetimes can be formatted with fmt:date, fmt:time, fmt:datetime and
fmt:rfc822utcdatetime.

   >>> from datetime import datetime, timedelta
   >>> dt = datetime(2005, 4, 1, 16, 22)
   >>> test_tales('dt/fmt:date', dt=dt)
   '2005-04-01'
   >>> test_tales('dt/fmt:time', dt=dt)
   '16:22:00'
   >>> test_tales('dt/fmt:datetime', dt=dt)
   '2005-04-01 16:22:00'
   >>> test_tales('dt/fmt:rfc822utcdatetime', dt=dt)
   'Fri, 01 Apr 2005 16:22:00 -0000'

To truncate a long string, use fmt:shorten:

    >>> test_tales('foo/fmt:shorten/8', foo='abcdefghij')
    'abcde...'

To preserve newlines in text when displaying as HTML, use
fmt:nl_to_br:

    >>> test_tales('foo/fmt:nl_to_br',
    ...             foo='icicle\nbicycle\ntricycle & troika')
    'icicle<br />\nbicycle<br />\ntricycle &amp; troika'

To "<pre>" format a string, use fmt:nice_pre:

    >>> import pprint, textwrap
    >>> pprint.pprint(textwrap.wrap(
    ...     test_tales('foo/fmt:nice_pre', foo='hello & goodbye')
    ... ))
    ['<pre style="white-space: -moz-pre-wrap;white-space: -o-pre-wrap;word-',
     'wrap: break-word;">hello &amp; goodbye</pre>']

Add manual word breaks to long words in a string:

    >>> test_tales('foo/fmt:break-long-words', foo='short words')
    'short words'
    >>> test_tales('foo/fmt:break-long-words',
    ...     foo='<http://launchpad.net/products/launchpad>')
    '&lt;http:/<wbr></wbr>/launchpad.<wbr></wbr>net/products/<wbr></wbr>launchpad&gt;'

Signatures and full-quoted parts of a message can be wrapped in markup
to hide them:

    >>> text = '\n'.join(['Top quoting is simply bad netiquette.',
    ...                   'The words of the leading text should be displayed',
    ...                   'normally--no markup to hide it from view.',
    ...                   'Raise your hand if you can read this.',
    ...                   ''])
    >>> quoted_text = '\n'.join(['Somebody said sometime ago:',
    ...                          '> 1. Remove the letters  c, j, q, x, w',
    ...                          '>    from the English Language.',
    ...                          '> 2. Remove the penny from US currency.',
    ...                          ''])
    >>> signature = '\n'.join(['-- ',
    ...             '__C U R T I S  C.  H O V E Y_______',
    ...             'sinzui.is@somewhere.org',
    ...             'Guilty of stealing everything I am.'])
    >>> # Print this without processing to check that we have a good start
    >>> print '\n'.join([text, quoted_text, signature])
    Top quoting is simply bad netiquette.
    The words of the leading text should be displayed
    normally--no markup to hide it from view.
    Raise your hand if you can read this.
    <BLANKLINE>
    Somebody said sometime ago:
    > 1. Remove the letters  c, j, q, x, w
    >    from the English Language.
    > 2. Remove the penny from US currency.
    <BLANKLINE>
    --
    __C U R T I S  C.  H O V E Y_______
    sinzui.is@somewhere.org
    Guilty of stealing everything I am.
    
    >>> print test_tales('foo/fmt:email-to-html',
    ...                  foo='\n'.join([text, quoted_text, signature]))
    <p>Top quoting is simply bad netiquette.<br />
    The words of the leading text should be displayed<br />
    normally--no markup to hide it from view.<br />
    Raise your hand if you can read this.</p>
    <p>Somebody said sometime ago:<br />
    <span class="foldable"...>
    &gt; 1. Remove the letters  c, j, q, x, w<br />
    &gt;    from the English Language.<br />
    &gt; 2. Remove the penny from US currency.
    </span></p>
    <p><span class="foldable"...>--<br />
    __C U R T I S  C.  H O V E Y_______<br />
    sinzui.<wbr></wbr>is@somewhere.<wbr></wbr>org<br />
    Guilty of stealing everything I am.
    </span></p>

    >>> print test_tales('foo/fmt:email-to-html',
    ...                  foo='\n'.join([text, signature]))
    <p>Top quoting is simply bad netiquette.<br />
    The words of the leading text should be displayed<br />
    normally--no markup to hide it from view.<br />
    Raise your hand if you can read this.</p>
    <p><span class="foldable"...>--<br />
    __C U R T I S  C.  H O V E Y_______<br />
    sinzui.<wbr></wbr>is@somewhere.<wbr></wbr>org<br />
    Guilty of stealing everything I am.
    </span></p>

    >>> print test_tales('foo/fmt:email-to-html',
    ...                  foo='\n'.join([text, quoted_text]))
    <p>Top quoting is simply bad netiquette.<br />
    The words of the leading text should be displayed<br />
    normally--no markup to hide it from view.<br />
    Raise your hand if you can read this.</p>
    <p>Somebody said sometime ago:<br />
    <span class="foldable"...>
    &gt; 1. Remove the letters  c, j, q, x, w<br />
    &gt;    from the English Language.<br />
    &gt; 2. Remove the penny from US currency.
    </span></p>

    >>> print test_tales('foo/fmt:email-to-html',
    ...                  foo=text)
    <p>Top quoting is simply bad netiquette.<br />
    The words of the leading text should be displayed<br />
    normally--no markup to hide it from view.<br />
    Raise your hand if you can read this.</p>

Email addresses can be obfuscated:

    >>> test_tales('foo/fmt:obfuscate-email', foo='name.surname@company.com')
    'person@domain.dom'
    >>> test_tales('foo/fmt:obfuscate-email', foo='name@organization.org.cc')
    'person@domain.dom'
    >>> test_tales('foo/fmt:obfuscate-email',
    ...     foo='long_name@host.network.org.cc')
    'person@domain.dom'
    >>> test_tales('foo/fmt:obfuscate-email',
    ...     foo='long-name@building.museum')
    'person@domain.dom'

    >>> # obfuscation must run before the address is changed by text-to-html
    >>> print test_tales('foo/fmt:obfuscate-email/fmt:text-to-html',
    ...     foo=signature)
    <p>--<br />
    __C U R T I S  C.  H O V E Y_______<br />
    person@domain.dom<br />
    Guilty of stealing everything I am.</p>

    >>> # Email addresses and credentials in a URL match.
    >>> test_tales('foo/fmt:obfuscate-email',
    ...     foo='mailto:long-name@very.long.dom.cc')
    'mailto:person@domain.dom'
    >>> test_tales('foo/fmt:obfuscate-email',
    ...     foo='http://person:password@site.net')
    'http://person:person@domain.dom'

    >>> # An Invalid email address does not match.
    >>> test_tales('foo/fmt:obfuscate-email', foo='name @ host.school.edu')
    'name @ host.school.edu'
    >>> # SSH is not an email address.
    >>> test_tales('foo/fmt:obfuscate-email', foo='person@host')
    'person@host'
    >>> # Perl/shell arrays are not an email address.
    >>> test_tales('foo/fmt:obfuscate-email', foo='(head, tail)=@array')
    '(head, tail)=@array'
    >>> # Python decorators and Java annotations are not email addresses.
    >>> test_tales('foo/fmt:obfuscate-email', foo='@staticmethod')
    '@staticmethod'
    >>> # XPath expressions are not email addresses.
    >>> test_tales('foo/fmt:obfuscate-email', foo='element/@attribute')
    'element/@attribute'


== Test the 'fmt:' namespace where the context is a dict. ==

fmt:pagetitle takes a page template CONTEXTS dict, and gives you a string
for use in the <title> element of a page.

This case ought to apply only to a page template's CONTEXTS dict.  However, we
have to make this namespace available for all dicts, as there is no type
information to distinguish a page template CONTEXTS dict from any other dict.

    >>> class MockPageTemplateFile:
    ...     filename = '/blah/blah/debug-root-index.pt'
    ...
    >>> CONTEXTS = {'template': MockPageTemplateFile}
    >>> test_tales('foo/fmt:pagetitle', foo=CONTEXTS)
    'Launchpad Debug Home Page'


Test the 'fmt:url' namespace for canonical urls.

    >>> from canonical.launchpad.webapp.interfaces import ICanonicalUrlData
    >>> from zope.interface import implements
    >>> class ObjectThatHasUrl:
    ...     implements(ICanonicalUrlData)
    ...     path = 'bonobo/saki'
    ...     inside = None
    ...     rootsite = None

    >>> object_having_url = ObjectThatHasUrl()
    >>> test_tales('foo/fmt:url', foo=object_having_url)
    u'http://launchpad.dev/bonobo/saki'

Now, we need to test that it gets the correct application URL from the
request.

Make a mock-up IBrowserRequest, and use this as the interaction.

    >>> from zope.publisher.interfaces.browser import \
    ...     IBrowserApplicationRequest
    >>> from zope.interface import implements
    >>> class MockBrowserRequest:
    ...     implements(IBrowserApplicationRequest)
    ...
    ...     interaction = None
    ...     principal = None
    ...
    ...     def getApplicationURL(self):
    ...         return 'https://mandrill.example.org:23'

    >>> participation = MockBrowserRequest()

    >>> login(ANONYMOUS, participation)

Note how the URL has only a path part, because it is for the same site
as the current request.

    >>> test_tales('foo/fmt:url', foo=object_having_url)
    u'/bonobo/saki'


== The some_string/fmt:something helper ==

Test the 'fmt:' namespace where the context is None. In general, these
will return an empty string.  They are provided for ease of handling
NULL values from the database, which become None values for attributes
in content classes.

Everything you can do with 'something/fmt:foo', you should be able to
do with 'None/fmt:foo'.

    >>> test_tales('foo/fmt:shorten', foo=None)
    Traceback (most recent call last):
    ...
    TraversalError: 'you need to traverse a number after fmt:shorten'

    >>> test_tales('foo/fmt:shorten/8', foo=None)
    ''
    >>> test_tales('foo/fmt:nl_to_br', foo=None)
    ''
    >>> test_tales('foo/fmt:nice_pre', foo=None)
    ''
    >>> test_tales('foo/fmt:break-long-words', foo=None)
    ''
    >>> test_tales('foo/fmt:breadcrumbs', foo=None)
    ''
    >>> test_tales('foo/fmt:date', foo=None)
    ''
    >>> test_tales('foo/fmt:time', foo=None)
    ''
    >>> test_tales('foo/fmt:datetime', foo=None)
    ''
    >>> test_tales('foo/fmt:rfc822utcdatetime', foo=None)
    ''
    >>> test_tales('foo/fmt:pagetitle', foo=None)
    ''
    >>> test_tales('foo/fmt:text-to-html', foo=None)
    ''
    >>> test_tales('foo/fmt:url', foo=None)
    ''
    >>> test_tales('foo/fmt:exactduration', foo=None)
    ''
    >>> test_tales('foo/image:icon', foo=None)
    ''


== The lp: namespace for presenting DBSchema items ==

This is deprecated, and should raise a deprecation warning in the future,
and eventually be removed.  It is no longer needed, now that we have
an EnumCol for sqlobject.

Test the 'lp:' namespace for presenting DBSchema items.

    >>> from canonical.lp.dbschema import BinaryPackageFormat
    >>> deb = BinaryPackageFormat.DEB.value
    >>> test_tales('deb/lp:BinaryPackageFormat', deb=deb)
    'Ubuntu Package'


== The someobject/required:some.Permission helper ==

Test the 'required:' namespace.  We're already logged in as the anonymous user,
and anonymous users can't edit any person:

    >>> test_tales('person/required:launchpad.Edit', person=person)
    False

Anonymous users can do anything with the zope.Public permission.

    >>> test_tales('person/required:zope.Public', person=person)
    True

Queries about permissions that don't exist will raise an exception:

    >>> test_tales('person/required:mushroom.Badger', person=person)
    Traceback (most recent call last):
    ...
    ValueError: ('Undefined permission id', 'mushroom.Badger')


== The somevalue/enumvalue:ENUMVALUE helper ==

You can test whether a particular value that you have in your page template
matches a particular valid value for that DBSchema enum.

This was going to be called 'enum-value', but Zope doesn't allow this.
To be fixed upstream.

    >>> from canonical.lp.dbschema import BinaryPackageFormat
    >>> deb = BinaryPackageFormat.DEB
    >>> udeb = BinaryPackageFormat.UDEB
    >>> test_tales('deb/enumvalue:DEB', deb=deb)
    True
    >>> test_tales('deb/enumvalue:DEB', deb=udeb)
    False

We don't get a ValueError when we use a value that doesn't appear in the
DBSchema the item comes from.

    >>> test_tales('deb/enumvalue:CHEESEFISH', deb=udeb)
    Traceback (most recent call last):
    ...
    TraversalError: 'The BinaryPackageFormat dbschema does not have a value CHEESEFISH.'

It is possible for dbschemas to have a 'None' value.  This is a bit awkward,
because when the value is None, we can't do any checking whether a new value
is from the correct schema.  In any case, this case is not currently handled.

The enumvalue tales expression is designed to work with security
wrapped dbschema items too:

    >>> from zope.security.proxy import ProxyFactory
    >>> wrapped_deb = ProxyFactory(BinaryPackageFormat.DEB)
    >>> test_tales('deb/enumvalue:DEB', deb=wrapped_deb)
    True
    >>> test_tales('deb/enumvalue:UDEB', deb=wrapped_deb)
    False
    >>> test_tales('deb/enumvalue:CHEESEFISH', deb=wrapped_deb)
    Traceback (most recent call last):
    ...
    TraversalError: 'The BinaryPackageFormat dbschema does not have a value CHEESEFISH.'
