== Adding a product release ==

Adding a release is restricted to the product owner, or the series owner
or driver. That means that only Sample Person can add releases in the
Firefox trunk series. No Privileges Person won't see the link to add a
release nor can access the page directly.

    >>> user_browser.open('http://launchpad.dev/firefox/+milestone/1.0')
    >>> user_browser.getLink('Publish release').click()
    Traceback (most recent call last):
      ...
    LinkNotFoundError
    >>> user_browser.open(
    ...     'http://launchpad.dev/firefox/+milestone/1.0/+addrelease')
    Traceback (most recent call last):
      ...
    Unauthorized: ...

But Sample Person can use the 'Register a release' link to create a new
release in the series.

    >>> browser = setupBrowser(auth='Basic test@canonical.com:test')
    >>> browser.open('http://launchpad.dev/firefox/+milestone/1.0')
    >>> browser.getLink('Publish release').click()
    >>> browser.url
    'http://launchpad.dev/firefox/+milestone/1.0/+addrelease'

    >>> browser.title
    'Register a new Milestone 1.0 for Mozilla Firefox release in Launchpad'

    >>> browser.getControl('Date released').value = '2008-01-01'
    >>> browser.getControl('Release notes').value = 'Released 1.0'
    >>> browser.getControl('Changelog').value = 'Fix Foo'
    >>> browser.getControl('Publish release').click()
    >>> browser.url
    'http://launchpad.dev/firefox/trunk/1.0'
    >>> print extract_text(find_tag_by_id(browser.contents, 'release_notes'))
    Released 1.0
    >>> print extract_text(find_tag_by_id(browser.contents, 'changelog'))
    Fix Foo

After creating a product release on an active milestone, the user
will be warned that the milestone has been deactivated.

    >>> print get_feedback_messages(browser.contents)
    [u'The milestone for this product release was deactivated so that bugs
    &amp; blueprints cannot be targeted to a milestone in the past.']
    >>> browser.open('http://launchpad.dev/firefox/+milestone/1.0/+addrelease')
    >>> print get_feedback_messages(browser.contents)
    [u'A product release already exists for this milestone.']

    # The "Don't deactivate milestone" checkbox will eliminate
    # the error message.
    >>> browser.open('http://launchpad.dev/firefox/trunk/+addmilestone')
    >>> browser.getControl('Name').value = 'bar'
    >>> browser.getControl('Register milestone').click()
    >>> browser.open('http://launchpad.dev/firefox/+milestone/bar/+addrelease')
    >>> browser.getControl("Date released").value = '2009-01-01'
    >>> browser.getControl("Don't deactivate milestone.").selected = True
    >>> browser.getControl('Publish release').click()
    >>> print get_feedback_messages(browser.contents)
    []
    >>> browser.open('http://launchpad.dev/firefox/trunk/bar')
    >>> print get_feedback_messages(browser.contents)
    []


== Checking releases with the same version ==

Now let's try to create a productrelease on a milestone that already
has a productrelease.

    >>> browser.open('http://launchpad.dev/firefox/+milestone/1.0')
    >>> browser.getLink('Publish release').click()
    Traceback (most recent call last):
    ...
    LinkNotFoundError

    >>> browser.open('http://launchpad.dev/firefox/+milestone/1.0/+addrelease')
    >>> browser.url
    'http://launchpad.dev/firefox/trunk/1.0/+edit'
    >>> for tag in find_tags_by_class(browser.contents, 'message'):
    ...     tag.renderContents()
    'A product release already exists for this milestone.'


== Editing a product release ==

The release owner can edit the release via its +edit form:

    >>> browser.open('http://launchpad.dev/firefox/trunk/1.0')
    >>> browser.getLink('Change details').click()

    >>> browser.getControl('Changelog').value = 'This is not a joke.'
    >>> browser.getControl('Change').click()

== Editing permissions extend to product and series owners ==

If the product or series owner is a team, members can edit a product
release too.

    >>> from canonical.launchpad.database import Product, Person
    >>> tomcat = Product.selectOneBy(name='tomcat')
    >>> print tomcat.owner.name
    ubuntu-team

Let's add a release as Jeff:

    >>> browser = setupBrowser(auth='Basic jeff.waugh@ubuntulinux.com:jdub')
    >>> browser.open('http://launchpad.dev/tomcat/trunk/+addmilestone')
    >>> browser.getControl('Name').value = '0.6.6.6'
    >>> browser.getControl('Register milestone').click()
    >>> browser.getLink(url='+milestone/0.6.6.6').click()
    >>> browser.getLink('Publish release').click()
    >>> browser.getControl('Date released').value = '2008-12-01'
    >>> browser.getControl('Changelog').value = 'Fix Foo'
    >>> browser.getControl('Publish release').click()
    >>> print browser.url
    http://launchpad.dev/tomcat/trunk/0.6.6.6

Celso is a member of ubuntu-team, so he can edit this release too:

    >>> browser = setupBrowser(auth='Basic celso.providelo@canonical.com:cprov')
    >>> browser.open('http://launchpad.dev/tomcat/trunk/0.6.6.6')
    >>> browser.getLink('Change details').click()

    >>> browser.getControl('Changelog').value = 'Fixes 3 bugs.'
    >>> browser.getControl('Change').click()

And if no-priv owns the series...

    >>> no_priv = Person.selectOneBy(name="no-priv")
    >>> tomcat.getSeries('trunk').owner = no_priv
    >>> from canonical.database.sqlbase import flush_database_updates
    >>> flush_database_updates()

... he can edit existing releases as well, even if they are owned by
others:

    >>> browser = setupBrowser(auth='Basic no-priv@canonical.com:test')
    >>> browser.open('http://launchpad.dev/tomcat/trunk/0.6.6.6')
    >>> browser.getLink('Change details').click()

    >>> browser.getControl('Changelog').value = 'Fixes 4 bugs.'
    >>> browser.getControl('Change').click()

