= Launchpad Single-Signon Workflow: Password Reset =

If a user wants to use a Launchpad-SSO web site, but has forgotten
their password, they can ask for it to be emailed to them from the
login page.

First we will set up the helper view that lets us test the final
portion of the authentication process:

    >>> from canonical.launchpad.ftests.openid import (
    ...     install_consumer, uninstall_consumer)
    >>> install_consumer()

The authentication process is started by the relying party issuing a
checkid_setup request, sending the user to Launchpad:

    >>> from urllib import urlencode
    >>> args = urlencode({
    ...     'openid.mode': 'checkid_setup',
    ...     'openid.identity':
    ...         'http://specs.openid.net/auth/2.0/identifier_select',
    ...     'openid.return_to': 'http://launchpad.dev/+openid-consumer',
    ...     'openid.trust_root': 'http://launchpad.dev/+openid-consumer',
    ...     })
    >>> setup_url = 'http://openid.launchpad.dev/+openid?%s' % args
    >>> browser.open(setup_url)

At this point, we are at the login page.  Lets try to recover a
password for an unregistered email.  This will result in an error:

    >>> print browser.title
    Launchpad Login Service
    >>> browser.getControl(name='field.email').value = 'no-account@example.com'
    >>> browser.getControl("I've forgotten my passphrase").click()
    >>> browser.getControl('Continue').click()

    >>> print browser.title
    Launchpad Login Service
    >>> for tag in find_tags_by_class(browser.contents, 'error'):
    ...     print extract_text(tag)
    Your account details have not been found. Please check your
    subscription email address and try again.

If the user tries to recover a password registered to a team, that
will fail too:

    >>> browser.getControl(name='field.email').value = 'support@ubuntu.com'
    >>> browser.getControl('Continue').click()
    >>> print browser.title
    Launchpad Login Service
    >>> for tag in find_tags_by_class(browser.contents, 'error'):
    ...     print extract_text(tag)
    The email address support@ubuntu.com can not be used to log in as
    it belongs to a team.

Finally, lets try and recover the password for a test@canonical.com:

    >>> browser.getControl(name='field.email').value = 'test@canonical.com'
    >>> browser.getControl('Continue').click()
    >>> from BeautifulSoup import BeautifulSoup
    >>> soup = BeautifulSoup(browser.contents)
    >>> print soup.find('h1').renderContents()
    Forgotten your passphrase?

The user would then check their email, and find a message:

    >>> import email, re
    >>> from canonical.launchpad.mail import stub
    >>> from_addr, to_addrs, raw_msg = stub.test_emails.pop()
    >>> len(stub.test_emails)
    0
    >>> msg = email.message_from_string(raw_msg)
    >>> print from_addr
    bounces@canonical.com
    >>> print to_addrs
    ['test@canonical.com']
    >>> print msg.get_payload(decode=True) #doctest: -NORMALIZE_WHITESPACE
    Hello
    <BLANKLINE>
    You have requested a new password for your Launchpad Login Service account.
    <BLANKLINE>
    To change your password:
    <BLANKLINE>
        http://openid.launchpad.dev/token/...
    <BLANKLINE>
    If you don't know what this is about, then someone else has entered
    your e-mail address at the Launchpad Login Service. Sorry about
    that. You don't need to do anything further, just delete this message.
    <BLANKLINE>
    Regards,
    The Launchpad Login Service team
    <BLANKLINE>

Let's extract the URL from the email and follow the link:

    >>> link = re.findall(r'http.*/token/.*', msg.get_payload())[0]
    >>> browser.open(link)
    >>> print browser.url
    http://openid.launchpad.dev/token/.../+resetpassword

The user can now enter a new password:

    >>> browser.getControl('Email').value = 'test@canonical.com'
    >>> browser.getControl('Password').value = 'new password'
    >>> browser.getControl(name='field.password_dupe').value = 'new password'
    >>> browser.getControl('Continue').click()

Now the user is logged in, and has been directed back to the original
site:

    >>> print browser.url
    http://launchpad.dev/+openid-consumer?...
    >>> print browser.contents
    Consumer received GET
    ...
    openid.identity:http://openid.launchpad.dev/+id/name12_oid
    openid.mode:id_res
    openid.return_to:http://launchpad.dev/+openid-consumer
    ...


== Cleanup ==

    >>> uninstall_consumer()

