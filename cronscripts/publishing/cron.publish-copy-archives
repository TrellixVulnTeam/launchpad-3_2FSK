#!/bin/sh
#
# Copyright 2009 Canonical Ltd.  This software is licensed under the
# GNU Affero General Public License version 3 (see the file LICENSE).

# LPCONFIG will come from the environment so this script can run unaltered
# on dogfood.
if [ -z $LPCONFIG ]; then
    echo LPCONFIG must be set to run this script.
    exit 1
fi

set -x
set -e
set -u

# Launchpad cron.daily (currently just for Ubuntu).

# Informational -- this *MUST* match the database.
ARCHIVEROOT=/srv/launchpad.net/ubuntu-archive/ubuntu
DISTSROOT=$ARCHIVEROOT/dists
OVERRIDEROOT=$ARCHIVEROOT/../ubuntu-overrides
CACHEROOT=$ARCHIVEROOT/../ubuntu-cache
DISTSCOPYROOT=$ARCHIVEROOT/../ubuntu-distscopy
INDICES=$ARCHIVEROOT/indices
PRODUCTION_CONFIG=ftpmaster

if [ "$LPCONFIG" = "$PRODUCTION_CONFIG" ]; then
    GNUPGHOME=/srv/launchpad.net/ubuntu-archive/gnupg-home
else
    # GNUPGHOME does not need to be set, keys can come from ~/.gnupg.
fi

# Configuration options.
LAUNCHPADROOT=/srv/launchpad.net/codelines/current
LOCKFILE=/srv/launchpad.net/ubuntu-archive/cron.daily.lock
DISTRONAME=ubuntu
TOUCHLIST=$ARCHIVEROOT/project/trace/$(hostname --fqdn)
DSYNCLIST=$CACHEROOT/dsync.list
MD5LIST=$INDICES/md5sums.gz

# Manipulate the environment.
export GNUPGHOME
PATH=$PATH:$LAUNCHPADROOT/scripts:$LAUNCHPADROOT/cronscripts:$LAUNCHPADROOT/cronscripts/publishing:$LAUNCHPADROOT/scripts/ftpmaster-tools

# Claim the lock.
if ! lockfile -r1 $LOCKFILE; then
  echo "Could not claim lock file."
  exit 1
fi

# Lock claimed.

# Process the accepted queue into the publishing records.
process-accepted.py --copy-archive -v -v -v $DISTRONAME

# Publish the packages to disk.
publish-distro.py -v -v --copy-archive -d $DISTRONAME

set +x
# Find all the Release files for which the Release.GPG is missing/too-old
# We use -maxdepth 2 to only sign Release files for distroreleases,
# not distroarchreleases/distrosourcereleases.
# Also we sign the dist-upgrader tarballs because they're handy too.
for CANDIDATE in $(find ${DISTSROOT}.new -maxdepth 2 -name Release) \
       $(find ${DISTSROOT}.new/*/*/dist-upgrader* -name "*.tar.gz"); do
  #  [ Release.gpg missing   ] or [ Release is newer than Release.gpg ]
  if [ ! -f $CANDIDATE.gpg ] || [ $CANDIDATE -nt $CANDIDATE.gpg ]; then
    echo "(re-)signing $CANDIDATE"
    gpg --yes --detach-sign --armor -o $CANDIDATE.gpg --sign $CANDIDATE
  else
    echo "Not re-signing $CANDIDATE"
  fi
done

echo Removing uncompressed Packages and Sources files
find ${DISTSROOT} \( -name "Packages" -o -name "Sources" \) -exec rm "{}" \;

# Copy in the indices.
if [ "$LPCONFIG" = "$PRODUCTION_CONFIG" ]; then
    echo Copying the indices into place.
    rm -f $INDICES/override.*
    cp $OVERRIDEROOT/override.* $INDICES
fi

# Touch everything you asked us to do.
if [ "$LPCONFIG" = "$PRODUCTION_CONFIG" ]; then
    for FILE in $TOUCHLIST; do
      touch "$FILE"
    done
fi
