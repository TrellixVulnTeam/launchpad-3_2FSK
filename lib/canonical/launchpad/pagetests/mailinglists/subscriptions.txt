= Mailing list subscription management =

Teams can have mailing lists associated with them, and a member of a
team with a usable mailing list can subscribe to that list. A person
can subscribe to a mailing list using any of his email addresses, or a
dynamic subscription which uses whichever email address is his
preferred address at a given time.

Non-team members can request a subscription to a mailing list at the
same time as they sign up for a new team.  Their list membership is
approved at the same time that they are approved for the team.


== Setup ==

Carlos is a member of four teams: admins, rosetta-admins, testing-spanish-team
and ubuntu-translators.  He has two email addresses, one of which is his
preferred email address.  Both the admins and rosetta-admins teams are given
mailing lists but only admins will actually use its mailing list as its
contact address.

    XXX BarryWarsaw 28-Jan-2008 Remove this when the beta testing program is
    complete.  Also, don't create a list for rosetta-admins through the web
    because we don't want it to be part of the mailing list beta testers
    team.  If it is, then the test for subscriptions being available only to
    beta testers won't work.  It works on launchpad.net because the mailing
    list beta testers team is different than the launchpad beta testers team.
    This isn't the case for the testrunner.  Again, all this will go away when
    the feature goes public.
    >>> from canonical.launchpad.ftests import mailinglists_helper
    >>> mailinglists_helper.beta_program_enable('admins')
    >>> mailinglists_helper.beta_program_enable('testing-spanish-team')

    >>> admin_browser.open('http://launchpad.dev/~admins')
    >>> admin_browser.getLink('Configure mailing list').click()
    >>> admin_browser.getControl('Apply for Mailing List').click()

    >>> admin_browser.open('http://launchpad.dev/+mailinglists')
    >>> admin_browser.getControl(name='field.admins').value = ['approve']
    >>> admin_browser.getControl('Submit').click()

    >>> from canonical.database.sqlbase import flush_database_updates
    >>> from canonical.launchpad.ftests import login, logout
    >>> from canonical.launchpad.interfaces import (
    ...     IMailingListSet, IPersonSet)
    >>> from zope.component import getUtility
    >>> login('foo.bar@canonical.com')
    >>> person_set = getUtility(IPersonSet)
    >>> rosetta_admins = person_set.getByName('rosetta-admins')
    >>> rosetta_admins_list = getUtility(IMailingListSet).new(rosetta_admins)
    >>> mailinglists_helper.review_list('rosetta-admins')
    >>> logout()
    >>> flush_database_updates()

    >>> mailinglists_helper.mailman.act()

    >>> admin_browser.open('http://launchpad.dev/~admins')
    >>> admin_browser.getLink('Change contact address').click()
    >>> admin_browser.getControl('The Launchpad mailing list').selected = True
    >>> admin_browser.getControl('Change').click()

Carlos requests a mailing list for testing-spanish-team but it will not
actually be approved.

    >>> browser = setupBrowser(auth='Basic carlos@canonical.com:test')
    >>> browser.open('http://launchpad.dev/~testing-spanish-team')
    >>> browser.getLink('Configure mailing list').click()
    >>> browser.getControl('Apply for Mailing List').click()


== Beta testers ==

A person who is not a member of the beta testers team cannot subscribe to
mailing lists even if the team they are a member of has a mailing list.

    >>> admin_browser.open('http://launchpad.dev/~rosetta-admins/+addmember')
    >>> admin_browser.getControl('New member').value = 'no-team-memberships'
    >>> admin_browser.getControl('Add Member').click()

    >>> no_team_browser = setupBrowser(
    ...     auth="Basic no-team-memberships@test.com:test")
    >>> no_team_browser.open('http://launchpad.dev/people/+me/+editemails')
    >>> no_team_browser.getControl(name='field.subscription.rosetta-admins')
    Traceback (most recent call last):
    ...
    LookupError: name 'field.subscription.rosetta-admins'

Once the person joins the beta testers team, they can join the mailing list.

    >>> from canonical.launchpad.interfaces import ILaunchpadCelebrities
    >>> login('foo.bar@canonical.com')
    >>> beta = getUtility(ILaunchpadCelebrities).launchpad_beta_testers
    >>> no_team_memberships = person_set.getByName('no-team-memberships')
    >>> sabdfl = person_set.getByName('sabdfl')
    >>> beta.addMember(no_team_memberships, reviewer=sabdfl)
    >>> flush_database_updates()
    >>> logout()

    >>> no_team_browser.open('http://launchpad.dev/people/+me/+editemails')
    >>> rosetta_admins = no_team_browser.getControl(
    ...     name='field.subscription.rosetta-admins')
    >>> rosetta_admins.displayOptions
    ['Preferred address', "Don't subscribe", 'no-team-memberships@test.com']


== Subscription management ==

To subscribe to a mailing list, Carlos uses his subscription management
screen, which shows a subscription control for the mailing lists of every team
he's a member of.  Mailing lists show up in this list regardless of whether
it's currently the team contact method.

    >>> browser.open('http://launchpad.dev/~carlos/')
    >>> browser.getLink("Change e-mail settings").click()
    >>> browser.title
    "Carlos Perell\xc3\xb3 Mar\xc3\xadn's e-mail addresses"

    >>> admins = browser.getControl(name='field.subscription.admins')
    >>> rosetta_admins = browser.getControl(
    ...     name='field.subscription.rosetta-admins')

    >>> admins.displayOptions
    ['Preferred address', "Don't subscribe",
     'carlos@canonical.com', 'carlos@test.com']

    >>> print admins.value
    ["Don't subscribe"]
    >>> print rosetta_admins.value
    ["Don't subscribe"]

However, testing-spanish-team's list doesn't show up because its creation has
not been completed (specifically, Mailman hasn't constructed it yet).

    >>> browser.getControl(name='field.subscription.testing-spanish-team')
    Traceback (most recent call last):
    ...
    LookupError: name 'field.subscription.testing-spanish-team'

Carlos can subscribe to a list using his preferred email address.  Such
subscriptions will track changes to his preferred address without requiring
him to update his subscription.  So this is not the same as subscribing
explicitly with whatever is his preferred email address.

    >>> admins = browser.getControl(name='field.subscription.admins')
    >>> admins.value = ['Preferred address']
    >>> browser.getControl('Update Subscriptions').click()

    >>> for msg in get_feedback_messages(browser.contents):
    ...     print msg
    Subscriptions updated.

    >>> admins = browser.getControl(name='field.subscription.admins')
    >>> rosetta_admins = browser.getControl(
    ...     name='field.subscription.rosetta-admins')
    >>> print admins.value
    ['Preferred address']
    >>> print rosetta_admins.value
    ["Don't subscribe"]

Carlos can subscribe to a list using any of his validated addresses
explicitly.

    >>> admins.value = ['carlos@canonical.com']
    >>> rosetta_admins.value = ['carlos@test.com']
    >>> browser.getControl('Update Subscriptions').click()

    >>> admins = browser.getControl(name='field.subscription.admins')
    >>> rosetta_admins = browser.getControl(
    ...     name='field.subscription.rosetta-admins')
    >>> print admins.value
    ['carlos@canonical.com']
    >>> print rosetta_admins.value
    ['carlos@test.com']

He can switch from one address to another, or from a specific address
to the preferred address.

    >>> admins.value = ['Preferred address']
    >>> rosetta_admins.value = ['carlos@canonical.com']
    >>> browser.getControl('Update Subscriptions').click()

    >>> admins = browser.getControl(name='field.subscription.admins')
    >>> rosetta_admins = browser.getControl(
    ...     name='field.subscription.rosetta-admins')
    >>> print admins.value
    ['Preferred address']
    >>> print rosetta_admins.value
    ['carlos@canonical.com']

Finally, he can unsubscribe from any mailing list by setting the subscription
menu item to "Don't subscribe".

    >>> admins = browser.getControl(name='field.subscription.admins')
    >>> rosetta_admins = browser.getControl(
    ...     name='field.subscription.rosetta-admins')
    >>> admins.value = ["Don't subscribe"]
    >>> rosetta_admins.value = ["Don't subscribe"]
    >>> browser.getControl('Update Subscriptions').click()

    >>> admins = browser.getControl(name='field.subscription.admins')
    >>> rosetta_admins = browser.getControl(
    ...     name='field.subscription.rosetta-admins')
    >>> print admins.value
    ["Don't subscribe"]
    >>> print rosetta_admins.value
    ["Don't subscribe"]


== Subscription during team signup ==

Jdub is only a member of the ubuntu team.  He can request to be placed
on another team's mailing list at the same time that he requests
membership on the team.

    >>> browser = setupBrowser(auth='Basic jeff.waugh@ubuntulinux.com:jdub')
    >>> browser.open('http://launchpad.dev/~testing-spanish-team')
    >>> browser.getLink('Join the team').click()
    >>> browser.url
    'http://launchpad.dev/~testing-spanish-team/+join'

    >>> browser.getControl(name='field.mailinglist_subscribe').click()
    >>> browser.getControl(name='join').click()
    >>> browser.url
    'http://launchpad.dev/~testing-spanish-team'


Jdub hasn't been approved for the team yet, so he is not subscribed to
the list, and the list will not show up on his Subscription Management
screen.

    >>> browser.open('http://launchpad.dev/~jdub/')
    >>> browser.getLink("Change e-mail settings").click()
    >>> browser.title
    "Jeff Waugh's e-mail addresses"

    >>> browser.getControl(
    ... 	name='field.subscription.testing-spanish-team')
    Traceback (most recent call last):
    ...
    LookupError: name 'field.subscription.testing-spanish-team'


Jdub will become a member of the team's mailing list as soon as he has
been approved for the team.

    >>> admin_browser = setupBrowser(auth='Basic carlos@canonical.com:test')
    >>> admin_browser.open('http://launchpad.dev/~testing-spanish-team/')
    >>> admin_browser.getLink('Show all members').click()
    >>> admin_browser.getLink(
    ...     url='/~testing-spanish-team/+member/jdub').click()
    >>> admin_browser.getLink('Approve').click()


The mailing list subscription is now available to be managed.

    >>> spanish_team = browser.getControl(
    ... 	name='field.subscription.testing-spanish-team')

    >>> spanish_team.displayOptions
    ['Preferred address', "Don't subscribe", 'jeff.waugh@canonical.com']
