When dealing with bugs and packages, we associate bugs with only source
packages internally, not binary packages. However, sometimes users know
which binary package the bug is in, and they get confused why they
can't file a bug on that package. To allow people to enter a binary
package name, and to convert it to a source package name, we have a
custom widget.

    >>> from canonical.widgets.bugtask import BugTaskSourcePackageNameWidget

If we pass a valid source package name to it, the corresponding
SourcePackageName will be returned by getInputValue(). In order for us
to map the package names, we need a distribution, so we give the widget
a distribution task to work with.

    >>> from zope.publisher.browser import TestRequest
    >>> from canonical.launchpad.interfaces import IBugSet, IDistroBugTask
    >>> bug_one = getUtility(IBugSet).get(1)
    >>> ubuntu_task = bug_one.bugtasks[-2]
    >>> ubuntu_task.distribution.name
    u'ubuntu'

    >>> package_field = IDistroBugTask['sourcepackagename'].bind(ubuntu_task)

    >>> request = TestRequest(form={'field.sourcepackagename': 'evolution'})
    >>> widget = BugTaskSourcePackageNameWidget(
    ...     package_field, package_field.vocabulary, request)
    >>> widget.getInputValue()
    <SourcePackageName ...>
    >>> widget.getInputValue().name
    u'evolution'


If we pass in a binary package name, which can be mapped to a source
package name, the corresponding SourcePackageName is returned.

    >>> request = TestRequest(form={'field.sourcepackagename': 'linux-2.6.12'})
    >>> widget = BugTaskSourcePackageNameWidget(
    ...     package_field, package_field.vocabulary, request)
    >>> widget.getInputValue()
    <SourcePackageName ...>
    >>> widget.getInputValue().name
    u'linux-source-2.6.15'

For some distribution we don't know exactly which source packages it
contains, so IDistribution.guessPackageNames will return a
NotFoundError.

    >>> debian_task = bug_one.bugtasks[-1]
    >>> debian_task.distribution.name
    u'debian'
    >>> debian_task.distribution.guessPackageNames('evolution')
    Traceback (most recent call last):
    ...
    NotFoundError...

At that point we'll fallback to the vocabulary, so a SourcePackageName
will still be returned.

    >>> package_field = IDistroBugTask['sourcepackagename'].bind(debian_task)
    >>> request = TestRequest(form={'field.sourcepackagename': 'evolution'})
    >>> widget = BugTaskSourcePackageNameWidget(
    ...     package_field, package_field.vocabulary, request)
    >>> widget.getInputValue()
    <SourcePackageName ...>
    >>> widget.getInputValue().name
    u'evolution'

If we pass in a package name that doesn't exist in Launchpad, we get a
ConversionError saying that the package name doesn't exist.

    >>> request = TestRequest(form={'field.sourcepackagename': 'no-package'})
    >>> widget = BugTaskSourcePackageNameWidget(
    ...     package_field, package_field.vocabulary, request)
    >>> widget.getInputValue()
    Traceback (most recent call last):
    ...
    ConversionError...

