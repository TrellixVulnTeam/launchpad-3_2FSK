= Team contact address =

Team admins are allowed to set the contact method used by Launchpad to
send notifications to that team.  The possible contact methods are:

    - Hosted mailing list:  Notifications are sent to this team's
                            mailing list hosted on Launchpad. The
                            mailing list may have a customized message
                            sent to new subscribers.

    - None:  There's no way to contact the team as a whole, so any
             notification is sent to every member of the team.

    - Another address:  All notifications are sent to the given email
                        address (stored as the team's preferredemail).

    >>> browser = setupBrowser(auth='Basic test@canonical.com:test')
    >>> browser.open('http://launchpad.dev/~landscape-developers')
    >>> browser.getLink('Change contact address').click()
    >>> browser.title
    'Landscape Developers contact address'

As we can see, the landscape-developers team has no contact address.

    >>> browser.getControl(name='field.contact_method').displayValue
    ['\xa0Each member individually']

Changing the contact address to an external address will require the
user to go through the email address confirmation process.

    >>> browser.getControl('Another e-mail address').selected = True
    >>> browser.getControl(
    ...     name='field.contact_address').value = 'foo@example.com'
    >>> browser.getControl('Change').click()
    >>> browser.title
    'Landscape Developers in Launchpad'
    >>> for msg in get_feedback_messages(browser):
    ...     print msg
    A confirmation message has been sent to...

    >>> from canonical.launchpad.mail import stub
    >>> from_addr, to_addrs, raw_msg = stub.test_emails.pop()
    >>> stub.test_emails
    []

    # Extract the link (from the email we just sent) the user will have to
    # use to finish the registration process.
    >>> from canonical.launchpad.ftests.logintoken import (
    ...     get_token_url_from_email)
    >>> token_url = get_token_url_from_email(raw_msg)
    >>> token_url
    'http://launchpad.dev/token/...'
    >>> to_addrs
    ['foo@example.com']

Follow the token link, to confirm the new email address.

    >>> browser.open(token_url)
    >>> browser.title
    'Confirm e-mail address'
    >>> browser.getControl('Continue').click()

    >>> browser.title
    'Landscape Developers in Launchpad'
    >>> for msg in get_feedback_messages(browser):
    ...     print msg
    Email address successfully confirmed.

    >>> browser.getLink('Change contact address').click()
    >>> browser.title
    'Landscape Developers contact address'
    >>> browser.getControl(name='field.contact_method').displayValue
    ['\xa0Another e-mail address']
    >>> browser.getControl(name='field.contact_address').value
    'foo@example.com'

To change that to a hosted mailing list, we first need to request the
mailing list to be activated.

    >>> description = 'The Launchpad mailing list for this team - '
    >>> browser.getControl(description).disabled
    True
    >>> browser.getControl(description).selected = True
    Traceback (most recent call last):
    ...
    AttributeError: item is disabled

    >>> browser.getControl('Apply for Mailing List').click()
    >>> browser.title
    'Landscape Developers in Launchpad'
    >>> for msg in get_feedback_messages(browser):
    ...     print msg
    Mailing list requested and queued for approval.

    # We don't use getUtility(IMailingListSet) here because we want
    # non-security-proxied objects so that we can call syncUpdate on them
    # and change their status at our discretion.
    >>> from canonical.launchpad.database import MailingListSet, Person
    >>> list_set = MailingListSet()
    >>> mailing_list = list_set.get('landscape-developers')
    >>> mailing_list.status
    <...MailingListStatus.REGISTERED...>

    >>> browser.getLink('Change contact address').click()
    >>> browser.getControl(name='field.contact_method').displayValue
    ['\xa0Another e-mail address']
    >>> browser.getControl('The Launchpad mailing list').disabled
    True
    >>> for msg in get_feedback_messages(browser):
    ...     print msg
    Not available because the application for a mailing list is pending
    approval.

Once the mailing list is requested, the button to request its activation is
not shown anymore.

    >>> browser.getControl('Apply for Mailing List')
    Traceback (most recent call last):
    ...
    LookupError: ...

If the application is declined, the button won't be shown either. Instead,
we'll ask the user to contact a Launchpad admin.

    >>> from canonical.launchpad.interfaces import MailingListStatus
    >>> from canonical.launchpad.ftests import login, logout
    >>> login('foo.bar@canonical.com')
    >>> foobar = Person.byName('name16')
    >>> mailing_list.review(foobar, MailingListStatus.DECLINED)
    >>> mailing_list.syncUpdate()
    >>> logout()

    >>> browser.reload()
    >>> browser.getControl('Apply for Mailing List')
    Traceback (most recent call last):
    ...
    LookupError: ...
    >>> for msg in get_feedback_messages(browser):
    ...     print extract_text(msg)
    Not available because the application for a mailing list has been
    declined. Please contact a Launchpad administrator for further assistance.

    # Here we manually change its status back to REGISTERED so that we can
    # move on testing as if it wasn't declined.
    >>> mailing_list.status = MailingListStatus.REGISTERED
    >>> mailing_list.syncUpdate()

Any time before the mailing list is approved, the application can be
cancelled (and then re-requested afterwards).

    >>> browser.getLink('Change contact address').click()
    >>> browser.getControl('Cancel Application').click()
    >>> browser.title
    'Landscape Developers in Launchpad'
    >>> for msg in get_feedback_messages(browser):
    ...     print msg
    Mailing list application cancelled.
    >>> print list_set.get('landscape-developers')
    None

    >>> import transaction
    >>> transaction.commit()

    >>> browser.getLink('Change contact address').click()
    >>> browser.getControl('Apply for Mailing List').click()
    >>> browser.title
    'Landscape Developers in Launchpad'
    >>> mailing_list = list_set.get('landscape-developers')
    >>> mailing_list
    <MailingList for team "landscape-developers"; status=REGISTERED...

The mailing list can be used as the team's contact address only when its
status is ACTIVE. The process of activating a mailing list is invisible to
users, so we'll simulate it here by directly accessing our database code.

    >>> login('foo.bar@canonical.com')
    >>> mailing_list.review(foobar, MailingListStatus.APPROVED)
    >>> mailing_list.syncUpdate()
    >>> logout()
    >>> browser.getLink('Change contact address').click()
    >>> browser.getControl('The Launchpad mailing list').disabled
    True
    >>> browser.getControl('Apply for Mailing List')
    Traceback (most recent call last):
    ...
    LookupError: ...

    >>> for msg in get_feedback_messages(browser):
    ...     print msg
    Not available because mailing list is being constructed.

    >>> mailing_list.startConstructing()
    >>> mailing_list.syncUpdate()
    >>> browser.reload()
    >>> browser.getControl('The Launchpad mailing list').disabled
    True
    >>> browser.getControl('Apply for Mailing List')
    Traceback (most recent call last):
    ...
    LookupError: ...

    >>> for msg in get_feedback_messages(browser):
    ...     print msg
    Not available because mailing list is being constructed.

When the mailing list is constructed and made active, it can be used as
the team's contact address.

    >>> login('foo.bar@canonical.com')
    >>> mailing_list.transitionToStatus(MailingListStatus.ACTIVE)
    >>> mailing_list.syncUpdate()
    >>> logout()

    >>> browser.reload()
    >>> browser.getControl('Apply for Mailing List')
    Traceback (most recent call last):
    ...
    LookupError: ...

    >>> browser.getControl('The Launchpad mailing list').disabled
    False
    >>> browser.getControl('The Launchpad mailing list').selected = True
    >>> browser.getControl('Change').click()

    >>> browser.getLink('Change contact address').click()
    >>> browser.getControl(name='field.contact_method').displayValue
    ['\xa0The Launchpad mailing list for this team...]


== Customizing the welcome message ==

When the mailing list is used as the team's address, it's possible to
customize the mailing list's welcome message.

    >>> welcome_message = browser.getControl('Welcome Message')
    >>> welcome_message.value
    ''
    >>> welcome_message.value = 'Welcome to the test team mailing list.'
    >>> print welcome_message.value
    Welcome to the test team mailing list.
    >>> browser.getControl('Change').click()
    
The change takes effect in the database immediately.

    >>> browser.getLink('Change contact address').click()    
    >>> welcome_message = browser.getControl('Welcome Message')
    >>> print welcome_message.value
    Welcome to the test team mailing list.

But it takes a while to be propagated to Mailman. The user is informed
of this.

    >>> for msg in get_feedback_messages(browser):
    ...     print msg
    Not available because mailing list is pending an update.

Eventually Mailman starts the update, via Launchpad's XML-RPC interface.

    >>> import xmlrpclib
    >>> from canonical.functional import XMLRPCTestTransport
    >>> private_root = 'http://xmlrpc.launchpad.dev:8087/'
    >>> mailinglist_api = xmlrpclib.ServerProxy(
    ...    private_root + 'mailinglists/',
    ...    transport=XMLRPCTestTransport())
    >>> mailinglist_api.getPendingActions()   
    {'modify': [['landscape-developers', 
                 {'welcome_message': 'Welcome to the test team 
                                      mailing list.'}]]}

    >>> from canonical.database.sqlbase import commit
    >>> commit()

    >>> welcome_message = browser.getControl('Welcome Message')
    >>> print welcome_message.value
    Welcome to the test team mailing list.

    >>> description = 'The Launchpad mailing list for this team - '
    >>> control = browser.getControl(description)
    >>> control.selected 
    True
    >>> for msg in get_feedback_messages(browser):
    ...     print msg
    Not available because mailing list is being updated.

Usually there is no problem. The welcome message is propagated to
Mailman, and the informative message disappears from the contact
address view.

    >>> from zope.security.proxy import removeSecurityProxy
    >>> no_security_list = removeSecurityProxy(mailing_list)
    >>> no_security_list.status = MailingListStatus.ACTIVE
    >>> no_security_list.syncUpdate()
    >>> browser.reload()

    !>>> mailinglist_api.reportStatus({'landscape-developers' : 'success'})
    !True

    browser.reload()
    >>> get_feedback_messages(browser)
    []
    >>> welcome_message = browser.getControl('Welcome Message')
    >>> print welcome_message.value
    Welcome to the test team mailing list.

    >>> description = 'The Launchpad mailing list for this team - '
    >>> control = browser.getControl(description)
    >>> control.selected 
    True

What if the change fails to propagate? The user will know of this too.

    >>> description = 'The Launchpad mailing list for this team - '
    >>> control = browser.getControl(description)
    >>> mailinglist_api.reportStatus({'landscape-developers' : 'success'})
    True

    >>> welcome_message = browser.getControl('Welcome Message')
    >>> welcome_message.value = 'This change will fail to propagate.'
    >>> print welcome_message.value
    This change will fail to propagate.
    >>> browser.getControl('Change').click()
    >>> mailing_list = list_set.get('landscape-developers')
    >>> mailing_list.welcome_message
    This change will fail to propagate.
    >>> browser.getLink('Change contact address').click()    
    >>> welcome_message = browser.getControl('Welcome Message')
    >>> print welcome_message.value
    This change will fail to propagate.

    >>> mailinglist_api.getPendingActions()
    >>> browser.reload()
    >>> for msg in get_feedback_messages(browser):
    ...     print msg
    Not available because mailing list is being updated.

    >>> mailinglist_api.reportStatus({'landscape-developers' : 'failure'})

    >>> browser.reload()
    >>> for msg in get_feedback_messages(browser):
    ...     print msg
    Not available because mailing list creation failed.

Now we have to maneuver the mailing list back into a consistent state
for the next test. To do this we need to bypass the workflow which
prevents much of anything from being done with a mailing list in a
FAILED state.

    >>> from zope.security.proxy import removeSecurityProxy
    >>> no_security_list = removeSecurityProxy(mailing_list)
    >>> no_security_list.status = MailingListStatus.ACTIVE
    >>> no_security_list.syncUpdate()
    >>> browser.reload()

== Hidden by config variable ==

XXX: We don't really want all this functionality to be visible to users
when this code lands on mainline, so there's a config variable which
controls its visibility.  That variable is named expose_hosted_mailing_lists
and if it's set to False the option to use a hosted mailing list is not
visible.  This test will go away as soon as we decide to deploy that
functionality on production. -- Guilherme Salgado 2007-09-20
(https://launchpad.net/launchpad/+spec/team-mailing-list-beta-program)

    >>> from canonical.config import config
    >>> config.mailman.expose_hosted_mailing_lists
    True

    >>> browser.getControl(name='field.contact_method').displayOptions
    ['\xa0The Launchpad mailing list for this team -
      landscape-developers@lists.launchpad.net',
     '\xa0Each member individually',
     '\xa0Another e-mail address']

    >>> config.mailman.expose_hosted_mailing_lists = False
    >>> browser.reload()
    >>> browser.getControl(name='field.contact_method').displayOptions
    ['\xa0Each member individually',
     '\xa0Another e-mail address']

    >>> config.mailman.expose_hosted_mailing_lists = True
    >>> browser.reload()
    >>> browser.getControl(name='field.contact_method').displayOptions
    ['\xa0The Launchpad mailing list for this team -
      landscape-developers@lists.launchpad.net',
     '\xa0Each member individually',
     '\xa0Another e-mail address']

