Rosetta gives Karma to the users that do some kind of actions.

This test documents when and why Rosetta does it.

    >>> import transaction
    >>> from canonical.database.sqlbase import flush_database_updates
    >>> from canonical.launchpad.interfaces import (
    ...     IKarmaActionSet, IPersonSet, ITranslationImportQueue,
    ...     ILaunchpadCelebrities)
    >>> from canonical.launchpad.database import POTemplate
    >>> from canonical.lp.dbschema import RosettaImportStatus

    >>> translation_import_queue = getUtility(ITranslationImportQueue)
    >>> karma_action_set = getUtility(IKarmaActionSet)
    >>> rosetta_expert = getUtility(ILaunchpadCelebrities).rosetta_expert

Uploading a .pot file
=====================

The action of upload a .pot file is rewarded with some karma.
The .pot files are supposed to come always from upstream so the action
of upload it increases the value of our data because we are more up to date
with upstream.

Let's say that we have this .pot file to import:

    >>> potemplate_contents = r'''
    ... msgid ""
    ... msgstr ""
    ... "Content-Type: text/plain; charset=CHARSET\n"
    ...
    ... msgid "foo"
    ... msgstr ""
    ... '''
    >>> potemplate = POTemplate.get(1)

We are going to import it as the Rosetta expert team, like we do with
automatic imports from Ubuntu. In this case, we shouldn't give any kind
of karma to that user.

    >>> login('rosetta@launchpad.net')

First, we check that the team lacks any translation activity

    >>> translation_activities = [
    ...     activity
    ...     for activity in rosetta_expert.activities
    ...     if activity.action.category.name == 'translations'
    ...     ]
    >>> len(translation_activities)
    0

Do the import.

    >>> comes_from_upstream = True
    >>> entry = translation_import_queue.addOrUpdateEntry(
    ...     potemplate.path, potemplate_contents, comes_from_upstream,
    ...     rosetta_expert, productseries=potemplate.productseries,
    ...     potemplate=potemplate)
    >>> entry.status = RosettaImportStatus.APPROVED

The file data is stored in the Librarian, so we have to commit the transaction
to make sure it's stored properly.

    >>> flush_database_updates()
    >>> transaction.commit()

We tell the PO template to import from the file data it has.

    >>> potemplate.importFromQueue()

And we can see, it didn't get any karma.

    >>> translation_actions = [
    ...     activity.action.name
    ...     for activity in rosetta_expert.activities
    ...     if activity.action.category.name == 'translations'
    ...     ]
    >>> len(translation_actions)
    0

Let's do the same import as the Foo Bar user.

    >>> personset = getUtility(IPersonSet)
    >>> foo_bar = personset.getByEmail('foo.bar@canonical.com')
    >>> login('foo.bar@canonical.com')

First, we check that he lacks any translation activity

    >>> translation_activities = [
    ...     activity
    ...     for activity in foo_bar.activities
    ...     if activity.action.category.name == 'translations'
    ...     ]
    >>> len(translation_activities)
    0

Do the import.

    >>> entry = translation_import_queue.addOrUpdateEntry(
    ...     potemplate.path, potemplate_contents, comes_from_upstream,
    ...     foo_bar, productseries=potemplate.productseries,
    ...     potemplate=potemplate)
    >>> entry.status = RosettaImportStatus.APPROVED

The file data is stored in the Librarian, so we have to commit the transaction
to make sure it's stored properly.

    >>> flush_database_updates()
    >>> transaction.commit()

We tell the PO template to import from the file data it has.

    >>> potemplate.importFromQueue()

And we can see that the user got karma for the action he just did.

    >>> translation_actions = [
    ...     activity.action.name
    ...     for activity in foo_bar.activities
    ...     if activity.action.category.name == 'translations'
    ...     ]
    >>> len(translation_actions)
    1
    >>> u'translationtemplateimport' in translation_actions
    True


Uploading a .po file
====================

The action of upload a .po file is rewarded with some karma if it comes
from upstream. If it's just a translation update, we don't give karma, for
the upload action, you will get it from the translations you are adding.

Let's say that we have this .po file to import:

    >>> pofile_contents = r'''
    ... msgid ""
    ... msgstr ""
    ... "Content-Type: text/plain; charset=UTF-8\n"
    ...
    ... msgid "foo"
    ... msgstr "bar"
    ... '''
    >>> pofile = potemplate.getPOFileByLang('es')

As we can see, we don't have any information in that file about who
did the translations, so we will get that credit to the person that
did the upload.

First, we are going to import it as the Rosetta expert team, like we do with
automatic imports from Ubuntu. In this case, we shouldn't give any kind
of karma to that user.

First, we check that the team lacks any translation activity

    >>> translation_activities = [
    ...     activity
    ...     for activity in rosetta_expert.activities
    ...     if activity.action.category.name == 'translations'
    ...     ]
    >>> len(translation_activities)
    0

Do the import.

    >>> entry = translation_import_queue.addOrUpdateEntry(
    ...     pofile.path, pofile_contents, comes_from_upstream,
    ...     rosetta_expert, productseries=potemplate.productseries,
    ...     potemplate=potemplate, pofile=pofile)
    >>> entry.status = RosettaImportStatus.APPROVED

The file data is stored in the Librarian, so we have to commit the transaction
to make sure it's stored properly.

    >>> flush_database_updates()
    >>> transaction.commit()

We tell the PO template to import from the file data it has.

    >>> pofile.importFromQueue()

And we can see, it didn't get any karma.

    >>> translation_actions = [
    ...     activity.action.name
    ...     for activity in rosetta_expert.activities
    ...     if activity.action.category.name == 'translations'
    ...     ]
    >>> len(translation_actions)
    0

We attach the new file as comming from upstream, that means that we
will give karma only for the upload action.

    >>> entry = translation_import_queue.addOrUpdateEntry(
    ...     pofile.path, pofile_contents, comes_from_upstream, foo_bar,
    ...     productseries=potemplate.productseries, potemplate=potemplate,
    ...     pofile=pofile)
    >>> entry.status = RosettaImportStatus.APPROVED

The file data is stored in the Librarian, so we have to commit the transaction
to make sure it's stored properly.

    >>> flush_database_updates()
    >>> transaction.commit()

We tell the PO file to import from the file data it has.

    >>> pofile.importFromQueue()

And we can see that the user got karma actions.

    >>> translation_actions = [
    ...     activity.action.name
    ...     for activity in foo_bar.activities
    ...     if activity.action.category.name == 'translations'
    ...     ]

We have previous action + the new one just done.

    >>> len(translation_actions)
    2
    >>> translation_actions
    [u'translationtemplateimport', u'translationimportupstream']

Now, the user is going to upload a local edition of the .po file. In this
case, we will give karma *only* because the translation change.

    >>> pofile_contents = r'''
    ... msgid ""
    ... msgstr ""
    ... "Content-Type: text/plain; charset=UTF-8\n"
    ...
    ... msgid "foo"
    ... msgstr "bars"
    ... '''

We attach the new file as not comming from upstream.

    >>> entry = translation_import_queue.addOrUpdateEntry(
    ...     pofile.path, pofile_contents, not comes_from_upstream, foo_bar,
    ...     productseries=potemplate.productseries, potemplate=potemplate,
    ...     pofile=pofile)
    >>> entry.status = RosettaImportStatus.APPROVED

The file data is stored in the Librarian, so we have to commit the transaction
to make sure it's stored properly.

    >>> flush_database_updates()
    >>> transaction.commit()

We tell the PO file to import from the file data it has.

    >>> pofile.importFromQueue()

And we can see that the user got karma for the translation but not for the
upload.

    >>> translation_actions = [
    ...     activity.action.name
    ...     for activity in foo_bar.activities
    ...     if activity.action.category.name == 'translations'
    ...     ]

We have previous actions + the new one just done.

    >>> len(translation_actions)
    3

The user has rights to edit translations directly, so his suggestion is
approved directly.

    >>> u'translationsuggestionapproved' in translation_actions
    True

And is not noted as a suggestion addition.

    >>> u'translationsuggestionadded' in translation_actions
    False

Even when the user is also a reviwer, he should not get karma for reviewing
his own translations.

    >>> u'translationreview' in translation_actions
    False

Let's try the case when a file is uploaded, but no translation is changed.
To do this test, we are going to repeat previous import.

We attach again the file as not comming from upstream.

    >>> entry = translation_import_queue.addOrUpdateEntry(
    ...     pofile.path, pofile_contents, not comes_from_upstream, foo_bar,
    ...     productseries=potemplate.productseries, potemplate=potemplate,
    ...     pofile=pofile)
    >>> entry.status = RosettaImportStatus.APPROVED

The file data is stored in the Librarian, so we have to commit the transaction
to make sure it's stored properly.

    >>> flush_database_updates()
    >>> transaction.commit()

We tell the PO file to import from the file data it has.

    >>> pofile.importFromQueue()

And we can see that user's karma actions are not changed.

    >>> translation_actions = [
    ...     activity.action.name
    ...     for activity in foo_bar.activities
    ...     if activity.action.category.name == 'translations'
    ...     ]
    >>> len(translation_actions)
    3


Translating from the web UI
===========================

Translating something using the website UI can give you three kind of karma
actions:

 - translationsuggestionadded: When you add a translation but you are not
   allowed to do modifications directly to those translations.
 - translationsuggestionapproved: When you added a translation that is
   actually used because you have edition rights or because a reviewer
   approved your suggestion.
 - translationreview: When you approve a translation from someone else as a
   valid translation to use.


Let's say that we are a translator that is not an editor for the team that
handles translations for a given pofile.

No Privileges Person is a translator that fits this requirement.

    >>> no_priv = personset.getByEmail('no-priv@canonical.com')
    >>> pofile.canEditTranslations(no_priv)
    False

He doesn't have any karma activity for translations:

    >>> translation_actions = [
    ...     activity.action.name
    ...     for activity in no_priv.activities
    ...     if activity.action.category.name == 'translations'
    ...     ]
    >>> len(translation_actions)
    0

We are going to add a suggestion that already exists from other user,
that should not add any kind of karma to this user.

    >>> pomsgset = pofile.getPOMsgSet(u'foo')
    >>> new_translations = {0: 'bar'}
    >>> fuzzy = False
    >>> published = False
    >>> pomsgset.updateTranslationSet(
    ...     no_priv, new_translations, fuzzy, published)

And we can see as he didn't get any karma activity from that:

    >>> translation_actions = [
    ...     activity.action.name
    ...     for activity in no_priv.activities
    ...     if activity.action.category.name == 'translations'
    ...     ]
    >>> len(translation_actions)
    0

But now, he will provide a new suggestion.

    >>> new_translations = {0: u'somethingelse'}
    >>> pomsgset.updateTranslationSet(
    ...     no_priv, new_translations, fuzzy, published)

At this moment, no_priv should have a new karma activity:

    >>> translation_actions = [
    ...     activity.action.name
    ...     for activity in no_priv.activities
    ...     if activity.action.category.name == 'translations'
    ...     ]
    >>> len(translation_actions)
    1

And it's for adding a new suggestion.

    >>> u'translationsuggestionadded' in translation_actions
    True

Now, a reviewer for the Spanish team is going to review that translation and
do other translations.

    >>> kurem = personset.getByEmail('kurem@debian.cz')

He doesn't have any translation activity.

    >>> translation_actions = [
    ...     activity.action.name
    ...     for activity in kurem.activities
    ...     if activity.action.category.name == 'translations'
    ...     ]
    >>> len(translation_actions)
    0

But now, he will approve a suggestion.

    >>> new_translations = {0: u'somethingelse'}
    >>> pomsgset.updateTranslationSet(
    ...     kurem, new_translations, fuzzy, published)

And he will get that action in his karma activity log.

    >>> translation_actions = [
    ...     activity.action.name
    ...     for activity in kurem.activities
    ...     if activity.action.category.name == 'translations'
    ...     ]
    >>> len(translation_actions)
    1

We can see that it's for adding a new suggestion.

    >>> u'translationreview' in translation_actions
    True

And no-priv, who added the suggestion will get some karma because
the translation was approved:

    >>> translation_actions = [
    ...     activity.action.name
    ...     for activity in no_priv.activities
    ...     if activity.action.category.name == 'translations'
    ...     ]
    >>> len(translation_actions)
    2

The new entry is due the approved suggestion.

    >>> u'translationsuggestionapproved' in translation_actions
    True

Finally, this reviewer, is going to add a new translation directly. He should
get karma for his autoapproved translation.

    >>> new_translations = {0: u'changed again'}
    >>> pomsgset.updateTranslationSet(
    ...     kurem, new_translations, fuzzy, published)

He gets another action in his karma activity log.

    >>> translation_actions = [
    ...     activity.action.name
    ...     for activity in kurem.activities
    ...     if activity.action.category.name == 'translations'
    ...     ]
    >>> len(translation_actions)
    2

We can see that it's for his suggestion approved automatically.

    >>> u'translationsuggestionapproved' in translation_actions
    True


IPOTemplate description change
==============================

When someone adds a description for an IPOTemplate, we give them some karma
because they are giving more information to our users about the usage of
that template.

We are going to use Sample Person for this test as he's the owner of the
product from where the IPOTemplate is and he has rights to change the
description.

    >>> from zope.component import getView
    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest
    >>> sample_person = personset.getByEmail('test@canonical.com')
    >>> login('test@canonical.com')
    >>> request = LaunchpadTestRequest(form={
    ...     u'field.owner': u'test@canonical.com',
    ...     u'field.priority': u'0',
    ...     u'field.description': u'This is a new description',
    ...     u'UPDATE_SUBMIT': u'Change'})
    >>> request.method = 'POST'
    >>> potemplate_view = getView(potemplate, '+edit', request)

Let's see the description we have atm:

    >>> potemplate.description
    u'Template for evolution in hoary'

And the Sample person doesn't have any translation activity.

    >>> translation_actions = [
    ...     activity.action.name
    ...     for activity in sample_person.activities
    ...     if activity.action.category.name == 'translations'
    ...     ]
    >>> len(translation_actions)
    0

We do the update:

    >>> potemplate_view.update()
    u'Updated on ${date_time}'

And the new one is:

    >>> potemplate.description
    u'This is a new description'

Now, Sample person got a new activity.

    >>> translation_actions = [
    ...     activity.action.name
    ...     for activity in sample_person.activities
    ...     if activity.action.category.name == 'translations'
    ...     ]
    >>> len(translation_actions)
    1

And it's the one related to description update.

    >>> u'translationtemplatedescriptionchanged' in translation_actions
    True
