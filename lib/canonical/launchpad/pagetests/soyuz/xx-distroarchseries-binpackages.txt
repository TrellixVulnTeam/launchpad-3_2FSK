= DistroArchSeries Binary Package Pages =

In Launchpad, BinaryPackageReleases are directly attached to a
DistroArchSeries by a publication record (see
doc/publishedpackages.txt).

A DistroArchSeriesBinaryPackage, is a collection of
BinaryPackageReleases once published in a given DistroArchSeries.

SourcePackages are available through the web UI after traversing
through a DistroSeries and SourceName. The URL schema is:

$LP/ubuntu/$DISTRORELEASE/+source/$BINARYNAME

This specific page is not properly integrated in the navigation
system, so it's impossible to get there except by typing the entire
URL:

    >>> browser.open(
    ...     'http://localhost/ubuntu/warty/i386/mozilla-firefox')

This page provides the publishing history of this BinaryPackage within
this architecture:

    >>> print extract_text(
    ...    find_tag_by_id(browser.contents, 'publishing-summary'))
    Date                  Status    Target     Pocket  Component Section Version
    2006-04-11 13:00:00 UTC Published warty i386 release main      base    1.0
    Published on 2006-04-11
    ...
    2005-05-05 00:00:00 UTC Published warty i386 release main      base    0.9
    Published on 2005-06-18
    ...

It also provides a link to the currently published version:

    >>> browser.getLink("0.9").click()
    >>> browser.url
    'http://localhost/ubuntu/warty/i386/mozilla-firefox/0.9'


A BinaryPackageRelease once published in a DistroArchSeries is
represented by a DistroArchSeriesBinaryPackageRelease and easily
reached by traversing a DistroArchSeriesBinaryPackage instance with a
valid version, like:

$LP/ubuntu/$DISTRORELEASE/$ARCHTAG/$BINARYNAME/$VERSION

It's also reachable in a more natural way, starting from distribution page:

    >>> browser.open(
    ...     'http://localhost/ubuntu')

Then we get to the DistroSeries page:

    >>> browser.getLink(url='/ubuntu/warty').click()

Then the DistroArchSeries page:

    >>> browser.getLink(url='/ubuntu/warty/i386').click()

Now we are able to use the search box in this page:

    >>> browser.getControl(name="text", index=1).value = "moz"
    >>> browser.getControl("Search Packages").click()

Click on the wanted name to get on the DistroArchSeriesBinaryPackageRelease:

    >>> browser.getLink("mozilla-firefox").click()
    >>> browser.url
    'http://localhost/ubuntu/warty/i386/mozilla-firefox/0.9'

This page represents an IDistroArchSeriesBinaryPackageRelease and is
able to point the user to the IDistroSeriesSourcePackageRelease which
originated itself:

    >>> print extract_text(find_tag_by_id(browser.contents, 'source'))
    mozilla-firefox 0.9 (source) in Ubuntu

    >>> browser.getLink("mozilla-firefox 0.9 (source) in Ubuntu").url
    'http://localhost/ubuntu/+source/mozilla-firefox/0.9'

Also provide a section with the contained files, including respective
librarian URL and size:

    >>> print extract_text(find_tag_by_id(browser.contents, 'files'))
    mozilla-firefox_0.9_i386.deb (3 bytes)

    >>> browser.getLink("mozilla-firefox_0.9_i386.deb").url
    'http://localhost:58000/40/mozilla-firefox_0.9_i386.deb'

Binary Packages with no files to present results in a clear statement
intead of a empty section.

    >>> browser.open(
    ...     'http://launchpad.dev/ubuntu/hoary/i386/pmount/0.1-1')
    >>> print extract_text(find_tag_by_id(browser.contents, 'files'))
    There are no downloadable files for this binary package.


== DistroArchSeries Partner Binary Package Pages ==

Binary partner packages in Launchpad differ from regular packages by
two things:

1. Their component is 'partner'
2. Their archive is the partner archive, rather than the primary archive.

Their page functionality is identical to regular packages, which is described
in the previous section of this page.

    >>> browser.open(
    ...     'http://launchpad.dev/ubuntu/breezy-autotest/i386/commercialpackage')

This page provides the publishing history of this BinaryPackage within
this architecture:

    >>> print extract_text(
    ...     find_tag_by_id(browser.contents, 'publishing-summary'))
    Date                  Status    Target     Pocket  Component Section Version
    2007-08-09 21:55:39 UTC Published b...t i386 release partner   devel 1.0-1
    Published on 2007-08-09
    ...

It also provides a link to the currently published version:

    >>> browser.getLink("1.0-1").click()
    >>> browser.url
    'http://launchpad.dev/ubuntu/breezy-autotest/i386/commercialpackage/1.0-1'


A BinaryPackageRelease once published in a DistroArchSeries is
represented by a DistroArchSeriesBinaryPackageRelease and easily
reached by traversing a DistroArchSeriesBinaryPackage instance with a
valid version, like:

$LP/ubuntu/$DISTRORELEASE/$ARCHTAG/$BINARYNAME/$VERSION

It's also reachable in a more natural way, starting from distribution page:

    >>> browser.open('http://launchpad.dev/ubuntu')

Then we get to the DistroSeries page:

    >>> browser.getLink('See all versions...').click()
    >>> browser.getLink('Breezy Badger Autotest').click()

Then the DistroArchSeries page:

    >>> browser.getLink('breezy-autotest i386 (official, ppa)').click()

Now we are able to use the search box in this page:

    >>> browser.getControl(name="text", index=1).value = "commercialpackage"
    >>> browser.getControl("Search Packages").click()

Click on the wanted name to get on the DistroArchSeriesBinaryPackageRelease:

    >>> browser.getLink("commercialpackage").click()
    >>> browser.url
    'http://launchpad.dev/ubuntu/breezy-autotest/i386/commercialpackage/1.0-1'

This page represents an IDistroArchSeriesBinaryPackageRelease and is
able to point the user to the IDistroSeriesSourcePackageRelease which
originated itself:

    >>> print extract_text(find_tag_by_id(browser.contents, 'source'))
    commercialpackage 1.0-1 (source) in Ubuntu

Also provide a section with the contained files, including respective
librarian URL and size:

    >>> print extract_text(find_tag_by_id(browser.contents, 'files'))
    commercialpackage_1.0-1_i386.deb (652 bytes)

