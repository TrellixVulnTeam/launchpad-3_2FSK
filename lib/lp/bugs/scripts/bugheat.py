# Copyright 2010 Canonical Ltd.  This software is licensed under the
# GNU Affero General Public License version 3 (see the file LICENSE).

"""The innards of the Bug Heat cronscript."""

__metaclass__ = type
__all__ = []


from zope.component import getUtility
from zope.interface import implements

from canonical.launchpad.interfaces.looptuner import ITunableLoop
from canonical.launchpad.utilities.looptuner import DBLoopTuner


class BugHeatCalculator:
    """A class to calculate the heat for a bug."""

    def __init__(self, bug):
        self.bug = bug

    def _getHeatFromPrivacy(self):
        """Return the heat generated by the bug's `private` attribute."""
        if self.bug.private:
            return 150
        else:
            return 0

    def _getHeatFromSecurity(self):
        """Return the heat generated if the bug is security related."""
        if self.bug.security_related:
            return 250
        else:
            return 0

    def _getHeatFromDuplicates(self):
        """Return the heat generated by the bug's duplicates."""
        return self.bug.duplicates.count() * 6

    def _getHeatFromAffectedUsers(self):
        """Return the heat generated by the bug's affected users."""
        return self.bug.users_affected.count() * 4

    def _getHeatFromSubscribers(self):
        """Return the heat generated by the bug's subscribers."""
        direct_subscribers = self.bug.getDirectSubscribers()
        subscribers_from_dupes = self.bug.getSubscribersFromDuplicates()

        return (
            (len(direct_subscribers) + len(subscribers_from_dupes)) * 2)

    def getBugHeat(self):
        """Return the total heat for the current bug."""
        heat_counts = [
            self._getHeatFromAffectedUsers(),
            self._getHeatFromDuplicates(),
            self._getHeatFromPrivacy(),
            self._getHeatFromSecurity(),
            self._getHeatFromSubscribers(),
            ]

        total_heat = 0
        for count in heat_counts:
            total_heat += count

        return total_heat

