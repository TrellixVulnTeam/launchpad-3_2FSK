
The canonical.database.adapter module provides a Zope database adapter
that can prevent SQL statements from being executed if a request takes
longer than length of time to execute.

Imports and test setup:

    >>> import threading
    >>> import psycopg
    >>> import transaction
    >>> from zope.component import getUtility
    >>> from zope.app.rdb.interfaces import IZopeDatabaseAdapter
    >>> from sqlos.interfaces import IConnectionName
    >>> from canonical.config import config
    >>> import canonical.launchpad.webapp.adapter
    >>> from canonical.launchpad.webapp.adapter import (
    ...     clear_request_started, get_request_statements,
    ...     LaunchpadDatabaseAdapter, set_request_started)

The Launchpad database connection is created by getting the
IZopeDatabaseAdapter for the connection name in question.  The
LaunchpadDatabaseAdapter class is registered for the connection name
SQLOS uses:

    >>> name = getUtility(IConnectionName)
    >>> da = getUtility(IZopeDatabaseAdapter, name.name)
    >>> isinstance(da, LaunchpadDatabaseAdapter)
    True


The database adapter is a reconnecting database adapter, so handles
connection drops (as tested elsewhere):

    >>> from canonical.launchpad.webapp.adapter import (
    ...     ReconnectingDatabaseAdapter)
    >>> isinstance(da, ReconnectingDatabaseAdapter)
    True


Statement Timeout
=================

The timeout is set in launchpad.conf file.  By default it is unset,
which corresponds to no timeout:

    >>> print config.launchpad.db_statement_timeout
    None


Connections created with the database adapter will use this timeout as
the Postgres statement timeout (a value of zero means no timeout):

    >>> def current_statement_timeout(cursor):
    ...     cursor.execute('SHOW statement_timeout')
    ...     return cursor.fetchone()[0]
    ...

    >>> set_request_started()
    >>> conn = da()
    >>> cursor = conn.cursor()
    >>> print current_statement_timeout(cursor)
    0
    >>> da.disconnect()
    >>> clear_request_started()


Using the builtin pg_sleep() function, we can trigger the
timeout by sleeping for 200ms with a 100ms statement timeout:

    >>> config.push('base_test_data', """
    ... [launchpad]
    ... db_statement_timeout: 100
    ... """)
    >>> conn = da()
    >>> cursor = conn.cursor()
    >>> set_request_started()
    >>> print current_statement_timeout(cursor)
    100ms
    >>> cursor.execute('SELECT pg_sleep(0.200)')
    Traceback (most recent call last):
      ...
    RequestStatementTimedOut: SELECT pg_sleep(0.200)
    >>> da.disconnect()
    >>> clear_request_started()


The statement_timeout will be adjusted during the transaction, within
a certain precision. To test this reliably, we need a time machine to
avoid random failures under load. Lets build one and plug it in:

    >>> _now = 0
    >>> def fake_time():
    ...     return float(_now)
    >>> def time_travel(delta):
    ...     global _now
    ...     _now += delta
    >>> canonical.launchpad.webapp.adapter.time = fake_time # Monkey patch


Now issue three statements, the first one taking less than the precision
time but the second going over the threshold. We use the time machine
to fake how long things take.

    >>> config.push('test', """
    ... [launchpad]
    ... db_statement_timeout: 10000
    ... db_statement_timeout_precision: 1000
    ... """)
    >>> conn = da()
    >>> cursor = conn.cursor()
    >>> set_request_started()

    >>> cursor.execute('SELECT TRUE')
    >>> print current_statement_timeout(cursor)
    10s
    >>> time_travel(0.5) # Forward in time 0.5 seconds

    >>> cursor.execute('SELECT TRUE')
    >>> print current_statement_timeout(cursor)
    10s
    >>> time_travel(0.6) # Forward in time 0.6 seconds, now over precision

This invokation, the PostgreSQL statement timeout will be updated before
issuing the SQL command as we have exceeded the precision period:

    >>> cursor.execute('SELECT TRUE')
    >>> print current_statement_timeout(cursor)
    8900ms
    >>> time_travel(8.89) # 0.01s remaining before hard timeout


This final invokation, we will actually sleep to ensure that the
timeout being reported by PostgreSQL is actually working:

    >>> cursor.execute('SELECT pg_sleep(0.2)')
    Traceback (most recent call last):
      ...
    RequestStatementTimedOut: SELECT pg_sleep(0.2)
    >>> da.disconnect()
    >>> clear_request_started()


Turn off the timemachine so nobody hurts themselves:

    >>> import time
    >>> canonical.launchpad.webapp.adapter.time = time.time


Set the timeout to 5000ms for the next tests:

    >>> config.push('test', """
    ... [launchpad]
    ... db_statement_timeout: 5000
    ... """)
    >>> conn = da()
    >>> cursor = conn.cursor()
    >>> set_request_started()
    >>> print current_statement_timeout(cursor)
    5s
    >>> clear_request_started()


Request Timeout
===============

While the postgres statement timeout can help cut short some out of
control requests, it will not help when a request performs a large
number of small requests.

To help with this, the set_request_started() and
clear_request_started() functions are provided as hooks for the web
publisher.  If a request exceeds the timeout, execute() method on
cursors will start raising an exception.

Signal the start of a request:

    >>> set_request_started()

Perform an operation before the time limit expires:

    >>> cursor.execute('SELECT 1')

Once the request has been completed, clear_request_started() should be
called:

    >>> clear_request_started()


The request start time can also be passed to set_request_started().
Set the request start time to 1 minute in the past, and execute
another query:

    >>> set_request_started(time.time() - 60)
    >>> cursor.execute('SELECT 1')
    Traceback (most recent call last):
    ...
    RequestExpired: SELECT 1


When a RequestExpired exception is raised, the current database
transaction will be doomed, and future queries will fail:

    >>> clear_request_started()
    >>> try:
    ...     cursor.execute('SELECT 1')
    ... except psycopg.DatabaseError, e:
    ...     print str(e)
    ERROR:  current transaction is aborted, commands ignored until end of transaction block
    <BLANKLINE>
    SELECT 1

Cleanup:

    >>> conn.rollback()

The LaunchpadDatabaseAdapter assumes that each thread services a
different request, so a request timing out on one thread will not
affect other threads:

    >>> started_request = threading.Event()
    >>> statement_issued = threading.Event()
    >>> def foo():
    ...     set_request_started(time.time() - 60) # timed out
    ...     started_request.set()
    ...     statement_issued.wait()
    ...
    >>> set_request_started()
    >>> thread = threading.Thread(target=foo)
    >>> thread.start()
    >>> started_request.wait()
    >>> cursor.execute('SELECT 1')
    >>> statement_issued.set()
    >>> thread.join()
    >>> clear_request_started()

Similarly, starting a new request in another thread will not reset the
remove the timout:

    >>> started_request = threading.Event()
    >>> statement_issued = threading.Event()
    >>> def foo():
    ...     set_request_started()
    ...     started_request.set()
    ...     statement_issued.wait()
    ...
    >>> set_request_started(time.time() - 60)
    >>> thread = threading.Thread(target=foo)
    >>> thread.start()
    >>> started_request.wait()
    >>> cursor.execute('SELECT 1')
    Traceback (most recent call last):
    ...
    RequestExpired: SELECT 1
    >>> statement_issued.set()
    >>> thread.join()
    >>> clear_request_started()
    >>> conn.rollback()


If no timeout has been set, then requests will not time out:

    >>> config.push('test', """
    ... [launchpad]
    ... db_statement_timeout: none
    ... """)
    >>> da.disconnect()
    >>> conn = da()
    >>> cursor = conn.cursor()
    >>> set_request_started(time.time() - 60)
    >>> cursor.execute('SELECT 1')
    >>> clear_request_started()


Statement Logging
=================

While a request is in progress, the Launchpad database adapter keeps a
log of the statements executed.  First show that the statement log is
not maintained outside of a request:

    >>> get_request_statements()
    []
    >>> cursor.execute('SELECT 1')
    >>> cursor.execute('SELECT 2')
    >>> get_request_statements()
    []

Now begin a request, and issue a number of statements:

    >>> set_request_started()
    >>> cursor.execute('SELECT 1')
    >>> cursor.execute('SELECT 2')
    >>> for starttime, endtime, statement in get_request_statements():
    ...     print statement
    SELECT 1
    SELECT 2

After we complete the request, the statement log is cleared:

    >>> clear_request_started()
    >>> get_request_statements()
    []


Read Only Transactions
======================

Customizing the database adapter also lets us easily tweak the current
connection. For example we can make it read only:

    >>> cursor.execute("""
    ...     INSERT INTO SourcePackageName(name) VALUES ('fnord')
    ...     """)
    >>> da.readonly()
    >>> cursor.execute("""
    ...     INSERT INTO SourcePackageName(name) VALUES ('fnord2')
    ...     """)
    Traceback (most recent call last):
    ...
    ProgrammingError: ERROR:  transaction is read-only
    ...

The read only status only lasts until the end of the transaction.:

    >>> transaction.abort()
    >>> cursor = da().cursor()
    >>> cursor.execute("""
    ...     INSERT INTO SourcePackageName(name) VALUES ('fnord3')
    ...     """)
    >>> transaction.abort()


Switching Database Users
========================

We can also change the user we are connected as, which is useful in tests.
You should only change the user at the start of a transaction, or else any
uncommitted changes made may be lost:

    >>> da.switchUser(config.statistician.dbuser)
    >>> cursor = da().cursor()
    >>> cursor.execute("SELECT current_user")
    >>> cursor.fetchone()[0] == config.statistician.dbuser
    True
    >>> cursor.execute("""
    ...     INSERT INTO SourcePackageName(name) VALUES ('fnord4')
    ...     """)
    Traceback (most recent call last):
    ...
    ProgrammingError: ERROR:  permission denied for relation sourcepackagename
    ...

Unlike readonly, this is not reset at the end of the transaction:

    >>> transaction.abort()
    >>> cursor = da().cursor()
    >>> cursor.execute("SELECT current_user")
    >>> cursor.fetchone()[0] == config.statistician.dbuser
    True
    >>> cursor.execute("""
    ...     INSERT INTO SourcePackageName(name) VALUES ('fnord4')
    ...     """)
    Traceback (most recent call last):
    ...
    ProgrammingError: ERROR:  permission denied for relation sourcepackagename
    ...
    >>> transaction.abort()

So you need to explicity set the user back:

    >>> da.switchUser()
    >>> cursor = da().cursor()
    >>> cursor.execute("""
    ...     INSERT INTO SourcePackageName(name) VALUES ('fnord4')
    ...     """)
    >>> cursor.execute("SELECT current_user")
    >>> cursor.fetchone()[0] == config.launchpad.dbuser
    True

Reset out config:

    >>> base_test_data = config.pop('base_test_data')

