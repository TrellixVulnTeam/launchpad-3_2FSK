Language Views
==================

Admin Language
------------------

    >>> from zope.component import getUtility
    >>> from lp.services.worlddata.interfaces.language import ILanguageSet
    >>> from canonical.launchpad.layers import TranslationsLayer

    >>> language_set = getUtility(ILanguageSet)
    >>> portuguese = language_set.getLanguageByCode('pt_BR')
    >>> language_admin_view = create_view(
    ...     portuguese, '+admin', layer=TranslationsLayer)
    >>> language_admin_view.initialize()

The language +admin view provides a label and a page_title for the page.

    >>> print language_admin_view.label
    Edit Portuguese (Brazil) in Launchpad

    >>> print language_admin_view.page_title
    Change details

The view provides also a cancel_url and a next_url, but they're the same
because the previous and next steps of editing a language are returning
to its index.

    >>> print language_admin_view.cancel_url
    http://translations.launchpad.dev/+languages/pt_BR

    >>> print language_admin_view.next_url
    http://translations.launchpad.dev/+languages/pt_BR


Add Language
------------------

    >>> language_add_view = create_view(language_set, '+add',
    ...     layer=TranslationsLayer)

    >>> print language_add_view.label
    Register a language in Launchpad

    >>> print language_add_view.page_title
    Register a language

The view provides also a cancel_url and a next_url:

    >>> print language_add_view.cancel_url
    http://translations.launchpad.dev/+languages

    >>> print language_add_view.field_names
    ['code', 'englishname', 'nativename', 'pluralforms',
    'pluralexpression', 'visible', 'direction']

    >>> login("admin@canonical.com")
    >>> form = {
    ...     'field.code': 'lp_US',
    ...     'field.englishname': 'Launchpad English',
    ...     'field.nativename': '',
    ...     'field.pluralforms': '',
    ...     'field.pluralexpression': '',
    ...     'field.visible': True,
    ...     'field.direction': 'LTR',
    ...     'field.actions.add': 'Add',
    ...     }

    >>> language_add_view = create_initialized_view(
    ...     language_set, '+add', form=form,
    ...     layer=TranslationsLayer)
    >>> language_add_view.errors
    []

    >>> print language_add_view.next_url
    http://translations.launchpad.dev/+languages/lp_US


View Language
------------------

    >>> serbian = language_set.getLanguageByCode('sr')
    >>> language_view = create_initialized_view(serbian, '+index',
    ...     layer=TranslationsLayer)

The friendlypluralforms function shows us a list of plural forms and
a set of examples for each one, so one won't need to understand the plural
formula expression to see how it works.

    >>> friendly_plural_forms = language_view.friendly_plural_forms

    >>> for form_dict in friendly_plural_forms:
    ...     print form_dict['form'], ':', form_dict['examples']
    0 : 1, 21, 31, 41, 51, 61...
    1 : 2, 3, 4, 22, 23, 24...
    2 : 0, 5, 6, 7, 8, 9...

View LanguageSet
------------------

    >>> login('carlos@canonical.com')
    >>> languageset_view = create_initialized_view(language_set, '+index',
    ...     layer=TranslationsLayer)

The user_languages property contains a list of the current user's preferred
languages formated as links.

    >>> print languageset_view.user_languages
    <a href=".../ca" ...>Catalan</a>,
    <a href=".../en" ...>English</a>,
    <a href=".../es" ...>Spanish</a>

For a user without any preferred languages, English will be returned. 

    >>> person = factory.makePerson()
    >>> print person.languages
    []
    >>> login_person(person)
    >>> languageset_view = create_initialized_view(language_set, '+index',
    ...     layer=TranslationsLayer)
    >>> print languageset_view.user_languages
    <a href=".../en" ...>English</a>

