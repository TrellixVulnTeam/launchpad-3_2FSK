We will verify that we do not put session cookies in anonymous requests. This
is important for cacheing anonymous requests in front of Zope, such as with
Squid.

Because testbrowser does not have easy access to cookies, we'll start with a
helper class. We want to check whether the browser has a session cookie set,
not whether the server has sent a "set-cookie" header, so we have to dig into
the underlying mechanize browser.

    >>> from UserDict import DictMixin
    >>> import datetime
    >>> import pytz
    >>> class Cookies(DictMixin):
    ...     """Cookies for testbrowser.  Currently does not implement setting.
    ...     Trying to get this idea accepted upstream for zope.testbrowser."""
    ...     def __init__(self, testbrowser):
    ...         self.testbrowser = testbrowser
    ...     @property
    ...     def _jar(self):
    ...         for handler in self.testbrowser.mech_browser.handlers:
    ...             if getattr(handler, 'cookiejar', None) is not None:
    ...                 return handler.cookiejar
    ...         raise RuntimeError('no cookiejar found')
    ...     def _get(self, key):
    ...         for ck in self._jar:
    ...             if ck.name == key:
    ...                 return ck
    ...     def __getitem__(self, key):
    ...         ck = self._get(key)
    ...         if ck is None:
    ...             raise KeyError(key)
    ...         return ck.value
    ...     def keys(self):
    ...         return [ck.name for ck in self._jar]
    ...     def __contains__(self, key):
    ...         return self._get(key) is not None
    ...     def getInfo(self, key):
    ...         ck = self._get(key)
    ...         if ck is None:
    ...             raise KeyError(key)
    ...         res = {'value': ck.value,
    ...                'port': ck.port,
    ...                'domain': ck.domain,
    ...                'path': ck.path,
    ...                'secure': ck.secure,
    ...                'expires': None}
    ...         if ck.expires is not None:
    ...             res['expires'] = datetime.datetime.fromtimestamp(
    ...                 ck.expires, pytz.UTC)
    ...         return res
    ...     def __len__(self):
    ...         return len(self._jar)
    ...

    >>> cookies = Cookies(browser)

Now we'll actually begin the demonstration. When we go to launchpad as an
anonymous user, the browser has no cookies.

    >>> browser.open('http://launchpad.dev')
    >>> len(cookies)
    0

Now let's log in and show that the session cookie is set.

    >>> now = datetime.datetime.now(pytz.UTC).replace(microsecond=0)
    >>> year_from_now = now + datetime.timedelta()
    >>> browser.open('http://launchpad.dev/+login')
    >>> browser.getControl('E-mail', index=0).value = 'foo.bar@canonical.com'
    >>> browser.getControl('Password').value = 'test'
    >>> browser.getControl('Log In').click()
    >>> 'Foo Bar' in browser.contents
    True
    >>> len(cookies)
    1
    >>> cookies.keys()
    ['launchpad_tests']
    >>> cookies.getInfo('launchpad_tests')['expires'] >= year_from_now
    True
    >>> cookies.getInfo('launchpad_tests')['domain']
    '.launchpad.dev'

The cookie will be removed when you log out.

    >>> browser.getControl('Log Out').click()
    >>> len(cookies)
    0
