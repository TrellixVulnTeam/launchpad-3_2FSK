= Closing bugs from changelogs =

When a package is uploaded to a distribution, a bug number can be
specified in the Launchpad-bugs-fixed header of the changes file.

    >>> changes_template = """
    ... Format: 1.7
    ... Launchpad-bugs-fixed: %s
    ... """

The package uploads are associated with specific releases of the
package, but the bugs they reference may be filed on the generic
distribution package.

    >>> from canonical.testing.layers import LaunchpadZopelessLayer
    >>> from canonical.launchpad.interfaces import (
    ...     CreateBugParams, IDistributionSet)
    >>> login('no-priv@canonical.com')

    >>> LaunchpadZopelessLayer.switchDbUser('launchpad')

    >>> ubuntu = getUtility(IDistributionSet).getByName('ubuntu')
    >>> ubuntu_hoary = ubuntu.getSeries('hoary')

    >>> bug_params = CreateBugParams(
    ...     getUtility(ILaunchBag).user, "Test bug", "Test bug.")

The package source uploads are represented as PackageUpload items
that are associated with PackageUploadSource items and a changes
file. The only thing in the changes file that is used to close the bug
is the Launchpad-bugs-fixed header.

The PackageUploadSource items are linked to SourcePackageRelease
items, but for closing bugs the only thing that mattters is who uploaded
it, what package name is it, and to what distribution series it was
uploaded to.

    >>> from canonical.lp.dbschema import (
    ...     PackageUploadStatus, PackagePublishingPocket)

    >>> def upload(source_release, fixing_text,
    ...            pocket=PackagePublishingPocket.RELEASE):
    ...     changes = changes_template % fixing_text
    ...     queue_item = ubuntu_hoary.createQueueEntry(
    ...         archive=ubuntu_hoary.main_archive,
    ...         pocket=pocket,
    ...         changesfilename='%s.changes' % source_release.name,
    ...         changesfilecontent=changes)
    ...     source_queue = queue_item.addSource(source_release)
    ...     return queue_item

    >>> pmount_ubuntu = ubuntu.getSourcePackage('pmount')
    >>> pmount_release = pmount_ubuntu.getVersion(
    ...     '0.1-1').sourcepackagerelease

    >>> pmount_bug_id = pmount_ubuntu.createBug(bug_params).id

    >>> queue_item_id = upload(pmount_release, pmount_bug_id).id

    # Need to commit the transaction so that the changes file can be
    # downloaded from the Librarian.
    >>> from canonical.database.sqlbase import commit
    >>> commit()

Right after the queue items have been processed by the publishing
scripts, close_bugs() is called with a list of queue item ids that have
been published. Passing a queue item with a Launchpad-bugs-fixed header
will close the specified bug.

    >>> LaunchpadZopelessLayer.switchDbUser(test_dbuser)
    >>> from canonical.launchpad.interfaces import IBugSet

    >>> def print_single_task_status(bug_id):
    ...     bug = getUtility(IBugSet).get(bug_id)
    ...     [task] = bug.bugtasks
    ...     return task.status.name

    >>> print_single_task_status(pmount_bug_id)
    'NEW'

    >>> from canonical.launchpad.scripts.processaccepted import close_bugs
    >>> close_bugs([queue_item_id])

    >>> print_single_task_status(pmount_bug_id)
    'FIXRELEASED'

The changelog associated with the SourcePackageRelease is automatically
added as a comment from the uploader.

    >>> commit()
    >>> LaunchpadZopelessLayer.switchDbUser('launchpad')
    >>> pmount_bug = getUtility(IBugSet).get(pmount_bug_id)
    >>> last_comment = pmount_bug.messages[-1]
    >>> print pmount_release.creator.displayname
    Mark Shuttleworth
    >>> print last_comment.owner.displayname
    Mark Shuttleworth

    >>> print pmount_release.changelog
    pmount (0.1-1) hoary; urgency=low
    <BLANKLINE>
     * Fix description (Malone #1)
     * Fix debian (Debian #2000)
     * Fix warty (Warty Ubuntu #1)
    <BLANKLINE>
     -- Sample Person <test@canonical.com> Tue, 7 Feb 2006 12:10:08 +0300

    >>> print last_comment.text_contents
    pmount (0.1-1) hoary; urgency=low
    <BLANKLINE>
     * Fix description (Malone #1)
     * Fix debian (Debian #2000)
     * Fix warty (Warty Ubuntu #1)
    <BLANKLINE>
     -- Sample Person <test@canonical.com> Tue, 7 Feb 2006 12:10:08 +0300

A bug notification is created for both the status change, and for the
comment addition. The both notifications will be batched together into a
single e-mail later.

    >>> from canonical.launchpad.database import BugNotification
    >>> notifications = BugNotification.select(orderBy='id')
    >>> for notification in notifications[-2:]:
    ...     print "From %s:\n%s\n" % (
    ...         notification.message.owner.displayname,
    ...         notification.message.text_contents)
    From Mark Shuttleworth:
    ** Changed in: pmount (Ubuntu)
           Status: New => Fix Released
    <BLANKLINE>
    From Mark Shuttleworth:
    pmount (0.1-1) hoary; urgency=low
    <BLANKLINE>
     * Fix description (Malone #1)
     * Fix debian (Debian #2000)
     * Fix warty (Warty Ubuntu #1)
    <BLANKLINE>
     -- Sample Person <test@canonical.com> Tue, 7 Feb 2006 12:10:08 +0300

Uploads to pocket PROPOSED should not close bugs, see bug #125279 for
further information:

    >>> cdrkit_ubuntu = ubuntu.getSourcePackage('cdrkit')
    >>> cdrkit_release = cdrkit_ubuntu.currentrelease.sourcepackagerelease

    >>> cdrkit_bug_id = cdrkit_ubuntu.createBug(bug_params).id

    >>> queue_item_id = upload(cdrkit_release, cdrkit_bug_id, 
    ...                        pocket=PackagePublishingPocket.PROPOSED).id

    >>> print_single_task_status(cdrkit_bug_id)
    'NEW'

    >>> commit()
    >>> LaunchpadZopelessLayer.switchDbUser(test_dbuser)

    >>> close_bugs([queue_item_id])

    >>> commit()
    >>> LaunchpadZopelessLayer.switchDbUser('launchpad')

    >>> print_single_task_status(cdrkit_bug_id)
    'NEW'

It's possible to specify more than one bug in the Launchpad-bugs-fixed
header, each will be marked as Fix Released. If a nonexistent bug,
'666', is specified, it's ignored.

    >>> pmount_bug_id = pmount_ubuntu.createBug(bug_params).id
    >>> another_pmount_bug_id = pmount_ubuntu.createBug(bug_params).id

    >>> fixing_text = "%d 666 %d" % (
    ...     pmount_bug_id, another_pmount_bug_id)

    >>> queue_item_id = upload(pmount_release, fixing_text).id

    >>> print_single_task_status(pmount_bug_id)
    'NEW'

    >>> print_single_task_status(another_pmount_bug_id)
    'NEW'

    >>> commit()
    >>> LaunchpadZopelessLayer.switchDbUser(test_dbuser)

    >>> close_bugs([queue_item_id])

    >>> commit()
    >>> LaunchpadZopelessLayer.switchDbUser('launchpad')


    >>> print_single_task_status(pmount_bug_id)
    'FIXRELEASED'

    >>> print_single_task_status(another_pmount_bug_id)
    'FIXRELEASED'

== process-accepted.py ==

The closing of bugs are done in process-accepted.py, right after the
queue items have been processed.

    >>> commit()
    >>> LaunchpadZopelessLayer.switchDbUser('launchpad')

    >>> queue_item = upload(pmount_release, fixing_text)
    >>> queue_item.setAccepted()

    >>> from canonical.launchpad.interfaces import BugTaskStatus

    >>> pmount_bug = getUtility(IBugSet).get(pmount_bug_id)
    >>> [pmount_task] = pmount_bug.bugtasks
    >>> pmount_task.transitionToStatus(
    ...     BugTaskStatus.CONFIRMED, getUtility(ILaunchBag).user)

    >>> another_pmount_bug = getUtility(IBugSet).get(another_pmount_bug_id)
    >>> [another_pmount_task] = another_pmount_bug.bugtasks
    >>> another_pmount_task.transitionToStatus(
    ...     BugTaskStatus.CONFIRMED, getUtility(ILaunchBag).user)


    >>> print_single_task_status(pmount_bug_id)
    'CONFIRMED'

    >>> print_single_task_status(another_pmount_bug_id)
    'CONFIRMED'

    >>> commit()
    >>> LaunchpadZopelessLayer.switchDbUser(test_dbuser)

    >>> import os.path
    >>> import subprocess
    >>> import sys
    >>> from canonical.config import config
    >>> script = os.path.join(config.root, "scripts/process-accepted.py")
    >>> process = subprocess.Popen(
    ...     [sys.executable, script, "ubuntu"])
    ...     stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    >>> stdout, stderr = process.communicate()
    >>> process.returncode
    0

    >>> print_single_task_status(pmount_bug_id)
    'FIXRELEASED'

    >>> print_single_task_status(another_pmount_bug_id)
    'FIXRELEASED'
