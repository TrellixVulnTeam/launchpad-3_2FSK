=============================
Project (nee product) widgets
=============================

Projects (which used to be referred to as 'products') have their own widgets
for specifying their attributes.


Choosing a bugtracker
=====================

When choosing which bug tracker a project uses, there are three possible
options.  A project can use Launchpad, an external bug tracker, or no specific
bug tracker.  This information is captured using two attributes,
'official_malone' and 'bugtracker', and we'll use a custom widget and a custom
field in order to set these values.  This is presented to the user as radio
buttons, where the option for using an external bug tracker includes a drop
down menu for choosing the correct tracker.

Firefox uses Launchpad as its bug tracker.

    >>> from canonical.launchpad.interfaces import IProductSet
    >>> firefox = getUtility(IProductSet).getByName('firefox')
    >>> firefox.official_malone
    True

The custom field's missing value (i.e. None) represents the 'no bug tracker'
option.  This is displayed by the widget as the project having a bug tracker
in a specified external location.

    >>> from canonical.launchpad.interfaces import IProduct
    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest
    >>> from canonical.widgets.product import ProductBugTrackerWidget

    >>> product_bugtracker = IProduct['bugtracker'].bind(firefox)
    >>> widget = ProductBugTrackerWidget(
    ...     product_bugtracker, product_bugtracker.vocabulary,
    ...     LaunchpadTestRequest())

Firefox has not yet selected a bug tracker.

    >>> print firefox.project.bugtracker
    None

    >>> from BeautifulSoup import BeautifulSoup
    >>> from canonical.launchpad.testing.pages import extract_text
    >>> def print_items(html):
    ...     soup = BeautifulSoup(html)
    ...     labels = soup('label')
    ...     for label in labels:
    ...         if label.previous.previous.get('checked'):
    ...             print '(*)', extract_text(label)
    ...         else:
    ...             print '( )', extract_text(label)
    >>> print_items(widget())
    ( ) In Launchpad
    ( ) In a registered bug tracker:
    ( ) By emailing an upstream bug contact:
    (*) Somewhere else

Firefox chooses to use the Gnome Bugzilla bug tracker, and the widget displays
this bug tracker as selected.

    >>> from canonical.launchpad.interfaces import IBugTrackerSet
    >>> tracker_set = getUtility(IBugTrackerSet)

    >>> gnome_bugzilla = tracker_set.getByName('gnome-bugzilla')
    >>> login('foo.bar@canonical.com')
    >>> firefox.project.bugtracker = gnome_bugzilla

    >>> print_items(widget())
    ( ) In Launchpad
    ( ) In a registered bug tracker:
    ( ) By emailing an upstream bug contact:
    (*) In the the Mozilla Project bug tracker (GnomeGBug GTracker)

On second thought, Firefox has no specified bug tracker.

    >>> old_firefox_project = firefox.project
    >>> firefox.project = None

    >>> print_items(widget())
    ( ) In Launchpad
    ( ) In a registered bug tracker:
    ( ) By emailing an upstream bug contact:
    (*) Somewhere else

Calling the widget's setRenderedValue() with a specific bug tracker overrides
the display of the selected bug tracker.

    >>> mozilla_bugtracker = tracker_set.getByName('mozilla.org')
    >>> widget.setRenderedValue(mozilla_bugtracker)

    >>> print_items(widget())
    ( ) In Launchpad
    (*) In a registered bug tracker:
    ( ) By emailing an upstream bug contact:
    ( ) Somewhere else

When the bug tracker is an Email Address bug tracker, the "By emailing" option
is shown as selected instead.

    >>> email_bugtracker = tracker_set.getByName('email')
    >>> widget.setRenderedValue(email_bugtracker)

    >>> print_items(widget())
    ( ) In Launchpad
    ( ) In a registered bug tracker:
    (*) By emailing an upstream bug contact:
    ( ) Somewhere else

When the bug tracker is the marker attribute representing Launchpad, the
widget is displayed as having the 'In Launchpad' option selected.

    >>> widget.setRenderedValue(widget.context.malone_marker)
    >>> print_items(widget())
    (*) In Launchpad
    ( ) In a registered bug tracker:
    ( ) By emailing an upstream bug contact:
    ( ) Somewhere else

A user selects the Malone bug tracker, indicating that bugs are tracked in
Launchpad.

    >>> form = {
    ...     'field.bugtracker': 'malone',
    ...     'field.bugtracker.bugtracker': '3',
    ...     }
    >>> widget = ProductBugTrackerWidget(
    ...     product_bugtracker, product_bugtracker.vocabulary,
    ...     LaunchpadTestRequest(form=form))

    # This is just a generic object so there's no other way to test it.
    >>> widget.getInputValue() is product_bugtracker.malone_marker
    True

The bugtracker value passed to the widget caused the sub-widget used to select
the bug tracker to have the correct value.

    >>> widget.bugtracker_widget.getInputValue().id
    3
    >>> print widget.bugtracker_widget.getInputValue().name
    debbugs

By indicating an external bug tracker, the selected bug tracker will be
returned.

    >>> form['field.bugtracker'] = 'external'
    >>> widget = ProductBugTrackerWidget(
    ...     product_bugtracker, product_bugtracker.vocabulary,
    ...     LaunchpadTestRequest(form=form))
    >>> debbugs = widget.getInputValue()
    >>> print debbugs.name
    debbugs

The sub-widget for selecting the external bug tracker also has debbugs as its
input value.

    >>> print widget.getInputValue().name
    debbugs

The project's bug tracker, or no bug tracker, at all is selected.

    >>> form['field.bugtracker'] = 'project'
    >>> widget = ProductBugTrackerWidget(
    ...     product_bugtracker, product_bugtracker.vocabulary,
    ...     LaunchpadTestRequest(form=form))
    >>> print widget.getInputValue()
    None

We can't use the value returned from getInputValue() to set an attribute on
the project directly.  Instead the custom field ProductBugTracker is used.  It
knows how to deal with the special malone marker when getting and setting the
values.

Firefox still uses Malone officially, which means that the field returns the
marker object.

    >>> firefox.official_malone
    True
    >>> print firefox.bugtracker
    None
    >>> product_bugtracker.get(firefox) is product_bugtracker.malone_marker
    True

Passing a bug tracker to the field's set method will unset official_malone and
set the bug tracker.

    >>> login('test@canonical.com')
    >>> product_bugtracker.set(firefox, debbugs)
    >>> firefox.official_malone
    False
    >>> print firefox.bugtracker.name
    debbugs

Choosing to use Malone again, the changes above will be reverted.

    >>> product_bugtracker.set(firefox, product_bugtracker.malone_marker)
    >>> firefox.official_malone
    True
    >>> print firefox.bugtracker
    None

Passing None to the field's set method, Firefox will once again switch to not
using Malone, and its bug tracker will be set to None.

    >>> product_bugtracker.set(firefox, None)
    >>> firefox.official_malone
    False
    >>> print firefox.bugtracker
    None


Choosing a License
==================

A custom widget is used to display a link to the license policy.

    >>> from canonical.launchpad.interfaces import License
    >>> from canonical.widgets.product import LicenseWidget

    >>> form = {'field.licenses': []}

    >>> product = getUtility(IProductSet).get(1)
    >>> licenses_field = IProduct['licenses'].bind(product)
    >>> vtype = licenses_field.value_type
    >>> request = LaunchpadTestRequest(form=form)
    >>> license_widget = LicenseWidget(licenses_field, vtype, request)

The widget has one checkbox for each license, and it also has a link to the
license policy.

    >>> html = license_widget()
    >>> soup = BeautifulSoup(html)
    >>> len(License)
    25
    >>> len(soup.table('input'))
    25
    >>> print soup.a['href']
    https://help.launchpad.net/Legal/ProjectLicensing

No licenses are selected.

    >>> license_widget.getInputValue()
    Set([])
    >>> soup.findAll('input', checked='checked')
    []

One license, the GNU GPL v2, is selected.

    >>> form['field.licenses'] = ['GNU_GPL_V2']
    >>> request = LaunchpadTestRequest(form=form)
    >>> license_widget = LicenseWidget(licenses_field, vtype, request)

    >>> def print_checked_items(html):
    ...     soup = BeautifulSoup(html)
    ...     inputs = soup('input')
    ...     for input in inputs:
    ...         if input.get('checked'):
    ...             print '(*)', input.get('value')
    ...         else:
    ...             print '( )', input.get('value')

    >>> license_widget.getInputValue()
    Set([<DBItem License.GNU_GPL_V2, (130) ...>])

    >>> print_checked_items(license_widget())
    ( ) ACADEMIC
    ...
    (*) GNU_GPL_V2
    ( ) GNU_GPL_V3
    ( ) GNU_LGPL_V2_1
    ( ) GNU_LGPL_V3
    ...

A second license is selected.

    >>> form['field.licenses'] = ['GNU_LGPL_V2_1', 'GNU_GPL_V2']
    >>> request = LaunchpadTestRequest(form=form)
    >>> license_widget = LicenseWidget(licenses_field, vtype, request)

    >>> sorted(license_widget.getInputValue())
    [<DBItem License.GNU_GPL_V2, (130) GNU GPL v2>,
     <DBItem License.GNU_LGPL_V2_1, (150) GNU LGPL v2.1>]

    >>> print_checked_items(license_widget())
    ( ) ACADEMIC
    ...
    (*) GNU_GPL_V2
    ( ) GNU_GPL_V3
    (*) GNU_LGPL_V2_1
    ( ) GNU_LGPL_V3
    ...

There are three Creative Commons licenses.

    >>> form['field.licenses'] = []
    >>> request = LaunchpadTestRequest(form=form)
    >>> license_widget = LicenseWidget(licenses_field, vtype, request)

    >>> print_checked_items(license_widget())
    ( ) ACADEMIC
    ...
    ( ) CC_BY
    ( ) CC_BY_SA
    ( ) CC_0
    ...

Any of the three Creative Commons licenses can be selected.

    >>> form['field.licenses'] = ['CC_BY', 'CC_BY_SA', 'CC_0']
    >>> request = LaunchpadTestRequest(form=form)
    >>> license_widget = LicenseWidget(licenses_field, vtype, request)

    >>> print_checked_items(license_widget())
    ( ) ACADEMIC
    ...
    (*) CC_BY
    (*) CC_BY_SA
    (*) CC_0
    ...
