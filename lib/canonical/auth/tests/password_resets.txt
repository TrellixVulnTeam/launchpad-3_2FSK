Password Resets
===============

A PasswordResets object manages requests to reset password .
In order to reset their password a user must go to a very
long random url. This url is sent to them by email and will 
work for only a limited time after it is generated.

A PasswordResets object is basicly a collection of records
(long url, Person.id, when created)

Before we start we need to set some things up.

    >>> from zope.app.tests import ztapi
    >>> from zope.interface import implements
    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> from zope.app.tests.placelesssetup import setUp, tearDown
    >>> setUp()
    
    >>> class StubPerson:
    ...     def __init__(self, id):
    ...         self.id = id
    ...
    >>> class StubPersonSet:
    ...     implements(IPersonSet)
    ...     def __init__(self):
    ...         self.persons = {}
    ...     def __getitem__(self, person_id):
    ...         return self.persons[person_id]
    ...     def __setitem__(self, person_id, person):
    ...         self.persons[person_id] = person
    ...
    >>> personset = StubPersonSet()
    >>> ztapi.provideUtility(IPersonSet, personset)
    
       
We need to ask for a new record for a person and this returns
a long url.

    >>> from canonical.auth import PasswordResets

    >>> resets = PasswordResets()
    >>> person11 = StubPerson(11)
    >>> personset[11] = person11
    >>> person12 = StubPerson(12)
    >>> personset[12] = person12
    >>> from datetime import datetime
    >>> when_created = datetime.utcnow()
    >>> long_url11 = resets.newURL(person11)
    >>> long_url12 = resets.newURL(person12)
    >>> len(long_url11)
    40

We need to get the person if we know the long_url.

    >>> resets.getPerson(long_url11).id
    11
    >>> resets.getPerson(long_url12).id
    12

A URL is valid only for a certain amount of time.
This is set in PasswordResets.lifetime.

    >>> from datetime import timedelta
    >>> isinstance(resets.lifetime, timedelta)
    True

We have added an optional `_currenttime` argument to getPerson
so that we can test it reliably.

    >>> resets.getPerson(long_url11, _currenttime=datetime.utcnow()).id
    11

If the current time is after the time we created the URL plus the lifetime,
then we cannot get the person, as the URL will have expired.  This raises
a PasswordResetExpired exception.  Otherwise, the we can get the Person.

    >>> toolate = when_created + resets.lifetime + timedelta(minutes=1)
    >>> resets.getPerson(long_url11, _currenttime=toolate)
    Traceback (most recent call last):
    ...
    PasswordResetsExpired

    >>> earlyenough = when_created + resets.lifetime - timedelta(minutes=1)

We must check that the lifetime is longer than one minute, so that the
"earlyenough" time will be within acceptable bounds.

    >>> resets.lifetime > timedelta(minutes=1)
    True
    >>> resets.getPerson(long_url11, _currenttime=earlyenough).id
    11

    >>> onthedot = when_created + resets.lifetime
    >>> resets.getPerson(long_url11, _currenttime=onthedot).id
    11

    >>> tooearly = when_created - timedelta(minutes=1)
    >>> resets.getPerson(long_url11, _currenttime=tooearly).id
    Traceback (most recent call last):
    ...
    AssertionError: Current time is before when the URL was created

If you ask for a URL that does not exist we get a KeyError

    >>> wrong_url = 'aaaaa'
    >>> resets.getPerson(wrong_url).id
    Traceback (most recent call last):
    ...
    KeyError: 'aaaaa'


Remember to clean up properly.

    >>> tearDown()
