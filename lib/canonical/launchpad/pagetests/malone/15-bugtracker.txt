First, let's make sure we can see the page listing all registered remote bug
trackers.

  >>> user_browser.open('http://launchpad.dev/malone/bugtrackers/')
  >>> user_browser.title
  'Bug trackers registered in Malone'

Now we are going to add a bug tracker. First, can we see the form?

  >>> user_browser.getLink('Register Bug Tracker').click()
  >>> user_browser.url
  'http://launchpad.dev/malone/bugtrackers/+newbugtracker'

  >>> user_browser.title
  'Register an external bug tracker'


Supported external bug tracker types include Bugzilla, Debbugs,
Roundup, SourceForge and Trac.  We don't provide all of these as
options to the user.  We don't provide Debbugs because the status
synchronisation script requires manual set up of a bug archive mirror,
and SourceForge because there is only one instance (SourceForge.net).

  >>> for control in user_browser.getControl('Bug Tracker Type').controls:
  ...     print control.optionValue
  Bugzilla
  Roundup
  Trac


We're not allowed to enter a name with uppercase characters, if we do so, we
get a nice error message.

  >>> user_browser.getControl('Name').value = 'TestTTrac'
  >>> user_browser.getControl('Bug Tracker Type').getControl('Trac').click()
  >>> user_browser.getControl('Title').value = 'Test Trac Tracker'
  >>> user_browser.getControl('Summary').value = 'This is a test TRAC tracker.'
  >>> url = 'http://trac.testing.org/tickets'
  >>> user_browser.getControl('Base URL').value = url
  >>> user_browser.getControl('Contact details').value = 'blah blah'
  >>> user_browser.getControl('Add').click()

  >>> from BeautifulSoup import BeautifulSoup
  >>> soup = BeautifulSoup(user_browser.contents)
  >>> print soup('div', {'class': 'message'})[0].renderContents()
  Invalid name 'TestTTrac'. Names must start with a letter or
  number and be lowercase. The characters <samp>+</samp>,
  <samp>-</samp> and <samp>.</samp> are also allowed after the
  first character.

Now, let's POST to the form. We expect to be redirected to the page for the
new tracker.

  >>> user_browser.getControl('Name').value = 'testtrac'
  >>> user_browser.getControl('Add').click()

  >>> user_browser.url
  'http://launchpad.dev/malone/bugtrackers/testtrac'

  >>> user_browser.title
  'Bug tracker \xe2\x80\x9cTest Trac Tracker\xe2\x80\x9d'

  >>> 'Test Trac Tracker' in user_browser.contents
  True
  >>> 'This is a test TRAC tracker.' in user_browser.contents
  True

  >>> from zope.component import getUtility
  >>> from canonical.lp.dbschema import BugTrackerType
  >>> from canonical.launchpad.interfaces import IBugTrackerSet
  >>> from canonical.launchpad.ftests import login, logout
  >>> login('test@canonical.com')
  >>> bugtrackerset = getUtility(IBugTrackerSet)
  >>> test_tracker = bugtrackerset.getByName('testtrac')
  >>> test_tracker.bugtrackertype == BugTrackerType.TRAC
  True

  >>> logout()

If we try to add a bugtracker with the same name of a existing one, we'll get
a nice error message.

  >>> user_browser.open('http://launchpad.dev/malone/bugtrackers/+newbugtracker')
 
  >>> user_browser.getControl('Name').value = 'testtrac'
  >>> user_browser.getControl('Bug Tracker Type').getControl('Trac').click()
  >>> user_browser.getControl('Title').value = 'Test Trac Tracker'
  >>> user_browser.getControl('Summary').value = 'This is a test TRAC tracker.'
  >>> url = 'http://trac.testing.org/tickets'
  >>> user_browser.getControl('Base URL').value = url
  >>> user_browser.getControl('Contact details').value = 'blah blah'
  >>> user_browser.getControl('Add').click()

  >>> message = 'testtrac is already in use by another bugtracker.'
  >>> message in user_browser.contents
  True

And lets see if we can edit the newly added bugtracker.

  >>> user_browser.open('http://launchpad.dev/malone/bugtrackers/testtrac/')
  >>> user_browser.getLink('Change Details').click()

  >>> user_browser.url
  'http://launchpad.dev/malone/bugtrackers/testtrac/+edit'

  >>> user_browser.title
  'Change details for \xe2\x80\x9cTest Trac Tracker\xe2\x80\x9d bug tracker'

  >>> user_browser.getControl('Title').value = 'A test Bugzilla Tracker'
  >>> user_browser.getControl('Bug Tracker Type').getControl('Bugzilla').click()
  >>> user_browser.getControl(
  ...     'Summary').value = 'This is used to be a test TRAC bug tracker.'
  >>> user_browser.getControl('Change').click()

  >>> user_browser.url
  'http://launchpad.dev/malone/bugtrackers/testtrac'

And now the test tracker should have been updated:

  >>> 'A test Bugzilla Tracker' in user_browser.contents
  True
  >>> 'This is used to be a test TRAC bug tracker.' in user_browser.contents
  True

  >>> login('test@canonical.com')
  >>> test_tracker = bugtrackerset.getByName('testtrac')
  >>> test_tracker.bugtrackertype == BugTrackerType.BUGZILLA
  True

  >>> logout()
