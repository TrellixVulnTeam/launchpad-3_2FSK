== Uploading translations ==

It's time to check the translation upload function.

   >>> import os.path
   >>> import transaction
   >>> from canonical.launchpad.database import SourcePackageRelease
   >>> from canonical.launchpad.interfaces import ITranslationImportQueue
   >>> from canonical.librarian.interfaces import ILibrarianClient
   >>> translation_import_queue = getUtility(ITranslationImportQueue)
   >>> client = getUtility(ILibrarianClient)

We need a test tarball uploaded into librarian to run this test.

   >>> import lp.translations
   >>> test_file_name = os.path.join(
   ...     os.path.dirname(lp.translations.__file__),
   ...     'doc/sourcepackagerelease-translations.tar.gz')
   >>> file = open(test_file_name)
   >>> size = len(file.read())
   >>> file.seek(0)
   >>> alias = client.addFile(
   ...     name='test.tar.gz',
   ...     size=size,
   ...     file=file,
   ...     contentType='application/x-gtar')

We need the commit to see the upload.

   >>> transaction.commit()

Now we do the upload. It's necessary to retrive an ILibraryFileAlias
correspondent to the alias (long) we already have.

   >>> from canonical.launchpad.interfaces import ILibraryFileAliasSet
   >>> file_alias = getUtility(ILibraryFileAliasSet)[alias]

   >>> spr_test = SourcePackageRelease.get(20)
   >>> spr_test.name
   u'pmount'

Before the final upload, the queue should be empty.

   >>> translation_import_queue.getAllEntries(
   ...     target=spr_test.sourcepackage).count()
   0

   >>> from canonical.launchpad.interfaces import ILaunchpadCelebrities
   >>> katie = getUtility(ILaunchpadCelebrities).katie
   >>> spr_test.attachTranslationFiles(file_alias, True, katie)

The commit is needed to see the new entries

   >>> transaction.commit()

And the queue should have a new entry.

   >>> for entry in translation_import_queue.getAllEntries(
   ...     target=spr_test.sourcepackage):
   ...     print entry.path, entry.importer.name
   something/en-US.xpi  katie
   po/es.po             katie

Now, we need to do the final import. It's done as a two steps procedure.

The first one, approves the import.

    >>> import subprocess, sys
    >>> process = subprocess.Popen([
    ...     sys.executable, 'cronscripts/rosetta-approve-imports.py'
    ...     ], stdin=subprocess.PIPE, stdout=subprocess.PIPE,
    ...     stderr=subprocess.STDOUT
    ...     )
    >>> (output, empty) = process.communicate()
    >>> print output
    INFO    creating lockfile
    INFO    The automatic approval system approved some entries.
    INFO    Removed 2 entries from the queue.
    <BLANKLINE>

The second one, executes the import.

    >>> import subprocess, sys
    >>> process = subprocess.Popen([
    ...     sys.executable, 'cronscripts/rosetta-poimport.py'
    ...     ], stdin=subprocess.PIPE, stdout=subprocess.PIPE,
    ...     stderr=subprocess.STDOUT
    ...     )
    >>> (output, empty) = process.communicate()
    >>> print output
    INFO    creating lockfile
    INFO    Importing: Spanish (es) translation of pmount in Ubuntu Hoary package "pmount"
    ...


=== Translation file names ===

A callback tells the translations import queue what to do with the
file names found in the tarball:

    >>> from lp.soyuz.model.sourcepackagerelease import (
    ...     _filter_ubuntu_translation_file)

Anything not in the "source/" directory is ignored.

    >>> print _filter_ubuntu_translation_file('foo/bar.po')
    None

Files in source/ have that directory stripped off.

    >>> print _filter_ubuntu_translation_file('source/bar.po')
    bar.po

Files in source/debian/po/* are ignored.  They are generally debconf
translations, unused in Ubuntu.

    >>> print _filter_ubuntu_translation_file('source/debian/po/bar.po')
    None


