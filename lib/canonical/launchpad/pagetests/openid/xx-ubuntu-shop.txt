The Ubuntu shop uses email address to log in as opposed to the more
unfriendly OpenID identity URLs.

We are going to fake a consumer for these examples. In order to ensure
that the consumer is being fed the correct replies, we register a view
that renders the parameters in the response in an easily testable format.

>>> from canonical.launchpad.ftests.openid import install_consumer
>>> install_consumer()


The shop gets the user's email address and calculates an identity URL.

>>> email_url = 'http://openid.launchpad.dev/+openid/+email/mark@hbd.com'


This URL redirects to a permanent identity URL using $Person.id as a key.
This permanent identity URL tells the consumer the actual identity URL to
authenticate against, using the OpenID delegation feature.

>>> anon_browser.open(email_url)
>>> print anon_browser.url
http://openid.launchpad.dev/+openid/+id/sabdfl_oid
>>> print anon_browser.contents
<...
<link rel="openid.server" href="http://openid.launchpad.dev/" />
...
>>> 'openid.delegate' in anon_browser.contents
False


The end result should be that the shop, after getting the email address
from the user, will obtain a permanent identity URL it can use as a key.
The shop will authenticate using the standard Lauchpad OpenID identity of
the form http://openid.launchpad.dev/~sabdfl so no new code is required
there.

>>> from canonical.launchpad.ftests.openid import uninstall_consumer
>>> uninstall_consumer()

