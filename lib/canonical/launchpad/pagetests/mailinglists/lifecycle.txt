= Mailing list lifecycle =

Every team in Launchpad can have a mailing list, and every mailing list is
associated with exactly one team.


== Hosted mailing list ==

Landscape Developers apply for a mailing list.

    >>> browser = setupBrowser(auth='Basic test@canonical.com:test')
    >>> browser.open('http://launchpad.dev/~landscape-developers')
    >>> browser.getLink('Configure mailing list').click()
    >>> browser.title
    'Configure mailing list'

    >>> browser.getControl('Apply for Mailing List').click()
    >>> browser.title
    'Landscape Developers in Launchpad'
    >>> for msg in get_feedback_messages(browser.contents):
    ...     print msg
    Mailing list requested and queued for approval.

Before the mailing list is created, the application must be approved.

    >>> browser.getLink('Configure mailing list').click()
    >>> print find_tag_by_id(browser.contents,
    ...                      'mailing_list_pending_approval').p.string
    The application for this team's mailing list is pending approval.

Once the mailing list is requested, the button to request its activation is
not shown anymore.

    >>> browser.getControl('Apply for Mailing List')
    Traceback (most recent call last):
    ...
    LookupError: ...

If the application is declined, the button won't be shown either. Instead,
we'll ask the user to contact a Launchpad administrator.

    # Approving mailing lists is not yet available through the web.
    >>> import transaction
    >>> from canonical.launchpad.ftests import login, logout
    >>> from canonical.launchpad.ftests import mailinglists_helper
    >>> from canonical.launchpad.interfaces import MailingListStatus
    >>> login('foo.bar@canonical.com')
    >>> mailinglists_helper.review_list(
    ...     'landscape-developers', MailingListStatus.DECLINED)
    <MailingList for team "landscape-developers"; status=DECLINED at ...>    
    >>> logout()
    >>> transaction.commit()

    >>> browser.reload()
    >>> browser.getControl('Apply for Mailing List')
    Traceback (most recent call last):
    ...
    LookupError: ...

    >>> def mailing_list_status_message(contents):
    ...     """Find out if a mailing list is in an unusual state."""
    ...     tag = find_tag_by_id(contents, 'mailing_list_status_message')
    ...     if tag:
    ...         return extract_text(tag.b)
    ...     else:
    ...         return ""

    >>> print mailing_list_status_message(browser.contents)
    The application for this team's mailing list has been declined. Please
    contact a Launchpad administrator for further assistance.

    # Here we manually change its status back to REGISTERED so that we can
    # move on testing as if it wasn't declined.  We don't use
    # getUtility(IMailingListSet) here because we want non-security-proxied
    # objects so that we can call syncUpdate on them and change their status
    # at our discretion.
    >>> from canonical.launchpad.database import MailingListSet
    >>> list_set = MailingListSet()
    >>> mailing_list = list_set.get('landscape-developers')
    >>> mailing_list.status = MailingListStatus.REGISTERED
    >>> transaction.commit()

If a team's mailing list is declined, there is no link to its non-existent
archive.

    >>> browser.open('http://launchpad.dev/~landscape-developers')
    >>> print find_tag_by_id(browser.contents, 'mailing-list-archive')
    None

Any time before the mailing list is approved, the application can be
cancelled (and then re-requested afterwards).

    >>> browser.getLink('Configure mailing list').click()
    >>> browser.getControl('Cancel Application').click()
    >>> browser.title
    'Landscape Developers in Launchpad'
    >>> for msg in get_feedback_messages(browser.contents):
    ...     print msg
    Mailing list application cancelled.
    >>> print list_set.get('landscape-developers')
    None
    >>> transaction.commit()

    >>> browser.getLink('Configure mailing list').click()
    >>> browser.getControl('Apply for Mailing List').click()
    >>> browser.title
    'Landscape Developers in Launchpad'

Just because a mailing list has been applied for does not mean it has an
archive link yet.

    >>> browser.open('http://launchpad.dev/~landscape-developers')
    >>> print find_tag_by_id(browser.contents, 'mailing-list-archive')
    None

A mailing list expert or Launchpad administrator can approve the application.

    >>> admin_browser.open('http://launchpad.dev/+mailinglists')
    >>> admin_browser.getControl(name='field.landscape-developers').value = [
    ...     'approve']
    >>> admin_browser.getControl('Submit').click()

Even after the list has been approved, it still cannot be used as the contact
address until Mailman has acknowledged successful creation.

    >>> browser.reload()
    >>> browser.getLink('Change contact address').click()
    >>> browser.getControl('The Launchpad mailing list')
    Traceback (most recent call last):
    ...
    LookupError: ...

    >>> browser.getLink('Configure mailing list').click()
    >>> browser.getControl('Apply for Mailing List')
    Traceback (most recent call last):
    ...
    LookupError: ...

    >>> print mailing_list_status_message(browser.contents)
    This team's mailing list will be available within a few minutes.

Mailman eventually wakes up and creates the mailing list.

    >>> def act():
    ...     login('foo.bar@canonical.com')
    ...     mailinglists_helper.mailman.act()
    ...     transaction.commit()
    ...     logout()
    >>> act()

Once the team's mailing list is active, there is a link to its archive.  This
is true even if no messages have yet been posted to the mailing list (since
the archiver will display an informative message to that effect).

    >>> browser.open('http://launchpad.dev/~landscape-developers')
    >>> print extract_link_from_tag(
    ...     find_tag_by_id(browser.contents, 'mailing-list-archive'))
    http://lists.launchpad.dev/landscape-developers

The archive link is clickable, though we won't click it because Mailman isn't
running.

    >>> browser.getLink('Mailing list archive')
    <Link text='Mailing list archive'
          url='http://lists.launchpad.dev/landscape-developers'>

The team's overview page also displays the posting address.

    >>> print extract_text(
    ...     find_tag_by_id(browser.contents, 'mailing-list-posting-address'))
    landscape-developers@lists.launchpad.dev

Now that the mailing list is active, it can be used as the team's contact
address.

    >>> browser.getLink('Configure mailing list').click()
    >>> browser.getControl('Apply for Mailing List')
    Traceback (most recent call last):
    ...
    LookupError: ...

    >>> print extract_text(find_tag_by_id(browser.contents,
    ...                                   'mailing_list_not_contact_address'))
    The mailing list is not set as the team contact address. You can
    set it.

    >>> browser.getLink('Change contact address').click()
    >>> browser.getControl('The Launchpad mailing list').selected = True
    >>> browser.getControl('Change').click()

    >>> browser.getLink('Change contact address').click()
    >>> browser.getControl(name='field.contact_method').displayValue
    ['\xa0The Launchpad mailing list for this team...]

The mailing list's configuration screen is also now available.

    >>> browser.getLink('Configure mailing list').url
    'http://launchpad.dev/~landscape-developers/+mailinglist'

Although of course, it's not available to someone with no permission to
manipulate the list.

    >>> user_browser.open('http://launchpad.dev/~landscape-developers')
    >>> user_browser.getLink('Configure mailing list')
    Traceback (most recent call last):
    ...
    LinkNotFoundError

When the mailing list is not the team's contact address, the mailing
list configuration screen displays a message to this effect.

    >>> browser.getControl('Each member individually').selected = True
    >>> browser.getControl('Change').click()

    >>> browser.getLink('Configure mailing list').click()
    >>> print extract_text(find_tag_by_id(browser.contents,
    ...                                   'mailing_list_not_contact_address'))
    The mailing list is not set as the team contact address. You can
    set it.

The message contains a link to the contact address screen.

    >>> browser.getLink('set it').click()
    >>> browser.getControl('The Launchpad mailing list').selected = True
    >>> browser.getControl('Change').click()
    >>> browser.title
    'Landscape Developers in Launchpad'

When the mailing list is the team's contact address, the message does
not show up.

    >>> browser.getLink('Configure mailing list').click()
    >>> find_tag_by_id(browser.contents,
    ...                'mailing_list_not_contact_address') is None
    True

The contact address is now set to the mailing list address.

    >>> browser.getLink('Change contact address').click()
    >>> browser.getControl(name='field.contact_method').displayValue
    ['\xa0The Launchpad mailing list for this team -
      landscape-developers@lists.launchpad.dev']


== Deactivating and reactivating lists ==

An active mailing list can be deactivated. If the deactivated mailing
list was the team contact method, the contact method will be changed
to 'each user individually'.

    >>> browser.open('http://launchpad.dev/~landscape-developers/+mailinglist')
    >>> browser.getControl('Deactivate this Mailing List').click()
    >>> browser.getLink('Change contact address').click()
    >>> browser.getControl(name='field.contact_method').displayValue
    ['\xa0Each member individually']

    >>> act()
    >>> browser.open('http://launchpad.dev/~landscape-developers/+mailinglist')
    >>> print mailing_list_status_message(browser.contents)
    This team's mailing list has been deactivated.

A deactivated mailing list still has a link to its archive, because archives
are never deleted.

    >>> browser.open('http://launchpad.dev/~landscape-developers')
    >>> print extract_link_from_tag(
    ...     find_tag_by_id(browser.contents, 'mailing-list-archive'))
    http://lists.launchpad.dev/landscape-developers

An inactive mailing list can be reactivated.

    >>> browser.getLink('Configure mailing list').click()
    >>> browser.getControl('Reactivate this Mailing List').click()
    >>> mailing_list_status_message(browser.contents)
    ''
    >>> for msg in get_feedback_messages(browser.contents):
    ...     print msg
    The mailing list will be reactivated within a few minutes.
    >>> act()
    >>> transaction.commit()

    >>> browser.getLink('Configure mailing list').click()
    >>> mailing_list_status_message(browser.contents)
    ''

This does not restore the mailing list as the team's contact method:

    >>> browser.getLink('Change contact address').click()
    >>> browser.getControl(name='field.contact_method').displayValue
    ['\xa0Each member individually']

Of course, the reactivated list still has a link to its archive.

    >>> browser.open('http://launchpad.dev/~landscape-developers')
    >>> print extract_link_from_tag(
    ...     find_tag_by_id(browser.contents, 'mailing-list-archive'))
    http://lists.launchpad.dev/landscape-developers

The archive link is only available for public mailing lists as shown above,
and for private mailing lists for team members.

    >>> from canonical.launchpad.interfaces.person import PersonVisibility
    >>> login('foo.bar@canonical.com')
    >>> bassists = mailinglists_helper.new_team('bassists')
    >>> bassists.visibility = PersonVisibility.PRIVATE_MEMBERSHIP
    >>> bassists_list = mailinglists_helper.new_list_for_team(bassists)
    >>> logout()

The owner of the list can see archive link.

    >>> user_browser.open('http://launchpad.dev/~bassists')
    >>> print extract_link_from_tag(
    ...     find_tag_by_id(user_browser.contents, 'mailing-list-archive'))
    http://lists.launchpad.dev/bassists

Anonymous users cannot see the link.

    >>> anon_browser.open('http://launchpad.dev/~bassists')
    >>> print find_tag_by_id(anon_browser.contents, 'mailing-list-archive')
    None

Normal users who are not team members cannot see the link.

    >>> browser.open('http://launchpad.dev/~bassists')
    >>> print find_tag_by_id(browser.contents, 'mailing-list-archive')
    None

Members who are not owners can see the link.

    >>> salgado_browser = setupBrowser(
    ...     auth='Basic guilherme.salgado@canonical.com:zeca')
    >>> salgado_browser.open('http://launchpad.dev/~bassists')
    >>> print find_tag_by_id(salgado_browser.contents, 'mailing-list-archive')
    None

    >>> admin_browser.open('http://launchpad.dev/~bassists/+addmember')
    >>> admin_browser.getControl('New member').value = 'salgado'
    >>> admin_browser.getControl('Add Member').click()

    >>> salgado_browser.open('http://launchpad.dev/~bassists')
    >>> print extract_link_from_tag(
    ...     find_tag_by_id(salgado_browser.contents, 'mailing-list-archive'))
    http://lists.launchpad.dev/bassists


== Changing from a hosted ML to an external address ==

Once made active, hosted mailing lists have their posting address stored
in the EmailAddress table, and we don't want them to be deleted (to make
sure the address is reserved for the team which owns the ML) when a
team's contact address is changed from a hosted ML to an external
address.

    >>> mailing_list = list_set.get('landscape-developers')
    >>> from canonical.launchpad.database import EmailAddressSet
    >>> email_set = EmailAddressSet()
    >>> email_set.getByEmail(mailing_list.address)
    <EmailAddress at...

    >>> browser.open('http://launchpad.dev/~landscape-developers')
    >>> browser.getLink('Change contact address').click()
    >>> browser.getControl('The Launchpad mailing list').selected = True
    >>> browser.getControl('Change').click()
    >>> browser.getLink('Change contact address').click()
    >>> browser.getControl(name='field.contact_method').displayValue
    ['\xa0The Launchpad mailing list for this team...]

    >>> from canonical.launchpad.mail import stub
    >>> stub.test_emails = []
    >>> browser.getControl('Another e-mail address').selected = True
    >>> browser.getControl(
    ...     name='field.contact_address').value = 'bar@example.com'
    >>> browser.getControl('Change').click()
    >>> browser.title
    'Landscape Developers in Launchpad'
    >>> for msg in get_feedback_messages(browser.contents):
    ...     print msg
    A confirmation message has been sent to...
    >>> from_addr, to_addrs, raw_msg = stub.test_emails.pop()
    >>> stub.test_emails
    []
    >>> import email
    >>> msg = email.message_from_string(raw_msg)
    >>> msg['From']
    'Launchpad Email Validator <noreply@launchpad.net>'
    >>> msg['Subject']
    "Launchpad: Validate your team's contact email address"

    # Follow the token link, to confirm the new email address.
    >>> from canonical.launchpad.ftests.logintoken import (
    ...     get_token_url_from_email)
    >>> token_url = get_token_url_from_email(raw_msg)
    >>> browser.open(token_url)
    >>> browser.title
    'Confirm e-mail address'
    >>> browser.getControl('Continue').click()
    >>> browser.title
    'Landscape Developers in Launchpad'
    >>> for msg in get_feedback_messages(browser.contents):
    ...     print msg
    Email address successfully confirmed.

    >>> browser.getLink('Change contact address').click()
    >>> browser.getControl(name='field.contact_method').displayValue
    ['\xa0Another e-mail address']

The web UI will only display the team's contact address, but the
EmailAddress object for that team's mailing list will still be in the
database.

    >>> email_set.getByEmail(mailing_list.address)
    <EmailAddress at...
