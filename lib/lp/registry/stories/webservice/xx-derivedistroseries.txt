Derive Distributions
--------------------

Using the DistroSeries.deriveDistroSeries() function, we can call it with the
parent distroseries. We can call it with the distroseries already created,
or it can create it for the user.

Set Up
------

    >>> from lp.testing.sampledata import ADMIN_EMAIL
    >>> login(ADMIN_EMAIL)
    >>> soyuz = factory.makeTeam(name='soyuz-team')
    >>> parent = factory.makeDistroSeries()
    >>> child = factory.makeDistroSeries(name='child1', parent_series=parent)
    >>> other = factory.makeDistroSeries()
    >>> distribution = factory.makeDistribution(name='deribuntu', owner=soyuz)
    >>> version = "%s.0" % factory.getUniqueInteger()
    >>> logout()
    >>> from canonical.launchpad.testing.pages import webservice_for_person
    >>> from canonical.launchpad.webapp.interfaces import OAuthPermission
    >>> soyuz_webservice = webservice_for_person(
    ...     soyuz.teamowner, permission=OAuthPermission.WRITE_PUBLIC)

Calling
-------

We can't call .deriveDistroSeries() with a distroseries that isn't the
child's parent

    >>> series_url = '/%s/%s' % (parent.parent.name, parent.name)
    >>> other_series_url = '/%s/%s' % (
    ...    other.parent.name, other.name)
    >>> child_name = child.name
    >>> series = webservice.get(series_url).jsonBody()
    >>> other_series = webservice.get(other_series_url).jsonBody()
    >>> derived = soyuz_webservice.named_post(
    ...     other_series['self_link'], 'deriveDistroSeries', {},
    ...     name=child_name, rebuild=False)
    >>> print derived
    HTTP/1.1 400 Bad Request
    Status: 400 Bad Request
    ...
    <BLANKLINE>
    DistroSeries ... parent series isn't ...
    <BLANKLINE>
    ...

If we call it correctly, it works.

    >>> derived = soyuz_webservice.named_post(
    ...     series['self_link'], 'deriveDistroSeries', {},
    ...     name=child_name, rebuild=False)
    >>> print derived
    HTTP/1.1 200 Ok
    Status: 200 Ok
    ...
    <BLANKLINE>
    ...

If we call it with all of the arguments, it also works.

    >>> deribuntu = webservice.get('/deribuntu').jsonBody()
    >>> text = 'The Second Child'
    >>> derived = soyuz_webservice.named_post(
    ...     series['self_link'], 'deriveDistroSeries', {},
    ...     name='child2', displayname=text, title=text, summary=text,
    ...     description=text, version=version,
    ...     distribution=deribuntu['self_link'], architectures=('i386',),
    ...     packagesets=('test1',), rebuild=False)
    >>> print derived
    HTTP/1.1 200 Ok
    Status: 200 Ok
    ...
    <BLANKLINE>
    ...

And we can verify both jobs exists.

    >>> from zope.component import getUtility
    >>> from lp.soyuz.interfaces.distributionjob import (
    ...     IInitialiseDistroSeriesJobSource)
    >>> login(ADMIN_EMAIL)
    >>> jobs = sorted(
    ...     getUtility(IInitialiseDistroSeriesJobSource).iterReady(),
    ...     key=lambda x: x.distroseries.name)
    >>> for job in jobs:
    ...     print job.distroseries.name
    child1
    child2
