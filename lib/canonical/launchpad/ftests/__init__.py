import os

import canonical.launchpad
from canonical.launchpad.ftests._launchpadformharness import (
    LaunchpadFormHarness)
from canonical.launchpad.ftests._login import *
from canonical.launchpad.ftests._sqlobject import syncUpdate
from canonical.launchpad.ftests._tales import test_tales
from canonical.launchpad.ftests.keys_for_tests import (
    import_public_test_keys, import_public_key, import_secret_test_key,
    decrypt_content)


def set_branding(icon=True, logo=True, mugshot=True):
    """Set the icon, logo and mugshot fields on the given browser instance.

    Setting any of the parameters to False will NOT set that particular
    item. This allows us to use the function to test branding on IPerson and
    ISprint which do not allow the setting of custom icons.

    This function expects that the given browser instance contains both
    field.icon, field.logo and field.mugshot fields, as generated by an
    ImageChangeWidget.
    """
    # make sure we have relevant-sized files handy
    icon = os.path.join(
      os.path.dirname(canonical.launchpad.__file__),
      'images/nyet-icon.png')
    logo = os.path.join(
      os.path.dirname(canonical.launchpad.__file__),
      'images/nyet-logo.png')
    mugshot = os.path.join(
      os.path.dirname(canonical.launchpad.__file__),
      'images/nyet-mugshot.png')
    # set each of the branding elements in turn, if requested
    if icon:
        browser.getControl(name='field.icon.action').value = ['change']
        browser.getControl(name='field.icon.image').add_file(
          open(icon), 'image/png', 'icon.png')
    if logo:
        browser.getControl(name='field.logo.action').value = ['change']
        browser.getControl(name='field.logo.image').add_file(
          open(logo), 'image/png', 'logo.png')
    if mugshot:
        browser.getControl(name='field.mugshot.action').value = ['change']
        browser.getControl(name='field.mugshot.image').add_file(
          open(mugshot), 'image/png', 'mugshot.png')


