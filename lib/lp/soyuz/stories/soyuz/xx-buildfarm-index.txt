= BuildFarm page =

The BuildFarm page is accessible from the root page, although we don't
link to it yet because we are not yet sure of the benefits of doing
this, since the audience of this page is still restricted.

    >>> anon_browser.open('http://launchpad.dev/+builds')

The BuildFarm contains a list of all builders registered in Launchpad
ordered by architecture and a short summary about what they are
processing. Please note that the builder's manual/automatic status is
shown in a separate column and all in upper case letters.

    >>> print extract_text(find_main_content(anon_browser.contents))
    Launchpad build machines
    PPA build machines
    386  0 builds waiting in queue
    frog   AUTO    Disabled
    Official distribution build machines
    386  1 builds waiting in queue
    bob    AUTO    Disabled
    Generated at ...

As we can see, this page also presents the number of builds waiting
in queue for each supported architecture on each separated build-farm
we have, 'ppa' and 'other' (PRIMARY and PARTNER).

    >>> def print_depth(contents):
    ...     depths = find_tags_by_class(contents, 'highlighted')
    ...     for depth in depths:
    ...         print extract_text(depth)

    >>> print_depth(anon_browser.contents)
    386     0 builds waiting in queue
    386     1 builds waiting in queue

In order to test the 'ppa' build queue depth portlet we will retry
a failed build in Celso's PPA.

    >>> from zope.component import getUtility
    >>> from canonical.database.sqlbase import flush_database_updates
    >>> from lp.soyuz.interfaces.build import BuildStatus
    >>> from lp.registry.interfaces.person import IPersonSet
    >>> from canonical.launchpad.ftests import login, logout

    >>> login('foo.bar@canonical.com')

    >>> cprov = getUtility(IPersonSet).getByName('cprov')
    >>> failed_build = cprov.archive.getBuildRecords(
    ...     build_state=BuildStatus.FAILEDTOBUILD)[0]
    >>> unused = failed_build.retry()

    >>> flush_database_updates()
    >>> logout()

Now we can see the populated section for the ppa build-farm,
exposing one pending build record. The 'other' is still present.

    >>> anon_browser.reload()
    >>> print_depth(anon_browser.contents)
    386     1 builds waiting in queue
    386     1 builds waiting in queue

If the archive for the build does not require virtual builders, then
the job will appear in bob's queue (a non-virtual builder):

    >>> login('foo.bar@canonical.com')
    >>> cprov.archive.require_virtualized = False
    >>> flush_database_updates()
    >>> logout()
    >>> anon_browser.reload()
    >>> print_depth(anon_browser.contents)
    386     0 builds waiting in queue
    386     2 builds waiting in queue

From this page, users with the appropriate permission can register new
builders.

Anonymous users are not given the option to register a new build
and are not permitted if they go directly to the URL.

    >>> anon_browser.open("http://launchpad.dev/+builds/+index")
    >>> anon_browser.getLink("Register a new build machine")
    Traceback (most recent call last):
    ...
    LinkNotFoundError

    >>> anon_browser.open("http://launchpad.dev/+builds/+new")
    Traceback (most recent call last):
    ...
    Unauthorized: ..., 'launchpad.Admin')

Administrators can create new builders.

    >>> admin_browser.open("http://launchpad.dev/+builds/+index")

    >>> admin_browser.getLink("Register a new build machine").click()

    >>> print admin_browser.title
    Register a new build machine

Registering a new builder involves setting its name, title,
description and corresponding location.

    >>> admin_browser.getControl('Name').value = 'tubaina'
    >>> admin_browser.getControl('Title').value = 'Tubaina'
    >>> admin_browser.getControl('Description').value = 'Bogus'
    >>> admin_browser.getControl(
    ...     'URL').value = 'http://tubaina.buildd'

Additionaly, the administrator can select the processor corresponding
to the builder or simply proceed with the default (i386).

    >>> admin_browser.getControl(name='field.processor').displayOptions
    ['Intel 386', 'AMD 64bit', 'HPPA Processor']
    >>> admin_browser.getControl(name='field.processor').displayValue
    ['Intel 386']

By default, builders are created as 'active', although the
administrator can change this value during creation time.

    >>> print admin_browser.getControl('Active').selected
    True
    >>> admin_browser.getControl('Active').selected = False

Builder as created as 'non-virtual' by default, but the administrator
can also modify that while creating a builder.

    >>> print admin_browser.getControl('Virtualized').selected
    False
    >>> admin_browser.getControl('Virtual Machine Host').value
    ''

    >>> admin_browser.getControl('Virtualized').selected = True
    >>> admin_browser.getControl(
    ...     'Virtual Machine Host').value = 'tubaina-host.ppa'

Once the form is submitted the users will be redirected to the
just-created builder page.

    >>> admin_browser.getControl("Register builder").click()
    >>> print admin_browser.title
    Build machine Tubaina
