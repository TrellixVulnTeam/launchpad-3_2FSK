= Modifying DistroSeries =

Only users with administration rights are allowed to modify a
distroseries.

That can be done using the 'Change details' (+edit) and 'Administer'
(+admin) action menu items.

Anonymous or unprivileged access to these forms is denied, the action
item is not even presented.

    >>> anon_browser.open('http://launchpad.dev/ubuntu/warty')
    >>> anon_browser.getLink('Change details').click()
    Traceback (most recent call last):
    ...
    LinkNotFoundError

    >>> anon_browser.getLink("Administer").click()
    Traceback (most recent call last):
    ...
    LinkNotFoundError

    >>> user_browser.open('http://launchpad.dev/ubuntu/warty')
    >>> user_browser.getLink('Change details').click()
    Traceback (most recent call last):
    ...
    LinkNotFoundError

    >>> user_browser.getLink("Administer").click()
    Traceback (most recent call last):
    ...
    LinkNotFoundError


== Changing DistroSeries details ==

Foo Bar, a administrator, can see and access 'Change Details' form.

    >>> admin_browser.open('http://launchpad.dev/ubuntu/warty')
    >>> admin_browser.getLink('Change details').click()

    >>> print admin_browser.title
    Edit details of The Warty Warthog Release

    >>> print extract_text(find_main_content(admin_browser.contents))
    Change The Warty Warthog Release details
    ...

He can modify any presentation/infromational fields of the
distroseries in question.:

 * displayname;
 * title;
 * summary;
 * description

    >>> admin_browser.getControl("Display name").value = 'WartyII'
    >>> admin_browser.getControl("Title").value = 'The Warty Warthog II Release'
    >>> admin_browser.getControl("Summary").value = 'summary'
    >>> admin_browser.getControl("Description").value = 'description'

    >>> admin_browser.getControl("Change").click()

After submitting the form, Foo Bar is shown the distroseries overview
page. He can see that his changes were applied.

    >>> admin_browser.url
    'http://launchpad.dev/ubuntu/warty'

    >>> print admin_browser.title
    Ubuntu Linux 4.10 in Launchpad

    >>> print extract_text(find_main_content(admin_browser.contents))
    Your changes have been applied.
    WartyII
    summary
    description
    ...


== DistroSeries administration ==

Via the administration form, Foo Bar can change the following
information on a distroseries context:

 * 'name': the distroseries name (identifier);
 * version: the distroseries version (also a identifier);
 * 'changeslist': the email address to where the upload announcements
   will be sent;
 * 'status': the distroseries status;

Foo Bar updates the distroseries' name, version and changelist.

    >>> admin_browser.open('http://launchpad.dev/ubuntu/hoary')
    >>> admin_browser.getLink("Administer").click()

    >>> admin_browser.getControl(name="field.name").value = 'boing'
    >>> admin_browser.getControl(name="field.version").value = '1.23'
    >>> admin_browser.getControl("Changeslist").value = 'foo@bar.com'

    >>> admin_browser.getControl("Change").click()

Foo Bar can see his changes on the distroseries overview page after
he submits them.

    >>> admin_browser.url
    'http://launchpad.dev/ubuntu/boing'

    >>> print admin_browser.title
    Ubuntu Linux 1.23 in Launchpad

    >>> for message in get_feedback_messages(admin_browser.contents):
    ...     print message
    Your changes have been applied.

Foo Bar can choose any of the available status for a unstable
distroseries.

    >>> admin_browser.getLink("Administer").click()

    >>> print admin_browser.getControl("Status").displayOptions
    ['Experimental', 'Active Development', 'Pre-release Freeze',
     'Future', 'Current Stable Release']

Foo bar flips the distroseries status from DEVELOPMENT to FROZEN,
EXPERIMENTAL or FUTURE and vice-versa as many time as necessary in the
distro-team workflow.

    >>> admin_browser.getControl(
    ...     "Status").displayValue = ['Pre-release Freeze']
    >>> admin_browser.getControl("Change").click()

When it's time, Foo Bar makes ubuntu/hoary the CURRENT ubuntu
distroseries.

    >>> admin_browser.getLink("Administer").click()
    >>> admin_browser.getControl(
    ...     "Status").displayValue = ['Current Stable Release']
    >>> admin_browser.getControl("Change").click()

Once it's released, the only other allowed status are SUPPORTED, OBSOLETE.

    >>> admin_browser.getLink("Administer").click()

    >>> print admin_browser.getControl("Status").displayOptions
    ['Current Stable Release', 'Supported', 'Obsolete']

    >>> admin_browser.getControl(
    ...     "Status").displayValue = ['Obsolete']
    >>> admin_browser.getControl("Change").click()

Foo Bar can move a OBSOLETE or SUPPORTED distroseries back to CURRENT
if necessary, but he cannot make the distroseries unstable again.

    >>> admin_browser.getLink("Administer").click()
    >>> admin_browser.getControl(
    ...     "Status").displayValue = ['Current Stable Release']
    >>> admin_browser.getControl("Change").click()

    >>> admin_browser.getLink("Administer").click()
    >>> print admin_browser.getControl("Status").displayValue
    ['Current Stable Release']
