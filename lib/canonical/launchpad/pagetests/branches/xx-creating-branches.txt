= Creating Branches =

== Finding product/+addbranch ==

We should be able to create a new branch from a product.

First, check that the +addbranch link is visible on product overview page and
the product code facet page.

  >>> user_browser.open('http://launchpad.dev/applets')
  >>> link = user_browser.getLink('Register branch')
  >>> print link.url
  http://launchpad.dev/applets/+addbranch

  >>> user_browser.getLink('Code').click()
  >>> print user_browser.url
  http://code.launchpad.dev/applets/

Let's make sure we can load the branch creation form on a product.

  >>> user_browser.getLink('Register branch').click()
  >>> print user_browser.url
  http://code.launchpad.dev/applets/+addbranch


== Adding a branch to a product ==

Now, post the branch creation form for the product.

  >>> user_browser.open('http://launchpad.dev/applets/+addbranch')

The specified URL has a trailing slash. In the next test, we will check that it
has been stripped.

  >>> user_browser.getControl('Branch URL').value = 'http://example.com/applets/main/'

The branch author should default to the current user. We clear it away so we
can test the context links on the new branch page.

  >>> user_browser.getControl('Author').value
  'no-priv'
  >>> user_browser.getControl('Author').value = ''

  >>> user_browser.getControl('Name').value = 'main'
  >>> user_browser.getControl('Title').value = 'Gnome Panel Applets Mainline'
  >>> user_browser.getControl(name='field.lifecycle_status').value = ['Development']
  >>> user_browser.getControl('Summary').value = 'Main branch of development for GNOME Panel Applets.'
  >>> user_browser.getControl('Add Branch').click()

Posting the form should succeed and redirect to the page of the newly
registered branch. We check that the final slash of the URL was stripped by
matching for the angle brackets of an enclosing tag.

  >>> user_browser.url
  'http://code.launchpad.dev/~no-priv/applets/main'
  >>> print user_browser.contents
  <!DOCTYPE...
  ...Gnome Panel Applets Mainline...
  ...>http://example.com/applets/main<...

This page includes a link to other branches associated
with that product, and a link to other branches maintained by that person.

  >>> user_browser.getLink('Other Gnome Applets branches').url
  'http://code.launchpad.dev/applets/+branches'
  >>> user_browser.getLink('Other branches registered (and not authored) by No Privileges Person').url
  'http://code.launchpad.dev/~no-priv/+registeredbranches'


== Finding person/+addbranch ==

We can also create a branch from a person's page. First, check that the
+addbranch link is present in the code facet of a person.

  >>> user_browser.open('http://launchpad.dev/~lifeless')
  >>> user_browser.getLink('Code').click()
  >>> print user_browser.getLink('Register branch').url
  http://code.launchpad.dev/~lifeless/+addbranch


== Adding a branch to a person ==

When creating a branch from a person, we have the option not to specify an
associated product. A branch with no associated product is called a "junk"
branch.

The specified URL has a trailing slash. We will check later that it has been
stripped.

  >>> user_browser.open('http://launchpad.dev/~lifeless/+addbranch')
  >>> user_browser.getControl('Name').value = 'pyresources'
  >>> user_browser.getControl('Title').value = 'Resource Management for Unit Tests'
  >>> user_browser.getControl('Branch URL').value = 'sftp://example.com/~lifeless/pyresources/'
  >>> user_browser.getControl('Summary').value = \
  ...     'A resource management framework for handling unit test fixtures in Python.'
  >>> user_browser.getControl('Add Branch').click()

Posting the form should succeed and redirect to the page of the newly created
junk branch. Because it has no product, it has no link to other product
branches.

  >>> user_browser.url
  'http://code.launchpad.dev/~no-priv/+junk/pyresources'
  >>> user_browser.getLink('Other branches authored by Robert Collins').url
  'http://code.launchpad.dev/~lifeless/+authoredbranches'

Also, the branch URL must appear with the trailing slash stripped.

  >>> user_browser.contents
  '...>sftp://example.com/~lifeless/pyresources<...'


== Conflict on unique name ==

Trying to register a branch with a product and that matches an existing branch
owned by the user would cause a database integrity error, because the triplet
owner-product-name is unique for all branches.

For this example, we will use ~name12/gnome-terminal/main. Check that it
already exists.

  >>> browser.addHeader('Authorization', 'Basic test@canonical.com:test')
  >>> browser.open('http://launchpad.dev/~name12/+branch/gnome-terminal/main')

Try a adding a conflicting branch from the product/+addbranch form.

  >>> browser.open('http://launchpad.dev/gnome-terminal/+addbranch')
  >>> browser.getControl('Branch URL').value = 'http://example.com/gnome-terminal/main-dup'

Trying to post the form without filling a name at all should not cause an oops!

  >>> browser.getControl('Add Branch').click()
  >>> browser.url
  'http://launchpad.dev/gnome-terminal/+addbranch'

Now, complete the form, but give a name that is alredy in use for that owner
and product.

  >>> browser.getControl('Name').value = 'main'
  >>> browser.getControl('Add Branch').click()

That should give us the form back with an error message.

  >>> browser.url
  'http://launchpad.dev/gnome-terminal/+addbranch'
  >>> from BeautifulSoup import BeautifulSoup
  >>> soup = BeautifulSoup(browser.contents)
  >>> print soup('div', {'class': 'message'})[0].renderContents()
  Name already in use. ...

Trying to add a conflicting branch from person/+addbranch should produce the
same error message.

  >>> browser.open('http://launchpad.dev/~name12/+addbranch')
  >>> browser.getControl('Branch URL').value = 'http://example.com/gnome-terminal/main-dup'
  >>> browser.getControl('Add Branch').click()
  >>> browser.url
  'http://launchpad.dev/%7Ename12/+addbranch'
  >>> browser.getControl('Name').value = 'main'
  >>> browser.getControl('Project').value = 'gnome-terminal'
  >>> browser.getControl('Add Branch').click()
  >>> browser.url
  'http://launchpad.dev/%7Ename12/+addbranch'
  >>> soup = BeautifulSoup(browser.contents)
  >>> print soup('div', {'class': 'message'})[0].renderContents()
  Name already in use. ...


If the user enters an invalid product name they will get an error
message about that, but no error about the branch name since we don't
know if it conflicts or not:

  >>> browser.getControl('Project').value = 'no-such-product'
  >>> browser.getControl('Add Branch').click()
  >>> browser.url
  'http://launchpad.dev/%7Ename12/+addbranch'
  >>> soup = BeautifulSoup(browser.contents)
  >>> print soup('div', {'class': 'message'})[0].renderContents()
  Invalid value

== Checking URLs ==

URL validation should check that the entered URL is not the root of a site.

  >>> user_browser.open('http://code.launchpad.dev/firefox')
  >>> user_browser.getLink('Register branch').click()
  >>> user_browser.getControl('Branch URL').value = 'http://example.com'
  >>> user_browser.getControl('Name').value = 'unique-name'
  >>> user_browser.getControl('Add Branch').click()
  >>> messages = find_tags_by_class(user_browser.contents, 'message')
  >>> for element in messages:
  ...     print element.renderContents()
  There is 1 error.
  URLs for branches cannot point to the root of a site.


URL validation should check that the entered URL is not from Launchpad.

  >>> user_browser.open('http://code.launchpad.dev/firefox')
  >>> user_browser.getLink('Register branch').click()
  >>> user_browser.getControl('Branch URL').value = 'http://code.launchpad.dev/~testuser/'
  >>> user_browser.getControl('Name').value = 'unique-name'
  >>> user_browser.getControl('Add Branch').click()
  >>> messages = find_tags_by_class(user_browser.contents, 'message')
  >>> for element in messages:
  ...     print element.renderContents()
  There is 1 error.
  Don't manually register a bzr branch on <code>code.launchpad.dev</code>...


== Attempting to create a branch in a forbidden project ==

The branch visibility policy for a product may specify that certain
groups of people cannot create branches.  An example of this in the
sample data is the landscape project.  Only landscape developers can
create branches for landscape.

XXX: thumper 2007-06-12
Following the current indentation of the doctest.  Given the discussions
on the launchpad mailing list, the indentation guidelines may change.

When registering a branch with the product in context, there is no
product widget, so errors are set at the page level.

  >>> user_browser.open('http://code.launchpad.dev/landscape')
  >>> user_browser.getLink('Register branch').click()
  >>> user_browser.getControl('Branch URL').value = 'http://foo.com/bar'
  >>> user_browser.getControl('Name').value = 'landscape1'
  >>> user_browser.getControl('Add Branch').click()
  >>> messages = find_tags_by_class(user_browser.contents, 'message')
  >>> for element in messages:
  ...     print element.renderContents()
  There is 1 error.
  You are not allowed to create branches in The Landscape Project.

When registering the branch from the person context, there is a
product widget, so the error is associated with the product widget.

  >>> user_browser.open('http://code.launchpad.dev/~no-priv')
  >>> user_browser.getLink('Register branch').click()
  >>> user_browser.getControl('Project').value = 'landscape'
  >>> user_browser.getControl('Branch URL').value = 'http://foo.com/bar'
  >>> user_browser.getControl('Name').value = 'landscape1'
  >>> user_browser.getControl('Add Branch').click()
  >>> messages = find_tags_by_class(user_browser.contents, 'message')
  >>> for element in messages:
  ...     print element.renderContents()
  There is 1 error.
  You are not allowed to create branches in The Landscape Project.
  >>> parent = messages[1].findParent()
  >>> print parent.div.input['id']
  field.product
