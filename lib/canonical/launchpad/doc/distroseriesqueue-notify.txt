= Queue Notify =

PackageUpload has a notify() method to send emails.
We need to be logged into the security model in order to get any further.

  >>> login('foo.bar@canonical.com')

Get a packageupload object for netapplet, which has a relatively intact
set of supporting sample data.  It has rows in distribution, distroseries, 
sourcepackagerelease, person and a librarian entry for the changes file 
which are all needed for successful operation of notify().

  >>> from canonical.launchpad.interfaces import IPackageUploadSet
  >>> netapplet_upload = getUtility(IPackageUploadSet)[3]
  >>> print netapplet_upload.displayname
  netapplet

Set up some library files for the netapplet source package.  These are not
already present in the sample data.

  >>> from canonical.launchpad.interfaces import ILibraryFileAliasSet
  >>> from canonical.archiveuploader.tests import datadir, mock_logger
  >>> import os
  >>> netapplet_spr = netapplet_upload.sources[0].sourcepackagerelease
  >>> librarian = getUtility(ILibraryFileAliasSet)
  >>> files = ['netapplet_1.0-1.dsc', 'netapplet_1.0.orig.tar.gz',
  ...     'netapplet_1.0-1.diff.gz']
  >>> for file in files:
  ...     filepath = datadir('suite/netapplet_1.0-1/%s' % file)
  ...     fileobj = open(filepath, 'rb')
  ...     filesize = os.stat(filepath).st_size
  ...     lfa = librarian.create(file, filesize, fileobj, 'dummytype')
  ...     sprf = netapplet_spr.addFile(lfa)
  ...     fileobj.close()

The notify() method generates one email here on this unsigned package.  It
requires an announcement list email address, a "changes_file_object" that is
just an open file object for the original changes file, and a special
logger object that will extract tracebacks for the purposes of this doctest.

  >>> changes_file_path = datadir(
  ...     'suite/netapplet_1.0-1/netapplet_1.0-1_source.changes')
  >>> changes_file = open(changes_file_path,'r')
  >>> netapplet_upload.notify(
  ...     announce_list="announcelist@canonical.com", 
  ...     changes_file_object=changes_file, logger=mock_logger)
  DEBUG: Building recipients list.
  DEBUG: Changes file is unsigned, adding changer as recipient
  ...
  DEBUG: Sent a mail:
  ...
  DEBUG:     Recipients: Daniel Silverstone <daniel.silverstone@canonical.com>
  ...
  DEBUG: above if files already exist in other distroseries.
  ...
  DEBUG: signer of the above package.

Helper functions to examine emails that were sent:

  >>> import email
  >>> from canonical.launchpad.mail import stub
  >>> from canonical.launchpad.tests.mail_helpers import pop_notifications
  >>> def by_to_addrs(a, b):
  ...     return cmp(a[1], b[1])

There's only one email generated from the preceding upload:

  >>> [notification] = pop_notifications()

The mail headers contain our To: as set on the notify() call.  The
subject contains "Accepted", the package name, its version and whether it's
source or binary.

  >>> notification['To']
  'Daniel Silverstone <daniel.silverstone@canonical.com>'
  >>> notification['Subject']
  'netapplet-1.0.0.tar.gz is NEW'

The mail body contains a list of files that were accepted:

  >>> print notification.get_payload() # doctest: -NORMALIZE_WHITESPACE
  NEW: netapplet_1.0-1.dsc
  NEW: netapplet_1.0.orig.tar.gz
  NEW: netapplet_1.0-1.diff.gz
  <BLANKLINE>
  ...
  You may have gotten the distroseries wrong.  If so, you may get warnings
  above if files already exist in other distroseries.
  <BLANKLINE>
  -- 
  You are receiving this email because you are the uploader, maintainer or
  signer of the above package.
  <BLANKLINE>

Now we will process a signed package.  Signed packages will potentially have
a different recipient list to unsigned ones; recipients for signed package 
uploads can be the signer, the maintainer and the changer, where these people 
are different.  Unsigned packages only send notifications to the changer.

  >>> from canonical.launchpad.interfaces import IGPGKeySet
  >>> from zope.security.proxy import removeSecurityProxy
  >>> gpgkey = getUtility(IGPGKeySet).get(1)
  >>> removeSecurityProxy(netapplet_upload).signing_key = gpgkey

Now request the email:

  >>> changes_file_path = datadir(
  ...     'suite/netapplet_1.0-1-signed/netapplet_1.0-1_source.changes')
  >>> changes_file = open(changes_file_path,'r')
  >>> netapplet_upload.notify(
  ...     announce_list="announcelist@canonical.com", 
  ...     changes_file_object=changes_file, logger=mock_logger)
  DEBUG: Building recipients list.
  ...
  DEBUG: Sent a mail:
  ...
  DEBUG:     Recipients: Foo Bar <foo.bar@canonical.com>, Daniel Silverstone <daniel.silverstone@canonical.com>
  ...
  DEBUG: above if files already exist in other distroseries.
  ...
  DEBUG: signer of the above package.

Again, there is only one email:

  >>> [notification] = pop_notifications()

The mail headers are the same as before:

  >>> notification['To']
  'Foo Bar <foo.bar@canonical.com>,\n\tDaniel Silverstone <daniel.silverstone@canonical.com>'
  >>> notification['Subject']
  'netapplet-1.0.0.tar.gz is NEW'

The mail body contains the same list of files again:

  >>> print notification.get_payload() # doctest: -NORMALIZE_WHITESPACE
  NEW: netapplet_1.0-1.dsc
  NEW: netapplet_1.0.orig.tar.gz
  NEW: netapplet_1.0-1.diff.gz
  <BLANKLINE>
  ...
  You may have gotten the distroseries wrong.  If so, you may get warnings
  above if files already exist in other distroseries.
  <BLANKLINE>
  -- 
  You are receiving this email because you are the uploader, maintainer or
  signer of the above package.
  <BLANKLINE>


notify() will also work without passing the changes_file_object parameter
provided that everything is already committed to the database (which is not
the case when nascent upload runs).  This example demonstrates this usage:

  >>> from canonical.librarian.ftests.harness import (
  ...     fillLibrarianFile, cleanupLibrarianFiles)
  >>> changes_file = open(changes_file_path,"r")
  >>> fillLibrarianFile(1, content=changes_file.read())
  >>> changes_file.close()
  >>> netapplet_upload.notify(announce_list="announcelist@canonical.com", 
  ...     logger=mock_logger)
  DEBUG: Building recipients list.
  ...
  DEBUG: Sent a mail:
  ...
  DEBUG:     Recipients: Foo Bar <foo.bar@canonical.com>, Daniel Silverstone <daniel.silverstone@canonical.com>
  ...
  DEBUG: above if files already exist in other distroseries.
  ...
  DEBUG: signer of the above package.

Only one email is generated:

  >>> [notification] = pop_notifications()

The mail headers are the same as before:

  >>> notification['To']
  'Foo Bar <foo.bar@canonical.com>,\n\tDaniel Silverstone <daniel.silverstone@canonical.com>'
  >>> notification['Subject']
  'netapplet-1.0.0.tar.gz is NEW'

The mail body contains the same list of files again:

  >>> print notification.get_payload() # doctest: -NORMALIZE_WHITESPACE
  NEW: netapplet_1.0-1.dsc
  NEW: netapplet_1.0.orig.tar.gz
  NEW: netapplet_1.0-1.diff.gz
  <BLANKLINE>
  ...
  You may have gotten the distroseries wrong.  If so, you may get warnings
  above if files already exist in other distroseries.
  <BLANKLINE>
  -- 
  You are receiving this email because you are the uploader, maintainer or
  signer of the above package.
  <BLANKLINE>


notify() will also generate rejection notices if the upload failed.  The
summary_text argument is text that is appended to any auto-generated text for
the summary.  Rejections don't currently auto-generate anything.

  >>> netapplet_upload.setRejected()
  >>> netapplet_upload.notify(summary_text="Testing rejection message", 
  ...     logger=mock_logger)
  DEBUG: Building recipients list.
  ...
  DEBUG: Sending rejection email.
  ...
  DEBUG:     Subject: netapplet-1.0.0.tar.gz Rejected
  DEBUG:     Recipients: Foo Bar <foo.bar@canonical.com>, Daniel Silverstone <daniel.silverstone@canonical.com>
  DEBUG:     Body:
  DEBUG: Rejected:
  DEBUG: Testing rejection message
  ...
  DEBUG: If you don't understand why your files were rejected, or if the
  DEBUG: override file requires editing, reply to this email.
  ...
  DEBUG: signer of the above package.

Only one email is generated:

  >>> transaction.commit()
  >>> len(stub.test_emails)
  1

