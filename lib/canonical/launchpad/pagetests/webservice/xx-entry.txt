= Entries =

All entries in the Launchpad web service work pretty much the same
way. This document illustrates the general features of entries using
Launchpad people as examples.

== Reading ==

It's possible to get a JSON 'representation' of an entry by sending a
GET request to the entry's URL.

  >>> def get_person(person):
  ...     return webservice("""
  ... GET /people/%s HTTP/1.1
  ... Host: api.launchpad.dev
  ... """ % person)

Here we see that the user 'salgado' has a display name of 'Guilherme
Salgado'.

  >>> salgado = get_person('salgado').jsonBody()
  >>> salgado['displayname']
  u'Guilherme Salgado'


== Modification ==

It's possible to modify a person by sending to the server a document
asserting what the person should look like. The document may only
describe part of the person's new state (in which case the client
should use the PATCH HTTP method) [TODO leonardr 2008-03-10
api-base-modify-data-entry]: or it may describe the entire new state,
in which case the client should use PUT.)

  >>> import simplejson
  >>> def modify_person(person, representation):
  ...     "A helper function to send a PUT or PATCH request for a person."
  ...     return webservice("""
  ... %s /people/%s HTTP/1.1
  ... Host: api.launchpad.dev
  ... Content-type: application/json
  ... Authorization: Basic foo.bar@canonical.com:test
  ...
  ... %s
  ... """ % (method, person, simplejson.dumps(representation)))


Here we use the web service to change the user 'salgado' so that their
display name is in uppercase.

  >>> print modify_person('salgado', {'displayname' : 'GUILHERME SALGADO'},
  ...                     'PATCH')
  HTTP/1.1 200 Ok
  Content-Length: 0
  ...

  >>> salgado = get_person('salgado').jsonBody()
  >>> salgado['displayname']
  u'GUILHERME SALGADO'

The modification might cause the person's address to change. Here we
use the web service to change the person's name to 'salgado2'.

  >>> print modify_person('salgado', {'name' : 'salgado2'}, 'PATCH')
  HTTP/1.1 301 Moved Permanently
  ...
  Location: http://api.launchpad.dev/people/salgado2
  <BLANKLINE>

At this point we can no longer manipulate the 'salgado' Person by
sending HTTP requests to http://api.launchpad.dev/people/salgado,
because that Person now 'lives' at
http://api.launchpad.dev/people/salgado2. To change 'salgado2' back to
'salgado', we need to send a PATCH request to the new address.

  >>> print modify_person('salgado2', {'name' : 'salgado'}, 'PATCH')
  HTTP/1.1 301 Moved Permanently
  ...
  Location: http://api.launchpad.dev/people/salgado
  <BLANKLINE>

# [TODO leonardr 2008-03-10 modify-data-links]: A link between a
# person and a related object can be modified.

The PATCH HTTP method is useful for simple changes, but not all HTTP
clients support PATCH, and sometimes it's easier to GET a document,
modify it, and send it back. If you have the full document at hand,
you can use the PUT method.

We happen to have a full document from when we sent a GET request to
the 'salgado' Person. Modifying that document and PUTting it back is
less work than constructing a new document and sending it with PATCH.

  >>> salgado['displayname']
  u'GUILHERME SALGADO'

  >>> salgado['displayname'] = 'Guilherme Salgado'
  >>> print modify_person('salgado', salgado, 'PUT')
  HTTP/1.1 200 Ok
  ...

  >>> salgado = get_person('salgado').jsonBody()
  >>> salgado['displayname']
  u'Guilherme Salgado'

Because our patch format is the same as our representation format (a
JSON hash), any document that works with a PUT request will also work
with a PATCH request.

  >>> print modify_person('salgado', salgado, 'PATCH')
  HTTP/1.1 200 Ok
  ...


=== What you can't do ===

A document that would be acceptable as the payload of a PATCH request
might not be acceptable as the payload of a PUT request.

  >>> print modify_person('salgado', {'name' : 'salgado2'}, 'PUT')
  HTTP/1.1 400 Bad Request
  ...
  You didn't specify a value for the attribute 'displayname'.

A person's read-only attributes can't be modified.

  >>> print modify_person('salgado', {'datecreated' :
  ...                                u'2001-01-01T01:01:01+00:00'})
  HTTP/1.1 400 Bad Request
  Content-Length: 57
  Content-Type: text/plain;charset=utf-8
  <BLANKLINE>
  You tried to modify the read-only attribute 'datecreated'

You can send a document that includes a value for a read-only
attribute, but it has to be the same as the current value.

  >>> print modify_person('salgado', {'datecreated' : salgado['datecreated']})
  HTTP/1.1 200 Ok
  ...

You can't change the link to a person's associated collection.

  >>> print modify_person('salgado',
  ...                    {'team_memberships_collection_link' : 'dummy'})
  HTTP/1.1 400 Bad Request
  ...
  You tried to modify the collection link 'team_memberships_collection_link'

Again, you can send a document that includes a value for an associated
collection link; you just can't _change_ the value.

  >>> print modify_person('salgado',
  ...                    {'team_memberships_collection_link' :
  ...                     'http://api.launchpad.dev/people/salgado/team_memberships'})
  HTTP/1.1 200 Ok
  ...

You can't directly change a person's address.

  >>> print modify_person('salgado',
  ...                    {'self_link' : 'dummy'})
  HTTP/1.1 400 Bad Request
  ...
  You tried to modify the read-only attribute 'self_link'.

You can't refer to a link to an associated object or collection as
though it were the actual object:

  >>> print modify_person('salgado', {'team_memberships' : 'dummy'})
  HTTP/1.1 400 Bad Request
  ...
  You tried to modify the nonexistent attribute 'team_memberships'

  >>> print modify_person('landscape-developers', {'owner' : 'salgado'})
  HTTP/1.1 400 Bad Request
  ...
  You tried to modify the nonexistent attribute 'owner'

You can't set nonsensical values for attributes.

  >>> print modify_person('salgado',
  ...                    {'datecreated' : 'dummy'})
  HTTP/1.1 400 Bad Request
  ...
  You set the attribute 'datecreated' to a value that doesn't look
  like a date.

You can't set values that violate Launchpad's data integrity rules.

  >>> print modify_person('salgado',
  ...                    {'name' : 'sabdfl'})
  HTTP/1.1 400 Bad Request
  ...
  sabdfl is already in use by another person or team.

And of course you can't modify attributes that don't exist.

  >>> print modify_person('salgado', {'nonesuch' : 'dummy'})
  HTTP/1.1 400 Bad Request
  ...
  You tried to modify the nonexistent attribute 'nonesuch'

