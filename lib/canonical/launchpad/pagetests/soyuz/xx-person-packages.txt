= Person Packages =

All packages maintained or uploaded by a given person can be seen on that
person's +packages page, which is linked to from the person's home page.

    >>> browser.open("http://launchpad.dev/~name16/+packages")
    >>> browser.title
    'Packages maintained by Foo Bar'

name16, aka the esteemed Foo Bar, has 9 maintained packages in the sample
data.  The page lists columns of data, "Name", "Uploaded To" and "Version"
that link to a distributionsourcepackage, distroseriessourcepackage and
distrosourcepackagerelease respectively.

Following a link on any item in the name column will take us to a
distribution source package page.  We'll use "cnews" on the third
line here as it has working links in the sample data:

    >>> link = browser.getLink("cnews")
    >>> print link
    <Link text='cnews' url='http://launchpad.dev/ubuntu/+source/cnews'>
    >>> link.click()
    >>> browser.title
    'Source Package "cnews" in Ubuntu Linux'

Same process for the second column should take us to a distribution series 
source package page:

    >>> browser.open("http://launchpad.dev/~name16/+packages")
    >>> link = browser.getLink(url="/ubuntu/hoary/+source/cnews")
    >>> print link
    <Link text='Ubuntu Hoary' url='http://launchpad.dev/ubuntu/hoary/+source/cnews'>
    >>> link.click()
    >>> browser.title
    'The Hoary Hedgehog Release source packages'

Same again for the third column should take us to a distribution source 
package release page:

    >>> browser.open("http://launchpad.dev/~name16/+packages")
    >>> link = browser.getLink(url="/ubuntu/+source/cnews/cr.g7-37")
    >>> print link
    <Link text='cr.g7-37' url='http://launchpad.dev/ubuntu/+source/cnews/cr.g7-37'>
    >>> link.click()
    >>> browser.title
    'cnews cr.g7-37 (source) in Ubuntu'


== Private PPA packages ==

Packages listed in the PPA section of this page are filtered so that
if the user is not allowed to see a private package they are not present
in the list.  Private packages are defined as those which are only
published in a private archive; if they are published in a private
archive *and* a non-private archive, they are deemed to be non-private
because if a package is not exclusively in a private PPA it cannot be
really private if someone can see it somewhere else.  This situation is
going to be very rare, however it does cover one important scenario: the
embargoed archive implementation.  Here, private security uploads and
builds will take place in a private archive and once verified will be
simply copied across archives to the primary Ubuntu archive.  At that
point it makes no sense to keep the package private any more, because
it's available to anyone anyway.

Let's make a helper function to print the PPA packages from the page:

    >>> def print_ppa_rows(browser):
    ...     rows = find_tags_by_class(browser.contents, "ppa_row")
    ...     for row in rows:
    ...         print extract_text(row)

And another helper function to set the private flag on a PPA:

    >>> def set_private(name, private=True):
    ...     admin_browser.open("http://launchpad.dev/~%s/+archive" % (
    ...         name))
    ...     admin_browser.getLink("Administer archive").click()
    ...     admin_browser.getControl(name="field.private").value = private
    ...     admin_browser.getControl(name="field.buildd_secret").value = "x"
    ...     admin_browser.getControl("Save").click()

We will also amend some packages so that they belong to "cprov" and will
appear in his +packages page.  There are two "iceweasel" packages in the
sample data that will do nicely:

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.ftests import login, logout
    >>> from canonical.database.sqlbase import flush_database_updates
    >>> from canonical.launchpad.interfaces import (
    ...     IPersonSet, ISourcePackageNameSet)
    >>> from canonical.launchpad.database.sourcepackagerelease import (
    ...     SourcePackageRelease)
    >>> login("foo.bar@canonical.com")
    >>> iceweasel = getUtility(ISourcePackageNameSet)['iceweasel']
    >>> packages = SourcePackageRelease.selectBy(sourcepackagename=iceweasel)
    >>> packages.count()
    2
    >>> cprov = getUtility(IPersonSet).getByName('cprov')
    >>> for package in packages:
    ...     package.creator = cprov
    >>> flush_database_updates()
    >>> logout()

Make user_browser a known user that does not conflict with "no-priv":

    >>> user_browser = setupBrowser(auth='Basic test@canonical.com:test')

=== Cprov's +packages page ===

So let's look at cprov's +packages page which has two entries in the
PPA section:

    >>> user_browser.open("http://launchpad.dev/~cprov/+packages")
    >>> print_ppa_rows(user_browser)
    iceweasel   PPA for Mark Shuttleworth - Ubuntu Warty 1.0
        2006-04-11 None - -

Now, let's make the PPA for "No Privileges Person" private:

    >>> set_private("no-priv")

For unprivileged users, cprov's displayed PPA packages are now reduced
to the one in his own PPA because the other iceweasel is only published
in the newly-private PPA of the "no-priv" user.

The logged-in user's case:

    >>> user_browser.open("http://launchpad.dev/~cprov/+packages")
    >>> print_ppa_rows(user_browser)
    iceweasel   PPA for Mark Shuttleworth - Ubuntu Warty 1.0
        2006-04-11 None - -

The not logged-in (anonymous) user's case:

    >>> anon_browser.open("http://launchpad.dev/~cprov/+packages")
    >>> print_ppa_rows(anon_browser)
    iceweasel   PPA for Mark Shuttleworth - Ubuntu Warty 1.0
        2006-04-11 None - -

However no-priv himself and any Launchpad Administrator can still see
both packages:

    >>> nopriv_browser = setupBrowser(auth="Basic no-priv@canonical.com:test")
    >>> nopriv_browser.open("http://launchpad.dev/~cprov/+packages")
    >>> print_ppa_rows(nopriv_browser)
    iceweasel   PPA for Mark Shuttleworth - Ubuntu Warty 1.0
        2006-04-11 None - -

    >>> admin_browser.open("http://launchpad.dev/~cprov/+packages")
    >>> print_ppa_rows(admin_browser)
    iceweasel   PPA for Mark Shuttleworth - Ubuntu Warty 1.0
        2006-04-11 None - -

Let's make sabdfl's archive private and check the page again.

    >>> set_private("sabdfl")

    >>> user_browser.open("http://launchpad.dev/~cprov/+packages")
    >>> print_ppa_rows(user_browser)
    iceweasel   Private PPA for Mark Shuttleworth - Ubuntu Warty 1.0
        2006-04-11 None - -

    >>> anon_browser.open("http://launchpad.dev/~cprov/+packages")
    >>> print_ppa_rows(anon_browser)
    iceweasel   Private PPA for Mark Shuttleworth - Ubuntu Warty 1.0
        2006-04-11 None - -

Notice that this iceweasel package in sabdfl's PPA is still appearing
because it is also published in some non-private archives, which
override the private nature of sabdfl's archive.

The two other archives are cprov's PPA and the primary archive.  Let's
make cprov's archive private.

    >>> set_private("cprov")

It still shows up:

    >>> user_browser.open("http://launchpad.dev/~cprov/+packages")
    >>> print_ppa_rows(user_browser)
    iceweasel   Private PPA for Mark Shuttleworth - Ubuntu Warty 1.0
        2006-04-11 None - -

Now we'll unpublish it in the primary archive.

    >>> login("foo.bar@canonical.com")
    >>> from canonical.launchpad.interfaces import (
    ...     ArchivePurpose, IArchiveSet, IDistributionSet)
    >>> ubuntu = getUtility(IDistributionSet)['ubuntu']
    >>> primary = getUtility(IArchiveSet).getByDistroPurpose(ubuntu,
    ...     ArchivePurpose.PRIMARY)
    >>> [iceweasel_pub] = primary.getPublishedSources(
    ...     name='iceweasel', exact_match=True)
    >>> discard = iceweasel_pub.supersede()
    >>> flush_database_updates()
    >>> logout()

Now that the packages are not publicly published anywhere, +packages
will not show them.

    >>> user_browser.open("http://launchpad.dev/~cprov/+packages")
    >>> print_ppa_rows(user_browser)

    >>> anon_browser.open("http://launchpad.dev/~cprov/+packages")
    >>> print_ppa_rows(anon_browser)

However they will still be available to "no-priv" and administrators as
applicable:

    >>> nopriv_browser.open("http://launchpad.dev/~cprov/+packages")
    >>> print_ppa_rows(nopriv_browser)

    >>> admin_browser.open("http://launchpad.dev/~cprov/+packages")
    >>> print_ppa_rows(admin_browser)
    iceweasel   Private PPA for Mark Shuttleworth - Ubuntu Warty 1.0
        2006-04-11 None - -

== Packages deleted from a PPA ==

When a package is deleted from a PPA it should not appear in the
+packages list any more.

First list the packages in the PPA.

    >>> admin_browser.open("http://launchpad.dev/~cprov/+packages")
    >>> print_ppa_rows(admin_browser)
    iceweasel   Private PPA for Mark Shuttleworth - Ubuntu Warty 1.0
        2006-04-11 None - -

Then delete the 'iceweasel' package.

    >>> admin_browser.open("http://launchpad.dev/~sabdfl/+archive/+delete-packages")
    >>> admin_browser.getControl(
    ...    name='field.selected_sources').value = ['31']
    >>> admin_browser.getControl(
    ...     "Deletion comment").value = "Bug 184490"
    >>> admin_browser.getControl("Request Deletion").click()

    >>> messages = get_feedback_messages(admin_browser.contents)
    >>> for msg in messages:
    ...     print msg
    Source and binaries deleted by Foo Bar request:
    iceweasel 1.0 in breezy-autotest
    Deletion comment: Bug 184490

    >>> def print_ppa_packages(contents):
    ...     packages = find_tags_by_class(contents, 'ppa_package_row')
    ...     for pkg in packages:
    ...         print extract_text(pkg)
    ...     empty_section = find_tag_by_id(contents, 'empty-result')
    ...     if empty_section is not None:
    ...         print extract_text(empty_section)
    >>> print_ppa_packages(admin_browser.contents)

Now re-list the PPA's packages, 'iceweasel' was deleted above and should
not show again.

    >>> admin_browser.open("http://launchpad.dev/~cprov/+packages")
    >>> print_ppa_rows(admin_browser)
