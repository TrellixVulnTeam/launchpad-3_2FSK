= Archive files =

`IArchive` provides a method that looks up files involved in the context
archive, getFileByName()

    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> cprov = getUtility(IPersonSet).getByName('cprov')

The given filename is looked up in the context corresponding to its
extension:

 * Source files: '.orig.tar.gz', 'tar.gz', '.diff.gz' and '.dsc';
 * Binary files: '.deb' and '.udeb';
 * Source changesfile: '_source.changes';
 * Package diffs: '.diff.gz';

Any other extension will result in a `NotFoundError`.

    >>> cprov.archive.getFileByName('biscuit.cookie')
    Traceback (most recent call last):
    ...
    NotFoundError: 'biscuit.cookie'

Create a test source publication.

    >>> from canonical.launchpad.tests.test_publishing import (
    ...      SoyuzTestPublisher)

    >>> login('foo.bar@canonical.com')

    >>> test_publisher = SoyuzTestPublisher()
    >>> test_publisher.prepareBreezyAutotest()
    >>> test_publisher.addFakeChroots()
    >>> test_source = test_publisher.getPubSource(
    ...     archive=cprov.archive, sourcename='test-pkg',
    ...     version='1.0')

When the file exists, the corresponding `ILibraryFileAlias` is returned.

    >>> from canonical.launchpad.webapp.testing import verifyObject
    >>> from canonical.launchpad.interfaces.librarian import ILibraryFileAlias

    >>> result = cprov.archive.getFileByName('test-pkg_1.0.dsc')

    >>> verifyObject(ILibraryFileAlias, result)
    True

Otherwise a `NotFoundError` is raised.

    >>> cprov.archive.getFileByName('test-pkg_1.0.orig.tar.gz')
    Traceback (most recent call last):
    ...
    NotFoundError: 'test-pkg_1.0.orig.tar.gz'

Adding an original source tarball.

    >>> lost_orig_tar_gz = test_publisher.addMockFile(
    ...     'test-pkg_1.0.orig.tar.gz')

NotFoundError still being raised if the file exists but is not
attached to the IArchive context.

    >>> cprov.archive.getFileByName('test-pkg_1.0.orig.tar.gz')
    Traceback (most recent call last):
    ...
    NotFoundError: 'test-pkg_1.0.orig.tar.gz'

Attached a new file to Celso's PPA context.

    >>> orig_tar_gz = test_publisher.addMockFile(
    ...     'test-pkg_1.0.orig.tar.gz')
    >>> unused = test_source.sourcepackagerelease.addFile(orig_tar_gz)

The retrieved file is the one attached to Celso's PPA and not the old
one.

    >>> libraryfile = cprov.archive.getFileByName('test-pkg_1.0.orig.tar.gz')

    >>> libraryfile == lost_orig_tar_gz
    False

    >>> libraryfile == orig_tar_gz
    True

Adding and retrieving a source diff.

    >>> diff_gz = test_publisher.addMockFile('test-pkg_1.0.diff.gz')
    >>> unused = test_source.sourcepackagerelease.addFile(diff_gz)

    >>> cprov.archive.getFileByName('test-pkg_1.0.diff.gz') == diff_gz
    True

Adding and retrieving a binary 'deb'.

    >>> binary_pubs = test_publisher.getPubBinaries(
    ...     binaryname='test', pub_source=test_source)
    >>> deb = binary_pubs[0].binarypackagerelease.files[0].libraryfile

    >>> deb == cprov.archive.getFileByName('test_1.0_all.deb')
    True

Adding and retrieving a binary 'udeb'.

    >>> [build] = test_source.getBuilds()
    >>> binary = test_publisher.uploadBinaryForBuild(
    ...     build, binaryname='micro-test')
    >>> unused = test_publisher.publishBinaryInArchive(binary, cprov.archive)

    >>> from zope.security.proxy import removeSecurityProxy
    >>> bin_file = removeSecurityProxy(binary.files[0].libraryfile)
    >>> bin_file.filename = 'micro-test_1.0_all.udeb'

    >>> bin_file == cprov.archive.getFileByName('micro-test_1.0_all.udeb')
    True

Adding and retrieving a source changesfile.

    >>> from canonical.launchpad.interfaces.publishing import (
    ...     PackagePublishingPocket)
    >>> source_upload = test_source.distroseries.createQueueEntry(
    ...     pocket=PackagePublishingPocket.RELEASE,
    ...     changesfilename='test-pkg_1.0_source.changes',
    ...     changesfilecontent='Bogus',
    ...     archive=cprov.archive)
    >>> unused = source_upload.addSource(test_source.sourcepackagerelease)
    >>> source_upload.setDone()

    >>> cprov.archive.getFileByName('test-pkg_1.0_source.changes')
    <LibraryFileAlias ...>

Adding and retrieving a package-diff.

    >>> another_test_source = test_publisher.getPubSource(
    ...     archive=cprov.archive, sourcename='test-pkg',
    ...     version='1.1')

    >>> print another_test_source.sourcepackagerelease.package_diffs.count()
    0

    >>> package_diff  = test_source.sourcepackagerelease.requestDiffTo(
    ...     cprov, another_test_source.sourcepackagerelease)

    >>> print another_test_source.sourcepackagerelease.package_diffs.count()
    1

    >>> diff_name = 'test-pkg_1.0_1.1.diff.gz'
    >>> diff = test_publisher.addMockFile(diff_name)
    >>> package_diff.diff_content = diff

    >>> diff == cprov.archive.getFileByName(diff_name)
    True

Similarly, IBuild provide a getFileByName() method, which retuns one
of the following file type in its context.

 * Binary changesfile: '.changes';
 * Build logs: '.txt.gz';
 * Build upload logs: '_log.txt';

    >>> print build.title
    i386 build of test-pkg 1.0 in ubuntutest breezy-autotest RELEASE

Unsupported filename lookups also result in a `NotFoundError`.

    >>> build.getFileByName('biscuit.cookie')
    Traceback (most recent call last):
    ...
    NotFoundError: 'biscuit.cookie'

And unreachable files in `NotFoundError`.

    >>> build.getFileByName('boing.changes')
    Traceback (most recent call last):
    ...
    NotFoundError: 'boing.changes'

Adding and retrieving a binary changesfile.

    >>> binary_upload = test_source.distroseries.createQueueEntry(
    ...     pocket=PackagePublishingPocket.RELEASE,
    ...     changesfilename='test-pkg_1.0_all.changes',
    ...     changesfilecontent='Bogus',
    ...     archive=cprov.archive)

    >>> unused = binary_upload.addBuild(build)

    >>> binary_upload.changesfile == build.getFileByName(
    ...     'test-pkg_1.0_all.changes')
    True

Adding and retrieving a buildlog.

    >>> buildlog_name = (
    ...    'buildlog_ubuntu-breezy-autotest-i386.'
    ...    'test-pkg_1.0_FULLYBUILT.txt.gz')
    >>> buildlog = test_publisher.addMockFile(buildlog_name)
    >>> build.buildlog = buildlog

    >>> buildlog == build.getFileByName(buildlog_name)
    True

Adding and retrieving a upload_log.

    >>> upload_log_name = 'upload_%d_log.txt' % build.id
    >>> upload_log = test_publisher.addMockFile(upload_log_name)
    >>> build.upload_log = upload_log

    >>> upload_log == build.getFileByName(upload_log_name)
    True

