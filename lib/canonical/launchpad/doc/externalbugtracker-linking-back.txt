= Remote bugs linking back to Launchpad =

Some bug trackers support linking back to bugs in Launchpad. This way we
can tell external bug trackers that we're watching the bug, and make it
easier to users of the external bug tracker to get more information
about the bug.

    >>> from zope.interface import implements
    >>> from canonical.launchpad.ftests.externalbugtracker import (
    ...     TestExternalBugTracker)
    >>> from canonical.launchpad.interfaces.externalbugtracker import (
    ...     ISupportsBackLinking)

    >>> class BackLinkingExternalBugTracker(TestExternalBugTracker):
    ...     implements(ISupportsBackLinking)
    ...
    ...     def __init__(self, baseurl):
    ...         super(BackLinkingExternalBugTracker, self).__init__(baseurl)
    ...         self.last_launchpad_bug_id = None
    ...
    ...     def getLaunchpadBugId(self, remote_bug):
    ...         print "Getting Launchpad id for bug %s" % remote_bug
    ...         return self.last_launchpad_bug_id
    ...
    ...     def setLaunchpadBugId(self, remote_bug, launchpad_bug_id):
    ...         self.last_launchpad_bug_id = launchpad_bug_id
    ...         print "Setting Launchpad id for bug %s" % remote_bug

The methods are called by the BugWatchUpdater class:

    >>> from canonical.launchpad.testing.factory import LaunchpadObjectFactory
    >>> from canonical.testing import LaunchpadZopelessLayer
    >>> txn = LaunchpadZopelessLayer.txn

    >>> factory = LaunchpadObjectFactory()
    >>> LaunchpadZopelessLayer.switchDbUser('launchpad')

    >>> bug_watch = factory.makeBugWatch('42')
    >>> bug_watch_2 = factory.makeBugWatch('42', bug_watch.bugtracker)

    >>> txn.commit()
    >>> LaunchpadZopelessLayer.switchDbUser('checkwatches')

    >>> from canonical.launchpad.scripts.checkwatches import BugWatchUpdater
    >>> bug_watch_updater = BugWatchUpdater(txn)
    >>> external_bugtracker = BackLinkingExternalBugTracker(
    ...     'http://example.com/')

    >>> bug_watch_updater.updateBugWatches(external_bugtracker, [bug_watch])
    Getting Launchpad id for bug 42
    Setting Launchpad id for bug 42

    >>> external_bugtracker.last_launchpad_bug_id == bug_watch.bug.id
    True


== BugWatchUpdater.linkLaunchpadBug() ==

The BugWatchUpdater method that does the work of setting the Launchpad
bug link is linkLaunchpadBug(). This method first retrieves the
current Launchpad bug ID for the remote bug. If the remote bug is
already linked to a Launchpad bug other than the one that we're trying
to link it to, the BugWatchUpdater will check that the bug that is
already linked has a valid watch on the remote bug in question. If it
does, the link will remain unchanged. Otherwise it will be updated.

Bug 42 on the remote bug tracker is linked to using bug_watch.

    >>> external_bugtracker.last_launchpad_bug_id == bug_watch.bug.id
    True

Trying to link another bug to it will have no effect since the bug that
is currently linked has a valid bug watch. Only getLaunchpadBugId() will
be called on our BackLinkingExternalBugTracker.

    >>> bug_watch.bug.id == bug_watch_2.bug.id
    False

    >>> bug_watch_updater.linkLaunchpadBug(
    ...     external_bugtracker, bug_watch_2)
    Getting Launchpad id for bug 42

However, if we set the current Launchpad bug ID on our
BackLinkingExternalBugTracker to a Launchpad bug that doesn't link to
the remote bug, BugWatchUpdater.linkLaunchpadBug() will call
getLaunchpadBugId() and then, when it discovers that the current
Launchpad bug ID isn't valid, setLaunchpadBugId() to correct the error.

Bug 1 doesn't link to bug 42 on the remote bug tracker.

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.interfaces.bug import IBugSet
    >>> bug_1 = getUtility(IBugSet).get(1)
    >>> print bug_1.getBugWatch(bug_watch.bugtracker, bug_watch.remotebug)
    None

However, the remote bug currently thinks that Launchpad Bug 1 does in
fact link to it.

    >>> external_bugtracker.last_launchpad_bug_id = 1

Calling linkLaunchpadBug() with a bug watch that actually does link to
bug 42 will correct the error.

    >>> bug_watch_updater.linkLaunchpadBug(external_bugtracker, bug_watch)
    Getting Launchpad id for bug 42
    Setting Launchpad id for bug 42

