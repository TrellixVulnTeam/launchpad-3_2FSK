= The Mentoring System =

== Offers of Mentoring ==

Launchpad allows people to make an offer of mentoring for a bug or
specification. Here, Foo Bar will make an offer on a spec and a bug:

    >>> from canonical.launchpad.interfaces import IPersonSet, IBugSet
    >>> from lp.registry.interfaces.distribution import IDistributionSet
    >>> from canonical.launchpad.ftests import login, syncUpdate
    >>> distroset = getUtility(IDistributionSet)
    >>> personset = getUtility(IPersonSet)
    >>> bugset = getUtility(IBugSet)
    >>> foo_bar = personset.getByEmail('foo.bar@canonical.com')
    >>> mark = personset.getByName('mark')
    >>> lpteam = personset.getByName('launchpad')
    >>> kubuntu = distroset.getByName('kubuntu')
    >>> bug2 = bugset.get(2)
    >>> bug2.is_complete
    False
    >>> spec1 = kubuntu.getSpecification('cluster-installation')
    >>> spec1.is_complete
    False
    >>> login('foo.bar@canonical.com')
    >>> offer1 = bug2.offerMentoring(foo_bar, lpteam)
    >>> offer2 = spec1.offerMentoring(foo_bar, lpteam)

Now, it should be possible to see those offers on a variety of lists.

First, we look at foo_bar's offers:

    >>> for offer in foo_bar.mentoring_offers:
    ...     print offer.target.title
    Facilitate mass installs  of Ubuntu using Netboot configuration
    Blackhole Trash folder

Now, let's look at the list of offers associated with lpteam. For this we
use the team_mentorships attribute, because mentoring_offers would imply
offers made *by* the team, which we don't do. The team_memberships attribute
is for mentorships made by people specifically in support of new members
wanting to join that specific team:

    >>> for offer in lpteam.team_mentorships:
    ...     print offer.target.title
    Facilitate mass installs  of Ubuntu using Netboot configuration
    Blackhole Trash folder

And at the offers related to Bug #2:

    >>> for offer in bug2.mentoring_offers:
    ...     print offer.target.title
    Blackhole Trash folder

And for the specification concerned:

    >>> for offer in spec1.mentoring_offers:
    ...     print offer.target.title
    Facilitate mass installs  of Ubuntu using Netboot configuration

Now, Bug #2 is associated with both Ubuntu and Debian

    >>> ubuntu = distroset.getByName('ubuntu')
    >>> for offer in ubuntu.mentoring_offers:
    ...     print offer.target.title
    Blackhole Trash folder
    >>> debian = distroset.getByName('debian')
    >>> for offer in debian.mentoring_offers:
    ...     print offer.target.title
    Blackhole Trash folder

It is also associated with the ubuntu *upstream* (this is a weirdness in the
Launchpad sample data, we have an upstream product called Ubuntu).

    >>> from lp.registry.interfaces.product import IProductSet
    >>> productset = getUtility(IProductSet)
    >>> tomcat = productset.getByName('tomcat')
    >>> for offer in tomcat.mentoring_offers:
    ...     print offer.target.title
    Blackhole Trash folder

Now, it gets more interesting.

Let us add a INVALID bugtask for Bug #2 on the Firefox product.
So the offer of mentoring is NOT relevant to Firefox, and should not
show up there.

    >>> firefox = productset.getByName('firefox')
    >>> from canonical.launchpad.interfaces import (
    ...     BugTaskImportance, BugTaskStatus, IBugTaskSet)
    >>> bugtaskset = getUtility(IBugTaskSet)
    >>> ff_task = bugtaskset.createTask(
    ...     bug=bug2, product=firefox, owner=mark,
    ...     status=BugTaskStatus.INVALID,
    ...     importance=BugTaskImportance.MEDIUM)
    >>> syncUpdate(ff_task)
    >>> ff_task.product == firefox
    True
    >>> for task in bug2.bugtasks:
    ...     if task.product == firefox:
    ...         print 'Found firefox task with status', task.status.name
    Found firefox task with status INVALID

    >>> print firefox.mentoring_offers.count()
    0

We also can get lists of offers of mentoring associated with groups of
products (Project classes :-)). Tomcat is part of the Apache project, so:

    >>> from canonical.launchpad.interfaces import IProjectGroupSet
    >>> projectset = getUtility(IProjectGroupSet)
    >>> apache = projectset.getByName('apache')
    >>> for offer in apache.mentoring_offers:
    ...     print offer.target.title
    Blackhole Trash folder


== The Mentorship Manager ==

There is a utility which we can use to see all current mentorship offers
across the whole system.

    >>> from canonical.launchpad.interfaces import IMentoringOfferSet
    >>> mm = getUtility(IMentoringOfferSet)
    >>> print mm.mentoring_offers.count()
    2

== Mentoring lists do not include private items ==

When a bug is marked private, it drops off the mentoring lists.

   >>> bug2.private
   False
   >>> bug2.setPrivate(True, getUtility(ILaunchBag).user)
   True
   >>> syncUpdate(bug2)
   >>> bug2.private
   True

So, now that Bug #2 is private it should no longer appear in the list of
mentorships offered by foo_bar:

   >>> for offer in lpteam.team_mentorships:
   ...     print offer.target.title
   Facilitate mass installs  of Ubuntu using Netboot configuration

Let's make sure it is off all of the lists:

   >>> for offertarget in [foo_bar, apache, tomcat, debian, ubuntu, mm]:
   ...     for offer in offertarget.mentoring_offers:
   ...         if offer.target.title == 'Blackhole Trash folder':
   ...             print 'Failed! Private bug showed in listing.'


# NB these comments can be removed when we have private specs, which should
# drop off the lists too.

#And lets see if we can eliminate the spec by making that complete too.
#
#   >>> spec1.private
#   False
#   >>> spec1.private = True
#   >>> syncUpdate(spec1)
#   >>> spec1.private
#   True
#   >>> print foo_bar.mentoring_offers.count()
#   0

#And both offers should have disappeared from ALL the listings we looked at
#earlier:
#
#   >>> print lpteam.team_mentorships.count()
#   0
#   >>> print uproj.mentoring_offers.count()
#   0
#   >>> print ubuntu_prod.mentoring_offers.count()
#   0
#   >>> print debian.mentoring_offers.count()
#   0
#   >>> print ubuntu.mentoring_offers.count()
#   0

#The mentorship manager should also no longer show those items:
#
#   >>> print mm.mentoring_offers.count()
#   0


OK, let's mark the bug public again:

   >>> bug2.private
   True
   >>> bug2.setPrivate(False, getUtility(ILaunchBag).user)
   True
   >>> syncUpdate(bug2)
   >>> bug2.private
   False


== Mentoring lists include only incomplete items ==

When a spec or a bug is completed, it drops off the mentoring lists.

   >>> from canonical.launchpad.interfaces import (
   ...     BugTaskStatus, SpecificationImplementationStatus)
   >>> bug2.is_complete
   False
   >>> from canonical.database.sqlbase import flush_database_updates
   >>> for task in bug2.bugtasks:
   ...   if task.conjoined_master is None:
   ...     task.transitionToStatus(
   ...       BugTaskStatus.FIXRELEASED, getUtility(ILaunchBag).user)
   >>> flush_database_updates()
   >>> bug2.is_complete
   True

So, now that Bug #2 is "complete" it should no longer appear in the list of
mentorships offered by foo_bar:

   >>> for offer in foo_bar.mentoring_offers:
   ...     print offer.target.title
   Facilitate mass installs  of Ubuntu using Netboot configuration

And lets see if we can eliminate the spec by making that complete too.

   >>> spec1.is_complete
   False
   >>> spec1.implementation_status = SpecificationImplementationStatus.IMPLEMENTED
   >>> newstate = spec1.updateLifecycleStatus(foo_bar)
   >>> syncUpdate(spec1)
   >>> spec1.is_complete
   True
   >>> print foo_bar.mentoring_offers.count()
   0

And both offers should have disappeared from ALL the listings we looked at
earlier:

   >>> print lpteam.team_mentorships.count()
   0
   >>> print apache.mentoring_offers.count()
   0
   >>> print tomcat.mentoring_offers.count()
   0
   >>> print debian.mentoring_offers.count()
   0
   >>> print ubuntu.mentoring_offers.count()
   0

The mentorship manager should also no longer show those items:

   >>> print mm.mentoring_offers.count()
   0

However, the mentorship manager should show these as recent successful
mentorings:

   >>> for offer in mm.recent_completed_mentorships:
   ...     print offer.target.title
   Blackhole Trash folder
   Facilitate mass installs  of Ubuntu using Netboot configuration


== Checking if the person is a Mentor ==

Once an offer has been made, you can test to see if a person is a mentor for
a bug or a blueprint.

    >>> stevea = personset.getByName('stevea')
    >>> bug2.isMentor(stevea)
    False
    >>> bug2.isMentor(foo_bar)
    True
    >>> spec1.isMentor(stevea)
    False
    >>> bug2.isMentor(foo_bar)
    True

== Retracting mentorship offers ==

We can also retract offers of mentoring.

    >>> bug2.retractMentoring(foo_bar)
    >>> bug2.isMentor(foo_bar)
    False
    >>> spec1.retractMentoring(foo_bar)
    >>> spec1.isMentor(foo_bar)
    False

