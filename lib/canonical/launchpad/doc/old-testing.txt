Old Launchpad Test Harnesses
============================

Deprecated
----------

The code demonstrated in this doctest is being deprecated in favour of
Layers. However, not all functionality has yet been ported so this old
code needs to remain for a while longer.

Introduction
------------

There is a selection of test harnesses to chose from for writing Launchpad
functional tests. Although you could simply always use the most fully
featured, this is not recommended as it will needlessly slow things down
and hide errors (eg. if this object is supposed to be usable outside of
zope, we should not be testing it with the full Z3 functional test
harness).

canonical.functional.FunctionalTestCase
---------------------------------------

This is a customised zope3 FunctionalTestCase and should be used when you
simply need the zope3 utilities etc available.

PgTestSetup
-----------

PgTestSetup is used for tests that require access to a PostgreSQL backend.
For example, we would use this for testing SQLObject or our custom
extentions to it.

The class is defined in canonical.ftests.pgsql

>>> from canonical.ftests.pgsql import PgTestSetup

The setup procedure builds us a fresh, empty database

>>> fixture = PgTestSetup()
>>> fixture.setUp()

We can get connections to this database

>>> connection = fixture.connect()
>>> cursor = connection.cursor()
>>> cursor.execute("""CREATE TABLE Beer (
...     id serial PRIMARY KEY, name text, stamp timestamp without time zone
...     )""")
>>> cursor.execute("""INSERT INTO Beer(name, stamp) VALUES (
...     'Mountain Goat', '2005-12-29')""")

Note that the type conversion methods have been loaded (as implemented
by psycopgda), so our strings are Unicode and datetime instances returned.
Note that PostgreSQL versions prior to 8.1 called UTF-8 UNICODE.

>>> cursor.execute("SHOW client_encoding")
>>> cursor.fetchone()[0] in (u'UNICODE', u'UTF8')
True
>>> cursor.execute("SELECT name, stamp FROM Beer")
>>> tuple(cursor.fetchone())
(u'Mountain Goat', datetime.datetime(2005, 12, 29, 0, 0))

When we have finished, we need to call the tearDown method which closes
all outstanding connections and destroys the database

>>> fixture.tearDown()

Because the database has been destroyed, further tests will not be
affected.

>>> fixture.setUp()
>>> connection = fixture.connect()
>>> cursor = connection.cursor()
>>> cursor.execute("CREATE TABLE Beer (id serial PRIMARY KEY, name text)")
>>> fixture.tearDown()

We can also specify a different template to duplicate than the default
clean one (template1). For example, if you need a launchpad database
containing no data, you can use `launchpad_empty` as the template.

>>> fixture = PgTestSetup('launchpad_empty')
>>> fixture.setUp()
>>> connection = fixture.connect()
>>> cursor = connection.cursor()
>>> cursor.execute("SELECT COUNT(*) FROM Person")
>>> int(cursor.fetchone()[0])
0
>>> fixture.tearDown()

We can also specify the user that we connect as to avoid connecting as the
PostgreSQL default user.

>>> from canonical.config import config
>>> pgsetup = PgTestSetup(dbuser='statistician')
>>> connection = pgsetup.connect()
>>> cursor = connection.cursor()
>>> cursor.execute("SELECT current_user")
>>> cursor.fetchone()[0]
u'statistician'
>>> pgsetup.tearDown()


LaunchpadTestSetup
------------------

LaunchpadTestSetup is identical to PgTestSetup, except that it creates a
fresh copy of the Launchpad database filled with our sample data.

>>> from canonical.testing.layers import LaunchpadTestSetup
>>> fixture = LaunchpadTestSetup()
>>> fixture.setUp()
>>> connection = fixture.connect()
>>> cursor = connection.cursor()
>>> cursor.execute("SELECT displayname FROM person WHERE name='carlos'")
>>> cursor.fetchone()[0]
u'Carlos Perell\xf3 Mar\xedn'

By default, LaunchpadTestSetup connects as the 'launchpad' user:

>>> cursor.execute("SELECT current_user")
>>> cursor.fetchone()[0]
u'launchpad'

>>> fixture.tearDown()

You can connect as a different database user using the same mechanism
described above for PgTestSetup

>>> lpsetup = LaunchpadTestSetup()
>>> lpsetup.dbuser = 'statistician'
>>> lpsetup.setUp()
>>> connection = lpsetup.connect()
>>> cursor = connection.cursor()
>>> cursor.execute("SELECT current_user")
>>> cursor.fetchone()[0]
u'statistician'
>>> lpsetup.tearDown()


LibrarianTestSetup
------------------

Code that needs to access the Librarian can do so easily. Note that
LibrarianTestSetup requires the Launchpad database to be available, and
thus requires LaunchpadTestSetup or similar to be used in tandam.
You probably really want LaunchpadFunctionalLayer so you can access
the Librarian as a Utility.

>>> from canonical.librarian.testing.server import LibrarianTestSetup
>>> from canonical.launchpad.ftests import login, ANONYMOUS
>>> from zope.app import zapi
>>> from canonical.librarian.interfaces import ILibrarianClient
>>> from StringIO import StringIO

>>> librarian = LibrarianTestSetup()
>>> librarian.setUp()
>>> login(ANONYMOUS)

>>> some_content = StringIO()
>>> print >> some_content, 'Hi Mum\n'*100
>>> size = len(some_content.getvalue())
>>> some_content.seek(0)
>>> librarian_client = zapi.getUtility(ILibrarianClient)
>>> file_alias_id = librarian_client.addFile(
...     'hi.txt', size, some_content, 'text/plain')
>>> isinstance(file_alias_id, (int, long))
True

Note that you currently can't retrieve a file from the Librarian in
the same transaction it was added

>>> import transaction
>>> transaction.commit()
>>> url = librarian_client.getURLForAlias(file_alias_id)
>>> data = librarian_client.getFileByAlias(file_alias_id).read()
>>> data == some_content.getvalue()
True

>>> librarian.tearDown()

>>> from canonical.testing import reset_logging
>>> reset_logging()

