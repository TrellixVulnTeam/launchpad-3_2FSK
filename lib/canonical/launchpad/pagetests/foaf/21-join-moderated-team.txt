  Now, 'myemail' is a MODERATED team, and 'salgado' will join again.

  Workaround while https://launchpad.net/launchpad/+bug/39016 is not
  fixed.
  >>> from canonical.launchpad.mail import stub
  >>> stub.test_emails[:] = []

  >>> print http(r"""
  ... GET /~myemail/+join HTTP/1.1
  ... Authorization: Basic Z3VpbGhlcm1lLnNhbGdhZG9AY2Fub25pY2FsLmNvbTp6ZWNh
  ... """)
  HTTP/1.1 200 Ok
  ...
  ...Moderated Team...
  ...


  >>> print http(r"""
  ... POST /~myemail/+join HTTP/1.1
  ... Authorization: Basic Z3VpbGhlcm1lLnNhbGdhZG9AY2Fub25pY2FsLmNvbTp6ZWNh
  ... Content-Type: application/x-www-form-urlencoded
  ... 
  ... join=Join""")
  HTTP/1.1 303 See Other
  ...
  Location: ./
  ...
  ...informational message">Subscription request pending approval...
  ...


  >>> print http(r"""
  ... GET /~myemail/ HTTP/1.1
  ... Authorization: Basic Z3VpbGhlcm1lLnNhbGdhZG9AY2Fub25pY2FsLmNvbTp6ZWNh
  ... """)
  HTTP/1.1 200 Ok
  ...
  ...my own team...
  ...


  Let's see if the team owner received an email notification that there's a
  new member waiting for approval. (this notification is sent to all team
  administrators, but in this case we don't have team administrators)

  >>> from_addr, to_addrs, raw_msg = stub.test_emails.pop()
  >>> assert not stub.test_emails
  >>> to_addrs
  ['foo@baz.com']
  >>> 'Reply-To: guilherme.salgado@canonical.com' in raw_msg
  True


  Proposed Members are not shown as "real" team members by our API.

  >>> from canonical.launchpad.database import Person, TeamMembership
  >>> salgado = Person.byName('salgado')
  >>> team = Person.byName('myemail')
  >>> tm = TeamMembership.selectOneBy(personID=salgado.id, teamID=team.id)
  >>> tm.statusname
  'Proposed'
  >>> salgado.inTeam(team)
  False
