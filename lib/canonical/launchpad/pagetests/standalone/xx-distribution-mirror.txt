  First of all we'll create a new mirror for the Ubuntu distribution...

  >>> browser.addHeader('Authorization', 'Basic test@canonical.com:test')
  >>> browser.open('http://localhost:9000/distros/ubuntu/+newmirror')

  ...but every mirror must have at least one of HTTP, FTP or Rsync URL, and
  the form will raise an error message if this is not provided by the user.

  >>> browser.getControl(name='field.name').value = 'mymirror'
  >>> browser.getControl('Link Speed').value = ['1 Mbps']
  >>> browser.getControl('Location (Country)').value =  ['9']
  >>> browser.getControl('Content').value = ['Archive']
  >>> browser.getControl('Pulse Type').value = ['Push']
  >>> browser.getControl('Continue').click()

  >>> message = 'All mirrors require at least one URL (HTTP, FTP or Rsync)'
  >>> message in browser.contents
  True

  Also, any mirror with a pulse_type of PULL, must specify a pulse_source.

  >>> browser.getControl(name='field.name').value = 'mymirror'
  >>> browser.getControl('Link Speed').value = ['1 Mbps']
  >>> browser.getControl('Location (Country)').value =  ['9']
  >>> browser.getControl('Content').value = ['Archive']
  >>> browser.getControl('HTTP URL').value = 'http://my.mirror.com/pub'
  >>> browser.getControl('Pulse Type').value = ['Pull']
  >>> browser.getControl('Continue').click()

  >>> message = "You have choosen 'Pull' as the pulse type but have not"
  >>> message in browser.contents
  True

  Now we provide everything that is needed...

  >>> browser.getControl(name='field.name').value = 'mymirror'
  >>> browser.getControl('Link Speed').value = ['1 Mbps']
  >>> browser.getControl('Location (Country)').value =  ['9']
  >>> browser.getControl('Content').value = ['Archive']
  >>> browser.getControl('HTTP URL').value = 'http://my.mirror.com/pub'
  >>> browser.getControl('Pulse Type').value = ['Push']
  >>> browser.getControl('Continue').click()

  ...and the mirror is created just fine.

  >>> browser.url
  'http://localhost:9000/distros/ubuntu/+mirror/mymirror'

  >>> 'mirror "mymirror"' in browser.contents
  True
  >>> 'We have found no releases for any architectures' in browser.contents
  True
  >>> 'We have found no source releases on this mirror' in browser.contents
  True

  Now the mirror's owner mark it as enabled and as a candidate for being
  official.

  >>> browser.getLink('Edit Details').click()
  >>> browser.url
  'http://localhost:9000/distros/ubuntu/+mirror/mymirror/+edit'

  >>> browser.getControl('Enabled').selected = True
  >>> browser.getControl('Official Candidate').selected = True
  >>> browser.getControl('Change').click()

  >>> browser.url
  'http://localhost:9000/distros/ubuntu/+mirror/mymirror'


  But that's not enough to make a mirror official, as we can see in the
  details portlet.

  >>> '<b>Not Official</b>' in browser.contents
  True

  To make a mirror official, one has to go to the +admin page, and the mirror
  owner found out that, so he'll try to make his mirror official by manually
  entering the URL in his web browser, but he won't have access to that page.

  >>> browser.open(
  ...   'http://localhost:9000/distros/ubuntu/+mirror/mymirror/+admin')
  Traceback (most recent call last):
  ...
  Unauthorized...

  Now one of the mirror administrators goes and make this an official mirror.

  # XXX: matsubara 2006-05-18: We need to reset the Browser object to reset the
  # headers.
  # https://launchpad.net/products/launchpad/+bug/45226+

  >>> from zope.testbrowser import Browser
  >>> browser = Browser()
  >>> browser.handleErrors = False

  >>> browser.addHeader('Authorization', 'Basic mark@hbd.com:test')
  >>> browser.open(
  ...   'http://localhost:9000/distros/ubuntu/+mirror/mymirror/+admin')

  >>> browser.getControl('Official Approved').selected = True 
  >>> browser.getControl('Change').click()

  >>> browser.url
  'http://localhost:9000/distros/ubuntu/+mirror/mymirror'


  And in the mirror's main page we can now see that it's an official mirror.

  >>> '<b>Official</b>' in browser.contents
  True

