   Builder Classes
   ===============

Builder class represents the Buildd Slave entity, the test aim to
accomplish the requirements of
https://wiki.launchpad.canonical.com/BasicTestCoverage proposal.

Need auxiliar methods from zope toolchain:

 >>> from zope.interface.verify import verifyObject 
 >>> from zope.component import getUtility

Importing Builder content class and its interface:

 >>> from canonical.launchpad.database import Builder
 >>> from canonical.launchpad.interfaces import IBuilder

Get an instance of Builder from the current sampledata:

 >>> builder = Builder.get(1) 

test some attributes:

 >>> builder.id, builder.name, builder.status
 (1, u'bob', 'NOT OK : None')

Check if the instace coreesponds to the declared interface:

 >>> verifyObject(IBuilder, builder)
 True

lastBuilds() method returns the build history, atm there is no data 
available in the database, we can just test if the call doesn't fail.

 >>> builder.lastBuilds().count()
 0

Now perform the tests for the Builder ContentSet class, BuilderSet.

Check if it can be imported:

 >>> from canonical.launchpad.interfaces import IBuilderSet
 
Check we can use the set as a utility:

 >>> builderset = getUtility(IBuilderSet)

Check if the instance returned as utility corresponds to its
respective interface:

 >>> verifyObject(IBuilderSet, builderset)
 True

Check if the instance is iterable:

 >>> for b in builderset:
 ...     b.id
 1

Check if the __getitem__ method:
 
 >>> builderset['bob'].name
 u'bob'

Check now the specific method in the utility as new():

 >>> bnew = builderset.new(1, 'http://dummy.com:8221/', 'dummy', 
 ...	                   'Dummy Title', 'eh ?', 1)
 >>> bnew.name
 u'dummy'

 Check get() which returns a correspondent Builder instance to a given
 id:

 >>> builderset.get(bnew.id).name
 u'dummy'

Or raises an SQLObjectNotFound exception:

 >>> from sqlobject import SQLObjectNotFound
 >>> try:
 ...    builderset.get(100)
 ... except SQLObjectNotFound, info:
 ...    "%s" % info
 'The object Builder by the ID 100 does not exist'

count() return the number of builder instance we have stored:

 >>> builderset.count()
 2

getBuilder() method returns all the builders available. It seems the
same than the own instance but we have plans to turn it aware of some
attributes of builder instance as: builderok and trust.

 >>> for b in builderset.getBuilders():
 ...     b.name
 u'bob'
 u'dummy'

 
