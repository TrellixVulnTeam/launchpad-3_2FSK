Monitoring External Bug Trackers in Malone
==========================================

Malone allows you to monitor bugs in external bug tracking systems. This
document discusses the API of external bug trackers. To learn more about
bug watches, the object that represents the link between a Malone bug
and an external bug, see bugwatch.txt.

    >>> import pytz
    >>> from datetime import datetime, timedelta
    >>> from canonical.database.sqlbase import flush_database_updates
    >>> from canonical.launchpad.interfaces import IBugTrackerSet
    >>> bugtracker_set = getUtility(IBugTrackerSet)
    >>> mozilla_bugzilla = bugtracker_set.getByName('mozilla.org')
    >>> now = datetime.now(pytz.timezone('UTC'))

We can get a list of all the bug tracker's bug watches needing to be
updated.  The current criteria for needing a update is that it hasn't
been updated in the last 23 hours.

    >>> bug_watches = mozilla_bugzilla.watches
    >>> print bug_watches.count()
    4

    >>> print bug_watches[0].remotebug, bug_watches[0].bug.id
    2000 1
    >>> bug_watches[0].lastchecked = None

    >>> print bug_watches[1].remotebug, bug_watches[1].bug.id
    123543 1
    >>> bug_watches[1].lastchecked = now - timedelta(hours=12)

Note that bugtracker.watches may produce multiple watches for the same
remote bug.

    >>> print bug_watches[2].remotebug, bug_watches[2].bug.id
    42 1
    >>> bug_watches[2].lastchecked = now - timedelta(hours=36)

    >>> print bug_watches[3].remotebug, bug_watches[3].bug.id
    42 2
    >>> bug_watches[3].lastchecked = now - timedelta(days=1)

The watches needing updating should the ones with old statuses, 2000 and 42:

    >>> flush_database_updates()
    >>> for bug_watch in mozilla_bugzilla.getBugWatchesNeedingUpdate(23):
    ...     print bug_watch.remotebug, bug_watch.bug.id
    2000 1
    42 2
    42 1


Top Bug Trackers
================

The Malone front page shows a list of the top Malone bug trackers, as
ordered by the number of bugs being monitored by Malone in each of
them. Use IBugTrackerSet.getMostActiveBugTrackers to get this list.

    >>> top_trackers = bugtracker_set.getMostActiveBugTrackers(limit=4)
    >>> sorted([(tracker.watches.count(), tracker.name)
    ...         for tracker in top_trackers])
    [(1, u'gnome-bugzilla'), (1, u'ubuntu-bugzilla'),
     (4, u'debbugs'), (4, u'mozilla.org')]


Getting Bug Trackers
====================

You can get a specific bug tracker from the database by querying by its
base URL.

    >>> mozilla_bugzilla = bugtracker_set.queryByBaseURL(
    ...     u'https://bugzilla.mozilla.org/')
    >>> mozilla_bugzilla.baseurl
    u'https://bugzilla.mozilla.org/'

It's necessary to specify the exact URL, differences in the schema
(http vs. https) and trailing slashes are accepted.

    >>> mozilla_bugzilla = bugtracker_set.queryByBaseURL(
    ...     u'http://bugzilla.mozilla.org')
    >>> mozilla_bugzilla.baseurl
    u'https://bugzilla.mozilla.org/'

If no bug tracker can be found None is returned.

    >>> bugtracker_set.queryByBaseURL('http://no/such/bugtracker') is None
    True


checkwatches.py
===============

The updating and syncing of bug watches is done by a cronscript. We
can't test it properly, since we don't yet have a mock HTTP server we
can use for testing, so let's just make sure that it doesn't try to
contact any external servers.

    >>> from canonical.database.sqlbase import cursor
    >>> from canonical.database.constants import UTC_NOW
    >>> cur = cursor()
    >>> cur.execute("UPDATE BugWatch SET lastchecked=%s" % UTC_NOW)
    >>> import transaction
    >>> transaction.commit()

    >>> import subprocess
    >>> process = subprocess.Popen(
    ...     'cronscripts/checkwatches.py', shell=True,
    ...     stdin=subprocess.PIPE, stdout=subprocess.PIPE,
    ...     stderr=subprocess.PIPE)
    >>> (out, err) = process.communicate()
    >>> out
    ''
    >>> process.returncode
    0

    >>> print err
    INFO    creating lockfile
    ERROR   There's no debbugs db at /srv/bugs-mirror.debian.org/
    INFO    No watches to update on http://bugs.debian.org
    INFO    No watches to update on http://bugzilla.gnome.org/bugs
    INFO    No watches to update on http://sourceforge.net/
    INFO    No watches to update on https://bugzilla.mozilla.org/
    INFO    Skipping updating Ubuntu Bugzilla watches.
    INFO    Time for this run: ... seconds.
    <BLANKLINE>

We set a default timeout on checkwatches to 30 seconds. In order to test
this, we can monkey-patch urllib2.urlopen so that it always raises a
timeout and call the checkwatches cronscript machinery directly.

First, we create some bug watches to test with:

    >>> from canonical.launchpad.database import BugTracker
    >>> from canonical.launchpad.interfaces import IBugSet, IPersonSet
    >>> from canonical.lp.dbschema import BugTrackerType
    >>> from canonical.launchpad.scripts.checkwatches import (
    ...     BugWatchUpdater)

    >>> sample_person = getUtility(IPersonSet).getByEmail('test@canonical.com')

    >>> example_bug_tracker = BugTracker(
    ...     name="example-bugs",
    ...     title="Example.com Roundup",
    ...     bugtrackertype=BugTrackerType.ROUNDUP,
    ...     baseurl="http://bugs.example.com",
    ...     summary="Contains bugs for Example.com",
    ...     contactdetails="foo.bar@example.com",
    ...     owner=sample_person)

    >>> login('test@canonical.com')

    >>> example_bug = getUtility(IBugSet).get(10)
    >>> example_bugwatch = example_bug.addWatch(
    ...     example_bug_tracker, 1, sample_person)

    >>> login('no-priv@canonical.com')

Next, we monkey-patch urllib2.urlopen so that it always times out.

    >>> import socket
    >>> import urllib2
    >>> urlopen = urllib2.urlopen

    >>> def do_not_urlopen(url=None, data=None):
    ...     raise socket.timeout("Connection timed out.")
    >>> try:
    ...     urllib2.urlopen = do_not_urlopen
    ...     socket.setdefaulttimeout(1)
    ...     updater = BugWatchUpdater(transaction)
    ...     updater._login()
    ...     updater.updateBugTracker(example_bug_tracker)
    ... finally:
    ...     urllib2.urlopen = urlopen
    ERROR:root:Connection timed out when updating http://bugs.example.com
