The advanced search page provides widgets for filtering the bugtasks
depending on the bugtasks's related tasks. First let's look at which
bugs are returned without using the advanced search features.

  >>> anon_browser.open('http://localhost/distros/ubuntu/+bugs')
  >>> from BeautifulSoup import BeautifulSoup
  >>> def print_bugtasks(text):
  ...     soup = BeautifulSoup(anon_browser.contents)
  ...     table = soup('table', {'id': 'buglisting'})[0]
  ...     for tr in table('tr'):
  ...         if not tr.td:
  ...             continue
  ...         icon, id, description = tr('td', limit=3)
  ...         print id.string, description.a.string
  >>> print_bugtasks(anon_browser.contents)
  1 Firefox does not support SVG
  9 Thunderbird crashes
  10 another test bug
  2 Blackhole Trash folder

Now if we go to the advanced search and choose to list only the bugs
needing a bug watch, only the ones not having a bug watch (and whose
target doesn't use Malone) are returned.

  XXX: Can't click on the link due to bug 51853.
       -- Bjorn Tillenius, 2006-07-04
  >>> anon_browser.getLink('Advanced search').attrs['href']
  '?advanced=1'
  >>> anon_browser.open('http://localhost/distros/ubuntu/+bugs?advanced=1')
  >>> anon_browser.url
  'http://localhost/distros/ubuntu/+bugs?advanced=1'

  >>> upstream_status = anon_browser.getControl(name='field.status_upstream')
  >>> upstream_status.displayValue = [
  ...     'Show only bugs that need to be forwarded to an upstream bugtracker']
  >>> anon_browser.getControl('Search', index=0).click()
  >>> print_bugtasks(anon_browser.contents)
  2 Blackhole Trash folder

We can also show only the bugs that have a closed task somewhere else.
We don't have any in the sample data, so let's change some statuses
first.

  >>> from canonical.launchpad.ftests import login, logout
  >>> from canonical.launchpad.ftests.test_bugtask import (
  ...     BugTaskSearchBugsElsewhereTest)
  >>> test_helper = BugTaskSearchBugsElsewhereTest(helper_only=True)
  >>> login('test@canonical.com')
  >>> test_helper.setUpBugsElsewhereTests()
  >>> logout()

Now, if we choose to show only closed upstream task, only the bugs we
modified above will show up.

  >>> anon_browser.open('http://localhost/distros/ubuntu/+bugs?advanced=1')
  >>> anon_browser.url
  'http://localhost/distros/ubuntu/+bugs?advanced=1'

  >>> upstream_status = anon_browser.getControl(name='field.status_upstream')
  >>> upstream_status.displayValue = [
  ...     'Show only bugs that are closed upstream']
  >>> anon_browser.getControl('Search', index=0).click()
  >>> print_bugtasks(anon_browser.contents)
  1 Firefox does not support SVG
  9 Thunderbird crashes

The search can also be filtered to show only bugs not known to affect
upstream, i.e., bugs that don't have an IUpstreamBugTask. This filter
makes it easy for developers to ignore bugs that they've already passed
on upstream, to focus instead on things they need to work on.

  >>> anon_browser.open('http://localhost/distros/ubuntu/+bugs?advanced=1')
  >>> anon_browser.url
  'http://localhost/distros/ubuntu/+bugs?advanced=1'

  >>> upstream_status = anon_browser.getControl(name='field.status_upstream')
  >>> upstream_status.displayValue = [
  ...     'Show only bugs that are not known to affect upstream']
  >>> anon_browser.getControl('Search', index=0).click()
  >>> print_bugtasks(anon_browser.contents)
  10 another test bug

Let's reset the statuses we set.

  >>> login('test@canonical.com')
  >>> test_helper.tearDownBugsElsewhereTests()
  >>> logout()
