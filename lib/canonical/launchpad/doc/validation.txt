Validation
==========

The validation interface contains different kinds of validation functions.

The valid_distrotask() function is used to guarantee that distribution
bugtasks are unique per bug.

    >>> from canonical.launchpad.interfaces import (
    ...     IBugSet, IDistributionSet, ISourcePackageNameSet,
    ...     valid_distrotask)
    >>> bug_two = getUtility(IBugSet).get(2)
    >>> debian = getUtility(IDistributionSet).getByName('debian')
    >>> mozilla_firefox = getUtility(
    ...     ISourcePackageNameSet).queryByName('mozilla-firefox')
    >>> evolution = getUtility(ISourcePackageNameSet).queryByName('evolution')

We aren't allowed to add a distrotask with the same sourcepackage

    >>> valid_distrotask(bug_two, debian, mozilla_firefox, on_create=True)
    Traceback (most recent call last):
      ...
    WidgetsError: LaunchpadValidationError: ...

But it's legal to have two bugtasks with different sourcepackages

    >>> valid_distrotask(bug_two, debian, evolution)

We also can't add a task on just the distribution, because it doesn't
make sense to have tasks open on just the distribution and also packages
in that distribution on the same bug.

    >>> valid_distrotask(bug_two, debian, None, on_create=True)
    Traceback (most recent call last):
      ...
    WidgetsError: LaunchpadValidationError: ...

== LaunchpadValidationError ==

LaunchpadValidationError is the standard exception used for custom
validators upon a validation error. Rendering one is done by getting
an IWidgetInputErrorView:

    >>> from canonical.launchpad.validators import (
    ...     LaunchpadValidationError)
    >>> from canonical.launchpad.webapp.servers import (
    ...     LaunchpadTestRequest)
    >>> from zope.app.form.browser.interfaces import (
    ...     IWidgetInputErrorView)
    >>> from zope.app import zapi

    >>> error = LaunchpadValidationError('lp validation error')
    >>> request = LaunchpadTestRequest()
    >>> view = zapi.getMultiAdapter((error, request),
    ...     IWidgetInputErrorView)

    >>> IWidgetInputErrorView.providedBy(view)
    True
    >>> view.snippet()
    'lp validation error'
