Introduction
============

Bugs are problems reported in software. Bugs can be assigned to packages and
products to be fixed. People can "subscribe" to bugs. This document is about
people subscribing to bugs.

Accessing Bug Subscriber Lists
==============================

Sometimes you'll want to know which people are subscribed to a bug. For
example, you might want to send out a notification email to everyone that is
Cc'd on a bug when something changes. For the purposes of this document, let's
pretend we're logged in as Foo Bar:

    >>> from canonical.launchpad.ftests import login
    >>> login("foo.bar@canonical.com")

To get the set of subscriptions to a bug, you can access the
IBug.subscriptions attribute:

    >>> from canonical.launchpad.interfaces import IBugSet
    >>> from zope.component import getUtility
    >>> bugset = getUtility(IBugSet)
    >>> bug = bugset.get(1)
    >>> len(bug.subscriptions)
    2

This is slightly misleading though, because this only gives us the
list of explicit subscriptions on the bug, when in fact, there are
special cases where one can be "implicitly" subscribed to a bug.

Implicit vs. Explicit Subscriptions
-----------------------------------

An explicit subscription means that there's a row in the
BugSubscription for that subscription. An implicit subscription does not
have a corresponding row in the BugSubscription table.

To get the entire list of email addresses that should receive a
notification email on a bug, call
IBug.notificationRecipientAddresses().

   >>> bug.notificationRecipientAddresses()
   [u'mark@hbd.com', u'no-priv@canonical.com',
    u'support@ubuntu.com', u'test@canonical.com']

To find out if someone is already explicitly subscribed to a bug, call
IBug.isSubscribed, passing in an IPerson:

    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> personset = getUtility(IPersonSet)
    >>> bug.isSubscribed(personset.get(16))
    False
    >>> bug.isSubscribed(personset.get(12))
    True

Subscribing and Unsubscribing
=============================

To subscribe people to and unsubscribe people from a bug, use
IBug.subscribe and IBug.unsubscribe:

    >>> foobar = personset.get(16)
    >>> subscribed_people = [s.person.id for s in bug.subscriptions]
    >>> 16 not in subscribed_people
    True
    >>> bug.subscribe(foobar)
    <BugSubscription at ...>
    >>> subscriptions = [s.person.id for s in bug.subscriptions]
    >>> 16 in subscriptions
    True

