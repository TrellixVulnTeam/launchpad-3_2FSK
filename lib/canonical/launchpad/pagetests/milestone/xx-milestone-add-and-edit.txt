= Adding and editing milestones =

We have a "milestones" portlet which shows active milestones for a
structural object (product, project, distroseries, productseries). This
utility function will print out the milestones in that portlet:

    >>> def milestones_in_portlet(browser):
    ...     portlet = find_portlet(browser.contents, 'Active milestones')
    ...     if portlet is None:
    ...         return 'NO MILESTONE PORTLET'
    ...     return extract_text(portlet.find('table'))

== Adding a milestone ==

Let's make Sample Person the owner of Ubuntu and alsa-utils for this
story.

    >>> admin_browser.open('http://launchpad.dev/ubuntu/+reassign')
    >>> admin_browser.getControl(name='field.owner').value = 'name12'
    >>> admin_browser.getControl('Change owner').click()

    >>> admin_browser.open('http://launchpad.dev/alsa-utils/+edit-people')
    >>> admin_browser.getControl(name='field.owner').value = 'name12'
    >>> admin_browser.getControl('Save changes').click()

Milestone creations is restricted to the project owner, or to the series
owner or driver. This means that No Privileges Person won't be able to
see the link to add a milestone nor access the page directly.

    >>> user_browser.open('http://launchpad.dev/alsa-utils/trunk')
    >>> user_browser.getLink('Add milestone').click()
    Traceback (most recent call last):
      ...
    LinkNotFoundError
    >>> user_browser.open(
    ...     'http://launchpad.dev/alsa-utils/trunk/+addmilestone')
    Traceback (most recent call last):
      ...
    Unauthorized: ...

    >>> user_browser.open('http://launchpad.dev/ubuntu/hoary')
    >>> user_browser.getLink('Add milestone').click()
    Traceback (most recent call last):
      ...
    LinkNotFoundError
    >>> user_browser.open('http://launchpad.dev/ubuntu/hoary/+addmilestone')
    Traceback (most recent call last):
      ...
    Unauthorized: ...

But Sample Person will be able to use the 'Add milestone' link to
create a new milestone.

    >>> test_browser = setupBrowser(auth='Basic test@canonical.com:test')
    >>> test_browser.open('http://launchpad.dev/alsa-utils/trunk')
    >>> test_browser.getLink('Add milestone').click()
    >>> test_browser.url
    'http://launchpad.dev/alsa-utils/trunk/+addmilestone'

    >>> test_browser.open('http://launchpad.dev/ubuntu/hoary')
    >>> test_browser.getLink('Add milestone').click()
    >>> test_browser.url
    'http://launchpad.dev/ubuntu/hoary/+addmilestone'


== Duplicate milestone handling ==

Once authorized, let's create 2 milestones!

    >>> test_browser.getControl('Name').value = 'milestone1'
    >>> test_browser.getControl('Register milestone').click()
    >>> print milestones_in_portlet(test_browser)
    milestone1

    >>> test_browser.open('http://launchpad.dev/ubuntu/hoary/+addmilestone')
    >>> test_browser.getControl('Name').value = 'milestone2'
    >>> test_browser.getControl('Register milestone').click()
    >>> print milestones_in_portlet(test_browser)
    milestone2
    milestone1

Now let's try to create another one named milestone1.

    >>> test_browser.open('http://launchpad.dev/ubuntu/hoary/+addmilestone')
    >>> test_browser.getControl('Name').value = 'milestone1'
    >>> test_browser.getControl('Register milestone').click()
    >>> test_browser.url
    'http://launchpad.dev/ubuntu/hoary/+addmilestone'

    >>> for tag in find_tags_by_class(test_browser.contents, 'message'):
    ...     print tag
    <p class="error message">There is 1 error.</p>
    <div class="message">The name milestone1 is already used by a milestone in Ubuntu.</div>

Edit now...

    >>> test_browser.open(
    ...     'http://launchpad.dev/ubuntu/+milestone/milestone2/+edit')

There's a link back to the milestone page, in case you change your mind.

    >>> back_link = test_browser.getLink('Milestone milestone2 for Ubuntu')
    >>> back_link.url
    'http://launchpad.dev/ubuntu/+milestone/milestone2'

First we try to change the name of milestone2 to milestone1, which is
already in use.

    >>> test_browser.getControl('Name').value = 'milestone1'
    >>> test_browser.getControl('Date Targeted').value = "2030-01-01"
    >>> test_browser.getControl('Update').click()
    >>> test_browser.url
    'http://launchpad.dev/ubuntu/+milestone/milestone2/+edit'
    >>> for tag in find_tags_by_class(test_browser.contents, 'message'):
    ...     print tag
    <p class="error message">There is 1 error.</p>
    <div class="message">The name milestone1 is already used by a milestone in Ubuntu.</div>

Then we try to change milestone2's name to milestone3.

    >>> test_browser.open(
    ...     'http://launchpad.dev/ubuntu/+milestone/milestone2/+edit')
    >>> test_browser.getControl('Name').value = 'milestone3'
    >>> test_browser.getControl('Update').click()
    >>> print milestones_in_portlet(test_browser)
    milestone3
    milestone1

Now we do the same for a product instead of a distro.

First we test the +addmilestone page.

    >>> test_browser.open(
    ...     'http://launchpad.dev/alsa-utils/trunk/+addmilestone')

Once authorized, let's create 2 milestones!

    >>> test_browser.getControl('Name').value = 'milestone1'
    >>> test_browser.getControl('Register milestone').click()
    >>> print milestones_in_portlet(test_browser)
    milestone1

    >>> test_browser.open(
    ...     'http://launchpad.dev/alsa-utils/trunk/+addmilestone')
    >>> test_browser.getControl('Name').value = 'milestone2'
    >>> test_browser.getControl('Register milestone').click()
    >>> print milestones_in_portlet(test_browser)
    milestone2
    milestone1

Now let's try to create another one named milestone1.

    >>> test_browser.open(
    ...     'http://launchpad.dev/alsa-utils/trunk/+addmilestone')
    >>> test_browser.getControl('Name').value = 'milestone1'
    >>> test_browser.getControl('Register milestone').click()
    >>> test_browser.url
    'http://launchpad.dev/alsa-utils/trunk/+addmilestone'
    >>> for tag in find_tags_by_class(test_browser.contents, 'message'):
    ...     print tag
    <p class="error message">There is 1 error.</p>
    <div class="message">The name milestone1 is already used by a milestone in alsa-utils.</div>

Edit now...

First we try to change the name of milestone2 to milestone1, wich is
already in use.

    >>> test_browser.open(
    ...     'http://launchpad.dev/alsa-utils/+milestone/milestone2/+edit')
    >>> test_browser.getControl('Name').value = 'milestone1'
    >>> test_browser.getControl('Update').click()
    >>> test_browser.url
    'http://launchpad.dev/alsa-utils/+milestone/milestone2/+edit'
    >>> for tag in find_tags_by_class(test_browser.contents, 'message'):
    ...     print tag
    <p class="error message">There is 1 error.</p>
    <div class="message">The name milestone1 is already used by a milestone in alsa-utils.</div>

Then we try to change milestone2's name to milestone3.

    >>> test_browser.open(
    ...     'http://launchpad.dev/alsa-utils/+milestone/milestone2/+edit')
    >>> test_browser.getControl('Name').value = 'milestone3'
    >>> test_browser.getControl('Update').click()
    >>> print milestones_in_portlet(test_browser)
    milestone3
    milestone1

Now let's mark milestone3 as inactive to ensure it hides the milestone

    >>> test_browser.open(
    ...     'http://launchpad.dev/alsa-utils/+milestone/milestone3/+edit')
    >>> test_browser.getControl('Active').click()
    >>> test_browser.getControl('Update').click()
    >>> print milestones_in_portlet(test_browser)
    milestone1


== Admin Edit Functionality ==

We're reusing test data that was created above to test the admin edit
functionality. The admin functionality allows us to modify the distroseries
and productseries of the milestone.


=== Test Distro Series ===

To test distroseries, we'll switch from "ubuntu hoary" to "ubuntu warty" and
then verify it works correctly by checking the portlet details.

    >>> admin_browser.open(
    ...     'http://launchpad.dev/ubuntu/+milestone/milestone3/+admin')
    >>> admin_browser.getControl(name='field.distroseries').displayValue = [
    ...     'ubuntu warty']
    >>> admin_browser.getControl('Update').click()
    >>> print_portlet_links(admin_browser.contents,
    ...     'Milestone milestone3 for Ubuntu details')
    Ubuntu: /ubuntu
    Warty: /ubuntu/warty


=== Test Product Series ===

Because we don't have a series to test with yet, we first must create a new
series called "main" to alsa-utils so we can test switching the series.

    >>> admin_browser.open('http://launchpad.dev/alsa-utils/+addseries')
    >>> admin_browser.getControl('Name').value = "main"
    >>> admin_browser.getControl('Summary').value = "This is a test series."
    >>> admin_browser.getControl('Register Series').click()

Now that we have a sample series, we will access +admin and select the new
series we just created. For this test, we'll switch from "trunk" to "main"
and then verify it works correctly by checking the portlet details.

    >>> admin_browser.open(
    ...     'http://launchpad.dev/alsa-utils/+milestone/milestone1/+admin')
    >>> admin_browser.getControl(name='field.productseries').displayValue = [
    ...     'alsa-utils main']
    >>> admin_browser.getControl('Update').click()
    >>> print_portlet_links(admin_browser.contents,
    ...     'Milestone milestone1 for alsa-utils details')
    alsa-utils: /alsa-utils
    main: /alsa-utils/main


== Milestone bug subscriptions ==

To receive email notifications about bugs pretaining to a milestone, we
can create structural bug subscriptions.

    >>> user_browser.open('http://launchpad.dev/firefox/+milestone/1.0')
    >>> user_browser.getLink('Subscribe to bug mail').click()
    >>> print user_browser.url
    http://launchpad.dev/firefox/+milestone/1.0/+subscribe
    >>> print user_browser.title
    Bug subscriptions for Milestone 1.0 for Mozilla Firefox


== Deleting milestones ==

The milestone page for a series lists all the milestones targeted to to
the series.

    >>> driver_browser = setupBrowser(auth='Basic test@canonical.com:test')
    >>> driver_browser.open('http://launchpad.dev/firefox/trunk')
    >>> driver_browser.getLink('See all milestones').click()
    >>> print driver_browser.title
    Mozilla Firefox Series: trunk's milestones
    >>> print extract_text(find_tag_by_id(
    ...     driver_browser.contents, 'milestones'))
    Milestone  Date Targeted  Series Target  Summary
    0.9.2...
    0.9.1...
    0.9...

A user with launchpad.Edit rights for a release can see the delete link and
access the delete page. Sample Person is the driver so he has those rights.

    >>> driver_browser.getLink('0.9.2').click()
    >>> print driver_browser.title
    Milestone 0.9.2 for Mozilla Firefox
    >>> driver_browser.getLink('delete').click()
    >>> print driver_browser.title
    Delete Milestone 0.9.2 for Mozilla Firefox

The 0.9.2 release has some a release and files associated with it. Sample
Person reads that they will be deleted too.

    >>> print extract_text(find_main_content(driver_browser.contents))
    Delete Milestone 0.9.2 for Mozilla Firefox ...
    The associated 0.9.2 release "One (secure) Tree Hill" and its files
    will be also be deleted:
    firefox-0.9.2.orig.tar.gz ...

Sample Person chooses the delete button, then reads that the action is
successful.

    >>> driver_browser.getControl('Delete this Milestone').click()
    >>> print driver_browser.title
    Overview of Mozilla Firefox Series: trunk
    >>> for message in get_feedback_messages(driver_browser.contents):
    ...     print message
    Milestone 0.9.2 deleted.
    >>> driver_browser.getLink('See all milestones').click()
    >>> print extract_text(find_tag_by_id(
    ...     driver_browser.contents, 'milestones'))
    Milestone  Date Targeted  Series Target  Summary
    0.9.1...
    0.9...
