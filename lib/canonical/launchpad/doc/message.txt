Messages
========

The Message table is a central message spool that can be used by
various parts of launchpad. Currently, it is used by Malone for comments
on bugs. Bugs are linked to Messages via the BugMessage table.

The BugMessageFactory determines the Bug using the LaunchBag

>>> from canonical.launchpad.database import Bug
>>> from canonical.launchpad.database.bugmessage import BugMessageFactory
>>> login('foo.bar@canonical.com')
>>> launchbag = zapi.getUtility(ILaunchBag)
>>> launchbag.bug = Bug.get(1)
>>> bmsg = BugMessageFactory(title='The Title', content='The Content')
>>> msg = bmsg.message
>>> msg.title
u'The Title'

We can retrieve the full contents as plain text. (However, note that
if generating HTML you should use the MessageChunks detailed below
to handle attachments correctly)

>>> msg.contents
u'The Content'

Messages are threaded, although this is not necessarily displayed in the
UI. Each message has a parent attribute

>>> msg.parent is None
True

Messages always have a unique message id, which is used when notifications
of this message are sent out. The message id is generated by the system
if not provided

>>> isinstance(msg.rfc822msgid, basestring)
True
>>> bool(msg.rfc822msgid)
True

A Message is made up of one or more chunks. The chunks are stored in the
MessageChunk table. The majority of messages will have a single chunk
representing the text body of the message. More complex messages, such as
an email with attachments, will contain multiple chunks. A chunk may be a
piece of text, or a reference to an object stored in the Librarian. Chunks
may be accessed using the chunks attribute, or simply by iterating over
the Message.

>>> for chunk in msg:
...     print repr([chunk.sequence, chunk.content, chunk.blob])
[1, u'The Content', None]
>>> msg.chunks[0].message == msg
True

You can build a Message from an email easily. This stuffs the original,
unadulterated, email into the Librarian and builds all the MessageChunks.
XXX: Unfortunately, we can't test this until we integrate the Librarian
into the test harnesses better.

### from canonical.launchpad.database import Message
### msg = Message.fromEmail("""\
... Content-Type: multipart/mixed; boundary="===============0294339828=="
... MIME-Version: 1.0
... Subject: =?utf-8?q?Unicode=E2=84=A2?=
... From: foo.bar@canonical.com
... Message-Id: <20050405054002.22134.71562@localhost.localdomain>
... To: cabal@ubuntu.com
... 
... The preamble is included
... --===============0294339828==
... Content-Type: text/plain; charset="us-ascii"
... MIME-Version: 1.0
... Content-Transfer-Encoding: 7bit
... 
... Plain text
... --===============0294339828==
... Content-Type: executable/virus
... MIME-Version: 1.0
... Content-Transfer-Encoding: base64
... Content-Disposition: attachment; filename="anna.jpg.exe"
... 
... AAECAw==
... --===============0294339828==
... Content-Type: text/plain; charset="utf8"
... MIME-Version: 1.0
... Content-Transfer-Encoding: base64
... 
... VW5pY29kZeKEoiB0ZXh0
... 
... --===============0294339828==--
... The epilogue is included
... """)


