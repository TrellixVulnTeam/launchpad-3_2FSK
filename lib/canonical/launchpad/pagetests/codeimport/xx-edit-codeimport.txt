= Editing code import details =

The code import details are displayed on the main branch page for
imported branches.  If the logged in user is an import operator
(member of VCS imports or Launchpad admin) then they can see a link
to edit the details.

    >>> from canonical.launchpad.ftests import ANONYMOUS, login, logout
    >>> login(ANONYMOUS)
    >>> from canonical.launchpad.testing import LaunchpadObjectFactory
    >>> factory = LaunchpadObjectFactory()
    >>> svn_import = factory.makeCodeImport(
    ...     svn_branch_url='svn://svn.example.com/fooix/trunk')
    >>> from canonical.launchpad.webapp import canonical_url
    >>> svn_import_location = str(canonical_url(svn_import.branch))
    >>> cvs_import = factory.makeCodeImport(
    ...     cvs_root=":pserver:anonymous@cvs.example.com:/fooix",
    ...     cvs_module="fooix")
    >>> cvs_import_location = str(canonical_url(cvs_import.branch))
    >>> hosted_branch = factory.makeBranch()
    >>> hosted_branch_location = str(canonical_url(hosted_branch))
    >>> logout()

    >>> import_browser = setupBrowser(
    ...     auth='Basic david.allouche@canonical.com:test')


== Import details on the branch page ==

Imported branches have a section with the title "Import details".
In this section the review state of the import is shown, along with
the location of the import.

    >>> def print_import_details(browser):
    ...     div = find_tag_by_id(browser.contents, 'import-details')
    ...     print extract_text(div)
    >>> browser.open(svn_import_location)
    >>> print_import_details(browser)
    Status: Pending Review
    This branch is an import of the Subversion branch
    from svn://svn.example.com/fooix/trunk.

    >>> import_browser.open(svn_import_location)
    >>> print_import_details(import_browser)
    Status: Pending Review
    This branch is an import of the Subversion branch
    from svn://svn.example.com/fooix/trunk.
    Edit import source or review import.

    >>> admin_browser.open(svn_import_location)
    >>> print_import_details(admin_browser)
    Status: Pending Review
    This branch is an import of the Subversion branch
    from svn://svn.example.com/fooix/trunk.
    Edit import source or review import.

Imports of CVS branches have slightly different text.

    >>> browser.open(cvs_import_location)
    >>> print_import_details(browser)
    Status: Pending Review
    This branch is an import of the CVS module fooix from
    :pserver:anonymous@cvs.example.com:/fooix.


== Not authorized verses 404 ==

If the user attempts to hack the URL to edit the import details,
they will get a not authorised page if the branch has a code import,
and a 404 if the branch doesn't have an import.

    >>> browser.open(svn_import_location + '/+edit-import')
    Traceback (most recent call last):
    Unauthorized: (... 'launchpad.Edit')

    >>> admin_browser.open(hosted_branch_location + '/+edit-import')
    Traceback (most recent call last):
    NotFoundError


== Editing details ==

There are a number of buttons shown on the editing page for
import operators.

    >>> import_browser.getLink('Edit import source or review import').click()
    >>> print_submit_buttons(import_browser.contents)
    Update
    Approve
    Set Invalid
    Suspend

A cancel link is also shown next to the buttons, that takes the user
back to the main branch details page.

    >>> import_browser.getLink('Cancel').url == svn_import_location
    True

Only the fields that are relevant to the type of import are shown
in the form.

    >>> def print_form_fields(browser):
    ...     tags = find_tags_by_class(browser.contents, 'textType')
    ...     for tag in tags:
    ...         print '%s: %s' % (tag['name'], tag['value'])

    >>> print_form_fields(import_browser)
    field.svn_branch_url: svn://svn.example.com/fooix/trunk

    >>> admin_browser.open(cvs_import_location)
    >>> admin_browser.getLink('Edit import source or review import').click()
    >>> print_form_fields(admin_browser)
    field.cvs_root: :pserver:anonymous@cvs.example.com:/fooix
    field.cvs_module: fooix


=== Approving an import ===

When a code import is approved, a pending job is created for it.

    >>> import_browser.getControl('Approve').click()
    >>> print_import_details(import_browser)
    Status: Reviewed
    ...
    The next import is scheduled to run as soon as possible.
    ...
    >>> for message in get_feedback_messages(import_browser.contents):
    ...     print extract_text(message)
    The code import has been approved.

=== Invalidating an import ===

    >>> import_browser.getLink('Edit import source or review import').click()
    >>> import_browser.getControl('Set Invalid').click()
    >>> print_import_details(import_browser)
    Status: Invalid
    ...
    >>> for message in get_feedback_messages(import_browser.contents):
    ...     print extract_text(message)
    The code import has been set as invalid.

=== Suspending an import ===

    >>> import_browser.getLink('Edit import source or review import').click()
    >>> import_browser.getControl('Suspend').click()
    >>> print_import_details(import_browser)
    Status: Suspended
    ...
    >>> for message in get_feedback_messages(import_browser.contents):
    ...     print extract_text(message)
    The code import has been suspended.
