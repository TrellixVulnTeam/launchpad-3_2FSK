= LAZR's field marshallers =

LAZR defines an interface for converting between the values that
come in on an HTTP request, and the object values appropriate for schema
fields. This is similar to Zope's widget interface, but much smaller.

To test the various marshallers we create a dummy request and
application root.

    >>> from canonical.launchpad.webapp.servers import WebServiceTestRequest
    >>> from canonical.launchpad.webapp.servers import WebServicePublication
    >>> request = WebServiceTestRequest(method='GET')
    >>> request.setPublication(WebServicePublication(None))
    >>> login(ANONYMOUS, request)
    >>> request.processInputs()

    >>> from canonical.launchpad.systemhomes import WebServiceApplication
    >>> root = WebServiceApplication()
    >>> from canonical.launchpad.interfaces import IOpenLaunchBag
    >>> getUtility(IOpenLaunchBag).add(root)


== IFieldMarshaller and SimpleFieldMarshaller ==

There is a SimpleFieldMarshaller class that provides a good base to
implement that interface.

    >>> from zope.interface.verify import verifyObject
    >>> from canonical.lazr.interfaces import IFieldMarshaller
    >>> from canonical.lazr.rest import SimpleFieldMarshaller
    >>> from zope.schema import Text

    >>> field = Text(__name__='field_name')
    >>> marshaller = SimpleFieldMarshaller(field, request)
    >>> verifyObject(IFieldMarshaller, marshaller)
    True

The representation_name attribute is used to retrieve the name under
which the field should be stored in the JSON representation. In the
simple case, it's the same name as the field.

    >>> marshaller.representation_name
    'field_name'

The marshall_from_json_data() method is used during PUT and PATCH
requests to transform the value provided in the JSON representation to a
value in the underlying schema field. In SimpleFieldMarshaller
implementation, the value is returned unchanged.

    >>> marshaller.marshall_from_json_data("foo")
    'foo'
    >>> marshaller.marshall_from_json_data(4)
    4
    >>> marshaller.marshall_from_json_data(u"unicode\u2122")
    u'unicode\u2122'
    >>> marshaller.marshall_from_json_data("")
    ''
    >>> print marshaller.marshall_from_json_data(None)
    None

The marshall_from_request() method is used during operation invocation
to transform a value submitted via the query string or form-encoded POST
data into a value that will be accepted by the underlying schema field.
In the SimpleFieldMarshaller implementation, that's the same value as
provided in the request, except that the empty string is converted to
None.

    >>> marshaller.marshall_from_request("foo")
    'foo'
    >>> marshaller.marshall_from_request("4")
    '4'
    >>> marshaller.marshall_from_request(u"unicode\u2122")
    u'unicode\u2122'
    >>> print marshaller.marshall_from_request("")
    None

The unmarshall() method is used to convert the field's value to a value
that can be serialized to JSON as part of an entry representation.  The
first parameter is the entry that the value is part of. That is used by
fields that transform the value into a URL, see the CollectionField
marshaller for an example. The second one is the value to convert.  In
the SimpleFieldMarshaller implementation, the value is returned
unchanged.

    >>> marshaller.unmarshall(None, 'foo')
    'foo'
    >>> print marshaller.unmarshall(None, None)
    None


== Basic types marshallers ==

=== Int ===

The marshaller for an Int field tries to convert the given string
into an int.

    >>> from zope.component import getMultiAdapter
    >>> from zope.schema import Int
    >>> field = Int()
    >>> marshaller = getMultiAdapter((field, request), IFieldMarshaller)
    >>> verifyObject(IFieldMarshaller, marshaller)
    True

    >>> marshaller.marshall_from_request("4")
    4
    >>> marshaller.marshall_from_request(u"4")
    4

It raises a ValueError if the value cannot be converted to an integer.

    >>> marshaller.marshall_from_request("foo")
    Traceback (most recent call last):
    ...
    ValueError: invalid literal for int(): foo

    >>> marshaller.marshall_from_request("4.62")
    Traceback (most recent call last):
    ...
    ValueError: invalid literal for int(): 4.62

The empty string still marshalls to None.

    >>> print marshaller.marshall_from_request("")
    None

If the value from JSON isn't an integer, a ValueError is raised.

    >>> marshaller.marshall_from_json_data(-10)
    -10
    >>> marshaller.marshall_from_json_data("-10")
    Traceback (most recent call last):
      ...
    ValueError: not an integer: '-10'

None is passed through though.

    >>> print marshaller.marshall_from_json_data(None)
    None


=== Choice ===

The marshaller for a Choice is chosen based on the Choice's
vocabulary. First, let's look at a Choice whose vocabulary is a
relatively short list of enumerated values.

    >>> from zope.schema import Choice
    >>> from canonical.launchpad.interfaces import BugTaskStatus
    >>> field = Choice(vocabulary=BugTaskStatus)
    >>> marshaller = getMultiAdapter((field, request), IFieldMarshaller)
    >>> verifyObject(IFieldMarshaller, marshaller)
    True

The client is expected to provide the title of one of the enumerated
values. A string that corresponds to one of the values is marshalled
to the appropriate value. A string that doesn't correspond to any
enumerated value results in a helpful ValueError.

    >>> marshaller.marshall_from_request("Triaged")
    <DBItem BugTaskStatus.TRIAGED...>

    >>> marshaller.marshall_from_request("NoSuchStatus")
    Traceback (most recent call last):
    ...
    ValueError: Invalid value "NoSuchStatus". Acceptable values are: ...

    >>> marshaller.marshall_from_request("triaged")
    Traceback (most recent call last):
    ...
    ValueError: Invalid value "triaged". Acceptable values are: ...

The empty string marshalls to None.

    >>> print marshaller.marshall_from_request("")
    None

The string coming from the JSON representation is interpreted exactly
the same, with the exception that the empty strings becomes a
ValueError.


== Object marshallers ==

Here's a Choice whose vocabulary is a filter on a database table that
can be very large. Futhermore, every item in the vocabulary is
published as a resource in Launchpad's web service.

    >>> from canonical.launchpad.vocabularies import (
    ...     ValidPersonOrTeamVocabulary)
    >>> field = Choice(
    ...     __name__='some_person', vocabulary=ValidPersonOrTeamVocabulary())
    >>> marshaller = getMultiAdapter((field, request), IFieldMarshaller)

Here, the client is expected to designate a vocabulary item by its
published URL. If the given string is a URL corresponding to a
vocabulary item, the marshaller returns that item. Otherwise it
raises a ValueError.

    >>> from canonical.launchpad.interfaces import IPerson
    >>> person = marshaller.marshall_from_request(
    ...     "http://api.launchpad.dev/beta/~salgado")
    >>> IPerson.providedBy(person)
    True
    >>> person.name
    u'salgado'

    >>> marshaller.marshall_from_request(
    ...     "http://api.launchpad.dev/beta/~nosuchperson")
    Traceback (most recent call last):
    ...
    ValueError: No such object "http://api.launchpad.dev/beta/~nosuchperson".

    >>> marshaller.marshall_from_request("salgado")
    Traceback (most recent call last):
    ...
    ValueError: No such object "salgado".

Instead of unmarshall() returning the Person object (which
wouldn't look nice in a JSON representation), this marshaller returns
the URL to that object.

    >>> from canonical.lazr.rest import EntryResource
    >>> person_resource = EntryResource(person, request)

    >>> marshaller.unmarshall(person_resource, person)
    u'http://.../~salgado'

This marshaller also appends '_link' to the representation name of
this field, so that clients can know this is a link to another
resource and not a random string.

    >>> marshaller.representation_name
    'some_person_link'


== Collection marshallers ==

The most complicated kind of marshaller is one that manages a
collection of objects associated with some other object. Let's do an
example with a collection of IPerson objects associated with some
IPerson. (This might be the list of teams in which a person has a
membership, or something like that.)

    >>> from zope.schema import Object
    >>> from canonical.lazr.rest.schema import CollectionField
    >>> field = CollectionField(
    ...     __name__='person_memberships', value_type=Object(schema=IPerson))
    >>> marshaller = getMultiAdapter((field, request), IFieldMarshaller)

Instead of serving the actual collection, collection marshallers serve
a URL to that collection.

    >>> marshaller.unmarshall(person_resource, ["member 1", "member 2"])
    u'http://.../~salgado/person_memberships'

They also annotate the representation name of the field, so that
clients know this is a link to a collection-type resource.

    >>> marshaller.representation_name
    'person_memberships_collection_link'
