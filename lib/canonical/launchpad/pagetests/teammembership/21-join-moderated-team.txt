= Joining a moderated team =

Anybody can ask to join a moderated team, but the membership needs to be
approved by one of the team administrators.

    # Make 'myemail' a moderated team first.
    >>> from canonical.launchpad.database import PersonSet
    >>> from canonical.lp.dbschema import TeamSubscriptionPolicy
    >>> PersonSet().getByName('myemail').subscriptionpolicy = (
    ...     TeamSubscriptionPolicy.MODERATED)
    >>> from canonical.database.sqlbase import flush_database_updates
    >>> flush_database_updates()

    # Workaround while https://launchpad.net/launchpad/+bug/39016 is not
    # fixed.
    >>> from canonical.launchpad.mail import stub
    >>> stub.test_emails[:] = []

Now, 'myemail' is a MODERATED team, and 'salgado' will join again.

    >>> browser.addHeader('Authorization', 'Basic salgado@ubuntu.com:zeca')
    >>> browser.open('http://launchpad.dev/~myemail/+join')
    >>> browser.url
    'http://launchpad.dev/~myemail/+join'

    >>> print find_tag_by_id(browser.contents, 'maincontent').renderContents()
    <BLANKLINE>
    ...
    Since this is a moderated team, one of its administrators will have to
    approve your membership before you actually become a member of this team.
    ...

    >>> browser.getControl(name='join').click()
    >>> browser.url
    'http://launchpad.dev/~myemail/'

    >>> tags = find_tags_by_class(browser.contents, 'informational message')
    >>> for tag in tags:
    ...     print tag.renderContents()
    Subscription request pending approval.

As we can see now, the team owner received an email notification that there's
a new member waiting for approval. (this notification is sent to all team
administrators, but in this case we don't have team administrators)

  >>> from_addr, to_addrs, raw_msg = stub.test_emails.pop()
  >>> assert not stub.test_emails
  >>> to_addrs
  ['test@canonical.com']
  >>> 'Reply-To: guilherme.salgado@canonical.com' in raw_msg
  True

Proposed Members are not shown as "real" team members by our API.

  >>> from canonical.launchpad.database import Person, TeamMembership
  >>> salgado = Person.byName('salgado')
  >>> team = Person.byName('myemail')
  >>> tm = TeamMembership.selectOneBy(personID=salgado.id, teamID=team.id)
  >>> tm.statusname
  'Proposed'
  >>> salgado.inTeam(team)
  False
