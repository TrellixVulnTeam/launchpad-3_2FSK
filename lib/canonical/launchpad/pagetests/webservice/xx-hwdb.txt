= The HWDB API =

The HWDB API allows access to the HWDB tables.

== The HWDB application root ==

The HWDB application root provides the core methods to access HWDB
tables.

    >>> from canonical.lazr.testing.webservice import pprint_entry
    >>> hwdb_root = webservice.get('/+hwdb').jsonBody()
    >>> pprint_entry(hwdb_root)
    resource_type_link: u'http://api.launchpad.dev/beta/#hwdb'
    self_link: u'http://api.launchpad.dev/beta/+hwdb'

=== Device Queries and Devices ===

The method HWDBApplication.devices returns known devices matching
the given parameters bus and vendor ID. (See
doc/hwdb-device-tables.txt for details about the underlying table
HWDevice.)

    >>> devices = webservice.get(
    ...     '/+hwdb?ws.op=devices&bus=System&vendor_id=MSI').jsonBody()

A device entry provides the attributes bus_product_id, name and variant.

    >>> for entry in devices['entries']:
    ...     pprint_entry(entry)
    bus: u'System'
    bus_product_id: u'MS-7369'
    id: 1
    name: u'MS-7369'
    resource_type_link: u'http://api.launchpad.dev/beta/#h_w_device'
    self_link: u'http://api.launchpad.dev/beta/+hwdb/+device/1'
    variant: None
    vendor_id: u'MSI'
    vendor_name: u'MSI'

The query parameter `bus` must be a bus name as enumerated by HWBus.

    >>> print webservice.get(
    ...     '/+hwdb?ws.op=devices&bus=NoSuchBus&vendor_id=MSI')
    HTTP/1.1 400 Bad Request
    ...
    bus: Invalid value "NoSuchBus". Acceptable values are: System, PCI,
    USB, IEEE1394, SCSI, Parallel Port, Serial port, IDE, ATA, Floppy, ...

Omitting the query parameters `bus` or `vendor_id` leads to an error.

    >>> print webservice.get(
    ...     '/+hwdb?ws.op=devices&bus=System')
    HTTP/1.1 400 Bad Request
    ...
    vendor_id: Required input is missing.

    >>> print webservice.get(
    ...     '/+hwdb?ws.op=devices&vendor_id=MSI')
    HTTP/1.1 400 Bad Request
    ...
    bus: Required input is missing.

HWDBApplication.devices() allows the optional parameters product_id. Only
devices matching the given value are returned.

    >>> devices = webservice.get(
    ...     '/+hwdb?ws.op=devices&bus=System&vendor_id=MSI&product_id=MS-7369')
    >>> for entry in devices.jsonBody()['entries']:
    ...     pprint_entry(entry)
    bus: u'System'
    bus_product_id: u'MS-7369'
    id: 1
    name: u'MS-7369'
    resource_type_link: u'http://api.launchpad.dev/beta/#h_w_device'
    self_link: u'http://api.launchpad.dev/beta/+hwdb/+device/1'
    variant: None
    vendor_id: u'MSI'
    vendor_name: u'MSI'

    >>> devices = webservice.get(
    ...     '/+hwdb?ws.op=devices&bus=System&vendor_id=MSI&product_id=nothing')
    >>> print devices.jsonBody()['entries']
    []

Single device records can be accessed too.

    >>> device = webservice.get('/+hwdb/+device/2').jsonBody()
    >>> pprint_entry(device)
    bus: u'PCI'
    bus_product_id: u'0x0455'
    id: 2
    name: u'MCP65 USB Controller'
    resource_type_link: u'http://api.launchpad.dev/beta/#h_w_device'
    self_link: u'http://api.launchpad.dev/beta/+hwdb/+device/2'
    variant: None
    vendor_id: u'0x10de'
    vendor_name: u'nVidia Corporation'

A 404 error is returned, when a non-existent ID is passed in the URL...

    >>> print webservice.get('/+hwdb/+device/1000000')
    HTTP/1.1 404 Not Found
    ...
    NotFound: Object: <canonical.launchpad.systemhomes.HWDBApplication
    ... name: u'1000000'

...and when an otherwise invalid ID is passed.

    >>> print webservice.get('/+hwdb/+device/nonsense')
    HTTP/1.1 404 Not Found
    ...
    NotFound: Object: <canonical.launchpad.systemhomes.HWDBApplication
    ... name: u'nonsense'

=== Drivers and Driver Queries ===

The method HWDBApplication.drivers() returns known drivers matching
the given optional parameters package_name and name. (See
doc/hwdb-device-tables.txt for details about the underlying table
HWDriver.)

All driver records from the sample data have package_name ==
'linux-image-2.6.24-19-generic'; let's add some driver records
with different package names, so that we can see how filtering
by name works.

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.ftests import login, logout, ANONYMOUS
    >>> from canonical.launchpad.interfaces.hwdb import IHWDriverSet
    >>> login(ANONYMOUS)
    >>> driver_set = getUtility(IHWDriverSet)
    >>> # A typical graphics card driver
    >>> driver_set.create('xorg', 'nv', None)
    <HWDriver at ...>
    >>> # A driver without an associated package.
    >>> driver_set.create(None, 'usb', None)
    <HWDriver at ...>
    >>> # And another driver without an associated package.
    >>> driver_set.create('', 'foo', None)
    <HWDriver at ...>
    >>> logout()

If no parameters are specified, HWDBApplication.drivers() returns all
known drivers. A device entry provides the attributes bus_product_id,
name, package_name, variant and license.

    >>> drivers = webservice.get('/+hwdb?ws.op=drivers&ws.size=15').jsonBody()
    >>> for entry in drivers['entries']:
    ...     pprint_entry(entry)
    id: 1
    license: None
    name: u'ehci_hcd'
    package_name: u'linux-image-2.6.24-19-generic'
    resource_type_link: u'http://api.launchpad.dev/beta/#h_w_driver'
    self_link: u'http://api.launchpad.dev/beta/+hwdb/+driver/1'
    id: 2
    license: None
    name: u'usb'
    package_name: u'linux-image-2.6.24-19-generic'
    resource_type_link: u'http://api.launchpad.dev/beta/#h_w_driver'
    self_link: u'http://api.launchpad.dev/beta/+hwdb/+driver/2'
    id: 3
    license: None
    name: u'usb-storage'
    package_name: u'linux-image-2.6.24-19-generic'
    resource_type_link: u'http://api.launchpad.dev/beta/#h_w_driver'
    self_link: u'http://api.launchpad.dev/beta/+hwdb/+driver/3'
    id: 4
    license: None
    name: u'sd'
    package_name: u'linux-image-2.6.24-19-generic'
    resource_type_link: u'http://api.launchpad.dev/beta/#h_w_driver'
    self_link: u'http://api.launchpad.dev/beta/+hwdb/+driver/4'
    id: 5
    license: None
    name: u'hub'
    package_name: u'linux-image-2.6.24-19-generic'
    resource_type_link: u'http://api.launchpad.dev/beta/#h_w_driver'
    self_link: u'http://api.launchpad.dev/beta/+hwdb/+driver/5'
    id: 6
    license: None
    name: u'ahci'
    package_name: u'linux-image-2.6.24-19-generic'
    resource_type_link: u'http://api.launchpad.dev/beta/#h_w_driver'
    self_link: u'http://api.launchpad.dev/beta/+hwdb/+driver/6'
    id: 7
    license: None
    name: u'sr'
    package_name: u'linux-image-2.6.24-19-generic'
    resource_type_link: u'http://api.launchpad.dev/beta/#h_w_driver'
    self_link: u'http://api.launchpad.dev/beta/+hwdb/+driver/7'
    id: 8
    license: None
    name: u'nv'
    package_name: u'xorg'
    resource_type_link: u'http://api.launchpad.dev/beta/#h_w_driver'
    self_link: u'http://api.launchpad.dev/beta/+hwdb/+driver/8'
    id: 9
    license: None
    name: u'usb'
    package_name: None
    resource_type_link: u'http://api.launchpad.dev/beta/#h_w_driver'
    self_link: u'http://api.launchpad.dev/beta/+hwdb/+driver/9'
    id: 10
    license: None
    name: u'foo'
    package_name: u''
    resource_type_link: u'http://api.launchpad.dev/beta/#h_w_driver'
    self_link: u'http://api.launchpad.dev/beta/+hwdb/+driver/10'

If we specify a package name, only drivers from this package are
returned.

    >>> drivers = webservice.get(
    ...     '/+hwdb?ws.op=drivers&package_name=xorg').jsonBody()
    >>> [nv_xorg_driver] = drivers['entries']
    >>> pprint_entry(nv_xorg_driver)
    id: 8
    license: None
    name: u'nv'
    package_name: u'xorg'
    resource_type_link: u'http://api.launchpad.dev/beta/#h_w_driver'
    self_link: u'http://api.launchpad.dev/beta/+hwdb/+driver/8'

If we specify an empty package name, those drivers are returned where
a package_name is not recorded.

    >>> drivers = webservice.get(
    ...     '/+hwdb?ws.op=drivers&package_name=').jsonBody()
    >>> for entry in drivers['entries']:
    ...     pprint_entry(entry)
    id: 9
    license: None
    name: u'usb'
    package_name: None
    resource_type_link: u'http://api.launchpad.dev/beta/#h_w_driver'
    self_link: u'http://api.launchpad.dev/beta/+hwdb/+driver/9'
    id: 10
    license: None
    name: u'foo'
    package_name: u''
    resource_type_link: u'http://api.launchpad.dev/beta/#h_w_driver'
    self_link: u'http://api.launchpad.dev/beta/+hwdb/+driver/10'

If the parameter name is specified but no package_name, all drivers with
the given name are returned.

    >>> drivers = webservice.get(
    ...     '/+hwdb?ws.op=drivers&name=usb').jsonBody()
    >>> for entry in drivers['entries']:
    ...     pprint_entry(entry)
    id: 2
    license: None
    name: u'usb'
    package_name: u'linux-image-2.6.24-19-generic'
    resource_type_link: u'http://api.launchpad.dev/beta/#h_w_driver'
    self_link: u'http://api.launchpad.dev/beta/+hwdb/+driver/2'
    id: 9
    license: None
    name: u'usb'
    package_name: None
    resource_type_link: u'http://api.launchpad.dev/beta/#h_w_driver'
    self_link: u'http://api.launchpad.dev/beta/+hwdb/+driver/9'

If package_name and name are specified, those records are returned that
match both values.

    >>> drivers = webservice.get(
    ...     '/+hwdb?ws.op=drivers&name=usb'
    ...     '&package_name=linux-image-2.6.24-19-generic').jsonBody()
    >>> [usb_driver] = drivers['entries']
    >>> pprint_entry(usb_driver)
    id: 2
    license: None
    name: u'usb'
    package_name: u'linux-image-2.6.24-19-generic'
    resource_type_link: u'http://api.launchpad.dev/beta/#h_w_driver'
    self_link: u'http://api.launchpad.dev/beta/+hwdb/+driver/2'

Single drivers can be retrieved too.

    >>> pprint_entry(webservice.get('/+hwdb/+driver/1').jsonBody())
    id: 1
    license: None
    name: u'ehci_hcd'
    package_name: u'linux-image-2.6.24-19-generic'
    resource_type_link: u'http://api.launchpad.dev/beta/#h_w_driver'
    self_link: u'http://api.launchpad.dev/beta/+hwdb/+driver/1'

A 404 error is returned, when a non-existent ID is passed in the URL...

    >>> print webservice.get('/+hwdb/+driver/1000000')
    HTTP/1.1 404 Not Found
    ...
    NotFound: Object: <canonical.launchpad.systemhomes.HWDBApplication
    ... name: u'1000000'

...and when an otherwise invalid ID is passed.

    >>> print webservice.get('/+hwdb/+driver/nonsense')
    HTTP/1.1 404 Not Found
    ...
    NotFound: Object: <canonical.launchpad.systemhomes.HWDBApplication
    ... name: u'nonsense'


=== HWDB submissions and submission queries ===

A single submission can be accessed via its submission key. (See below
for the contents of devices_collection_link.)

    >>> submission = webservice.get(
    ...     '/+hwdb/+submission/sample-submission').jsonBody()
    >>> pprint_entry(submission)
    contactable: False
    date_created: u'2008-09-26T17:19:18+00:00'
    date_submitted: u'2008-09-30T08:19:00.222131+00:00'
    devices_collection_link: u'.../+hwdb/+submission/sample-submission/devices'
    format: u'Version 1'
    owner_link: u'http://api.launchpad.dev/beta/~name12'
    private: False
    raw_submission_link:
        u'.../+hwdb/+submission/sample-submission/raw_submission'
    resource_type_link: u'http://api.launchpad.dev/beta/#h_w_submission'
    self_link: u'.../+hwdb/+submission/sample-submission'
    status: u'Processed'
    submission_key: u'sample-submission'

Accessing the raw submission data yields a redirect to a Librarian URL.

    >>> print webservice.get(submission['raw_submission_link'])
    HTTP/1.1 303 See Other
    Content-Length: 0
    Content-Type: text/plain
    Location: http://localhost:58000/92/sample-submission-2.xml
    <BLANKLINE>

A 404 error is returned when a client tries to access a non-existent
submission.

    >>> print webservice.get('/+hwdb/+submission/nonsense')
    HTTP/1.1 404 Not Found
    ...
    Traceback (most recent call last):
    ...
    NotFound: Object: <...systemhomes.HWDBApplication object at ...>,
    name: u'nonsense'
    <BLANKLINE>

Submissions which mention a specific device can be retrieved by
calling HWDevice.submissions().

    >>> submissions = webservice.get(
    ...     '/+hwdb/+device/2?ws.op=getSubmissions').jsonBody()
    >>> for submission in submissions['entries']:
    ...     print submission['submission_key']
    sample-submission

We can limit the result set to submissions where the device is accessed
by a specific driver. Device 2 is a USB controller, so will get the sample
submission when we set the parameter driver to the usb driver...

    >>> from urllib import urlencode
    >>> parameters = {
    ...     'ws.op': 'getSubmissions',
    ...     'driver': usb_driver['self_link'],
    ...     }
    >>> submissions = webservice.get(
    ...     '/+hwdb/+device/2?' + urlencode(parameters)).jsonBody()
    >>> for submission in submissions['entries']:
    ...     print submission['submission_key']
    sample-submission

...but when we set it to nv_xorg_driver, we get an empty result set.

    >>> parameters = {
    ...     'ws.op': 'getSubmissions',
    ...     'driver': nv_xorg_driver['self_link'],
    ...     }
    >>> submissions = webservice.get(
    ...     '/+hwdb/+device/2?' + urlencode(parameters)).jsonBody()
    >>> print submissions['total_size']
    0

We can also limit the result set to submissions made for a specific
distribution...

    >>> distros = webservice.get("/distros").jsonBody()
    >>> ubuntu = distros['entries'][0]
    >>> ubuntu['name']
    u'ubuntu'
    >>> debian = distros['entries'][3]
    >>> debian['name']
    u'debian'

    >>> parameters = {
    ...     'ws.op': 'getSubmissions',
    ...     'distribution': ubuntu['self_link'],
    ...     }
    >>> submissions = webservice.get(
    ...     '/+hwdb/+device/2?' + urlencode(parameters)).jsonBody()
    >>> for submission in submissions['entries']:
    ...     print submission['submission_key']
    sample-submission

    >>> parameters = {
    ...     'ws.op': 'getSubmissions',
    ...     'distribution': debian['self_link'],
    ...     }
    >>> submissions = webservice.get(
    ...     '/+hwdb/+device/2?' + urlencode(parameters)).jsonBody()
    >>> print submissions['total_size']
    0

...and for a specific processor architecture.

    >>> parameters = {
    ...     'ws.op': 'getSubmissions',
    ...     'architecture': 'i386',
    ...     }
    >>> submissions = webservice.get(
    ...     '/+hwdb/+device/2?' + urlencode(parameters)).jsonBody()
    >>> for submission in submissions['entries']:
    ...     print submission['submission_key']
    sample-submission

    >>> parameters = {
    ...     'ws.op': 'getSubmissions',
    ...     'architecture': 'amd64',
    ...     }
    >>> submissions = webservice.get(
    ...     '/+hwdb/+device/2?' + urlencode(parameters)).jsonBody()
    >>> print submissions['total_size']
    0

=== Submission Devices ===

The table HWSubmissionDevice associates devices with submissions.
(See hwdb-device-tables.txt for details.)

A single HWSubmissionDevice record can be accessed via its database ID.

    >>> submission_device = webservice.get(
    ...     '/+hwdb/+submissiondevice/3').jsonBody()
    >>> pprint_entry(submission_device)
    device_link: u'http://api.launchpad.dev/beta/+hwdb/+device/2'
    driver_link: u'http://api.launchpad.dev/beta/+hwdb/+driver/1'
    hal_device_id: 121
    id: 3
    parent_link: u'http://api.launchpad.dev/beta/+hwdb/+submissiondevice/2'
    resource_type_link: u'http://api.launchpad.dev/beta/#h_w_submission_device'
    self_link: u'http://api.launchpad.dev/beta/+hwdb/+submissiondevice/3'

The HWSubmissionDevice records belonging to a given submission can
are stored in HWSubmission.devices.

    >>> url = '/+hwdb/+submission/sample-submission/devices?ws.size=3'
    >>> submission_devices = webservice.get(url).jsonBody()
    >>> for submission_device in submission_devices['entries']:
    ...     pprint_entry(submission_device)
    device_link: u'http://api.launchpad.dev/beta/+hwdb/+device/2'
    driver_link: None
    hal_device_id: 121
    id: 2
    parent_link: u'.../+hwdb/+submissiondevice/1'
    resource_type_link: u'.../#h_w_submission_device'
    self_link: u'.../+hwdb/+submissiondevice/2'
    device_link: u'.../+hwdb/+device/5'
    driver_link: None
    hal_device_id: 65
    id: 16
    parent_link: u'.../+hwdb/+submissiondevice/1'
    resource_type_link: u'.../#h_w_submission_device'
    self_link: u'.../+hwdb/+submissiondevice/16'
    device_link: u'.../+hwdb/+device/2'
    driver_link: u'.../+hwdb/+driver/1'
    hal_device_id: 121
    id: 3
    parent_link: u'.../+hwdb/+submissiondevice/2'
    resource_type_link: u'.../#h_w_submission_device'
    self_link: u'.../+hwdb/+submissiondevice/3'
