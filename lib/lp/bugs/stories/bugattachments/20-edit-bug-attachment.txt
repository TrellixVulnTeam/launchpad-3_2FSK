We can also edit the attachment details, let's navigate to that page.

    >>> user_browser.open('http://bugs.launchpad.dev/firefox/+bug/1')
    >>> user_browser.getLink(url='+attachment/1').click()
    >>> user_browser.url
    'http://bugs.launchpad.dev/firefox/+bug/1/+attachment/1'

    >>> 'Bug #1 - Edit attachment' in user_browser.contents
    True

There's also an option to cancel, which takes you back to the bug
page, maintaining the firefox context.

    >>> user_browser.getLink('Cancel')
    <Link text='Cancel' url='http://bugs.launchpad.dev/firefox/+bug/1'>

After editing the attachment details (we leave some leading and trailing
whitespace to test that's correctly stripped)...

    >>> user_browser.getControl('Title').value = '   Another title  '
    >>> user_browser.getControl('Content Type').value = 'text/html'
    >>> user_browser.getControl('Change').click()

...we're redirected to the bug page

    >>> user_browser.url
    'http://bugs.launchpad.dev/firefox/+bug/1'

    >>> 'Another title' in user_browser.contents
    True

We can edit the attachment to be a patch.

    >>> user_browser.getLink(url='+attachment/1').click()
    >>> patch_control = user_browser.getControl(
    ...     'This attachment contains a solution (patch) for this bug')
    >>> patch_control.selected = True
    >>> user_browser.getControl('Change').click()

The server now checks if the attachment looks like a patch. In this case,
is doesn't, and we get the edit page again, with a message asking us if
the attachment should indeed be labeled as a patch

    >>> user_browser.url
    'http://bugs.launchpad.dev/firefox/+bug/1/+attachment/1/+confirm-is-patch'

    >>> print extract_text(find_tags_by_class(
    ...     user_browser.contents, 'documentDescription')[0])
    This file does not look like a patch.
    What is a patch?

We are sure that this file is indeed a patch, so let's activate the
currenty inactive "yes" radion button of the question "Is this a patch?"
again and submit the form.

    >>> patch_control_yes = user_browser.getControl('yes')
    >>> patch_control_yes.selected
    False
    >>> patch_control_no = user_browser.getControl('no')
    >>> patch_control_no.selected
    True
    >>> patch_control_yes.selected = True
    >>> user_browser.getControl('Change').click()

Now we are redirected to the main bug page...

    >>> user_browser.url
    'http://bugs.launchpad.dev/firefox/+bug/1'

...the attachment that became a patch is now shown in the portlet
"Patches"...

    >>> patches = find_portlet(user_browser.contents, 'Patches')
    >>> for li_tag in patches.findAll('li', 'download-attachment'):
    ...   print li_tag.a.renderContents()
    Another title
    A fix for this bug.
    A better icon for foo
    the foo3 patch
    the foo4 patch
    the foo5 patch

...while it is gone from the portlet "Bug attachments".

    >>> attachments = find_portlet(user_browser.contents, 'Bug attachments')
    >>> for li_tag in attachments.findAll('li', 'download-attachment'):
    ...   print li_tag.a.renderContents()
    bar.txt
    More data

Clicking the link "Add patch" in the patches portlet opens the form
to add bug comments with the checkbox "This attachment is a patch"
enabled.

    >>> user_browser.open('http://bugs.launchpad.dev/firefox/+bug/1')
    >>> user_browser.getLink('Add patch').click()
    >>> patch_checkbox = user_browser.getControl(
    ...     'This attachment contains a solution (patch) for this bug')
    >>> patch_checkbox.selected
    True
