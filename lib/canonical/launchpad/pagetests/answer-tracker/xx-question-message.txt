= Question messages =

Question messages are plain text. They are formated as HTML for web
pages. Many messages originate from emails where unwanted or
unescessay content is included. Note: This set of tests is generally
the same rules as xx-bug-comments-truncated.txt; changes here may
require changes to that test.

Let's have an authenticated user create a message in the style of
an email post to examine the markup rules. This message contains a
quoted passage, and a signature with an email address in it.

    >>> # Note that no-priv does not have permission to create messages.
    >>> browser.addHeader("Authorization", 'Basic test@canonical.com:test')
    >>> browser.open('http://answers.launchpad.dev/ubuntu/+question/11')
    >>> browser.title.decode('utf-8')
    u'Ubuntu question #11: ...Continue playing after shutdown...'
    >>> browser.getControl('Message').value = (
    ...     "Top quoting is bad netiquette.\n"
    ...     "The leading text will be displayed\n"
    ...     "normally--no markup to hide it from view.\n"
    ...     "\n"
    ...     "Somebody said sometime ago:\n"
    ...     "> 1. Remove the letters  c, j, q, x, w\n"
    ...     ">    from the English Language.\n"
    ...     "> 2. Remove the penny from US currency.\n"
    ...     "\n"
    ...     "--\n"
    ...     "______________________\n"
    ...     "human@somewhere.org\n"
    ...     "Witty signatures rock!\n")
    >>> browser.getControl("I'm Providing More Information").click()


== Email addresses are only shown to authenticated users ==

Email addresses are visible to authenitcated users. Sample Person is
authenticated already, how else could he have created the message.
He will see 'human@somewhere.org'

    >>> browser.title.decode('utf-8')
    u'Ubuntu question #11: ...Continue playing after shutdown...'
    >>> text = find_tags_by_class(browser.contents, 'boardCommentBody')[-1]
    >>> print extract_text(text.findAll('p')[-1])
    --
    ______________________
    human@somewhere.org
    Witty signatures rock!

Unautheticated users, such as a bot will see the mock email address
of 'person@domain.dom'. Anon is unauthenticated, he will see the
obfuscated email address.

    >>> anon_browser.open('http://answers.launchpad.dev/ubuntu/+question/11')
    >>> anon_browser.title.decode('utf-8')
    u'Ubuntu question #11: ...Continue playing after shutdown...'
    >>> text = find_tags_by_class(
    ...     anon_browser.contents, 'boardCommentBody')[-1]
    >>> print extract_text(text.findAll('p')[-1])
    --
    ______________________
    person@domain.dom
    Witty signatures rock!


== Signatures and quoted passages are hidden ==

The style and script in the user_browser control the display and behaviour
of content inside tags with the class 'foldable'. The script adds a
link to toggle the diplay of the foldable text between none and inline.

Signatures are identified by paragraphs with a starting line like '--'.
The entire content of the paragraph is wrapped by a tag of 'foldable'
class. Continuing the Anon since all users get the same markup, we can
see

    >>> # XXX sinzui 2007-06-14 bug 120425
    >>> # Pagetests cannot test CSS and JS behaviour.
    >>> # We can only check that the markup includes the hooks
    >>> # for the style and script.
    >>> print text.findAll('p')[-1]
    <p><span class="foldable">--...
    person@domain.dom<br />
    Witty signatures rock!
    </span></p>

Quoted passages are indentified by lines that start with '>', '|', ':'.
The lines represents many paragraphs of quoted text, but we mark the
block of content as a single paragraph. The quoted lines are often
preceeded by a citation line. Only the quoted lines are wrapped with a
tag of 'foldable' class, citation lines are always displayed. Again
we can continue with Anon to see the markup.

    >>> print text.findAll('p')[-2]
    <p>Somebody said sometime ago:<br />
    <span class="foldable">
    &gt; 1. Remove the letters  c, j, q, x, w<br />
    &gt;    from the English Language.<br />
    &gt; 2. Remove the penny from US currency.
    </span></p>
