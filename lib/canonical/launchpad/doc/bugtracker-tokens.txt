= Using BugTracker Login Tokens =

Launchpad offers an XML-RPC interface for generating bug tracker tokens.

    >>> import xmlrpclib
    >>> from zope.component import getUtility
    >>> from canonical.functional import XMLRPCTestTransport
    >>> from canonical.launchpad.interfaces import ILoginTokenSet
    >>> bugtracker_api = xmlrpclib.ServerProxy(
    ...     'http://xmlrpc-private.launchpad.dev:8087/bugs',
    ...     transport=XMLRPCTestTransport())

    >>> token_id = bugtracker_api.newBugTrackerToken()
    >>> token = getUtility(ILoginTokenSet).get(token_id)
    >>> token
    <LoginToken at ...>

    >>> print token.tokentype.title
    Launchpad is authenticating itself with a remote bug tracker.

These LoginTokens are used by Launchpad to authenticate with external
bug trackers. We pass the token to the bug tracker and it in turn then
uses the token's canonical URL to consume that token.

    >>> from canonical.launchpad.webapp import canonical_url
    >>> from canonical.launchpad.webapp.servers import (
    ...     LaunchpadTestRequest)
    >>> test_request = LaunchpadTestRequest(method='POST')
    >>> token_url = canonical_url(
    ...     token, request=test_request, rootsite='mainsite',
    ...     view_name='+bugtracker-handshake')

    >>> print token_url
    http://launchpad.dev/token/.../+bugtracker-handshake

Visiting the token's +bugtracker-handshake URL will result in an HTTP
200 response if the token is valid.

    >>> view = getView(token, '+bugtracker-handshake', test_request)
    >>> view()
    SOMETHING HAPPEN

#The token will now be consumed. If we try to access the
#+bugtracker-handshake URL again, we will receive an HTTP 401
#(Unauthorized) response.
#
#    >>> view = getView(token, '+bugtracker-handshake', test_request)
#    >>> view()
#    SOMETHING ELSE HAPPEN
#
#Only POST requests are valid when accessing a +bugtracker-handshake URL.
#If we attempt another request method, such as a GET, we will receive an
#HTTP 405 (Method Not Allowed) response.
#
#    >>> token_id = bugtracker_api.newBugTrackerToken()
#    >>> token = getUtility(ILoginTokenSet).get(token_id)
#    >>> test_request = LaunchpadTestRequest(method='GET')
#
#    >>> view = getView(token, '+bugtracker-handshake', test_request)
#    >>> view()
#    OH NOES, NOW SOMETHING ELSE HAPPEN
#
#However, since the request was invalid the token will not have been
#consumed.
#
#    >>> token = getUtility(ILoginTokenSet).get(token_id)
#    >>> print token.date_consumed
#    False
