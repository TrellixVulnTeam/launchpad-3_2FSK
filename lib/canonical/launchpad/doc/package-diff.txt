= Package Diff =

The 'package-diff' subsystem allows users to request a diff between
two SourcePackageReleases.

The diff can be requested by any user with permission to view both
packages and will be performed frequently by our infrastructure.


== Requesting a Diff ==

First we have to retrieve a SourcePackageRelease from the sampledata,
let's use 'pmount' sources.

    >>> from canonical.launchpad.interfaces import (
    ...     IDistributionSet, IPersonSet)

    >>> ubuntu = getUtility(IDistributionSet).getByName('ubuntu')
    >>> pmount = ubuntu.getSourcePackage('pmount')

    >>> pmount_from = pmount['0.1-2'].sourcepackagerelease
    >>> pmount_to = pmount['0.1-1'].sourcepackagerelease

A packageDiff can be created from the two packages by calling
requestDiffTo(). It takes two arguments: the user requesting the
packageDiff, and the sourcepackagerelease to that has the changes.

Requesting a diff from pmount_0.1-2 to pmount_0.1-1.

    >>> cprov = getUtility(IPersonSet).getByName('cprov')
    >>> package_diff = pmount_from.requestDiffTo(
    ...     requester=cprov, to_sourcepackagerelease=pmount_to)

Let's inspect the PackageDiff record created.

    >>> from canonical.launchpad.interfaces import IPackageDiff
    >>> from canonical.launchpad.webapp.testing import verifyObject

    >>> verifyObject(IPackageDiff, package_diff)
    True

Its main attributes are:

 * 'requester', which maps to a `IPerson`, the user who made the diff
   request.

    >>> from canonical.launchpad.interfaces import IPerson
    >>> verifyObject(IPerson, package_diff.requester)
    True

    >>> print package_diff.requester.displayname
    Celso Providelo

 * 'from_source', which maps to a `ISourcePackageRelease`, the base
   source used in the diff.

    >>> from canonical.launchpad.interfaces import ISourcePackageRelease
    >>> verifyObject(ISourcePackageRelease, package_diff.from_source)
    True

    >>> print package_diff.from_source.title
    pmount - 0.1-2

 * 'to_source', which maps to a `ISourcePackageRelease`, the result
   source used in the diff.

    >>> from canonical.launchpad.interfaces import ISourcePackageRelease
    >>> verifyObject(ISourcePackageRelease, package_diff.to_source)
    True

    >>> print package_diff.to_source.title
    pmount - 0.1-1

Since the PackageDiff was not yet performed, both, 'date_fulfilled'
and 'diff_content' attributes are empty.

    >>> print package_diff.date_fulfilled
    None

    >>> print package_diff.diff_content
    None

IPackageDiff offers a property that return the 'title' of the diff
request.

    >>> print package_diff.title
    Package diff from pmount - 0.1-2 to pmount - 0.1-1

An attempt to record an already recorded DiffRequest will result in an
error:

    >>> dup_diff = pmount_from.requestDiffTo(
    ...     requester=cprov, to_sourcepackagerelease=pmount_to)
    Traceback (most recent call last):
    ...
    PackageDiffAlreadyRequested: Package diff from pmount - 0.1-2 to
    pmount - 0.1-1 was already requested by Celso Providelo


== Diff request for source uploads ==

When a source package upload is processed, the upload-processor
already requests a package diff against the immediate ancestry.

Before starting let's enable the universe component in hoary in order
to be able to accept the NEW packages.

    >>> from canonical.launchpad.database.component import (
    ...     ComponentSelection)
    >>> from canonical.launchpad.interfaces import IComponentSet

    >>> hoary = ubuntu.getSeries('hoary')
    >>> universe = getUtility(IComponentSet)['universe']
    >>> selection = ComponentSelection(
    ...     distroseries=hoary, component=universe)

`FakePackager` (see fakepackager.txt) handles the packaging and upload
of a new source series for us. We can use this to avoid messing with
sampledata to create valid packages.

    >>> from canonical.launchpad.testing.fakepackager import FakePackager
    >>> login('foo.bar@canonical.com')
    >>> packager = FakePackager(
    ...     'biscuit', '1.0', 'foo.bar@canonical.com-passwordless.sec')

And setup the test_keys in order to build and upload signed packages.

    >>> from canonical.launchpad.ftests import import_public_test_keys
    >>> import_public_test_keys()

When the first version of 'biscuit' is uploaded, since there is no
suitable ancentry, no diff is requested.

    >>> packager.buildUpstream()
    >>> packager.buildSource(signed=False)
    >>> biscuit_one_pub = packager.uploadSourceVersion(
    ...     '1.0-1', policy='sync')

    >>> biscuit_one_pub.sourcepackagerelease.package_diffs.count()
    0

When 1.0-8 is uploaded and 1.0-1 is published, the upload-processor
requests a diff, since there is a suitable ancestry.

    >>> packager.buildVersion('1.0-8', changelog_text="cookies")
    >>> packager.buildSource(signed=False)
    >>> biscuit_eight_pub = packager.uploadSourceVersion(
    ...     '1.0-8', policy='sync')

    >>> [diff] = biscuit_eight_pub.sourcepackagerelease.package_diffs
    >>> print diff.title
    Package diff from biscuit - 1.0-8 to biscuit - 1.0-1

We will release ubuntu/hoary so we can upload to post-RELEASE pockets.

    >>> from canonical.launchpad.interfaces import DistroSeriesStatus
    >>> hoary.status = DistroSeriesStatus.CURRENT

We upload version '1.0-9' to hoary-updates and get the diff against
the last published version in the RELEASE pocket.

    >>> packager.buildVersion('1.0-9', changelog_text="cookies")
    >>> packager.buildSource(signed=False)
    >>> biscuit_nine_pub = packager.uploadSourceVersion(
    ...     '1.0-9', policy='sync', suite='hoary-updates')

    >>> [diff] = biscuit_nine_pub.sourcepackagerelease.package_diffs
    >>> print diff.title
    Package diff from biscuit - 1.0-9 to biscuit - 1.0-8

The subsequent version uploaded to hoary-updates will get a diff
against 1.0-9.

    >>> packager.buildVersion('1.0-10', changelog_text="cookies")
    >>> packager.buildSource(signed=False)
    >>> biscuit_ten_pub = packager.uploadSourceVersion(
    ...     '1.0-10', policy='sync', suite='hoary-updates')

    >>> [diff] = biscuit_ten_pub.sourcepackagerelease.package_diffs
    >>> print diff.title
    Package diff from biscuit - 1.0-10 to biscuit - 1.0-9

An upload to other pocket, in this case hoary-proposed, will get a diff
against the last version in the RELEASE pocket.

    >>> packager.buildVersion('1.0-11', changelog_text="cookies")
    >>> packager.buildSource(signed=False)
    >>> biscuit_eleven_pub = packager.uploadSourceVersion(
    ...     '1.0-11', policy='sync', suite='hoary-proposed')

    >>> [diff] = biscuit_eleven_pub.sourcepackagerelease.package_diffs
    >>> print diff.title
    Package diff from biscuit - 1.0-11 to biscuit - 1.0-8

For testing diffs in the PPA context we need to activate the PPA for
Foo Bar.

    >>> from canonical.launchpad.interfaces import (
    ...     ArchivePurpose, IArchiveSet, IPersonSet)
    >>> foobar = getUtility(IPersonSet).getByName('name16')
    >>> ppa = getUtility(IArchiveSet).new(
    ...     owner=foobar, distribution=ubuntu, purpose=ArchivePurpose.PPA)

We will upload version 1.0-2 to Foo Bar's PPA and since it was never
published in the PPA context it will get a diff against the last
version in the PRIMARY archive in the RELEASE pocket.

    >>> packager.buildVersion('1.0-2', changelog_text="unterzeichnet")
    >>> packager.buildSource()
    >>> biscuit_two_pub = packager.uploadSourceVersion(
    ...     '1.0-2', archive=foobar.archive)

    >>> [diff] = biscuit_two_pub.sourcepackagerelease.package_diffs
    >>> print diff.title
    Package diff from biscuit - 1.0-2 to biscuit - 1.0-8

A subsequent upload in the PPA context will get a diff against 1.0-2,
the version found in its context.

    >>> packager.buildVersion('1.0-3', changelog_text="unterzeichnet")
    >>> packager.buildSource()
    >>> biscuit_three_pub = packager.uploadSourceVersion(
    ...     '1.0-3', archive=foobar.archive)

    >>> [diff] = biscuit_three_pub.sourcepackagerelease.package_diffs
    >>> print diff.title
    Package diff from biscuit - 1.0-3 to biscuit - 1.0-2


== Performing a Diff ==

Now we will actually perform a package diff and look at the results.

In order for the uploaded files to be flushed to the librarian we need
to commit the transaction here.

    >>> import transaction
    >>> transaction.commit()

The auxiliary function below will facilitate the viewing of diff results.

    >>> from subprocess import Popen, PIPE
    >>> import tempfile

    >>> def get_diff_results(diff):
    ...     lfa = diff.diff_content
    ...     if lfa is None:
    ...         return None
    ...     lfa.open()
    ...     pdiff_content = lfa.read()
    ...     lfa.close()
    ...     fhandle, fname = tempfile.mkstemp()
    ...     fhandle = open(fname, 'w')
    ...     fhandle.write(pdiff_content)
    ...     fhandle.close()
    ...     fhandle = open(fname)
    ...     child = Popen(['gunzip'], stdin=fhandle, stdout=PIPE)
    ...     diffresult = child.stdout.read()
    ...     fhandle.close()
    ...     return diffresult

Let's obtain the diff that was created when package "biscuit - 1.0-8"
was uploaded.

    >>> [diff] = biscuit_eight_pub.sourcepackagerelease.package_diffs

Now we can run it.

    >>> diff.performDiff()

Since it stores the diff results in the librarian we need to commit the
transaction before we can access the file.

    >>> transaction.commit()

Now we can compare the package diff outcome to the debdiff output
(obtained manually on the shell) for the packages in question.

    >>> actual_diff = get_diff_results(diff)
    >>> print "Diff follows:\n" + actual_diff
    Diff follows:...
    diff -u biscuit-1.0/debian/changelog biscuit-1.0/debian/changelog
    --- biscuit-1.0/debian/changelog
    +++ biscuit-1.0/debian/changelog
    @@ -1,9 +1,3 @@
    -biscuit (1.0-8) hoary; urgency=low
    -
    -  * cookies
    -
    - -- Foo Bar <foo.bar@canonical.com>  ...
    -
     biscuit (1.0-1) hoary; urgency=low
    <BLANKLINE>
       * Initial Upstream package
    ...

XXX cprov 20080515: the first and the last ellipses in the text
printed above are necessary to cope with the different ordering used
in the dapper vs hardy `debdiff` package. They ignore the diff in the
'biscuit-1.0/contents' file, which is presented at the end in hardy
and at the begin in dapper. In order to be safer, we will at least
check that the unordered chunk is included in the actual diff

    >>> unordered_chunk = (
    ...     "diff -u biscuit-1.0/contents biscuit-1.0/contents\n"
    ...     "--- biscuit-1.0/contents\n"
    ...     "+++ biscuit-1.0/contents\n"
    ...     "@@ -3 +2,0 @@\n"
    ...     "-1.0-8\n")

    >>> unordered_chunk in actual_diff
    True


== Dealing with all PackageDiff objects ==

The PackageDiffSet utility implements simple auxiliary methods to deal
directly with PackageDiffs objects.

Let's flush all the updates done.

    >>> from canonical.database.sqlbase import flush_database_updates
    >>> flush_database_updates()

Those methods are useful when the callsites are not interested only in
PackageDiffs attached to specific SourcePackageReleases.

Using the utility it's possible to iterate over all PackageDiff
stored.

    >>> from canonical.launchpad.interfaces import IPackageDiffSet
    >>> packagediff_set = getUtility(IPackageDiffSet)

    >>> for diff in packagediff_set:
    ...     print diff.title, diff.date_fulfilled is not None
    Package diff from biscuit - 1.0-3 to biscuit - 1.0-2  False
    Package diff from biscuit - 1.0-2 to biscuit - 1.0-8  False
    Package diff from biscuit - 1.0-11 to biscuit - 1.0-8 False
    Package diff from biscuit - 1.0-10 to biscuit - 1.0-9 False
    Package diff from biscuit - 1.0-9 to biscuit - 1.0-8  False
    Package diff from biscuit - 1.0-8 to biscuit - 1.0-1  True
    Package diff from pmount - 0.1-2 to pmount - 0.1-1    False

Or only the PackageDiffs not yet fullfilled.

    >>> for diff in packagediff_set.getPendingDiffs():
    ...     print diff.title, diff.date_fulfilled is not None
    Package diff from pmount - 0.1-2 to pmount - 0.1-1    False
    Package diff from biscuit - 1.0-9 to biscuit - 1.0-8  False
    Package diff from biscuit - 1.0-10 to biscuit - 1.0-9 False
    Package diff from biscuit - 1.0-11 to biscuit - 1.0-8 False
    Package diff from biscuit - 1.0-2 to biscuit - 1.0-8  False
    Package diff from biscuit - 1.0-3 to biscuit - 1.0-2  False

getPendingDiffs() results can optionally be limited.

    >>> packagediff_set.getPendingDiffs().count()
    6

    >>> packagediff_set.getPendingDiffs(limit=2).count()
    2

A arbitrary PackageDiff object can be easily retrieved by database ID
if necessary.

    >>> [diff] = biscuit_eight_pub.sourcepackagerelease.package_diffs
    >>> candidate_diff = packagediff_set.get(diff.id)
    >>> candidate_diff == diff
    True

