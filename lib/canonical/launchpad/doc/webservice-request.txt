Most of the time, web service requests come through the web service
layer. But there are times when a request that came through the
website neeeds to be treated as a web service request. It's easy to
adapt a normal request into an IWebServiceLayer request.

    >>> from canonical.launchpad.webapp.servers import LaunchpadTestRequest
    >>> from canonical.lazr.interfaces.rest import WebServiceLayer

    >>> website_request = LaunchpadTestRequest(
    ...     SERVER_URL="http://launchpad.dev/")
    >>> request = WebServiceLayer(website_request)
    >>> request
    <canonical.launchpad.webapp.servers.WebServiceClientRequest ...>
    >>> request.getApplicationURL()
    'http://launchpad.dev/api/beta'

This works for HTTPS requests as well as HTTP requests:

    >>> website_request = LaunchpadTestRequest(
    ...     SERVER_URL="https://launchpad.dev/")
    >>> request = WebServiceLayer(website_request)
    >>> request
    <canonical.launchpad.webapp.servers.WebServiceClientRequest ...>
    >>> request.getApplicationURL()
    'https://launchpad.dev/api/beta'


= The JSON Cache=

Objects can be stored in a cache so that they can be included in
Javascript code inside the template. An object can be stored in the
cache's 'objects' dict or its 'links' dict.

    >>> from canonical.lazr.interfaces.rest import IJSONRequestCache
    >>> cache = IJSONRequestCache(website_request)

The 'objects' dict is for objects that should have their full JSON
representations put into the template.

    >>> cache.objects['object1'] = 'foo'
    >>> cache.objects['object2'] = 'bar'
    >>> for key in cache.objects:
    ...     print "%s: %s" % (key, cache.objects[key])
    object1: foo
    object2: bar

The 'links' dict is for objects that should have their self_links put
into the template, not their whole representations.

    >>> cache.links['objectA'] = 'foo'
    >>> cache.links['objectB'] = 'bar'
    >>> for key in cache.links:
    ...     print "%s: %s" % (key, cache.links[key])
    objectA: foo
    objectB: bar

The normal way to access a request's cache is through TALES.

    >>> from canonical.launchpad.ftests import test_tales
    >>> cache = test_tales("request/webservicerequest:cache",
    ...                    request=website_request)
    >>> for key in cache.links:
    ...     print "%s: %s" % (key, cache.links[key])
    objectA: foo
    objectB: bar
