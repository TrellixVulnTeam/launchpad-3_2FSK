Ubuntu packaging
================

We want to be able to edit the ubuntu packaging for a product series,
and we also want to be able to create it where there was none
previously.

first, make sure we can see a page for this on the trunk series of
evolution.  The form field shows that it is currently mapped to
evolution.

    >>> print http(r"""
    ... GET /evolution/trunk/+ubuntupkg HTTP/1.1
    ... Authorization: Basic Y2FybG9zQGNhbm9uaWNhbC5jb206dGVzdA==
    ... """)
    HTTP/1.1 200 Ok
    ...
    <h1>Ubuntu source packaging</h1>
    ...
    <form method="POST"
    action="http://localhost/evolution/trunk/+ubuntupkg">
    ...
    <input type="text" name="ubuntupkg" size="30"
    value="evolution" />
    ...

Now let's POST to that form, we'll say we are linking it to package
pmount, which is clearly not correct! In the resulting page, you can see
that the form now says pmount, and there is a new row in the history
that includes it.

    >>> print http(r"""
    ... POST /evolution/trunk/+ubuntupkg HTTP/1.1
    ... Content-Length: 36
    ... Content-Type: application/x-www-form-urlencoded
    ... Authorization: Basic Y2FybG9zQGNhbm9uaWNhbC5jb206dGVzdA==
    ...
    ... ubuntupkg=pmount&set_ubuntu_pkg=Update""")
    HTTP/1.1 200 Ok
    Content-Length: ...
    Content-Type: text/html;charset=utf-8
    <BLANKLINE>
    ...
    <input type="text" name="ubuntupkg" size="30"
    value="pmount" />
    ...

OK, if that worked, we better set it back to where it was so we restore
balance to the Force...

    >>> print http(r"""
    ... POST /evolution/trunk/+ubuntupkg HTTP/1.1
    ... Content-Length: 39
    ... Content-Type: application/x-www-form-urlencoded
    ... Authorization: Basic Y2FybG9zQGNhbm9uaWNhbC5jb206dGVzdA==
    ...
    ... ubuntupkg=evolution&set_ubuntu_pkg=Update""")
    HTTP/1.1 200 Ok
    Content-Length: ...
    Content-Type: text/html;charset=utf-8
    <BLANKLINE>
    ...
    <input type="text" name="ubuntupkg" size="30"
    value="evolution" />
    ...

Now lets make sure we can create a new ubuntu package relationship where
none existed previously. First make sure none exists, by viewing the
form, it should have an empty field for ubuntupkg.

    >>> print http(r"""
    ... GET /thunderbird/trunk/+ubuntupkg HTTP/1.1
    ... Authorization: Basic Y2FybG9zQGNhbm9uaWNhbC5jb206dGVzdA==
    ... """)
    HTTP/1.1 200 Ok
    Content-Length: ...
    Content-Type: text/html;charset=utf-8
    <BLANKLINE>
    ...
    <input type="text" name="ubuntupkg" size="30"
    value="" />
    ...

Trying to add a Source Package with an non-existent name should fail
graciously.

    >>> print http(r"""
    ... POST /thunderbird/trunk/+ubuntupkg HTTP/1.1
    ... Authorization: Basic Y2FybG9zQGNhbm9uaWNhbC5jb206dGVzdA==
    ... Content-Length: 37
    ... Content-Type: application/x-www-form-urlencoded
    ...
    ... ubuntupkg=moz&set_ubuntu_pkg=Update""")
    HTTP/1.1 200 Ok
    ...
    ...<div class="error message">Invalid source package name moz</div>...
    ...
    <input type="text" name="ubuntupkg" size="30"
    value="" />
    ...

Now let's post to it. We'll lie and say it's the mozilla source package
in the current ubuntu distroseries.

    >>> print http(r"""
    ... POST /thunderbird/trunk/+ubuntupkg HTTP/1.1
    ... Authorization: Basic Y2FybG9zQGNhbm9uaWNhbC5jb206dGVzdA==
    ... Content-Length: 37
    ... Content-Type: application/x-www-form-urlencoded
    ...
    ... ubuntupkg=mozilla&set_ubuntu_pkg=Update""")
    HTTP/1.1 200 Ok
    Content-Length: ...
    Content-Type: text/html;charset=utf-8
    <BLANKLINE>
    ...
    <input type="text" name="ubuntupkg" size="30"
    value="mozilla" />
    ...

Markup in the source package name is escaped in error notices to
prevent XSS markup injection. No Privileges Person cannot insert an
executable script into the page using an invalid source package name.

    >>> user_browser.open('http://launchpad.dev/bzr/trunk/')
    >>> user_browser.getLink('Link to Ubuntu package').click()
    >>> user_browser.title
    'Ubuntu source packaging'

    >>> user_browser.getControl(name='ubuntupkg').value = (
    ...     "bzr<script>window.alert('XSS')</script>")
    >>> user_browser.getControl('Update').click()
    >>> for message in get_feedback_messages(user_browser.contents):
    ...     print message
    Invalid source package name
    bzr&lt;script&gt;window.alert('XSS')&lt;/script&gt;
