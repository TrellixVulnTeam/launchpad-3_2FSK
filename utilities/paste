#!/usr/bin/env python2.4

# Copyright 2004-2008 Canonical Ltd.  All rights reserved.

import base64
import httplib
import os
import pwd
import sys
import urllib
import webbrowser

from optparse import OptionParser
from urlparse import urljoin

import _pythonpath

from ClientCookie import Cookie, CookieJar

from zope.testbrowser.browser import Browser


# Should we be able to override any of these?
AUTH_FILE = '~/.canonical_paste_auth'
PASTE_HOST = 'pastebin.canonical.com'
PASTE_PATH = ''


def parse_arguments():
    parser = OptionParser(usage='%prog [options] [title] < stdin')
    parser.add_option('-b', '--browser',
                      default=False, action='store_true',
                      help='Open web browser to the pastebin.')
    parser.add_option('-s', '--syntax',
                      default='text', type='string',
                      help='The syntax of the pastebin.')
    parser.add_option('-f', '--file',
                      type='string',
                      help='File to pastebin instead of stdin.')
    options, arguments = parser.parse_args()
    if len(arguments) == 0:
        parser.title = None
    elif len(arguments) == 1:
        parser.title = arguments[0]
    else:
        parser.error('Too many arguments')
        # Does not return
    parser.options = options
    parser.arguments = arguments
    return parser


def get_lp_auth_cookie(path):
    """Read the authentication file, and return a Cookie object."""
    path = os.path.expanduser(path)
    f = open(path)
    try:
        cookie_value = f.readline().strip()
    finally:
        f.close()
    return Cookie(
        version=0, name='lp', value=cookie_value,
        port=None, port_specified=False,
        domain='login.launchpad.net', domain_specified=True,
        domain_initial_dot=False, path='', path_specified=None,
        secure=True, expires=None, discard=True,
        comment=None, comment_url=None, rest=None, rfc2109=False)


def authenticate(browser):
    """Go through the OpenID process and authenticate."""
    # First click on the page where it says we have to log in.
    browser.getControl('Continue').click()
    # Then click on the page with nothing but a submit button.
    browser.getControl('Continue').click()

    # Now we're at the LP login. since we have sent the auth cookie, we
    # can sign in without specifying a user and password.
    try:
        browser.getControl('Sign In').click()
    except LookupError:
        return False
    else:
        return True


def main():
    parser = parse_arguments()
    try:
        poster = os.environ['USER']
    except KeyError:
        poster = pwd.getpwuid(os.getuid()).pw_name

    if parser.title is None:
        title = "The loser %s didn't even add a title" % poster
    else:
        title = parser.title

    if parser.options.file:
        f = open(parser.options.file)
        try:
            content = f.read()
        finally:
            f.close()
    else:
        content = sys.stdin.read()

    form = (
        ('poster', poster),
        ('syntax', [parser.options.syntax]),
        ('content', content),
        )

    # Figure out the authentication.
    lp_cookie = get_lp_auth_cookie(AUTH_FILE)
    cookiejar = CookieJar()
    cookiejar.set_cookie(lp_cookie)
    browser = Browser()
    browser.mech_browser.set_cookiejar(cookiejar)

    browser.open(urljoin('https://' + PASTE_HOST, PASTE_PATH))
    # We need to authenticate before pasting.
    if browser.getForm(name='oid_form') is not None:
        authenticated = authenticate(browser)
        if not authenticated:
            print "Your LP cookie is invalid. Please update %s" % AUTH_FILE
            return
    for name, value in form:
        browser.getControl(name=name).value = value
    browser.getControl('Paste!').click()
    print browser.url
    if parser.options.browser:
        webbrowser.open(browser.url)


if __name__ == '__main__':
    main()
