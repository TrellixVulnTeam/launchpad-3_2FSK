Person
======

In Launchpad, the Person class is overloaded to represent both people
and teams. Let's log in as Robert Collins to ensure we have the
privileges to do what we're going to demonstrate.

>>> from zope.component import getUtility
>>> from canonical.launchpad.interfaces import IPersonSet
>>> from canonical.launchpad.ftests import login

>>> login("robertc@robertcollins.net")

Access to people (Persons or Teams) is done through the IPersonSet
utility:

>>> personset = getUtility(IPersonSet)
>>> buttsource = personset.getByName('buttsource')
>>> buttsource.teamowner is None
False
>>> lifeless = personset.getByName('lifeless')
>>> lifeless.teamowner is None
True

An IPerson has an inTeam method to allow us to easily check if a
person is a member of a team. It accepts the team name as a string,
which is the common use case when checking permissions.

>>> ddaa = personset.getByName('ddaa')
>>> lifeless.inTeam(buttsource) and ddaa.inTeam(buttsource)
True

If a Person is not a Team then the Person object will not provide the
ITeam interface.

>>> from canonical.launchpad.interfaces import ITeam
>>> ITeam.providedBy(lifeless)
False

If a Person is a Team then the Person will provide the ITeam interface.

>>> ITeam.providedBy(buttsource)
True

We don't support changing a Person into a Team or a Team into a Person.

>>> lifeless.teamowner = ddaa
>>> ITeam.providedBy(lifeless)
False
>>> buttsource.teamowner = None
>>> ITeam.providedBy(buttsource)
True


Merging
-------

The method to perform the low level merging of two Persons
should only be used by the one true account merge workflow.

>>> foo = personset.getByName('name16')
>>> sample = personset.getByName('name12')
>>> admins = personset.getByName('admins')

XXX: Need to sort out permissions on PersonSet.merge

We can't merge teams

>>> personset.merge(admins, foo)
Traceback (most recent call last):
...
TypeError: ...

>>> personset.merge(foo, admins)
Traceback (most recent call last):
...
TypeError: ...

Nor can we merge an account that still has email addresses attached to it

>>> personset.merge(foo, sample)
Traceback (most recent call last):
...
ValueError: ...


Must login as 'sabdfl' cause he's the owner of the Ubuntu Team.
>>> login('mark@hbd.com')
>>> kw = {'name': 'empty', 'displayname': 'Empty Person'}
>>> empty = personset.newPerson(**kw)
>>> ubuntu_team = personset.getByName('name17')
>>> ubuntu_team.teamowner = empty
>>> personset.merge(empty, sample)

>>> from canonical.launchpad.database import Person
>>> cur = Person._connection._connection.cursor()
>>> cur.execute("select p1.name from person as p1, person as p2 where "
...             "p1.id = p2.teamowner and p2.name = 'name17'")
>>> cur.fetchone()[0]
u'sabdfl'

The account that has been merged is flagged. We can use this to eliminate
merged accounts from lists etc.

>>> cur.execute("SELECT merged FROM Person WHERE name='empty'")
>>> cur.fetchone()[0]
12

>>> cur.execute("SELECT merged FROM Person WHERE name='name12'")
>>> cur.fetchone()[0] is None
True


Searching for People
====================

If you want to do a more complex query to find people, use
IPersonSet.search.

>>> from canonical.launchpad.searchbuilder import NULL
>>> valid_people = personset.search(password = NULL)
>>> valid_people.count()
22

Passing no args would return all people:

>>> all_people = personset.search()
>>> all_people.count()
31
