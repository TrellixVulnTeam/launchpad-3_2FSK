-- Copyright 2009 Canonical Ltd.  This software is licensed under the
-- GNU Affero General Public License version 3 (see the file LICENSE).

-- Generated by:
-- pg_dump --format=p --schema-only --no-owner --no-privileges \
--     --table=Account --table=AccountPassword --table=AuthToken \
--     --table=EmailAddress --table=OpenIDAssociation \
--     --table=OpenIDAuthorization --table=OpenIDNonce \
--     --table=OpenIDRPSummary --table=ValidPersonCache \
--     --table=ValidPersonOrTeamCache launchpad_prod_4

--
-- PostgreSQL database dump
--

SET client_encoding = 'UTF8';
SET standard_conforming_strings = off;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET escape_string_warning = off;

SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: account; Type: TABLE; Schema: public; Owner: -; Tablespace: 
--

CREATE TABLE account (
    id integer NOT NULL,
    date_created timestamp without time zone DEFAULT timezone('UTC'::text, now()) NOT NULL,
    creation_rationale integer NOT NULL,
    status integer NOT NULL,
    date_status_set timestamp without time zone DEFAULT timezone('UTC'::text, now()) NOT NULL,
    displayname text NOT NULL,
    openid_identifier text DEFAULT generate_openid_identifier() NOT NULL,
    status_comment text,
    old_openid_identifier text
);


--
-- Name: TABLE account; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE account IS 'An account that may be used for authenticating to Canonical or other systems.';


--
-- Name: COLUMN account.status; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN account.status IS 'The status of the account.';


--
-- Name: COLUMN account.date_status_set; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN account.date_status_set IS 'When the status was last changed.';


--
-- Name: COLUMN account.displayname; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN account.displayname IS 'Name to display when rendering information about this account.';


--
-- Name: COLUMN account.openid_identifier; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN account.openid_identifier IS 'The key used to construct an OpenID identity URL for this account.';


--
-- Name: COLUMN account.status_comment; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN account.status_comment IS 'The comment on the status of the account.';


--
-- Name: COLUMN account.old_openid_identifier; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN account.old_openid_identifier IS 'The previous openid_identifier, used for transitions to the current openid_identifier.';


--
-- Name: account_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE account_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


--
-- Name: account_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE account_id_seq OWNED BY account.id;


--
-- Name: accountpassword; Type: TABLE; Schema: public; Owner: -; Tablespace: 
--

CREATE TABLE accountpassword (
    id integer NOT NULL,
    account integer NOT NULL,
    password text NOT NULL
);


--
-- Name: TABLE accountpassword; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE accountpassword IS 'A password used to authenticate an Account.';


--
-- Name: COLUMN accountpassword.password; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN accountpassword.password IS 'SSHA digest encrypted password.';


--
-- Name: accountpassword_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE accountpassword_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


--
-- Name: accountpassword_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE accountpassword_id_seq OWNED BY accountpassword.id;


--
-- Name: authtoken; Type: TABLE; Schema: public; Owner: -; Tablespace: 
--

CREATE TABLE authtoken (
    id integer NOT NULL,
    date_created timestamp without time zone DEFAULT timezone('UTC'::text, now()) NOT NULL,
    date_consumed timestamp without time zone,
    token_type integer NOT NULL,
    token text NOT NULL,
    requester integer,
    requester_email text,
    email text NOT NULL,
    redirection_url text
);


--
-- Name: TABLE authtoken; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE authtoken IS 'AuthToken stores one time tokens used by the authentication service for validating email addresses and other tasks that require verifying an email address is valid such as password recovery and account merging. This table will be cleaned occasionally to remove expired tokens. Expiry time is not yet defined.';


--
-- Name: COLUMN authtoken.date_created; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN authtoken.date_created IS 'The timestamp that this request was made.';


--
-- Name: COLUMN authtoken.date_consumed; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN authtoken.date_consumed IS 'The date and time when this token was consumed. It''s NULL if it hasn''t been consumed yet.';


--
-- Name: COLUMN authtoken.token_type; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN authtoken.token_type IS 'The type of request, as per dbschema.TokenType.';


--
-- Name: COLUMN authtoken.token; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN authtoken.token IS 'The token (not the URL) emailed used to uniquely identify this request. This token will be used to generate a URL that when clicked on will continue a workflow.';


--
-- Name: COLUMN authtoken.requester; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN authtoken.requester IS 'The Account that made this request. This will be null for password recovery requests.';


--
-- Name: COLUMN authtoken.requester_email; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN authtoken.requester_email IS 'The email address that was used to login when making this request. This provides an audit trail to help the end user confirm that this is a valid request. It is not a link to the EmailAddress table as this may be changed after the request is made. This field will be null for password recovery requests.';


--
-- Name: COLUMN authtoken.email; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN authtoken.email IS 'The email address that this request was sent to.';


--
-- Name: authtoken_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE authtoken_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


--
-- Name: authtoken_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE authtoken_id_seq OWNED BY authtoken.id;


--
-- Name: emailaddress; Type: TABLE; Schema: public; Owner: -; Tablespace: 
--

CREATE TABLE emailaddress (
    id integer NOT NULL,
    email text NOT NULL,
    person integer,
    status integer NOT NULL,
    date_created timestamp without time zone DEFAULT timezone('UTC'::text, now()) NOT NULL,
    account integer,
    CONSTRAINT emailaddress__is_linked__chk CHECK (((person IS NOT NULL) OR (account IS NOT NULL)))
);


--
-- Name: COLUMN emailaddress.email; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN emailaddress.email IS 'An email address used by a Person. The email address is stored in a casesensitive way, but must be case insensitivly unique.';


--
-- Name: emailaddress_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE emailaddress_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


--
-- Name: emailaddress_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE emailaddress_id_seq OWNED BY emailaddress.id;


--
-- Name: openidassociation; Type: TABLE; Schema: public; Owner: -; Tablespace: 
--

CREATE TABLE openidassociation (
    server_url character varying(2047) NOT NULL,
    handle character varying(255) NOT NULL,
    secret bytea,
    issued integer,
    lifetime integer,
    assoc_type character varying(64),
    CONSTRAINT secret_length_constraint CHECK ((length(secret) <= 128))
);


--
-- Name: openidauthorization; Type: TABLE; Schema: public; Owner: -; Tablespace: 
--

CREATE TABLE openidauthorization (
    id integer NOT NULL,
    account integer NOT NULL,
    client_id text,
    date_created timestamp without time zone DEFAULT timezone('UTC'::text, now()) NOT NULL,
    date_expires timestamp without time zone NOT NULL,
    trust_root text NOT NULL
);


--
-- Name: openidauthorization_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE openidauthorization_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


--
-- Name: openidauthorization_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE openidauthorization_id_seq OWNED BY openidauthorization.id;


--
-- Name: openidnonce; Type: TABLE; Schema: public; Owner: -; Tablespace: 
--

CREATE TABLE openidnonce (
    server_url character varying(2047) NOT NULL,
    "timestamp" integer NOT NULL,
    salt character(40) NOT NULL
);


--
-- Name: TABLE openidnonce; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE openidnonce IS 'Nonces for our OpenID consumer.';


--
-- Name: openidrpsummary; Type: TABLE; Schema: public; Owner: -; Tablespace: 
--

CREATE TABLE openidrpsummary (
    id integer NOT NULL,
    account integer NOT NULL,
    openid_identifier text NOT NULL,
    trust_root text NOT NULL,
    date_created timestamp without time zone DEFAULT timezone('UTC'::text, now()) NOT NULL,
    date_last_used timestamp without time zone DEFAULT timezone('UTC'::text, now()) NOT NULL,
    total_logins integer DEFAULT 1 NOT NULL
);


--
-- Name: TABLE openidrpsummary; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE openidrpsummary IS 'The summary of the activity between a person and an RP.';


--
-- Name: COLUMN openidrpsummary.account; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN openidrpsummary.account IS 'The account who used the RP.';


--
-- Name: COLUMN openidrpsummary.openid_identifier; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN openidrpsummary.openid_identifier IS 'The OpenID identifier used to login.';


--
-- Name: COLUMN openidrpsummary.trust_root; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN openidrpsummary.trust_root IS 'The trust root for the RP';


--
-- Name: COLUMN openidrpsummary.date_created; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN openidrpsummary.date_created IS 'The creation date of this summary; the first time the person used the RP.';


--
-- Name: COLUMN openidrpsummary.date_last_used; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN openidrpsummary.date_last_used IS 'The date the RP was last used.';


--
-- Name: COLUMN openidrpsummary.total_logins; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN openidrpsummary.total_logins IS 'The total number of times the RP was used by the person.';


--
-- Name: openidrpsummary_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE openidrpsummary_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


--
-- Name: openidrpsummary_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE openidrpsummary_id_seq OWNED BY openidrpsummary.id;


--
-- Name: validpersoncache; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW validpersoncache AS
    SELECT emailaddress.person AS id FROM emailaddress, account WHERE ((((emailaddress.account = account.id) AND (emailaddress.person IS NOT NULL)) AND (emailaddress.status = 4)) AND (account.status = 20));


--
-- Name: VIEW validpersoncache; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON VIEW validpersoncache IS 'A materialized view listing the Person.ids of all valid people (but not teams).';


--
-- Name: validpersonorteamcache; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW validpersonorteamcache AS
    SELECT person.id FROM ((person LEFT JOIN emailaddress ON ((person.id = emailaddress.person))) LEFT JOIN account ON ((emailaddress.account = account.id))) WHERE ((person.teamowner IS NOT NULL) OR ((account.status = 20) AND (emailaddress.status = 4)));


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE account ALTER COLUMN id SET DEFAULT nextval('account_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE accountpassword ALTER COLUMN id SET DEFAULT nextval('accountpassword_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE authtoken ALTER COLUMN id SET DEFAULT nextval('authtoken_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE emailaddress ALTER COLUMN id SET DEFAULT nextval('emailaddress_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE openidauthorization ALTER COLUMN id SET DEFAULT nextval('openidauthorization_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE openidrpsummary ALTER COLUMN id SET DEFAULT nextval('openidrpsummary_id_seq'::regclass);


--
-- Name: account_openid_identifier_key; Type: CONSTRAINT; Schema: public; Owner: -; Tablespace: 
--

ALTER TABLE ONLY account
    ADD CONSTRAINT account_openid_identifier_key UNIQUE (openid_identifier);


--
-- Name: account_pkey; Type: CONSTRAINT; Schema: public; Owner: -; Tablespace: 
--

ALTER TABLE ONLY account
    ADD CONSTRAINT account_pkey PRIMARY KEY (id);


--
-- Name: accountpassword_account_key; Type: CONSTRAINT; Schema: public; Owner: -; Tablespace: 
--

ALTER TABLE ONLY accountpassword
    ADD CONSTRAINT accountpassword_account_key UNIQUE (account);


--
-- Name: accountpassword_pkey; Type: CONSTRAINT; Schema: public; Owner: -; Tablespace: 
--

ALTER TABLE ONLY accountpassword
    ADD CONSTRAINT accountpassword_pkey PRIMARY KEY (id);


--
-- Name: authtoken__token__key; Type: CONSTRAINT; Schema: public; Owner: -; Tablespace: 
--

ALTER TABLE ONLY authtoken
    ADD CONSTRAINT authtoken__token__key UNIQUE (token);


--
-- Name: authtoken_pkey; Type: CONSTRAINT; Schema: public; Owner: -; Tablespace: 
--

ALTER TABLE ONLY authtoken
    ADD CONSTRAINT authtoken_pkey PRIMARY KEY (id);


--
-- Name: emailaddress_pkey; Type: CONSTRAINT; Schema: public; Owner: -; Tablespace: 
--

ALTER TABLE ONLY emailaddress
    ADD CONSTRAINT emailaddress_pkey PRIMARY KEY (id);


--
-- Name: openidassociation_pkey; Type: CONSTRAINT; Schema: public; Owner: -; Tablespace: 
--

ALTER TABLE ONLY openidassociation
    ADD CONSTRAINT openidassociation_pkey PRIMARY KEY (server_url, handle);


--
-- Name: openidauthorization_pkey; Type: CONSTRAINT; Schema: public; Owner: -; Tablespace: 
--

ALTER TABLE ONLY openidauthorization
    ADD CONSTRAINT openidauthorization_pkey PRIMARY KEY (id);


--
-- Name: openidnonce_pkey; Type: CONSTRAINT; Schema: public; Owner: -; Tablespace: 
--

ALTER TABLE ONLY openidnonce
    ADD CONSTRAINT openidnonce_pkey PRIMARY KEY (server_url, "timestamp", salt);


--
-- Name: openidrpsummary__account__trust_root__openid_identifier__key; Type: CONSTRAINT; Schema: public; Owner: -; Tablespace: 
--

ALTER TABLE ONLY openidrpsummary
    ADD CONSTRAINT openidrpsummary__account__trust_root__openid_identifier__key UNIQUE (account, trust_root, openid_identifier);


--
-- Name: openidrpsummary_pkey; Type: CONSTRAINT; Schema: public; Owner: -; Tablespace: 
--

ALTER TABLE ONLY openidrpsummary
    ADD CONSTRAINT openidrpsummary_pkey PRIMARY KEY (id);


--
-- Name: account__old_openid_identifier__idx; Type: INDEX; Schema: public; Owner: -; Tablespace: 
--

CREATE INDEX account__old_openid_identifier__idx ON account USING btree (old_openid_identifier);


--
-- Name: authtoken__date_consumed__idx; Type: INDEX; Schema: public; Owner: -; Tablespace: 
--

CREATE INDEX authtoken__date_consumed__idx ON authtoken USING btree (date_consumed);


--
-- Name: authtoken__date_created__idx; Type: INDEX; Schema: public; Owner: -; Tablespace: 
--

CREATE INDEX authtoken__date_created__idx ON authtoken USING btree (date_created);


--
-- Name: authtoken__requester__idx; Type: INDEX; Schema: public; Owner: -; Tablespace: 
--

CREATE INDEX authtoken__requester__idx ON authtoken USING btree (requester);


--
-- Name: emailaddress__account__key; Type: INDEX; Schema: public; Owner: -; Tablespace: 
--

CREATE UNIQUE INDEX emailaddress__account__key ON emailaddress USING btree (account) WHERE ((status = 4) AND (account IS NOT NULL));


--
-- Name: INDEX emailaddress__account__key; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON INDEX emailaddress__account__key IS 'Ensures that an Account only has one preferred email address';


--
-- Name: emailaddress__lower_email__key; Type: INDEX; Schema: public; Owner: -; Tablespace: 
--

CREATE INDEX emailaddress__lower_email__key ON emailaddress USING btree (lower(email));


--
-- Name: emailaddress__person__key; Type: INDEX; Schema: public; Owner: -; Tablespace: 
--

CREATE UNIQUE INDEX emailaddress__person__key ON emailaddress USING btree (person) WHERE ((status = 4) AND (person IS NOT NULL));


--
-- Name: INDEX emailaddress__person__key; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON INDEX emailaddress__person__key IS 'Ensures that a Person only has one preferred email address';


--
-- Name: emailaddress__person__status__idx; Type: INDEX; Schema: public; Owner: -; Tablespace: 
--

CREATE INDEX emailaddress__person__status__idx ON emailaddress USING btree (person, status);


--
-- Name: openidauthorixation__account__troot__expires__client_id__idx; Type: INDEX; Schema: public; Owner: -; Tablespace: 
--

CREATE INDEX openidauthorixation__account__troot__expires__client_id__idx ON openidauthorization USING btree (account, trust_root, date_expires, client_id);


--
-- Name: openidauthorixation__account__trust_root__key; Type: INDEX; Schema: public; Owner: -; Tablespace: 
--

CREATE UNIQUE INDEX openidauthorixation__account__trust_root__key ON openidauthorization USING btree (account, trust_root) WHERE (client_id IS NULL);


--
-- Name: openidauthorization__account__client_id__trust_root__key; Type: INDEX; Schema: public; Owner: -; Tablespace: 
--

CREATE UNIQUE INDEX openidauthorization__account__client_id__trust_root__key ON openidauthorization USING btree (account, client_id, trust_root) WHERE (client_id IS NOT NULL);


--
-- Name: openidrpsummary__openid_identifier__idx; Type: INDEX; Schema: public; Owner: -; Tablespace: 
--

CREATE INDEX openidrpsummary__openid_identifier__idx ON openidrpsummary USING btree (openid_identifier);


--
-- Name: openidrpsummary__trust_root__idx; Type: INDEX; Schema: public; Owner: -; Tablespace: 
--

CREATE INDEX openidrpsummary__trust_root__idx ON openidrpsummary USING btree (trust_root);


--
-- Name: _sl_logtrigger_200; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER _sl_logtrigger_200
    AFTER INSERT OR DELETE OR UPDATE ON account
    FOR EACH ROW
    EXECUTE PROCEDURE _sl.logtrigger('_sl', '200', 'kvvvvvvvv');


--
-- Name: _sl_logtrigger_201; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER _sl_logtrigger_201
    AFTER INSERT OR DELETE OR UPDATE ON accountpassword
    FOR EACH ROW
    EXECUTE PROCEDURE _sl.logtrigger('_sl', '201', 'kvv');


--
-- Name: _sl_logtrigger_274; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER _sl_logtrigger_274
    AFTER INSERT OR DELETE OR UPDATE ON emailaddress
    FOR EACH ROW
    EXECUTE PROCEDURE _sl.logtrigger('_sl', '274', 'kvvvvv');


--
-- Name: _sl_logtrigger_335; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER _sl_logtrigger_335
    AFTER INSERT OR DELETE OR UPDATE ON openidauthorization
    FOR EACH ROW
    EXECUTE PROCEDURE _sl.logtrigger('_sl', '335', 'kvvvvv');


--
-- Name: _sl_logtrigger_337; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER _sl_logtrigger_337
    AFTER INSERT OR DELETE OR UPDATE ON openidrpsummary
    FOR EACH ROW
    EXECUTE PROCEDURE _sl.logtrigger('_sl', '337', 'kvvvvvv');


--
-- Name: _sl_logtrigger_438; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER _sl_logtrigger_438
    AFTER INSERT OR DELETE OR UPDATE ON authtoken
    FOR EACH ROW
    EXECUTE PROCEDURE _sl.logtrigger('_sl', '438', 'kvvvvvvvv');


--
-- Name: _sl_logtrigger_439; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER _sl_logtrigger_439
    AFTER INSERT OR DELETE OR UPDATE ON openidassociation
    FOR EACH ROW
    EXECUTE PROCEDURE _sl.logtrigger('_sl', '439', 'kkvvvv');


--
-- Name: _sl_logtrigger_445; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER _sl_logtrigger_445
    AFTER INSERT OR DELETE OR UPDATE ON openidnonce
    FOR EACH ROW
    EXECUTE PROCEDURE _sl.logtrigger('_sl', '445', 'kkk');


--
-- Name: set_date_status_set_t; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_date_status_set_t
    BEFORE UPDATE ON account
    FOR EACH ROW
    EXECUTE PROCEDURE set_date_status_set();


--
-- Name: accountpassword_account_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY accountpassword
    ADD CONSTRAINT accountpassword_account_fkey FOREIGN KEY (account) REFERENCES account(id) ON DELETE CASCADE;


--
-- Name: authtoken__requester__fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY authtoken
    ADD CONSTRAINT authtoken__requester__fk FOREIGN KEY (requester) REFERENCES account(id);


--
-- Name: emailaddress__account__fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY emailaddress
    ADD CONSTRAINT emailaddress__account__fk FOREIGN KEY (account) REFERENCES account(id) ON DELETE SET NULL;


--
-- Name: openidauthorization__account__fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY openidauthorization
    ADD CONSTRAINT openidauthorization__account__fk FOREIGN KEY (account) REFERENCES account(id);


--
-- Name: openidrpsummary_account_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY openidrpsummary
    ADD CONSTRAINT openidrpsummary_account_fkey FOREIGN KEY (account) REFERENCES account(id);


--
-- PostgreSQL database dump complete
--

CREATE INDEX emailaddress__account__status__idx
    ON EmailAddress(account, status);


-- Permissions for Ubuntu SSO server testing on staging.

-- Mirrored from sso_auth user 2010-01-12.
-- These tables will eventually not be available.
--
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE account TO ubuntu_sso;
GRANT USAGE ON SEQUENCE account_id_seq TO ubuntu_sso;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE accountpassword TO ubuntu_sso;
GRANT USAGE ON SEQUENCE accountpassword_id_seq TO ubuntu_sso;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE authtoken TO ubuntu_sso;
GRANT USAGE ON SEQUENCE authtoken_id_seq TO ubuntu_sso;
GRANT SELECT ON TABLE person TO ubuntu_sso;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE emailaddress TO ubuntu_sso;
GRANT USAGE ON SEQUENCE emailaddress_id_seq TO ubuntu_sso;
GRANT SELECT,INSERT,DELETE ON TABLE openidassociation TO ubuntu_sso;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE openidauthorization TO ubuntu_sso;
GRANT USAGE ON SEQUENCE openidauthorization_id_seq TO ubuntu_sso;
GRANT SELECT,INSERT,DELETE ON TABLE openidnonce TO ubuntu_sso;
GRANT SELECT,INSERT,UPDATE ON TABLE openidrpsummary TO ubuntu_sso;
GRANT USAGE ON SEQUENCE openidrpsummary_id_seq TO ubuntu_sso;
GRANT SELECT ON SEQUENCE person_id_seq TO ubuntu_sso;
GRANT SELECT ON TABLE personlocation TO ubuntu_sso;
GRANT SELECT ON SEQUENCE personlocation_id_seq TO ubuntu_sso;
GRANT SELECT ON TABLE teamparticipation TO ubuntu_sso;
GRANT SELECT ON SEQUENCE teamparticipation_id_seq TO ubuntu_sso;

-- Permissions on the Ubuntu SSO tables.
--
GRANT SELECT, INSERT, DELETE, UPDATE ON TABLE auth_permission,
auth_group_permissions, auth_group, auth_user, auth_user_groups,
auth_user_user_permissions, auth_message, django_content_type,
django_session, django_site, django_admin_log,
ssoopenidrpconfig TO ubuntu_sso;

GRANT USAGE ON SEQUENCE auth_group_id_seq,
auth_group_permissions_id_seq, auth_message_id_seq,
auth_permission_id_seq, auth_user_groups_id_seq, auth_user_id_seq,
auth_user_user_permissions_id_seq, django_admin_log_id_seq,
django_content_type_id_seq, django_site_id_seq,
ssoopenidrpconfig_id_seq TO ubuntu_sso;

-- Permissions on the lpmirror tables (mirrors of relevant Launchpad
-- information, available even when Launchpad database upgrades are in
-- progress).
GRANT SELECT ON TABLE lp_person, lp_personlocation, lp_teamparticipation
TO ubuntu_sso;

