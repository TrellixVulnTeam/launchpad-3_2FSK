= Posting =

Only Launchpad members are allowed to post to team mailing lists.  A message
by a sender who is not a Launchpad member will be summarily discarded.

    # This test requires us to start an SMTP server that accepts messages
    # sent by Mailman's outgoing qrunner and stores these in a Unix mbox.
    >>> import itest_helper
    >>> smtpd = itest_helper.SMTPServer()
    >>> smtpd.start()

    # Create a mailing list for this test.
    >>> import itest_helper
    >>> browser = itest_helper.make_browser()
    >>> browser.open('http://launchpad.dev/people/+newteam')
    >>> browser.getControl(name='field.name').value = 'itest-one'
    >>> browser.getControl('Display Name').value = 'ITest One'
    >>> browser.getControl(name='field.subscriptionpolicy').displayValue = [
    ...     'Open Team']
    >>> browser.getControl('Create').click()

XXX BarryWarsaw 06-Dec-2007 The team must be a member of the mailing list beta
program in order to apply for mailing lists.  When mailing lists go public,
this stanza can be removed.

    >>> itest_helper.beta_program_enable('itest-one')

    >>> browser.reload()
    >>> browser.getLink('Configure mailing list').click()
    >>> browser.getControl('Apply for Mailing List').click()

    >>> list_one = itest_helper.review_list('itest-one')
    >>> from canonical.database.sqlbase import commit
    >>> commit()
    >>> itest_helper.wait_for_mailman()
    >>> from Mailman.Utils import list_names
    >>> sorted(name for name in list_names() if name.startswith('itest-'))
    ['itest-one']


== Non-member postings ==

Postings from addresses that are not registered and verified with Launchpad
are summarily discarded.

    # Watch Mailman's logs/vette for possible log messages.
    >>> vette_watcher = itest_helper.LogWatcher('vette')

Inject a message from a non-member into Mailman's incoming queue.

    >>> from Mailman.Post import inject
    >>> inject('itest-one', """\
    ... From: zperson@example.net
    ... To: itest-one@lists.launchpad.dev
    ... Subject: A non-member post
    ... Message-ID: <first-injection>
    ...
    ... Hi, I am not a member of Launchpad (yet).
    ... """)
    >>> vette_watcher.wait_for_growth()

To prove that the message was never posted, the mbox file should either be
non-existent or empty.

    >>> smtpd.getMailboxSize() <= 0
    True


== Unvalidated member postings ==

Similarly, an address that has been registered with Launchpad but not verified
will also be summarily discarded.  To demonstrate this, we'll add Anne as a
normal Launchpad user, but de-certify her alternative address.  This is
equivalent to making it unvalidated.

    >>> from canonical.launchpad.ftests.mailinglists_helper import (
    ...     get_alternative_email, new_person)
    >>> from canonical.launchpad.ftests import login, logout
    >>> login('foo.bar@canonical.com')
    >>> anne = new_person('Anne')
    >>> alternative_email = get_alternative_email(anne)
    >>> from canonical.launchpad.interfaces import EmailAddressStatus
    >>> alternative_email.status = EmailAddressStatus.NEW
    >>> commit()
    >>> print alternative_email.email, alternative_email.statusname
    aperson@example.org New Email Address

    >>> vette_watcher.resync()
    >>> inject('itest-one', """\
    ... From: aperson@example.org
    ... To: itest-one@lists.launchpad.dev
    ... Subject: A non-member post
    ... Message-ID: <second-injection>
    ...
    ... Hi, I am not a verified member of Launchpad (yet).
    ... """)
    >>> vette_watcher.wait_for_growth()

As above, this message got summarily discarded.

    >>> smtpd.getMailboxSize() <= 0
    True


== Unsubscribed Launchpad members ==

Since Anne's preferred email address is still validated, let's post this
message from that address.  However, because she has not yet joined the team
or subscribed to its mailing list, she still can't post to it.

    >>> print anne.preferredemail.email, anne.preferredemail.statusname
    anne.person@example.com Preferred Email Address
    >>> smtp_watcher = itest_helper.LogWatcher('smtp')
    >>> inject('itest-one', """\
    ... From: anne.person@example.com
    ... To: itest-one@lists.launchpad.dev
    ... Subject: An unsubscribed post
    ... Message-ID: <third-injection>
    ...
    ... Hi, I am not a member of this team's list (yet).
    ... """)
    >>> smtp_watcher.wait_for_growth()

However, unlike before, a message does show up in the mbox file.  This is the
auto discard notification sent to the team's owner.  The message is discarded
by Mailman's privacy handler because the poster is not a member of the mailing
list.

    >>> messages = smtpd.getMessages()
    >>> len(messages)
    1
    >>> print messages[0].as_string()
    Subject: Auto-discard notification
    From: itest-one-bounces@lists.launchpad.dev
    To: itest-one-owner@lists.launchpad.dev
    ...
    <BLANKLINE>
    The attached message has been automatically discarded.
    ...
    <BLANKLINE>
    From: anne.person@example.com
    To: itest-one@lists.launchpad.dev
    Subject: An unsubscribed post
    Message-ID: <third-injection>
    <BLANKLINE>
    Hi, I am not a member of this team's list (yet).
    ...


== Verified and registered member postings ==

Anne now joins the team and subscribes to the mailing list.  She can now post
to the mailing list.

    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> from zope.component import getUtility
    >>> person_set = getUtility(IPersonSet)
    >>> team_one = person_set.getByName('itest-one')

    # Subscribe Anne with her preferred address.
    >>> anne.join(team_one)
    >>> list_one.subscribe(anne)
    >>> logout()
    >>> commit()
    >>> itest_helper.wait_for_mailman()

    >>> print anne.preferredemail.email, anne.preferredemail.statusname
    anne.person@example.com Preferred Email Address
    >>> smtp_watcher.resync()
    >>> smtpd.reset()
    >>> inject('itest-one', """\
    ... From: anne.person@example.com
    ... To: itest-one@lists.launchpad.dev
    ... Subject: A member post
    ... Message-ID: <fifth-injection>
    ...
    ... Hi, I am now a member of this team's list!
    ... """)
    >>> smtp_watcher.wait_for_growth()

Anne's message got posted to the mailing list.  Two copies were sent; one to
Anne herself as a member of the mailing list, and another to the
mail-archive.com archiving recipient.  These copies are very similar,
differing only in the headers used to do VERP bounce detection.

    >>> messages = smtpd.getMessages()
    >>> len(messages)
    2
    >>> from operator import itemgetter
    >>> messages.sort(key=itemgetter('sender'))

Here's the copy sent to Anne...

    >>> print messages[0].as_string()
    From: anne.person@example.com
    To: itest-one@lists.launchpad.dev
    Message-ID: <fifth-injection>
    Subject: [Itest-one] A member post
    ...
    Sender: itest-one-bounces+anne.person=example.com@lists.launchpad.dev
    Errors-To: itest-one-bounces+anne.person=example.com@lists.launchpad.dev
    Received: by smtp2mbox
    <BLANKLINE>
    Hi, I am now a member of this team's list!
    _______________________________________________
    Mailing list: http://launchpad.dev/~itest-one
    Post to     : itest-one@lists.launchpad.dev
    Unsubscribe : http://launchpad.dev/people/+me/+editemails
    More help   : http://help.launchpad.dev/ListHelp
    <BLANKLINE>
    <BLANKLINE>

...and the copy sent to the archives.

    >>> print messages[1].as_string()
    From: anne.person@example.com
    To: itest-one@lists.launchpad.dev
    Message-ID: <fifth-injection>
    Subject: [Itest-one] A member post
    ...
    Sender: itest-one-bounces+archive=mail-archive.com@lists.launchpad.dev
    Errors-To: itest-one-bounces+archive=mail-archive.com@lists.launchpad.dev
    Received: by smtp2mbox
    <BLANKLINE>
    Hi, I am now a member of this team's list!
    _______________________________________________
    Mailing list: http://launchpad.dev/~itest-one
    Post to     : itest-one@lists.launchpad.dev
    Unsubscribe : http://launchpad.dev/people/+me/+editemails
    More help   : http://help.launchpad.dev/ListHelp
    <BLANKLINE>
    <BLANKLINE>

In addition, the in-house MHonArc archiver has archived this message.

    >>> from itest_helper import collect_archive_message_ids
    >>> collect_archive_message_ids('itest-one')
    ['fifth&#45;injection']

Anne cannot post from her alternative email address because it has not been
validated yet.

    >>> smtpd.reset()
    >>> vette_watcher.resync()
    >>> inject('itest-one', """\
    ... From: aperson@example.org
    ... To: itest-one@lists.launchpad.dev
    ... Subject: A non-member post
    ... Message-ID: <sixth-injection>
    ...
    ... Hi, I am not a verified member of this team (yet).
    ... """)
    >>> vette_watcher.wait_for_growth()
    >>> smtpd.getMailboxSize() <= 0
    True

However, once she validates this address, she can post from it.

    >>> alternative_email.status = EmailAddressStatus.VALIDATED
    >>> commit()
    >>> itest_helper.wait_for_mailman()
    >>> smtp_watcher.resync()
    >>> inject('itest-one', """\
    ... From: aperson@example.org
    ... To: itest-one@lists.launchpad.dev
    ... Subject: A member post
    ... Message-ID: <sixth-injection>
    ...
    ... Hi, I am now a verified member of this team!
    ... """)
    >>> smtp_watcher.wait_for_growth()
    >>> messages = smtpd.getMessages()
    >>> len(messages)
    2
    >>> messages.sort(key=itemgetter('sender'))

    >>> print messages[0].as_string()
    From: aperson@example.org
    To: itest-one@lists.launchpad.dev
    Message-ID: <sixth-injection>
    Subject: [Itest-one] A member post
    ...
    Sender: itest-one-bounces+anne.person=example.com@lists.launchpad.dev
    Errors-To: itest-one-bounces+anne.person=example.com@lists.launchpad.dev
    Received: by smtp2mbox
    <BLANKLINE>
    Hi, I am now a verified member of this team!
    _______________________________________________
    Mailing list: http://launchpad.dev/~itest-one
    Post to     : itest-one@lists.launchpad.dev
    Unsubscribe : http://launchpad.dev/people/+me/+editemails
    More help   : http://help.launchpad.dev/ListHelp
    <BLANKLINE>
    <BLANKLINE>

    >>> print messages[1].as_string()
    From: aperson@example.org
    To: itest-one@lists.launchpad.dev
    Message-ID: <sixth-injection>
    Subject: [Itest-one] A member post
    ...
    Sender: itest-one-bounces+archive=mail-archive.com@lists.launchpad.dev
    Errors-To: itest-one-bounces+archive=mail-archive.com@lists.launchpad.dev
    Received: by smtp2mbox
    <BLANKLINE>
    Hi, I am now a verified member of this team!
    _______________________________________________
    Mailing list: http://launchpad.dev/~itest-one
    Post to     : itest-one@lists.launchpad.dev
    Unsubscribe : http://launchpad.dev/people/+me/+editemails
    More help   : http://help.launchpad.dev/ListHelp
    <BLANKLINE>
    <BLANKLINE>

There should also be no held requests pending.

    # Use a helper for complete safety.
    >>> itest_helper.num_requests_pending('itest-one')
    0


== Preventing archiver forgeries ==

We archive messages by sending them to a special address owned by the Mail
Archive <http://www.mail-archive.com>.  This address becomes a recipient of
the mailing list, but we also prevent this address from being used to post
messages to the list.

    >>> from canonical.config import config
    >>> config.mailman.archive_address
    'archive@mail-archive.com'
    >>> smtpd.reset()
    >>> vette_watcher.resync()
    >>> inject('itest-one', """\
    ... From: %s
    ... To: itest-one@lists.launchpad.dev
    ... Subject: A forgery
    ... Message-ID: <seventh-injection>
    ...
    ... Hi, I am forging me some spam!
    ... """ % config.mailman.archive_address)
    >>> vette_watcher.wait_for_growth()
    >>> smtpd.getMailboxSize() <= 0
    True


== Clean up ==

    >>> smtpd.stop()
