Distro series packaging
=======================

The distro series packaging page is accssible to any user from the distro
series +index page.

    >>> anon_browser.open('http://launchpad.dev/ubuntu/hoary')
    >>> anon_browser.getLink('All upstream links').click()
    >>> print anon_browser.title
    All upstream links : ...

The page lists the upstream packaging links.

    >>> content = find_main_content(anon_browser.contents)
    >>> print extract_text(
    ...     find_tag_by_id(anon_browser.contents, 'packagings'))
    Source Package   Upstream Project   Upstream Contributor Connections
    netapplet
      NetApplet ... The Novell Network Applet
        NetApplet ... project:  Bug supervisor: no   Bug tracker: no
        NetApplet trunk series:  Branch: no
    evolution
      Evolution ... Evolution is an email client, addressbook ...
        Evolution ... project: Bug supervisor: no   Bug tracker: yes
        Evolution trunk series: Branch: yes   Translations: no

Any use can see that this page is related to the needs packaging report. It is
linked, but the link to this page is not enabled.

    >>> print extract_text(find_tag_by_id(content, 'related-pages'))
    Needs upstream links     All upstream links

    >>> anon_browser.getLink('Needs upstream links')
    <Link text='Needs upstream links'
      url='http://launchpad.dev/ubuntu/hoary/+needs-packaging'>

    >>> anon_browser.getLink('All upstream links')
    Traceback (most recent call last):
     ...
    LinkNotFoundError

The packaging links are batched so that users can view the thousands of
links packages. Users can also hack the URL to set their own batch size.

    >>> anon_browser.open(
    ...     'http://launchpad.dev/ubuntu/hoary/+packaging?start=0&batch=1')
    >>> print extract_text(find_tag_by_id(
    ...     anon_browser.contents, 'packagings'))
    Source Package   Upstream Project   Upstream Contributor Connections
    netapplet ...

    >>> anon_browser.getLink('Next', index=0).click()
    >>> print extract_text(
    ...     find_tag_by_id(anon_browser.contents, 'packagings'))
    Source Package   Upstream Project   Upstream Contributor Connections
    evolution ...


Source packages that need packaging links
-----------------------------------------

The "Packages that need upstream packaging links" lists the source packages
that need upstream packaging links. The list is prioritized so that the
packages with the greatest need are listed first.

    >>> # XXX sinzui 2010-01-21 bug=487793: Enable this when the portlet
    >>> # is added.
    >>> #anon_browser.open('http://launchpad.dev/ubuntu/hoary')
    >>> #anon_browser.getLink('Needs upstream links').click()
    >>> anon_browser.open(
    ...     'http://launchpad.dev/ubuntu/hoary/+needs-packaging')
    >>> print anon_browser.title
    Needs upstream links : ...

    >>> content = find_main_content(anon_browser.contents)
    >>> print extract_text(find_tag_by_id(content, 'packages'))
    Source Package       Bugs     Translations
    pmount               No bugs  64 strings
    alsa-utils           No bugs  No strings
    cnews                No bugs  No strings
    libstdc++            No bugs  No strings
    linux-source-2.6.15  1 bug    No strings

The counts in the listing link to their respect bugs and translations
pages.

    >>> anon_browser.getLink('64 strings')
    <Link text='64 strings'
      url='http://translations.launchpad.dev/ubuntu/hoary/+source/pmount'>

    >>> anon_browser.getLink('1 bug')
    <Link text='1 bug'
      url='http://bugs.launchpad.dev/ubuntu/+source/linux-source-2.6.15'>


The listing is batched so that the user can visit the next page listings.

    >>> print extract_text(find_tag_by_id(content, 'listing-navigation'))
    1 ... 5 of 5 packages	First ... Previous ... Next ... Last

Any use can see that this page is related to the packaging report. It is
linked, but the link to this page is not enabled.

    >>> print extract_text(find_tag_by_id(content, 'related-pages'))
    Needs upstream links     All upstream links

    >>> anon_browser.getLink('All upstream links')
    <Link text='All upstream links'
      url='http://launchpad.dev/ubuntu/hoary/+packaging'>

    >>> anon_browser.getLink('Needs upstream links')
    Traceback (most recent call last):
     ...
    LinkNotFoundError
