XML-RPC Integration with Malone
===============================

Malone provides an XML-RPC interface for filing bugs.

    >>> from canonical.launchpad.xmlrpc import FileBugAPI

    >>> filebug_api = FileBugAPI(None, None)

The report_bug API
------------------

The report_bug API is:

    filebug_api.report_bug(
        product, distro, package, title, comment, status,
        assignee_email, security_related, private, subscribers)

REQUIRED ARGS: product: the product name, as a string
               distro: the distro name, as a string
               title: a string
               comment: a string

(Only one of product or distro may be provided.)

OPTIONAL ARGS: package: a string, allowed only if distro is specified
               status: a string, identical to the email interface values
               assignee_email: a string
               security_related: a boolean
               private: a boolean
               subscribers: a list of email addresses

The bug owner is the currently authenticated user, taken from the
request.

The return value is the bug URL, in short form, e.g.:

    http://launchpad.net/bugs/42

Examples
--------

Reporting a product bug.

    >>> login("test@canonical.com")

    >>> filebug_api.report_bug(
    ...     'firefox', '', '', 'the title', 'the comment',
    ...     '', '', '', '', [])
    u'http://localhost:8086/bugs/11'

    >>> from zope.component import getUtility
    >>> from canonical.launchpad.interfaces import IBugSet

    >>> bugset = getUtility(IBugSet)
    >>> bug = bugset.get(11)

    >>> print bug.title
    the title
    >>> print bug.description
    the comment
    >>> print bug.owner.name
    name12

    >>> firefox_bug = bug.bugtasks[0]

    >>> print firefox_bug.product.name
    firefox

Reporting a distro bug.

    >>> filebug_api.report_bug(
    ...     '', 'ubuntu', '', 'another bug', 'another comment',
    ...     'confirmed', 'foo.bar@canonical.com', '', '', [])
    u'http://localhost:8086/bugs/12'

    >>> bug = bugset.get(12)

    >>> print bug.title
    another bug
    >>> print bug.description
    another comment
    >>> print bug.owner.name
    name12

    >>> ubuntu_bug = bug.bugtasks[0]

    >>> print ubuntu_bug.distribution.name
    ubuntu
    >>> ubuntu_bug.sourcepackagename is None
    True
    >>> print ubuntu_bug.status.title
    Confirmed
    >>> print ubuntu_bug.assignee.name
    name16

Reporting a package bug.

    >>> filebug_api.report_bug(
    ...     '', 'ubuntu', 'evolution', 'email is cool', 'email is nice',
    ...     'inprogress', '', True, True, ["no-priv@canonical.com"])
    u'http://localhost:8086/bugs/13'

    >>> bug = bugset.get(13)

    >>> print bug.title
    email is cool
    >>> print bug.description
    email is nice
    >>> bug.security_related
    True
    >>> bug.private
    True
    >>> sorted(p.name for p in bug.getDirectSubscribers())
    [u'name12', u'no-priv']
    >>> bug.getIndirectSubscribers()
    []

    >>> evolution_bug = bug.bugtasks[0]

    >>> print evolution_bug.distribution.name
    ubuntu
    >>> print evolution_bug.sourcepackagename.name
    evolution
    >>> print evolution_bug.status.title
    In Progress
