= Milestones =


== Milestone listings ==

Products, distributions, product series, distribution series and projects have
a page in which all of their milestones are listed.


=== Distributions ===

    >>> anon_browser.open('http://launchpad.dev/debian/+milestones')
    >>> anon_browser.url
    'http://launchpad.dev/debian/+milestones'

    >>> for li in find_tags_by_class(anon_browser.contents, 'milestone'):
    ...     print extract_text(li)
    3.1-rc1 Expected for 2056-02-16 For WOODY
    3.1 Expected for 2056-05-16 For WOODY


=== Distribution Series ===

    >>> anon_browser.open('http://launchpad.dev/debian/woody/+milestones')
    >>> for li in find_tags_by_class(anon_browser.contents, 'milestone'):
    ...     print extract_text(li)
    3.1-rc1 Expected for 2056-02-16 For WOODY
    3.1 Expected for 2056-05-16 For WOODY

    >>> anon_browser.open('http://launchpad.dev/debian/sarge/+milestones')
    >>> for li in find_tags_by_class(anon_browser.contents, 'milestone'):
    ...     print extract_text(li)


=== Products ===

    >>> anon_browser.open('http://launchpad.dev/firefox/+milestones')
    >>> anon_browser.url
    'http://launchpad.dev/firefox/+milestones'

    >>> for li in find_tags_by_class(anon_browser.contents, 'milestone'):
    ...     print extract_text(li)
    1.0 Expected for 2056-10-16 For Mozilla Firefox Series: trunk


=== Product Series ===

    >>> anon_browser.open('http://launchpad.dev/firefox/trunk/+milestones')
    >>> for li in find_tags_by_class(anon_browser.contents, 'milestone'):
    ...     print extract_text(li)
    1.0 Expected for 2056-10-16 For Mozilla Firefox Series: trunk

    >>> anon_browser.open('http://launchpad.dev/firefox/1.0/+milestones')
    >>> for li in find_tags_by_class(anon_browser.contents, 'milestone'):
    ...     print extract_text(li)


=== Projects ===

The main project page has a portlet "Active milestones":

    >>> from canonical.launchpad.ftests import login, logout
    >>> from canonical.launchpad.ftests.test_project_milestone import (
    ...     ProjectMilestoneTest)
    >>> login('foo.bar@canonical.com')
    >>> test_helper = ProjectMilestoneTest(helper_only=True)
    >>> test_helper.setUpProjectMilestoneTests()
    >>> logout()
    >>> anon_browser.open('http://launchpad.dev/gnome')
    >>> milestones = find_portlet(anon_browser.contents, 'Active milestones')
    >>> print extract_text(milestones)
    Active milestones
    1.1
    1.1.
    1.2
    All milestones

The page "All milestones" lists all milestones, including the inactive ones:

    >>> anon_browser.getLink('All milestones').click()
    >>> for milestone in find_tags_by_class(
    ...     anon_browser.contents, 'milestone'):
    ...     print extract_text(milestone)
    1.1 Expected for 2010-04-01
    1.1. Expected for 2010-04-02
    1.2 Expected for 2011-04-01
    1.3 (Inactive) Expected for 2012-04-01


== Individual milestones ==

Pages for the individual milestones show all specifications and bugtasks
associated with that milestone for products of this project:

    >>> anon_browser.getLink('1.1').click()
    >>> specs = find_tag_by_id(anon_browser.contents, 'milestone_specs')
    >>> print extract_text(specs)
    Priority Product Specification Assignee Delivery ...
    High Evolution Title evolution specification ... Unknown ...
    High gnomebaker Title gnomebaker specification ... Unknown

    >>> bugtasks = find_tag_by_id(anon_browser.contents, 'milestone_bugtasks')
    >>> print extract_text(bugtasks)
    Report Product Importance Assignee Status ...
    Milestone test bug for evolution Evolution ... Undecided ... Confirmed ...
    Milestone test bug for gnomebaker gnomebaker ... Undecided ... Confirmed


=== Duplicate bugs ===

Milestone bug listings do not show bugs that are marked as duplicates of other
bugs.

To demonstrate this, we'll begin by filing a couple of bugs for the Mozilla
Firefox product:

    >>> browser = setupBrowser(auth='Basic test@canonical.com:test')

    >>> file_bug_url = 'http://bugs.launchpad.dev/firefox/+filebug-advanced'
    >>> browser.open(file_bug_url)
    >>> browser.getControl('Summary').value = 'Test Bug 1'
    >>> browser.getControl('Further information').value = 'Test Bug 1'
    >>> browser.getControl('Submit').click()
    >>> print browser.url
    http://bugs.launchpad.dev/firefox/+bug/15

    >>> browser.open(file_bug_url)
    >>> browser.getControl('Summary').value = 'Test Bug 2'
    >>> browser.getControl('Further information').value = 'Test Bug 2'
    >>> browser.getControl('Submit').click()
    >>> print browser.url
    http://bugs.launchpad.dev/firefox/+bug/16

Next, we'll target each bug to the 1.0 milestone:

    >>> milestone_value = ['Mozilla Firefox: 1.0']

    >>> edit_url = 'http://bugs.launchpad.dev/firefox/+bug/15/+editstatus'
    >>> browser.open(edit_url)
    >>> browser.getControl('Milestone').displayValue = milestone_value
    >>> browser.getControl('Save Changes').click()

    >>> edit_url = 'http://bugs.launchpad.dev/firefox/+bug/16/+editstatus'
    >>> browser.open(edit_url)
    >>> browser.getControl('Milestone').displayValue = milestone_value
    >>> browser.getControl('Save Changes').click()

Observe that both bugs are listed in the 1.0 milestone listing:

    >>> browser.open('http://launchpad.dev/firefox/+milestone/1.0')

    >>> print browser.getLink('Test Bug 1')
    <Link text='Test Bug 1' url='http://bugs.launchpad.dev/bugs/15'>

    >>> print browser.getLink('Test Bug 2')
    <Link text='Test Bug 2' url='http://bugs.launchpad.dev/bugs/16'>

We'll mark the second bug as a duplicate of the first:

    >>> duplicate_url = 'http://bugs.launchpad.dev/firefox/+bug/16/+duplicate'
    >>> browser.open(duplicate_url)
    >>> browser.getControl('Duplicate').value = '15'
    >>> browser.getControl('Change').click()

Now observe that only the first bug is listed in the 1.0 milestone listing:

    >>> browser.open('http://launchpad.dev/firefox/+milestone/1.0')

    >>> print browser.getLink('Test Bug 1')
    <Link text='Test Bug 1' url='http://bugs.launchpad.dev/bugs/15'>

    >>> print browser.getLink('Test Bug 2')
    Traceback (most recent call last):
        ...
    LinkNotFoundError

If we change our mind and clear the duplicate status of the second bug, then
both bugs are listed in the 1.0 milestone listing once again:

    >>> duplicate_url = 'http://bugs.launchpad.dev/firefox/+bug/16/+duplicate'
    >>> browser.open(duplicate_url)
    >>> browser.getControl('Duplicate').value = ''
    >>> browser.getControl('Change').click()

    >>> browser.open('http://launchpad.dev/firefox/+milestone/1.0')

    >>> print browser.getLink('Test Bug 1')
    <Link text='Test Bug 1' url='http://bugs.launchpad.dev/bugs/15'>

    >>> print browser.getLink('Test Bug 2')
    <Link text='Test Bug 2' url='http://bugs.launchpad.dev/bugs/16'>


=== Bugs targeted to multiple series ===

Bugs targeted to the same milestone across more than one series will result in
duplicate entries in the milestone listing (one for each series target).

To demonstrate this, we'll begin by creating a new series "2.0" for the
Mozilla Firefox product, to complement the existing series "1.0":

    >>> add_series_url = 'http://launchpad.dev/firefox/+addseries'
    >>> browser.open(add_series_url)
    >>> browser.getControl('Name').value = '2.0'
    >>> browser.getControl('Summary').value = 'The Firefox 2.0 Series'
    >>> browser.getControl('Register Series').click()

We'll also create a new test milestone within the "trunk" series:

    >>> add_milestone_url = 'http://launchpad.dev/firefox/trunk/+addmilestone'
    >>> browser.open(add_milestone_url)
    >>> browser.getControl('Name').value = 'test-milestone'
    >>> browser.getControl('Date Targeted').value = '2100-08-08'
    >>> browser.getControl('Add').click()

Let's target an existing bug to both series "1.0" and series "2.0":

    >>> nominate_url = 'http://bugs.launchpad.dev/firefox/+bug/15/+nominate'
    >>> browser.open(nominate_url)
    >>> browser.getControl('1.0').selected = True
    >>> browser.getControl('2.0').selected = True
    >>> browser.getControl('Submit').click()

Now we'll add each bug target to the same test milestone, but using different
levels of importance:

    >>> milestone_value = ['test-milestone']

    >>> edit_url = 'http://bugs.launchpad.dev/firefox/1.0/+bug/15/+editstatus'
    >>> browser.open(edit_url)
    >>> browser.getControl('Milestone').displayValue = milestone_value
    >>> browser.getControl('Importance').value = ['Critical']
    >>> browser.getControl('Save Changes').click()

    >>> edit_url = 'http://bugs.launchpad.dev/firefox/2.0/+bug/15/+editstatus'
    >>> browser.open(edit_url)
    >>> browser.getControl('Milestone').displayValue = milestone_value
    >>> browser.getControl('Importance').value = ['High']
    >>> browser.getControl('Save Changes').click()

Observe that both bug targets are now listed in the test milestone listing:

    >>> url = 'http://launchpad.dev/firefox/+milestone/test-milestone'
    >>> browser.open(url)

    >>> print extract_text(find_tag_by_id(browser.contents,
    ...                                   'milestone_bugtasks'))
    Report...Importance...
    15...Test Bug 1...Critical...
    15...Test Bug 1...High...


=== Bugs targeted to development focus series ===

When a bug is raised for a product or distribution, it is implicitly targeted
to the development focus series for that product or distribution ("trunk" by
default).

Ordinarily, targeting a bug to a milestone causes the bug to appear in that
milestone's bug listing:

    >>> edit_url = 'http://bugs.launchpad.dev/firefox/+bug/16/+editstatus'
    >>> browser.open(edit_url)
    >>> milestone_value = ['test-milestone']
    >>> browser.getControl('Milestone').displayValue = milestone_value
    >>> browser.getControl('Save Changes').click()

    >>> url = 'http://launchpad.dev/firefox/+milestone/test-milestone'
    >>> browser.open(url)

    >>> print extract_text(find_tag_by_id(browser.contents,
    ...                                   'milestone_bugtasks'))
    Report...Importance...
    16...Test Bug 2...

When we explicitly target the bug to the development focus series, the bug
still appears in the milestone's bug listing:

    >>> nominate_url = 'http://bugs.launchpad.dev/firefox/+bug/16/+nominate'
    >>> browser.open(nominate_url)
    >>> browser.getControl('Trunk').selected = True
    >>> browser.getControl('Submit').click()

    >>> url = 'http://launchpad.dev/firefox/+milestone/test-milestone'
    >>> browser.open(url)
    >>> bugtasks = extract_text(find_tag_by_id(browser.contents,
    ...                                        'milestone_bugtasks'))
    >>> print bugtasks
    Report...Importance...
    16...Test Bug 2...

Moreover, the bug appears only once in the listing:

    >>> print bugtasks.count('Test Bug 2')
    1
