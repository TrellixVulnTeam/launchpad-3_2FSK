Helper Functions
================

There are some helper functions located in canonical.launchpad.helpers
which can be used in order to avoid duplicating code in different parts
of Launchpad.

Checking If the Logged In User is a Maintainer
----------------------------------------------

We can check if the user is a maintainer of something which has an
owner by using is_maintainer():

    >>> from canonical.launchpad.helpers import is_maintainer

Let's create something that provides IHasOwner and set the owner to
Sample Person:
    
    >>> from zope.component import getUtility
    >>> from zope.interface import implements
    >>> from canonical.launchpad.interfaces import IPersonSet, IHasOwner
    >>> from canonical.launchpad.ftests import login
    >>> login('launchpad.anonymous')
    >>> personset = getUtility(IPersonSet)
    >>> sample_person = personset.get(12)
    >>> class HasOwner:
    ...     implements(IHasOwner)
    ...     owner = sample_person
    >>> has_owner = HasOwner()

Neither anonymous nor Foo Bar is a maintainer:

    >>> is_maintainer(has_owner)
    False
    >>> login('foo.bar@canonical.com')
    >>> is_maintainer(has_owner)
    False

But Sample Person is:

    >>> login('test@canonical.com')
    >>> is_maintainer(has_owner)
    True

If we set the owner to the Ubuntu Team, Sample Person is no longer a
maintainer, while Foo Bar is, since he's a member of the team:

    >>> ubuntu_team = personset.get(17)
    >>> has_owner.owner = ubuntu_team
    >>> is_maintainer(has_owner)
    False

    >>> login('foo.bar@canonical.com')
    >>> is_maintainer(has_owner)
    True

If hasowner wouldn't provide IHasOwner a TypeError is raised:

    >>> class NoIHasOwner:
    ...     owner = sample_person
    >>> noIHasOwner = NoIHasOwner()
    >>> is_maintainer(noIHasOwner)
    Traceback (most recent call last):
    ...
    TypeError: hasowner doesn't provide IHasOwner
