Branch Mirroring Status Update Via The Authserver
=================================================

The branch puller is responsible for mirroring remote bzr branches to
the supermirror.

In the process of mirroring, it needs to update the status of those
branches in the Launchpad database.  As it does not have direct access
to the database, it performs the updates via the authserver.

  >>> import transaction
  >>> from canonical.authserver.client.branchstatus import BranchStatusClient
  >>> from canonical.launchpad.database import Branch
  >>> from canonical.launchpad.ftests.harness import LaunchpadZopelessTestSetup


Create the branch status client:

  >>> client = BranchStatusClient()

Check the mirror status of branch #1:

  >>> branch = Branch.get(1)
  >>> print branch.last_mirror_attempt
  None
  >>> print branch.last_mirrored
  None
  >>> print branch.mirror_failures
  0

When the branch puller starts, it uses the startMirroring() call to
update the last_mirror_attempt field in the database.  An integer
branch ID is used here, because the branch puller can not make use of
SQLObject instances.

  >>> client.startMirroring(1)

This updates the last_mirror_attempt field, which we see after moving
to the next transaction:

  >>> LaunchpadZopelessTestSetup().txn.commit()
  >>> branch = Branch.get(1)
  >>> branch.last_mirror_attempt != None
  True

This does not update the last_mirrored field though, since we don't
know if the pull will be successful til it is completed:

  >>> print branch.last_mirrored
  None


If the mirror process succeeds, the branch puller can tell the
authserver using the mirrorComplete() method:

  >>> client.mirrorComplete(1)

This sets the last_mirrored date to the time when the mirror started
(recorded by startMirroring()):

  >>> LaunchpadZopelessTestSetup().txn.commit()
  >>> branch = Branch.get(1)
  >>> branch.last_mirrored is not None
  True
  >>> branch.last_mirrored == branch.last_mirror_attempt
  True
  >>> old_last_mirrored = branch.last_mirrored


If an error occurs during the mirror process, the branch puller can
flag this with the mirrorFailed() method:

  >>> client.startMirroring(1)
  >>> client.mirrorFailed(1, 'failure reason')

This increments the failure count and leaves the last_mirrored date as
is:

  >>> LaunchpadZopelessTestSetup().txn.commit()
  >>> branch = Branch.get(1)
  >>> branch.mirror_failures
  1
  >>> branch.last_mirrored == old_last_mirrored

A successful mirror will reset the failure counter though:

  >>> client.startMirroring(1)
  >>> client.mirrorComplete(1)
  >>> LaunchpadZopelessTestSetup().txn.commit()
  >>> branch = Branch.get(1)
  >>> branch.mirror_failures
  0
