= Support Tracker Karma =

To promote community contributions to support requests in Launchpad, it's
very important that we acknowledge their work and give them some karma
points.

These karma points are assigned to a user when he performs one of the
actions we consider to be a reasonable contribution.

    >>> from canonical.launchpad.interfaces import (
    ...     IPersonSet, ITicket, IProductSet)
    >>> from canonical.launchpad.database.karma import KarmaCategory
    >>> support_category = KarmaCategory.byName('support')
    >>> support_karma_actions = support_category.karmaactions
    >>> sorted([action.title for action in support_karma_actions])
    [u'Answered ticket',
     u'Comment made on a ticket.',
     u'Created ticket',
     u'Gave answer on a ticket',
     u'Gave more information on a ticket',
     u'Rejected ticket',
     u'Reopened ticket',
     u'Requested for information on a ticket',
     u'Solved own ticket',
     u'Ticket description changed',
     u'Ticket linked to a bug',
     u'Ticket owner accepted answer',
     u'Ticket title changed']

    >>> sample_person = getUtility(IPersonSet).getByEmail('test@canonical.com')
    >>> foo_bar = getUtility(IPersonSet).getByEmail('foo.bar@canonical.com')

Setup an event listener to help ensure karma is assigned when it should.

    >>> from canonical.launchpad.ftests.karma import KarmaAssignedEventListener
    >>> karma_helper = KarmaAssignedEventListener(show_person=True)
    >>> karma_helper.register_listener()

Define a generator that always give a date higher than the previous one
to order our messages.

    >>> from datetime import datetime, timedelta
    >>> from pytz import UTC
    >>> def timegenerator(origin):
    ...     now = origin
    ...     while True:
    ...         now += timedelta(seconds=5)
    ...         yield now
    >>> now = timegenerator(datetime.now(UTC))

== Karma Actions ==

- Creating a ticket

    >>> login('test@canonical.com')
    >>> from zope.event import notify
    >>> from canonical.launchpad.event import SQLObjectCreatedEvent
    >>> firefox = getUtility(IProductSet)['firefox']
    >>> firefox_ticket = firefox.newTicket(
    ...     title='New ticket', description='Ticket description.',
    ...     owner=sample_person, datecreated=now.next())
    >>> notify(SQLObjectCreatedEvent(firefox_ticket))
    Karma added: action=ticketcreated, product=firefox, person=name12

- Expiring a ticket

The expireTicket() workflow method doesn't grant any karma because it
will usually be called by an automated script.

    >>> msg = firefox_ticket.expireTicket(
    ...     foo_bar, 'Expiring because of inactivity. Reopen if you are '
    ...     'still having the problem and provide additional information.',
    ...     datecreated=now.next())

- Reopening a ticket

    >>> msg = firefox_ticket.reopen(
    ...     "Firefox doesn't have any 'Quick Searches' in its bookmarks.",
    ...     datecreated=now.next())
    Karma added: action=ticketreopened, product=firefox, person=name12

- Requesting for more information

    >>> msg = firefox_ticket.requestInfo(
    ...     foo_bar, 'What "Quick Searches" do you want?',
    ...     datecreated=now.next())
    Karma added: action=ticketrequestedinfo, product=firefox, person=name16

- Giving back more information

    >>> msg = firefox_ticket.giveInfo(
    ...     'The same one than shipped upstreams.',
    ...     datecreated=now.next())
    Karma added: action=ticketgaveinfo, product=firefox, person=name12

- Giving an answer to a ticket request

    >>> msg = firefox_ticket.giveAnswer(
    ...     foo_bar, "Ok, I see what you mean. You need to install them "
    ...     "manually for now.", datecreated=now.next())
    Karma added: action=ticketgaveanswer, product=firefox, person=name16

- Adding a comment

    >>> msg = firefox_ticket.addComment(
    ...     foo_bar, 'You could also fill a bug about that, if you like.',
    ...     datecreated=now.next())
    Karma added: action=ticketcommentadded, product=firefox, person=name16

- Confirming that the problem is solved

When the user confirms that his problem is solved, karma will be given
for accepting an answer. The person whose answer was accepted will
also receives karma.

    >>> msg = firefox_ticket.confirmAnswer(
    ...     "Ok, thanks. I'll open a bug about this then.",
    ...     answer=msg, datecreated=now.next())
    Karma added: action=ticketansweraccepted, product=firefox, person=name12
    Karma added: action=ticketanswered, product=firefox, person=name16

- Rejecting a ticket

    >>> msg = firefox_ticket.reject(
    ...     foo_bar, 'This should really be a bug report.')
    Karma added: action=ticketrejected, product=firefox, person=name16

- Changing the status

We do not grant karma for status change made outside of workflow:

    >>> login('foo.bar@canonical.com')
    >>> from canonical.lp.dbschema import QuestionStatus
    >>> msg = firefox_ticket.setStatus(
    ...     foo_bar, QuestionStatus.OPEN, 'That rejection was an error.',
    ...     datecreated=now.next())

- Solving own problem

There is a special karma action to cover the case when the ticket owner
comes back to provide an answer to his own problem. In that case, we
do not want to grant the ticketanswered and ticketansweraccepted karma
action to the same person.

    >>> login('test@canonical.com')
    >>> msg = firefox_ticket.giveAnswer(
    ...     sample_person, "I was able to import some by following the "
    ...     "instructions on http://tinyurl.com/cyus4",
    ...     datecreated=now.next())
    Karma added: action=ticketownersolved, product=firefox, person=name12

- Changing the Title of a ticket:

    >>> from zope.interface import providedBy
    >>> from canonical.launchpad.event import SQLObjectModifiedEvent
    >>> from canonical.launchpad.webapp.snapshot import Snapshot
    >>> old_ticket = Snapshot(
    ...     firefox_ticket, providing=providedBy(firefox_ticket))
    >>> firefox_ticket.title = ('Firefox 1.5.0.5 does not have any '
    ...                         '"Quick Searches" installed by default')
    >>> notify(SQLObjectModifiedEvent(firefox_ticket, old_ticket, ['title']))
    Karma added: action=tickettitlechanged, product=firefox, person=name12

- Changing the Description of a ticket:

    >>> old_ticket = Snapshot(
    ...     firefox_ticket, providing=providedBy(firefox_ticket))
    >>> firefox_ticket.description = (
    ...     'Firefox 1.5.0.5 does not have any "Quick Searches" installed '
    ...     'in the bookmarks by default, like the official ones do.')
    >>> notify(SQLObjectModifiedEvent(
    ...     firefox_ticket, old_ticket, ['description']))
    Karma added: action=ticketdescriptionchanged, product=firefox,
        person=name12

- Linking to a bug:

    >>> from canonical.launchpad.database import Bug
    >>> ticketbug = firefox_ticket.linkBug(Bug.get(5))
    Karma added: action=ticketlinkedtobug, product=firefox, person=name12
    >>> logout()

Now we do a check to make sure all support-tracker-related karma actions have
been tested.

    >>> karma_helper.added_karma_actions == set(support_karma_actions)
    True

    # Unregister the event listener to make sure we won't interfere in
    # other tests.
    >>> karma_helper.unregister_listener()
