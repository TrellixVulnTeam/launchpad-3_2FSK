#!/usr/bin/env python

__metaclass__ = type

from optparse import OptionParser
import sys
import subprocess


class UserError(Exception):
    pass


def tc(command):
     subprocess.call('sudo tc ' + command, shell=True)


class Command:

    UNSPECIFIED = object()

    @classmethod
    def get_specified_values(cls, parser, cmd_args):
        options, args = parser.parse_args(cmd_args)
        kwargs = dict(
            item for item in options.__dict__.items()
            if item[1] is not cls.UNSPECIFIED)
        return args, kwargs

    @classmethod
    def run_from_args(cls, cmd_args):
        args, kwargs = cls.get_specified_values(cls.get_parser(), cmd_args)
        cls.run(*args, **kwargs)


class StartCommand(Command):

    @classmethod
    def get_parser(cls):
        parser = OptionParser()
        parser.add_option(
            '-d', '--delay', dest='delay', type='int',
            default=cls.UNSPECIFIED,
            help='Length of delay in miliseconds (each way).')
        return parser

    @staticmethod
    def run(delay=500, port=443):
        tc('qdisc add dev lo root handle 1: prio')
        tc('qdisc add dev lo parent 1:3 handle 30: netem delay %dms' % delay)
        tc('filter add dev lo protocol ip parent 1:0 prio 3 u32 match ip'
           ' dport %d 0xffff flowid 1:3' % port)
        tc('filter add dev lo protocol ip parent 1:0 prio 3 u32 match ip'
           ' sport %d 0xffff flowid 1:3' % port)


class StopCommand(Command):

    @staticmethod
    def get_parser():
        parser = OptionParser()
        return parser

    @staticmethod
    def run():
        tc('qdisc del dev lo root')


def main(argv):
    commands = {
        'start': StartCommand,
        'stop': StopCommand,
    }
    if len(argv) < 1:
        raise UserError('Must supply a command: %s.' %
                        ', '.join(commands.keys()))
    try:
        command = commands[argv[0]]
    except KeyError:
        raise UserError('%s invalid.  Valid commands: %s.' %
                        (argv[0], ', '.join(commands.keys())))
    command.run_from_args(argv[1:])


if __name__ == "__main__":
    try:
        main(sys.argv[1:])
    except UserError, e:
        sys.stderr.write(str(e)+'\n')
