= Private memberships =

Some teams may have private memberships, meaning that only the team
members (and LP admins) can see who are the other members of the team.

'myteam' is a team with private memberships, so someone who's not a
team member can't see, for instance, the membership of a person on that
team.

    # XXX: 2008-08-01, salgado: Notice how the total_size is incorrect here.
    # That ought to be fixed at some point.
    >>> member = user_webservice.get("/~member").jsonBody()
    >>> response = user_webservice.get(
    ...     member['memberships_details_collection_link'])
    >>> print sorted(response.jsonBody().items())
    [(u'entries', [{...}]),
     (u'resource_type_link',
      u'http://.../#team_membership-page-resource'),
     (u'start', 0),
     (u'total_size', 2)]

Salgado can, though, because he's a Launchpad admin.

    >>> response = webservice.get(
    ...     member['memberships_details_collection_link'])
    >>> print sorted(response.jsonBody().items())
    [(u'entries',
      [{u'status': u'Approved',...
        u'team_link': u'http://.../~myteam'...
     (u'resource_type_link',
      u'http://.../#team_membership-page-resource'),
     (u'start', 0),
     (u'total_size', 2)]

Similarly, when a public team is a sub-team of a private team, non-members
cannot see the private team in the public team's super_team's attribute.

    >>> admin_browser.open('http://launchpad.dev/~myteam/+addmember')
    >>> admin_browser.getControl('New member').value = 'guadamen'
    >>> admin_browser.getControl('Add Member').click()
    >>> admin_browser.open(
    ...     'http://launchpad.dev/~guadamen/+invitation/myteam')
    >>> admin_browser.getControl('Accept').click()

    >>> team = user_webservice.get('/~guadamen').jsonBody()
    >>> super_teams = user_webservice.get(
    ...     team['super_teams_collection_link']).jsonBody()
    >>> print super_teams['entries']
    []

But a user with the proper permissions can see the private super team.

    >>> team = webservice.get('/~guadamen').jsonBody()
    >>> super_teams = webservice.get(
    ...     team['super_teams_collection_link']).jsonBody()
    >>> print len(super_teams['entries'])
    1
    >>> print super_teams['entries'][0]['self_link']
    http://api.launchpad.dev/beta/~myteam


= Changing team visibility =

New teams when created have public visibility.  That attribute can be
changed by admins and commercial admins but not by regular users.

    >>> # Create a webservice object for commercial-admins.
    >>> from zope.component import getUtility
    >>> from canonical.launchpad.ftests import ANONYMOUS, login, logout
    >>> from lp.registry.interfaces.person import IPersonSet
    >>> from canonical.launchpad.testing.pages import webservice_for_person
    >>> from canonical.launchpad.webapp.interfaces import OAuthPermission
    >>> login(ANONYMOUS)
    >>> commercial_admin = getUtility(IPersonSet).getByName(
    ...     'commercial-admins').activemembers[0]
    >>> logout()
    >>> comm_webservice = webservice_for_person(
    ...     commercial_admin, permission=OAuthPermission.WRITE_PRIVATE)

    >>> print comm_webservice.named_post(
    ...    "/people", "newTeam", {},
    ...    name='my-new-team', display_name="My New Team")
    HTTP/1.1 201 Created
    ...
    Location: http://.../~my-new-team
    ...
    >>> team = webservice.get('/~my-new-team').jsonBody()
    >>> print team['self_link']
    http://api.launchpad.dev/.../~my-new-team
    >>> print team['visibility']
    Public

A commercial admin may change the visibility.  There is no helper
method to do it, but it can be changed via a patch.

    >>> import simplejson
    >>> def modify_team(team, representation, method, service):
    ...     "A helper function to send a PUT or PATCH request to a team."
    ...     headers = {'Content-type': 'application/json'}
    ...     return service(team, method,
    ...                    simplejson.dumps(representation),
    ...                    headers)

    >>> print modify_team(
    ...     '/~my-new-team', {'visibility' : 'Private Membership'},
    ...     'PATCH', comm_webservice)
    HTTP/1.1 209 Content Returned
    ...
    Content-Type: application/json
    ...
    <BLANKLINE>
    {...}

    >>> team = webservice.get('/~my-new-team').jsonBody()
    >>> print team['visibility']
    Private Membership

As an admin, Salgado can also change the team's visibility.

    >>> print modify_team(
    ...     '/~my-new-team', {'visibility' : 'Public'},
    ...     'PATCH', webservice)
    HTTP/1.1 209 Content Returned
    ...
    Content-Type: application/json
    ...
    <BLANKLINE>
    {...}

    >>> team = webservice.get('/~my-new-team').jsonBody()
    >>> print team['visibility']
    Public

An unprivileged user is not able to change the visibility.

    >>> print modify_team('/~my-new-team', {'visibility' : 'Private Membership'},
    ...     'PATCH', user_webservice)
    HTTP/1.1 401 Unauthorized
    ...
