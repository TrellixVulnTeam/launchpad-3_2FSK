        Binary Package Release
        ^^^^^^^^^^^^^^^^^^^^^^

BinaryPackageRelease stores unique versions of binarypackagenames
across build records.

   >>> from canonical.launchpad.database import BinaryPackageRelease
   >>> from canonical.launchpad.interfaces import (
   ...       IBinaryPackageRelease, IBinaryPackageReleaseSet)
   >>> from zope.interface.verify import verifyObject

   >>> firefox_bin_release = BinaryPackageRelease.get(12)
   >>> verifyObject(IBinaryPackageRelease, firefox_bin_release)
   True


Useful properties:

   >>> firefox_bin_release.name, firefox_bin_release.version
   (u'mozilla-firefox', u'0.9')

   >>> firefox_bin_release.lastversions()
   []
   >>> from canonical.launchpad.interfaces import IDistroReleaseSet
   >>> warty = getUtility(IDistroReleaseSet).get(1)
   >>> warty.name
   u'warty'
   >>> hoary = getUtility(IDistroReleaseSet).get(3)
   >>> hoary.name
   u'hoary'


Check IBinaryPackageRelease.override() behaviour:

The override method does implicitly exactly the same than:

   BinaryPackagerelease.set(component=new_component,
                            section=new_section,
                            priority=new_priority)

but it only sets the not-empty given arguments, so you can override the
attributes exclusively. It only exists to improve the code clarity,
in ftp-master/queue tool and other scripts.

Display the current firefox component and section:

   >>> firefox_bin_release.component.name, firefox_bin_release.section.name
   (u'main', u'base')

Fetch brand new component, section and priority:

   >>> from canonical.launchpad.interfaces import (
   ...     IComponentSet, ISectionSet)
   >>> from canonical.lp.dbschema import PackagePublishingPriority
   >>> new_comp = getUtility(IComponentSet)['universe']
   >>> new_sec = getUtility(ISectionSet)['mail']
   >>> new_priority = PackagePublishingPriority.IMPORTANT

Override the current firefox with new component/section/priority:

   >>> firefox_bin_release.override(component=new_comp, section=new_sec,
   ...              priority=new_priority)

Check if it got overridden correctly:

   >>> firefox_bin_release.component.name, firefox_bin_release.section.name, firefox_bin_release.priority.name
   (u'universe', u'mail', 'IMPORTANT')

Override again; ensure that only the changed item actually changes:

   >>> new_sec = getUtility(ISectionSet)['net']
   >>> firefox_bin_release.override(section=new_sec)
   >>> (firefox_bin_release.component.name,
   ...  firefox_bin_release.section.name,
   ...  firefox_bin_release.priority.name)
   (u'universe', u'net', 'IMPORTANT')


Abort transaction to avoid error propagation of the new attributes:

   >>> import transaction
   >>> transaction.abort()


BinaryPackageReleaseSet utility:

   >>> binset = getUtility(IBinaryPackageReleaseSet)
   >>> verifyObject(IBinaryPackageReleaseSet, binset)
   True

   >>> ret = binset.findByNameInDistroRelease(warty.id, 'fire')
   >>> for item in ret:
   ...     print item.name
   mozilla-firefox

   >>> ret = binset.getByNameInDistroRelease(hoary.id, 'pmount')
   >>> for item in ret:
   ...     print item.name
   pmount

   >>> result = binset.findByNameInDistroRelease(warty.id, 'moz')
   >>> print len(list(result))
   1
   >>> result = binset.findByNameInDistroRelease(warty.id, 'nosuchpackage')
   >>> print len(list(result))
   0
   >>> result = binset.findByNameInDistroRelease(warty.id, 'Web Browser',
   ...                                           fti=True)
   >>> print len(list(result))
   1
   >>> result = binset.findByNameInDistroRelease(warty.id, 'X50keBLvzk',
   ...                                           fti=True)
   >>> print len(list(result))
   0
   >>> result = binset.findByNameInDistroRelease(warty.id, 'moz',
   ...                                           archtag="nosucharch")
   >>> print len(list(result))
   0


getByNameInDistroRelease
------------------------

   >>> result = binset.getByNameInDistroRelease(warty.id)
   >>> print len(list(result))
   2
   >>> result = binset.getByNameInDistroRelease(warty.id, 'mozilla-firefox')
   >>> print len(list(result))
   1
   >>> result = binset.getByNameInDistroRelease(warty.id, 'nosuchpackage')
   >>> print len(list(result))
   0
   >>> result = binset.getByNameInDistroRelease(warty.id, 'mozilla-firefox',
   ...                                          version='0.9')
   >>> print len(list(result))
   1
   >>> result = binset.getByNameInDistroRelease(warty.id, 'mozilla-firefox',
   ...                                          version='nosuchversion')
   >>> print len(list(result))
   0
   >>> result = binset.getByNameInDistroRelease(warty.id, 'mozilla-firefox',
   ...                                          archtag='i386')
   >>> print len(list(result))
   1
   >>> result = binset.getByNameInDistroRelease(warty.id, 'mozilla-firefox',
   ...                                          archtag='nosucharch')
   >>> print len(list(result))
   0

XXX: bug 5947, still lacking tests for getByNameVersion, getByArchTag,
     getDistroReleasePackages and getBySourceName -- kiko, 2006-02-22

