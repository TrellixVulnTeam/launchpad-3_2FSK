Support Contacts
================

A support contact is a person who automatically gets subscribe to new
support request. A person can choose to be a support contact for a
product, distribution, or a specific source package within a
distribution.

Product Support Contacts
------------------------

Let's take a look at Firefox, currently it doesn't have any support
contacts:

    >>> login('test@canonical.com')
    >>> from canonical.launchpad.interfaces import IProductSet
    >>> firefox = getUtility(IProductSet).getByName('firefox')
    >>> firefox.support_contacts
    []

If we file a new support request on Firefox, only the submitter gets
subscribed:

    >>> from canonical.launchpad.interfaces import IPersonSet
    >>> sample_person = getUtility(IPersonSet).getByEmail('test@canonical.com')
    >>> new_ticket = firefox.newTicket(
    ...     sample_person, 'New Ticket', 'New Ticket.')
    >>> for subscription in new_ticket.subscriptions:
    ...     print subscription.person.displayname
    Sample Person

If we add Foo Bar as a support contact of Firefox, he will be
subscribed to new support requests for Firefox:

    >>> foo_bar = getUtility(IPersonSet).getByEmail('foo.bar@canonical.com')
    >>> firefox.addSupportContact(foo_bar)
    True
    >>> for support_contact in firefox.support_contacts:
    ...     print support_contact.displayname
    Foo Bar

    >>> new_ticket = firefox.newTicket(
    ...     sample_person, 'New Ticket', 'New Ticket.')
    >>> for subscription in new_ticket.subscriptions:
    ...     print subscription.person.displayname
    Sample Person
    Foo Bar

Trying to add an existing support contact is a no-op:

    >>> firefox.addSupportContact(foo_bar)
    False
    >>> for support_contact in firefox.support_contacts:
    ...     print support_contact.displayname
    Foo Bar

If Foo Bar requests support on a product which he's a support contact
for, he will be subscribed only once:

    >>> new_ticket = firefox.newTicket(
    ...     foo_bar, 'New Ticket', 'New Ticket.')
    >>> for subscription in new_ticket.subscriptions:
    ...     print subscription.person.displayname
    Foo Bar

We can remove a support contact using removeSupportContact():

    >>> firefox.removeSupportContact(foo_bar)
    True
    >>> firefox.support_contacts
    []

Trying to remove a non-existing support contact does nothing:

    >>> firefox.removeSupportContact(foo_bar)
    False

Distribution Support Contacts
-----------------------------

Distribution support contacts work just like product bug contacts.
Debian currently doesn't have any support contacts:

    >>> from canonical.launchpad.interfaces import IDistributionSet
    >>> debian = getUtility(IDistributionSet).getByName('debian')
    >>> debian.support_contacts
    []

If we add Foo Bar as a support contact of Debian, he will be
subscribed to new support requests for Debian:

    >>> debian.addSupportContact(foo_bar)
    True
    >>> for support_contact in debian.support_contacts:
    ...     print support_contact.displayname
    Foo Bar

    >>> new_ticket = debian.newTicket(
    ...     sample_person, 'New Ticket', 'New Ticket.')
    >>> for subscription in new_ticket.subscriptions:
    ...     print subscription.person.displayname
    Sample Person
    Foo Bar

Trying to add an existing support contact is a no-op:

    >>> debian.addSupportContact(foo_bar)
    False
    >>> for support_contact in debian.support_contacts:
    ...     print support_contact.displayname
    Foo Bar

Foo Bar will also be subscribed to support request on source packages
in debian:

    >>> mozilla_debian = debian.getSourcePackage('mozilla-firefox')
    >>> mozilla_debian.support_contacts
    []
    >>> new_ticket = mozilla_debian.newTicket(
    ...     sample_person, 'New Ticket', 'New Ticket.')
    >>> for subscription in new_ticket.subscriptions:
    ...     print subscription.person.displayname
    Sample Person
    Foo Bar

If you are only interested in support request for Mozilla, you can
choose to be a contact of only that package, instead of for the whole
distribution:

    >>> sabdfl = getUtility(IPersonSet).getByEmail('mark@hbd.com')
    >>> mozilla_debian.addSupportContact(sabdfl)
    True
    >>> for support_contact in mozilla_debian.support_contacts:
    ...     print support_contact.displayname
    Mark Shuttleworth

    >>> new_ticket = mozilla_debian.newTicket(
    ...     sample_person, 'New Ticket', 'New Ticket.')
    >>> for subscription in new_ticket.subscriptions:
    ...     print subscription.person.displayname
    Sample Person
    Foo Bar
    Mark Shuttleworth

If we add Foo Bar as a support contact for Mozilla in Ubuntu, so that
he's both a support contact Ubuntu, and for Mozilla in Ubuntu, he won't
be subscribed twice for support requests on Mozilla:

    >>> mozilla_debian.addSupportContact(foo_bar)
    True
    >>> for support_contact in mozilla_debian.support_contacts:
    ...     print support_contact.displayname
    Mark Shuttleworth
    Foo Bar

    >>> new_ticket = mozilla_debian.newTicket(
    ...     sample_person, 'New Ticket', 'New Ticket.')
    >>> for subscription in new_ticket.subscriptions:
    ...     print subscription.person.displayname
    Sample Person
    Foo Bar
    Mark Shuttleworth

We can remove a support contact using removeSupportContact():

    >>> debian.removeSupportContact(foo_bar)
    True
    >>> debian.support_contacts
    []

    >>> mozilla_debian.removeSupportContact(sabdfl)
    True
    >>> mozilla_debian.removeSupportContact(foo_bar)
    True
    >>> mozilla_debian.support_contacts
    []

Trying to remove a non-existing support contact does nothing:

    >>> debian.removeSupportContact(foo_bar)
    False
    >>> mozilla_debian.removeSupportContact(sabdfl)
    False

